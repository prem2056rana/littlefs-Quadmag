
RM3100MAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000890c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08008a20  08008a20  00018a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e6c  08008e6c  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  08008e6c  08008e6c  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e6c  08008e6c  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08008e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000208  0800907c  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  0800907c  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f665  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272f  00000000  00000000  0002f896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00031fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00032be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019001  00000000  00000000  00033710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0d4  00000000  00000000  0004c711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c1e  00000000  00000000  0005a7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3403  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b4  00000000  00000000  000e3458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a04 	.word	0x08008a04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	08008a04 	.word	0x08008a04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <SET_COUNT>:
extern uint8_t read_X2, read_X1, read_X0;
extern uint8_t read_Y2, read_Y1, read_Y0;
extern uint8_t read_Z2, read_Z1, read_Z0;

//Initiate Cycle Count
void SET_COUNT() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_HIGH); //SSN HIGN
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8e:	4821      	ldr	r0, [pc, #132]	; (8001014 <SET_COUNT+0x90>)
 8000f90:	f001 fc5a 	bl	8002848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9a:	481e      	ldr	r0, [pc, #120]	; (8001014 <SET_COUNT+0x90>)
 8000f9c:	f001 fc54 	bl	8002848 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, rm3100_MSB_X_buf, sizeof(rm3100_MSB_X_buf), 1000); //Not need to necessary to send multiple value or register
 8000fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	491c      	ldr	r1, [pc, #112]	; (8001018 <SET_COUNT+0x94>)
 8000fa8:	481c      	ldr	r0, [pc, #112]	; (800101c <SET_COUNT+0x98>)
 8000faa:	f003 f863 	bl	8004074 <HAL_SPI_Transmit>
	//Initiate Count cycle
	HAL_SPI_Transmit(&hspi1, MSB_X_buf, sizeof(MSB_X_buf), 1000);
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	491a      	ldr	r1, [pc, #104]	; (8001020 <SET_COUNT+0x9c>)
 8000fb6:	4819      	ldr	r0, [pc, #100]	; (800101c <SET_COUNT+0x98>)
 8000fb8:	f003 f85c 	bl	8004074 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_X_buf, sizeof(LSB_X_buf), 1000);
 8000fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4918      	ldr	r1, [pc, #96]	; (8001024 <SET_COUNT+0xa0>)
 8000fc4:	4815      	ldr	r0, [pc, #84]	; (800101c <SET_COUNT+0x98>)
 8000fc6:	f003 f855 	bl	8004074 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Y_buf, sizeof(MSB_Y_buf), 1000);
 8000fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4915      	ldr	r1, [pc, #84]	; (8001028 <SET_COUNT+0xa4>)
 8000fd2:	4812      	ldr	r0, [pc, #72]	; (800101c <SET_COUNT+0x98>)
 8000fd4:	f003 f84e 	bl	8004074 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Y_buf, sizeof(LSB_Y_buf), 1000);
 8000fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4913      	ldr	r1, [pc, #76]	; (800102c <SET_COUNT+0xa8>)
 8000fe0:	480e      	ldr	r0, [pc, #56]	; (800101c <SET_COUNT+0x98>)
 8000fe2:	f003 f847 	bl	8004074 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Z_buf, sizeof(MSB_Z_buf), 1000);
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	2201      	movs	r2, #1
 8000fec:	4910      	ldr	r1, [pc, #64]	; (8001030 <SET_COUNT+0xac>)
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <SET_COUNT+0x98>)
 8000ff0:	f003 f840 	bl	8004074 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Z_buf, sizeof(LSB_Z_buf), 1000);
 8000ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	490e      	ldr	r1, [pc, #56]	; (8001034 <SET_COUNT+0xb0>)
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <SET_COUNT+0x98>)
 8000ffe:	f003 f839 	bl	8004074 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_HIGH);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <SET_COUNT+0x90>)
 800100a:	f001 fc1d 	bl	8002848 <HAL_GPIO_WritePin>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010c00 	.word	0x40010c00
 8001018:	20000004 	.word	0x20000004
 800101c:	20000304 	.word	0x20000304
 8001020:	20000224 	.word	0x20000224
 8001024:	20000008 	.word	0x20000008
 8001028:	20000228 	.word	0x20000228
 800102c:	2000000c 	.word	0x2000000c
 8001030:	2000022c 	.word	0x2000022c
 8001034:	20000010 	.word	0x20000010

08001038 <Continuous_Mode>:
//Initiate Continuous Measurements Mode

void Continuous_Mode() {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_HIGH); //SSN HIGN
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <Continuous_Mode+0x48>)
 8001044:	f001 fc00 	bl	8002848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <Continuous_Mode+0x48>)
 8001050:	f001 fbfa 	bl	8002848 <HAL_GPIO_WritePin>
	//Initiate Continuous Measurements Mode
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_buf, sizeof(rm3100_cmm_buf), 1000);
 8001054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001058:	2201      	movs	r2, #1
 800105a:	490a      	ldr	r1, [pc, #40]	; (8001084 <Continuous_Mode+0x4c>)
 800105c:	480a      	ldr	r0, [pc, #40]	; (8001088 <Continuous_Mode+0x50>)
 800105e:	f003 f809 	bl	8004074 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_mod_buf, sizeof(rm3100_cmm_mod_buf),
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	2201      	movs	r2, #1
 8001068:	4908      	ldr	r1, [pc, #32]	; (800108c <Continuous_Mode+0x54>)
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <Continuous_Mode+0x50>)
 800106c:	f003 f802 	bl	8004074 <HAL_SPI_Transmit>
			1000);
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_HIGH);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001076:	4802      	ldr	r0, [pc, #8]	; (8001080 <Continuous_Mode+0x48>)
 8001078:	f001 fbe6 	bl	8002848 <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010c00 	.word	0x40010c00
 8001084:	20000014 	.word	0x20000014
 8001088:	20000304 	.word	0x20000304
 800108c:	20000018 	.word	0x20000018

08001090 <TMRC_Mode>:
//Initiate Time Measurements and Rate Control

void TMRC_Mode() {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_HIGH);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109a:	480f      	ldr	r0, [pc, #60]	; (80010d8 <TMRC_Mode+0x48>)
 800109c:	f001 fbd4 	bl	8002848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_LOW);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <TMRC_Mode+0x48>)
 80010a8:	f001 fbce 	bl	8002848 <HAL_GPIO_WritePin>
	//initiate Time Measurements and Reset Control
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_add_buf, sizeof(rm3100_tmrc_add_buf),
 80010ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b0:	2201      	movs	r2, #1
 80010b2:	490a      	ldr	r1, [pc, #40]	; (80010dc <TMRC_Mode+0x4c>)
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <TMRC_Mode+0x50>)
 80010b6:	f002 ffdd 	bl	8004074 <HAL_SPI_Transmit>
			1000);
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_Val_buf, sizeof(rm3100_tmrc_Val_buf),
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	2201      	movs	r2, #1
 80010c0:	4908      	ldr	r1, [pc, #32]	; (80010e4 <TMRC_Mode+0x54>)
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <TMRC_Mode+0x50>)
 80010c4:	f002 ffd6 	bl	8004074 <HAL_SPI_Transmit>
			1000);
//	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_read_buf, sizeof(rm3100_tmrc_read_buf),
//			1000);
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_HIGH);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ce:	4802      	ldr	r0, [pc, #8]	; (80010d8 <TMRC_Mode+0x48>)
 80010d0:	f001 fbba 	bl	8002848 <HAL_GPIO_WritePin>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40010c00 	.word	0x40010c00
 80010dc:	2000001c 	.word	0x2000001c
 80010e0:	20000304 	.word	0x20000304
 80010e4:	20000020 	.word	0x20000020

080010e8 <Mea_Result>:

//Read Measurements Results
void Mea_Result() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_HIGH);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f2:	482b      	ldr	r0, [pc, #172]	; (80011a0 <Mea_Result+0xb8>)
 80010f4:	f001 fba8 	bl	8002848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_LOW);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fe:	4828      	ldr	r0, [pc, #160]	; (80011a0 <Mea_Result+0xb8>)
 8001100:	f001 fba2 	bl	8002848 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, MRRW2_X_buf, sizeof(MRRW2_X_buf), 1000);
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	2201      	movs	r2, #1
 800110a:	4926      	ldr	r1, [pc, #152]	; (80011a4 <Mea_Result+0xbc>)
 800110c:	4826      	ldr	r0, [pc, #152]	; (80011a8 <Mea_Result+0xc0>)
 800110e:	f002 ffb1 	bl	8004074 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &read_X2, sizeof(read_X2), 1000);
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	2201      	movs	r2, #1
 8001118:	4924      	ldr	r1, [pc, #144]	; (80011ac <Mea_Result+0xc4>)
 800111a:	4823      	ldr	r0, [pc, #140]	; (80011a8 <Mea_Result+0xc0>)
 800111c:	f003 f8ed 	bl	80042fa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X1, sizeof(read_X1), 1000);
 8001120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001124:	2201      	movs	r2, #1
 8001126:	4922      	ldr	r1, [pc, #136]	; (80011b0 <Mea_Result+0xc8>)
 8001128:	481f      	ldr	r0, [pc, #124]	; (80011a8 <Mea_Result+0xc0>)
 800112a:	f003 f8e6 	bl	80042fa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X0, sizeof(read_X0), 1000);
 800112e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001132:	2201      	movs	r2, #1
 8001134:	491f      	ldr	r1, [pc, #124]	; (80011b4 <Mea_Result+0xcc>)
 8001136:	481c      	ldr	r0, [pc, #112]	; (80011a8 <Mea_Result+0xc0>)
 8001138:	f003 f8df 	bl	80042fa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y2, sizeof(read_Y2), 1000);
 800113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001140:	2201      	movs	r2, #1
 8001142:	491d      	ldr	r1, [pc, #116]	; (80011b8 <Mea_Result+0xd0>)
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <Mea_Result+0xc0>)
 8001146:	f003 f8d8 	bl	80042fa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y1, sizeof(read_Y1), 1000);
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	2201      	movs	r2, #1
 8001150:	491a      	ldr	r1, [pc, #104]	; (80011bc <Mea_Result+0xd4>)
 8001152:	4815      	ldr	r0, [pc, #84]	; (80011a8 <Mea_Result+0xc0>)
 8001154:	f003 f8d1 	bl	80042fa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y0, sizeof(read_Y0), 1000);
 8001158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115c:	2201      	movs	r2, #1
 800115e:	4918      	ldr	r1, [pc, #96]	; (80011c0 <Mea_Result+0xd8>)
 8001160:	4811      	ldr	r0, [pc, #68]	; (80011a8 <Mea_Result+0xc0>)
 8001162:	f003 f8ca 	bl	80042fa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z2, sizeof(read_Z2), 1000);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	2201      	movs	r2, #1
 800116c:	4915      	ldr	r1, [pc, #84]	; (80011c4 <Mea_Result+0xdc>)
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <Mea_Result+0xc0>)
 8001170:	f003 f8c3 	bl	80042fa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z1, sizeof(read_Z1), 1000);
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	2201      	movs	r2, #1
 800117a:	4913      	ldr	r1, [pc, #76]	; (80011c8 <Mea_Result+0xe0>)
 800117c:	480a      	ldr	r0, [pc, #40]	; (80011a8 <Mea_Result+0xc0>)
 800117e:	f003 f8bc 	bl	80042fa <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z0, sizeof(read_Z0), 1000);
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	2201      	movs	r2, #1
 8001188:	4910      	ldr	r1, [pc, #64]	; (80011cc <Mea_Result+0xe4>)
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <Mea_Result+0xc0>)
 800118c:	f003 f8b5 	bl	80042fa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, SS4_Pin, SPI_SSN_HIGH);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001196:	4802      	ldr	r0, [pc, #8]	; (80011a0 <Mea_Result+0xb8>)
 8001198:	f001 fb56 	bl	8002848 <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010c00 	.word	0x40010c00
 80011a4:	20000024 	.word	0x20000024
 80011a8:	20000304 	.word	0x20000304
 80011ac:	200002e2 	.word	0x200002e2
 80011b0:	200002e0 	.word	0x200002e0
 80011b4:	200002fc 	.word	0x200002fc
 80011b8:	200003a6 	.word	0x200003a6
 80011bc:	2000028c 	.word	0x2000028c
 80011c0:	200003a5 	.word	0x200003a5
 80011c4:	200002e1 	.word	0x200002e1
 80011c8:	200002cc 	.word	0x200002cc
 80011cc:	200003a4 	.word	0x200003a4

080011d0 <set_time>:
    }
}

//Set time
void set_time (void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    sTime.Hours = 0x04; // set hours
 80011d6:	2304      	movs	r3, #4
 80011d8:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x09; // set minutes
 80011da:	2309      	movs	r3, #9
 80011dc:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x30; // set seconds
 80011de:	2330      	movs	r3, #48	; 0x30
 80011e0:	71bb      	strb	r3, [r7, #6]
//    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE; // Remove this line
//    sTime.TimeFormat = RTC_HOURFORMAT12_AM; // Remove this line
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2201      	movs	r2, #1
 80011e6:	4619      	mov	r1, r3
 80011e8:	4812      	ldr	r0, [pc, #72]	; (8001234 <set_time+0x64>)
 80011ea:	f002 f957 	bl	800349c <HAL_RTC_SetTime>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <set_time+0x28>
    {
        Error_Handler();
 80011f4:	f000 fb36 	bl	8001864 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80011f8:	2303      	movs	r3, #3
 80011fa:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_MAY;
 80011fc:	2305      	movs	r3, #5
 80011fe:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x15; // date
 8001200:	2315      	movs	r3, #21
 8001202:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x24; // year
 8001204:	2324      	movs	r3, #36	; 0x24
 8001206:	70fb      	strb	r3, [r7, #3]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	2201      	movs	r2, #1
 800120c:	4619      	mov	r1, r3
 800120e:	4809      	ldr	r0, [pc, #36]	; (8001234 <set_time+0x64>)
 8001210:	f002 fab4 	bl	800377c <HAL_RTC_SetDate>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <set_time+0x4e>
    {
        Error_Handler();
 800121a:	f000 fb23 	bl	8001864 <Error_Handler>
    }
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 800121e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001222:	2101      	movs	r1, #1
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <set_time+0x64>)
 8001226:	f002 fe87 	bl	8003f38 <HAL_RTCEx_BKUPWrite>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200002e8 	.word	0x200002e8

08001238 <Comb_measurement>:
    /* Get the RTC current Date */
    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
}

//Combine Measurements
void Comb_measurement() {
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0

    // Get current time from RTC
    RTC_DateTypeDef gDate;
    RTC_TimeTypeDef gTime;
    // Get current time from RTC
    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	4619      	mov	r1, r3
 8001244:	4888      	ldr	r0, [pc, #544]	; (8001468 <Comb_measurement+0x230>)
 8001246:	f002 f9c1 	bl	80035cc <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	4885      	ldr	r0, [pc, #532]	; (8001468 <Comb_measurement+0x230>)
 8001252:	f002 fb49 	bl	80038e8 <HAL_RTC_GetDate>

    // Combine bytes for X-axis
    mag_X = (read_X2 << 16) | (read_X1 << 8) | read_X0;
 8001256:	4b85      	ldr	r3, [pc, #532]	; (800146c <Comb_measurement+0x234>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	041a      	lsls	r2, r3, #16
 800125c:	4b84      	ldr	r3, [pc, #528]	; (8001470 <Comb_measurement+0x238>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	4313      	orrs	r3, r2
 8001264:	4a83      	ldr	r2, [pc, #524]	; (8001474 <Comb_measurement+0x23c>)
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	4313      	orrs	r3, r2
 800126a:	461a      	mov	r2, r3
 800126c:	4b82      	ldr	r3, [pc, #520]	; (8001478 <Comb_measurement+0x240>)
 800126e:	601a      	str	r2, [r3, #0]
    // Extend the sign bit for negative values
    signed_mag_X = (mag_X & 0x800000) ? (mag_X | 0xFF000000) : mag_X;
 8001270:	4b81      	ldr	r3, [pc, #516]	; (8001478 <Comb_measurement+0x240>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <Comb_measurement+0x50>
 800127c:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <Comb_measurement+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001284:	461a      	mov	r2, r3
 8001286:	e002      	b.n	800128e <Comb_measurement+0x56>
 8001288:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <Comb_measurement+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b7b      	ldr	r3, [pc, #492]	; (800147c <Comb_measurement+0x244>)
 8001290:	601a      	str	r2, [r3, #0]

    // Combine bytes for Y-axis
    mag_Y = (read_Y2 << 16) | (read_Y1 << 8) | read_Y0;
 8001292:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <Comb_measurement+0x248>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	041a      	lsls	r2, r3, #16
 8001298:	4b7a      	ldr	r3, [pc, #488]	; (8001484 <Comb_measurement+0x24c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	4313      	orrs	r3, r2
 80012a0:	4a79      	ldr	r2, [pc, #484]	; (8001488 <Comb_measurement+0x250>)
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b78      	ldr	r3, [pc, #480]	; (800148c <Comb_measurement+0x254>)
 80012aa:	601a      	str	r2, [r3, #0]
    // Extend the sign bit for negative values
    signed_mag_Y = (mag_Y & 0x800000) ? (mag_Y | 0xFF000000) : mag_Y;
 80012ac:	4b77      	ldr	r3, [pc, #476]	; (800148c <Comb_measurement+0x254>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <Comb_measurement+0x8c>
 80012b8:	4b74      	ldr	r3, [pc, #464]	; (800148c <Comb_measurement+0x254>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012c0:	461a      	mov	r2, r3
 80012c2:	e002      	b.n	80012ca <Comb_measurement+0x92>
 80012c4:	4b71      	ldr	r3, [pc, #452]	; (800148c <Comb_measurement+0x254>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b71      	ldr	r3, [pc, #452]	; (8001490 <Comb_measurement+0x258>)
 80012cc:	601a      	str	r2, [r3, #0]

    // Combine bytes for Z-axis
    mag_Z = (read_Z2 << 16) | (read_Z1 << 8) | read_Z0;
 80012ce:	4b71      	ldr	r3, [pc, #452]	; (8001494 <Comb_measurement+0x25c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	041a      	lsls	r2, r3, #16
 80012d4:	4b70      	ldr	r3, [pc, #448]	; (8001498 <Comb_measurement+0x260>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	4313      	orrs	r3, r2
 80012dc:	4a6f      	ldr	r2, [pc, #444]	; (800149c <Comb_measurement+0x264>)
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b6e      	ldr	r3, [pc, #440]	; (80014a0 <Comb_measurement+0x268>)
 80012e6:	601a      	str	r2, [r3, #0]
    // Extend the sign bit for negative values
    signed_mag_Z = (mag_Z & 0x800000) ? (mag_Z | 0xFF000000) : mag_Z;
 80012e8:	4b6d      	ldr	r3, [pc, #436]	; (80014a0 <Comb_measurement+0x268>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <Comb_measurement+0xc8>
 80012f4:	4b6a      	ldr	r3, [pc, #424]	; (80014a0 <Comb_measurement+0x268>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012fc:	461a      	mov	r2, r3
 80012fe:	e002      	b.n	8001306 <Comb_measurement+0xce>
 8001300:	4b67      	ldr	r3, [pc, #412]	; (80014a0 <Comb_measurement+0x268>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <Comb_measurement+0x26c>)
 8001308:	601a      	str	r2, [r3, #0]

    // Calculate magnitude
    magnitude = sqrt((float)(signed_mag_X * signed_mag_X) + (signed_mag_Y * signed_mag_Y) + (signed_mag_Z * signed_mag_Z));
 800130a:	4b5c      	ldr	r3, [pc, #368]	; (800147c <Comb_measurement+0x244>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a5b      	ldr	r2, [pc, #364]	; (800147c <Comb_measurement+0x244>)
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fc90 	bl	8000c3c <__aeabi_i2f>
 800131c:	4604      	mov	r4, r0
 800131e:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <Comb_measurement+0x258>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a5b      	ldr	r2, [pc, #364]	; (8001490 <Comb_measurement+0x258>)
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fc86 	bl	8000c3c <__aeabi_i2f>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff fbcd 	bl	8000ad4 <__addsf3>
 800133a:	4603      	mov	r3, r0
 800133c:	461c      	mov	r4, r3
 800133e:	4b59      	ldr	r3, [pc, #356]	; (80014a4 <Comb_measurement+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <Comb_measurement+0x26c>)
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fc76 	bl	8000c3c <__aeabi_i2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4619      	mov	r1, r3
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff fbbd 	bl	8000ad4 <__addsf3>
 800135a:	4603      	mov	r3, r0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f863 	bl	8000428 <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f007 fa73 	bl	8008854 <sqrt>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fb87 	bl	8000a88 <__aeabi_d2uiz>
 800137a:	4603      	mov	r3, r0
 800137c:	4a4a      	ldr	r2, [pc, #296]	; (80014a8 <Comb_measurement+0x270>)
 800137e:	6013      	str	r3, [r2, #0]

    // Calculate axis values
    X_axis = (float)signed_mag_X / gain;
 8001380:	4b3e      	ldr	r3, [pc, #248]	; (800147c <Comb_measurement+0x244>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fc59 	bl	8000c3c <__aeabi_i2f>
 800138a:	4602      	mov	r2, r0
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <Comb_measurement+0x274>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f7ff fd5a 	bl	8000e4c <__aeabi_fdiv>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <Comb_measurement+0x278>)
 800139e:	601a      	str	r2, [r3, #0]
    Y_axis = (float)signed_mag_Y / gain;
 80013a0:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <Comb_measurement+0x258>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fc49 	bl	8000c3c <__aeabi_i2f>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <Comb_measurement+0x274>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f7ff fd4a 	bl	8000e4c <__aeabi_fdiv>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <Comb_measurement+0x27c>)
 80013be:	601a      	str	r2, [r3, #0]
    Z_axis = (float)signed_mag_Z / gain;
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <Comb_measurement+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc39 	bl	8000c3c <__aeabi_i2f>
 80013ca:	4602      	mov	r2, r0
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <Comb_measurement+0x274>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4610      	mov	r0, r2
 80013d4:	f7ff fd3a 	bl	8000e4c <__aeabi_fdiv>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <Comb_measurement+0x280>)
 80013de:	601a      	str	r2, [r3, #0]
    Magnitude = (float)magnitude / gain;
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <Comb_measurement+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fc25 	bl	8000c34 <__aeabi_ui2f>
 80013ea:	4602      	mov	r2, r0
 80013ec:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <Comb_measurement+0x274>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4610      	mov	r0, r2
 80013f4:	f7ff fd2a 	bl	8000e4c <__aeabi_fdiv>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <Comb_measurement+0x284>)
 80013fe:	601a      	str	r2, [r3, #0]




    //Debug print statements for results
    myDebug("%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001400:	783b      	ldrb	r3, [r7, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	787b      	ldrb	r3, [r7, #1]
 8001406:	461a      	mov	r2, r3
 8001408:	78bb      	ldrb	r3, [r7, #2]
 800140a:	482d      	ldr	r0, [pc, #180]	; (80014c0 <Comb_measurement+0x288>)
 800140c:	f000 f85e 	bl	80014cc <myDebug>
    myDebug(" %.2f  \t", X_axis);
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <Comb_measurement+0x278>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f807 	bl	8000428 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4829      	ldr	r0, [pc, #164]	; (80014c4 <Comb_measurement+0x28c>)
 8001420:	f000 f854 	bl	80014cc <myDebug>
    myDebug(" %.2f  \t", Y_axis);
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <Comb_measurement+0x27c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fffd 	bl	8000428 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4824      	ldr	r0, [pc, #144]	; (80014c4 <Comb_measurement+0x28c>)
 8001434:	f000 f84a 	bl	80014cc <myDebug>
    myDebug(" %.2f  \t", Z_axis);
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <Comb_measurement+0x280>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe fff3 	bl	8000428 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	481f      	ldr	r0, [pc, #124]	; (80014c4 <Comb_measurement+0x28c>)
 8001448:	f000 f840 	bl	80014cc <myDebug>
    myDebug(" %.2f  \n", Magnitude);
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <Comb_measurement+0x284>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ffe9 	bl	8000428 <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	481b      	ldr	r0, [pc, #108]	; (80014c8 <Comb_measurement+0x290>)
 800145c:	f000 f836 	bl	80014cc <myDebug>
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	200002e8 	.word	0x200002e8
 800146c:	200002e2 	.word	0x200002e2
 8001470:	200002e0 	.word	0x200002e0
 8001474:	200002fc 	.word	0x200002fc
 8001478:	200002e4 	.word	0x200002e4
 800147c:	20000284 	.word	0x20000284
 8001480:	200003a6 	.word	0x200003a6
 8001484:	2000028c 	.word	0x2000028c
 8001488:	200003a5 	.word	0x200003a5
 800148c:	2000023c 	.word	0x2000023c
 8001490:	20000300 	.word	0x20000300
 8001494:	200002e1 	.word	0x200002e1
 8001498:	200002cc 	.word	0x200002cc
 800149c:	200003a4 	.word	0x200003a4
 80014a0:	200002c4 	.word	0x200002c4
 80014a4:	200002dc 	.word	0x200002dc
 80014a8:	200002c8 	.word	0x200002c8
 80014ac:	20000000 	.word	0x20000000
 80014b0:	200002d8 	.word	0x200002d8
 80014b4:	200002d0 	.word	0x200002d0
 80014b8:	20000288 	.word	0x20000288
 80014bc:	200002d4 	.word	0x200002d4
 80014c0:	08008a20 	.word	0x08008a20
 80014c4:	08008a30 	.word	0x08008a30
 80014c8:	08008a3c 	.word	0x08008a3c

080014cc <myDebug>:

void myDebug(const char *fmt, ...) {
 80014cc:	b40f      	push	{r0, r1, r2, r3}
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b09a      	sub	sp, #104	; 0x68
 80014d2:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 80014d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014d8:	667b      	str	r3, [r7, #100]	; 0x64
    char buffer[100];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80014da:	4638      	mov	r0, r7
 80014dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80014e0:	2164      	movs	r1, #100	; 0x64
 80014e2:	f004 ff8f 	bl	8006404 <vsniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 80014e6:	463b      	mov	r3, r7
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7fe fe31 	bl	8000150 <strlen>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4639      	mov	r1, r7
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <myDebug+0x40>)
 80014fa:	f003 fb0f 	bl	8004b1c <HAL_UART_Transmit>
    va_end(args);
						}
 80014fe:	bf00      	nop
 8001500:	3768      	adds	r7, #104	; 0x68
 8001502:	46bd      	mov	sp, r7
 8001504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001508:	b004      	add	sp, #16
 800150a:	4770      	bx	lr
 800150c:	2000035c 	.word	0x2000035c

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001514:	f000 fc02 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001518:	f000 f81c 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151c:	f000 f940 	bl	80017a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001520:	f000 f8c0 	bl	80016a4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001524:	f000 f8f4 	bl	8001710 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001528:	f000 f91c 	bl	8001764 <MX_DMA_Init>
  MX_RTC_Init();
 800152c:	f000 f870 	bl	8001610 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  SET_COUNT();
 8001530:	f7ff fd28 	bl	8000f84 <SET_COUNT>
  Continuous_Mode();
 8001534:	f7ff fd80 	bl	8001038 <Continuous_Mode>
  TMRC_Mode();
 8001538:	f7ff fdaa 	bl	8001090 <TMRC_Mode>
  set_time ();
 800153c:	f7ff fe48 	bl	80011d0 <set_time>
  HAL_UART_Receive_DMA(&huart2, rx_ack, sizeof(rx_ack));
 8001540:	2232      	movs	r2, #50	; 0x32
 8001542:	4902      	ldr	r1, [pc, #8]	; (800154c <main+0x3c>)
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <main+0x40>)
 8001546:	f003 fb6c 	bl	8004c22 <HAL_UART_Receive_DMA>
//  UART_TransmitString("Magnitude(uT)\n");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800154a:	e7fe      	b.n	800154a <main+0x3a>
 800154c:	20000290 	.word	0x20000290
 8001550:	2000035c 	.word	0x2000035c

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	; 0x50
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155e:	2228      	movs	r2, #40	; 0x28
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f004 faba 	bl	8005adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001584:	2309      	movs	r3, #9
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001592:	2301      	movs	r3, #1
 8001594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001596:	2301      	movs	r3, #1
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159a:	2302      	movs	r3, #2
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800159e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 f96e 	bl	8002890 <HAL_RCC_OscConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80015ba:	f000 f953 	bl	8001864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015be:	230f      	movs	r3, #15
 80015c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2102      	movs	r1, #2
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 fbd8 	bl	8002d90 <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015e6:	f000 f93d 	bl	8001864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015ea:	2301      	movs	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 fd58 	bl	80030ac <HAL_RCCEx_PeriphCLKConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001602:	f000 f92f 	bl	8001864 <Error_Handler>
  }
}
 8001606:	bf00      	nop
 8001608:	3750      	adds	r7, #80	; 0x50
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2100      	movs	r1, #0
 800161a:	460a      	mov	r2, r1
 800161c:	801a      	strh	r2, [r3, #0]
 800161e:	460a      	mov	r2, r1
 8001620:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <MX_RTC_Init+0x8c>)
 8001628:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <MX_RTC_Init+0x90>)
 800162a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MX_RTC_Init+0x8c>)
 800162e:	f04f 32ff 	mov.w	r2, #4294967295
 8001632:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <MX_RTC_Init+0x8c>)
 8001636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800163c:	4817      	ldr	r0, [pc, #92]	; (800169c <MX_RTC_Init+0x8c>)
 800163e:	f001 fea1 	bl	8003384 <HAL_RTC_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001648:	f000 f90c 	bl	8001864 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x2;
 800164c:	2302      	movs	r3, #2
 800164e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8001650:	2338      	movs	r3, #56	; 0x38
 8001652:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x45;
 8001654:	2345      	movs	r3, #69	; 0x45
 8001656:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2201      	movs	r2, #1
 800165c:	4619      	mov	r1, r3
 800165e:	480f      	ldr	r0, [pc, #60]	; (800169c <MX_RTC_Init+0x8c>)
 8001660:	f001 ff1c 	bl	800349c <HAL_RTC_SetTime>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800166a:	f000 f8fb 	bl	8001864 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800166e:	2303      	movs	r3, #3
 8001670:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8001672:	2305      	movs	r3, #5
 8001674:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x15;
 8001676:	2315      	movs	r3, #21
 8001678:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 800167a:	2324      	movs	r3, #36	; 0x24
 800167c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	2201      	movs	r2, #1
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_RTC_Init+0x8c>)
 8001686:	f002 f879 	bl	800377c <HAL_RTC_SetDate>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001690:	f000 f8e8 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002e8 	.word	0x200002e8
 80016a0:	40002800 	.word	0x40002800

080016a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_SPI1_Init+0x64>)
 80016aa:	4a18      	ldr	r2, [pc, #96]	; (800170c <MX_SPI1_Init+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_SPI1_Init+0x64>)
 80016b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_SPI1_Init+0x64>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_SPI1_Init+0x64>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_SPI1_Init+0x64>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_SPI1_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_SPI1_Init+0x64>)
 80016d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_SPI1_Init+0x64>)
 80016d8:	2230      	movs	r2, #48	; 0x30
 80016da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <MX_SPI1_Init+0x64>)
 80016de:	2200      	movs	r2, #0
 80016e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_SPI1_Init+0x64>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <MX_SPI1_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_SPI1_Init+0x64>)
 80016f0:	220a      	movs	r2, #10
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_SPI1_Init+0x64>)
 80016f6:	f002 fc39 	bl	8003f6c <HAL_SPI_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001700:	f000 f8b0 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000304 	.word	0x20000304
 800170c:	40013000 	.word	0x40013000

08001710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_USART2_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800171c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001748:	f003 f998 	bl	8004a7c <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f000 f887 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000035c 	.word	0x2000035c
 8001760:	40004400 	.word	0x40004400

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_DMA_Init+0x38>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <MX_DMA_Init+0x38>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6153      	str	r3, [r2, #20]
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_DMA_Init+0x38>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	2010      	movs	r0, #16
 8001788:	f000 fc01 	bl	8001f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800178c:	2010      	movs	r0, #16
 800178e:	f000 fc1a 	bl	8001fc6 <HAL_NVIC_EnableIRQ>

}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_GPIO_Init+0x90>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <MX_GPIO_Init+0x90>)
 80017ba:	f043 0320 	orr.w	r3, r3, #32
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <MX_GPIO_Init+0x90>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <MX_GPIO_Init+0x90>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <MX_GPIO_Init+0x90>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MX_GPIO_Init+0x90>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_GPIO_Init+0x90>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a11      	ldr	r2, [pc, #68]	; (8001830 <MX_GPIO_Init+0x90>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_GPIO_Init+0x90>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS4_Pin|MSN3_DRDY4_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f640 0108 	movw	r1, #2056	; 0x808
 8001802:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_GPIO_Init+0x94>)
 8001804:	f001 f820 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS4_Pin MSN3_DRDY4_Pin */
  GPIO_InitStruct.Pin = SS4_Pin|MSN3_DRDY4_Pin;
 8001808:	f640 0308 	movw	r3, #2056	; 0x808
 800180c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2302      	movs	r3, #2
 8001818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	4619      	mov	r1, r3
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_GPIO_Init+0x94>)
 8001822:	f000 fe8d 	bl	8002540 <HAL_GPIO_Init>

}
 8001826:	bf00      	nop
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	40010c00 	.word	0x40010c00

08001838 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart2, ack, sizeof(ack), 1000);
//	if(memcmp(ack, rx_ack, sizeof(rx_ack))==0){
	Mea_Result();
 8001840:	f7ff fc52 	bl	80010e8 <Mea_Result>
	Comb_measurement();
 8001844:	f7ff fcf8 	bl	8001238 <Comb_measurement>
	HAL_UART_Receive_DMA(&huart2, rx_ack, sizeof(rx_ack));
 8001848:	2232      	movs	r2, #50	; 0x32
 800184a:	4904      	ldr	r1, [pc, #16]	; (800185c <HAL_UART_RxCpltCallback+0x24>)
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <HAL_UART_RxCpltCallback+0x28>)
 800184e:	f003 f9e8 	bl	8004c22 <HAL_UART_Receive_DMA>
//	}
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000290 	.word	0x20000290
 8001860:	2000035c 	.word	0x2000035c

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	e7fe      	b.n	800186c <Error_Handler+0x8>
	...

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_MspInit+0x5c>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_MspInit+0x5c>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6193      	str	r3, [r2, #24]
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_MspInit+0x5c>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_MspInit+0x5c>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_MspInit+0x5c>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	61d3      	str	r3, [r2, #28]
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_MspInit+0x5c>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_MspInit+0x60>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_MspInit+0x60>)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000

080018d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_RTC_MspInit+0x4c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d118      	bne.n	8001918 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80018e6:	f000 ffc7 	bl	8002878 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_RTC_MspInit+0x50>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <HAL_RTC_MspInit+0x50>)
 80018f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RTC_MspInit+0x50>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RTC_MspInit+0x54>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	2029      	movs	r0, #41	; 0x29
 800190e:	f000 fb3e 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001912:	2029      	movs	r0, #41	; 0x29
 8001914:	f000 fb57 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40002800 	.word	0x40002800
 8001924:	40021000 	.word	0x40021000
 8001928:	4242043c 	.word	0x4242043c

0800192c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <HAL_SPI_MspInit+0x88>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d12f      	bne.n	80019ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_SPI_MspInit+0x8c>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_SPI_MspInit+0x8c>)
 8001952:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_SPI_MspInit+0x8c>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_SPI_MspInit+0x8c>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <HAL_SPI_MspInit+0x8c>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_SPI_MspInit+0x8c>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800197c:	23a0      	movs	r3, #160	; 0xa0
 800197e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	4619      	mov	r1, r3
 800198e:	480b      	ldr	r0, [pc, #44]	; (80019bc <HAL_SPI_MspInit+0x90>)
 8001990:	f000 fdd6 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001994:	2340      	movs	r3, #64	; 0x40
 8001996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4619      	mov	r1, r3
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <HAL_SPI_MspInit+0x90>)
 80019a8:	f000 fdca 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40013000 	.word	0x40013000
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010800 	.word	0x40010800

080019c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a32      	ldr	r2, [pc, #200]	; (8001aa4 <HAL_UART_MspInit+0xe4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d15d      	bne.n	8001a9c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <HAL_UART_MspInit+0xe8>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4a30      	ldr	r2, [pc, #192]	; (8001aa8 <HAL_UART_MspInit+0xe8>)
 80019e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ea:	61d3      	str	r3, [r2, #28]
 80019ec:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <HAL_UART_MspInit+0xe8>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_UART_MspInit+0xe8>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <HAL_UART_MspInit+0xe8>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_UART_MspInit+0xe8>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a10:	2304      	movs	r3, #4
 8001a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	4619      	mov	r1, r3
 8001a22:	4822      	ldr	r0, [pc, #136]	; (8001aac <HAL_UART_MspInit+0xec>)
 8001a24:	f000 fd8c 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	4619      	mov	r1, r3
 8001a3a:	481c      	ldr	r0, [pc, #112]	; (8001aac <HAL_UART_MspInit+0xec>)
 8001a3c:	f000 fd80 	bl	8002540 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a42:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <HAL_UART_MspInit+0xf4>)
 8001a44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a70:	480f      	ldr	r0, [pc, #60]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a72:	f000 fac3 	bl	8001ffc <HAL_DMA_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001a7c:	f7ff fef2 	bl	8001864 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a84:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_UART_MspInit+0xf0>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2026      	movs	r0, #38	; 0x26
 8001a92:	f000 fa7c 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a96:	2026      	movs	r0, #38	; 0x26
 8001a98:	f000 fa95 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40004400 	.word	0x40004400
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010800 	.word	0x40010800
 8001ab0:	20000240 	.word	0x20000240
 8001ab4:	4002006c 	.word	0x4002006c

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <NMI_Handler+0x4>

08001abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <MemManage_Handler+0x4>

08001aca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afe:	f000 f953 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <DMA1_Channel6_IRQHandler+0x10>)
 8001b0e:	f000 fbe3 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000240 	.word	0x20000240

08001b1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <USART2_IRQHandler+0x10>)
 8001b22:	f003 f8a3 	bl	8004c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000035c 	.word	0x2000035c

08001b30 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <RTC_Alarm_IRQHandler+0x10>)
 8001b36:	f001 ff2b 	bl	8003990 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200002e8 	.word	0x200002e8

08001b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
	return 1;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <_kill>:

int _kill(int pid, int sig)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b5c:	f003 ff94 	bl	8005a88 <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2216      	movs	r2, #22
 8001b64:	601a      	str	r2, [r3, #0]
	return -1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_exit>:

void _exit (int status)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffe7 	bl	8001b52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b84:	e7fe      	b.n	8001b84 <_exit+0x12>

08001b86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e00a      	b.n	8001bae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b98:	f3af 8000 	nop.w
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	60ba      	str	r2, [r7, #8]
 8001ba4:	b2ca      	uxtb	r2, r1
 8001ba6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbf0      	blt.n	8001b98 <_read+0x12>
	}

return len;
 8001bb6:	687b      	ldr	r3, [r7, #4]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	e009      	b.n	8001be6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	60ba      	str	r2, [r7, #8]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	dbf1      	blt.n	8001bd2 <_write+0x12>
	}
	return len;
 8001bee:	687b      	ldr	r3, [r7, #4]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_close>:

int _close(int file)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	return -1;
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <_isatty>:

int _isatty(int file)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	return 1;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <_sbrk+0x5c>)
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <_sbrk+0x60>)
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <_sbrk+0x64>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <_sbrk+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d207      	bcs.n	8001c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c88:	f003 fefe 	bl	8005a88 <__errno>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	220c      	movs	r2, #12
 8001c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e009      	b.n	8001cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_sbrk+0x64>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20005000 	.word	0x20005000
 8001cb8:	00000400 	.word	0x00000400
 8001cbc:	20000230 	.word	0x20000230
 8001cc0:	200003c0 	.word	0x200003c0

08001cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff fff8 	bl	8001cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480b      	ldr	r0, [pc, #44]	; (8001d04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cd6:	490c      	ldr	r1, [pc, #48]	; (8001d08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cec:	4c09      	ldr	r4, [pc, #36]	; (8001d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f003 fecb 	bl	8005a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cfe:	f7ff fc07 	bl	8001510 <main>
  bx lr
 8001d02:	4770      	bx	lr
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001d0c:	08008e74 	.word	0x08008e74
  ldr r2, =_sbss
 8001d10:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001d14:	200003bc 	.word	0x200003bc

08001d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_Init+0x28>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_Init+0x28>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f923 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	200f      	movs	r0, #15
 8001d34:	f000 f808 	bl	8001d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7ff fd9a 	bl	8001870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_InitTick+0x54>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f93b 	bl	8001fe2 <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f000 f903 	bl	8001f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <HAL_InitTick+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000028 	.word	0x20000028
 8001da0:	20000030 	.word	0x20000030
 8001da4:	2000002c 	.word	0x2000002c

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_IncTick+0x20>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <HAL_IncTick+0x20>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000030 	.word	0x20000030
 8001dc8:	200003a8 	.word	0x200003a8

08001dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_GetTick+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	200003a8 	.word	0x200003a8

08001de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60d3      	str	r3, [r2, #12]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <__NVIC_GetPriorityGrouping+0x18>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0307 	and.w	r3, r3, #7
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db0b      	blt.n	8001e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	4906      	ldr	r1, [pc, #24]	; (8001e78 <__NVIC_EnableIRQ+0x34>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f44:	d301      	bcc.n	8001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <SysTick_Config+0x40>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f52:	210f      	movs	r1, #15
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f7ff ff90 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <SysTick_Config+0x40>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SysTick_Config+0x40>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff2d 	bl	8001de0 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa0:	f7ff ff42 	bl	8001e28 <__NVIC_GetPriorityGrouping>
 8001fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ff90 	bl	8001ed0 <NVIC_EncodePriority>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff5f 	bl	8001e7c <__NVIC_SetPriority>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff35 	bl	8001e44 <__NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffa2 	bl	8001f34 <SysTick_Config>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e043      	b.n	800209a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_DMA_Init+0xa8>)
 800201a:	4413      	add	r3, r2
 800201c:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <HAL_DMA_Init+0xac>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	009a      	lsls	r2, r3, #2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <HAL_DMA_Init+0xb0>)
 800202e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002046:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800204a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	bffdfff8 	.word	0xbffdfff8
 80020a8:	cccccccd 	.word	0xcccccccd
 80020ac:	40020000 	.word	0x40020000

080020b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_DMA_Start_IT+0x20>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e04b      	b.n	8002168 <HAL_DMA_Start_IT+0xb8>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d13a      	bne.n	800215a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f9eb 	bl	80024e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 020e 	orr.w	r2, r2, #14
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e00f      	b.n	8002148 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0204 	bic.w	r2, r2, #4
 8002136:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 020a 	orr.w	r2, r2, #10
 8002146:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e005      	b.n	8002166 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002166:	7dfb      	ldrb	r3, [r7, #23]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d008      	beq.n	800219a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2204      	movs	r2, #4
 800218c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e020      	b.n	80021dc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 020e 	bic.w	r2, r2, #14
 80021a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	2101      	movs	r1, #1
 80021c4:	fa01 f202 	lsl.w	r2, r1, r2
 80021c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021da:	7bfb      	ldrb	r3, [r7, #15]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d005      	beq.n	800220c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e051      	b.n	80022b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 020e 	bic.w	r2, r2, #14
 800221a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_DMA_Abort_IT+0xd4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d029      	beq.n	800228a <HAL_DMA_Abort_IT+0xa2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <HAL_DMA_Abort_IT+0xd8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d022      	beq.n	8002286 <HAL_DMA_Abort_IT+0x9e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1f      	ldr	r2, [pc, #124]	; (80022c4 <HAL_DMA_Abort_IT+0xdc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01a      	beq.n	8002280 <HAL_DMA_Abort_IT+0x98>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_DMA_Abort_IT+0xe0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d012      	beq.n	800227a <HAL_DMA_Abort_IT+0x92>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_DMA_Abort_IT+0xe4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00a      	beq.n	8002274 <HAL_DMA_Abort_IT+0x8c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_DMA_Abort_IT+0xe8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d102      	bne.n	800226e <HAL_DMA_Abort_IT+0x86>
 8002268:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800226c:	e00e      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 800226e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002272:	e00b      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 8002274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002278:	e008      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 800227a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227e:	e005      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 8002280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002284:	e002      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 8002286:	2310      	movs	r3, #16
 8002288:	e000      	b.n	800228c <HAL_DMA_Abort_IT+0xa4>
 800228a:	2301      	movs	r3, #1
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <HAL_DMA_Abort_IT+0xec>)
 800228e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
    } 
  }
  return status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40020008 	.word	0x40020008
 80022c0:	4002001c 	.word	0x4002001c
 80022c4:	40020030 	.word	0x40020030
 80022c8:	40020044 	.word	0x40020044
 80022cc:	40020058 	.word	0x40020058
 80022d0:	4002006c 	.word	0x4002006c
 80022d4:	40020000 	.word	0x40020000

080022d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	2204      	movs	r2, #4
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d04f      	beq.n	80023a0 <HAL_DMA_IRQHandler+0xc8>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d04a      	beq.n	80023a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0204 	bic.w	r2, r2, #4
 8002326:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a66      	ldr	r2, [pc, #408]	; (80024c8 <HAL_DMA_IRQHandler+0x1f0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d029      	beq.n	8002386 <HAL_DMA_IRQHandler+0xae>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a65      	ldr	r2, [pc, #404]	; (80024cc <HAL_DMA_IRQHandler+0x1f4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d022      	beq.n	8002382 <HAL_DMA_IRQHandler+0xaa>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a63      	ldr	r2, [pc, #396]	; (80024d0 <HAL_DMA_IRQHandler+0x1f8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01a      	beq.n	800237c <HAL_DMA_IRQHandler+0xa4>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a62      	ldr	r2, [pc, #392]	; (80024d4 <HAL_DMA_IRQHandler+0x1fc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d012      	beq.n	8002376 <HAL_DMA_IRQHandler+0x9e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a60      	ldr	r2, [pc, #384]	; (80024d8 <HAL_DMA_IRQHandler+0x200>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00a      	beq.n	8002370 <HAL_DMA_IRQHandler+0x98>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5f      	ldr	r2, [pc, #380]	; (80024dc <HAL_DMA_IRQHandler+0x204>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d102      	bne.n	800236a <HAL_DMA_IRQHandler+0x92>
 8002364:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002368:	e00e      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 800236a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800236e:	e00b      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 8002370:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002374:	e008      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 8002376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800237a:	e005      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 800237c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002380:	e002      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	e000      	b.n	8002388 <HAL_DMA_IRQHandler+0xb0>
 8002386:	2304      	movs	r3, #4
 8002388:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <HAL_DMA_IRQHandler+0x208>)
 800238a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8094 	beq.w	80024be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800239e:	e08e      	b.n	80024be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	2202      	movs	r2, #2
 80023a6:	409a      	lsls	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d056      	beq.n	800245e <HAL_DMA_IRQHandler+0x186>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d051      	beq.n	800245e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 020a 	bic.w	r2, r2, #10
 80023d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a38      	ldr	r2, [pc, #224]	; (80024c8 <HAL_DMA_IRQHandler+0x1f0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d029      	beq.n	800243e <HAL_DMA_IRQHandler+0x166>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a37      	ldr	r2, [pc, #220]	; (80024cc <HAL_DMA_IRQHandler+0x1f4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMA_IRQHandler+0x162>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a35      	ldr	r2, [pc, #212]	; (80024d0 <HAL_DMA_IRQHandler+0x1f8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01a      	beq.n	8002434 <HAL_DMA_IRQHandler+0x15c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a34      	ldr	r2, [pc, #208]	; (80024d4 <HAL_DMA_IRQHandler+0x1fc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d012      	beq.n	800242e <HAL_DMA_IRQHandler+0x156>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a32      	ldr	r2, [pc, #200]	; (80024d8 <HAL_DMA_IRQHandler+0x200>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00a      	beq.n	8002428 <HAL_DMA_IRQHandler+0x150>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a31      	ldr	r2, [pc, #196]	; (80024dc <HAL_DMA_IRQHandler+0x204>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d102      	bne.n	8002422 <HAL_DMA_IRQHandler+0x14a>
 800241c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002420:	e00e      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 8002422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002426:	e00b      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 8002428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242c:	e008      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 800242e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002432:	e005      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 8002434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002438:	e002      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 800243a:	2320      	movs	r3, #32
 800243c:	e000      	b.n	8002440 <HAL_DMA_IRQHandler+0x168>
 800243e:	2302      	movs	r3, #2
 8002440:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_DMA_IRQHandler+0x208>)
 8002442:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	d034      	beq.n	80024be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800245c:	e02f      	b.n	80024be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2208      	movs	r2, #8
 8002464:	409a      	lsls	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d028      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x1e8>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d023      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 020e 	bic.w	r2, r2, #14
 8002486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f202 	lsl.w	r2, r1, r2
 8002496:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
    }
  }
  return;
 80024be:	bf00      	nop
 80024c0:	bf00      	nop
}
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020008 	.word	0x40020008
 80024cc:	4002001c 	.word	0x4002001c
 80024d0:	40020030 	.word	0x40020030
 80024d4:	40020044 	.word	0x40020044
 80024d8:	40020058 	.word	0x40020058
 80024dc:	4002006c 	.word	0x4002006c
 80024e0:	40020000 	.word	0x40020000

080024e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002500:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b10      	cmp	r3, #16
 8002510:	d108      	bne.n	8002524 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002522:	e007      	b.n	8002534 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	60da      	str	r2, [r3, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
	...

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b08b      	sub	sp, #44	; 0x2c
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002552:	e169      	b.n	8002828 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002554:	2201      	movs	r2, #1
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8158 	bne.w	8002822 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a9a      	ldr	r2, [pc, #616]	; (80027e0 <HAL_GPIO_Init+0x2a0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d05e      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 800257c:	4a98      	ldr	r2, [pc, #608]	; (80027e0 <HAL_GPIO_Init+0x2a0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d875      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 8002582:	4a98      	ldr	r2, [pc, #608]	; (80027e4 <HAL_GPIO_Init+0x2a4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d058      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 8002588:	4a96      	ldr	r2, [pc, #600]	; (80027e4 <HAL_GPIO_Init+0x2a4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d86f      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 800258e:	4a96      	ldr	r2, [pc, #600]	; (80027e8 <HAL_GPIO_Init+0x2a8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d052      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 8002594:	4a94      	ldr	r2, [pc, #592]	; (80027e8 <HAL_GPIO_Init+0x2a8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d869      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 800259a:	4a94      	ldr	r2, [pc, #592]	; (80027ec <HAL_GPIO_Init+0x2ac>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04c      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 80025a0:	4a92      	ldr	r2, [pc, #584]	; (80027ec <HAL_GPIO_Init+0x2ac>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d863      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 80025a6:	4a92      	ldr	r2, [pc, #584]	; (80027f0 <HAL_GPIO_Init+0x2b0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d046      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 80025ac:	4a90      	ldr	r2, [pc, #576]	; (80027f0 <HAL_GPIO_Init+0x2b0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d85d      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 80025b2:	2b12      	cmp	r3, #18
 80025b4:	d82a      	bhi.n	800260c <HAL_GPIO_Init+0xcc>
 80025b6:	2b12      	cmp	r3, #18
 80025b8:	d859      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 80025ba:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <HAL_GPIO_Init+0x80>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	0800263b 	.word	0x0800263b
 80025c4:	08002615 	.word	0x08002615
 80025c8:	08002627 	.word	0x08002627
 80025cc:	08002669 	.word	0x08002669
 80025d0:	0800266f 	.word	0x0800266f
 80025d4:	0800266f 	.word	0x0800266f
 80025d8:	0800266f 	.word	0x0800266f
 80025dc:	0800266f 	.word	0x0800266f
 80025e0:	0800266f 	.word	0x0800266f
 80025e4:	0800266f 	.word	0x0800266f
 80025e8:	0800266f 	.word	0x0800266f
 80025ec:	0800266f 	.word	0x0800266f
 80025f0:	0800266f 	.word	0x0800266f
 80025f4:	0800266f 	.word	0x0800266f
 80025f8:	0800266f 	.word	0x0800266f
 80025fc:	0800266f 	.word	0x0800266f
 8002600:	0800266f 	.word	0x0800266f
 8002604:	0800261d 	.word	0x0800261d
 8002608:	08002631 	.word	0x08002631
 800260c:	4a79      	ldr	r2, [pc, #484]	; (80027f4 <HAL_GPIO_Init+0x2b4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002612:	e02c      	b.n	800266e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	623b      	str	r3, [r7, #32]
          break;
 800261a:	e029      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	3304      	adds	r3, #4
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e024      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	3308      	adds	r3, #8
 800262c:	623b      	str	r3, [r7, #32]
          break;
 800262e:	e01f      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	330c      	adds	r3, #12
 8002636:	623b      	str	r3, [r7, #32]
          break;
 8002638:	e01a      	b.n	8002670 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002642:	2304      	movs	r3, #4
 8002644:	623b      	str	r3, [r7, #32]
          break;
 8002646:	e013      	b.n	8002670 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002650:	2308      	movs	r3, #8
 8002652:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	611a      	str	r2, [r3, #16]
          break;
 800265a:	e009      	b.n	8002670 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800265c:	2308      	movs	r3, #8
 800265e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	615a      	str	r2, [r3, #20]
          break;
 8002666:	e003      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002668:	2300      	movs	r3, #0
 800266a:	623b      	str	r3, [r7, #32]
          break;
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x130>
          break;
 800266e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2bff      	cmp	r3, #255	; 0xff
 8002674:	d801      	bhi.n	800267a <HAL_GPIO_Init+0x13a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	e001      	b.n	800267e <HAL_GPIO_Init+0x13e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3304      	adds	r3, #4
 800267e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2bff      	cmp	r3, #255	; 0xff
 8002684:	d802      	bhi.n	800268c <HAL_GPIO_Init+0x14c>
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	e002      	b.n	8002692 <HAL_GPIO_Init+0x152>
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3b08      	subs	r3, #8
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	210f      	movs	r1, #15
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	401a      	ands	r2, r3
 80026a4:	6a39      	ldr	r1, [r7, #32]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	431a      	orrs	r2, r3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80b1 	beq.w	8002822 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026c0:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <HAL_GPIO_Init+0x2b8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <HAL_GPIO_Init+0x2b8>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <HAL_GPIO_Init+0x2b8>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026d8:	4a48      	ldr	r2, [pc, #288]	; (80027fc <HAL_GPIO_Init+0x2bc>)
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a40      	ldr	r2, [pc, #256]	; (8002800 <HAL_GPIO_Init+0x2c0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <HAL_GPIO_Init+0x1ec>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3f      	ldr	r2, [pc, #252]	; (8002804 <HAL_GPIO_Init+0x2c4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00d      	beq.n	8002728 <HAL_GPIO_Init+0x1e8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3e      	ldr	r2, [pc, #248]	; (8002808 <HAL_GPIO_Init+0x2c8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <HAL_GPIO_Init+0x1e4>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3d      	ldr	r2, [pc, #244]	; (800280c <HAL_GPIO_Init+0x2cc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_GPIO_Init+0x1e0>
 800271c:	2303      	movs	r3, #3
 800271e:	e006      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002720:	2304      	movs	r3, #4
 8002722:	e004      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002724:	2302      	movs	r3, #2
 8002726:	e002      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 800272c:	2300      	movs	r3, #0
 800272e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002730:	f002 0203 	and.w	r2, r2, #3
 8002734:	0092      	lsls	r2, r2, #2
 8002736:	4093      	lsls	r3, r2
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800273e:	492f      	ldr	r1, [pc, #188]	; (80027fc <HAL_GPIO_Init+0x2bc>)
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002758:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	492c      	ldr	r1, [pc, #176]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002766:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	43db      	mvns	r3, r3
 800276e:	4928      	ldr	r1, [pc, #160]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002770:	4013      	ands	r3, r2
 8002772:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	4922      	ldr	r1, [pc, #136]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	60cb      	str	r3, [r1, #12]
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	43db      	mvns	r3, r3
 8002796:	491e      	ldr	r1, [pc, #120]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002798:	4013      	ands	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	4918      	ldr	r1, [pc, #96]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	43db      	mvns	r3, r3
 80027be:	4914      	ldr	r1, [pc, #80]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d021      	beq.n	8002814 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e021      	b.n	8002822 <HAL_GPIO_Init+0x2e2>
 80027de:	bf00      	nop
 80027e0:	10320000 	.word	0x10320000
 80027e4:	10310000 	.word	0x10310000
 80027e8:	10220000 	.word	0x10220000
 80027ec:	10210000 	.word	0x10210000
 80027f0:	10120000 	.word	0x10120000
 80027f4:	10110000 	.word	0x10110000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40010000 	.word	0x40010000
 8002800:	40010800 	.word	0x40010800
 8002804:	40010c00 	.word	0x40010c00
 8002808:	40011000 	.word	0x40011000
 800280c:	40011400 	.word	0x40011400
 8002810:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_GPIO_Init+0x304>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	43db      	mvns	r3, r3
 800281c:	4909      	ldr	r1, [pc, #36]	; (8002844 <HAL_GPIO_Init+0x304>)
 800281e:	4013      	ands	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	fa22 f303 	lsr.w	r3, r2, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f ae8e 	bne.w	8002554 <HAL_GPIO_Init+0x14>
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	372c      	adds	r7, #44	; 0x2c
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40010400 	.word	0x40010400

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002864:	e003      	b.n	800286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	611a      	str	r2, [r3, #16]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_PWR_EnableBkUpAccess+0x14>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	420e0020 	.word	0x420e0020

08002890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e26c      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8087 	beq.w	80029be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b0:	4b92      	ldr	r3, [pc, #584]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d00c      	beq.n	80028d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028bc:	4b8f      	ldr	r3, [pc, #572]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d112      	bne.n	80028ee <HAL_RCC_OscConfig+0x5e>
 80028c8:	4b8c      	ldr	r3, [pc, #560]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d4:	d10b      	bne.n	80028ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d6:	4b89      	ldr	r3, [pc, #548]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d06c      	beq.n	80029bc <HAL_RCC_OscConfig+0x12c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d168      	bne.n	80029bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e246      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x76>
 80028f8:	4b80      	ldr	r3, [pc, #512]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a7f      	ldr	r2, [pc, #508]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e02e      	b.n	8002964 <HAL_RCC_OscConfig+0xd4>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x98>
 800290e:	4b7b      	ldr	r3, [pc, #492]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7a      	ldr	r2, [pc, #488]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b78      	ldr	r3, [pc, #480]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a77      	ldr	r2, [pc, #476]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e01d      	b.n	8002964 <HAL_RCC_OscConfig+0xd4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0xbc>
 8002932:	4b72      	ldr	r3, [pc, #456]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a71      	ldr	r2, [pc, #452]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6e      	ldr	r2, [pc, #440]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e00b      	b.n	8002964 <HAL_RCC_OscConfig+0xd4>
 800294c:	4b6b      	ldr	r3, [pc, #428]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a6a      	ldr	r2, [pc, #424]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a67      	ldr	r2, [pc, #412]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800295e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff fa2e 	bl	8001dcc <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7ff fa2a 	bl	8001dcc <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1fa      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0xe4>
 8002992:	e014      	b.n	80029be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7ff fa1a 	bl	8001dcc <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800299c:	f7ff fa16 	bl	8001dcc <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e1e6      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x10c>
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d063      	beq.n	8002a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ca:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029d6:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d11c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x18c>
 80029e2:	4b46      	ldr	r3, [pc, #280]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d116      	bne.n	8002a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_RCC_OscConfig+0x176>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d001      	beq.n	8002a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e1ba      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a06:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4939      	ldr	r1, [pc, #228]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	e03a      	b.n	8002a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7ff f9cf 	bl	8001dcc <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a32:	f7ff f9cb 	bl	8001dcc <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e19b      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a50:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4927      	ldr	r1, [pc, #156]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]
 8002a64:	e015      	b.n	8002a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f9ae 	bl	8001dcc <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a74:	f7ff f9aa 	bl	8001dcc <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e17a      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d03a      	beq.n	8002b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d019      	beq.n	8002ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa6:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aac:	f7ff f98e 	bl	8001dcc <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7ff f98a 	bl	8001dcc <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e15a      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f000 facc 	bl	8003070 <RCC_Delay>
 8002ad8:	e01c      	b.n	8002b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae0:	f7ff f974 	bl	8001dcc <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae6:	e00f      	b.n	8002b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7ff f970 	bl	8001dcc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d908      	bls.n	8002b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e140      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	42420000 	.word	0x42420000
 8002b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	4b9e      	ldr	r3, [pc, #632]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e9      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a6 	beq.w	8002c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b26:	4b97      	ldr	r3, [pc, #604]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10d      	bne.n	8002b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	4b94      	ldr	r3, [pc, #592]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4a93      	ldr	r2, [pc, #588]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	61d3      	str	r3, [r2, #28]
 8002b3e:	4b91      	ldr	r3, [pc, #580]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	4b8e      	ldr	r3, [pc, #568]	; (8002d88 <HAL_RCC_OscConfig+0x4f8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d118      	bne.n	8002b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5a:	4b8b      	ldr	r3, [pc, #556]	; (8002d88 <HAL_RCC_OscConfig+0x4f8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a8a      	ldr	r2, [pc, #552]	; (8002d88 <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b66:	f7ff f931 	bl	8001dcc <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7ff f92d 	bl	8001dcc <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b64      	cmp	r3, #100	; 0x64
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0fd      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	4b81      	ldr	r3, [pc, #516]	; (8002d88 <HAL_RCC_OscConfig+0x4f8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x312>
 8002b94:	4b7b      	ldr	r3, [pc, #492]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4a7a      	ldr	r2, [pc, #488]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6213      	str	r3, [r2, #32]
 8002ba0:	e02d      	b.n	8002bfe <HAL_RCC_OscConfig+0x36e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x334>
 8002baa:	4b76      	ldr	r3, [pc, #472]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a75      	ldr	r2, [pc, #468]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	4b73      	ldr	r3, [pc, #460]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4a72      	ldr	r2, [pc, #456]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	6213      	str	r3, [r2, #32]
 8002bc2:	e01c      	b.n	8002bfe <HAL_RCC_OscConfig+0x36e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d10c      	bne.n	8002be6 <HAL_RCC_OscConfig+0x356>
 8002bcc:	4b6d      	ldr	r3, [pc, #436]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4a6c      	ldr	r2, [pc, #432]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a69      	ldr	r2, [pc, #420]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	6213      	str	r3, [r2, #32]
 8002be4:	e00b      	b.n	8002bfe <HAL_RCC_OscConfig+0x36e>
 8002be6:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a66      	ldr	r2, [pc, #408]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6213      	str	r3, [r2, #32]
 8002bf2:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a63      	ldr	r2, [pc, #396]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d015      	beq.n	8002c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7ff f8e1 	bl	8001dcc <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7ff f8dd 	bl	8001dcc <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e0ab      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ee      	beq.n	8002c0e <HAL_RCC_OscConfig+0x37e>
 8002c30:	e014      	b.n	8002c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7ff f8cb 	bl	8001dcc <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7ff f8c7 	bl	8001dcc <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e095      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c50:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ee      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d105      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c62:	4b48      	ldr	r3, [pc, #288]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4a47      	ldr	r2, [pc, #284]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8081 	beq.w	8002d7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d061      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d146      	bne.n	8002d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8c:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_OscConfig+0x4fc>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7ff f89b 	bl	8001dcc <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7ff f897 	bl	8001dcc <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e067      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc0:	d108      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cc2:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	492d      	ldr	r1, [pc, #180]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a19      	ldr	r1, [r3, #32]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	4927      	ldr	r1, [pc, #156]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <HAL_RCC_OscConfig+0x4fc>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7ff f86b 	bl	8001dcc <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7ff f867 	bl	8001dcc <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e037      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x46a>
 8002d18:	e02f      	b.n	8002d7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <HAL_RCC_OscConfig+0x4fc>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7ff f854 	bl	8001dcc <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7ff f850 	bl	8001dcc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e020      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x498>
 8002d46:	e018      	b.n	8002d7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e013      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	42420060 	.word	0x42420060

08002d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0d0      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d910      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 0207 	bic.w	r2, r3, #7
 8002dba:	4965      	ldr	r1, [pc, #404]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b8      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	494d      	ldr	r1, [pc, #308]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d040      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d115      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e07f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4e:	4b41      	ldr	r3, [pc, #260]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e073      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e06b      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e6e:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f023 0203 	bic.w	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4936      	ldr	r1, [pc, #216]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e80:	f7fe ffa4 	bl	8001dcc <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e88:	f7fe ffa0 	bl	8001dcc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e053      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 020c 	and.w	r2, r3, #12
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d1eb      	bne.n	8002e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d210      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	4922      	ldr	r1, [pc, #136]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e032      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4916      	ldr	r1, [pc, #88]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f1e:	f000 f821 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1cc>)
 8002f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1d0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe ff02 	bl	8001d48 <HAL_InitTick>

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40022000 	.word	0x40022000
 8002f54:	40021000 	.word	0x40021000
 8002f58:	08008a48 	.word	0x08008a48
 8002f5c:	20000028 	.word	0x20000028
 8002f60:	2000002c 	.word	0x2000002c

08002f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 030c 	and.w	r3, r3, #12
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d002      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x30>
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d003      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0x36>
 8002f92:	e027      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8002f96:	613b      	str	r3, [r7, #16]
      break;
 8002f98:	e027      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	0c9b      	lsrs	r3, r3, #18
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	4a17      	ldr	r2, [pc, #92]	; (8003000 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	0c5b      	lsrs	r3, r3, #17
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	4a11      	ldr	r2, [pc, #68]	; (8003004 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8002fc6:	fb02 f203 	mul.w	r2, r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e004      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fd8:	fb02 f303 	mul.w	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	613b      	str	r3, [r7, #16]
      break;
 8002fe2:	e002      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8002fe6:	613b      	str	r3, [r7, #16]
      break;
 8002fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fea:	693b      	ldr	r3, [r7, #16]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	007a1200 	.word	0x007a1200
 8003000:	08008a60 	.word	0x08008a60
 8003004:	08008a70 	.word	0x08008a70
 8003008:	003d0900 	.word	0x003d0900

0800300c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003010:	4b02      	ldr	r3, [pc, #8]	; (800301c <HAL_RCC_GetHCLKFreq+0x10>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	20000028 	.word	0x20000028

08003020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003024:	f7ff fff2 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	08008a58 	.word	0x08008a58

08003048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800304c:	f7ff ffde 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	0adb      	lsrs	r3, r3, #11
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	; (800306c <HAL_RCC_GetPCLK2Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	08008a58 	.word	0x08008a58

08003070 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <RCC_Delay+0x34>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <RCC_Delay+0x38>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0a5b      	lsrs	r3, r3, #9
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	fb02 f303 	mul.w	r3, r2, r3
 800308a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800308c:	bf00      	nop
  }
  while (Delay --);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	60fa      	str	r2, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f9      	bne.n	800308c <RCC_Delay+0x1c>
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	20000028 	.word	0x20000028
 80030a8:	10624dd3 	.word	0x10624dd3

080030ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d07d      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030c8:	2300      	movs	r3, #0
 80030ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030cc:	4b4f      	ldr	r3, [pc, #316]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	4a4b      	ldr	r2, [pc, #300]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e2:	61d3      	str	r3, [r2, #28]
 80030e4:	4b49      	ldr	r3, [pc, #292]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f0:	2301      	movs	r3, #1
 80030f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d118      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003100:	4b43      	ldr	r3, [pc, #268]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a42      	ldr	r2, [pc, #264]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310c:	f7fe fe5e 	bl	8001dcc <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	e008      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003114:	f7fe fe5a 	bl	8001dcc <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	; 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e06d      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003126:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d02e      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	429a      	cmp	r2, r3
 800314e:	d027      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800315a:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800315c:	2201      	movs	r2, #1
 800315e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003160:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003166:	4a29      	ldr	r2, [pc, #164]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d014      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fe fe29 	bl	8001dcc <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fe25 	bl	8001dcc <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e036      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ee      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4917      	ldr	r1, [pc, #92]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	4a13      	ldr	r2, [pc, #76]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d0:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	490b      	ldr	r1, [pc, #44]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ee:	4b07      	ldr	r3, [pc, #28]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	4904      	ldr	r1, [pc, #16]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	40007000 	.word	0x40007000
 8003214:	42420440 	.word	0x42420440

08003218 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	2300      	movs	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b10      	cmp	r3, #16
 8003238:	d00a      	beq.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b10      	cmp	r3, #16
 800323e:	f200 808a 	bhi.w	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d045      	beq.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d075      	beq.n	800333a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800324e:	e082      	b.n	8003356 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003250:	4b46      	ldr	r3, [pc, #280]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003256:	4b45      	ldr	r3, [pc, #276]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d07b      	beq.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	0c9b      	lsrs	r3, r3, #18
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	4a41      	ldr	r2, [pc, #260]	; (8003370 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800326c:	5cd3      	ldrb	r3, [r2, r3]
 800326e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d015      	beq.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800327a:	4b3c      	ldr	r3, [pc, #240]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	0c5b      	lsrs	r3, r3, #17
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	4a3b      	ldr	r2, [pc, #236]	; (8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003286:	5cd3      	ldrb	r3, [r2, r3]
 8003288:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003294:	4a38      	ldr	r2, [pc, #224]	; (8003378 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	fbb2 f2f3 	udiv	r2, r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	e004      	b.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4a34      	ldr	r2, [pc, #208]	; (800337c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032b0:	4b2e      	ldr	r3, [pc, #184]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032bc:	d102      	bne.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	61bb      	str	r3, [r7, #24]
      break;
 80032c2:	e04a      	b.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4a2d      	ldr	r2, [pc, #180]	; (8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	61bb      	str	r3, [r7, #24]
      break;
 80032d2:	e042      	b.n	800335a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80032d4:	4b25      	ldr	r3, [pc, #148]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e4:	d108      	bne.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80032f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	e01f      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003302:	d109      	bne.n	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003310:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003314:	61bb      	str	r3, [r7, #24]
 8003316:	e00f      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003322:	d11c      	bne.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d016      	beq.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003330:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003334:	61bb      	str	r3, [r7, #24]
      break;
 8003336:	e012      	b.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003338:	e011      	b.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800333a:	f7ff fe85 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 800333e:	4602      	mov	r2, r0
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	0b9b      	lsrs	r3, r3, #14
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	3301      	adds	r3, #1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003352:	61bb      	str	r3, [r7, #24]
      break;
 8003354:	e004      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800335e:	bf00      	nop
    }
  }
  return (frequency);
 8003360:	69bb      	ldr	r3, [r7, #24]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	08008a74 	.word	0x08008a74
 8003374:	08008a84 	.word	0x08008a84
 8003378:	007a1200 	.word	0x007a1200
 800337c:	003d0900 	.word	0x003d0900
 8003380:	aaaaaaab 	.word	0xaaaaaaab

08003384 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e07a      	b.n	8003490 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7c5b      	ldrb	r3, [r3, #17]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fe fa92 	bl	80018d4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fb1d 	bl	80039f6 <HAL_RTC_WaitForSynchro>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2204      	movs	r2, #4
 80033c6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e061      	b.n	8003490 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fbd6 	bl	8003b7e <RTC_EnterInitMode>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2204      	movs	r2, #4
 80033dc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e056      	b.n	8003490 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0207 	bic.w	r2, r2, #7
 80033f0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80033fa:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RTC_Init+0x114>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a26      	ldr	r2, [pc, #152]	; (8003498 <HAL_RTC_Init+0x114>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RTC_Init+0x114>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4921      	ldr	r1, [pc, #132]	; (8003498 <HAL_RTC_Init+0x114>)
 8003414:	4313      	orrs	r3, r2
 8003416:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d003      	beq.n	800342a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e00e      	b.n	8003448 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800342a:	2001      	movs	r0, #1
 800342c:	f7ff fef4 	bl	8003218 <HAL_RCCEx_GetPeriphCLKFreq>
 8003430:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2204      	movs	r2, #4
 800343c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e026      	b.n	8003490 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3b01      	subs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	0c1a      	lsrs	r2, r3, #16
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f002 020f 	and.w	r2, r2, #15
 8003454:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	b292      	uxth	r2, r2
 800345e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fbb4 	bl	8003bce <RTC_ExitInitMode>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2204      	movs	r2, #4
 8003470:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e00c      	b.n	8003490 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40006c00 	.word	0x40006c00

0800349c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_RTC_SetTime+0x20>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e080      	b.n	80035c2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	7c1b      	ldrb	r3, [r3, #16]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_RTC_SetTime+0x30>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e07a      	b.n	80035c2 <HAL_RTC_SetTime+0x126>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2202      	movs	r2, #2
 80034d6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d113      	bne.n	8003506 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80034e8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	4619      	mov	r1, r3
 80034f2:	460b      	mov	r3, r1
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a5b      	subs	r3, r3, r1
 80034f8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80034fa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003500:	4413      	add	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e01e      	b.n	8003544 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fba4 	bl	8003c58 <RTC_Bcd2ToByte>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003518:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fb99 	bl	8003c58 <RTC_Bcd2ToByte>
 8003526:	4603      	mov	r3, r0
 8003528:	461a      	mov	r2, r3
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003532:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	789b      	ldrb	r3, [r3, #2]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fb8d 	bl	8003c58 <RTC_Bcd2ToByte>
 800353e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003540:	4423      	add	r3, r4
 8003542:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003544:	6979      	ldr	r1, [r7, #20]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fab2 	bl	8003ab0 <RTC_WriteTimeCounter>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2204      	movs	r2, #4
 8003556:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e02f      	b.n	80035c2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0205 	bic.w	r2, r2, #5
 8003570:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fac3 	bl	8003afe <RTC_ReadAlarmCounter>
 8003578:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d018      	beq.n	80035b4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	429a      	cmp	r2, r3
 8003588:	d214      	bcs.n	80035b4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003590:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003594:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003596:	6939      	ldr	r1, [r7, #16]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fac9 	bl	8003b30 <RTC_WriteAlarmCounter>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2204      	movs	r2, #4
 80035a8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e006      	b.n	80035c2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}
	...

080035cc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_RTC_GetTime+0x28>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0b5      	b.n	8003764 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e0ac      	b.n	8003764 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fa20 	bl	8003a50 <RTC_ReadTimeCounter>
 8003610:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4a55      	ldr	r2, [pc, #340]	; (800376c <HAL_RTC_GetTime+0x1a0>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0adb      	lsrs	r3, r3, #11
 800361c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4b52      	ldr	r3, [pc, #328]	; (800376c <HAL_RTC_GetTime+0x1a0>)
 8003622:	fba3 1302 	umull	r1, r3, r3, r2
 8003626:	0adb      	lsrs	r3, r3, #11
 8003628:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	4a4f      	ldr	r2, [pc, #316]	; (8003770 <HAL_RTC_GetTime+0x1a4>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	4a4a      	ldr	r2, [pc, #296]	; (800376c <HAL_RTC_GetTime+0x1a0>)
 8003644:	fba2 1203 	umull	r1, r2, r2, r3
 8003648:	0ad2      	lsrs	r2, r2, #11
 800364a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800364e:	fb01 f202 	mul.w	r2, r1, r2
 8003652:	1a9a      	subs	r2, r3, r2
 8003654:	4b46      	ldr	r3, [pc, #280]	; (8003770 <HAL_RTC_GetTime+0x1a4>)
 8003656:	fba3 1302 	umull	r1, r3, r3, r2
 800365a:	0959      	lsrs	r1, r3, #5
 800365c:	460b      	mov	r3, r1
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a5b      	subs	r3, r3, r1
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	1ad1      	subs	r1, r2, r3
 8003666:	b2ca      	uxtb	r2, r1
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b17      	cmp	r3, #23
 8003670:	d955      	bls.n	800371e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4a3f      	ldr	r2, [pc, #252]	; (8003774 <HAL_RTC_GetTime+0x1a8>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800367e:	6939      	ldr	r1, [r7, #16]
 8003680:	4b3c      	ldr	r3, [pc, #240]	; (8003774 <HAL_RTC_GetTime+0x1a8>)
 8003682:	fba3 2301 	umull	r2, r3, r3, r1
 8003686:	091a      	lsrs	r2, r3, #4
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	1aca      	subs	r2, r1, r3
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fa30 	bl	8003afe <RTC_ReadAlarmCounter>
 800369e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d008      	beq.n	80036ba <HAL_RTC_GetTime+0xee>
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d904      	bls.n	80036ba <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	e002      	b.n	80036c0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
 80036be:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	4a2d      	ldr	r2, [pc, #180]	; (8003778 <HAL_RTC_GetTime+0x1ac>)
 80036c4:	fb02 f303 	mul.w	r3, r2, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80036ce:	69b9      	ldr	r1, [r7, #24]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f9ed 	bl	8003ab0 <RTC_WriteTimeCounter>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e041      	b.n	8003764 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e6:	d00c      	beq.n	8003702 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4413      	add	r3, r2
 80036ee:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80036f0:	69f9      	ldr	r1, [r7, #28]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fa1c 	bl	8003b30 <RTC_WriteAlarmCounter>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e030      	b.n	8003764 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003702:	69f9      	ldr	r1, [r7, #28]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fa13 	bl	8003b30 <RTC_WriteAlarmCounter>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e027      	b.n	8003764 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003714:	6979      	ldr	r1, [r7, #20]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fabb 	bl	8003c92 <RTC_DateUpdate>
 800371c:	e003      	b.n	8003726 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01a      	beq.n	8003762 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fa74 	bl	8003c1e <RTC_ByteToBcd2>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fa6b 	bl	8003c1e <RTC_ByteToBcd2>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	789b      	ldrb	r3, [r3, #2]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fa62 	bl	8003c1e <RTC_ByteToBcd2>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	91a2b3c5 	.word	0x91a2b3c5
 8003770:	88888889 	.word	0x88888889
 8003774:	aaaaaaab 	.word	0xaaaaaaab
 8003778:	00015180 	.word	0x00015180

0800377c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_RTC_SetDate+0x24>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e097      	b.n	80038d4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	7c1b      	ldrb	r3, [r3, #16]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_RTC_SetDate+0x34>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e091      	b.n	80038d4 <HAL_RTC_SetDate+0x158>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2202      	movs	r2, #2
 80037ba:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10c      	bne.n	80037dc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	78da      	ldrb	r2, [r3, #3]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	785a      	ldrb	r2, [r3, #1]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	789a      	ldrb	r2, [r3, #2]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	739a      	strb	r2, [r3, #14]
 80037da:	e01a      	b.n	8003812 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	78db      	ldrb	r3, [r3, #3]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fa39 	bl	8003c58 <RTC_Bcd2ToByte>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	785b      	ldrb	r3, [r3, #1]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 fa30 	bl	8003c58 <RTC_Bcd2ToByte>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	789b      	ldrb	r3, [r3, #2]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa27 	bl	8003c58 <RTC_Bcd2ToByte>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	7bdb      	ldrb	r3, [r3, #15]
 8003816:	4618      	mov	r0, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	7b59      	ldrb	r1, [r3, #13]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	7b9b      	ldrb	r3, [r3, #14]
 8003820:	461a      	mov	r2, r3
 8003822:	f000 fb11 	bl	8003e48 <RTC_WeekDayNum>
 8003826:	4603      	mov	r3, r0
 8003828:	461a      	mov	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	7b1a      	ldrb	r2, [r3, #12]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f90a 	bl	8003a50 <RTC_ReadTimeCounter>
 800383c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <HAL_RTC_SetDate+0x160>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	0adb      	lsrs	r3, r3, #11
 8003848:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b18      	cmp	r3, #24
 800384e:	d93a      	bls.n	80038c6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4a23      	ldr	r2, [pc, #140]	; (80038e0 <HAL_RTC_SetDate+0x164>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	4a22      	ldr	r2, [pc, #136]	; (80038e4 <HAL_RTC_SetDate+0x168>)
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003866:	69f9      	ldr	r1, [r7, #28]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f921 	bl	8003ab0 <RTC_WriteTimeCounter>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2204      	movs	r2, #4
 8003878:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e027      	b.n	80038d4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f93a 	bl	8003afe <RTC_ReadAlarmCounter>
 800388a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d018      	beq.n	80038c6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	429a      	cmp	r2, r3
 800389a:	d214      	bcs.n	80038c6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80038a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038a6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80038a8:	69b9      	ldr	r1, [r7, #24]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f940 	bl	8003b30 <RTC_WriteAlarmCounter>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2204      	movs	r2, #4
 80038ba:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e006      	b.n	80038d4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	91a2b3c5 	.word	0x91a2b3c5
 80038e0:	aaaaaaab 	.word	0xaaaaaaab
 80038e4:	00015180 	.word	0x00015180

080038e8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	2100      	movs	r1, #0
 80038fa:	460a      	mov	r2, r1
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	460a      	mov	r2, r1
 8003900:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_RTC_GetDate+0x26>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e03a      	b.n	8003988 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003912:	f107 0314 	add.w	r3, r7, #20
 8003916:	2200      	movs	r2, #0
 8003918:	4619      	mov	r1, r3
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fe56 	bl	80035cc <HAL_RTC_GetTime>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e02e      	b.n	8003988 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	7b1a      	ldrb	r2, [r3, #12]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	7bda      	ldrb	r2, [r3, #15]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	7b5a      	ldrb	r2, [r3, #13]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	7b9a      	ldrb	r2, [r3, #14]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01a      	beq.n	8003986 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	78db      	ldrb	r3, [r3, #3]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 f962 	bl	8003c1e <RTC_ByteToBcd2>
 800395a:	4603      	mov	r3, r0
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	785b      	ldrb	r3, [r3, #1]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f959 	bl	8003c1e <RTC_ByteToBcd2>
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	789b      	ldrb	r3, [r3, #2]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f950 	bl	8003c1e <RTC_ByteToBcd2>
 800397e:	4603      	mov	r3, r0
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d011      	beq.n	80039ca <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f815 	bl	80039e4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0202 	bic.w	r2, r2, #2
 80039c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RTC_AlarmIRQHandler+0x50>)
 80039cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039d0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	745a      	strb	r2, [r3, #17]
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40010400 	.word	0x40010400

080039e4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e01d      	b.n	8003a48 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0208 	bic.w	r2, r2, #8
 8003a1a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003a1c:	f7fe f9d6 	bl	8001dcc <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003a22:	e009      	b.n	8003a38 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a24:	f7fe f9d2 	bl	8001dcc <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a32:	d901      	bls.n	8003a38 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e007      	b.n	8003a48 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0ee      	beq.n	8003a24 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	827b      	strh	r3, [r7, #18]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	823b      	strh	r3, [r7, #16]
 8003a60:	2300      	movs	r3, #0
 8003a62:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003a80:	8a7a      	ldrh	r2, [r7, #18]
 8003a82:	8a3b      	ldrh	r3, [r7, #16]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d008      	beq.n	8003a9a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003a88:	8a3b      	ldrh	r3, [r7, #16]
 8003a8a:	041a      	lsls	r2, r3, #16
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	e004      	b.n	8003aa4 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003a9a:	8a7b      	ldrh	r3, [r7, #18]
 8003a9c:	041a      	lsls	r2, r3, #16
 8003a9e:	89fb      	ldrh	r3, [r7, #14]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003aa4:	697b      	ldr	r3, [r7, #20]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f85d 	bl	8003b7e <RTC_EnterInitMode>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e011      	b.n	8003af4 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	0c12      	lsrs	r2, r2, #16
 8003ad8:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f872 	bl	8003bce <RTC_ExitInitMode>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	81fb      	strh	r3, [r7, #14]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003b1e:	89fb      	ldrh	r3, [r7, #14]
 8003b20:	041a      	lsls	r2, r3, #16
 8003b22:	89bb      	ldrh	r3, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f81d 	bl	8003b7e <RTC_EnterInitMode>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	e011      	b.n	8003b74 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	0c12      	lsrs	r2, r2, #16
 8003b58:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	b292      	uxth	r2, r2
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f832 	bl	8003bce <RTC_ExitInitMode>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003b8a:	f7fe f91f 	bl	8001dcc <HAL_GetTick>
 8003b8e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b90:	e009      	b.n	8003ba6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b92:	f7fe f91b 	bl	8001dcc <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba0:	d901      	bls.n	8003ba6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e00f      	b.n	8003bc6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ee      	beq.n	8003b92 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0210 	orr.w	r2, r2, #16
 8003bc2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0210 	bic.w	r2, r2, #16
 8003be8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003bea:	f7fe f8ef 	bl	8001dcc <HAL_GetTick>
 8003bee:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bf0:	e009      	b.n	8003c06 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003bf2:	f7fe f8eb 	bl	8001dcc <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c00:	d901      	bls.n	8003c06 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e007      	b.n	8003c16 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ee      	beq.n	8003bf2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	4603      	mov	r3, r0
 8003c26:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003c2c:	e005      	b.n	8003c3a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3301      	adds	r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	3b0a      	subs	r3, #10
 8003c38:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	2b09      	cmp	r3, #9
 8003c3e:	d8f6      	bhi.n	8003c2e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	b2db      	uxtb	r3, r3
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	b2db      	uxtb	r3, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7bdb      	ldrb	r3, [r3, #15]
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	7b5b      	ldrb	r3, [r3, #13]
 8003cb6:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	7b9b      	ldrb	r3, [r3, #14]
 8003cbc:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	e06f      	b.n	8003da4 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d011      	beq.n	8003cee <RTC_DateUpdate+0x5c>
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d00e      	beq.n	8003cee <RTC_DateUpdate+0x5c>
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d00b      	beq.n	8003cee <RTC_DateUpdate+0x5c>
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b07      	cmp	r3, #7
 8003cda:	d008      	beq.n	8003cee <RTC_DateUpdate+0x5c>
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d005      	beq.n	8003cee <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b0a      	cmp	r3, #10
 8003ce6:	d002      	beq.n	8003cee <RTC_DateUpdate+0x5c>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	2b0c      	cmp	r3, #12
 8003cec:	d117      	bne.n	8003d1e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b1e      	cmp	r3, #30
 8003cf2:	d803      	bhi.n	8003cfc <RTC_DateUpdate+0x6a>
      {
        day++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003cfa:	e050      	b.n	8003d9e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d005      	beq.n	8003d0e <RTC_DateUpdate+0x7c>
        {
          month++;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3301      	adds	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003d0c:	e047      	b.n	8003d9e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003d12:	2301      	movs	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
          year++;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003d1c:	e03f      	b.n	8003d9e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d008      	beq.n	8003d36 <RTC_DateUpdate+0xa4>
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d005      	beq.n	8003d36 <RTC_DateUpdate+0xa4>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b09      	cmp	r3, #9
 8003d2e:	d002      	beq.n	8003d36 <RTC_DateUpdate+0xa4>
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b0b      	cmp	r3, #11
 8003d34:	d10c      	bne.n	8003d50 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b1d      	cmp	r3, #29
 8003d3a:	d803      	bhi.n	8003d44 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003d42:	e02c      	b.n	8003d9e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	3301      	adds	r3, #1
 8003d48:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003d4e:	e026      	b.n	8003d9e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d123      	bne.n	8003d9e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b1b      	cmp	r3, #27
 8003d5a:	d803      	bhi.n	8003d64 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e01c      	b.n	8003d9e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b1c      	cmp	r3, #28
 8003d68:	d111      	bne.n	8003d8e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f838 	bl	8003de4 <RTC_IsLeapYear>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e00d      	b.n	8003d9e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	3301      	adds	r3, #1
 8003d86:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e007      	b.n	8003d9e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b1d      	cmp	r3, #29
 8003d92:	d104      	bne.n	8003d9e <RTC_DateUpdate+0x10c>
      {
        month++;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	3301      	adds	r3, #1
 8003d98:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3301      	adds	r3, #1
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d38b      	bcc.n	8003cc4 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	f000 f83a 	bl	8003e48 <RTC_WeekDayNum>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	731a      	strb	r2, [r3, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e01d      	b.n	8003e3a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <RTC_IsLeapYear+0x60>)
 8003e02:	fba2 1203 	umull	r1, r2, r2, r3
 8003e06:	0952      	lsrs	r2, r2, #5
 8003e08:	2164      	movs	r1, #100	; 0x64
 8003e0a:	fb01 f202 	mul.w	r2, r1, r2
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00f      	b.n	8003e3a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <RTC_IsLeapYear+0x60>)
 8003e1e:	fba2 1203 	umull	r1, r2, r2, r3
 8003e22:	09d2      	lsrs	r2, r2, #7
 8003e24:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003e28:	fb01 f202 	mul.w	r2, r1, r2
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003e38:	2300      	movs	r3, #0
  }
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	51eb851f 	.word	0x51eb851f

08003e48 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	70fb      	strb	r3, [r7, #3]
 8003e54:	4613      	mov	r3, r2
 8003e56:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003e66:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d82d      	bhi.n	8003eca <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003e6e:	78fa      	ldrb	r2, [r7, #3]
 8003e70:	4613      	mov	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <RTC_WeekDayNum+0xe4>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	085a      	lsrs	r2, r3, #1
 8003e82:	78bb      	ldrb	r3, [r7, #2]
 8003e84:	441a      	add	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	441a      	add	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	4926      	ldr	r1, [pc, #152]	; (8003f30 <RTC_WeekDayNum+0xe8>)
 8003e98:	fba1 1303 	umull	r1, r3, r1, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	1ad2      	subs	r2, r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	4922      	ldr	r1, [pc, #136]	; (8003f30 <RTC_WeekDayNum+0xe8>)
 8003ea6:	fba1 1303 	umull	r1, r3, r1, r3
 8003eaa:	09db      	lsrs	r3, r3, #7
 8003eac:	4413      	add	r3, r2
 8003eae:	1d1a      	adds	r2, r3, #4
 8003eb0:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <RTC_WeekDayNum+0xec>)
 8003eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb6:	1ad1      	subs	r1, r2, r3
 8003eb8:	0849      	lsrs	r1, r1, #1
 8003eba:	440b      	add	r3, r1
 8003ebc:	0899      	lsrs	r1, r3, #2
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	1a5b      	subs	r3, r3, r1
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e029      	b.n	8003f1e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	4413      	add	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <RTC_WeekDayNum+0xe4>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	085a      	lsrs	r2, r3, #1
 8003ede:	78bb      	ldrb	r3, [r7, #2]
 8003ee0:	441a      	add	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	441a      	add	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4910      	ldr	r1, [pc, #64]	; (8003f30 <RTC_WeekDayNum+0xe8>)
 8003ef0:	fba1 1303 	umull	r1, r3, r1, r3
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	1ad2      	subs	r2, r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	490d      	ldr	r1, [pc, #52]	; (8003f30 <RTC_WeekDayNum+0xe8>)
 8003efc:	fba1 1303 	umull	r1, r3, r1, r3
 8003f00:	09db      	lsrs	r3, r3, #7
 8003f02:	4413      	add	r3, r2
 8003f04:	1c9a      	adds	r2, r3, #2
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <RTC_WeekDayNum+0xec>)
 8003f08:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0c:	1ad1      	subs	r1, r2, r3
 8003f0e:	0849      	lsrs	r1, r1, #1
 8003f10:	440b      	add	r3, r1
 8003f12:	0899      	lsrs	r1, r3, #2
 8003f14:	460b      	mov	r3, r1
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	1a5b      	subs	r3, r3, r1
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	b2db      	uxtb	r3, r3
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	38e38e39 	.word	0x38e38e39
 8003f30:	51eb851f 	.word	0x51eb851f
 8003f34:	24924925 	.word	0x24924925

08003f38 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003f48:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <HAL_RTCEx_BKUPWrite+0x30>)
 8003f4a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4413      	add	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	40006c00 	.word	0x40006c00

08003f6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e076      	b.n	800406c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d009      	beq.n	8003fa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	61da      	str	r2, [r3, #28]
 8003f96:	e005      	b.n	8003fa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fd fcb4 	bl	800192c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	ea42 0103 	orr.w	r1, r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	0c1a      	lsrs	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f002 0204 	and.w	r2, r2, #4
 800404a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_SPI_Transmit+0x22>
 8004092:	2302      	movs	r3, #2
 8004094:	e12d      	b.n	80042f2 <HAL_SPI_Transmit+0x27e>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800409e:	f7fd fe95 	bl	8001dcc <HAL_GetTick>
 80040a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d002      	beq.n	80040ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
 80040b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040b8:	e116      	b.n	80042e8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_SPI_Transmit+0x52>
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040ca:	e10d      	b.n	80042e8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2203      	movs	r2, #3
 80040d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	88fa      	ldrh	r2, [r7, #6]
 80040e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004112:	d10f      	bne.n	8004134 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004122:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004132:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d007      	beq.n	8004152 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004150:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415a:	d14f      	bne.n	80041fc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_SPI_Transmit+0xf6>
 8004164:	8afb      	ldrh	r3, [r7, #22]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d142      	bne.n	80041f0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	881a      	ldrh	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800418e:	e02f      	b.n	80041f0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d112      	bne.n	80041c4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	881a      	ldrh	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	1c9a      	adds	r2, r3, #2
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80041c2:	e015      	b.n	80041f0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c4:	f7fd fe02 	bl	8001dcc <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d803      	bhi.n	80041dc <HAL_SPI_Transmit+0x168>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d102      	bne.n	80041e2 <HAL_SPI_Transmit+0x16e>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80041ee:	e07b      	b.n	80042e8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1ca      	bne.n	8004190 <HAL_SPI_Transmit+0x11c>
 80041fa:	e050      	b.n	800429e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_SPI_Transmit+0x196>
 8004204:	8afb      	ldrh	r3, [r7, #22]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d144      	bne.n	8004294 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	7812      	ldrb	r2, [r2, #0]
 8004216:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004230:	e030      	b.n	8004294 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d113      	bne.n	8004268 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330c      	adds	r3, #12
 800424a:	7812      	ldrb	r2, [r2, #0]
 800424c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	86da      	strh	r2, [r3, #54]	; 0x36
 8004266:	e015      	b.n	8004294 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004268:	f7fd fdb0 	bl	8001dcc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d803      	bhi.n	8004280 <HAL_SPI_Transmit+0x20c>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d102      	bne.n	8004286 <HAL_SPI_Transmit+0x212>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004292:	e029      	b.n	80042e8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1c9      	bne.n	8004232 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fbcc 	bl	8004a40 <SPI_EndRxTxTransaction>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	e003      	b.n	80042e8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b088      	sub	sp, #32
 80042fe:	af02      	add	r7, sp, #8
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d002      	beq.n	8004320 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800431a:	2302      	movs	r3, #2
 800431c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800431e:	e0fb      	b.n	8004518 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004328:	d112      	bne.n	8004350 <HAL_SPI_Receive+0x56>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10e      	bne.n	8004350 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2204      	movs	r2, #4
 8004336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f8ef 	bl	800452a <HAL_SPI_TransmitReceive>
 800434c:	4603      	mov	r3, r0
 800434e:	e0e8      	b.n	8004522 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_SPI_Receive+0x64>
 800435a:	2302      	movs	r3, #2
 800435c:	e0e1      	b.n	8004522 <HAL_SPI_Receive+0x228>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004366:	f7fd fd31 	bl	8001dcc <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_SPI_Receive+0x7e>
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800437c:	e0cc      	b.n	8004518 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2204      	movs	r2, #4
 8004382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	88fa      	ldrh	r2, [r7, #6]
 8004396:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c4:	d10f      	bne.n	80043e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d007      	beq.n	8004404 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004402:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d16a      	bne.n	80044e2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800440c:	e032      	b.n	8004474 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d115      	bne.n	8004448 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f103 020c 	add.w	r2, r3, #12
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004446:	e015      	b.n	8004474 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004448:	f7fd fcc0 	bl	8001dcc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d803      	bhi.n	8004460 <HAL_SPI_Receive+0x166>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d102      	bne.n	8004466 <HAL_SPI_Receive+0x16c>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004472:	e051      	b.n	8004518 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1c7      	bne.n	800440e <HAL_SPI_Receive+0x114>
 800447e:	e035      	b.n	80044ec <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d113      	bne.n	80044b6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	b292      	uxth	r2, r2
 800449a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	1c9a      	adds	r2, r3, #2
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044b4:	e015      	b.n	80044e2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b6:	f7fd fc89 	bl	8001dcc <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d803      	bhi.n	80044ce <HAL_SPI_Receive+0x1d4>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d102      	bne.n	80044d4 <HAL_SPI_Receive+0x1da>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80044e0:	e01a      	b.n	8004518 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1c9      	bne.n	8004480 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fa53 	bl	800499c <SPI_EndRxTransaction>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	75fb      	strb	r3, [r7, #23]
 800450e:	e003      	b.n	8004518 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b08c      	sub	sp, #48	; 0x30
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004538:	2301      	movs	r3, #1
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_SPI_TransmitReceive+0x26>
 800454c:	2302      	movs	r3, #2
 800454e:	e198      	b.n	8004882 <HAL_SPI_TransmitReceive+0x358>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004558:	f7fd fc38 	bl	8001dcc <HAL_GetTick>
 800455c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800456e:	887b      	ldrh	r3, [r7, #2]
 8004570:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004572:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004576:	2b01      	cmp	r3, #1
 8004578:	d00f      	beq.n	800459a <HAL_SPI_TransmitReceive+0x70>
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004580:	d107      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x68>
 800458a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800458e:	2b04      	cmp	r3, #4
 8004590:	d003      	beq.n	800459a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004592:	2302      	movs	r3, #2
 8004594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004598:	e16d      	b.n	8004876 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x82>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x82>
 80045a6:	887b      	ldrh	r3, [r7, #2]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d103      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045b2:	e160      	b.n	8004876 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d003      	beq.n	80045c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2205      	movs	r2, #5
 80045c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	887a      	ldrh	r2, [r7, #2]
 80045de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	887a      	ldrh	r2, [r7, #2]
 80045ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d007      	beq.n	800461c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004624:	d17c      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_SPI_TransmitReceive+0x10a>
 800462e:	8b7b      	ldrh	r3, [r7, #26]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d16a      	bne.n	800470a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	881a      	ldrh	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	1c9a      	adds	r2, r3, #2
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004658:	e057      	b.n	800470a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d11b      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x176>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <HAL_SPI_TransmitReceive+0x176>
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d113      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	881a      	ldrh	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	1c9a      	adds	r2, r3, #2
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d119      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x1b8>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d014      	beq.n	80046e2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	b292      	uxth	r2, r2
 80046c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	1c9a      	adds	r2, r3, #2
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046de:	2301      	movs	r3, #1
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046e2:	f7fd fb73 	bl	8001dcc <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d80b      	bhi.n	800470a <HAL_SPI_TransmitReceive+0x1e0>
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d007      	beq.n	800470a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004708:	e0b5      	b.n	8004876 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1a2      	bne.n	800465a <HAL_SPI_TransmitReceive+0x130>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d19d      	bne.n	800465a <HAL_SPI_TransmitReceive+0x130>
 800471e:	e080      	b.n	8004822 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_SPI_TransmitReceive+0x204>
 8004728:	8b7b      	ldrh	r3, [r7, #26]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d16f      	bne.n	800480e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	330c      	adds	r3, #12
 8004738:	7812      	ldrb	r2, [r2, #0]
 800473a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004754:	e05b      	b.n	800480e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	d11c      	bne.n	800479e <HAL_SPI_TransmitReceive+0x274>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d017      	beq.n	800479e <HAL_SPI_TransmitReceive+0x274>
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d114      	bne.n	800479e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	7812      	ldrb	r2, [r2, #0]
 8004780:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d119      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x2b6>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d014      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047dc:	2301      	movs	r3, #1
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047e0:	f7fd faf4 	bl	8001dcc <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d803      	bhi.n	80047f8 <HAL_SPI_TransmitReceive+0x2ce>
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f6:	d102      	bne.n	80047fe <HAL_SPI_TransmitReceive+0x2d4>
 80047f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d107      	bne.n	800480e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800480c:	e033      	b.n	8004876 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d19e      	bne.n	8004756 <HAL_SPI_TransmitReceive+0x22c>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d199      	bne.n	8004756 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004824:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f90a 	bl	8004a40 <SPI_EndRxTxTransaction>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d006      	beq.n	8004840 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800483e:	e01a      	b.n	8004876 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486c:	e003      	b.n	8004876 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800487e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004882:	4618      	mov	r0, r3
 8004884:	3730      	adds	r7, #48	; 0x30
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	4613      	mov	r3, r2
 800489a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800489c:	f7fd fa96 	bl	8001dcc <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4413      	add	r3, r2
 80048aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048ac:	f7fd fa8e 	bl	8001dcc <HAL_GetTick>
 80048b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048b2:	4b39      	ldr	r3, [pc, #228]	; (8004998 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	015b      	lsls	r3, r3, #5
 80048b8:	0d1b      	lsrs	r3, r3, #20
 80048ba:	69fa      	ldr	r2, [r7, #28]
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c2:	e054      	b.n	800496e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ca:	d050      	beq.n	800496e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048cc:	f7fd fa7e 	bl	8001dcc <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d902      	bls.n	80048e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d13d      	bne.n	800495e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048fa:	d111      	bne.n	8004920 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004904:	d004      	beq.n	8004910 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490e:	d107      	bne.n	8004920 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004928:	d10f      	bne.n	800494a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004948:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e017      	b.n	800498e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	3b01      	subs	r3, #1
 800496c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4013      	ands	r3, r2
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	429a      	cmp	r2, r3
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	429a      	cmp	r2, r3
 800498a:	d19b      	bne.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000028 	.word	0x20000028

0800499c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b0:	d111      	bne.n	80049d6 <SPI_EndRxTransaction+0x3a>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ba:	d004      	beq.n	80049c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c4:	d107      	bne.n	80049d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049de:	d117      	bne.n	8004a10 <SPI_EndRxTransaction+0x74>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e8:	d112      	bne.n	8004a10 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2200      	movs	r2, #0
 80049f2:	2101      	movs	r1, #1
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f7ff ff49 	bl	800488c <SPI_WaitFlagStateUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01a      	beq.n	8004a36 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a04:	f043 0220 	orr.w	r2, r3, #32
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e013      	b.n	8004a38 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2200      	movs	r2, #0
 8004a18:	2180      	movs	r1, #128	; 0x80
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f7ff ff36 	bl	800488c <SPI_WaitFlagStateUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2a:	f043 0220 	orr.w	r2, r3, #32
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e000      	b.n	8004a38 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	2180      	movs	r1, #128	; 0x80
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff ff18 	bl	800488c <SPI_WaitFlagStateUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e000      	b.n	8004a74 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e042      	b.n	8004b14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fc ff8c 	bl	80019c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 ff53 	bl	800596c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d16d      	bne.n	8004c18 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_UART_Transmit+0x2c>
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e066      	b.n	8004c1a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2221      	movs	r2, #33	; 0x21
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b5a:	f7fd f937 	bl	8001dcc <HAL_GetTick>
 8004b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	88fa      	ldrh	r2, [r7, #6]
 8004b6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b74:	d108      	bne.n	8004b88 <HAL_UART_Transmit+0x6c>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	61bb      	str	r3, [r7, #24]
 8004b86:	e003      	b.n	8004b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b90:	e02a      	b.n	8004be8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2180      	movs	r1, #128	; 0x80
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fc1b 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e036      	b.n	8004c1a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e007      	b.n	8004bda <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	781a      	ldrb	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1cf      	bne.n	8004b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2140      	movs	r1, #64	; 0x40
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fbeb 	bl	80053d8 <UART_WaitOnFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e006      	b.n	8004c1a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	e000      	b.n	8004c1a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
  }
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d112      	bne.n	8004c62 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_UART_Receive_DMA+0x26>
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e00b      	b.n	8004c64 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	461a      	mov	r2, r3
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fc2b 	bl	80054b4 <UART_Start_Receive_DMA>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	e000      	b.n	8004c64 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
  }
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b0ba      	sub	sp, #232	; 0xe8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10f      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x66>
 8004cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fd90 	bl	80057f0 <UART_Receive_IT>
      return;
 8004cd0:	e25b      	b.n	800518a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 80de 	beq.w	8004e98 <HAL_UART_IRQHandler+0x22c>
 8004cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80d1 	beq.w	8004e98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00b      	beq.n	8004d1a <HAL_UART_IRQHandler+0xae>
 8004d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_UART_IRQHandler+0xd2>
 8004d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	f043 0202 	orr.w	r2, r3, #2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00b      	beq.n	8004d62 <HAL_UART_IRQHandler+0xf6>
 8004d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	f043 0204 	orr.w	r2, r3, #4
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d011      	beq.n	8004d92 <HAL_UART_IRQHandler+0x126>
 8004d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d105      	bne.n	8004d86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	f043 0208 	orr.w	r2, r3, #8
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 81f2 	beq.w	8005180 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_UART_IRQHandler+0x14e>
 8004da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fd1b 	bl	80057f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <HAL_UART_IRQHandler+0x17a>
 8004dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d04f      	beq.n	8004e86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fc25 	bl	8005636 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d041      	beq.n	8004e7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3314      	adds	r3, #20
 8004e22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1d9      	bne.n	8004dfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d013      	beq.n	8004e76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	4a7e      	ldr	r2, [pc, #504]	; (800504c <HAL_UART_IRQHandler+0x3e0>)
 8004e54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fd f9c4 	bl	80021e8 <HAL_DMA_Abort_IT>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d016      	beq.n	8004e94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e70:	4610      	mov	r0, r2
 8004e72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e74:	e00e      	b.n	8004e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f99c 	bl	80051b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e7c:	e00a      	b.n	8004e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f998 	bl	80051b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	e006      	b.n	8004e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f994 	bl	80051b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004e92:	e175      	b.n	8005180 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	bf00      	nop
    return;
 8004e96:	e173      	b.n	8005180 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	f040 814f 	bne.w	8005140 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8148 	beq.w	8005140 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8141 	beq.w	8005140 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80b6 	beq.w	8005050 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ef0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8145 	beq.w	8005184 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f02:	429a      	cmp	r2, r3
 8004f04:	f080 813e 	bcs.w	8005184 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	f000 8088 	beq.w	800502c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f48:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1d9      	bne.n	8004f1c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3314      	adds	r3, #20
 8004f6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3314      	adds	r3, #20
 8004f88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e1      	bne.n	8004f68 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3314      	adds	r3, #20
 8004fc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fc8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e3      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffc:	f023 0310 	bic.w	r3, r3, #16
 8005000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800500e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005010:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800501c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e3      	bne.n	8004fea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	4618      	mov	r0, r3
 8005028:	f7fd f8a2 	bl	8002170 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800503a:	b29b      	uxth	r3, r3
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	b29b      	uxth	r3, r3
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f8bf 	bl	80051c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005048:	e09c      	b.n	8005184 <HAL_UART_IRQHandler+0x518>
 800504a:	bf00      	nop
 800504c:	080056fb 	.word	0x080056fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005058:	b29b      	uxth	r3, r3
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 808e 	beq.w	8005188 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800506c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8089 	beq.w	8005188 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800508c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	330c      	adds	r3, #12
 8005096:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800509a:	647a      	str	r2, [r7, #68]	; 0x44
 800509c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e3      	bne.n	8005076 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3314      	adds	r3, #20
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	623b      	str	r3, [r7, #32]
   return(result);
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f023 0301 	bic.w	r3, r3, #1
 80050c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3314      	adds	r3, #20
 80050ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050d2:	633a      	str	r2, [r7, #48]	; 0x30
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e3      	bne.n	80050ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	60fb      	str	r3, [r7, #12]
   return(result);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0310 	bic.w	r3, r3, #16
 800510a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	330c      	adds	r3, #12
 8005114:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005118:	61fa      	str	r2, [r7, #28]
 800511a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	69b9      	ldr	r1, [r7, #24]
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	617b      	str	r3, [r7, #20]
   return(result);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e3      	bne.n	80050f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005132:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f844 	bl	80051c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800513e:	e023      	b.n	8005188 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <HAL_UART_IRQHandler+0x4f4>
 800514c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fae2 	bl	8005722 <UART_Transmit_IT>
    return;
 800515e:	e014      	b.n	800518a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00e      	beq.n	800518a <HAL_UART_IRQHandler+0x51e>
 800516c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d008      	beq.n	800518a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fb21 	bl	80057c0 <UART_EndTransmit_IT>
    return;
 800517e:	e004      	b.n	800518a <HAL_UART_IRQHandler+0x51e>
    return;
 8005180:	bf00      	nop
 8005182:	e002      	b.n	800518a <HAL_UART_IRQHandler+0x51e>
      return;
 8005184:	bf00      	nop
 8005186:	e000      	b.n	800518a <HAL_UART_IRQHandler+0x51e>
      return;
 8005188:	bf00      	nop
  }
}
 800518a:	37e8      	adds	r7, #232	; 0xe8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr

080051b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr

080051c6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	460b      	mov	r3, r1
 80051d0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b09c      	sub	sp, #112	; 0x70
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d172      	bne.n	80052de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	2200      	movs	r2, #0
 80051fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	330c      	adds	r3, #12
 8005204:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800520e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005214:	66bb      	str	r3, [r7, #104]	; 0x68
 8005216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	330c      	adds	r3, #12
 800521c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800521e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005220:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005224:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800522c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e5      	bne.n	80051fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3314      	adds	r3, #20
 8005238:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	667b      	str	r3, [r7, #100]	; 0x64
 800524a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3314      	adds	r3, #20
 8005250:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005252:	647a      	str	r2, [r7, #68]	; 0x44
 8005254:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e5      	bne.n	8005232 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	623b      	str	r3, [r7, #32]
   return(result);
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800527c:	663b      	str	r3, [r7, #96]	; 0x60
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
 8005284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005286:	633a      	str	r2, [r7, #48]	; 0x30
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800528c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e5      	bne.n	8005266 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529c:	2220      	movs	r2, #32
 800529e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d119      	bne.n	80052de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f023 0310 	bic.w	r3, r3, #16
 80052c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052ca:	61fa      	str	r2, [r7, #28]
 80052cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	69b9      	ldr	r1, [r7, #24]
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	617b      	str	r3, [r7, #20]
   return(result);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e5      	bne.n	80052aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e0:	2200      	movs	r2, #0
 80052e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d106      	bne.n	80052fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052f0:	4619      	mov	r1, r3
 80052f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052f4:	f7ff ff67 	bl	80051c6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052f8:	e002      	b.n	8005300 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80052fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052fc:	f7fc fa9c 	bl	8001838 <HAL_UART_RxCpltCallback>
}
 8005300:	bf00      	nop
 8005302:	3770      	adds	r7, #112	; 0x70
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	2b01      	cmp	r3, #1
 8005322:	d108      	bne.n	8005336 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	4619      	mov	r1, r3
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff ff49 	bl	80051c6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005334:	e002      	b.n	800533c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff ff33 	bl	80051a2 <HAL_UART_RxHalfCpltCallback>
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf14      	ite	ne
 8005364:	2301      	movne	r3, #1
 8005366:	2300      	moveq	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b21      	cmp	r3, #33	; 0x21
 8005376:	d108      	bne.n	800538a <UART_DMAError+0x46>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2200      	movs	r2, #0
 8005382:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005384:	68b8      	ldr	r0, [r7, #8]
 8005386:	f000 f92f 	bl	80055e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b22      	cmp	r3, #34	; 0x22
 80053aa:	d108      	bne.n	80053be <UART_DMAError+0x7a>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80053b8:	68b8      	ldr	r0, [r7, #8]
 80053ba:	f000 f93c 	bl	8005636 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	f043 0210 	orr.w	r2, r3, #16
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ca:	68b8      	ldr	r0, [r7, #8]
 80053cc:	f7ff fef2 	bl	80051b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d0:	bf00      	nop
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b090      	sub	sp, #64	; 0x40
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	e050      	b.n	800548c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d04c      	beq.n	800548c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <UART_WaitOnFlagUntilTimeout+0x30>
 80053f8:	f7fc fce8 	bl	8001dcc <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005404:	429a      	cmp	r2, r3
 8005406:	d241      	bcs.n	800548c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	330c      	adds	r3, #12
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800541e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005428:	637a      	str	r2, [r7, #52]	; 0x34
 800542a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800542e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e5      	bne.n	8005408 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3314      	adds	r3, #20
 8005442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	e853 3f00 	ldrex	r3, [r3]
 800544a:	613b      	str	r3, [r7, #16]
   return(result);
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f023 0301 	bic.w	r3, r3, #1
 8005452:	63bb      	str	r3, [r7, #56]	; 0x38
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3314      	adds	r3, #20
 800545a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800545c:	623a      	str	r2, [r7, #32]
 800545e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	69f9      	ldr	r1, [r7, #28]
 8005462:	6a3a      	ldr	r2, [r7, #32]
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	61bb      	str	r3, [r7, #24]
   return(result);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e5      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e00f      	b.n	80054ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4013      	ands	r3, r2
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d09f      	beq.n	80053ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3740      	adds	r7, #64	; 0x40
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b098      	sub	sp, #96	; 0x60
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2222      	movs	r2, #34	; 0x22
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e0:	4a3e      	ldr	r2, [pc, #248]	; (80055dc <UART_Start_Receive_DMA+0x128>)
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	4a3d      	ldr	r2, [pc, #244]	; (80055e0 <UART_Start_Receive_DMA+0x12c>)
 80054ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	4a3c      	ldr	r2, [pc, #240]	; (80055e4 <UART_Start_Receive_DMA+0x130>)
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	2200      	movs	r2, #0
 80054fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80054fc:	f107 0308 	add.w	r3, r7, #8
 8005500:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3304      	adds	r3, #4
 800550c:	4619      	mov	r1, r3
 800550e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	f7fc fdcc 	bl	80020b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d019      	beq.n	800556a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554c:	65bb      	str	r3, [r7, #88]	; 0x58
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	330c      	adds	r3, #12
 8005554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005556:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005558:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800555c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e5      	bne.n	8005536 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	657b      	str	r3, [r7, #84]	; 0x54
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3314      	adds	r3, #20
 8005588:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800558a:	63ba      	str	r2, [r7, #56]	; 0x38
 800558c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e5      	bne.n	800556a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	617b      	str	r3, [r7, #20]
   return(result);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b4:	653b      	str	r3, [r7, #80]	; 0x50
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055be:	627a      	str	r2, [r7, #36]	; 0x24
 80055c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6a39      	ldr	r1, [r7, #32]
 80055c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e5      	bne.n	800559e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3760      	adds	r7, #96	; 0x60
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	080051dd 	.word	0x080051dd
 80055e0:	08005309 	.word	0x08005309
 80055e4:	08005345 	.word	0x08005345

080055e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b089      	sub	sp, #36	; 0x24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	61ba      	str	r2, [r7, #24]
 8005612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	6979      	ldr	r1, [r7, #20]
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	613b      	str	r3, [r7, #16]
   return(result);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e5      	bne.n	80055f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800562c:	bf00      	nop
 800562e:	3724      	adds	r7, #36	; 0x24
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005636:	b480      	push	{r7}
 8005638:	b095      	sub	sp, #84	; 0x54
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005654:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800565e:	643a      	str	r2, [r7, #64]	; 0x40
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e5      	bne.n	800563e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3314      	adds	r3, #20
 8005678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	61fb      	str	r3, [r7, #28]
   return(result);
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	64bb      	str	r3, [r7, #72]	; 0x48
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3314      	adds	r3, #20
 8005690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005692:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e5      	bne.n	8005672 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d119      	bne.n	80056e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	330c      	adds	r3, #12
 80056b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f023 0310 	bic.w	r3, r3, #16
 80056c4:	647b      	str	r3, [r7, #68]	; 0x44
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	330c      	adds	r3, #12
 80056cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ce:	61ba      	str	r2, [r7, #24]
 80056d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6979      	ldr	r1, [r7, #20]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	613b      	str	r3, [r7, #16]
   return(result);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056f0:	bf00      	nop
 80056f2:	3754      	adds	r7, #84	; 0x54
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr

080056fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff fd4d 	bl	80051b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800571a:	bf00      	nop
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b21      	cmp	r3, #33	; 0x21
 8005734:	d13e      	bne.n	80057b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573e:	d114      	bne.n	800576a <UART_Transmit_IT+0x48>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d110      	bne.n	800576a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800575c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	1c9a      	adds	r2, r3, #2
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	621a      	str	r2, [r3, #32]
 8005768:	e008      	b.n	800577c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6211      	str	r1, [r2, #32]
 8005774:	781a      	ldrb	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29b      	uxth	r3, r3
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4619      	mov	r1, r3
 800578a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10f      	bne.n	80057b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800579e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e000      	b.n	80057b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff fcd5 	bl	8005190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08c      	sub	sp, #48	; 0x30
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b22      	cmp	r3, #34	; 0x22
 8005802:	f040 80ae 	bne.w	8005962 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580e:	d117      	bne.n	8005840 <UART_Receive_IT+0x50>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d113      	bne.n	8005840 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582e:	b29a      	uxth	r2, r3
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	1c9a      	adds	r2, r3, #2
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	629a      	str	r2, [r3, #40]	; 0x28
 800583e:	e026      	b.n	800588e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005852:	d007      	beq.n	8005864 <UART_Receive_IT+0x74>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <UART_Receive_IT+0x82>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e008      	b.n	8005884 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800587e:	b2da      	uxtb	r2, r3
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29b      	uxth	r3, r3
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	4619      	mov	r1, r3
 800589c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d15d      	bne.n	800595e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0220 	bic.w	r2, r2, #32
 80058b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d135      	bne.n	8005954 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	613b      	str	r3, [r7, #16]
   return(result);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f023 0310 	bic.w	r3, r3, #16
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	330c      	adds	r3, #12
 800590c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590e:	623a      	str	r2, [r7, #32]
 8005910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	69f9      	ldr	r1, [r7, #28]
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	61bb      	str	r3, [r7, #24]
   return(result);
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e5      	bne.n	80058ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b10      	cmp	r3, #16
 800592e:	d10a      	bne.n	8005946 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff fc3a 	bl	80051c6 <HAL_UARTEx_RxEventCallback>
 8005952:	e002      	b.n	800595a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fb ff6f 	bl	8001838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	e002      	b.n	8005964 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	e000      	b.n	8005964 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005962:	2302      	movs	r3, #2
  }
}
 8005964:	4618      	mov	r0, r3
 8005966:	3730      	adds	r7, #48	; 0x30
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80059a6:	f023 030c 	bic.w	r3, r3, #12
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	430b      	orrs	r3, r1
 80059b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a2c      	ldr	r2, [pc, #176]	; (8005a80 <UART_SetConfig+0x114>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d103      	bne.n	80059dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059d4:	f7fd fb38 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	e002      	b.n	80059e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059dc:	f7fd fb20 	bl	8003020 <HAL_RCC_GetPCLK1Freq>
 80059e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009a      	lsls	r2, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <UART_SetConfig+0x118>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	0119      	lsls	r1, r3, #4
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009a      	lsls	r2, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a18:	4b1a      	ldr	r3, [pc, #104]	; (8005a84 <UART_SetConfig+0x118>)
 8005a1a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	2064      	movs	r0, #100	; 0x64
 8005a22:	fb00 f303 	mul.w	r3, r0, r3
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	3332      	adds	r3, #50	; 0x32
 8005a2c:	4a15      	ldr	r2, [pc, #84]	; (8005a84 <UART_SetConfig+0x118>)
 8005a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a38:	4419      	add	r1, r3
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009a      	lsls	r2, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a50:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <UART_SetConfig+0x118>)
 8005a52:	fba3 0302 	umull	r0, r3, r3, r2
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	2064      	movs	r0, #100	; 0x64
 8005a5a:	fb00 f303 	mul.w	r3, r0, r3
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	3332      	adds	r3, #50	; 0x32
 8005a64:	4a07      	ldr	r2, [pc, #28]	; (8005a84 <UART_SetConfig+0x118>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	f003 020f 	and.w	r2, r3, #15
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	440a      	add	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40013800 	.word	0x40013800
 8005a84:	51eb851f 	.word	0x51eb851f

08005a88 <__errno>:
 8005a88:	4b01      	ldr	r3, [pc, #4]	; (8005a90 <__errno+0x8>)
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20000034 	.word	0x20000034

08005a94 <__libc_init_array>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	2600      	movs	r6, #0
 8005a98:	4d0c      	ldr	r5, [pc, #48]	; (8005acc <__libc_init_array+0x38>)
 8005a9a:	4c0d      	ldr	r4, [pc, #52]	; (8005ad0 <__libc_init_array+0x3c>)
 8005a9c:	1b64      	subs	r4, r4, r5
 8005a9e:	10a4      	asrs	r4, r4, #2
 8005aa0:	42a6      	cmp	r6, r4
 8005aa2:	d109      	bne.n	8005ab8 <__libc_init_array+0x24>
 8005aa4:	f002 ffae 	bl	8008a04 <_init>
 8005aa8:	2600      	movs	r6, #0
 8005aaa:	4d0a      	ldr	r5, [pc, #40]	; (8005ad4 <__libc_init_array+0x40>)
 8005aac:	4c0a      	ldr	r4, [pc, #40]	; (8005ad8 <__libc_init_array+0x44>)
 8005aae:	1b64      	subs	r4, r4, r5
 8005ab0:	10a4      	asrs	r4, r4, #2
 8005ab2:	42a6      	cmp	r6, r4
 8005ab4:	d105      	bne.n	8005ac2 <__libc_init_array+0x2e>
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
 8005ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abc:	4798      	blx	r3
 8005abe:	3601      	adds	r6, #1
 8005ac0:	e7ee      	b.n	8005aa0 <__libc_init_array+0xc>
 8005ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac6:	4798      	blx	r3
 8005ac8:	3601      	adds	r6, #1
 8005aca:	e7f2      	b.n	8005ab2 <__libc_init_array+0x1e>
 8005acc:	08008e6c 	.word	0x08008e6c
 8005ad0:	08008e6c 	.word	0x08008e6c
 8005ad4:	08008e6c 	.word	0x08008e6c
 8005ad8:	08008e70 	.word	0x08008e70

08005adc <memset>:
 8005adc:	4603      	mov	r3, r0
 8005ade:	4402      	add	r2, r0
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d100      	bne.n	8005ae6 <memset+0xa>
 8005ae4:	4770      	bx	lr
 8005ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aea:	e7f9      	b.n	8005ae0 <memset+0x4>

08005aec <__cvt>:
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af2:	461f      	mov	r7, r3
 8005af4:	bfbb      	ittet	lt
 8005af6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005afa:	461f      	movlt	r7, r3
 8005afc:	2300      	movge	r3, #0
 8005afe:	232d      	movlt	r3, #45	; 0x2d
 8005b00:	b088      	sub	sp, #32
 8005b02:	4614      	mov	r4, r2
 8005b04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b08:	7013      	strb	r3, [r2, #0]
 8005b0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005b10:	f023 0820 	bic.w	r8, r3, #32
 8005b14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b18:	d005      	beq.n	8005b26 <__cvt+0x3a>
 8005b1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b1e:	d100      	bne.n	8005b22 <__cvt+0x36>
 8005b20:	3501      	adds	r5, #1
 8005b22:	2302      	movs	r3, #2
 8005b24:	e000      	b.n	8005b28 <__cvt+0x3c>
 8005b26:	2303      	movs	r3, #3
 8005b28:	aa07      	add	r2, sp, #28
 8005b2a:	9204      	str	r2, [sp, #16]
 8005b2c:	aa06      	add	r2, sp, #24
 8005b2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b32:	e9cd 3500 	strd	r3, r5, [sp]
 8005b36:	4622      	mov	r2, r4
 8005b38:	463b      	mov	r3, r7
 8005b3a:	f000 fd01 	bl	8006540 <_dtoa_r>
 8005b3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b42:	4606      	mov	r6, r0
 8005b44:	d102      	bne.n	8005b4c <__cvt+0x60>
 8005b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b48:	07db      	lsls	r3, r3, #31
 8005b4a:	d522      	bpl.n	8005b92 <__cvt+0xa6>
 8005b4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b50:	eb06 0905 	add.w	r9, r6, r5
 8005b54:	d110      	bne.n	8005b78 <__cvt+0x8c>
 8005b56:	7833      	ldrb	r3, [r6, #0]
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d10a      	bne.n	8005b72 <__cvt+0x86>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2300      	movs	r3, #0
 8005b60:	4620      	mov	r0, r4
 8005b62:	4639      	mov	r1, r7
 8005b64:	f7fa ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8005b68:	b918      	cbnz	r0, 8005b72 <__cvt+0x86>
 8005b6a:	f1c5 0501 	rsb	r5, r5, #1
 8005b6e:	f8ca 5000 	str.w	r5, [sl]
 8005b72:	f8da 3000 	ldr.w	r3, [sl]
 8005b76:	4499      	add	r9, r3
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	4639      	mov	r1, r7
 8005b80:	f7fa ff12 	bl	80009a8 <__aeabi_dcmpeq>
 8005b84:	b108      	cbz	r0, 8005b8a <__cvt+0x9e>
 8005b86:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b8a:	2230      	movs	r2, #48	; 0x30
 8005b8c:	9b07      	ldr	r3, [sp, #28]
 8005b8e:	454b      	cmp	r3, r9
 8005b90:	d307      	bcc.n	8005ba2 <__cvt+0xb6>
 8005b92:	4630      	mov	r0, r6
 8005b94:	9b07      	ldr	r3, [sp, #28]
 8005b96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b98:	1b9b      	subs	r3, r3, r6
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	b008      	add	sp, #32
 8005b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba2:	1c59      	adds	r1, r3, #1
 8005ba4:	9107      	str	r1, [sp, #28]
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	e7f0      	b.n	8005b8c <__cvt+0xa0>

08005baa <__exponent>:
 8005baa:	4603      	mov	r3, r0
 8005bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	f803 2b02 	strb.w	r2, [r3], #2
 8005bb4:	bfb6      	itet	lt
 8005bb6:	222d      	movlt	r2, #45	; 0x2d
 8005bb8:	222b      	movge	r2, #43	; 0x2b
 8005bba:	4249      	neglt	r1, r1
 8005bbc:	2909      	cmp	r1, #9
 8005bbe:	7042      	strb	r2, [r0, #1]
 8005bc0:	dd2b      	ble.n	8005c1a <__exponent+0x70>
 8005bc2:	f10d 0407 	add.w	r4, sp, #7
 8005bc6:	46a4      	mov	ip, r4
 8005bc8:	270a      	movs	r7, #10
 8005bca:	fb91 f6f7 	sdiv	r6, r1, r7
 8005bce:	460a      	mov	r2, r1
 8005bd0:	46a6      	mov	lr, r4
 8005bd2:	fb07 1516 	mls	r5, r7, r6, r1
 8005bd6:	2a63      	cmp	r2, #99	; 0x63
 8005bd8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005bdc:	4631      	mov	r1, r6
 8005bde:	f104 34ff 	add.w	r4, r4, #4294967295
 8005be2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005be6:	dcf0      	bgt.n	8005bca <__exponent+0x20>
 8005be8:	3130      	adds	r1, #48	; 0x30
 8005bea:	f1ae 0502 	sub.w	r5, lr, #2
 8005bee:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	1c44      	adds	r4, r0, #1
 8005bf6:	4561      	cmp	r1, ip
 8005bf8:	d30a      	bcc.n	8005c10 <__exponent+0x66>
 8005bfa:	f10d 0209 	add.w	r2, sp, #9
 8005bfe:	eba2 020e 	sub.w	r2, r2, lr
 8005c02:	4565      	cmp	r5, ip
 8005c04:	bf88      	it	hi
 8005c06:	2200      	movhi	r2, #0
 8005c08:	4413      	add	r3, r2
 8005c0a:	1a18      	subs	r0, r3, r0
 8005c0c:	b003      	add	sp, #12
 8005c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c14:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c18:	e7ed      	b.n	8005bf6 <__exponent+0x4c>
 8005c1a:	2330      	movs	r3, #48	; 0x30
 8005c1c:	3130      	adds	r1, #48	; 0x30
 8005c1e:	7083      	strb	r3, [r0, #2]
 8005c20:	70c1      	strb	r1, [r0, #3]
 8005c22:	1d03      	adds	r3, r0, #4
 8005c24:	e7f1      	b.n	8005c0a <__exponent+0x60>
	...

08005c28 <_printf_float>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	b091      	sub	sp, #68	; 0x44
 8005c2e:	460c      	mov	r4, r1
 8005c30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005c34:	4616      	mov	r6, r2
 8005c36:	461f      	mov	r7, r3
 8005c38:	4605      	mov	r5, r0
 8005c3a:	f001 fa6f 	bl	800711c <_localeconv_r>
 8005c3e:	6803      	ldr	r3, [r0, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	9309      	str	r3, [sp, #36]	; 0x24
 8005c44:	f7fa fa84 	bl	8000150 <strlen>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	930e      	str	r3, [sp, #56]	; 0x38
 8005c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c50:	900a      	str	r0, [sp, #40]	; 0x28
 8005c52:	3307      	adds	r3, #7
 8005c54:	f023 0307 	bic.w	r3, r3, #7
 8005c58:	f103 0208 	add.w	r2, r3, #8
 8005c5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c60:	f8d4 b000 	ldr.w	fp, [r4]
 8005c64:	f8c8 2000 	str.w	r2, [r8]
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005c74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7e:	4640      	mov	r0, r8
 8005c80:	4b9c      	ldr	r3, [pc, #624]	; (8005ef4 <_printf_float+0x2cc>)
 8005c82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c84:	f7fa fec2 	bl	8000a0c <__aeabi_dcmpun>
 8005c88:	bb70      	cbnz	r0, 8005ce8 <_printf_float+0xc0>
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8e:	4640      	mov	r0, r8
 8005c90:	4b98      	ldr	r3, [pc, #608]	; (8005ef4 <_printf_float+0x2cc>)
 8005c92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c94:	f7fa fe9c 	bl	80009d0 <__aeabi_dcmple>
 8005c98:	bb30      	cbnz	r0, 8005ce8 <_printf_float+0xc0>
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	4651      	mov	r1, sl
 8005ca2:	f7fa fe8b 	bl	80009bc <__aeabi_dcmplt>
 8005ca6:	b110      	cbz	r0, 8005cae <_printf_float+0x86>
 8005ca8:	232d      	movs	r3, #45	; 0x2d
 8005caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cae:	4b92      	ldr	r3, [pc, #584]	; (8005ef8 <_printf_float+0x2d0>)
 8005cb0:	4892      	ldr	r0, [pc, #584]	; (8005efc <_printf_float+0x2d4>)
 8005cb2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005cb6:	bf94      	ite	ls
 8005cb8:	4698      	movls	r8, r3
 8005cba:	4680      	movhi	r8, r0
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	f04f 0a00 	mov.w	sl, #0
 8005cc2:	6123      	str	r3, [r4, #16]
 8005cc4:	f02b 0304 	bic.w	r3, fp, #4
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	4633      	mov	r3, r6
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4628      	mov	r0, r5
 8005cd0:	9700      	str	r7, [sp, #0]
 8005cd2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005cd4:	f000 f9d4 	bl	8006080 <_printf_common>
 8005cd8:	3001      	adds	r0, #1
 8005cda:	f040 8090 	bne.w	8005dfe <_printf_float+0x1d6>
 8005cde:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce2:	b011      	add	sp, #68	; 0x44
 8005ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce8:	4642      	mov	r2, r8
 8005cea:	4653      	mov	r3, sl
 8005cec:	4640      	mov	r0, r8
 8005cee:	4651      	mov	r1, sl
 8005cf0:	f7fa fe8c 	bl	8000a0c <__aeabi_dcmpun>
 8005cf4:	b148      	cbz	r0, 8005d0a <_printf_float+0xe2>
 8005cf6:	f1ba 0f00 	cmp.w	sl, #0
 8005cfa:	bfb8      	it	lt
 8005cfc:	232d      	movlt	r3, #45	; 0x2d
 8005cfe:	4880      	ldr	r0, [pc, #512]	; (8005f00 <_printf_float+0x2d8>)
 8005d00:	bfb8      	it	lt
 8005d02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d06:	4b7f      	ldr	r3, [pc, #508]	; (8005f04 <_printf_float+0x2dc>)
 8005d08:	e7d3      	b.n	8005cb2 <_printf_float+0x8a>
 8005d0a:	6863      	ldr	r3, [r4, #4]
 8005d0c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	d142      	bne.n	8005d9a <_printf_float+0x172>
 8005d14:	2306      	movs	r3, #6
 8005d16:	6063      	str	r3, [r4, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	9206      	str	r2, [sp, #24]
 8005d1c:	aa0e      	add	r2, sp, #56	; 0x38
 8005d1e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005d22:	aa0d      	add	r2, sp, #52	; 0x34
 8005d24:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005d28:	9203      	str	r2, [sp, #12]
 8005d2a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005d2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d32:	6023      	str	r3, [r4, #0]
 8005d34:	6863      	ldr	r3, [r4, #4]
 8005d36:	4642      	mov	r2, r8
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	4653      	mov	r3, sl
 8005d3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005d40:	f7ff fed4 	bl	8005aec <__cvt>
 8005d44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d46:	4680      	mov	r8, r0
 8005d48:	2947      	cmp	r1, #71	; 0x47
 8005d4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d4c:	d108      	bne.n	8005d60 <_printf_float+0x138>
 8005d4e:	1cc8      	adds	r0, r1, #3
 8005d50:	db02      	blt.n	8005d58 <_printf_float+0x130>
 8005d52:	6863      	ldr	r3, [r4, #4]
 8005d54:	4299      	cmp	r1, r3
 8005d56:	dd40      	ble.n	8005dda <_printf_float+0x1b2>
 8005d58:	f1a9 0902 	sub.w	r9, r9, #2
 8005d5c:	fa5f f989 	uxtb.w	r9, r9
 8005d60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d64:	d81f      	bhi.n	8005da6 <_printf_float+0x17e>
 8005d66:	464a      	mov	r2, r9
 8005d68:	3901      	subs	r1, #1
 8005d6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d6e:	910d      	str	r1, [sp, #52]	; 0x34
 8005d70:	f7ff ff1b 	bl	8005baa <__exponent>
 8005d74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d76:	4682      	mov	sl, r0
 8005d78:	1813      	adds	r3, r2, r0
 8005d7a:	2a01      	cmp	r2, #1
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	dc02      	bgt.n	8005d86 <_printf_float+0x15e>
 8005d80:	6822      	ldr	r2, [r4, #0]
 8005d82:	07d2      	lsls	r2, r2, #31
 8005d84:	d501      	bpl.n	8005d8a <_printf_float+0x162>
 8005d86:	3301      	adds	r3, #1
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d09b      	beq.n	8005cca <_printf_float+0xa2>
 8005d92:	232d      	movs	r3, #45	; 0x2d
 8005d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d98:	e797      	b.n	8005cca <_printf_float+0xa2>
 8005d9a:	2947      	cmp	r1, #71	; 0x47
 8005d9c:	d1bc      	bne.n	8005d18 <_printf_float+0xf0>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1ba      	bne.n	8005d18 <_printf_float+0xf0>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e7b7      	b.n	8005d16 <_printf_float+0xee>
 8005da6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005daa:	d118      	bne.n	8005dde <_printf_float+0x1b6>
 8005dac:	2900      	cmp	r1, #0
 8005dae:	6863      	ldr	r3, [r4, #4]
 8005db0:	dd0b      	ble.n	8005dca <_printf_float+0x1a2>
 8005db2:	6121      	str	r1, [r4, #16]
 8005db4:	b913      	cbnz	r3, 8005dbc <_printf_float+0x194>
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	07d0      	lsls	r0, r2, #31
 8005dba:	d502      	bpl.n	8005dc2 <_printf_float+0x19a>
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	440b      	add	r3, r1
 8005dc0:	6123      	str	r3, [r4, #16]
 8005dc2:	f04f 0a00 	mov.w	sl, #0
 8005dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005dc8:	e7df      	b.n	8005d8a <_printf_float+0x162>
 8005dca:	b913      	cbnz	r3, 8005dd2 <_printf_float+0x1aa>
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	07d2      	lsls	r2, r2, #31
 8005dd0:	d501      	bpl.n	8005dd6 <_printf_float+0x1ae>
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	e7f4      	b.n	8005dc0 <_printf_float+0x198>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e7f2      	b.n	8005dc0 <_printf_float+0x198>
 8005dda:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005de0:	4299      	cmp	r1, r3
 8005de2:	db05      	blt.n	8005df0 <_printf_float+0x1c8>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	6121      	str	r1, [r4, #16]
 8005de8:	07d8      	lsls	r0, r3, #31
 8005dea:	d5ea      	bpl.n	8005dc2 <_printf_float+0x19a>
 8005dec:	1c4b      	adds	r3, r1, #1
 8005dee:	e7e7      	b.n	8005dc0 <_printf_float+0x198>
 8005df0:	2900      	cmp	r1, #0
 8005df2:	bfcc      	ite	gt
 8005df4:	2201      	movgt	r2, #1
 8005df6:	f1c1 0202 	rsble	r2, r1, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	e7e0      	b.n	8005dc0 <_printf_float+0x198>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	055a      	lsls	r2, r3, #21
 8005e02:	d407      	bmi.n	8005e14 <_printf_float+0x1ec>
 8005e04:	6923      	ldr	r3, [r4, #16]
 8005e06:	4642      	mov	r2, r8
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d12b      	bne.n	8005e6a <_printf_float+0x242>
 8005e12:	e764      	b.n	8005cde <_printf_float+0xb6>
 8005e14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e18:	f240 80dd 	bls.w	8005fd6 <_printf_float+0x3ae>
 8005e1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e20:	2200      	movs	r2, #0
 8005e22:	2300      	movs	r3, #0
 8005e24:	f7fa fdc0 	bl	80009a8 <__aeabi_dcmpeq>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d033      	beq.n	8005e94 <_printf_float+0x26c>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	4a35      	ldr	r2, [pc, #212]	; (8005f08 <_printf_float+0x2e0>)
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	f43f af51 	beq.w	8005cde <_printf_float+0xb6>
 8005e3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e40:	429a      	cmp	r2, r3
 8005e42:	db02      	blt.n	8005e4a <_printf_float+0x222>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	07d8      	lsls	r0, r3, #31
 8005e48:	d50f      	bpl.n	8005e6a <_printf_float+0x242>
 8005e4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	47b8      	blx	r7
 8005e54:	3001      	adds	r0, #1
 8005e56:	f43f af42 	beq.w	8005cde <_printf_float+0xb6>
 8005e5a:	f04f 0800 	mov.w	r8, #0
 8005e5e:	f104 091a 	add.w	r9, r4, #26
 8005e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e64:	3b01      	subs	r3, #1
 8005e66:	4543      	cmp	r3, r8
 8005e68:	dc09      	bgt.n	8005e7e <_printf_float+0x256>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	079b      	lsls	r3, r3, #30
 8005e6e:	f100 8102 	bmi.w	8006076 <_printf_float+0x44e>
 8005e72:	68e0      	ldr	r0, [r4, #12]
 8005e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e76:	4298      	cmp	r0, r3
 8005e78:	bfb8      	it	lt
 8005e7a:	4618      	movlt	r0, r3
 8005e7c:	e731      	b.n	8005ce2 <_printf_float+0xba>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	464a      	mov	r2, r9
 8005e82:	4631      	mov	r1, r6
 8005e84:	4628      	mov	r0, r5
 8005e86:	47b8      	blx	r7
 8005e88:	3001      	adds	r0, #1
 8005e8a:	f43f af28 	beq.w	8005cde <_printf_float+0xb6>
 8005e8e:	f108 0801 	add.w	r8, r8, #1
 8005e92:	e7e6      	b.n	8005e62 <_printf_float+0x23a>
 8005e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	dc38      	bgt.n	8005f0c <_printf_float+0x2e4>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	4a19      	ldr	r2, [pc, #100]	; (8005f08 <_printf_float+0x2e0>)
 8005ea2:	47b8      	blx	r7
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f43f af1a 	beq.w	8005cde <_printf_float+0xb6>
 8005eaa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	d102      	bne.n	8005eb8 <_printf_float+0x290>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	07d9      	lsls	r1, r3, #31
 8005eb6:	d5d8      	bpl.n	8005e6a <_printf_float+0x242>
 8005eb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	47b8      	blx	r7
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	f43f af0b 	beq.w	8005cde <_printf_float+0xb6>
 8005ec8:	f04f 0900 	mov.w	r9, #0
 8005ecc:	f104 0a1a 	add.w	sl, r4, #26
 8005ed0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ed2:	425b      	negs	r3, r3
 8005ed4:	454b      	cmp	r3, r9
 8005ed6:	dc01      	bgt.n	8005edc <_printf_float+0x2b4>
 8005ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eda:	e794      	b.n	8005e06 <_printf_float+0x1de>
 8005edc:	2301      	movs	r3, #1
 8005ede:	4652      	mov	r2, sl
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f aef9 	beq.w	8005cde <_printf_float+0xb6>
 8005eec:	f109 0901 	add.w	r9, r9, #1
 8005ef0:	e7ee      	b.n	8005ed0 <_printf_float+0x2a8>
 8005ef2:	bf00      	nop
 8005ef4:	7fefffff 	.word	0x7fefffff
 8005ef8:	08008a8c 	.word	0x08008a8c
 8005efc:	08008a90 	.word	0x08008a90
 8005f00:	08008a98 	.word	0x08008a98
 8005f04:	08008a94 	.word	0x08008a94
 8005f08:	08008a9c 	.word	0x08008a9c
 8005f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f10:	429a      	cmp	r2, r3
 8005f12:	bfa8      	it	ge
 8005f14:	461a      	movge	r2, r3
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	4691      	mov	r9, r2
 8005f1a:	dc37      	bgt.n	8005f8c <_printf_float+0x364>
 8005f1c:	f04f 0b00 	mov.w	fp, #0
 8005f20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f24:	f104 021a 	add.w	r2, r4, #26
 8005f28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005f2c:	ebaa 0309 	sub.w	r3, sl, r9
 8005f30:	455b      	cmp	r3, fp
 8005f32:	dc33      	bgt.n	8005f9c <_printf_float+0x374>
 8005f34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	db3b      	blt.n	8005fb4 <_printf_float+0x38c>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	07da      	lsls	r2, r3, #31
 8005f40:	d438      	bmi.n	8005fb4 <_printf_float+0x38c>
 8005f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f46:	eba2 030a 	sub.w	r3, r2, sl
 8005f4a:	eba2 0901 	sub.w	r9, r2, r1
 8005f4e:	4599      	cmp	r9, r3
 8005f50:	bfa8      	it	ge
 8005f52:	4699      	movge	r9, r3
 8005f54:	f1b9 0f00 	cmp.w	r9, #0
 8005f58:	dc34      	bgt.n	8005fc4 <_printf_float+0x39c>
 8005f5a:	f04f 0800 	mov.w	r8, #0
 8005f5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f62:	f104 0a1a 	add.w	sl, r4, #26
 8005f66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	eba3 0309 	sub.w	r3, r3, r9
 8005f70:	4543      	cmp	r3, r8
 8005f72:	f77f af7a 	ble.w	8005e6a <_printf_float+0x242>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4652      	mov	r2, sl
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	f43f aeac 	beq.w	8005cde <_printf_float+0xb6>
 8005f86:	f108 0801 	add.w	r8, r8, #1
 8005f8a:	e7ec      	b.n	8005f66 <_printf_float+0x33e>
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4642      	mov	r2, r8
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	d1c0      	bne.n	8005f1c <_printf_float+0x2f4>
 8005f9a:	e6a0      	b.n	8005cde <_printf_float+0xb6>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	f43f ae99 	beq.w	8005cde <_printf_float+0xb6>
 8005fac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fae:	f10b 0b01 	add.w	fp, fp, #1
 8005fb2:	e7b9      	b.n	8005f28 <_printf_float+0x300>
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d1bf      	bne.n	8005f42 <_printf_float+0x31a>
 8005fc2:	e68c      	b.n	8005cde <_printf_float+0xb6>
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	eb08 020a 	add.w	r2, r8, sl
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d1c2      	bne.n	8005f5a <_printf_float+0x332>
 8005fd4:	e683      	b.n	8005cde <_printf_float+0xb6>
 8005fd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fd8:	2a01      	cmp	r2, #1
 8005fda:	dc01      	bgt.n	8005fe0 <_printf_float+0x3b8>
 8005fdc:	07db      	lsls	r3, r3, #31
 8005fde:	d537      	bpl.n	8006050 <_printf_float+0x428>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4642      	mov	r2, r8
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b8      	blx	r7
 8005fea:	3001      	adds	r0, #1
 8005fec:	f43f ae77 	beq.w	8005cde <_printf_float+0xb6>
 8005ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b8      	blx	r7
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	f43f ae6f 	beq.w	8005cde <_printf_float+0xb6>
 8006000:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006004:	2200      	movs	r2, #0
 8006006:	2300      	movs	r3, #0
 8006008:	f7fa fcce 	bl	80009a8 <__aeabi_dcmpeq>
 800600c:	b9d8      	cbnz	r0, 8006046 <_printf_float+0x41e>
 800600e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006010:	f108 0201 	add.w	r2, r8, #1
 8006014:	3b01      	subs	r3, #1
 8006016:	4631      	mov	r1, r6
 8006018:	4628      	mov	r0, r5
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	d10e      	bne.n	800603e <_printf_float+0x416>
 8006020:	e65d      	b.n	8005cde <_printf_float+0xb6>
 8006022:	2301      	movs	r3, #1
 8006024:	464a      	mov	r2, r9
 8006026:	4631      	mov	r1, r6
 8006028:	4628      	mov	r0, r5
 800602a:	47b8      	blx	r7
 800602c:	3001      	adds	r0, #1
 800602e:	f43f ae56 	beq.w	8005cde <_printf_float+0xb6>
 8006032:	f108 0801 	add.w	r8, r8, #1
 8006036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006038:	3b01      	subs	r3, #1
 800603a:	4543      	cmp	r3, r8
 800603c:	dcf1      	bgt.n	8006022 <_printf_float+0x3fa>
 800603e:	4653      	mov	r3, sl
 8006040:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006044:	e6e0      	b.n	8005e08 <_printf_float+0x1e0>
 8006046:	f04f 0800 	mov.w	r8, #0
 800604a:	f104 091a 	add.w	r9, r4, #26
 800604e:	e7f2      	b.n	8006036 <_printf_float+0x40e>
 8006050:	2301      	movs	r3, #1
 8006052:	4642      	mov	r2, r8
 8006054:	e7df      	b.n	8006016 <_printf_float+0x3ee>
 8006056:	2301      	movs	r3, #1
 8006058:	464a      	mov	r2, r9
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f ae3c 	beq.w	8005cde <_printf_float+0xb6>
 8006066:	f108 0801 	add.w	r8, r8, #1
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800606e:	1a5b      	subs	r3, r3, r1
 8006070:	4543      	cmp	r3, r8
 8006072:	dcf0      	bgt.n	8006056 <_printf_float+0x42e>
 8006074:	e6fd      	b.n	8005e72 <_printf_float+0x24a>
 8006076:	f04f 0800 	mov.w	r8, #0
 800607a:	f104 0919 	add.w	r9, r4, #25
 800607e:	e7f4      	b.n	800606a <_printf_float+0x442>

08006080 <_printf_common>:
 8006080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	4616      	mov	r6, r2
 8006086:	4699      	mov	r9, r3
 8006088:	688a      	ldr	r2, [r1, #8]
 800608a:	690b      	ldr	r3, [r1, #16]
 800608c:	4607      	mov	r7, r0
 800608e:	4293      	cmp	r3, r2
 8006090:	bfb8      	it	lt
 8006092:	4613      	movlt	r3, r2
 8006094:	6033      	str	r3, [r6, #0]
 8006096:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800609a:	460c      	mov	r4, r1
 800609c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a0:	b10a      	cbz	r2, 80060a6 <_printf_common+0x26>
 80060a2:	3301      	adds	r3, #1
 80060a4:	6033      	str	r3, [r6, #0]
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	0699      	lsls	r1, r3, #26
 80060aa:	bf42      	ittt	mi
 80060ac:	6833      	ldrmi	r3, [r6, #0]
 80060ae:	3302      	addmi	r3, #2
 80060b0:	6033      	strmi	r3, [r6, #0]
 80060b2:	6825      	ldr	r5, [r4, #0]
 80060b4:	f015 0506 	ands.w	r5, r5, #6
 80060b8:	d106      	bne.n	80060c8 <_printf_common+0x48>
 80060ba:	f104 0a19 	add.w	sl, r4, #25
 80060be:	68e3      	ldr	r3, [r4, #12]
 80060c0:	6832      	ldr	r2, [r6, #0]
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	42ab      	cmp	r3, r5
 80060c6:	dc28      	bgt.n	800611a <_printf_common+0x9a>
 80060c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060cc:	1e13      	subs	r3, r2, #0
 80060ce:	6822      	ldr	r2, [r4, #0]
 80060d0:	bf18      	it	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	0692      	lsls	r2, r2, #26
 80060d6:	d42d      	bmi.n	8006134 <_printf_common+0xb4>
 80060d8:	4649      	mov	r1, r9
 80060da:	4638      	mov	r0, r7
 80060dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060e0:	47c0      	blx	r8
 80060e2:	3001      	adds	r0, #1
 80060e4:	d020      	beq.n	8006128 <_printf_common+0xa8>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	68e5      	ldr	r5, [r4, #12]
 80060ea:	f003 0306 	and.w	r3, r3, #6
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	bf18      	it	ne
 80060f2:	2500      	movne	r5, #0
 80060f4:	6832      	ldr	r2, [r6, #0]
 80060f6:	f04f 0600 	mov.w	r6, #0
 80060fa:	68a3      	ldr	r3, [r4, #8]
 80060fc:	bf08      	it	eq
 80060fe:	1aad      	subeq	r5, r5, r2
 8006100:	6922      	ldr	r2, [r4, #16]
 8006102:	bf08      	it	eq
 8006104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006108:	4293      	cmp	r3, r2
 800610a:	bfc4      	itt	gt
 800610c:	1a9b      	subgt	r3, r3, r2
 800610e:	18ed      	addgt	r5, r5, r3
 8006110:	341a      	adds	r4, #26
 8006112:	42b5      	cmp	r5, r6
 8006114:	d11a      	bne.n	800614c <_printf_common+0xcc>
 8006116:	2000      	movs	r0, #0
 8006118:	e008      	b.n	800612c <_printf_common+0xac>
 800611a:	2301      	movs	r3, #1
 800611c:	4652      	mov	r2, sl
 800611e:	4649      	mov	r1, r9
 8006120:	4638      	mov	r0, r7
 8006122:	47c0      	blx	r8
 8006124:	3001      	adds	r0, #1
 8006126:	d103      	bne.n	8006130 <_printf_common+0xb0>
 8006128:	f04f 30ff 	mov.w	r0, #4294967295
 800612c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006130:	3501      	adds	r5, #1
 8006132:	e7c4      	b.n	80060be <_printf_common+0x3e>
 8006134:	2030      	movs	r0, #48	; 0x30
 8006136:	18e1      	adds	r1, r4, r3
 8006138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006142:	4422      	add	r2, r4
 8006144:	3302      	adds	r3, #2
 8006146:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800614a:	e7c5      	b.n	80060d8 <_printf_common+0x58>
 800614c:	2301      	movs	r3, #1
 800614e:	4622      	mov	r2, r4
 8006150:	4649      	mov	r1, r9
 8006152:	4638      	mov	r0, r7
 8006154:	47c0      	blx	r8
 8006156:	3001      	adds	r0, #1
 8006158:	d0e6      	beq.n	8006128 <_printf_common+0xa8>
 800615a:	3601      	adds	r6, #1
 800615c:	e7d9      	b.n	8006112 <_printf_common+0x92>
	...

08006160 <_printf_i>:
 8006160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006164:	460c      	mov	r4, r1
 8006166:	7e27      	ldrb	r7, [r4, #24]
 8006168:	4691      	mov	r9, r2
 800616a:	2f78      	cmp	r7, #120	; 0x78
 800616c:	4680      	mov	r8, r0
 800616e:	469a      	mov	sl, r3
 8006170:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006172:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006176:	d807      	bhi.n	8006188 <_printf_i+0x28>
 8006178:	2f62      	cmp	r7, #98	; 0x62
 800617a:	d80a      	bhi.n	8006192 <_printf_i+0x32>
 800617c:	2f00      	cmp	r7, #0
 800617e:	f000 80d9 	beq.w	8006334 <_printf_i+0x1d4>
 8006182:	2f58      	cmp	r7, #88	; 0x58
 8006184:	f000 80a4 	beq.w	80062d0 <_printf_i+0x170>
 8006188:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800618c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006190:	e03a      	b.n	8006208 <_printf_i+0xa8>
 8006192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006196:	2b15      	cmp	r3, #21
 8006198:	d8f6      	bhi.n	8006188 <_printf_i+0x28>
 800619a:	a001      	add	r0, pc, #4	; (adr r0, 80061a0 <_printf_i+0x40>)
 800619c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80061a0:	080061f9 	.word	0x080061f9
 80061a4:	0800620d 	.word	0x0800620d
 80061a8:	08006189 	.word	0x08006189
 80061ac:	08006189 	.word	0x08006189
 80061b0:	08006189 	.word	0x08006189
 80061b4:	08006189 	.word	0x08006189
 80061b8:	0800620d 	.word	0x0800620d
 80061bc:	08006189 	.word	0x08006189
 80061c0:	08006189 	.word	0x08006189
 80061c4:	08006189 	.word	0x08006189
 80061c8:	08006189 	.word	0x08006189
 80061cc:	0800631b 	.word	0x0800631b
 80061d0:	0800623d 	.word	0x0800623d
 80061d4:	080062fd 	.word	0x080062fd
 80061d8:	08006189 	.word	0x08006189
 80061dc:	08006189 	.word	0x08006189
 80061e0:	0800633d 	.word	0x0800633d
 80061e4:	08006189 	.word	0x08006189
 80061e8:	0800623d 	.word	0x0800623d
 80061ec:	08006189 	.word	0x08006189
 80061f0:	08006189 	.word	0x08006189
 80061f4:	08006305 	.word	0x08006305
 80061f8:	680b      	ldr	r3, [r1, #0]
 80061fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061fe:	1d1a      	adds	r2, r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	600a      	str	r2, [r1, #0]
 8006204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006208:	2301      	movs	r3, #1
 800620a:	e0a4      	b.n	8006356 <_printf_i+0x1f6>
 800620c:	6825      	ldr	r5, [r4, #0]
 800620e:	6808      	ldr	r0, [r1, #0]
 8006210:	062e      	lsls	r6, r5, #24
 8006212:	f100 0304 	add.w	r3, r0, #4
 8006216:	d50a      	bpl.n	800622e <_printf_i+0xce>
 8006218:	6805      	ldr	r5, [r0, #0]
 800621a:	600b      	str	r3, [r1, #0]
 800621c:	2d00      	cmp	r5, #0
 800621e:	da03      	bge.n	8006228 <_printf_i+0xc8>
 8006220:	232d      	movs	r3, #45	; 0x2d
 8006222:	426d      	negs	r5, r5
 8006224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006228:	230a      	movs	r3, #10
 800622a:	485e      	ldr	r0, [pc, #376]	; (80063a4 <_printf_i+0x244>)
 800622c:	e019      	b.n	8006262 <_printf_i+0x102>
 800622e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006232:	6805      	ldr	r5, [r0, #0]
 8006234:	600b      	str	r3, [r1, #0]
 8006236:	bf18      	it	ne
 8006238:	b22d      	sxthne	r5, r5
 800623a:	e7ef      	b.n	800621c <_printf_i+0xbc>
 800623c:	680b      	ldr	r3, [r1, #0]
 800623e:	6825      	ldr	r5, [r4, #0]
 8006240:	1d18      	adds	r0, r3, #4
 8006242:	6008      	str	r0, [r1, #0]
 8006244:	0628      	lsls	r0, r5, #24
 8006246:	d501      	bpl.n	800624c <_printf_i+0xec>
 8006248:	681d      	ldr	r5, [r3, #0]
 800624a:	e002      	b.n	8006252 <_printf_i+0xf2>
 800624c:	0669      	lsls	r1, r5, #25
 800624e:	d5fb      	bpl.n	8006248 <_printf_i+0xe8>
 8006250:	881d      	ldrh	r5, [r3, #0]
 8006252:	2f6f      	cmp	r7, #111	; 0x6f
 8006254:	bf0c      	ite	eq
 8006256:	2308      	moveq	r3, #8
 8006258:	230a      	movne	r3, #10
 800625a:	4852      	ldr	r0, [pc, #328]	; (80063a4 <_printf_i+0x244>)
 800625c:	2100      	movs	r1, #0
 800625e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006262:	6866      	ldr	r6, [r4, #4]
 8006264:	2e00      	cmp	r6, #0
 8006266:	bfa8      	it	ge
 8006268:	6821      	ldrge	r1, [r4, #0]
 800626a:	60a6      	str	r6, [r4, #8]
 800626c:	bfa4      	itt	ge
 800626e:	f021 0104 	bicge.w	r1, r1, #4
 8006272:	6021      	strge	r1, [r4, #0]
 8006274:	b90d      	cbnz	r5, 800627a <_printf_i+0x11a>
 8006276:	2e00      	cmp	r6, #0
 8006278:	d04d      	beq.n	8006316 <_printf_i+0x1b6>
 800627a:	4616      	mov	r6, r2
 800627c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006280:	fb03 5711 	mls	r7, r3, r1, r5
 8006284:	5dc7      	ldrb	r7, [r0, r7]
 8006286:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800628a:	462f      	mov	r7, r5
 800628c:	42bb      	cmp	r3, r7
 800628e:	460d      	mov	r5, r1
 8006290:	d9f4      	bls.n	800627c <_printf_i+0x11c>
 8006292:	2b08      	cmp	r3, #8
 8006294:	d10b      	bne.n	80062ae <_printf_i+0x14e>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	07df      	lsls	r7, r3, #31
 800629a:	d508      	bpl.n	80062ae <_printf_i+0x14e>
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	6861      	ldr	r1, [r4, #4]
 80062a0:	4299      	cmp	r1, r3
 80062a2:	bfde      	ittt	le
 80062a4:	2330      	movle	r3, #48	; 0x30
 80062a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062ae:	1b92      	subs	r2, r2, r6
 80062b0:	6122      	str	r2, [r4, #16]
 80062b2:	464b      	mov	r3, r9
 80062b4:	4621      	mov	r1, r4
 80062b6:	4640      	mov	r0, r8
 80062b8:	f8cd a000 	str.w	sl, [sp]
 80062bc:	aa03      	add	r2, sp, #12
 80062be:	f7ff fedf 	bl	8006080 <_printf_common>
 80062c2:	3001      	adds	r0, #1
 80062c4:	d14c      	bne.n	8006360 <_printf_i+0x200>
 80062c6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ca:	b004      	add	sp, #16
 80062cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d0:	4834      	ldr	r0, [pc, #208]	; (80063a4 <_printf_i+0x244>)
 80062d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062d6:	680e      	ldr	r6, [r1, #0]
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	f856 5b04 	ldr.w	r5, [r6], #4
 80062de:	061f      	lsls	r7, r3, #24
 80062e0:	600e      	str	r6, [r1, #0]
 80062e2:	d514      	bpl.n	800630e <_printf_i+0x1ae>
 80062e4:	07d9      	lsls	r1, r3, #31
 80062e6:	bf44      	itt	mi
 80062e8:	f043 0320 	orrmi.w	r3, r3, #32
 80062ec:	6023      	strmi	r3, [r4, #0]
 80062ee:	b91d      	cbnz	r5, 80062f8 <_printf_i+0x198>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	f023 0320 	bic.w	r3, r3, #32
 80062f6:	6023      	str	r3, [r4, #0]
 80062f8:	2310      	movs	r3, #16
 80062fa:	e7af      	b.n	800625c <_printf_i+0xfc>
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	f043 0320 	orr.w	r3, r3, #32
 8006302:	6023      	str	r3, [r4, #0]
 8006304:	2378      	movs	r3, #120	; 0x78
 8006306:	4828      	ldr	r0, [pc, #160]	; (80063a8 <_printf_i+0x248>)
 8006308:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800630c:	e7e3      	b.n	80062d6 <_printf_i+0x176>
 800630e:	065e      	lsls	r6, r3, #25
 8006310:	bf48      	it	mi
 8006312:	b2ad      	uxthmi	r5, r5
 8006314:	e7e6      	b.n	80062e4 <_printf_i+0x184>
 8006316:	4616      	mov	r6, r2
 8006318:	e7bb      	b.n	8006292 <_printf_i+0x132>
 800631a:	680b      	ldr	r3, [r1, #0]
 800631c:	6826      	ldr	r6, [r4, #0]
 800631e:	1d1d      	adds	r5, r3, #4
 8006320:	6960      	ldr	r0, [r4, #20]
 8006322:	600d      	str	r5, [r1, #0]
 8006324:	0635      	lsls	r5, r6, #24
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	d501      	bpl.n	800632e <_printf_i+0x1ce>
 800632a:	6018      	str	r0, [r3, #0]
 800632c:	e002      	b.n	8006334 <_printf_i+0x1d4>
 800632e:	0671      	lsls	r1, r6, #25
 8006330:	d5fb      	bpl.n	800632a <_printf_i+0x1ca>
 8006332:	8018      	strh	r0, [r3, #0]
 8006334:	2300      	movs	r3, #0
 8006336:	4616      	mov	r6, r2
 8006338:	6123      	str	r3, [r4, #16]
 800633a:	e7ba      	b.n	80062b2 <_printf_i+0x152>
 800633c:	680b      	ldr	r3, [r1, #0]
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	600a      	str	r2, [r1, #0]
 8006342:	681e      	ldr	r6, [r3, #0]
 8006344:	2100      	movs	r1, #0
 8006346:	4630      	mov	r0, r6
 8006348:	6862      	ldr	r2, [r4, #4]
 800634a:	f000 fef3 	bl	8007134 <memchr>
 800634e:	b108      	cbz	r0, 8006354 <_printf_i+0x1f4>
 8006350:	1b80      	subs	r0, r0, r6
 8006352:	6060      	str	r0, [r4, #4]
 8006354:	6863      	ldr	r3, [r4, #4]
 8006356:	6123      	str	r3, [r4, #16]
 8006358:	2300      	movs	r3, #0
 800635a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800635e:	e7a8      	b.n	80062b2 <_printf_i+0x152>
 8006360:	4632      	mov	r2, r6
 8006362:	4649      	mov	r1, r9
 8006364:	4640      	mov	r0, r8
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	47d0      	blx	sl
 800636a:	3001      	adds	r0, #1
 800636c:	d0ab      	beq.n	80062c6 <_printf_i+0x166>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	079b      	lsls	r3, r3, #30
 8006372:	d413      	bmi.n	800639c <_printf_i+0x23c>
 8006374:	68e0      	ldr	r0, [r4, #12]
 8006376:	9b03      	ldr	r3, [sp, #12]
 8006378:	4298      	cmp	r0, r3
 800637a:	bfb8      	it	lt
 800637c:	4618      	movlt	r0, r3
 800637e:	e7a4      	b.n	80062ca <_printf_i+0x16a>
 8006380:	2301      	movs	r3, #1
 8006382:	4632      	mov	r2, r6
 8006384:	4649      	mov	r1, r9
 8006386:	4640      	mov	r0, r8
 8006388:	47d0      	blx	sl
 800638a:	3001      	adds	r0, #1
 800638c:	d09b      	beq.n	80062c6 <_printf_i+0x166>
 800638e:	3501      	adds	r5, #1
 8006390:	68e3      	ldr	r3, [r4, #12]
 8006392:	9903      	ldr	r1, [sp, #12]
 8006394:	1a5b      	subs	r3, r3, r1
 8006396:	42ab      	cmp	r3, r5
 8006398:	dcf2      	bgt.n	8006380 <_printf_i+0x220>
 800639a:	e7eb      	b.n	8006374 <_printf_i+0x214>
 800639c:	2500      	movs	r5, #0
 800639e:	f104 0619 	add.w	r6, r4, #25
 80063a2:	e7f5      	b.n	8006390 <_printf_i+0x230>
 80063a4:	08008a9e 	.word	0x08008a9e
 80063a8:	08008aaf 	.word	0x08008aaf

080063ac <_vsniprintf_r>:
 80063ac:	b530      	push	{r4, r5, lr}
 80063ae:	1e14      	subs	r4, r2, #0
 80063b0:	4605      	mov	r5, r0
 80063b2:	b09b      	sub	sp, #108	; 0x6c
 80063b4:	4618      	mov	r0, r3
 80063b6:	da05      	bge.n	80063c4 <_vsniprintf_r+0x18>
 80063b8:	238b      	movs	r3, #139	; 0x8b
 80063ba:	f04f 30ff 	mov.w	r0, #4294967295
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	b01b      	add	sp, #108	; 0x6c
 80063c2:	bd30      	pop	{r4, r5, pc}
 80063c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80063c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80063cc:	bf0c      	ite	eq
 80063ce:	4623      	moveq	r3, r4
 80063d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80063d4:	9302      	str	r3, [sp, #8]
 80063d6:	9305      	str	r3, [sp, #20]
 80063d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063dc:	4602      	mov	r2, r0
 80063de:	9100      	str	r1, [sp, #0]
 80063e0:	9104      	str	r1, [sp, #16]
 80063e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80063e6:	4669      	mov	r1, sp
 80063e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063ea:	4628      	mov	r0, r5
 80063ec:	f001 fb50 	bl	8007a90 <_svfiprintf_r>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	bfbc      	itt	lt
 80063f4:	238b      	movlt	r3, #139	; 0x8b
 80063f6:	602b      	strlt	r3, [r5, #0]
 80063f8:	2c00      	cmp	r4, #0
 80063fa:	d0e1      	beq.n	80063c0 <_vsniprintf_r+0x14>
 80063fc:	2200      	movs	r2, #0
 80063fe:	9b00      	ldr	r3, [sp, #0]
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	e7dd      	b.n	80063c0 <_vsniprintf_r+0x14>

08006404 <vsniprintf>:
 8006404:	b507      	push	{r0, r1, r2, lr}
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	4613      	mov	r3, r2
 800640a:	460a      	mov	r2, r1
 800640c:	4601      	mov	r1, r0
 800640e:	4803      	ldr	r0, [pc, #12]	; (800641c <vsniprintf+0x18>)
 8006410:	6800      	ldr	r0, [r0, #0]
 8006412:	f7ff ffcb 	bl	80063ac <_vsniprintf_r>
 8006416:	b003      	add	sp, #12
 8006418:	f85d fb04 	ldr.w	pc, [sp], #4
 800641c:	20000034 	.word	0x20000034

08006420 <quorem>:
 8006420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	6903      	ldr	r3, [r0, #16]
 8006426:	690c      	ldr	r4, [r1, #16]
 8006428:	4607      	mov	r7, r0
 800642a:	42a3      	cmp	r3, r4
 800642c:	f2c0 8083 	blt.w	8006536 <quorem+0x116>
 8006430:	3c01      	subs	r4, #1
 8006432:	f100 0514 	add.w	r5, r0, #20
 8006436:	f101 0814 	add.w	r8, r1, #20
 800643a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006444:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006448:	3301      	adds	r3, #1
 800644a:	429a      	cmp	r2, r3
 800644c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006450:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006454:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006458:	d332      	bcc.n	80064c0 <quorem+0xa0>
 800645a:	f04f 0e00 	mov.w	lr, #0
 800645e:	4640      	mov	r0, r8
 8006460:	46ac      	mov	ip, r5
 8006462:	46f2      	mov	sl, lr
 8006464:	f850 2b04 	ldr.w	r2, [r0], #4
 8006468:	b293      	uxth	r3, r2
 800646a:	fb06 e303 	mla	r3, r6, r3, lr
 800646e:	0c12      	lsrs	r2, r2, #16
 8006470:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006474:	fb06 e202 	mla	r2, r6, r2, lr
 8006478:	b29b      	uxth	r3, r3
 800647a:	ebaa 0303 	sub.w	r3, sl, r3
 800647e:	f8dc a000 	ldr.w	sl, [ip]
 8006482:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006486:	fa1f fa8a 	uxth.w	sl, sl
 800648a:	4453      	add	r3, sl
 800648c:	fa1f fa82 	uxth.w	sl, r2
 8006490:	f8dc 2000 	ldr.w	r2, [ip]
 8006494:	4581      	cmp	r9, r0
 8006496:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800649a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800649e:	b29b      	uxth	r3, r3
 80064a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064a8:	f84c 3b04 	str.w	r3, [ip], #4
 80064ac:	d2da      	bcs.n	8006464 <quorem+0x44>
 80064ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80064b2:	b92b      	cbnz	r3, 80064c0 <quorem+0xa0>
 80064b4:	9b01      	ldr	r3, [sp, #4]
 80064b6:	3b04      	subs	r3, #4
 80064b8:	429d      	cmp	r5, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	d32f      	bcc.n	800651e <quorem+0xfe>
 80064be:	613c      	str	r4, [r7, #16]
 80064c0:	4638      	mov	r0, r7
 80064c2:	f001 f8cd 	bl	8007660 <__mcmp>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	db25      	blt.n	8006516 <quorem+0xf6>
 80064ca:	4628      	mov	r0, r5
 80064cc:	f04f 0c00 	mov.w	ip, #0
 80064d0:	3601      	adds	r6, #1
 80064d2:	f858 1b04 	ldr.w	r1, [r8], #4
 80064d6:	f8d0 e000 	ldr.w	lr, [r0]
 80064da:	b28b      	uxth	r3, r1
 80064dc:	ebac 0303 	sub.w	r3, ip, r3
 80064e0:	fa1f f28e 	uxth.w	r2, lr
 80064e4:	4413      	add	r3, r2
 80064e6:	0c0a      	lsrs	r2, r1, #16
 80064e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064f6:	45c1      	cmp	r9, r8
 80064f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80064fc:	f840 3b04 	str.w	r3, [r0], #4
 8006500:	d2e7      	bcs.n	80064d2 <quorem+0xb2>
 8006502:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800650a:	b922      	cbnz	r2, 8006516 <quorem+0xf6>
 800650c:	3b04      	subs	r3, #4
 800650e:	429d      	cmp	r5, r3
 8006510:	461a      	mov	r2, r3
 8006512:	d30a      	bcc.n	800652a <quorem+0x10a>
 8006514:	613c      	str	r4, [r7, #16]
 8006516:	4630      	mov	r0, r6
 8006518:	b003      	add	sp, #12
 800651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	3b04      	subs	r3, #4
 8006522:	2a00      	cmp	r2, #0
 8006524:	d1cb      	bne.n	80064be <quorem+0x9e>
 8006526:	3c01      	subs	r4, #1
 8006528:	e7c6      	b.n	80064b8 <quorem+0x98>
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	3b04      	subs	r3, #4
 800652e:	2a00      	cmp	r2, #0
 8006530:	d1f0      	bne.n	8006514 <quorem+0xf4>
 8006532:	3c01      	subs	r4, #1
 8006534:	e7eb      	b.n	800650e <quorem+0xee>
 8006536:	2000      	movs	r0, #0
 8006538:	e7ee      	b.n	8006518 <quorem+0xf8>
 800653a:	0000      	movs	r0, r0
 800653c:	0000      	movs	r0, r0
	...

08006540 <_dtoa_r>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	4616      	mov	r6, r2
 8006546:	461f      	mov	r7, r3
 8006548:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800654a:	b099      	sub	sp, #100	; 0x64
 800654c:	4605      	mov	r5, r0
 800654e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006552:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006556:	b974      	cbnz	r4, 8006576 <_dtoa_r+0x36>
 8006558:	2010      	movs	r0, #16
 800655a:	f000 fde3 	bl	8007124 <malloc>
 800655e:	4602      	mov	r2, r0
 8006560:	6268      	str	r0, [r5, #36]	; 0x24
 8006562:	b920      	cbnz	r0, 800656e <_dtoa_r+0x2e>
 8006564:	21ea      	movs	r1, #234	; 0xea
 8006566:	4bae      	ldr	r3, [pc, #696]	; (8006820 <_dtoa_r+0x2e0>)
 8006568:	48ae      	ldr	r0, [pc, #696]	; (8006824 <_dtoa_r+0x2e4>)
 800656a:	f001 fba1 	bl	8007cb0 <__assert_func>
 800656e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006572:	6004      	str	r4, [r0, #0]
 8006574:	60c4      	str	r4, [r0, #12]
 8006576:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006578:	6819      	ldr	r1, [r3, #0]
 800657a:	b151      	cbz	r1, 8006592 <_dtoa_r+0x52>
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	2301      	movs	r3, #1
 8006580:	4093      	lsls	r3, r2
 8006582:	604a      	str	r2, [r1, #4]
 8006584:	608b      	str	r3, [r1, #8]
 8006586:	4628      	mov	r0, r5
 8006588:	f000 fe30 	bl	80071ec <_Bfree>
 800658c:	2200      	movs	r2, #0
 800658e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	1e3b      	subs	r3, r7, #0
 8006594:	bfaf      	iteee	ge
 8006596:	2300      	movge	r3, #0
 8006598:	2201      	movlt	r2, #1
 800659a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800659e:	9305      	strlt	r3, [sp, #20]
 80065a0:	bfa8      	it	ge
 80065a2:	f8c8 3000 	strge.w	r3, [r8]
 80065a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80065aa:	4b9f      	ldr	r3, [pc, #636]	; (8006828 <_dtoa_r+0x2e8>)
 80065ac:	bfb8      	it	lt
 80065ae:	f8c8 2000 	strlt.w	r2, [r8]
 80065b2:	ea33 0309 	bics.w	r3, r3, r9
 80065b6:	d119      	bne.n	80065ec <_dtoa_r+0xac>
 80065b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80065bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065c4:	4333      	orrs	r3, r6
 80065c6:	f000 8580 	beq.w	80070ca <_dtoa_r+0xb8a>
 80065ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065cc:	b953      	cbnz	r3, 80065e4 <_dtoa_r+0xa4>
 80065ce:	4b97      	ldr	r3, [pc, #604]	; (800682c <_dtoa_r+0x2ec>)
 80065d0:	e022      	b.n	8006618 <_dtoa_r+0xd8>
 80065d2:	4b97      	ldr	r3, [pc, #604]	; (8006830 <_dtoa_r+0x2f0>)
 80065d4:	9308      	str	r3, [sp, #32]
 80065d6:	3308      	adds	r3, #8
 80065d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	9808      	ldr	r0, [sp, #32]
 80065de:	b019      	add	sp, #100	; 0x64
 80065e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e4:	4b91      	ldr	r3, [pc, #580]	; (800682c <_dtoa_r+0x2ec>)
 80065e6:	9308      	str	r3, [sp, #32]
 80065e8:	3303      	adds	r3, #3
 80065ea:	e7f5      	b.n	80065d8 <_dtoa_r+0x98>
 80065ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80065f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80065f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065f8:	2200      	movs	r2, #0
 80065fa:	2300      	movs	r3, #0
 80065fc:	f7fa f9d4 	bl	80009a8 <__aeabi_dcmpeq>
 8006600:	4680      	mov	r8, r0
 8006602:	b158      	cbz	r0, 800661c <_dtoa_r+0xdc>
 8006604:	2301      	movs	r3, #1
 8006606:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 8559 	beq.w	80070c4 <_dtoa_r+0xb84>
 8006612:	4888      	ldr	r0, [pc, #544]	; (8006834 <_dtoa_r+0x2f4>)
 8006614:	6018      	str	r0, [r3, #0]
 8006616:	1e43      	subs	r3, r0, #1
 8006618:	9308      	str	r3, [sp, #32]
 800661a:	e7df      	b.n	80065dc <_dtoa_r+0x9c>
 800661c:	ab16      	add	r3, sp, #88	; 0x58
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	ab17      	add	r3, sp, #92	; 0x5c
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	4628      	mov	r0, r5
 8006626:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800662a:	f001 f8c5 	bl	80077b8 <__d2b>
 800662e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006632:	4682      	mov	sl, r0
 8006634:	2c00      	cmp	r4, #0
 8006636:	d07e      	beq.n	8006736 <_dtoa_r+0x1f6>
 8006638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800663c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800663e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006646:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800664a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800664e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006652:	2200      	movs	r2, #0
 8006654:	4b78      	ldr	r3, [pc, #480]	; (8006838 <_dtoa_r+0x2f8>)
 8006656:	f7f9 fd87 	bl	8000168 <__aeabi_dsub>
 800665a:	a36b      	add	r3, pc, #428	; (adr r3, 8006808 <_dtoa_r+0x2c8>)
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	f7f9 ff3a 	bl	80004d8 <__aeabi_dmul>
 8006664:	a36a      	add	r3, pc, #424	; (adr r3, 8006810 <_dtoa_r+0x2d0>)
 8006666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666a:	f7f9 fd7f 	bl	800016c <__adddf3>
 800666e:	4606      	mov	r6, r0
 8006670:	4620      	mov	r0, r4
 8006672:	460f      	mov	r7, r1
 8006674:	f7f9 fec6 	bl	8000404 <__aeabi_i2d>
 8006678:	a367      	add	r3, pc, #412	; (adr r3, 8006818 <_dtoa_r+0x2d8>)
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f7f9 ff2b 	bl	80004d8 <__aeabi_dmul>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4630      	mov	r0, r6
 8006688:	4639      	mov	r1, r7
 800668a:	f7f9 fd6f 	bl	800016c <__adddf3>
 800668e:	4606      	mov	r6, r0
 8006690:	460f      	mov	r7, r1
 8006692:	f7fa f9d1 	bl	8000a38 <__aeabi_d2iz>
 8006696:	2200      	movs	r2, #0
 8006698:	4681      	mov	r9, r0
 800669a:	2300      	movs	r3, #0
 800669c:	4630      	mov	r0, r6
 800669e:	4639      	mov	r1, r7
 80066a0:	f7fa f98c 	bl	80009bc <__aeabi_dcmplt>
 80066a4:	b148      	cbz	r0, 80066ba <_dtoa_r+0x17a>
 80066a6:	4648      	mov	r0, r9
 80066a8:	f7f9 feac 	bl	8000404 <__aeabi_i2d>
 80066ac:	4632      	mov	r2, r6
 80066ae:	463b      	mov	r3, r7
 80066b0:	f7fa f97a 	bl	80009a8 <__aeabi_dcmpeq>
 80066b4:	b908      	cbnz	r0, 80066ba <_dtoa_r+0x17a>
 80066b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80066ba:	f1b9 0f16 	cmp.w	r9, #22
 80066be:	d857      	bhi.n	8006770 <_dtoa_r+0x230>
 80066c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066c4:	4b5d      	ldr	r3, [pc, #372]	; (800683c <_dtoa_r+0x2fc>)
 80066c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f7fa f975 	bl	80009bc <__aeabi_dcmplt>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d04e      	beq.n	8006774 <_dtoa_r+0x234>
 80066d6:	2300      	movs	r3, #0
 80066d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80066dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80066de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80066e0:	1b1c      	subs	r4, r3, r4
 80066e2:	1e63      	subs	r3, r4, #1
 80066e4:	9309      	str	r3, [sp, #36]	; 0x24
 80066e6:	bf49      	itett	mi
 80066e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80066ec:	2300      	movpl	r3, #0
 80066ee:	9306      	strmi	r3, [sp, #24]
 80066f0:	2300      	movmi	r3, #0
 80066f2:	bf54      	ite	pl
 80066f4:	9306      	strpl	r3, [sp, #24]
 80066f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80066f8:	f1b9 0f00 	cmp.w	r9, #0
 80066fc:	db3c      	blt.n	8006778 <_dtoa_r+0x238>
 80066fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006700:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006704:	444b      	add	r3, r9
 8006706:	9309      	str	r3, [sp, #36]	; 0x24
 8006708:	2300      	movs	r3, #0
 800670a:	930a      	str	r3, [sp, #40]	; 0x28
 800670c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800670e:	2b09      	cmp	r3, #9
 8006710:	d86c      	bhi.n	80067ec <_dtoa_r+0x2ac>
 8006712:	2b05      	cmp	r3, #5
 8006714:	bfc4      	itt	gt
 8006716:	3b04      	subgt	r3, #4
 8006718:	9322      	strgt	r3, [sp, #136]	; 0x88
 800671a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800671c:	bfc8      	it	gt
 800671e:	2400      	movgt	r4, #0
 8006720:	f1a3 0302 	sub.w	r3, r3, #2
 8006724:	bfd8      	it	le
 8006726:	2401      	movle	r4, #1
 8006728:	2b03      	cmp	r3, #3
 800672a:	f200 808b 	bhi.w	8006844 <_dtoa_r+0x304>
 800672e:	e8df f003 	tbb	[pc, r3]
 8006732:	4f2d      	.short	0x4f2d
 8006734:	5b4d      	.short	0x5b4d
 8006736:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800673a:	441c      	add	r4, r3
 800673c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006740:	2b20      	cmp	r3, #32
 8006742:	bfc3      	ittte	gt
 8006744:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006748:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800674c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006750:	f1c3 0320 	rsble	r3, r3, #32
 8006754:	bfc6      	itte	gt
 8006756:	fa26 f000 	lsrgt.w	r0, r6, r0
 800675a:	4318      	orrgt	r0, r3
 800675c:	fa06 f003 	lslle.w	r0, r6, r3
 8006760:	f7f9 fe40 	bl	80003e4 <__aeabi_ui2d>
 8006764:	2301      	movs	r3, #1
 8006766:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800676a:	3c01      	subs	r4, #1
 800676c:	9313      	str	r3, [sp, #76]	; 0x4c
 800676e:	e770      	b.n	8006652 <_dtoa_r+0x112>
 8006770:	2301      	movs	r3, #1
 8006772:	e7b3      	b.n	80066dc <_dtoa_r+0x19c>
 8006774:	900f      	str	r0, [sp, #60]	; 0x3c
 8006776:	e7b2      	b.n	80066de <_dtoa_r+0x19e>
 8006778:	9b06      	ldr	r3, [sp, #24]
 800677a:	eba3 0309 	sub.w	r3, r3, r9
 800677e:	9306      	str	r3, [sp, #24]
 8006780:	f1c9 0300 	rsb	r3, r9, #0
 8006784:	930a      	str	r3, [sp, #40]	; 0x28
 8006786:	2300      	movs	r3, #0
 8006788:	930e      	str	r3, [sp, #56]	; 0x38
 800678a:	e7bf      	b.n	800670c <_dtoa_r+0x1cc>
 800678c:	2300      	movs	r3, #0
 800678e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006790:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006792:	2b00      	cmp	r3, #0
 8006794:	dc59      	bgt.n	800684a <_dtoa_r+0x30a>
 8006796:	f04f 0b01 	mov.w	fp, #1
 800679a:	465b      	mov	r3, fp
 800679c:	f8cd b008 	str.w	fp, [sp, #8]
 80067a0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80067a4:	2200      	movs	r2, #0
 80067a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80067a8:	6042      	str	r2, [r0, #4]
 80067aa:	2204      	movs	r2, #4
 80067ac:	f102 0614 	add.w	r6, r2, #20
 80067b0:	429e      	cmp	r6, r3
 80067b2:	6841      	ldr	r1, [r0, #4]
 80067b4:	d94f      	bls.n	8006856 <_dtoa_r+0x316>
 80067b6:	4628      	mov	r0, r5
 80067b8:	f000 fcd8 	bl	800716c <_Balloc>
 80067bc:	9008      	str	r0, [sp, #32]
 80067be:	2800      	cmp	r0, #0
 80067c0:	d14d      	bne.n	800685e <_dtoa_r+0x31e>
 80067c2:	4602      	mov	r2, r0
 80067c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067c8:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <_dtoa_r+0x300>)
 80067ca:	e6cd      	b.n	8006568 <_dtoa_r+0x28>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e7de      	b.n	800678e <_dtoa_r+0x24e>
 80067d0:	2300      	movs	r3, #0
 80067d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80067d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067d6:	eb09 0b03 	add.w	fp, r9, r3
 80067da:	f10b 0301 	add.w	r3, fp, #1
 80067de:	2b01      	cmp	r3, #1
 80067e0:	9302      	str	r3, [sp, #8]
 80067e2:	bfb8      	it	lt
 80067e4:	2301      	movlt	r3, #1
 80067e6:	e7dd      	b.n	80067a4 <_dtoa_r+0x264>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e7f2      	b.n	80067d2 <_dtoa_r+0x292>
 80067ec:	2401      	movs	r4, #1
 80067ee:	2300      	movs	r3, #0
 80067f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80067f2:	9322      	str	r3, [sp, #136]	; 0x88
 80067f4:	f04f 3bff 	mov.w	fp, #4294967295
 80067f8:	2200      	movs	r2, #0
 80067fa:	2312      	movs	r3, #18
 80067fc:	f8cd b008 	str.w	fp, [sp, #8]
 8006800:	9223      	str	r2, [sp, #140]	; 0x8c
 8006802:	e7cf      	b.n	80067a4 <_dtoa_r+0x264>
 8006804:	f3af 8000 	nop.w
 8006808:	636f4361 	.word	0x636f4361
 800680c:	3fd287a7 	.word	0x3fd287a7
 8006810:	8b60c8b3 	.word	0x8b60c8b3
 8006814:	3fc68a28 	.word	0x3fc68a28
 8006818:	509f79fb 	.word	0x509f79fb
 800681c:	3fd34413 	.word	0x3fd34413
 8006820:	08008acd 	.word	0x08008acd
 8006824:	08008ae4 	.word	0x08008ae4
 8006828:	7ff00000 	.word	0x7ff00000
 800682c:	08008ac9 	.word	0x08008ac9
 8006830:	08008ac0 	.word	0x08008ac0
 8006834:	08008a9d 	.word	0x08008a9d
 8006838:	3ff80000 	.word	0x3ff80000
 800683c:	08008be0 	.word	0x08008be0
 8006840:	08008b43 	.word	0x08008b43
 8006844:	2301      	movs	r3, #1
 8006846:	930b      	str	r3, [sp, #44]	; 0x2c
 8006848:	e7d4      	b.n	80067f4 <_dtoa_r+0x2b4>
 800684a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800684e:	465b      	mov	r3, fp
 8006850:	f8cd b008 	str.w	fp, [sp, #8]
 8006854:	e7a6      	b.n	80067a4 <_dtoa_r+0x264>
 8006856:	3101      	adds	r1, #1
 8006858:	6041      	str	r1, [r0, #4]
 800685a:	0052      	lsls	r2, r2, #1
 800685c:	e7a6      	b.n	80067ac <_dtoa_r+0x26c>
 800685e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006860:	9a08      	ldr	r2, [sp, #32]
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	9b02      	ldr	r3, [sp, #8]
 8006866:	2b0e      	cmp	r3, #14
 8006868:	f200 80a8 	bhi.w	80069bc <_dtoa_r+0x47c>
 800686c:	2c00      	cmp	r4, #0
 800686e:	f000 80a5 	beq.w	80069bc <_dtoa_r+0x47c>
 8006872:	f1b9 0f00 	cmp.w	r9, #0
 8006876:	dd34      	ble.n	80068e2 <_dtoa_r+0x3a2>
 8006878:	4a9a      	ldr	r2, [pc, #616]	; (8006ae4 <_dtoa_r+0x5a4>)
 800687a:	f009 030f 	and.w	r3, r9, #15
 800687e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006882:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006886:	e9d3 3400 	ldrd	r3, r4, [r3]
 800688a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800688e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006892:	d016      	beq.n	80068c2 <_dtoa_r+0x382>
 8006894:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006898:	4b93      	ldr	r3, [pc, #588]	; (8006ae8 <_dtoa_r+0x5a8>)
 800689a:	2703      	movs	r7, #3
 800689c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068a0:	f7f9 ff44 	bl	800072c <__aeabi_ddiv>
 80068a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068a8:	f004 040f 	and.w	r4, r4, #15
 80068ac:	4e8e      	ldr	r6, [pc, #568]	; (8006ae8 <_dtoa_r+0x5a8>)
 80068ae:	b954      	cbnz	r4, 80068c6 <_dtoa_r+0x386>
 80068b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b8:	f7f9 ff38 	bl	800072c <__aeabi_ddiv>
 80068bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068c0:	e029      	b.n	8006916 <_dtoa_r+0x3d6>
 80068c2:	2702      	movs	r7, #2
 80068c4:	e7f2      	b.n	80068ac <_dtoa_r+0x36c>
 80068c6:	07e1      	lsls	r1, r4, #31
 80068c8:	d508      	bpl.n	80068dc <_dtoa_r+0x39c>
 80068ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068d2:	f7f9 fe01 	bl	80004d8 <__aeabi_dmul>
 80068d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068da:	3701      	adds	r7, #1
 80068dc:	1064      	asrs	r4, r4, #1
 80068de:	3608      	adds	r6, #8
 80068e0:	e7e5      	b.n	80068ae <_dtoa_r+0x36e>
 80068e2:	f000 80a5 	beq.w	8006a30 <_dtoa_r+0x4f0>
 80068e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068ea:	f1c9 0400 	rsb	r4, r9, #0
 80068ee:	4b7d      	ldr	r3, [pc, #500]	; (8006ae4 <_dtoa_r+0x5a4>)
 80068f0:	f004 020f 	and.w	r2, r4, #15
 80068f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	f7f9 fdec 	bl	80004d8 <__aeabi_dmul>
 8006900:	2702      	movs	r7, #2
 8006902:	2300      	movs	r3, #0
 8006904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006908:	4e77      	ldr	r6, [pc, #476]	; (8006ae8 <_dtoa_r+0x5a8>)
 800690a:	1124      	asrs	r4, r4, #4
 800690c:	2c00      	cmp	r4, #0
 800690e:	f040 8084 	bne.w	8006a1a <_dtoa_r+0x4da>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1d2      	bne.n	80068bc <_dtoa_r+0x37c>
 8006916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 808b 	beq.w	8006a34 <_dtoa_r+0x4f4>
 800691e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006922:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006926:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800692a:	2200      	movs	r2, #0
 800692c:	4b6f      	ldr	r3, [pc, #444]	; (8006aec <_dtoa_r+0x5ac>)
 800692e:	f7fa f845 	bl	80009bc <__aeabi_dcmplt>
 8006932:	2800      	cmp	r0, #0
 8006934:	d07e      	beq.n	8006a34 <_dtoa_r+0x4f4>
 8006936:	9b02      	ldr	r3, [sp, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d07b      	beq.n	8006a34 <_dtoa_r+0x4f4>
 800693c:	f1bb 0f00 	cmp.w	fp, #0
 8006940:	dd38      	ble.n	80069b4 <_dtoa_r+0x474>
 8006942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006946:	2200      	movs	r2, #0
 8006948:	4b69      	ldr	r3, [pc, #420]	; (8006af0 <_dtoa_r+0x5b0>)
 800694a:	f7f9 fdc5 	bl	80004d8 <__aeabi_dmul>
 800694e:	465c      	mov	r4, fp
 8006950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006954:	f109 38ff 	add.w	r8, r9, #4294967295
 8006958:	3701      	adds	r7, #1
 800695a:	4638      	mov	r0, r7
 800695c:	f7f9 fd52 	bl	8000404 <__aeabi_i2d>
 8006960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006964:	f7f9 fdb8 	bl	80004d8 <__aeabi_dmul>
 8006968:	2200      	movs	r2, #0
 800696a:	4b62      	ldr	r3, [pc, #392]	; (8006af4 <_dtoa_r+0x5b4>)
 800696c:	f7f9 fbfe 	bl	800016c <__adddf3>
 8006970:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006974:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006978:	9611      	str	r6, [sp, #68]	; 0x44
 800697a:	2c00      	cmp	r4, #0
 800697c:	d15d      	bne.n	8006a3a <_dtoa_r+0x4fa>
 800697e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006982:	2200      	movs	r2, #0
 8006984:	4b5c      	ldr	r3, [pc, #368]	; (8006af8 <_dtoa_r+0x5b8>)
 8006986:	f7f9 fbef 	bl	8000168 <__aeabi_dsub>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006992:	4633      	mov	r3, r6
 8006994:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006996:	f7fa f82f 	bl	80009f8 <__aeabi_dcmpgt>
 800699a:	2800      	cmp	r0, #0
 800699c:	f040 829e 	bne.w	8006edc <_dtoa_r+0x99c>
 80069a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80069aa:	f7fa f807 	bl	80009bc <__aeabi_dcmplt>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	f040 8292 	bne.w	8006ed8 <_dtoa_r+0x998>
 80069b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80069b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80069bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f2c0 8153 	blt.w	8006c6a <_dtoa_r+0x72a>
 80069c4:	f1b9 0f0e 	cmp.w	r9, #14
 80069c8:	f300 814f 	bgt.w	8006c6a <_dtoa_r+0x72a>
 80069cc:	4b45      	ldr	r3, [pc, #276]	; (8006ae4 <_dtoa_r+0x5a4>)
 80069ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80069d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80069da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f280 80db 	bge.w	8006b98 <_dtoa_r+0x658>
 80069e2:	9b02      	ldr	r3, [sp, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f300 80d7 	bgt.w	8006b98 <_dtoa_r+0x658>
 80069ea:	f040 8274 	bne.w	8006ed6 <_dtoa_r+0x996>
 80069ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069f2:	2200      	movs	r2, #0
 80069f4:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <_dtoa_r+0x5b8>)
 80069f6:	f7f9 fd6f 	bl	80004d8 <__aeabi_dmul>
 80069fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069fe:	f7f9 fff1 	bl	80009e4 <__aeabi_dcmpge>
 8006a02:	9c02      	ldr	r4, [sp, #8]
 8006a04:	4626      	mov	r6, r4
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f040 824a 	bne.w	8006ea0 <_dtoa_r+0x960>
 8006a0c:	2331      	movs	r3, #49	; 0x31
 8006a0e:	9f08      	ldr	r7, [sp, #32]
 8006a10:	f109 0901 	add.w	r9, r9, #1
 8006a14:	f807 3b01 	strb.w	r3, [r7], #1
 8006a18:	e246      	b.n	8006ea8 <_dtoa_r+0x968>
 8006a1a:	07e2      	lsls	r2, r4, #31
 8006a1c:	d505      	bpl.n	8006a2a <_dtoa_r+0x4ea>
 8006a1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a22:	f7f9 fd59 	bl	80004d8 <__aeabi_dmul>
 8006a26:	2301      	movs	r3, #1
 8006a28:	3701      	adds	r7, #1
 8006a2a:	1064      	asrs	r4, r4, #1
 8006a2c:	3608      	adds	r6, #8
 8006a2e:	e76d      	b.n	800690c <_dtoa_r+0x3cc>
 8006a30:	2702      	movs	r7, #2
 8006a32:	e770      	b.n	8006916 <_dtoa_r+0x3d6>
 8006a34:	46c8      	mov	r8, r9
 8006a36:	9c02      	ldr	r4, [sp, #8]
 8006a38:	e78f      	b.n	800695a <_dtoa_r+0x41a>
 8006a3a:	9908      	ldr	r1, [sp, #32]
 8006a3c:	4b29      	ldr	r3, [pc, #164]	; (8006ae4 <_dtoa_r+0x5a4>)
 8006a3e:	4421      	add	r1, r4
 8006a40:	9112      	str	r1, [sp, #72]	; 0x48
 8006a42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a50:	2900      	cmp	r1, #0
 8006a52:	d055      	beq.n	8006b00 <_dtoa_r+0x5c0>
 8006a54:	2000      	movs	r0, #0
 8006a56:	4929      	ldr	r1, [pc, #164]	; (8006afc <_dtoa_r+0x5bc>)
 8006a58:	f7f9 fe68 	bl	800072c <__aeabi_ddiv>
 8006a5c:	463b      	mov	r3, r7
 8006a5e:	4632      	mov	r2, r6
 8006a60:	f7f9 fb82 	bl	8000168 <__aeabi_dsub>
 8006a64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a68:	9f08      	ldr	r7, [sp, #32]
 8006a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a6e:	f7f9 ffe3 	bl	8000a38 <__aeabi_d2iz>
 8006a72:	4604      	mov	r4, r0
 8006a74:	f7f9 fcc6 	bl	8000404 <__aeabi_i2d>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a80:	f7f9 fb72 	bl	8000168 <__aeabi_dsub>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	3430      	adds	r4, #48	; 0x30
 8006a8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a92:	f807 4b01 	strb.w	r4, [r7], #1
 8006a96:	f7f9 ff91 	bl	80009bc <__aeabi_dcmplt>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d174      	bne.n	8006b88 <_dtoa_r+0x648>
 8006a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	4911      	ldr	r1, [pc, #68]	; (8006aec <_dtoa_r+0x5ac>)
 8006aa6:	f7f9 fb5f 	bl	8000168 <__aeabi_dsub>
 8006aaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006aae:	f7f9 ff85 	bl	80009bc <__aeabi_dcmplt>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	f040 80b6 	bne.w	8006c24 <_dtoa_r+0x6e4>
 8006ab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aba:	429f      	cmp	r7, r3
 8006abc:	f43f af7a 	beq.w	80069b4 <_dtoa_r+0x474>
 8006ac0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <_dtoa_r+0x5b0>)
 8006ac8:	f7f9 fd06 	bl	80004d8 <__aeabi_dmul>
 8006acc:	2200      	movs	r2, #0
 8006ace:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ad2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ad6:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <_dtoa_r+0x5b0>)
 8006ad8:	f7f9 fcfe 	bl	80004d8 <__aeabi_dmul>
 8006adc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ae0:	e7c3      	b.n	8006a6a <_dtoa_r+0x52a>
 8006ae2:	bf00      	nop
 8006ae4:	08008be0 	.word	0x08008be0
 8006ae8:	08008bb8 	.word	0x08008bb8
 8006aec:	3ff00000 	.word	0x3ff00000
 8006af0:	40240000 	.word	0x40240000
 8006af4:	401c0000 	.word	0x401c0000
 8006af8:	40140000 	.word	0x40140000
 8006afc:	3fe00000 	.word	0x3fe00000
 8006b00:	4630      	mov	r0, r6
 8006b02:	4639      	mov	r1, r7
 8006b04:	f7f9 fce8 	bl	80004d8 <__aeabi_dmul>
 8006b08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b0e:	9c08      	ldr	r4, [sp, #32]
 8006b10:	9314      	str	r3, [sp, #80]	; 0x50
 8006b12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b16:	f7f9 ff8f 	bl	8000a38 <__aeabi_d2iz>
 8006b1a:	9015      	str	r0, [sp, #84]	; 0x54
 8006b1c:	f7f9 fc72 	bl	8000404 <__aeabi_i2d>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b28:	f7f9 fb1e 	bl	8000168 <__aeabi_dsub>
 8006b2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b2e:	4606      	mov	r6, r0
 8006b30:	3330      	adds	r3, #48	; 0x30
 8006b32:	f804 3b01 	strb.w	r3, [r4], #1
 8006b36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b38:	460f      	mov	r7, r1
 8006b3a:	429c      	cmp	r4, r3
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	d124      	bne.n	8006b8c <_dtoa_r+0x64c>
 8006b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b46:	4bb3      	ldr	r3, [pc, #716]	; (8006e14 <_dtoa_r+0x8d4>)
 8006b48:	f7f9 fb10 	bl	800016c <__adddf3>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4630      	mov	r0, r6
 8006b52:	4639      	mov	r1, r7
 8006b54:	f7f9 ff50 	bl	80009f8 <__aeabi_dcmpgt>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d162      	bne.n	8006c22 <_dtoa_r+0x6e2>
 8006b5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b60:	2000      	movs	r0, #0
 8006b62:	49ac      	ldr	r1, [pc, #688]	; (8006e14 <_dtoa_r+0x8d4>)
 8006b64:	f7f9 fb00 	bl	8000168 <__aeabi_dsub>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 ff24 	bl	80009bc <__aeabi_dcmplt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f43f af1d 	beq.w	80069b4 <_dtoa_r+0x474>
 8006b7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006b7c:	1e7b      	subs	r3, r7, #1
 8006b7e:	9314      	str	r3, [sp, #80]	; 0x50
 8006b80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006b84:	2b30      	cmp	r3, #48	; 0x30
 8006b86:	d0f8      	beq.n	8006b7a <_dtoa_r+0x63a>
 8006b88:	46c1      	mov	r9, r8
 8006b8a:	e03a      	b.n	8006c02 <_dtoa_r+0x6c2>
 8006b8c:	4ba2      	ldr	r3, [pc, #648]	; (8006e18 <_dtoa_r+0x8d8>)
 8006b8e:	f7f9 fca3 	bl	80004d8 <__aeabi_dmul>
 8006b92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b96:	e7bc      	b.n	8006b12 <_dtoa_r+0x5d2>
 8006b98:	9f08      	ldr	r7, [sp, #32]
 8006b9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ba2:	f7f9 fdc3 	bl	800072c <__aeabi_ddiv>
 8006ba6:	f7f9 ff47 	bl	8000a38 <__aeabi_d2iz>
 8006baa:	4604      	mov	r4, r0
 8006bac:	f7f9 fc2a 	bl	8000404 <__aeabi_i2d>
 8006bb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bb4:	f7f9 fc90 	bl	80004d8 <__aeabi_dmul>
 8006bb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc4:	f7f9 fad0 	bl	8000168 <__aeabi_dsub>
 8006bc8:	f807 6b01 	strb.w	r6, [r7], #1
 8006bcc:	9e08      	ldr	r6, [sp, #32]
 8006bce:	9b02      	ldr	r3, [sp, #8]
 8006bd0:	1bbe      	subs	r6, r7, r6
 8006bd2:	42b3      	cmp	r3, r6
 8006bd4:	d13a      	bne.n	8006c4c <_dtoa_r+0x70c>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	f7f9 fac7 	bl	800016c <__adddf3>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006be6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bea:	f7f9 ff05 	bl	80009f8 <__aeabi_dcmpgt>
 8006bee:	bb58      	cbnz	r0, 8006c48 <_dtoa_r+0x708>
 8006bf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bf8:	f7f9 fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8006bfc:	b108      	cbz	r0, 8006c02 <_dtoa_r+0x6c2>
 8006bfe:	07e1      	lsls	r1, r4, #31
 8006c00:	d422      	bmi.n	8006c48 <_dtoa_r+0x708>
 8006c02:	4628      	mov	r0, r5
 8006c04:	4651      	mov	r1, sl
 8006c06:	f000 faf1 	bl	80071ec <_Bfree>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	703b      	strb	r3, [r7, #0]
 8006c0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c10:	f109 0001 	add.w	r0, r9, #1
 8006c14:	6018      	str	r0, [r3, #0]
 8006c16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f43f acdf 	beq.w	80065dc <_dtoa_r+0x9c>
 8006c1e:	601f      	str	r7, [r3, #0]
 8006c20:	e4dc      	b.n	80065dc <_dtoa_r+0x9c>
 8006c22:	4627      	mov	r7, r4
 8006c24:	463b      	mov	r3, r7
 8006c26:	461f      	mov	r7, r3
 8006c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c2c:	2a39      	cmp	r2, #57	; 0x39
 8006c2e:	d107      	bne.n	8006c40 <_dtoa_r+0x700>
 8006c30:	9a08      	ldr	r2, [sp, #32]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d1f7      	bne.n	8006c26 <_dtoa_r+0x6e6>
 8006c36:	2230      	movs	r2, #48	; 0x30
 8006c38:	9908      	ldr	r1, [sp, #32]
 8006c3a:	f108 0801 	add.w	r8, r8, #1
 8006c3e:	700a      	strb	r2, [r1, #0]
 8006c40:	781a      	ldrb	r2, [r3, #0]
 8006c42:	3201      	adds	r2, #1
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	e79f      	b.n	8006b88 <_dtoa_r+0x648>
 8006c48:	46c8      	mov	r8, r9
 8006c4a:	e7eb      	b.n	8006c24 <_dtoa_r+0x6e4>
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	4b72      	ldr	r3, [pc, #456]	; (8006e18 <_dtoa_r+0x8d8>)
 8006c50:	f7f9 fc42 	bl	80004d8 <__aeabi_dmul>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f7f9 fea2 	bl	80009a8 <__aeabi_dcmpeq>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d098      	beq.n	8006b9a <_dtoa_r+0x65a>
 8006c68:	e7cb      	b.n	8006c02 <_dtoa_r+0x6c2>
 8006c6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c6c:	2a00      	cmp	r2, #0
 8006c6e:	f000 80cd 	beq.w	8006e0c <_dtoa_r+0x8cc>
 8006c72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c74:	2a01      	cmp	r2, #1
 8006c76:	f300 80af 	bgt.w	8006dd8 <_dtoa_r+0x898>
 8006c7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c7c:	2a00      	cmp	r2, #0
 8006c7e:	f000 80a7 	beq.w	8006dd0 <_dtoa_r+0x890>
 8006c82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c88:	9f06      	ldr	r7, [sp, #24]
 8006c8a:	9a06      	ldr	r2, [sp, #24]
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	441a      	add	r2, r3
 8006c90:	9206      	str	r2, [sp, #24]
 8006c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c94:	4628      	mov	r0, r5
 8006c96:	441a      	add	r2, r3
 8006c98:	9209      	str	r2, [sp, #36]	; 0x24
 8006c9a:	f000 fb61 	bl	8007360 <__i2b>
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	2f00      	cmp	r7, #0
 8006ca2:	dd0c      	ble.n	8006cbe <_dtoa_r+0x77e>
 8006ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	dd09      	ble.n	8006cbe <_dtoa_r+0x77e>
 8006caa:	42bb      	cmp	r3, r7
 8006cac:	bfa8      	it	ge
 8006cae:	463b      	movge	r3, r7
 8006cb0:	9a06      	ldr	r2, [sp, #24]
 8006cb2:	1aff      	subs	r7, r7, r3
 8006cb4:	1ad2      	subs	r2, r2, r3
 8006cb6:	9206      	str	r2, [sp, #24]
 8006cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc0:	b1f3      	cbz	r3, 8006d00 <_dtoa_r+0x7c0>
 8006cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 80a9 	beq.w	8006e1c <_dtoa_r+0x8dc>
 8006cca:	2c00      	cmp	r4, #0
 8006ccc:	dd10      	ble.n	8006cf0 <_dtoa_r+0x7b0>
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f000 fbfe 	bl	80074d4 <__pow5mult>
 8006cd8:	4652      	mov	r2, sl
 8006cda:	4601      	mov	r1, r0
 8006cdc:	4606      	mov	r6, r0
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f000 fb54 	bl	800738c <__multiply>
 8006ce4:	4680      	mov	r8, r0
 8006ce6:	4651      	mov	r1, sl
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f000 fa7f 	bl	80071ec <_Bfree>
 8006cee:	46c2      	mov	sl, r8
 8006cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf2:	1b1a      	subs	r2, r3, r4
 8006cf4:	d004      	beq.n	8006d00 <_dtoa_r+0x7c0>
 8006cf6:	4651      	mov	r1, sl
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f000 fbeb 	bl	80074d4 <__pow5mult>
 8006cfe:	4682      	mov	sl, r0
 8006d00:	2101      	movs	r1, #1
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 fb2c 	bl	8007360 <__i2b>
 8006d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f340 8087 	ble.w	8006e20 <_dtoa_r+0x8e0>
 8006d12:	461a      	mov	r2, r3
 8006d14:	4601      	mov	r1, r0
 8006d16:	4628      	mov	r0, r5
 8006d18:	f000 fbdc 	bl	80074d4 <__pow5mult>
 8006d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d1e:	4604      	mov	r4, r0
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f340 8080 	ble.w	8006e26 <_dtoa_r+0x8e6>
 8006d26:	f04f 0800 	mov.w	r8, #0
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d30:	6918      	ldr	r0, [r3, #16]
 8006d32:	f000 fac7 	bl	80072c4 <__hi0bits>
 8006d36:	f1c0 0020 	rsb	r0, r0, #32
 8006d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3c:	4418      	add	r0, r3
 8006d3e:	f010 001f 	ands.w	r0, r0, #31
 8006d42:	f000 8092 	beq.w	8006e6a <_dtoa_r+0x92a>
 8006d46:	f1c0 0320 	rsb	r3, r0, #32
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	f340 808a 	ble.w	8006e64 <_dtoa_r+0x924>
 8006d50:	f1c0 001c 	rsb	r0, r0, #28
 8006d54:	9b06      	ldr	r3, [sp, #24]
 8006d56:	4407      	add	r7, r0
 8006d58:	4403      	add	r3, r0
 8006d5a:	9306      	str	r3, [sp, #24]
 8006d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5e:	4403      	add	r3, r0
 8006d60:	9309      	str	r3, [sp, #36]	; 0x24
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dd05      	ble.n	8006d74 <_dtoa_r+0x834>
 8006d68:	4651      	mov	r1, sl
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 fc0b 	bl	8007588 <__lshift>
 8006d72:	4682      	mov	sl, r0
 8006d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dd05      	ble.n	8006d86 <_dtoa_r+0x846>
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f000 fc02 	bl	8007588 <__lshift>
 8006d84:	4604      	mov	r4, r0
 8006d86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d070      	beq.n	8006e6e <_dtoa_r+0x92e>
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	4650      	mov	r0, sl
 8006d90:	f000 fc66 	bl	8007660 <__mcmp>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	da6a      	bge.n	8006e6e <_dtoa_r+0x92e>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4651      	mov	r1, sl
 8006d9c:	220a      	movs	r2, #10
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 fa46 	bl	8007230 <__multadd>
 8006da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da6:	4682      	mov	sl, r0
 8006da8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8193 	beq.w	80070d8 <_dtoa_r+0xb98>
 8006db2:	4631      	mov	r1, r6
 8006db4:	2300      	movs	r3, #0
 8006db6:	220a      	movs	r2, #10
 8006db8:	4628      	mov	r0, r5
 8006dba:	f000 fa39 	bl	8007230 <__multadd>
 8006dbe:	f1bb 0f00 	cmp.w	fp, #0
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	f300 8093 	bgt.w	8006eee <_dtoa_r+0x9ae>
 8006dc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	dc57      	bgt.n	8006e7e <_dtoa_r+0x93e>
 8006dce:	e08e      	b.n	8006eee <_dtoa_r+0x9ae>
 8006dd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006dd2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006dd6:	e756      	b.n	8006c86 <_dtoa_r+0x746>
 8006dd8:	9b02      	ldr	r3, [sp, #8]
 8006dda:	1e5c      	subs	r4, r3, #1
 8006ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dde:	42a3      	cmp	r3, r4
 8006de0:	bfb7      	itett	lt
 8006de2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006de4:	1b1c      	subge	r4, r3, r4
 8006de6:	1ae2      	sublt	r2, r4, r3
 8006de8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006dea:	bfbe      	ittt	lt
 8006dec:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006dee:	189b      	addlt	r3, r3, r2
 8006df0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006df2:	9b02      	ldr	r3, [sp, #8]
 8006df4:	bfb8      	it	lt
 8006df6:	2400      	movlt	r4, #0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfbb      	ittet	lt
 8006dfc:	9b06      	ldrlt	r3, [sp, #24]
 8006dfe:	9a02      	ldrlt	r2, [sp, #8]
 8006e00:	9f06      	ldrge	r7, [sp, #24]
 8006e02:	1a9f      	sublt	r7, r3, r2
 8006e04:	bfac      	ite	ge
 8006e06:	9b02      	ldrge	r3, [sp, #8]
 8006e08:	2300      	movlt	r3, #0
 8006e0a:	e73e      	b.n	8006c8a <_dtoa_r+0x74a>
 8006e0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e0e:	9f06      	ldr	r7, [sp, #24]
 8006e10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e12:	e745      	b.n	8006ca0 <_dtoa_r+0x760>
 8006e14:	3fe00000 	.word	0x3fe00000
 8006e18:	40240000 	.word	0x40240000
 8006e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e1e:	e76a      	b.n	8006cf6 <_dtoa_r+0x7b6>
 8006e20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	dc19      	bgt.n	8006e5a <_dtoa_r+0x91a>
 8006e26:	9b04      	ldr	r3, [sp, #16]
 8006e28:	b9bb      	cbnz	r3, 8006e5a <_dtoa_r+0x91a>
 8006e2a:	9b05      	ldr	r3, [sp, #20]
 8006e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e30:	b99b      	cbnz	r3, 8006e5a <_dtoa_r+0x91a>
 8006e32:	9b05      	ldr	r3, [sp, #20]
 8006e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e38:	0d1b      	lsrs	r3, r3, #20
 8006e3a:	051b      	lsls	r3, r3, #20
 8006e3c:	b183      	cbz	r3, 8006e60 <_dtoa_r+0x920>
 8006e3e:	f04f 0801 	mov.w	r8, #1
 8006e42:	9b06      	ldr	r3, [sp, #24]
 8006e44:	3301      	adds	r3, #1
 8006e46:	9306      	str	r3, [sp, #24]
 8006e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f47f af6a 	bne.w	8006d2a <_dtoa_r+0x7ea>
 8006e56:	2001      	movs	r0, #1
 8006e58:	e76f      	b.n	8006d3a <_dtoa_r+0x7fa>
 8006e5a:	f04f 0800 	mov.w	r8, #0
 8006e5e:	e7f6      	b.n	8006e4e <_dtoa_r+0x90e>
 8006e60:	4698      	mov	r8, r3
 8006e62:	e7f4      	b.n	8006e4e <_dtoa_r+0x90e>
 8006e64:	f43f af7d 	beq.w	8006d62 <_dtoa_r+0x822>
 8006e68:	4618      	mov	r0, r3
 8006e6a:	301c      	adds	r0, #28
 8006e6c:	e772      	b.n	8006d54 <_dtoa_r+0x814>
 8006e6e:	9b02      	ldr	r3, [sp, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	dc36      	bgt.n	8006ee2 <_dtoa_r+0x9a2>
 8006e74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	dd33      	ble.n	8006ee2 <_dtoa_r+0x9a2>
 8006e7a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006e7e:	f1bb 0f00 	cmp.w	fp, #0
 8006e82:	d10d      	bne.n	8006ea0 <_dtoa_r+0x960>
 8006e84:	4621      	mov	r1, r4
 8006e86:	465b      	mov	r3, fp
 8006e88:	2205      	movs	r2, #5
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f000 f9d0 	bl	8007230 <__multadd>
 8006e90:	4601      	mov	r1, r0
 8006e92:	4604      	mov	r4, r0
 8006e94:	4650      	mov	r0, sl
 8006e96:	f000 fbe3 	bl	8007660 <__mcmp>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	f73f adb6 	bgt.w	8006a0c <_dtoa_r+0x4cc>
 8006ea0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ea2:	9f08      	ldr	r7, [sp, #32]
 8006ea4:	ea6f 0903 	mvn.w	r9, r3
 8006ea8:	f04f 0800 	mov.w	r8, #0
 8006eac:	4621      	mov	r1, r4
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 f99c 	bl	80071ec <_Bfree>
 8006eb4:	2e00      	cmp	r6, #0
 8006eb6:	f43f aea4 	beq.w	8006c02 <_dtoa_r+0x6c2>
 8006eba:	f1b8 0f00 	cmp.w	r8, #0
 8006ebe:	d005      	beq.n	8006ecc <_dtoa_r+0x98c>
 8006ec0:	45b0      	cmp	r8, r6
 8006ec2:	d003      	beq.n	8006ecc <_dtoa_r+0x98c>
 8006ec4:	4641      	mov	r1, r8
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f000 f990 	bl	80071ec <_Bfree>
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f000 f98c 	bl	80071ec <_Bfree>
 8006ed4:	e695      	b.n	8006c02 <_dtoa_r+0x6c2>
 8006ed6:	2400      	movs	r4, #0
 8006ed8:	4626      	mov	r6, r4
 8006eda:	e7e1      	b.n	8006ea0 <_dtoa_r+0x960>
 8006edc:	46c1      	mov	r9, r8
 8006ede:	4626      	mov	r6, r4
 8006ee0:	e594      	b.n	8006a0c <_dtoa_r+0x4cc>
 8006ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 80fc 	beq.w	80070e6 <_dtoa_r+0xba6>
 8006eee:	2f00      	cmp	r7, #0
 8006ef0:	dd05      	ble.n	8006efe <_dtoa_r+0x9be>
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	463a      	mov	r2, r7
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f000 fb46 	bl	8007588 <__lshift>
 8006efc:	4606      	mov	r6, r0
 8006efe:	f1b8 0f00 	cmp.w	r8, #0
 8006f02:	d05c      	beq.n	8006fbe <_dtoa_r+0xa7e>
 8006f04:	4628      	mov	r0, r5
 8006f06:	6871      	ldr	r1, [r6, #4]
 8006f08:	f000 f930 	bl	800716c <_Balloc>
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	b928      	cbnz	r0, 8006f1c <_dtoa_r+0x9dc>
 8006f10:	4602      	mov	r2, r0
 8006f12:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f16:	4b7e      	ldr	r3, [pc, #504]	; (8007110 <_dtoa_r+0xbd0>)
 8006f18:	f7ff bb26 	b.w	8006568 <_dtoa_r+0x28>
 8006f1c:	6932      	ldr	r2, [r6, #16]
 8006f1e:	f106 010c 	add.w	r1, r6, #12
 8006f22:	3202      	adds	r2, #2
 8006f24:	0092      	lsls	r2, r2, #2
 8006f26:	300c      	adds	r0, #12
 8006f28:	f000 f912 	bl	8007150 <memcpy>
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	4639      	mov	r1, r7
 8006f30:	4628      	mov	r0, r5
 8006f32:	f000 fb29 	bl	8007588 <__lshift>
 8006f36:	46b0      	mov	r8, r6
 8006f38:	4606      	mov	r6, r0
 8006f3a:	9b08      	ldr	r3, [sp, #32]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	9302      	str	r3, [sp, #8]
 8006f40:	9b08      	ldr	r3, [sp, #32]
 8006f42:	445b      	add	r3, fp
 8006f44:	930a      	str	r3, [sp, #40]	; 0x28
 8006f46:	9b04      	ldr	r3, [sp, #16]
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f4e:	9b02      	ldr	r3, [sp, #8]
 8006f50:	4621      	mov	r1, r4
 8006f52:	4650      	mov	r0, sl
 8006f54:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f58:	f7ff fa62 	bl	8006420 <quorem>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	4641      	mov	r1, r8
 8006f60:	3330      	adds	r3, #48	; 0x30
 8006f62:	9004      	str	r0, [sp, #16]
 8006f64:	4650      	mov	r0, sl
 8006f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f68:	f000 fb7a 	bl	8007660 <__mcmp>
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	9006      	str	r0, [sp, #24]
 8006f70:	4621      	mov	r1, r4
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 fb90 	bl	8007698 <__mdiff>
 8006f78:	68c2      	ldr	r2, [r0, #12]
 8006f7a:	4607      	mov	r7, r0
 8006f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f7e:	bb02      	cbnz	r2, 8006fc2 <_dtoa_r+0xa82>
 8006f80:	4601      	mov	r1, r0
 8006f82:	4650      	mov	r0, sl
 8006f84:	f000 fb6c 	bl	8007660 <__mcmp>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8c:	4639      	mov	r1, r7
 8006f8e:	4628      	mov	r0, r5
 8006f90:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006f94:	f000 f92a 	bl	80071ec <_Bfree>
 8006f98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f9c:	9f02      	ldr	r7, [sp, #8]
 8006f9e:	ea43 0102 	orr.w	r1, r3, r2
 8006fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fa8:	d10d      	bne.n	8006fc6 <_dtoa_r+0xa86>
 8006faa:	2b39      	cmp	r3, #57	; 0x39
 8006fac:	d027      	beq.n	8006ffe <_dtoa_r+0xabe>
 8006fae:	9a06      	ldr	r2, [sp, #24]
 8006fb0:	2a00      	cmp	r2, #0
 8006fb2:	dd01      	ble.n	8006fb8 <_dtoa_r+0xa78>
 8006fb4:	9b04      	ldr	r3, [sp, #16]
 8006fb6:	3331      	adds	r3, #49	; 0x31
 8006fb8:	f88b 3000 	strb.w	r3, [fp]
 8006fbc:	e776      	b.n	8006eac <_dtoa_r+0x96c>
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	e7b9      	b.n	8006f36 <_dtoa_r+0x9f6>
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	e7e2      	b.n	8006f8c <_dtoa_r+0xa4c>
 8006fc6:	9906      	ldr	r1, [sp, #24]
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	db04      	blt.n	8006fd6 <_dtoa_r+0xa96>
 8006fcc:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006fce:	4301      	orrs	r1, r0
 8006fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fd2:	4301      	orrs	r1, r0
 8006fd4:	d120      	bne.n	8007018 <_dtoa_r+0xad8>
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	ddee      	ble.n	8006fb8 <_dtoa_r+0xa78>
 8006fda:	4651      	mov	r1, sl
 8006fdc:	2201      	movs	r2, #1
 8006fde:	4628      	mov	r0, r5
 8006fe0:	9302      	str	r3, [sp, #8]
 8006fe2:	f000 fad1 	bl	8007588 <__lshift>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4682      	mov	sl, r0
 8006fea:	f000 fb39 	bl	8007660 <__mcmp>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	9b02      	ldr	r3, [sp, #8]
 8006ff2:	dc02      	bgt.n	8006ffa <_dtoa_r+0xaba>
 8006ff4:	d1e0      	bne.n	8006fb8 <_dtoa_r+0xa78>
 8006ff6:	07da      	lsls	r2, r3, #31
 8006ff8:	d5de      	bpl.n	8006fb8 <_dtoa_r+0xa78>
 8006ffa:	2b39      	cmp	r3, #57	; 0x39
 8006ffc:	d1da      	bne.n	8006fb4 <_dtoa_r+0xa74>
 8006ffe:	2339      	movs	r3, #57	; 0x39
 8007000:	f88b 3000 	strb.w	r3, [fp]
 8007004:	463b      	mov	r3, r7
 8007006:	461f      	mov	r7, r3
 8007008:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800700c:	3b01      	subs	r3, #1
 800700e:	2a39      	cmp	r2, #57	; 0x39
 8007010:	d050      	beq.n	80070b4 <_dtoa_r+0xb74>
 8007012:	3201      	adds	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	e749      	b.n	8006eac <_dtoa_r+0x96c>
 8007018:	2a00      	cmp	r2, #0
 800701a:	dd03      	ble.n	8007024 <_dtoa_r+0xae4>
 800701c:	2b39      	cmp	r3, #57	; 0x39
 800701e:	d0ee      	beq.n	8006ffe <_dtoa_r+0xabe>
 8007020:	3301      	adds	r3, #1
 8007022:	e7c9      	b.n	8006fb8 <_dtoa_r+0xa78>
 8007024:	9a02      	ldr	r2, [sp, #8]
 8007026:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007028:	f802 3c01 	strb.w	r3, [r2, #-1]
 800702c:	428a      	cmp	r2, r1
 800702e:	d02a      	beq.n	8007086 <_dtoa_r+0xb46>
 8007030:	4651      	mov	r1, sl
 8007032:	2300      	movs	r3, #0
 8007034:	220a      	movs	r2, #10
 8007036:	4628      	mov	r0, r5
 8007038:	f000 f8fa 	bl	8007230 <__multadd>
 800703c:	45b0      	cmp	r8, r6
 800703e:	4682      	mov	sl, r0
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	f04f 020a 	mov.w	r2, #10
 8007048:	4641      	mov	r1, r8
 800704a:	4628      	mov	r0, r5
 800704c:	d107      	bne.n	800705e <_dtoa_r+0xb1e>
 800704e:	f000 f8ef 	bl	8007230 <__multadd>
 8007052:	4680      	mov	r8, r0
 8007054:	4606      	mov	r6, r0
 8007056:	9b02      	ldr	r3, [sp, #8]
 8007058:	3301      	adds	r3, #1
 800705a:	9302      	str	r3, [sp, #8]
 800705c:	e777      	b.n	8006f4e <_dtoa_r+0xa0e>
 800705e:	f000 f8e7 	bl	8007230 <__multadd>
 8007062:	4631      	mov	r1, r6
 8007064:	4680      	mov	r8, r0
 8007066:	2300      	movs	r3, #0
 8007068:	220a      	movs	r2, #10
 800706a:	4628      	mov	r0, r5
 800706c:	f000 f8e0 	bl	8007230 <__multadd>
 8007070:	4606      	mov	r6, r0
 8007072:	e7f0      	b.n	8007056 <_dtoa_r+0xb16>
 8007074:	f1bb 0f00 	cmp.w	fp, #0
 8007078:	bfcc      	ite	gt
 800707a:	465f      	movgt	r7, fp
 800707c:	2701      	movle	r7, #1
 800707e:	f04f 0800 	mov.w	r8, #0
 8007082:	9a08      	ldr	r2, [sp, #32]
 8007084:	4417      	add	r7, r2
 8007086:	4651      	mov	r1, sl
 8007088:	2201      	movs	r2, #1
 800708a:	4628      	mov	r0, r5
 800708c:	9302      	str	r3, [sp, #8]
 800708e:	f000 fa7b 	bl	8007588 <__lshift>
 8007092:	4621      	mov	r1, r4
 8007094:	4682      	mov	sl, r0
 8007096:	f000 fae3 	bl	8007660 <__mcmp>
 800709a:	2800      	cmp	r0, #0
 800709c:	dcb2      	bgt.n	8007004 <_dtoa_r+0xac4>
 800709e:	d102      	bne.n	80070a6 <_dtoa_r+0xb66>
 80070a0:	9b02      	ldr	r3, [sp, #8]
 80070a2:	07db      	lsls	r3, r3, #31
 80070a4:	d4ae      	bmi.n	8007004 <_dtoa_r+0xac4>
 80070a6:	463b      	mov	r3, r7
 80070a8:	461f      	mov	r7, r3
 80070aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ae:	2a30      	cmp	r2, #48	; 0x30
 80070b0:	d0fa      	beq.n	80070a8 <_dtoa_r+0xb68>
 80070b2:	e6fb      	b.n	8006eac <_dtoa_r+0x96c>
 80070b4:	9a08      	ldr	r2, [sp, #32]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d1a5      	bne.n	8007006 <_dtoa_r+0xac6>
 80070ba:	2331      	movs	r3, #49	; 0x31
 80070bc:	f109 0901 	add.w	r9, r9, #1
 80070c0:	7013      	strb	r3, [r2, #0]
 80070c2:	e6f3      	b.n	8006eac <_dtoa_r+0x96c>
 80070c4:	4b13      	ldr	r3, [pc, #76]	; (8007114 <_dtoa_r+0xbd4>)
 80070c6:	f7ff baa7 	b.w	8006618 <_dtoa_r+0xd8>
 80070ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f47f aa80 	bne.w	80065d2 <_dtoa_r+0x92>
 80070d2:	4b11      	ldr	r3, [pc, #68]	; (8007118 <_dtoa_r+0xbd8>)
 80070d4:	f7ff baa0 	b.w	8006618 <_dtoa_r+0xd8>
 80070d8:	f1bb 0f00 	cmp.w	fp, #0
 80070dc:	dc03      	bgt.n	80070e6 <_dtoa_r+0xba6>
 80070de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	f73f aecc 	bgt.w	8006e7e <_dtoa_r+0x93e>
 80070e6:	9f08      	ldr	r7, [sp, #32]
 80070e8:	4621      	mov	r1, r4
 80070ea:	4650      	mov	r0, sl
 80070ec:	f7ff f998 	bl	8006420 <quorem>
 80070f0:	9a08      	ldr	r2, [sp, #32]
 80070f2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80070f6:	f807 3b01 	strb.w	r3, [r7], #1
 80070fa:	1aba      	subs	r2, r7, r2
 80070fc:	4593      	cmp	fp, r2
 80070fe:	ddb9      	ble.n	8007074 <_dtoa_r+0xb34>
 8007100:	4651      	mov	r1, sl
 8007102:	2300      	movs	r3, #0
 8007104:	220a      	movs	r2, #10
 8007106:	4628      	mov	r0, r5
 8007108:	f000 f892 	bl	8007230 <__multadd>
 800710c:	4682      	mov	sl, r0
 800710e:	e7eb      	b.n	80070e8 <_dtoa_r+0xba8>
 8007110:	08008b43 	.word	0x08008b43
 8007114:	08008a9c 	.word	0x08008a9c
 8007118:	08008ac0 	.word	0x08008ac0

0800711c <_localeconv_r>:
 800711c:	4800      	ldr	r0, [pc, #0]	; (8007120 <_localeconv_r+0x4>)
 800711e:	4770      	bx	lr
 8007120:	20000188 	.word	0x20000188

08007124 <malloc>:
 8007124:	4b02      	ldr	r3, [pc, #8]	; (8007130 <malloc+0xc>)
 8007126:	4601      	mov	r1, r0
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	f000 bbfb 	b.w	8007924 <_malloc_r>
 800712e:	bf00      	nop
 8007130:	20000034 	.word	0x20000034

08007134 <memchr>:
 8007134:	4603      	mov	r3, r0
 8007136:	b510      	push	{r4, lr}
 8007138:	b2c9      	uxtb	r1, r1
 800713a:	4402      	add	r2, r0
 800713c:	4293      	cmp	r3, r2
 800713e:	4618      	mov	r0, r3
 8007140:	d101      	bne.n	8007146 <memchr+0x12>
 8007142:	2000      	movs	r0, #0
 8007144:	e003      	b.n	800714e <memchr+0x1a>
 8007146:	7804      	ldrb	r4, [r0, #0]
 8007148:	3301      	adds	r3, #1
 800714a:	428c      	cmp	r4, r1
 800714c:	d1f6      	bne.n	800713c <memchr+0x8>
 800714e:	bd10      	pop	{r4, pc}

08007150 <memcpy>:
 8007150:	440a      	add	r2, r1
 8007152:	4291      	cmp	r1, r2
 8007154:	f100 33ff 	add.w	r3, r0, #4294967295
 8007158:	d100      	bne.n	800715c <memcpy+0xc>
 800715a:	4770      	bx	lr
 800715c:	b510      	push	{r4, lr}
 800715e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007162:	4291      	cmp	r1, r2
 8007164:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007168:	d1f9      	bne.n	800715e <memcpy+0xe>
 800716a:	bd10      	pop	{r4, pc}

0800716c <_Balloc>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007170:	4604      	mov	r4, r0
 8007172:	460d      	mov	r5, r1
 8007174:	b976      	cbnz	r6, 8007194 <_Balloc+0x28>
 8007176:	2010      	movs	r0, #16
 8007178:	f7ff ffd4 	bl	8007124 <malloc>
 800717c:	4602      	mov	r2, r0
 800717e:	6260      	str	r0, [r4, #36]	; 0x24
 8007180:	b920      	cbnz	r0, 800718c <_Balloc+0x20>
 8007182:	2166      	movs	r1, #102	; 0x66
 8007184:	4b17      	ldr	r3, [pc, #92]	; (80071e4 <_Balloc+0x78>)
 8007186:	4818      	ldr	r0, [pc, #96]	; (80071e8 <_Balloc+0x7c>)
 8007188:	f000 fd92 	bl	8007cb0 <__assert_func>
 800718c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007190:	6006      	str	r6, [r0, #0]
 8007192:	60c6      	str	r6, [r0, #12]
 8007194:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007196:	68f3      	ldr	r3, [r6, #12]
 8007198:	b183      	cbz	r3, 80071bc <_Balloc+0x50>
 800719a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071a2:	b9b8      	cbnz	r0, 80071d4 <_Balloc+0x68>
 80071a4:	2101      	movs	r1, #1
 80071a6:	fa01 f605 	lsl.w	r6, r1, r5
 80071aa:	1d72      	adds	r2, r6, #5
 80071ac:	4620      	mov	r0, r4
 80071ae:	0092      	lsls	r2, r2, #2
 80071b0:	f000 fb5e 	bl	8007870 <_calloc_r>
 80071b4:	b160      	cbz	r0, 80071d0 <_Balloc+0x64>
 80071b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071ba:	e00e      	b.n	80071da <_Balloc+0x6e>
 80071bc:	2221      	movs	r2, #33	; 0x21
 80071be:	2104      	movs	r1, #4
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fb55 	bl	8007870 <_calloc_r>
 80071c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c8:	60f0      	str	r0, [r6, #12]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e4      	bne.n	800719a <_Balloc+0x2e>
 80071d0:	2000      	movs	r0, #0
 80071d2:	bd70      	pop	{r4, r5, r6, pc}
 80071d4:	6802      	ldr	r2, [r0, #0]
 80071d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071da:	2300      	movs	r3, #0
 80071dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071e0:	e7f7      	b.n	80071d2 <_Balloc+0x66>
 80071e2:	bf00      	nop
 80071e4:	08008acd 	.word	0x08008acd
 80071e8:	08008b54 	.word	0x08008b54

080071ec <_Bfree>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071f0:	4605      	mov	r5, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	b976      	cbnz	r6, 8007214 <_Bfree+0x28>
 80071f6:	2010      	movs	r0, #16
 80071f8:	f7ff ff94 	bl	8007124 <malloc>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6268      	str	r0, [r5, #36]	; 0x24
 8007200:	b920      	cbnz	r0, 800720c <_Bfree+0x20>
 8007202:	218a      	movs	r1, #138	; 0x8a
 8007204:	4b08      	ldr	r3, [pc, #32]	; (8007228 <_Bfree+0x3c>)
 8007206:	4809      	ldr	r0, [pc, #36]	; (800722c <_Bfree+0x40>)
 8007208:	f000 fd52 	bl	8007cb0 <__assert_func>
 800720c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007210:	6006      	str	r6, [r0, #0]
 8007212:	60c6      	str	r6, [r0, #12]
 8007214:	b13c      	cbz	r4, 8007226 <_Bfree+0x3a>
 8007216:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007218:	6862      	ldr	r2, [r4, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007220:	6021      	str	r1, [r4, #0]
 8007222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	08008acd 	.word	0x08008acd
 800722c:	08008b54 	.word	0x08008b54

08007230 <__multadd>:
 8007230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007234:	4698      	mov	r8, r3
 8007236:	460c      	mov	r4, r1
 8007238:	2300      	movs	r3, #0
 800723a:	690e      	ldr	r6, [r1, #16]
 800723c:	4607      	mov	r7, r0
 800723e:	f101 0014 	add.w	r0, r1, #20
 8007242:	6805      	ldr	r5, [r0, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	b2a9      	uxth	r1, r5
 8007248:	fb02 8101 	mla	r1, r2, r1, r8
 800724c:	0c2d      	lsrs	r5, r5, #16
 800724e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007252:	fb02 c505 	mla	r5, r2, r5, ip
 8007256:	b289      	uxth	r1, r1
 8007258:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800725c:	429e      	cmp	r6, r3
 800725e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007262:	f840 1b04 	str.w	r1, [r0], #4
 8007266:	dcec      	bgt.n	8007242 <__multadd+0x12>
 8007268:	f1b8 0f00 	cmp.w	r8, #0
 800726c:	d022      	beq.n	80072b4 <__multadd+0x84>
 800726e:	68a3      	ldr	r3, [r4, #8]
 8007270:	42b3      	cmp	r3, r6
 8007272:	dc19      	bgt.n	80072a8 <__multadd+0x78>
 8007274:	6861      	ldr	r1, [r4, #4]
 8007276:	4638      	mov	r0, r7
 8007278:	3101      	adds	r1, #1
 800727a:	f7ff ff77 	bl	800716c <_Balloc>
 800727e:	4605      	mov	r5, r0
 8007280:	b928      	cbnz	r0, 800728e <__multadd+0x5e>
 8007282:	4602      	mov	r2, r0
 8007284:	21b5      	movs	r1, #181	; 0xb5
 8007286:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <__multadd+0x8c>)
 8007288:	480d      	ldr	r0, [pc, #52]	; (80072c0 <__multadd+0x90>)
 800728a:	f000 fd11 	bl	8007cb0 <__assert_func>
 800728e:	6922      	ldr	r2, [r4, #16]
 8007290:	f104 010c 	add.w	r1, r4, #12
 8007294:	3202      	adds	r2, #2
 8007296:	0092      	lsls	r2, r2, #2
 8007298:	300c      	adds	r0, #12
 800729a:	f7ff ff59 	bl	8007150 <memcpy>
 800729e:	4621      	mov	r1, r4
 80072a0:	4638      	mov	r0, r7
 80072a2:	f7ff ffa3 	bl	80071ec <_Bfree>
 80072a6:	462c      	mov	r4, r5
 80072a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80072ac:	3601      	adds	r6, #1
 80072ae:	f8c3 8014 	str.w	r8, [r3, #20]
 80072b2:	6126      	str	r6, [r4, #16]
 80072b4:	4620      	mov	r0, r4
 80072b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ba:	bf00      	nop
 80072bc:	08008b43 	.word	0x08008b43
 80072c0:	08008b54 	.word	0x08008b54

080072c4 <__hi0bits>:
 80072c4:	0c02      	lsrs	r2, r0, #16
 80072c6:	0412      	lsls	r2, r2, #16
 80072c8:	4603      	mov	r3, r0
 80072ca:	b9ca      	cbnz	r2, 8007300 <__hi0bits+0x3c>
 80072cc:	0403      	lsls	r3, r0, #16
 80072ce:	2010      	movs	r0, #16
 80072d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072d4:	bf04      	itt	eq
 80072d6:	021b      	lsleq	r3, r3, #8
 80072d8:	3008      	addeq	r0, #8
 80072da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072de:	bf04      	itt	eq
 80072e0:	011b      	lsleq	r3, r3, #4
 80072e2:	3004      	addeq	r0, #4
 80072e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072e8:	bf04      	itt	eq
 80072ea:	009b      	lsleq	r3, r3, #2
 80072ec:	3002      	addeq	r0, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	db05      	blt.n	80072fe <__hi0bits+0x3a>
 80072f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80072f6:	f100 0001 	add.w	r0, r0, #1
 80072fa:	bf08      	it	eq
 80072fc:	2020      	moveq	r0, #32
 80072fe:	4770      	bx	lr
 8007300:	2000      	movs	r0, #0
 8007302:	e7e5      	b.n	80072d0 <__hi0bits+0xc>

08007304 <__lo0bits>:
 8007304:	6803      	ldr	r3, [r0, #0]
 8007306:	4602      	mov	r2, r0
 8007308:	f013 0007 	ands.w	r0, r3, #7
 800730c:	d00b      	beq.n	8007326 <__lo0bits+0x22>
 800730e:	07d9      	lsls	r1, r3, #31
 8007310:	d422      	bmi.n	8007358 <__lo0bits+0x54>
 8007312:	0798      	lsls	r0, r3, #30
 8007314:	bf49      	itett	mi
 8007316:	085b      	lsrmi	r3, r3, #1
 8007318:	089b      	lsrpl	r3, r3, #2
 800731a:	2001      	movmi	r0, #1
 800731c:	6013      	strmi	r3, [r2, #0]
 800731e:	bf5c      	itt	pl
 8007320:	2002      	movpl	r0, #2
 8007322:	6013      	strpl	r3, [r2, #0]
 8007324:	4770      	bx	lr
 8007326:	b299      	uxth	r1, r3
 8007328:	b909      	cbnz	r1, 800732e <__lo0bits+0x2a>
 800732a:	2010      	movs	r0, #16
 800732c:	0c1b      	lsrs	r3, r3, #16
 800732e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007332:	bf04      	itt	eq
 8007334:	0a1b      	lsreq	r3, r3, #8
 8007336:	3008      	addeq	r0, #8
 8007338:	0719      	lsls	r1, r3, #28
 800733a:	bf04      	itt	eq
 800733c:	091b      	lsreq	r3, r3, #4
 800733e:	3004      	addeq	r0, #4
 8007340:	0799      	lsls	r1, r3, #30
 8007342:	bf04      	itt	eq
 8007344:	089b      	lsreq	r3, r3, #2
 8007346:	3002      	addeq	r0, #2
 8007348:	07d9      	lsls	r1, r3, #31
 800734a:	d403      	bmi.n	8007354 <__lo0bits+0x50>
 800734c:	085b      	lsrs	r3, r3, #1
 800734e:	f100 0001 	add.w	r0, r0, #1
 8007352:	d003      	beq.n	800735c <__lo0bits+0x58>
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	4770      	bx	lr
 8007358:	2000      	movs	r0, #0
 800735a:	4770      	bx	lr
 800735c:	2020      	movs	r0, #32
 800735e:	4770      	bx	lr

08007360 <__i2b>:
 8007360:	b510      	push	{r4, lr}
 8007362:	460c      	mov	r4, r1
 8007364:	2101      	movs	r1, #1
 8007366:	f7ff ff01 	bl	800716c <_Balloc>
 800736a:	4602      	mov	r2, r0
 800736c:	b928      	cbnz	r0, 800737a <__i2b+0x1a>
 800736e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007372:	4b04      	ldr	r3, [pc, #16]	; (8007384 <__i2b+0x24>)
 8007374:	4804      	ldr	r0, [pc, #16]	; (8007388 <__i2b+0x28>)
 8007376:	f000 fc9b 	bl	8007cb0 <__assert_func>
 800737a:	2301      	movs	r3, #1
 800737c:	6144      	str	r4, [r0, #20]
 800737e:	6103      	str	r3, [r0, #16]
 8007380:	bd10      	pop	{r4, pc}
 8007382:	bf00      	nop
 8007384:	08008b43 	.word	0x08008b43
 8007388:	08008b54 	.word	0x08008b54

0800738c <__multiply>:
 800738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	4614      	mov	r4, r2
 8007392:	690a      	ldr	r2, [r1, #16]
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	460d      	mov	r5, r1
 8007398:	429a      	cmp	r2, r3
 800739a:	bfbe      	ittt	lt
 800739c:	460b      	movlt	r3, r1
 800739e:	4625      	movlt	r5, r4
 80073a0:	461c      	movlt	r4, r3
 80073a2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80073a6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073aa:	68ab      	ldr	r3, [r5, #8]
 80073ac:	6869      	ldr	r1, [r5, #4]
 80073ae:	eb0a 0709 	add.w	r7, sl, r9
 80073b2:	42bb      	cmp	r3, r7
 80073b4:	b085      	sub	sp, #20
 80073b6:	bfb8      	it	lt
 80073b8:	3101      	addlt	r1, #1
 80073ba:	f7ff fed7 	bl	800716c <_Balloc>
 80073be:	b930      	cbnz	r0, 80073ce <__multiply+0x42>
 80073c0:	4602      	mov	r2, r0
 80073c2:	f240 115d 	movw	r1, #349	; 0x15d
 80073c6:	4b41      	ldr	r3, [pc, #260]	; (80074cc <__multiply+0x140>)
 80073c8:	4841      	ldr	r0, [pc, #260]	; (80074d0 <__multiply+0x144>)
 80073ca:	f000 fc71 	bl	8007cb0 <__assert_func>
 80073ce:	f100 0614 	add.w	r6, r0, #20
 80073d2:	4633      	mov	r3, r6
 80073d4:	2200      	movs	r2, #0
 80073d6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80073da:	4543      	cmp	r3, r8
 80073dc:	d31e      	bcc.n	800741c <__multiply+0x90>
 80073de:	f105 0c14 	add.w	ip, r5, #20
 80073e2:	f104 0314 	add.w	r3, r4, #20
 80073e6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80073ea:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80073ee:	9202      	str	r2, [sp, #8]
 80073f0:	ebac 0205 	sub.w	r2, ip, r5
 80073f4:	3a15      	subs	r2, #21
 80073f6:	f022 0203 	bic.w	r2, r2, #3
 80073fa:	3204      	adds	r2, #4
 80073fc:	f105 0115 	add.w	r1, r5, #21
 8007400:	458c      	cmp	ip, r1
 8007402:	bf38      	it	cc
 8007404:	2204      	movcc	r2, #4
 8007406:	9201      	str	r2, [sp, #4]
 8007408:	9a02      	ldr	r2, [sp, #8]
 800740a:	9303      	str	r3, [sp, #12]
 800740c:	429a      	cmp	r2, r3
 800740e:	d808      	bhi.n	8007422 <__multiply+0x96>
 8007410:	2f00      	cmp	r7, #0
 8007412:	dc55      	bgt.n	80074c0 <__multiply+0x134>
 8007414:	6107      	str	r7, [r0, #16]
 8007416:	b005      	add	sp, #20
 8007418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741c:	f843 2b04 	str.w	r2, [r3], #4
 8007420:	e7db      	b.n	80073da <__multiply+0x4e>
 8007422:	f8b3 a000 	ldrh.w	sl, [r3]
 8007426:	f1ba 0f00 	cmp.w	sl, #0
 800742a:	d020      	beq.n	800746e <__multiply+0xe2>
 800742c:	46b1      	mov	r9, r6
 800742e:	2200      	movs	r2, #0
 8007430:	f105 0e14 	add.w	lr, r5, #20
 8007434:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007438:	f8d9 b000 	ldr.w	fp, [r9]
 800743c:	b2a1      	uxth	r1, r4
 800743e:	fa1f fb8b 	uxth.w	fp, fp
 8007442:	fb0a b101 	mla	r1, sl, r1, fp
 8007446:	4411      	add	r1, r2
 8007448:	f8d9 2000 	ldr.w	r2, [r9]
 800744c:	0c24      	lsrs	r4, r4, #16
 800744e:	0c12      	lsrs	r2, r2, #16
 8007450:	fb0a 2404 	mla	r4, sl, r4, r2
 8007454:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007458:	b289      	uxth	r1, r1
 800745a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800745e:	45f4      	cmp	ip, lr
 8007460:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007464:	f849 1b04 	str.w	r1, [r9], #4
 8007468:	d8e4      	bhi.n	8007434 <__multiply+0xa8>
 800746a:	9901      	ldr	r1, [sp, #4]
 800746c:	5072      	str	r2, [r6, r1]
 800746e:	9a03      	ldr	r2, [sp, #12]
 8007470:	3304      	adds	r3, #4
 8007472:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007476:	f1b9 0f00 	cmp.w	r9, #0
 800747a:	d01f      	beq.n	80074bc <__multiply+0x130>
 800747c:	46b6      	mov	lr, r6
 800747e:	f04f 0a00 	mov.w	sl, #0
 8007482:	6834      	ldr	r4, [r6, #0]
 8007484:	f105 0114 	add.w	r1, r5, #20
 8007488:	880a      	ldrh	r2, [r1, #0]
 800748a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800748e:	b2a4      	uxth	r4, r4
 8007490:	fb09 b202 	mla	r2, r9, r2, fp
 8007494:	4492      	add	sl, r2
 8007496:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800749a:	f84e 4b04 	str.w	r4, [lr], #4
 800749e:	f851 4b04 	ldr.w	r4, [r1], #4
 80074a2:	f8be 2000 	ldrh.w	r2, [lr]
 80074a6:	0c24      	lsrs	r4, r4, #16
 80074a8:	fb09 2404 	mla	r4, r9, r4, r2
 80074ac:	458c      	cmp	ip, r1
 80074ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80074b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80074b6:	d8e7      	bhi.n	8007488 <__multiply+0xfc>
 80074b8:	9a01      	ldr	r2, [sp, #4]
 80074ba:	50b4      	str	r4, [r6, r2]
 80074bc:	3604      	adds	r6, #4
 80074be:	e7a3      	b.n	8007408 <__multiply+0x7c>
 80074c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1a5      	bne.n	8007414 <__multiply+0x88>
 80074c8:	3f01      	subs	r7, #1
 80074ca:	e7a1      	b.n	8007410 <__multiply+0x84>
 80074cc:	08008b43 	.word	0x08008b43
 80074d0:	08008b54 	.word	0x08008b54

080074d4 <__pow5mult>:
 80074d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d8:	4615      	mov	r5, r2
 80074da:	f012 0203 	ands.w	r2, r2, #3
 80074de:	4606      	mov	r6, r0
 80074e0:	460f      	mov	r7, r1
 80074e2:	d007      	beq.n	80074f4 <__pow5mult+0x20>
 80074e4:	4c25      	ldr	r4, [pc, #148]	; (800757c <__pow5mult+0xa8>)
 80074e6:	3a01      	subs	r2, #1
 80074e8:	2300      	movs	r3, #0
 80074ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074ee:	f7ff fe9f 	bl	8007230 <__multadd>
 80074f2:	4607      	mov	r7, r0
 80074f4:	10ad      	asrs	r5, r5, #2
 80074f6:	d03d      	beq.n	8007574 <__pow5mult+0xa0>
 80074f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074fa:	b97c      	cbnz	r4, 800751c <__pow5mult+0x48>
 80074fc:	2010      	movs	r0, #16
 80074fe:	f7ff fe11 	bl	8007124 <malloc>
 8007502:	4602      	mov	r2, r0
 8007504:	6270      	str	r0, [r6, #36]	; 0x24
 8007506:	b928      	cbnz	r0, 8007514 <__pow5mult+0x40>
 8007508:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800750c:	4b1c      	ldr	r3, [pc, #112]	; (8007580 <__pow5mult+0xac>)
 800750e:	481d      	ldr	r0, [pc, #116]	; (8007584 <__pow5mult+0xb0>)
 8007510:	f000 fbce 	bl	8007cb0 <__assert_func>
 8007514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007518:	6004      	str	r4, [r0, #0]
 800751a:	60c4      	str	r4, [r0, #12]
 800751c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007524:	b94c      	cbnz	r4, 800753a <__pow5mult+0x66>
 8007526:	f240 2171 	movw	r1, #625	; 0x271
 800752a:	4630      	mov	r0, r6
 800752c:	f7ff ff18 	bl	8007360 <__i2b>
 8007530:	2300      	movs	r3, #0
 8007532:	4604      	mov	r4, r0
 8007534:	f8c8 0008 	str.w	r0, [r8, #8]
 8007538:	6003      	str	r3, [r0, #0]
 800753a:	f04f 0900 	mov.w	r9, #0
 800753e:	07eb      	lsls	r3, r5, #31
 8007540:	d50a      	bpl.n	8007558 <__pow5mult+0x84>
 8007542:	4639      	mov	r1, r7
 8007544:	4622      	mov	r2, r4
 8007546:	4630      	mov	r0, r6
 8007548:	f7ff ff20 	bl	800738c <__multiply>
 800754c:	4680      	mov	r8, r0
 800754e:	4639      	mov	r1, r7
 8007550:	4630      	mov	r0, r6
 8007552:	f7ff fe4b 	bl	80071ec <_Bfree>
 8007556:	4647      	mov	r7, r8
 8007558:	106d      	asrs	r5, r5, #1
 800755a:	d00b      	beq.n	8007574 <__pow5mult+0xa0>
 800755c:	6820      	ldr	r0, [r4, #0]
 800755e:	b938      	cbnz	r0, 8007570 <__pow5mult+0x9c>
 8007560:	4622      	mov	r2, r4
 8007562:	4621      	mov	r1, r4
 8007564:	4630      	mov	r0, r6
 8007566:	f7ff ff11 	bl	800738c <__multiply>
 800756a:	6020      	str	r0, [r4, #0]
 800756c:	f8c0 9000 	str.w	r9, [r0]
 8007570:	4604      	mov	r4, r0
 8007572:	e7e4      	b.n	800753e <__pow5mult+0x6a>
 8007574:	4638      	mov	r0, r7
 8007576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800757a:	bf00      	nop
 800757c:	08008ca8 	.word	0x08008ca8
 8007580:	08008acd 	.word	0x08008acd
 8007584:	08008b54 	.word	0x08008b54

08007588 <__lshift>:
 8007588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800758c:	460c      	mov	r4, r1
 800758e:	4607      	mov	r7, r0
 8007590:	4691      	mov	r9, r2
 8007592:	6923      	ldr	r3, [r4, #16]
 8007594:	6849      	ldr	r1, [r1, #4]
 8007596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075a0:	f108 0601 	add.w	r6, r8, #1
 80075a4:	42b3      	cmp	r3, r6
 80075a6:	db0b      	blt.n	80075c0 <__lshift+0x38>
 80075a8:	4638      	mov	r0, r7
 80075aa:	f7ff fddf 	bl	800716c <_Balloc>
 80075ae:	4605      	mov	r5, r0
 80075b0:	b948      	cbnz	r0, 80075c6 <__lshift+0x3e>
 80075b2:	4602      	mov	r2, r0
 80075b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075b8:	4b27      	ldr	r3, [pc, #156]	; (8007658 <__lshift+0xd0>)
 80075ba:	4828      	ldr	r0, [pc, #160]	; (800765c <__lshift+0xd4>)
 80075bc:	f000 fb78 	bl	8007cb0 <__assert_func>
 80075c0:	3101      	adds	r1, #1
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	e7ee      	b.n	80075a4 <__lshift+0x1c>
 80075c6:	2300      	movs	r3, #0
 80075c8:	f100 0114 	add.w	r1, r0, #20
 80075cc:	f100 0210 	add.w	r2, r0, #16
 80075d0:	4618      	mov	r0, r3
 80075d2:	4553      	cmp	r3, sl
 80075d4:	db33      	blt.n	800763e <__lshift+0xb6>
 80075d6:	6920      	ldr	r0, [r4, #16]
 80075d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075dc:	f104 0314 	add.w	r3, r4, #20
 80075e0:	f019 091f 	ands.w	r9, r9, #31
 80075e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075ec:	d02b      	beq.n	8007646 <__lshift+0xbe>
 80075ee:	468a      	mov	sl, r1
 80075f0:	2200      	movs	r2, #0
 80075f2:	f1c9 0e20 	rsb	lr, r9, #32
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	fa00 f009 	lsl.w	r0, r0, r9
 80075fc:	4302      	orrs	r2, r0
 80075fe:	f84a 2b04 	str.w	r2, [sl], #4
 8007602:	f853 2b04 	ldr.w	r2, [r3], #4
 8007606:	459c      	cmp	ip, r3
 8007608:	fa22 f20e 	lsr.w	r2, r2, lr
 800760c:	d8f3      	bhi.n	80075f6 <__lshift+0x6e>
 800760e:	ebac 0304 	sub.w	r3, ip, r4
 8007612:	3b15      	subs	r3, #21
 8007614:	f023 0303 	bic.w	r3, r3, #3
 8007618:	3304      	adds	r3, #4
 800761a:	f104 0015 	add.w	r0, r4, #21
 800761e:	4584      	cmp	ip, r0
 8007620:	bf38      	it	cc
 8007622:	2304      	movcc	r3, #4
 8007624:	50ca      	str	r2, [r1, r3]
 8007626:	b10a      	cbz	r2, 800762c <__lshift+0xa4>
 8007628:	f108 0602 	add.w	r6, r8, #2
 800762c:	3e01      	subs	r6, #1
 800762e:	4638      	mov	r0, r7
 8007630:	4621      	mov	r1, r4
 8007632:	612e      	str	r6, [r5, #16]
 8007634:	f7ff fdda 	bl	80071ec <_Bfree>
 8007638:	4628      	mov	r0, r5
 800763a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007642:	3301      	adds	r3, #1
 8007644:	e7c5      	b.n	80075d2 <__lshift+0x4a>
 8007646:	3904      	subs	r1, #4
 8007648:	f853 2b04 	ldr.w	r2, [r3], #4
 800764c:	459c      	cmp	ip, r3
 800764e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007652:	d8f9      	bhi.n	8007648 <__lshift+0xc0>
 8007654:	e7ea      	b.n	800762c <__lshift+0xa4>
 8007656:	bf00      	nop
 8007658:	08008b43 	.word	0x08008b43
 800765c:	08008b54 	.word	0x08008b54

08007660 <__mcmp>:
 8007660:	4603      	mov	r3, r0
 8007662:	690a      	ldr	r2, [r1, #16]
 8007664:	6900      	ldr	r0, [r0, #16]
 8007666:	b530      	push	{r4, r5, lr}
 8007668:	1a80      	subs	r0, r0, r2
 800766a:	d10d      	bne.n	8007688 <__mcmp+0x28>
 800766c:	3314      	adds	r3, #20
 800766e:	3114      	adds	r1, #20
 8007670:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007674:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007678:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800767c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007680:	4295      	cmp	r5, r2
 8007682:	d002      	beq.n	800768a <__mcmp+0x2a>
 8007684:	d304      	bcc.n	8007690 <__mcmp+0x30>
 8007686:	2001      	movs	r0, #1
 8007688:	bd30      	pop	{r4, r5, pc}
 800768a:	42a3      	cmp	r3, r4
 800768c:	d3f4      	bcc.n	8007678 <__mcmp+0x18>
 800768e:	e7fb      	b.n	8007688 <__mcmp+0x28>
 8007690:	f04f 30ff 	mov.w	r0, #4294967295
 8007694:	e7f8      	b.n	8007688 <__mcmp+0x28>
	...

08007698 <__mdiff>:
 8007698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	460c      	mov	r4, r1
 800769e:	4606      	mov	r6, r0
 80076a0:	4611      	mov	r1, r2
 80076a2:	4620      	mov	r0, r4
 80076a4:	4692      	mov	sl, r2
 80076a6:	f7ff ffdb 	bl	8007660 <__mcmp>
 80076aa:	1e05      	subs	r5, r0, #0
 80076ac:	d111      	bne.n	80076d2 <__mdiff+0x3a>
 80076ae:	4629      	mov	r1, r5
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7ff fd5b 	bl	800716c <_Balloc>
 80076b6:	4602      	mov	r2, r0
 80076b8:	b928      	cbnz	r0, 80076c6 <__mdiff+0x2e>
 80076ba:	f240 2132 	movw	r1, #562	; 0x232
 80076be:	4b3c      	ldr	r3, [pc, #240]	; (80077b0 <__mdiff+0x118>)
 80076c0:	483c      	ldr	r0, [pc, #240]	; (80077b4 <__mdiff+0x11c>)
 80076c2:	f000 faf5 	bl	8007cb0 <__assert_func>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076cc:	4610      	mov	r0, r2
 80076ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d2:	bfa4      	itt	ge
 80076d4:	4653      	movge	r3, sl
 80076d6:	46a2      	movge	sl, r4
 80076d8:	4630      	mov	r0, r6
 80076da:	f8da 1004 	ldr.w	r1, [sl, #4]
 80076de:	bfa6      	itte	ge
 80076e0:	461c      	movge	r4, r3
 80076e2:	2500      	movge	r5, #0
 80076e4:	2501      	movlt	r5, #1
 80076e6:	f7ff fd41 	bl	800716c <_Balloc>
 80076ea:	4602      	mov	r2, r0
 80076ec:	b918      	cbnz	r0, 80076f6 <__mdiff+0x5e>
 80076ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80076f2:	4b2f      	ldr	r3, [pc, #188]	; (80077b0 <__mdiff+0x118>)
 80076f4:	e7e4      	b.n	80076c0 <__mdiff+0x28>
 80076f6:	f100 0814 	add.w	r8, r0, #20
 80076fa:	f8da 7010 	ldr.w	r7, [sl, #16]
 80076fe:	60c5      	str	r5, [r0, #12]
 8007700:	f04f 0c00 	mov.w	ip, #0
 8007704:	f10a 0514 	add.w	r5, sl, #20
 8007708:	f10a 0010 	add.w	r0, sl, #16
 800770c:	46c2      	mov	sl, r8
 800770e:	6926      	ldr	r6, [r4, #16]
 8007710:	f104 0914 	add.w	r9, r4, #20
 8007714:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007718:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800771c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007720:	f859 3b04 	ldr.w	r3, [r9], #4
 8007724:	fa1f f18b 	uxth.w	r1, fp
 8007728:	4461      	add	r1, ip
 800772a:	fa1f fc83 	uxth.w	ip, r3
 800772e:	0c1b      	lsrs	r3, r3, #16
 8007730:	eba1 010c 	sub.w	r1, r1, ip
 8007734:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007738:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800773c:	b289      	uxth	r1, r1
 800773e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007742:	454e      	cmp	r6, r9
 8007744:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007748:	f84a 3b04 	str.w	r3, [sl], #4
 800774c:	d8e6      	bhi.n	800771c <__mdiff+0x84>
 800774e:	1b33      	subs	r3, r6, r4
 8007750:	3b15      	subs	r3, #21
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	3415      	adds	r4, #21
 8007758:	3304      	adds	r3, #4
 800775a:	42a6      	cmp	r6, r4
 800775c:	bf38      	it	cc
 800775e:	2304      	movcc	r3, #4
 8007760:	441d      	add	r5, r3
 8007762:	4443      	add	r3, r8
 8007764:	461e      	mov	r6, r3
 8007766:	462c      	mov	r4, r5
 8007768:	4574      	cmp	r4, lr
 800776a:	d30e      	bcc.n	800778a <__mdiff+0xf2>
 800776c:	f10e 0103 	add.w	r1, lr, #3
 8007770:	1b49      	subs	r1, r1, r5
 8007772:	f021 0103 	bic.w	r1, r1, #3
 8007776:	3d03      	subs	r5, #3
 8007778:	45ae      	cmp	lr, r5
 800777a:	bf38      	it	cc
 800777c:	2100      	movcc	r1, #0
 800777e:	4419      	add	r1, r3
 8007780:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007784:	b18b      	cbz	r3, 80077aa <__mdiff+0x112>
 8007786:	6117      	str	r7, [r2, #16]
 8007788:	e7a0      	b.n	80076cc <__mdiff+0x34>
 800778a:	f854 8b04 	ldr.w	r8, [r4], #4
 800778e:	fa1f f188 	uxth.w	r1, r8
 8007792:	4461      	add	r1, ip
 8007794:	1408      	asrs	r0, r1, #16
 8007796:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800779a:	b289      	uxth	r1, r1
 800779c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077a4:	f846 1b04 	str.w	r1, [r6], #4
 80077a8:	e7de      	b.n	8007768 <__mdiff+0xd0>
 80077aa:	3f01      	subs	r7, #1
 80077ac:	e7e8      	b.n	8007780 <__mdiff+0xe8>
 80077ae:	bf00      	nop
 80077b0:	08008b43 	.word	0x08008b43
 80077b4:	08008b54 	.word	0x08008b54

080077b8 <__d2b>:
 80077b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80077bc:	2101      	movs	r1, #1
 80077be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80077c2:	4690      	mov	r8, r2
 80077c4:	461d      	mov	r5, r3
 80077c6:	f7ff fcd1 	bl	800716c <_Balloc>
 80077ca:	4604      	mov	r4, r0
 80077cc:	b930      	cbnz	r0, 80077dc <__d2b+0x24>
 80077ce:	4602      	mov	r2, r0
 80077d0:	f240 310a 	movw	r1, #778	; 0x30a
 80077d4:	4b24      	ldr	r3, [pc, #144]	; (8007868 <__d2b+0xb0>)
 80077d6:	4825      	ldr	r0, [pc, #148]	; (800786c <__d2b+0xb4>)
 80077d8:	f000 fa6a 	bl	8007cb0 <__assert_func>
 80077dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80077e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80077e4:	bb2d      	cbnz	r5, 8007832 <__d2b+0x7a>
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	f1b8 0300 	subs.w	r3, r8, #0
 80077ec:	d026      	beq.n	800783c <__d2b+0x84>
 80077ee:	4668      	mov	r0, sp
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	f7ff fd87 	bl	8007304 <__lo0bits>
 80077f6:	9900      	ldr	r1, [sp, #0]
 80077f8:	b1f0      	cbz	r0, 8007838 <__d2b+0x80>
 80077fa:	9a01      	ldr	r2, [sp, #4]
 80077fc:	f1c0 0320 	rsb	r3, r0, #32
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	430b      	orrs	r3, r1
 8007806:	40c2      	lsrs	r2, r0
 8007808:	6163      	str	r3, [r4, #20]
 800780a:	9201      	str	r2, [sp, #4]
 800780c:	9b01      	ldr	r3, [sp, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	bf14      	ite	ne
 8007812:	2102      	movne	r1, #2
 8007814:	2101      	moveq	r1, #1
 8007816:	61a3      	str	r3, [r4, #24]
 8007818:	6121      	str	r1, [r4, #16]
 800781a:	b1c5      	cbz	r5, 800784e <__d2b+0x96>
 800781c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007820:	4405      	add	r5, r0
 8007822:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007826:	603d      	str	r5, [r7, #0]
 8007828:	6030      	str	r0, [r6, #0]
 800782a:	4620      	mov	r0, r4
 800782c:	b002      	add	sp, #8
 800782e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007836:	e7d6      	b.n	80077e6 <__d2b+0x2e>
 8007838:	6161      	str	r1, [r4, #20]
 800783a:	e7e7      	b.n	800780c <__d2b+0x54>
 800783c:	a801      	add	r0, sp, #4
 800783e:	f7ff fd61 	bl	8007304 <__lo0bits>
 8007842:	2101      	movs	r1, #1
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	6121      	str	r1, [r4, #16]
 8007848:	6163      	str	r3, [r4, #20]
 800784a:	3020      	adds	r0, #32
 800784c:	e7e5      	b.n	800781a <__d2b+0x62>
 800784e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007852:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007856:	6038      	str	r0, [r7, #0]
 8007858:	6918      	ldr	r0, [r3, #16]
 800785a:	f7ff fd33 	bl	80072c4 <__hi0bits>
 800785e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007862:	6031      	str	r1, [r6, #0]
 8007864:	e7e1      	b.n	800782a <__d2b+0x72>
 8007866:	bf00      	nop
 8007868:	08008b43 	.word	0x08008b43
 800786c:	08008b54 	.word	0x08008b54

08007870 <_calloc_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	fb02 f501 	mul.w	r5, r2, r1
 8007876:	4629      	mov	r1, r5
 8007878:	f000 f854 	bl	8007924 <_malloc_r>
 800787c:	4604      	mov	r4, r0
 800787e:	b118      	cbz	r0, 8007888 <_calloc_r+0x18>
 8007880:	462a      	mov	r2, r5
 8007882:	2100      	movs	r1, #0
 8007884:	f7fe f92a 	bl	8005adc <memset>
 8007888:	4620      	mov	r0, r4
 800788a:	bd38      	pop	{r3, r4, r5, pc}

0800788c <_free_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4605      	mov	r5, r0
 8007890:	2900      	cmp	r1, #0
 8007892:	d043      	beq.n	800791c <_free_r+0x90>
 8007894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007898:	1f0c      	subs	r4, r1, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	bfb8      	it	lt
 800789e:	18e4      	addlt	r4, r4, r3
 80078a0:	f000 fa62 	bl	8007d68 <__malloc_lock>
 80078a4:	4a1e      	ldr	r2, [pc, #120]	; (8007920 <_free_r+0x94>)
 80078a6:	6813      	ldr	r3, [r2, #0]
 80078a8:	4610      	mov	r0, r2
 80078aa:	b933      	cbnz	r3, 80078ba <_free_r+0x2e>
 80078ac:	6063      	str	r3, [r4, #4]
 80078ae:	6014      	str	r4, [r2, #0]
 80078b0:	4628      	mov	r0, r5
 80078b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b6:	f000 ba5d 	b.w	8007d74 <__malloc_unlock>
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	d90a      	bls.n	80078d4 <_free_r+0x48>
 80078be:	6821      	ldr	r1, [r4, #0]
 80078c0:	1862      	adds	r2, r4, r1
 80078c2:	4293      	cmp	r3, r2
 80078c4:	bf01      	itttt	eq
 80078c6:	681a      	ldreq	r2, [r3, #0]
 80078c8:	685b      	ldreq	r3, [r3, #4]
 80078ca:	1852      	addeq	r2, r2, r1
 80078cc:	6022      	streq	r2, [r4, #0]
 80078ce:	6063      	str	r3, [r4, #4]
 80078d0:	6004      	str	r4, [r0, #0]
 80078d2:	e7ed      	b.n	80078b0 <_free_r+0x24>
 80078d4:	461a      	mov	r2, r3
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	b10b      	cbz	r3, 80078de <_free_r+0x52>
 80078da:	42a3      	cmp	r3, r4
 80078dc:	d9fa      	bls.n	80078d4 <_free_r+0x48>
 80078de:	6811      	ldr	r1, [r2, #0]
 80078e0:	1850      	adds	r0, r2, r1
 80078e2:	42a0      	cmp	r0, r4
 80078e4:	d10b      	bne.n	80078fe <_free_r+0x72>
 80078e6:	6820      	ldr	r0, [r4, #0]
 80078e8:	4401      	add	r1, r0
 80078ea:	1850      	adds	r0, r2, r1
 80078ec:	4283      	cmp	r3, r0
 80078ee:	6011      	str	r1, [r2, #0]
 80078f0:	d1de      	bne.n	80078b0 <_free_r+0x24>
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	4401      	add	r1, r0
 80078f8:	6011      	str	r1, [r2, #0]
 80078fa:	6053      	str	r3, [r2, #4]
 80078fc:	e7d8      	b.n	80078b0 <_free_r+0x24>
 80078fe:	d902      	bls.n	8007906 <_free_r+0x7a>
 8007900:	230c      	movs	r3, #12
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	e7d4      	b.n	80078b0 <_free_r+0x24>
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1821      	adds	r1, r4, r0
 800790a:	428b      	cmp	r3, r1
 800790c:	bf01      	itttt	eq
 800790e:	6819      	ldreq	r1, [r3, #0]
 8007910:	685b      	ldreq	r3, [r3, #4]
 8007912:	1809      	addeq	r1, r1, r0
 8007914:	6021      	streq	r1, [r4, #0]
 8007916:	6063      	str	r3, [r4, #4]
 8007918:	6054      	str	r4, [r2, #4]
 800791a:	e7c9      	b.n	80078b0 <_free_r+0x24>
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	bf00      	nop
 8007920:	20000234 	.word	0x20000234

08007924 <_malloc_r>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	1ccd      	adds	r5, r1, #3
 8007928:	f025 0503 	bic.w	r5, r5, #3
 800792c:	3508      	adds	r5, #8
 800792e:	2d0c      	cmp	r5, #12
 8007930:	bf38      	it	cc
 8007932:	250c      	movcc	r5, #12
 8007934:	2d00      	cmp	r5, #0
 8007936:	4606      	mov	r6, r0
 8007938:	db01      	blt.n	800793e <_malloc_r+0x1a>
 800793a:	42a9      	cmp	r1, r5
 800793c:	d903      	bls.n	8007946 <_malloc_r+0x22>
 800793e:	230c      	movs	r3, #12
 8007940:	6033      	str	r3, [r6, #0]
 8007942:	2000      	movs	r0, #0
 8007944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007946:	f000 fa0f 	bl	8007d68 <__malloc_lock>
 800794a:	4921      	ldr	r1, [pc, #132]	; (80079d0 <_malloc_r+0xac>)
 800794c:	680a      	ldr	r2, [r1, #0]
 800794e:	4614      	mov	r4, r2
 8007950:	b99c      	cbnz	r4, 800797a <_malloc_r+0x56>
 8007952:	4f20      	ldr	r7, [pc, #128]	; (80079d4 <_malloc_r+0xb0>)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	b923      	cbnz	r3, 8007962 <_malloc_r+0x3e>
 8007958:	4621      	mov	r1, r4
 800795a:	4630      	mov	r0, r6
 800795c:	f000 f998 	bl	8007c90 <_sbrk_r>
 8007960:	6038      	str	r0, [r7, #0]
 8007962:	4629      	mov	r1, r5
 8007964:	4630      	mov	r0, r6
 8007966:	f000 f993 	bl	8007c90 <_sbrk_r>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	d123      	bne.n	80079b6 <_malloc_r+0x92>
 800796e:	230c      	movs	r3, #12
 8007970:	4630      	mov	r0, r6
 8007972:	6033      	str	r3, [r6, #0]
 8007974:	f000 f9fe 	bl	8007d74 <__malloc_unlock>
 8007978:	e7e3      	b.n	8007942 <_malloc_r+0x1e>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	1b5b      	subs	r3, r3, r5
 800797e:	d417      	bmi.n	80079b0 <_malloc_r+0x8c>
 8007980:	2b0b      	cmp	r3, #11
 8007982:	d903      	bls.n	800798c <_malloc_r+0x68>
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	441c      	add	r4, r3
 8007988:	6025      	str	r5, [r4, #0]
 800798a:	e004      	b.n	8007996 <_malloc_r+0x72>
 800798c:	6863      	ldr	r3, [r4, #4]
 800798e:	42a2      	cmp	r2, r4
 8007990:	bf0c      	ite	eq
 8007992:	600b      	streq	r3, [r1, #0]
 8007994:	6053      	strne	r3, [r2, #4]
 8007996:	4630      	mov	r0, r6
 8007998:	f000 f9ec 	bl	8007d74 <__malloc_unlock>
 800799c:	f104 000b 	add.w	r0, r4, #11
 80079a0:	1d23      	adds	r3, r4, #4
 80079a2:	f020 0007 	bic.w	r0, r0, #7
 80079a6:	1ac2      	subs	r2, r0, r3
 80079a8:	d0cc      	beq.n	8007944 <_malloc_r+0x20>
 80079aa:	1a1b      	subs	r3, r3, r0
 80079ac:	50a3      	str	r3, [r4, r2]
 80079ae:	e7c9      	b.n	8007944 <_malloc_r+0x20>
 80079b0:	4622      	mov	r2, r4
 80079b2:	6864      	ldr	r4, [r4, #4]
 80079b4:	e7cc      	b.n	8007950 <_malloc_r+0x2c>
 80079b6:	1cc4      	adds	r4, r0, #3
 80079b8:	f024 0403 	bic.w	r4, r4, #3
 80079bc:	42a0      	cmp	r0, r4
 80079be:	d0e3      	beq.n	8007988 <_malloc_r+0x64>
 80079c0:	1a21      	subs	r1, r4, r0
 80079c2:	4630      	mov	r0, r6
 80079c4:	f000 f964 	bl	8007c90 <_sbrk_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	d1dd      	bne.n	8007988 <_malloc_r+0x64>
 80079cc:	e7cf      	b.n	800796e <_malloc_r+0x4a>
 80079ce:	bf00      	nop
 80079d0:	20000234 	.word	0x20000234
 80079d4:	20000238 	.word	0x20000238

080079d8 <__ssputs_r>:
 80079d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	688e      	ldr	r6, [r1, #8]
 80079de:	4682      	mov	sl, r0
 80079e0:	429e      	cmp	r6, r3
 80079e2:	460c      	mov	r4, r1
 80079e4:	4690      	mov	r8, r2
 80079e6:	461f      	mov	r7, r3
 80079e8:	d838      	bhi.n	8007a5c <__ssputs_r+0x84>
 80079ea:	898a      	ldrh	r2, [r1, #12]
 80079ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079f0:	d032      	beq.n	8007a58 <__ssputs_r+0x80>
 80079f2:	6825      	ldr	r5, [r4, #0]
 80079f4:	6909      	ldr	r1, [r1, #16]
 80079f6:	3301      	adds	r3, #1
 80079f8:	eba5 0901 	sub.w	r9, r5, r1
 80079fc:	6965      	ldr	r5, [r4, #20]
 80079fe:	444b      	add	r3, r9
 8007a00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a08:	106d      	asrs	r5, r5, #1
 8007a0a:	429d      	cmp	r5, r3
 8007a0c:	bf38      	it	cc
 8007a0e:	461d      	movcc	r5, r3
 8007a10:	0553      	lsls	r3, r2, #21
 8007a12:	d531      	bpl.n	8007a78 <__ssputs_r+0xa0>
 8007a14:	4629      	mov	r1, r5
 8007a16:	f7ff ff85 	bl	8007924 <_malloc_r>
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	b950      	cbnz	r0, 8007a34 <__ssputs_r+0x5c>
 8007a1e:	230c      	movs	r3, #12
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295
 8007a24:	f8ca 3000 	str.w	r3, [sl]
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a34:	464a      	mov	r2, r9
 8007a36:	6921      	ldr	r1, [r4, #16]
 8007a38:	f7ff fb8a 	bl	8007150 <memcpy>
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a46:	81a3      	strh	r3, [r4, #12]
 8007a48:	6126      	str	r6, [r4, #16]
 8007a4a:	444e      	add	r6, r9
 8007a4c:	6026      	str	r6, [r4, #0]
 8007a4e:	463e      	mov	r6, r7
 8007a50:	6165      	str	r5, [r4, #20]
 8007a52:	eba5 0509 	sub.w	r5, r5, r9
 8007a56:	60a5      	str	r5, [r4, #8]
 8007a58:	42be      	cmp	r6, r7
 8007a5a:	d900      	bls.n	8007a5e <__ssputs_r+0x86>
 8007a5c:	463e      	mov	r6, r7
 8007a5e:	4632      	mov	r2, r6
 8007a60:	4641      	mov	r1, r8
 8007a62:	6820      	ldr	r0, [r4, #0]
 8007a64:	f000 f966 	bl	8007d34 <memmove>
 8007a68:	68a3      	ldr	r3, [r4, #8]
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	1b9b      	subs	r3, r3, r6
 8007a6e:	4432      	add	r2, r6
 8007a70:	2000      	movs	r0, #0
 8007a72:	60a3      	str	r3, [r4, #8]
 8007a74:	6022      	str	r2, [r4, #0]
 8007a76:	e7db      	b.n	8007a30 <__ssputs_r+0x58>
 8007a78:	462a      	mov	r2, r5
 8007a7a:	f000 f981 	bl	8007d80 <_realloc_r>
 8007a7e:	4606      	mov	r6, r0
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d1e1      	bne.n	8007a48 <__ssputs_r+0x70>
 8007a84:	4650      	mov	r0, sl
 8007a86:	6921      	ldr	r1, [r4, #16]
 8007a88:	f7ff ff00 	bl	800788c <_free_r>
 8007a8c:	e7c7      	b.n	8007a1e <__ssputs_r+0x46>
	...

08007a90 <_svfiprintf_r>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	4698      	mov	r8, r3
 8007a96:	898b      	ldrh	r3, [r1, #12]
 8007a98:	4607      	mov	r7, r0
 8007a9a:	061b      	lsls	r3, r3, #24
 8007a9c:	460d      	mov	r5, r1
 8007a9e:	4614      	mov	r4, r2
 8007aa0:	b09d      	sub	sp, #116	; 0x74
 8007aa2:	d50e      	bpl.n	8007ac2 <_svfiprintf_r+0x32>
 8007aa4:	690b      	ldr	r3, [r1, #16]
 8007aa6:	b963      	cbnz	r3, 8007ac2 <_svfiprintf_r+0x32>
 8007aa8:	2140      	movs	r1, #64	; 0x40
 8007aaa:	f7ff ff3b 	bl	8007924 <_malloc_r>
 8007aae:	6028      	str	r0, [r5, #0]
 8007ab0:	6128      	str	r0, [r5, #16]
 8007ab2:	b920      	cbnz	r0, 8007abe <_svfiprintf_r+0x2e>
 8007ab4:	230c      	movs	r3, #12
 8007ab6:	603b      	str	r3, [r7, #0]
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	e0d1      	b.n	8007c62 <_svfiprintf_r+0x1d2>
 8007abe:	2340      	movs	r3, #64	; 0x40
 8007ac0:	616b      	str	r3, [r5, #20]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac6:	2320      	movs	r3, #32
 8007ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007acc:	2330      	movs	r3, #48	; 0x30
 8007ace:	f04f 0901 	mov.w	r9, #1
 8007ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ad6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c7c <_svfiprintf_r+0x1ec>
 8007ada:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ade:	4623      	mov	r3, r4
 8007ae0:	469a      	mov	sl, r3
 8007ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ae6:	b10a      	cbz	r2, 8007aec <_svfiprintf_r+0x5c>
 8007ae8:	2a25      	cmp	r2, #37	; 0x25
 8007aea:	d1f9      	bne.n	8007ae0 <_svfiprintf_r+0x50>
 8007aec:	ebba 0b04 	subs.w	fp, sl, r4
 8007af0:	d00b      	beq.n	8007b0a <_svfiprintf_r+0x7a>
 8007af2:	465b      	mov	r3, fp
 8007af4:	4622      	mov	r2, r4
 8007af6:	4629      	mov	r1, r5
 8007af8:	4638      	mov	r0, r7
 8007afa:	f7ff ff6d 	bl	80079d8 <__ssputs_r>
 8007afe:	3001      	adds	r0, #1
 8007b00:	f000 80aa 	beq.w	8007c58 <_svfiprintf_r+0x1c8>
 8007b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b06:	445a      	add	r2, fp
 8007b08:	9209      	str	r2, [sp, #36]	; 0x24
 8007b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 80a2 	beq.w	8007c58 <_svfiprintf_r+0x1c8>
 8007b14:	2300      	movs	r3, #0
 8007b16:	f04f 32ff 	mov.w	r2, #4294967295
 8007b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b1e:	f10a 0a01 	add.w	sl, sl, #1
 8007b22:	9304      	str	r3, [sp, #16]
 8007b24:	9307      	str	r3, [sp, #28]
 8007b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b2c:	4654      	mov	r4, sl
 8007b2e:	2205      	movs	r2, #5
 8007b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b34:	4851      	ldr	r0, [pc, #324]	; (8007c7c <_svfiprintf_r+0x1ec>)
 8007b36:	f7ff fafd 	bl	8007134 <memchr>
 8007b3a:	9a04      	ldr	r2, [sp, #16]
 8007b3c:	b9d8      	cbnz	r0, 8007b76 <_svfiprintf_r+0xe6>
 8007b3e:	06d0      	lsls	r0, r2, #27
 8007b40:	bf44      	itt	mi
 8007b42:	2320      	movmi	r3, #32
 8007b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b48:	0711      	lsls	r1, r2, #28
 8007b4a:	bf44      	itt	mi
 8007b4c:	232b      	movmi	r3, #43	; 0x2b
 8007b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b52:	f89a 3000 	ldrb.w	r3, [sl]
 8007b56:	2b2a      	cmp	r3, #42	; 0x2a
 8007b58:	d015      	beq.n	8007b86 <_svfiprintf_r+0xf6>
 8007b5a:	4654      	mov	r4, sl
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f04f 0c0a 	mov.w	ip, #10
 8007b62:	9a07      	ldr	r2, [sp, #28]
 8007b64:	4621      	mov	r1, r4
 8007b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b6a:	3b30      	subs	r3, #48	; 0x30
 8007b6c:	2b09      	cmp	r3, #9
 8007b6e:	d94e      	bls.n	8007c0e <_svfiprintf_r+0x17e>
 8007b70:	b1b0      	cbz	r0, 8007ba0 <_svfiprintf_r+0x110>
 8007b72:	9207      	str	r2, [sp, #28]
 8007b74:	e014      	b.n	8007ba0 <_svfiprintf_r+0x110>
 8007b76:	eba0 0308 	sub.w	r3, r0, r8
 8007b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	46a2      	mov	sl, r4
 8007b82:	9304      	str	r3, [sp, #16]
 8007b84:	e7d2      	b.n	8007b2c <_svfiprintf_r+0x9c>
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	1d19      	adds	r1, r3, #4
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	9103      	str	r1, [sp, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bfbb      	ittet	lt
 8007b92:	425b      	neglt	r3, r3
 8007b94:	f042 0202 	orrlt.w	r2, r2, #2
 8007b98:	9307      	strge	r3, [sp, #28]
 8007b9a:	9307      	strlt	r3, [sp, #28]
 8007b9c:	bfb8      	it	lt
 8007b9e:	9204      	strlt	r2, [sp, #16]
 8007ba0:	7823      	ldrb	r3, [r4, #0]
 8007ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ba4:	d10c      	bne.n	8007bc0 <_svfiprintf_r+0x130>
 8007ba6:	7863      	ldrb	r3, [r4, #1]
 8007ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8007baa:	d135      	bne.n	8007c18 <_svfiprintf_r+0x188>
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	3402      	adds	r4, #2
 8007bb0:	1d1a      	adds	r2, r3, #4
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	9203      	str	r2, [sp, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	bfb8      	it	lt
 8007bba:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bbe:	9305      	str	r3, [sp, #20]
 8007bc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c8c <_svfiprintf_r+0x1fc>
 8007bc4:	2203      	movs	r2, #3
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	7821      	ldrb	r1, [r4, #0]
 8007bca:	f7ff fab3 	bl	8007134 <memchr>
 8007bce:	b140      	cbz	r0, 8007be2 <_svfiprintf_r+0x152>
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	eba0 000a 	sub.w	r0, r0, sl
 8007bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8007bda:	9b04      	ldr	r3, [sp, #16]
 8007bdc:	3401      	adds	r4, #1
 8007bde:	4303      	orrs	r3, r0
 8007be0:	9304      	str	r3, [sp, #16]
 8007be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be6:	2206      	movs	r2, #6
 8007be8:	4825      	ldr	r0, [pc, #148]	; (8007c80 <_svfiprintf_r+0x1f0>)
 8007bea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bee:	f7ff faa1 	bl	8007134 <memchr>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d038      	beq.n	8007c68 <_svfiprintf_r+0x1d8>
 8007bf6:	4b23      	ldr	r3, [pc, #140]	; (8007c84 <_svfiprintf_r+0x1f4>)
 8007bf8:	bb1b      	cbnz	r3, 8007c42 <_svfiprintf_r+0x1b2>
 8007bfa:	9b03      	ldr	r3, [sp, #12]
 8007bfc:	3307      	adds	r3, #7
 8007bfe:	f023 0307 	bic.w	r3, r3, #7
 8007c02:	3308      	adds	r3, #8
 8007c04:	9303      	str	r3, [sp, #12]
 8007c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c08:	4433      	add	r3, r6
 8007c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0c:	e767      	b.n	8007ade <_svfiprintf_r+0x4e>
 8007c0e:	460c      	mov	r4, r1
 8007c10:	2001      	movs	r0, #1
 8007c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c16:	e7a5      	b.n	8007b64 <_svfiprintf_r+0xd4>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f04f 0c0a 	mov.w	ip, #10
 8007c1e:	4619      	mov	r1, r3
 8007c20:	3401      	adds	r4, #1
 8007c22:	9305      	str	r3, [sp, #20]
 8007c24:	4620      	mov	r0, r4
 8007c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c2a:	3a30      	subs	r2, #48	; 0x30
 8007c2c:	2a09      	cmp	r2, #9
 8007c2e:	d903      	bls.n	8007c38 <_svfiprintf_r+0x1a8>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0c5      	beq.n	8007bc0 <_svfiprintf_r+0x130>
 8007c34:	9105      	str	r1, [sp, #20]
 8007c36:	e7c3      	b.n	8007bc0 <_svfiprintf_r+0x130>
 8007c38:	4604      	mov	r4, r0
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c40:	e7f0      	b.n	8007c24 <_svfiprintf_r+0x194>
 8007c42:	ab03      	add	r3, sp, #12
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	462a      	mov	r2, r5
 8007c48:	4638      	mov	r0, r7
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <_svfiprintf_r+0x1f8>)
 8007c4c:	a904      	add	r1, sp, #16
 8007c4e:	f7fd ffeb 	bl	8005c28 <_printf_float>
 8007c52:	1c42      	adds	r2, r0, #1
 8007c54:	4606      	mov	r6, r0
 8007c56:	d1d6      	bne.n	8007c06 <_svfiprintf_r+0x176>
 8007c58:	89ab      	ldrh	r3, [r5, #12]
 8007c5a:	065b      	lsls	r3, r3, #25
 8007c5c:	f53f af2c 	bmi.w	8007ab8 <_svfiprintf_r+0x28>
 8007c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c62:	b01d      	add	sp, #116	; 0x74
 8007c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c68:	ab03      	add	r3, sp, #12
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	4638      	mov	r0, r7
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <_svfiprintf_r+0x1f8>)
 8007c72:	a904      	add	r1, sp, #16
 8007c74:	f7fe fa74 	bl	8006160 <_printf_i>
 8007c78:	e7eb      	b.n	8007c52 <_svfiprintf_r+0x1c2>
 8007c7a:	bf00      	nop
 8007c7c:	08008cb4 	.word	0x08008cb4
 8007c80:	08008cbe 	.word	0x08008cbe
 8007c84:	08005c29 	.word	0x08005c29
 8007c88:	080079d9 	.word	0x080079d9
 8007c8c:	08008cba 	.word	0x08008cba

08007c90 <_sbrk_r>:
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	2300      	movs	r3, #0
 8007c94:	4d05      	ldr	r5, [pc, #20]	; (8007cac <_sbrk_r+0x1c>)
 8007c96:	4604      	mov	r4, r0
 8007c98:	4608      	mov	r0, r1
 8007c9a:	602b      	str	r3, [r5, #0]
 8007c9c:	f7f9 ffdc 	bl	8001c58 <_sbrk>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d102      	bne.n	8007caa <_sbrk_r+0x1a>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	b103      	cbz	r3, 8007caa <_sbrk_r+0x1a>
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	200003ac 	.word	0x200003ac

08007cb0 <__assert_func>:
 8007cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cb2:	4614      	mov	r4, r2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <__assert_func+0x2c>)
 8007cb8:	4605      	mov	r5, r0
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68d8      	ldr	r0, [r3, #12]
 8007cbe:	b14c      	cbz	r4, 8007cd4 <__assert_func+0x24>
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <__assert_func+0x30>)
 8007cc2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cc6:	9100      	str	r1, [sp, #0]
 8007cc8:	462b      	mov	r3, r5
 8007cca:	4906      	ldr	r1, [pc, #24]	; (8007ce4 <__assert_func+0x34>)
 8007ccc:	f000 f80e 	bl	8007cec <fiprintf>
 8007cd0:	f000 faa2 	bl	8008218 <abort>
 8007cd4:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <__assert_func+0x38>)
 8007cd6:	461c      	mov	r4, r3
 8007cd8:	e7f3      	b.n	8007cc2 <__assert_func+0x12>
 8007cda:	bf00      	nop
 8007cdc:	20000034 	.word	0x20000034
 8007ce0:	08008cc5 	.word	0x08008cc5
 8007ce4:	08008cd2 	.word	0x08008cd2
 8007ce8:	08008d00 	.word	0x08008d00

08007cec <fiprintf>:
 8007cec:	b40e      	push	{r1, r2, r3}
 8007cee:	b503      	push	{r0, r1, lr}
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	ab03      	add	r3, sp, #12
 8007cf4:	4805      	ldr	r0, [pc, #20]	; (8007d0c <fiprintf+0x20>)
 8007cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cfa:	6800      	ldr	r0, [r0, #0]
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	f000 f88d 	bl	8007e1c <_vfiprintf_r>
 8007d02:	b002      	add	sp, #8
 8007d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d08:	b003      	add	sp, #12
 8007d0a:	4770      	bx	lr
 8007d0c:	20000034 	.word	0x20000034

08007d10 <__ascii_mbtowc>:
 8007d10:	b082      	sub	sp, #8
 8007d12:	b901      	cbnz	r1, 8007d16 <__ascii_mbtowc+0x6>
 8007d14:	a901      	add	r1, sp, #4
 8007d16:	b142      	cbz	r2, 8007d2a <__ascii_mbtowc+0x1a>
 8007d18:	b14b      	cbz	r3, 8007d2e <__ascii_mbtowc+0x1e>
 8007d1a:	7813      	ldrb	r3, [r2, #0]
 8007d1c:	600b      	str	r3, [r1, #0]
 8007d1e:	7812      	ldrb	r2, [r2, #0]
 8007d20:	1e10      	subs	r0, r2, #0
 8007d22:	bf18      	it	ne
 8007d24:	2001      	movne	r0, #1
 8007d26:	b002      	add	sp, #8
 8007d28:	4770      	bx	lr
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	e7fb      	b.n	8007d26 <__ascii_mbtowc+0x16>
 8007d2e:	f06f 0001 	mvn.w	r0, #1
 8007d32:	e7f8      	b.n	8007d26 <__ascii_mbtowc+0x16>

08007d34 <memmove>:
 8007d34:	4288      	cmp	r0, r1
 8007d36:	b510      	push	{r4, lr}
 8007d38:	eb01 0402 	add.w	r4, r1, r2
 8007d3c:	d902      	bls.n	8007d44 <memmove+0x10>
 8007d3e:	4284      	cmp	r4, r0
 8007d40:	4623      	mov	r3, r4
 8007d42:	d807      	bhi.n	8007d54 <memmove+0x20>
 8007d44:	1e43      	subs	r3, r0, #1
 8007d46:	42a1      	cmp	r1, r4
 8007d48:	d008      	beq.n	8007d5c <memmove+0x28>
 8007d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d52:	e7f8      	b.n	8007d46 <memmove+0x12>
 8007d54:	4601      	mov	r1, r0
 8007d56:	4402      	add	r2, r0
 8007d58:	428a      	cmp	r2, r1
 8007d5a:	d100      	bne.n	8007d5e <memmove+0x2a>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d66:	e7f7      	b.n	8007d58 <memmove+0x24>

08007d68 <__malloc_lock>:
 8007d68:	4801      	ldr	r0, [pc, #4]	; (8007d70 <__malloc_lock+0x8>)
 8007d6a:	f000 bc15 	b.w	8008598 <__retarget_lock_acquire_recursive>
 8007d6e:	bf00      	nop
 8007d70:	200003b4 	.word	0x200003b4

08007d74 <__malloc_unlock>:
 8007d74:	4801      	ldr	r0, [pc, #4]	; (8007d7c <__malloc_unlock+0x8>)
 8007d76:	f000 bc10 	b.w	800859a <__retarget_lock_release_recursive>
 8007d7a:	bf00      	nop
 8007d7c:	200003b4 	.word	0x200003b4

08007d80 <_realloc_r>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	4607      	mov	r7, r0
 8007d84:	4614      	mov	r4, r2
 8007d86:	460e      	mov	r6, r1
 8007d88:	b921      	cbnz	r1, 8007d94 <_realloc_r+0x14>
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d90:	f7ff bdc8 	b.w	8007924 <_malloc_r>
 8007d94:	b922      	cbnz	r2, 8007da0 <_realloc_r+0x20>
 8007d96:	f7ff fd79 	bl	800788c <_free_r>
 8007d9a:	4625      	mov	r5, r4
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da0:	f000 fc60 	bl	8008664 <_malloc_usable_size_r>
 8007da4:	42a0      	cmp	r0, r4
 8007da6:	d20f      	bcs.n	8007dc8 <_realloc_r+0x48>
 8007da8:	4621      	mov	r1, r4
 8007daa:	4638      	mov	r0, r7
 8007dac:	f7ff fdba 	bl	8007924 <_malloc_r>
 8007db0:	4605      	mov	r5, r0
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d0f2      	beq.n	8007d9c <_realloc_r+0x1c>
 8007db6:	4631      	mov	r1, r6
 8007db8:	4622      	mov	r2, r4
 8007dba:	f7ff f9c9 	bl	8007150 <memcpy>
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	f7ff fd63 	bl	800788c <_free_r>
 8007dc6:	e7e9      	b.n	8007d9c <_realloc_r+0x1c>
 8007dc8:	4635      	mov	r5, r6
 8007dca:	e7e7      	b.n	8007d9c <_realloc_r+0x1c>

08007dcc <__sfputc_r>:
 8007dcc:	6893      	ldr	r3, [r2, #8]
 8007dce:	b410      	push	{r4}
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	6093      	str	r3, [r2, #8]
 8007dd6:	da07      	bge.n	8007de8 <__sfputc_r+0x1c>
 8007dd8:	6994      	ldr	r4, [r2, #24]
 8007dda:	42a3      	cmp	r3, r4
 8007ddc:	db01      	blt.n	8007de2 <__sfputc_r+0x16>
 8007dde:	290a      	cmp	r1, #10
 8007de0:	d102      	bne.n	8007de8 <__sfputc_r+0x1c>
 8007de2:	bc10      	pop	{r4}
 8007de4:	f000 b94a 	b.w	800807c <__swbuf_r>
 8007de8:	6813      	ldr	r3, [r2, #0]
 8007dea:	1c58      	adds	r0, r3, #1
 8007dec:	6010      	str	r0, [r2, #0]
 8007dee:	7019      	strb	r1, [r3, #0]
 8007df0:	4608      	mov	r0, r1
 8007df2:	bc10      	pop	{r4}
 8007df4:	4770      	bx	lr

08007df6 <__sfputs_r>:
 8007df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df8:	4606      	mov	r6, r0
 8007dfa:	460f      	mov	r7, r1
 8007dfc:	4614      	mov	r4, r2
 8007dfe:	18d5      	adds	r5, r2, r3
 8007e00:	42ac      	cmp	r4, r5
 8007e02:	d101      	bne.n	8007e08 <__sfputs_r+0x12>
 8007e04:	2000      	movs	r0, #0
 8007e06:	e007      	b.n	8007e18 <__sfputs_r+0x22>
 8007e08:	463a      	mov	r2, r7
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e10:	f7ff ffdc 	bl	8007dcc <__sfputc_r>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d1f3      	bne.n	8007e00 <__sfputs_r+0xa>
 8007e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e1c <_vfiprintf_r>:
 8007e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	460d      	mov	r5, r1
 8007e22:	4614      	mov	r4, r2
 8007e24:	4698      	mov	r8, r3
 8007e26:	4606      	mov	r6, r0
 8007e28:	b09d      	sub	sp, #116	; 0x74
 8007e2a:	b118      	cbz	r0, 8007e34 <_vfiprintf_r+0x18>
 8007e2c:	6983      	ldr	r3, [r0, #24]
 8007e2e:	b90b      	cbnz	r3, 8007e34 <_vfiprintf_r+0x18>
 8007e30:	f000 fb14 	bl	800845c <__sinit>
 8007e34:	4b89      	ldr	r3, [pc, #548]	; (800805c <_vfiprintf_r+0x240>)
 8007e36:	429d      	cmp	r5, r3
 8007e38:	d11b      	bne.n	8007e72 <_vfiprintf_r+0x56>
 8007e3a:	6875      	ldr	r5, [r6, #4]
 8007e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e3e:	07d9      	lsls	r1, r3, #31
 8007e40:	d405      	bmi.n	8007e4e <_vfiprintf_r+0x32>
 8007e42:	89ab      	ldrh	r3, [r5, #12]
 8007e44:	059a      	lsls	r2, r3, #22
 8007e46:	d402      	bmi.n	8007e4e <_vfiprintf_r+0x32>
 8007e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e4a:	f000 fba5 	bl	8008598 <__retarget_lock_acquire_recursive>
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	071b      	lsls	r3, r3, #28
 8007e52:	d501      	bpl.n	8007e58 <_vfiprintf_r+0x3c>
 8007e54:	692b      	ldr	r3, [r5, #16]
 8007e56:	b9eb      	cbnz	r3, 8007e94 <_vfiprintf_r+0x78>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f000 f96e 	bl	800813c <__swsetup_r>
 8007e60:	b1c0      	cbz	r0, 8007e94 <_vfiprintf_r+0x78>
 8007e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e64:	07dc      	lsls	r4, r3, #31
 8007e66:	d50e      	bpl.n	8007e86 <_vfiprintf_r+0x6a>
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	b01d      	add	sp, #116	; 0x74
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e72:	4b7b      	ldr	r3, [pc, #492]	; (8008060 <_vfiprintf_r+0x244>)
 8007e74:	429d      	cmp	r5, r3
 8007e76:	d101      	bne.n	8007e7c <_vfiprintf_r+0x60>
 8007e78:	68b5      	ldr	r5, [r6, #8]
 8007e7a:	e7df      	b.n	8007e3c <_vfiprintf_r+0x20>
 8007e7c:	4b79      	ldr	r3, [pc, #484]	; (8008064 <_vfiprintf_r+0x248>)
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	bf08      	it	eq
 8007e82:	68f5      	ldreq	r5, [r6, #12]
 8007e84:	e7da      	b.n	8007e3c <_vfiprintf_r+0x20>
 8007e86:	89ab      	ldrh	r3, [r5, #12]
 8007e88:	0598      	lsls	r0, r3, #22
 8007e8a:	d4ed      	bmi.n	8007e68 <_vfiprintf_r+0x4c>
 8007e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e8e:	f000 fb84 	bl	800859a <__retarget_lock_release_recursive>
 8007e92:	e7e9      	b.n	8007e68 <_vfiprintf_r+0x4c>
 8007e94:	2300      	movs	r3, #0
 8007e96:	9309      	str	r3, [sp, #36]	; 0x24
 8007e98:	2320      	movs	r3, #32
 8007e9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e9e:	2330      	movs	r3, #48	; 0x30
 8007ea0:	f04f 0901 	mov.w	r9, #1
 8007ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ea8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008068 <_vfiprintf_r+0x24c>
 8007eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb0:	4623      	mov	r3, r4
 8007eb2:	469a      	mov	sl, r3
 8007eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eb8:	b10a      	cbz	r2, 8007ebe <_vfiprintf_r+0xa2>
 8007eba:	2a25      	cmp	r2, #37	; 0x25
 8007ebc:	d1f9      	bne.n	8007eb2 <_vfiprintf_r+0x96>
 8007ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8007ec2:	d00b      	beq.n	8007edc <_vfiprintf_r+0xc0>
 8007ec4:	465b      	mov	r3, fp
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7ff ff93 	bl	8007df6 <__sfputs_r>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f000 80aa 	beq.w	800802a <_vfiprintf_r+0x20e>
 8007ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ed8:	445a      	add	r2, fp
 8007eda:	9209      	str	r2, [sp, #36]	; 0x24
 8007edc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 80a2 	beq.w	800802a <_vfiprintf_r+0x20e>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef0:	f10a 0a01 	add.w	sl, sl, #1
 8007ef4:	9304      	str	r3, [sp, #16]
 8007ef6:	9307      	str	r3, [sp, #28]
 8007ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007efc:	931a      	str	r3, [sp, #104]	; 0x68
 8007efe:	4654      	mov	r4, sl
 8007f00:	2205      	movs	r2, #5
 8007f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f06:	4858      	ldr	r0, [pc, #352]	; (8008068 <_vfiprintf_r+0x24c>)
 8007f08:	f7ff f914 	bl	8007134 <memchr>
 8007f0c:	9a04      	ldr	r2, [sp, #16]
 8007f0e:	b9d8      	cbnz	r0, 8007f48 <_vfiprintf_r+0x12c>
 8007f10:	06d1      	lsls	r1, r2, #27
 8007f12:	bf44      	itt	mi
 8007f14:	2320      	movmi	r3, #32
 8007f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f1a:	0713      	lsls	r3, r2, #28
 8007f1c:	bf44      	itt	mi
 8007f1e:	232b      	movmi	r3, #43	; 0x2b
 8007f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f24:	f89a 3000 	ldrb.w	r3, [sl]
 8007f28:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2a:	d015      	beq.n	8007f58 <_vfiprintf_r+0x13c>
 8007f2c:	4654      	mov	r4, sl
 8007f2e:	2000      	movs	r0, #0
 8007f30:	f04f 0c0a 	mov.w	ip, #10
 8007f34:	9a07      	ldr	r2, [sp, #28]
 8007f36:	4621      	mov	r1, r4
 8007f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f3c:	3b30      	subs	r3, #48	; 0x30
 8007f3e:	2b09      	cmp	r3, #9
 8007f40:	d94e      	bls.n	8007fe0 <_vfiprintf_r+0x1c4>
 8007f42:	b1b0      	cbz	r0, 8007f72 <_vfiprintf_r+0x156>
 8007f44:	9207      	str	r2, [sp, #28]
 8007f46:	e014      	b.n	8007f72 <_vfiprintf_r+0x156>
 8007f48:	eba0 0308 	sub.w	r3, r0, r8
 8007f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	46a2      	mov	sl, r4
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	e7d2      	b.n	8007efe <_vfiprintf_r+0xe2>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	1d19      	adds	r1, r3, #4
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	9103      	str	r1, [sp, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	bfbb      	ittet	lt
 8007f64:	425b      	neglt	r3, r3
 8007f66:	f042 0202 	orrlt.w	r2, r2, #2
 8007f6a:	9307      	strge	r3, [sp, #28]
 8007f6c:	9307      	strlt	r3, [sp, #28]
 8007f6e:	bfb8      	it	lt
 8007f70:	9204      	strlt	r2, [sp, #16]
 8007f72:	7823      	ldrb	r3, [r4, #0]
 8007f74:	2b2e      	cmp	r3, #46	; 0x2e
 8007f76:	d10c      	bne.n	8007f92 <_vfiprintf_r+0x176>
 8007f78:	7863      	ldrb	r3, [r4, #1]
 8007f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7c:	d135      	bne.n	8007fea <_vfiprintf_r+0x1ce>
 8007f7e:	9b03      	ldr	r3, [sp, #12]
 8007f80:	3402      	adds	r4, #2
 8007f82:	1d1a      	adds	r2, r3, #4
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	9203      	str	r2, [sp, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bfb8      	it	lt
 8007f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008078 <_vfiprintf_r+0x25c>
 8007f96:	2203      	movs	r2, #3
 8007f98:	4650      	mov	r0, sl
 8007f9a:	7821      	ldrb	r1, [r4, #0]
 8007f9c:	f7ff f8ca 	bl	8007134 <memchr>
 8007fa0:	b140      	cbz	r0, 8007fb4 <_vfiprintf_r+0x198>
 8007fa2:	2340      	movs	r3, #64	; 0x40
 8007fa4:	eba0 000a 	sub.w	r0, r0, sl
 8007fa8:	fa03 f000 	lsl.w	r0, r3, r0
 8007fac:	9b04      	ldr	r3, [sp, #16]
 8007fae:	3401      	adds	r4, #1
 8007fb0:	4303      	orrs	r3, r0
 8007fb2:	9304      	str	r3, [sp, #16]
 8007fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb8:	2206      	movs	r2, #6
 8007fba:	482c      	ldr	r0, [pc, #176]	; (800806c <_vfiprintf_r+0x250>)
 8007fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc0:	f7ff f8b8 	bl	8007134 <memchr>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d03f      	beq.n	8008048 <_vfiprintf_r+0x22c>
 8007fc8:	4b29      	ldr	r3, [pc, #164]	; (8008070 <_vfiprintf_r+0x254>)
 8007fca:	bb1b      	cbnz	r3, 8008014 <_vfiprintf_r+0x1f8>
 8007fcc:	9b03      	ldr	r3, [sp, #12]
 8007fce:	3307      	adds	r3, #7
 8007fd0:	f023 0307 	bic.w	r3, r3, #7
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fda:	443b      	add	r3, r7
 8007fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8007fde:	e767      	b.n	8007eb0 <_vfiprintf_r+0x94>
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fe8:	e7a5      	b.n	8007f36 <_vfiprintf_r+0x11a>
 8007fea:	2300      	movs	r3, #0
 8007fec:	f04f 0c0a 	mov.w	ip, #10
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	3401      	adds	r4, #1
 8007ff4:	9305      	str	r3, [sp, #20]
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ffc:	3a30      	subs	r2, #48	; 0x30
 8007ffe:	2a09      	cmp	r2, #9
 8008000:	d903      	bls.n	800800a <_vfiprintf_r+0x1ee>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0c5      	beq.n	8007f92 <_vfiprintf_r+0x176>
 8008006:	9105      	str	r1, [sp, #20]
 8008008:	e7c3      	b.n	8007f92 <_vfiprintf_r+0x176>
 800800a:	4604      	mov	r4, r0
 800800c:	2301      	movs	r3, #1
 800800e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008012:	e7f0      	b.n	8007ff6 <_vfiprintf_r+0x1da>
 8008014:	ab03      	add	r3, sp, #12
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	462a      	mov	r2, r5
 800801a:	4630      	mov	r0, r6
 800801c:	4b15      	ldr	r3, [pc, #84]	; (8008074 <_vfiprintf_r+0x258>)
 800801e:	a904      	add	r1, sp, #16
 8008020:	f7fd fe02 	bl	8005c28 <_printf_float>
 8008024:	4607      	mov	r7, r0
 8008026:	1c78      	adds	r0, r7, #1
 8008028:	d1d6      	bne.n	8007fd8 <_vfiprintf_r+0x1bc>
 800802a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800802c:	07d9      	lsls	r1, r3, #31
 800802e:	d405      	bmi.n	800803c <_vfiprintf_r+0x220>
 8008030:	89ab      	ldrh	r3, [r5, #12]
 8008032:	059a      	lsls	r2, r3, #22
 8008034:	d402      	bmi.n	800803c <_vfiprintf_r+0x220>
 8008036:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008038:	f000 faaf 	bl	800859a <__retarget_lock_release_recursive>
 800803c:	89ab      	ldrh	r3, [r5, #12]
 800803e:	065b      	lsls	r3, r3, #25
 8008040:	f53f af12 	bmi.w	8007e68 <_vfiprintf_r+0x4c>
 8008044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008046:	e711      	b.n	8007e6c <_vfiprintf_r+0x50>
 8008048:	ab03      	add	r3, sp, #12
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	462a      	mov	r2, r5
 800804e:	4630      	mov	r0, r6
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <_vfiprintf_r+0x258>)
 8008052:	a904      	add	r1, sp, #16
 8008054:	f7fe f884 	bl	8006160 <_printf_i>
 8008058:	e7e4      	b.n	8008024 <_vfiprintf_r+0x208>
 800805a:	bf00      	nop
 800805c:	08008e2c 	.word	0x08008e2c
 8008060:	08008e4c 	.word	0x08008e4c
 8008064:	08008e0c 	.word	0x08008e0c
 8008068:	08008cb4 	.word	0x08008cb4
 800806c:	08008cbe 	.word	0x08008cbe
 8008070:	08005c29 	.word	0x08005c29
 8008074:	08007df7 	.word	0x08007df7
 8008078:	08008cba 	.word	0x08008cba

0800807c <__swbuf_r>:
 800807c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807e:	460e      	mov	r6, r1
 8008080:	4614      	mov	r4, r2
 8008082:	4605      	mov	r5, r0
 8008084:	b118      	cbz	r0, 800808e <__swbuf_r+0x12>
 8008086:	6983      	ldr	r3, [r0, #24]
 8008088:	b90b      	cbnz	r3, 800808e <__swbuf_r+0x12>
 800808a:	f000 f9e7 	bl	800845c <__sinit>
 800808e:	4b21      	ldr	r3, [pc, #132]	; (8008114 <__swbuf_r+0x98>)
 8008090:	429c      	cmp	r4, r3
 8008092:	d12b      	bne.n	80080ec <__swbuf_r+0x70>
 8008094:	686c      	ldr	r4, [r5, #4]
 8008096:	69a3      	ldr	r3, [r4, #24]
 8008098:	60a3      	str	r3, [r4, #8]
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	071a      	lsls	r2, r3, #28
 800809e:	d52f      	bpl.n	8008100 <__swbuf_r+0x84>
 80080a0:	6923      	ldr	r3, [r4, #16]
 80080a2:	b36b      	cbz	r3, 8008100 <__swbuf_r+0x84>
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	6820      	ldr	r0, [r4, #0]
 80080a8:	b2f6      	uxtb	r6, r6
 80080aa:	1ac0      	subs	r0, r0, r3
 80080ac:	6963      	ldr	r3, [r4, #20]
 80080ae:	4637      	mov	r7, r6
 80080b0:	4283      	cmp	r3, r0
 80080b2:	dc04      	bgt.n	80080be <__swbuf_r+0x42>
 80080b4:	4621      	mov	r1, r4
 80080b6:	4628      	mov	r0, r5
 80080b8:	f000 f93c 	bl	8008334 <_fflush_r>
 80080bc:	bb30      	cbnz	r0, 800810c <__swbuf_r+0x90>
 80080be:	68a3      	ldr	r3, [r4, #8]
 80080c0:	3001      	adds	r0, #1
 80080c2:	3b01      	subs	r3, #1
 80080c4:	60a3      	str	r3, [r4, #8]
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	6022      	str	r2, [r4, #0]
 80080cc:	701e      	strb	r6, [r3, #0]
 80080ce:	6963      	ldr	r3, [r4, #20]
 80080d0:	4283      	cmp	r3, r0
 80080d2:	d004      	beq.n	80080de <__swbuf_r+0x62>
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	07db      	lsls	r3, r3, #31
 80080d8:	d506      	bpl.n	80080e8 <__swbuf_r+0x6c>
 80080da:	2e0a      	cmp	r6, #10
 80080dc:	d104      	bne.n	80080e8 <__swbuf_r+0x6c>
 80080de:	4621      	mov	r1, r4
 80080e0:	4628      	mov	r0, r5
 80080e2:	f000 f927 	bl	8008334 <_fflush_r>
 80080e6:	b988      	cbnz	r0, 800810c <__swbuf_r+0x90>
 80080e8:	4638      	mov	r0, r7
 80080ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ec:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <__swbuf_r+0x9c>)
 80080ee:	429c      	cmp	r4, r3
 80080f0:	d101      	bne.n	80080f6 <__swbuf_r+0x7a>
 80080f2:	68ac      	ldr	r4, [r5, #8]
 80080f4:	e7cf      	b.n	8008096 <__swbuf_r+0x1a>
 80080f6:	4b09      	ldr	r3, [pc, #36]	; (800811c <__swbuf_r+0xa0>)
 80080f8:	429c      	cmp	r4, r3
 80080fa:	bf08      	it	eq
 80080fc:	68ec      	ldreq	r4, [r5, #12]
 80080fe:	e7ca      	b.n	8008096 <__swbuf_r+0x1a>
 8008100:	4621      	mov	r1, r4
 8008102:	4628      	mov	r0, r5
 8008104:	f000 f81a 	bl	800813c <__swsetup_r>
 8008108:	2800      	cmp	r0, #0
 800810a:	d0cb      	beq.n	80080a4 <__swbuf_r+0x28>
 800810c:	f04f 37ff 	mov.w	r7, #4294967295
 8008110:	e7ea      	b.n	80080e8 <__swbuf_r+0x6c>
 8008112:	bf00      	nop
 8008114:	08008e2c 	.word	0x08008e2c
 8008118:	08008e4c 	.word	0x08008e4c
 800811c:	08008e0c 	.word	0x08008e0c

08008120 <__ascii_wctomb>:
 8008120:	4603      	mov	r3, r0
 8008122:	4608      	mov	r0, r1
 8008124:	b141      	cbz	r1, 8008138 <__ascii_wctomb+0x18>
 8008126:	2aff      	cmp	r2, #255	; 0xff
 8008128:	d904      	bls.n	8008134 <__ascii_wctomb+0x14>
 800812a:	228a      	movs	r2, #138	; 0x8a
 800812c:	f04f 30ff 	mov.w	r0, #4294967295
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	4770      	bx	lr
 8008134:	2001      	movs	r0, #1
 8008136:	700a      	strb	r2, [r1, #0]
 8008138:	4770      	bx	lr
	...

0800813c <__swsetup_r>:
 800813c:	4b32      	ldr	r3, [pc, #200]	; (8008208 <__swsetup_r+0xcc>)
 800813e:	b570      	push	{r4, r5, r6, lr}
 8008140:	681d      	ldr	r5, [r3, #0]
 8008142:	4606      	mov	r6, r0
 8008144:	460c      	mov	r4, r1
 8008146:	b125      	cbz	r5, 8008152 <__swsetup_r+0x16>
 8008148:	69ab      	ldr	r3, [r5, #24]
 800814a:	b913      	cbnz	r3, 8008152 <__swsetup_r+0x16>
 800814c:	4628      	mov	r0, r5
 800814e:	f000 f985 	bl	800845c <__sinit>
 8008152:	4b2e      	ldr	r3, [pc, #184]	; (800820c <__swsetup_r+0xd0>)
 8008154:	429c      	cmp	r4, r3
 8008156:	d10f      	bne.n	8008178 <__swsetup_r+0x3c>
 8008158:	686c      	ldr	r4, [r5, #4]
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008160:	0719      	lsls	r1, r3, #28
 8008162:	d42c      	bmi.n	80081be <__swsetup_r+0x82>
 8008164:	06dd      	lsls	r5, r3, #27
 8008166:	d411      	bmi.n	800818c <__swsetup_r+0x50>
 8008168:	2309      	movs	r3, #9
 800816a:	6033      	str	r3, [r6, #0]
 800816c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008170:	f04f 30ff 	mov.w	r0, #4294967295
 8008174:	81a3      	strh	r3, [r4, #12]
 8008176:	e03e      	b.n	80081f6 <__swsetup_r+0xba>
 8008178:	4b25      	ldr	r3, [pc, #148]	; (8008210 <__swsetup_r+0xd4>)
 800817a:	429c      	cmp	r4, r3
 800817c:	d101      	bne.n	8008182 <__swsetup_r+0x46>
 800817e:	68ac      	ldr	r4, [r5, #8]
 8008180:	e7eb      	b.n	800815a <__swsetup_r+0x1e>
 8008182:	4b24      	ldr	r3, [pc, #144]	; (8008214 <__swsetup_r+0xd8>)
 8008184:	429c      	cmp	r4, r3
 8008186:	bf08      	it	eq
 8008188:	68ec      	ldreq	r4, [r5, #12]
 800818a:	e7e6      	b.n	800815a <__swsetup_r+0x1e>
 800818c:	0758      	lsls	r0, r3, #29
 800818e:	d512      	bpl.n	80081b6 <__swsetup_r+0x7a>
 8008190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008192:	b141      	cbz	r1, 80081a6 <__swsetup_r+0x6a>
 8008194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008198:	4299      	cmp	r1, r3
 800819a:	d002      	beq.n	80081a2 <__swsetup_r+0x66>
 800819c:	4630      	mov	r0, r6
 800819e:	f7ff fb75 	bl	800788c <_free_r>
 80081a2:	2300      	movs	r3, #0
 80081a4:	6363      	str	r3, [r4, #52]	; 0x34
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	2300      	movs	r3, #0
 80081b0:	6063      	str	r3, [r4, #4]
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	f043 0308 	orr.w	r3, r3, #8
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	b94b      	cbnz	r3, 80081d6 <__swsetup_r+0x9a>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081cc:	d003      	beq.n	80081d6 <__swsetup_r+0x9a>
 80081ce:	4621      	mov	r1, r4
 80081d0:	4630      	mov	r0, r6
 80081d2:	f000 fa07 	bl	80085e4 <__smakebuf_r>
 80081d6:	89a0      	ldrh	r0, [r4, #12]
 80081d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081dc:	f010 0301 	ands.w	r3, r0, #1
 80081e0:	d00a      	beq.n	80081f8 <__swsetup_r+0xbc>
 80081e2:	2300      	movs	r3, #0
 80081e4:	60a3      	str	r3, [r4, #8]
 80081e6:	6963      	ldr	r3, [r4, #20]
 80081e8:	425b      	negs	r3, r3
 80081ea:	61a3      	str	r3, [r4, #24]
 80081ec:	6923      	ldr	r3, [r4, #16]
 80081ee:	b943      	cbnz	r3, 8008202 <__swsetup_r+0xc6>
 80081f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081f4:	d1ba      	bne.n	800816c <__swsetup_r+0x30>
 80081f6:	bd70      	pop	{r4, r5, r6, pc}
 80081f8:	0781      	lsls	r1, r0, #30
 80081fa:	bf58      	it	pl
 80081fc:	6963      	ldrpl	r3, [r4, #20]
 80081fe:	60a3      	str	r3, [r4, #8]
 8008200:	e7f4      	b.n	80081ec <__swsetup_r+0xb0>
 8008202:	2000      	movs	r0, #0
 8008204:	e7f7      	b.n	80081f6 <__swsetup_r+0xba>
 8008206:	bf00      	nop
 8008208:	20000034 	.word	0x20000034
 800820c:	08008e2c 	.word	0x08008e2c
 8008210:	08008e4c 	.word	0x08008e4c
 8008214:	08008e0c 	.word	0x08008e0c

08008218 <abort>:
 8008218:	2006      	movs	r0, #6
 800821a:	b508      	push	{r3, lr}
 800821c:	f000 fa52 	bl	80086c4 <raise>
 8008220:	2001      	movs	r0, #1
 8008222:	f7f9 fca6 	bl	8001b72 <_exit>
	...

08008228 <__sflush_r>:
 8008228:	898a      	ldrh	r2, [r1, #12]
 800822a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822e:	4605      	mov	r5, r0
 8008230:	0710      	lsls	r0, r2, #28
 8008232:	460c      	mov	r4, r1
 8008234:	d458      	bmi.n	80082e8 <__sflush_r+0xc0>
 8008236:	684b      	ldr	r3, [r1, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	dc05      	bgt.n	8008248 <__sflush_r+0x20>
 800823c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	dc02      	bgt.n	8008248 <__sflush_r+0x20>
 8008242:	2000      	movs	r0, #0
 8008244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800824a:	2e00      	cmp	r6, #0
 800824c:	d0f9      	beq.n	8008242 <__sflush_r+0x1a>
 800824e:	2300      	movs	r3, #0
 8008250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008254:	682f      	ldr	r7, [r5, #0]
 8008256:	602b      	str	r3, [r5, #0]
 8008258:	d032      	beq.n	80082c0 <__sflush_r+0x98>
 800825a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	075a      	lsls	r2, r3, #29
 8008260:	d505      	bpl.n	800826e <__sflush_r+0x46>
 8008262:	6863      	ldr	r3, [r4, #4]
 8008264:	1ac0      	subs	r0, r0, r3
 8008266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008268:	b10b      	cbz	r3, 800826e <__sflush_r+0x46>
 800826a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800826c:	1ac0      	subs	r0, r0, r3
 800826e:	2300      	movs	r3, #0
 8008270:	4602      	mov	r2, r0
 8008272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008274:	4628      	mov	r0, r5
 8008276:	6a21      	ldr	r1, [r4, #32]
 8008278:	47b0      	blx	r6
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	d106      	bne.n	800828e <__sflush_r+0x66>
 8008280:	6829      	ldr	r1, [r5, #0]
 8008282:	291d      	cmp	r1, #29
 8008284:	d82c      	bhi.n	80082e0 <__sflush_r+0xb8>
 8008286:	4a2a      	ldr	r2, [pc, #168]	; (8008330 <__sflush_r+0x108>)
 8008288:	40ca      	lsrs	r2, r1
 800828a:	07d6      	lsls	r6, r2, #31
 800828c:	d528      	bpl.n	80082e0 <__sflush_r+0xb8>
 800828e:	2200      	movs	r2, #0
 8008290:	6062      	str	r2, [r4, #4]
 8008292:	6922      	ldr	r2, [r4, #16]
 8008294:	04d9      	lsls	r1, r3, #19
 8008296:	6022      	str	r2, [r4, #0]
 8008298:	d504      	bpl.n	80082a4 <__sflush_r+0x7c>
 800829a:	1c42      	adds	r2, r0, #1
 800829c:	d101      	bne.n	80082a2 <__sflush_r+0x7a>
 800829e:	682b      	ldr	r3, [r5, #0]
 80082a0:	b903      	cbnz	r3, 80082a4 <__sflush_r+0x7c>
 80082a2:	6560      	str	r0, [r4, #84]	; 0x54
 80082a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082a6:	602f      	str	r7, [r5, #0]
 80082a8:	2900      	cmp	r1, #0
 80082aa:	d0ca      	beq.n	8008242 <__sflush_r+0x1a>
 80082ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082b0:	4299      	cmp	r1, r3
 80082b2:	d002      	beq.n	80082ba <__sflush_r+0x92>
 80082b4:	4628      	mov	r0, r5
 80082b6:	f7ff fae9 	bl	800788c <_free_r>
 80082ba:	2000      	movs	r0, #0
 80082bc:	6360      	str	r0, [r4, #52]	; 0x34
 80082be:	e7c1      	b.n	8008244 <__sflush_r+0x1c>
 80082c0:	6a21      	ldr	r1, [r4, #32]
 80082c2:	2301      	movs	r3, #1
 80082c4:	4628      	mov	r0, r5
 80082c6:	47b0      	blx	r6
 80082c8:	1c41      	adds	r1, r0, #1
 80082ca:	d1c7      	bne.n	800825c <__sflush_r+0x34>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0c4      	beq.n	800825c <__sflush_r+0x34>
 80082d2:	2b1d      	cmp	r3, #29
 80082d4:	d001      	beq.n	80082da <__sflush_r+0xb2>
 80082d6:	2b16      	cmp	r3, #22
 80082d8:	d101      	bne.n	80082de <__sflush_r+0xb6>
 80082da:	602f      	str	r7, [r5, #0]
 80082dc:	e7b1      	b.n	8008242 <__sflush_r+0x1a>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082e4:	81a3      	strh	r3, [r4, #12]
 80082e6:	e7ad      	b.n	8008244 <__sflush_r+0x1c>
 80082e8:	690f      	ldr	r7, [r1, #16]
 80082ea:	2f00      	cmp	r7, #0
 80082ec:	d0a9      	beq.n	8008242 <__sflush_r+0x1a>
 80082ee:	0793      	lsls	r3, r2, #30
 80082f0:	bf18      	it	ne
 80082f2:	2300      	movne	r3, #0
 80082f4:	680e      	ldr	r6, [r1, #0]
 80082f6:	bf08      	it	eq
 80082f8:	694b      	ldreq	r3, [r1, #20]
 80082fa:	eba6 0807 	sub.w	r8, r6, r7
 80082fe:	600f      	str	r7, [r1, #0]
 8008300:	608b      	str	r3, [r1, #8]
 8008302:	f1b8 0f00 	cmp.w	r8, #0
 8008306:	dd9c      	ble.n	8008242 <__sflush_r+0x1a>
 8008308:	4643      	mov	r3, r8
 800830a:	463a      	mov	r2, r7
 800830c:	4628      	mov	r0, r5
 800830e:	6a21      	ldr	r1, [r4, #32]
 8008310:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008312:	47b0      	blx	r6
 8008314:	2800      	cmp	r0, #0
 8008316:	dc06      	bgt.n	8008326 <__sflush_r+0xfe>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f04f 30ff 	mov.w	r0, #4294967295
 800831e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008322:	81a3      	strh	r3, [r4, #12]
 8008324:	e78e      	b.n	8008244 <__sflush_r+0x1c>
 8008326:	4407      	add	r7, r0
 8008328:	eba8 0800 	sub.w	r8, r8, r0
 800832c:	e7e9      	b.n	8008302 <__sflush_r+0xda>
 800832e:	bf00      	nop
 8008330:	20400001 	.word	0x20400001

08008334 <_fflush_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	690b      	ldr	r3, [r1, #16]
 8008338:	4605      	mov	r5, r0
 800833a:	460c      	mov	r4, r1
 800833c:	b913      	cbnz	r3, 8008344 <_fflush_r+0x10>
 800833e:	2500      	movs	r5, #0
 8008340:	4628      	mov	r0, r5
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	b118      	cbz	r0, 800834e <_fflush_r+0x1a>
 8008346:	6983      	ldr	r3, [r0, #24]
 8008348:	b90b      	cbnz	r3, 800834e <_fflush_r+0x1a>
 800834a:	f000 f887 	bl	800845c <__sinit>
 800834e:	4b14      	ldr	r3, [pc, #80]	; (80083a0 <_fflush_r+0x6c>)
 8008350:	429c      	cmp	r4, r3
 8008352:	d11b      	bne.n	800838c <_fflush_r+0x58>
 8008354:	686c      	ldr	r4, [r5, #4]
 8008356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0ef      	beq.n	800833e <_fflush_r+0xa>
 800835e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008360:	07d0      	lsls	r0, r2, #31
 8008362:	d404      	bmi.n	800836e <_fflush_r+0x3a>
 8008364:	0599      	lsls	r1, r3, #22
 8008366:	d402      	bmi.n	800836e <_fflush_r+0x3a>
 8008368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836a:	f000 f915 	bl	8008598 <__retarget_lock_acquire_recursive>
 800836e:	4628      	mov	r0, r5
 8008370:	4621      	mov	r1, r4
 8008372:	f7ff ff59 	bl	8008228 <__sflush_r>
 8008376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008378:	4605      	mov	r5, r0
 800837a:	07da      	lsls	r2, r3, #31
 800837c:	d4e0      	bmi.n	8008340 <_fflush_r+0xc>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	059b      	lsls	r3, r3, #22
 8008382:	d4dd      	bmi.n	8008340 <_fflush_r+0xc>
 8008384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008386:	f000 f908 	bl	800859a <__retarget_lock_release_recursive>
 800838a:	e7d9      	b.n	8008340 <_fflush_r+0xc>
 800838c:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <_fflush_r+0x70>)
 800838e:	429c      	cmp	r4, r3
 8008390:	d101      	bne.n	8008396 <_fflush_r+0x62>
 8008392:	68ac      	ldr	r4, [r5, #8]
 8008394:	e7df      	b.n	8008356 <_fflush_r+0x22>
 8008396:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <_fflush_r+0x74>)
 8008398:	429c      	cmp	r4, r3
 800839a:	bf08      	it	eq
 800839c:	68ec      	ldreq	r4, [r5, #12]
 800839e:	e7da      	b.n	8008356 <_fflush_r+0x22>
 80083a0:	08008e2c 	.word	0x08008e2c
 80083a4:	08008e4c 	.word	0x08008e4c
 80083a8:	08008e0c 	.word	0x08008e0c

080083ac <std>:
 80083ac:	2300      	movs	r3, #0
 80083ae:	b510      	push	{r4, lr}
 80083b0:	4604      	mov	r4, r0
 80083b2:	e9c0 3300 	strd	r3, r3, [r0]
 80083b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ba:	6083      	str	r3, [r0, #8]
 80083bc:	8181      	strh	r1, [r0, #12]
 80083be:	6643      	str	r3, [r0, #100]	; 0x64
 80083c0:	81c2      	strh	r2, [r0, #14]
 80083c2:	6183      	str	r3, [r0, #24]
 80083c4:	4619      	mov	r1, r3
 80083c6:	2208      	movs	r2, #8
 80083c8:	305c      	adds	r0, #92	; 0x5c
 80083ca:	f7fd fb87 	bl	8005adc <memset>
 80083ce:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <std+0x38>)
 80083d0:	6224      	str	r4, [r4, #32]
 80083d2:	6263      	str	r3, [r4, #36]	; 0x24
 80083d4:	4b04      	ldr	r3, [pc, #16]	; (80083e8 <std+0x3c>)
 80083d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <std+0x40>)
 80083da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083dc:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <std+0x44>)
 80083de:	6323      	str	r3, [r4, #48]	; 0x30
 80083e0:	bd10      	pop	{r4, pc}
 80083e2:	bf00      	nop
 80083e4:	080086fd 	.word	0x080086fd
 80083e8:	0800871f 	.word	0x0800871f
 80083ec:	08008757 	.word	0x08008757
 80083f0:	0800877b 	.word	0x0800877b

080083f4 <_cleanup_r>:
 80083f4:	4901      	ldr	r1, [pc, #4]	; (80083fc <_cleanup_r+0x8>)
 80083f6:	f000 b8af 	b.w	8008558 <_fwalk_reent>
 80083fa:	bf00      	nop
 80083fc:	08008335 	.word	0x08008335

08008400 <__sfmoreglue>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	2568      	movs	r5, #104	; 0x68
 8008404:	1e4a      	subs	r2, r1, #1
 8008406:	4355      	muls	r5, r2
 8008408:	460e      	mov	r6, r1
 800840a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800840e:	f7ff fa89 	bl	8007924 <_malloc_r>
 8008412:	4604      	mov	r4, r0
 8008414:	b140      	cbz	r0, 8008428 <__sfmoreglue+0x28>
 8008416:	2100      	movs	r1, #0
 8008418:	e9c0 1600 	strd	r1, r6, [r0]
 800841c:	300c      	adds	r0, #12
 800841e:	60a0      	str	r0, [r4, #8]
 8008420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008424:	f7fd fb5a 	bl	8005adc <memset>
 8008428:	4620      	mov	r0, r4
 800842a:	bd70      	pop	{r4, r5, r6, pc}

0800842c <__sfp_lock_acquire>:
 800842c:	4801      	ldr	r0, [pc, #4]	; (8008434 <__sfp_lock_acquire+0x8>)
 800842e:	f000 b8b3 	b.w	8008598 <__retarget_lock_acquire_recursive>
 8008432:	bf00      	nop
 8008434:	200003b8 	.word	0x200003b8

08008438 <__sfp_lock_release>:
 8008438:	4801      	ldr	r0, [pc, #4]	; (8008440 <__sfp_lock_release+0x8>)
 800843a:	f000 b8ae 	b.w	800859a <__retarget_lock_release_recursive>
 800843e:	bf00      	nop
 8008440:	200003b8 	.word	0x200003b8

08008444 <__sinit_lock_acquire>:
 8008444:	4801      	ldr	r0, [pc, #4]	; (800844c <__sinit_lock_acquire+0x8>)
 8008446:	f000 b8a7 	b.w	8008598 <__retarget_lock_acquire_recursive>
 800844a:	bf00      	nop
 800844c:	200003b3 	.word	0x200003b3

08008450 <__sinit_lock_release>:
 8008450:	4801      	ldr	r0, [pc, #4]	; (8008458 <__sinit_lock_release+0x8>)
 8008452:	f000 b8a2 	b.w	800859a <__retarget_lock_release_recursive>
 8008456:	bf00      	nop
 8008458:	200003b3 	.word	0x200003b3

0800845c <__sinit>:
 800845c:	b510      	push	{r4, lr}
 800845e:	4604      	mov	r4, r0
 8008460:	f7ff fff0 	bl	8008444 <__sinit_lock_acquire>
 8008464:	69a3      	ldr	r3, [r4, #24]
 8008466:	b11b      	cbz	r3, 8008470 <__sinit+0x14>
 8008468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800846c:	f7ff bff0 	b.w	8008450 <__sinit_lock_release>
 8008470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008474:	6523      	str	r3, [r4, #80]	; 0x50
 8008476:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <__sinit+0x68>)
 8008478:	4a13      	ldr	r2, [pc, #76]	; (80084c8 <__sinit+0x6c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	62a2      	str	r2, [r4, #40]	; 0x28
 800847e:	42a3      	cmp	r3, r4
 8008480:	bf08      	it	eq
 8008482:	2301      	moveq	r3, #1
 8008484:	4620      	mov	r0, r4
 8008486:	bf08      	it	eq
 8008488:	61a3      	streq	r3, [r4, #24]
 800848a:	f000 f81f 	bl	80084cc <__sfp>
 800848e:	6060      	str	r0, [r4, #4]
 8008490:	4620      	mov	r0, r4
 8008492:	f000 f81b 	bl	80084cc <__sfp>
 8008496:	60a0      	str	r0, [r4, #8]
 8008498:	4620      	mov	r0, r4
 800849a:	f000 f817 	bl	80084cc <__sfp>
 800849e:	2200      	movs	r2, #0
 80084a0:	2104      	movs	r1, #4
 80084a2:	60e0      	str	r0, [r4, #12]
 80084a4:	6860      	ldr	r0, [r4, #4]
 80084a6:	f7ff ff81 	bl	80083ac <std>
 80084aa:	2201      	movs	r2, #1
 80084ac:	2109      	movs	r1, #9
 80084ae:	68a0      	ldr	r0, [r4, #8]
 80084b0:	f7ff ff7c 	bl	80083ac <std>
 80084b4:	2202      	movs	r2, #2
 80084b6:	2112      	movs	r1, #18
 80084b8:	68e0      	ldr	r0, [r4, #12]
 80084ba:	f7ff ff77 	bl	80083ac <std>
 80084be:	2301      	movs	r3, #1
 80084c0:	61a3      	str	r3, [r4, #24]
 80084c2:	e7d1      	b.n	8008468 <__sinit+0xc>
 80084c4:	08008a88 	.word	0x08008a88
 80084c8:	080083f5 	.word	0x080083f5

080084cc <__sfp>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	4607      	mov	r7, r0
 80084d0:	f7ff ffac 	bl	800842c <__sfp_lock_acquire>
 80084d4:	4b1e      	ldr	r3, [pc, #120]	; (8008550 <__sfp+0x84>)
 80084d6:	681e      	ldr	r6, [r3, #0]
 80084d8:	69b3      	ldr	r3, [r6, #24]
 80084da:	b913      	cbnz	r3, 80084e2 <__sfp+0x16>
 80084dc:	4630      	mov	r0, r6
 80084de:	f7ff ffbd 	bl	800845c <__sinit>
 80084e2:	3648      	adds	r6, #72	; 0x48
 80084e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	d503      	bpl.n	80084f4 <__sfp+0x28>
 80084ec:	6833      	ldr	r3, [r6, #0]
 80084ee:	b30b      	cbz	r3, 8008534 <__sfp+0x68>
 80084f0:	6836      	ldr	r6, [r6, #0]
 80084f2:	e7f7      	b.n	80084e4 <__sfp+0x18>
 80084f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084f8:	b9d5      	cbnz	r5, 8008530 <__sfp+0x64>
 80084fa:	4b16      	ldr	r3, [pc, #88]	; (8008554 <__sfp+0x88>)
 80084fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008500:	60e3      	str	r3, [r4, #12]
 8008502:	6665      	str	r5, [r4, #100]	; 0x64
 8008504:	f000 f847 	bl	8008596 <__retarget_lock_init_recursive>
 8008508:	f7ff ff96 	bl	8008438 <__sfp_lock_release>
 800850c:	2208      	movs	r2, #8
 800850e:	4629      	mov	r1, r5
 8008510:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008514:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008518:	6025      	str	r5, [r4, #0]
 800851a:	61a5      	str	r5, [r4, #24]
 800851c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008520:	f7fd fadc 	bl	8005adc <memset>
 8008524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800852c:	4620      	mov	r0, r4
 800852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008530:	3468      	adds	r4, #104	; 0x68
 8008532:	e7d9      	b.n	80084e8 <__sfp+0x1c>
 8008534:	2104      	movs	r1, #4
 8008536:	4638      	mov	r0, r7
 8008538:	f7ff ff62 	bl	8008400 <__sfmoreglue>
 800853c:	4604      	mov	r4, r0
 800853e:	6030      	str	r0, [r6, #0]
 8008540:	2800      	cmp	r0, #0
 8008542:	d1d5      	bne.n	80084f0 <__sfp+0x24>
 8008544:	f7ff ff78 	bl	8008438 <__sfp_lock_release>
 8008548:	230c      	movs	r3, #12
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	e7ee      	b.n	800852c <__sfp+0x60>
 800854e:	bf00      	nop
 8008550:	08008a88 	.word	0x08008a88
 8008554:	ffff0001 	.word	0xffff0001

08008558 <_fwalk_reent>:
 8008558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800855c:	4606      	mov	r6, r0
 800855e:	4688      	mov	r8, r1
 8008560:	2700      	movs	r7, #0
 8008562:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800856a:	f1b9 0901 	subs.w	r9, r9, #1
 800856e:	d505      	bpl.n	800857c <_fwalk_reent+0x24>
 8008570:	6824      	ldr	r4, [r4, #0]
 8008572:	2c00      	cmp	r4, #0
 8008574:	d1f7      	bne.n	8008566 <_fwalk_reent+0xe>
 8008576:	4638      	mov	r0, r7
 8008578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800857c:	89ab      	ldrh	r3, [r5, #12]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d907      	bls.n	8008592 <_fwalk_reent+0x3a>
 8008582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008586:	3301      	adds	r3, #1
 8008588:	d003      	beq.n	8008592 <_fwalk_reent+0x3a>
 800858a:	4629      	mov	r1, r5
 800858c:	4630      	mov	r0, r6
 800858e:	47c0      	blx	r8
 8008590:	4307      	orrs	r7, r0
 8008592:	3568      	adds	r5, #104	; 0x68
 8008594:	e7e9      	b.n	800856a <_fwalk_reent+0x12>

08008596 <__retarget_lock_init_recursive>:
 8008596:	4770      	bx	lr

08008598 <__retarget_lock_acquire_recursive>:
 8008598:	4770      	bx	lr

0800859a <__retarget_lock_release_recursive>:
 800859a:	4770      	bx	lr

0800859c <__swhatbuf_r>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	460e      	mov	r6, r1
 80085a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a4:	4614      	mov	r4, r2
 80085a6:	2900      	cmp	r1, #0
 80085a8:	461d      	mov	r5, r3
 80085aa:	b096      	sub	sp, #88	; 0x58
 80085ac:	da07      	bge.n	80085be <__swhatbuf_r+0x22>
 80085ae:	2300      	movs	r3, #0
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	89b3      	ldrh	r3, [r6, #12]
 80085b4:	061a      	lsls	r2, r3, #24
 80085b6:	d410      	bmi.n	80085da <__swhatbuf_r+0x3e>
 80085b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085bc:	e00e      	b.n	80085dc <__swhatbuf_r+0x40>
 80085be:	466a      	mov	r2, sp
 80085c0:	f000 f902 	bl	80087c8 <_fstat_r>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	dbf2      	blt.n	80085ae <__swhatbuf_r+0x12>
 80085c8:	9a01      	ldr	r2, [sp, #4]
 80085ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085d2:	425a      	negs	r2, r3
 80085d4:	415a      	adcs	r2, r3
 80085d6:	602a      	str	r2, [r5, #0]
 80085d8:	e7ee      	b.n	80085b8 <__swhatbuf_r+0x1c>
 80085da:	2340      	movs	r3, #64	; 0x40
 80085dc:	2000      	movs	r0, #0
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	b016      	add	sp, #88	; 0x58
 80085e2:	bd70      	pop	{r4, r5, r6, pc}

080085e4 <__smakebuf_r>:
 80085e4:	898b      	ldrh	r3, [r1, #12]
 80085e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085e8:	079d      	lsls	r5, r3, #30
 80085ea:	4606      	mov	r6, r0
 80085ec:	460c      	mov	r4, r1
 80085ee:	d507      	bpl.n	8008600 <__smakebuf_r+0x1c>
 80085f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	6123      	str	r3, [r4, #16]
 80085f8:	2301      	movs	r3, #1
 80085fa:	6163      	str	r3, [r4, #20]
 80085fc:	b002      	add	sp, #8
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	466a      	mov	r2, sp
 8008602:	ab01      	add	r3, sp, #4
 8008604:	f7ff ffca 	bl	800859c <__swhatbuf_r>
 8008608:	9900      	ldr	r1, [sp, #0]
 800860a:	4605      	mov	r5, r0
 800860c:	4630      	mov	r0, r6
 800860e:	f7ff f989 	bl	8007924 <_malloc_r>
 8008612:	b948      	cbnz	r0, 8008628 <__smakebuf_r+0x44>
 8008614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008618:	059a      	lsls	r2, r3, #22
 800861a:	d4ef      	bmi.n	80085fc <__smakebuf_r+0x18>
 800861c:	f023 0303 	bic.w	r3, r3, #3
 8008620:	f043 0302 	orr.w	r3, r3, #2
 8008624:	81a3      	strh	r3, [r4, #12]
 8008626:	e7e3      	b.n	80085f0 <__smakebuf_r+0xc>
 8008628:	4b0d      	ldr	r3, [pc, #52]	; (8008660 <__smakebuf_r+0x7c>)
 800862a:	62b3      	str	r3, [r6, #40]	; 0x28
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	6020      	str	r0, [r4, #0]
 8008630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	9b00      	ldr	r3, [sp, #0]
 8008638:	6120      	str	r0, [r4, #16]
 800863a:	6163      	str	r3, [r4, #20]
 800863c:	9b01      	ldr	r3, [sp, #4]
 800863e:	b15b      	cbz	r3, 8008658 <__smakebuf_r+0x74>
 8008640:	4630      	mov	r0, r6
 8008642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008646:	f000 f8d1 	bl	80087ec <_isatty_r>
 800864a:	b128      	cbz	r0, 8008658 <__smakebuf_r+0x74>
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	f023 0303 	bic.w	r3, r3, #3
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	81a3      	strh	r3, [r4, #12]
 8008658:	89a0      	ldrh	r0, [r4, #12]
 800865a:	4305      	orrs	r5, r0
 800865c:	81a5      	strh	r5, [r4, #12]
 800865e:	e7cd      	b.n	80085fc <__smakebuf_r+0x18>
 8008660:	080083f5 	.word	0x080083f5

08008664 <_malloc_usable_size_r>:
 8008664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008668:	1f18      	subs	r0, r3, #4
 800866a:	2b00      	cmp	r3, #0
 800866c:	bfbc      	itt	lt
 800866e:	580b      	ldrlt	r3, [r1, r0]
 8008670:	18c0      	addlt	r0, r0, r3
 8008672:	4770      	bx	lr

08008674 <_raise_r>:
 8008674:	291f      	cmp	r1, #31
 8008676:	b538      	push	{r3, r4, r5, lr}
 8008678:	4604      	mov	r4, r0
 800867a:	460d      	mov	r5, r1
 800867c:	d904      	bls.n	8008688 <_raise_r+0x14>
 800867e:	2316      	movs	r3, #22
 8008680:	6003      	str	r3, [r0, #0]
 8008682:	f04f 30ff 	mov.w	r0, #4294967295
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800868a:	b112      	cbz	r2, 8008692 <_raise_r+0x1e>
 800868c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008690:	b94b      	cbnz	r3, 80086a6 <_raise_r+0x32>
 8008692:	4620      	mov	r0, r4
 8008694:	f000 f830 	bl	80086f8 <_getpid_r>
 8008698:	462a      	mov	r2, r5
 800869a:	4601      	mov	r1, r0
 800869c:	4620      	mov	r0, r4
 800869e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086a2:	f000 b817 	b.w	80086d4 <_kill_r>
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d00a      	beq.n	80086c0 <_raise_r+0x4c>
 80086aa:	1c59      	adds	r1, r3, #1
 80086ac:	d103      	bne.n	80086b6 <_raise_r+0x42>
 80086ae:	2316      	movs	r3, #22
 80086b0:	6003      	str	r3, [r0, #0]
 80086b2:	2001      	movs	r0, #1
 80086b4:	e7e7      	b.n	8008686 <_raise_r+0x12>
 80086b6:	2400      	movs	r4, #0
 80086b8:	4628      	mov	r0, r5
 80086ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086be:	4798      	blx	r3
 80086c0:	2000      	movs	r0, #0
 80086c2:	e7e0      	b.n	8008686 <_raise_r+0x12>

080086c4 <raise>:
 80086c4:	4b02      	ldr	r3, [pc, #8]	; (80086d0 <raise+0xc>)
 80086c6:	4601      	mov	r1, r0
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	f7ff bfd3 	b.w	8008674 <_raise_r>
 80086ce:	bf00      	nop
 80086d0:	20000034 	.word	0x20000034

080086d4 <_kill_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	2300      	movs	r3, #0
 80086d8:	4d06      	ldr	r5, [pc, #24]	; (80086f4 <_kill_r+0x20>)
 80086da:	4604      	mov	r4, r0
 80086dc:	4608      	mov	r0, r1
 80086de:	4611      	mov	r1, r2
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	f7f9 fa36 	bl	8001b52 <_kill>
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	d102      	bne.n	80086f0 <_kill_r+0x1c>
 80086ea:	682b      	ldr	r3, [r5, #0]
 80086ec:	b103      	cbz	r3, 80086f0 <_kill_r+0x1c>
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	bd38      	pop	{r3, r4, r5, pc}
 80086f2:	bf00      	nop
 80086f4:	200003ac 	.word	0x200003ac

080086f8 <_getpid_r>:
 80086f8:	f7f9 ba24 	b.w	8001b44 <_getpid>

080086fc <__sread>:
 80086fc:	b510      	push	{r4, lr}
 80086fe:	460c      	mov	r4, r1
 8008700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008704:	f000 f894 	bl	8008830 <_read_r>
 8008708:	2800      	cmp	r0, #0
 800870a:	bfab      	itete	ge
 800870c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800870e:	89a3      	ldrhlt	r3, [r4, #12]
 8008710:	181b      	addge	r3, r3, r0
 8008712:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008716:	bfac      	ite	ge
 8008718:	6563      	strge	r3, [r4, #84]	; 0x54
 800871a:	81a3      	strhlt	r3, [r4, #12]
 800871c:	bd10      	pop	{r4, pc}

0800871e <__swrite>:
 800871e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008722:	461f      	mov	r7, r3
 8008724:	898b      	ldrh	r3, [r1, #12]
 8008726:	4605      	mov	r5, r0
 8008728:	05db      	lsls	r3, r3, #23
 800872a:	460c      	mov	r4, r1
 800872c:	4616      	mov	r6, r2
 800872e:	d505      	bpl.n	800873c <__swrite+0x1e>
 8008730:	2302      	movs	r3, #2
 8008732:	2200      	movs	r2, #0
 8008734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008738:	f000 f868 	bl	800880c <_lseek_r>
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	4632      	mov	r2, r6
 8008740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008744:	81a3      	strh	r3, [r4, #12]
 8008746:	4628      	mov	r0, r5
 8008748:	463b      	mov	r3, r7
 800874a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800874e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008752:	f000 b817 	b.w	8008784 <_write_r>

08008756 <__sseek>:
 8008756:	b510      	push	{r4, lr}
 8008758:	460c      	mov	r4, r1
 800875a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875e:	f000 f855 	bl	800880c <_lseek_r>
 8008762:	1c43      	adds	r3, r0, #1
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	bf15      	itete	ne
 8008768:	6560      	strne	r0, [r4, #84]	; 0x54
 800876a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800876e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008772:	81a3      	strheq	r3, [r4, #12]
 8008774:	bf18      	it	ne
 8008776:	81a3      	strhne	r3, [r4, #12]
 8008778:	bd10      	pop	{r4, pc}

0800877a <__sclose>:
 800877a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877e:	f000 b813 	b.w	80087a8 <_close_r>
	...

08008784 <_write_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4604      	mov	r4, r0
 8008788:	4608      	mov	r0, r1
 800878a:	4611      	mov	r1, r2
 800878c:	2200      	movs	r2, #0
 800878e:	4d05      	ldr	r5, [pc, #20]	; (80087a4 <_write_r+0x20>)
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	f7f9 fa14 	bl	8001bc0 <_write>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_write_r+0x1e>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_write_r+0x1e>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	200003ac 	.word	0x200003ac

080087a8 <_close_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	2300      	movs	r3, #0
 80087ac:	4d05      	ldr	r5, [pc, #20]	; (80087c4 <_close_r+0x1c>)
 80087ae:	4604      	mov	r4, r0
 80087b0:	4608      	mov	r0, r1
 80087b2:	602b      	str	r3, [r5, #0]
 80087b4:	f7f9 fa20 	bl	8001bf8 <_close>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_close_r+0x1a>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_close_r+0x1a>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	200003ac 	.word	0x200003ac

080087c8 <_fstat_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	2300      	movs	r3, #0
 80087cc:	4d06      	ldr	r5, [pc, #24]	; (80087e8 <_fstat_r+0x20>)
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	4611      	mov	r1, r2
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	f7f9 fa1a 	bl	8001c0e <_fstat>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	d102      	bne.n	80087e4 <_fstat_r+0x1c>
 80087de:	682b      	ldr	r3, [r5, #0]
 80087e0:	b103      	cbz	r3, 80087e4 <_fstat_r+0x1c>
 80087e2:	6023      	str	r3, [r4, #0]
 80087e4:	bd38      	pop	{r3, r4, r5, pc}
 80087e6:	bf00      	nop
 80087e8:	200003ac 	.word	0x200003ac

080087ec <_isatty_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	2300      	movs	r3, #0
 80087f0:	4d05      	ldr	r5, [pc, #20]	; (8008808 <_isatty_r+0x1c>)
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	f7f9 fa18 	bl	8001c2c <_isatty>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_isatty_r+0x1a>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_isatty_r+0x1a>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	200003ac 	.word	0x200003ac

0800880c <_lseek_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4604      	mov	r4, r0
 8008810:	4608      	mov	r0, r1
 8008812:	4611      	mov	r1, r2
 8008814:	2200      	movs	r2, #0
 8008816:	4d05      	ldr	r5, [pc, #20]	; (800882c <_lseek_r+0x20>)
 8008818:	602a      	str	r2, [r5, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f7f9 fa10 	bl	8001c40 <_lseek>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_lseek_r+0x1e>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_lseek_r+0x1e>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	200003ac 	.word	0x200003ac

08008830 <_read_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	4611      	mov	r1, r2
 8008838:	2200      	movs	r2, #0
 800883a:	4d05      	ldr	r5, [pc, #20]	; (8008850 <_read_r+0x20>)
 800883c:	602a      	str	r2, [r5, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f7f9 f9a1 	bl	8001b86 <_read>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_read_r+0x1e>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_read_r+0x1e>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	200003ac 	.word	0x200003ac

08008854 <sqrt>:
 8008854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008856:	4606      	mov	r6, r0
 8008858:	460f      	mov	r7, r1
 800885a:	f000 f827 	bl	80088ac <__ieee754_sqrt>
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <sqrt+0x54>)
 8008860:	4604      	mov	r4, r0
 8008862:	f993 3000 	ldrsb.w	r3, [r3]
 8008866:	460d      	mov	r5, r1
 8008868:	3301      	adds	r3, #1
 800886a:	d019      	beq.n	80088a0 <sqrt+0x4c>
 800886c:	4632      	mov	r2, r6
 800886e:	463b      	mov	r3, r7
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f8 f8ca 	bl	8000a0c <__aeabi_dcmpun>
 8008878:	b990      	cbnz	r0, 80088a0 <sqrt+0x4c>
 800887a:	2200      	movs	r2, #0
 800887c:	2300      	movs	r3, #0
 800887e:	4630      	mov	r0, r6
 8008880:	4639      	mov	r1, r7
 8008882:	f7f8 f89b 	bl	80009bc <__aeabi_dcmplt>
 8008886:	b158      	cbz	r0, 80088a0 <sqrt+0x4c>
 8008888:	f7fd f8fe 	bl	8005a88 <__errno>
 800888c:	2321      	movs	r3, #33	; 0x21
 800888e:	2200      	movs	r2, #0
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	2300      	movs	r3, #0
 8008894:	4610      	mov	r0, r2
 8008896:	4619      	mov	r1, r3
 8008898:	f7f7 ff48 	bl	800072c <__aeabi_ddiv>
 800889c:	4604      	mov	r4, r0
 800889e:	460d      	mov	r5, r1
 80088a0:	4620      	mov	r0, r4
 80088a2:	4629      	mov	r1, r5
 80088a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000204 	.word	0x20000204

080088ac <__ieee754_sqrt>:
 80088ac:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008a00 <__ieee754_sqrt+0x154>
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	ea3c 0c01 	bics.w	ip, ip, r1
 80088b8:	460b      	mov	r3, r1
 80088ba:	4606      	mov	r6, r0
 80088bc:	460d      	mov	r5, r1
 80088be:	460a      	mov	r2, r1
 80088c0:	4607      	mov	r7, r0
 80088c2:	4604      	mov	r4, r0
 80088c4:	d10e      	bne.n	80088e4 <__ieee754_sqrt+0x38>
 80088c6:	4602      	mov	r2, r0
 80088c8:	f7f7 fe06 	bl	80004d8 <__aeabi_dmul>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4630      	mov	r0, r6
 80088d2:	4629      	mov	r1, r5
 80088d4:	f7f7 fc4a 	bl	800016c <__adddf3>
 80088d8:	4606      	mov	r6, r0
 80088da:	460d      	mov	r5, r1
 80088dc:	4630      	mov	r0, r6
 80088de:	4629      	mov	r1, r5
 80088e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e4:	2900      	cmp	r1, #0
 80088e6:	dc0d      	bgt.n	8008904 <__ieee754_sqrt+0x58>
 80088e8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80088ec:	ea5c 0707 	orrs.w	r7, ip, r7
 80088f0:	d0f4      	beq.n	80088dc <__ieee754_sqrt+0x30>
 80088f2:	b139      	cbz	r1, 8008904 <__ieee754_sqrt+0x58>
 80088f4:	4602      	mov	r2, r0
 80088f6:	f7f7 fc37 	bl	8000168 <__aeabi_dsub>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	f7f7 ff15 	bl	800072c <__aeabi_ddiv>
 8008902:	e7e9      	b.n	80088d8 <__ieee754_sqrt+0x2c>
 8008904:	1512      	asrs	r2, r2, #20
 8008906:	d074      	beq.n	80089f2 <__ieee754_sqrt+0x146>
 8008908:	2000      	movs	r0, #0
 800890a:	07d5      	lsls	r5, r2, #31
 800890c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008910:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8008914:	bf5e      	ittt	pl
 8008916:	0fe3      	lsrpl	r3, r4, #31
 8008918:	0064      	lslpl	r4, r4, #1
 800891a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800891e:	0fe3      	lsrs	r3, r4, #31
 8008920:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008924:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008928:	2516      	movs	r5, #22
 800892a:	4601      	mov	r1, r0
 800892c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008930:	1076      	asrs	r6, r6, #1
 8008932:	0064      	lsls	r4, r4, #1
 8008934:	188f      	adds	r7, r1, r2
 8008936:	429f      	cmp	r7, r3
 8008938:	bfde      	ittt	le
 800893a:	1bdb      	suble	r3, r3, r7
 800893c:	18b9      	addle	r1, r7, r2
 800893e:	1880      	addle	r0, r0, r2
 8008940:	005b      	lsls	r3, r3, #1
 8008942:	3d01      	subs	r5, #1
 8008944:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008948:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800894c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008950:	d1f0      	bne.n	8008934 <__ieee754_sqrt+0x88>
 8008952:	462a      	mov	r2, r5
 8008954:	f04f 0e20 	mov.w	lr, #32
 8008958:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800895c:	428b      	cmp	r3, r1
 800895e:	eb07 0c05 	add.w	ip, r7, r5
 8008962:	dc02      	bgt.n	800896a <__ieee754_sqrt+0xbe>
 8008964:	d113      	bne.n	800898e <__ieee754_sqrt+0xe2>
 8008966:	45a4      	cmp	ip, r4
 8008968:	d811      	bhi.n	800898e <__ieee754_sqrt+0xe2>
 800896a:	f1bc 0f00 	cmp.w	ip, #0
 800896e:	eb0c 0507 	add.w	r5, ip, r7
 8008972:	da43      	bge.n	80089fc <__ieee754_sqrt+0x150>
 8008974:	2d00      	cmp	r5, #0
 8008976:	db41      	blt.n	80089fc <__ieee754_sqrt+0x150>
 8008978:	f101 0801 	add.w	r8, r1, #1
 800897c:	1a5b      	subs	r3, r3, r1
 800897e:	4641      	mov	r1, r8
 8008980:	45a4      	cmp	ip, r4
 8008982:	bf88      	it	hi
 8008984:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008988:	eba4 040c 	sub.w	r4, r4, ip
 800898c:	443a      	add	r2, r7
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	f1be 0e01 	subs.w	lr, lr, #1
 8008994:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008998:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800899c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80089a0:	d1dc      	bne.n	800895c <__ieee754_sqrt+0xb0>
 80089a2:	4323      	orrs	r3, r4
 80089a4:	d006      	beq.n	80089b4 <__ieee754_sqrt+0x108>
 80089a6:	1c54      	adds	r4, r2, #1
 80089a8:	bf0b      	itete	eq
 80089aa:	4672      	moveq	r2, lr
 80089ac:	3201      	addne	r2, #1
 80089ae:	3001      	addeq	r0, #1
 80089b0:	f022 0201 	bicne.w	r2, r2, #1
 80089b4:	1043      	asrs	r3, r0, #1
 80089b6:	07c1      	lsls	r1, r0, #31
 80089b8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80089bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80089c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80089c4:	bf48      	it	mi
 80089c6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80089ca:	4610      	mov	r0, r2
 80089cc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80089d0:	e782      	b.n	80088d8 <__ieee754_sqrt+0x2c>
 80089d2:	0ae3      	lsrs	r3, r4, #11
 80089d4:	3915      	subs	r1, #21
 80089d6:	0564      	lsls	r4, r4, #21
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d0fa      	beq.n	80089d2 <__ieee754_sqrt+0x126>
 80089dc:	02de      	lsls	r6, r3, #11
 80089de:	d50a      	bpl.n	80089f6 <__ieee754_sqrt+0x14a>
 80089e0:	f1c2 0020 	rsb	r0, r2, #32
 80089e4:	fa24 f000 	lsr.w	r0, r4, r0
 80089e8:	1e55      	subs	r5, r2, #1
 80089ea:	4094      	lsls	r4, r2
 80089ec:	4303      	orrs	r3, r0
 80089ee:	1b4a      	subs	r2, r1, r5
 80089f0:	e78a      	b.n	8008908 <__ieee754_sqrt+0x5c>
 80089f2:	4611      	mov	r1, r2
 80089f4:	e7f0      	b.n	80089d8 <__ieee754_sqrt+0x12c>
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	3201      	adds	r2, #1
 80089fa:	e7ef      	b.n	80089dc <__ieee754_sqrt+0x130>
 80089fc:	4688      	mov	r8, r1
 80089fe:	e7bd      	b.n	800897c <__ieee754_sqrt+0xd0>
 8008a00:	7ff00000 	.word	0x7ff00000

08008a04 <_init>:
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	bf00      	nop
 8008a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a0a:	bc08      	pop	{r3}
 8008a0c:	469e      	mov	lr, r3
 8008a0e:	4770      	bx	lr

08008a10 <_fini>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	bf00      	nop
 8008a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a16:	bc08      	pop	{r3}
 8008a18:	469e      	mov	lr, r3
 8008a1a:	4770      	bx	lr
