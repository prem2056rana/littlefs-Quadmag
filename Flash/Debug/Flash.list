
Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adb4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f38  0800af64  0800af64  0001af64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be9c  0800be9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800be9c  0800be9c  0001be9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bea4  0800bea4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bea4  0800bea4  0001bea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bea8  0800bea8  0001bea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800beac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001ac  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015855  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024bb  00000000  00000000  000358f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00037db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  00038dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244c0  00000000  00000000  00039fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fb5  00000000  00000000  0005e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d560d  00000000  00000000  0006f43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00144a4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f40  00000000  00000000  00144aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800af4c 	.word	0x0800af4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800af4c 	.word	0x0800af4c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b982 	b.w	80005bc <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f81a 	bl	80002f8 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__popcountsi2>:
 80002d0:	0843      	lsrs	r3, r0, #1
 80002d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	0883      	lsrs	r3, r0, #2
 80002da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002e2:	4418      	add	r0, r3
 80002e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002f4:	0e00      	lsrs	r0, r0, #24
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9d08      	ldr	r5, [sp, #32]
 80002fe:	4604      	mov	r4, r0
 8000300:	468c      	mov	ip, r1
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8083 	bne.w	800040e <__udivmoddi4+0x116>
 8000308:	428a      	cmp	r2, r1
 800030a:	4617      	mov	r7, r2
 800030c:	d947      	bls.n	800039e <__udivmoddi4+0xa6>
 800030e:	fab2 f282 	clz	r2, r2
 8000312:	b142      	cbz	r2, 8000326 <__udivmoddi4+0x2e>
 8000314:	f1c2 0020 	rsb	r0, r2, #32
 8000318:	fa24 f000 	lsr.w	r0, r4, r0
 800031c:	4091      	lsls	r1, r2
 800031e:	4097      	lsls	r7, r2
 8000320:	ea40 0c01 	orr.w	ip, r0, r1
 8000324:	4094      	lsls	r4, r2
 8000326:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	fbbc f6f8 	udiv	r6, ip, r8
 8000330:	fa1f fe87 	uxth.w	lr, r7
 8000334:	fb08 c116 	mls	r1, r8, r6, ip
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb06 f10e 	mul.w	r1, r6, lr
 8000340:	4299      	cmp	r1, r3
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x60>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f106 30ff 	add.w	r0, r6, #4294967295
 800034a:	f080 8119 	bcs.w	8000580 <__udivmoddi4+0x288>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 8116 	bls.w	8000580 <__udivmoddi4+0x288>
 8000354:	3e02      	subs	r6, #2
 8000356:	443b      	add	r3, r7
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000360:	fb08 3310 	mls	r3, r8, r0, r3
 8000364:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000368:	fb00 fe0e 	mul.w	lr, r0, lr
 800036c:	45a6      	cmp	lr, r4
 800036e:	d909      	bls.n	8000384 <__udivmoddi4+0x8c>
 8000370:	193c      	adds	r4, r7, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	f080 8105 	bcs.w	8000584 <__udivmoddi4+0x28c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f240 8102 	bls.w	8000584 <__udivmoddi4+0x28c>
 8000380:	3802      	subs	r0, #2
 8000382:	443c      	add	r4, r7
 8000384:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000388:	eba4 040e 	sub.w	r4, r4, lr
 800038c:	2600      	movs	r6, #0
 800038e:	b11d      	cbz	r5, 8000398 <__udivmoddi4+0xa0>
 8000390:	40d4      	lsrs	r4, r2
 8000392:	2300      	movs	r3, #0
 8000394:	e9c5 4300 	strd	r4, r3, [r5]
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	b902      	cbnz	r2, 80003a2 <__udivmoddi4+0xaa>
 80003a0:	deff      	udf	#255	; 0xff
 80003a2:	fab2 f282 	clz	r2, r2
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d150      	bne.n	800044c <__udivmoddi4+0x154>
 80003aa:	1bcb      	subs	r3, r1, r7
 80003ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	2601      	movs	r6, #1
 80003b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ba:	0c21      	lsrs	r1, r4, #16
 80003bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb08 f30c 	mul.w	r3, r8, ip
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0xe4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0xe2>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	f200 80e9 	bhi.w	80005ac <__udivmoddi4+0x2b4>
 80003da:	4684      	mov	ip, r0
 80003dc:	1ac9      	subs	r1, r1, r3
 80003de:	b2a3      	uxth	r3, r4
 80003e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003ec:	fb08 f800 	mul.w	r8, r8, r0
 80003f0:	45a0      	cmp	r8, r4
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x10c>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x10a>
 80003fc:	45a0      	cmp	r8, r4
 80003fe:	f200 80d9 	bhi.w	80005b4 <__udivmoddi4+0x2bc>
 8000402:	4618      	mov	r0, r3
 8000404:	eba4 0408 	sub.w	r4, r4, r8
 8000408:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800040c:	e7bf      	b.n	800038e <__udivmoddi4+0x96>
 800040e:	428b      	cmp	r3, r1
 8000410:	d909      	bls.n	8000426 <__udivmoddi4+0x12e>
 8000412:	2d00      	cmp	r5, #0
 8000414:	f000 80b1 	beq.w	800057a <__udivmoddi4+0x282>
 8000418:	2600      	movs	r6, #0
 800041a:	e9c5 0100 	strd	r0, r1, [r5]
 800041e:	4630      	mov	r0, r6
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	fab3 f683 	clz	r6, r3
 800042a:	2e00      	cmp	r6, #0
 800042c:	d14a      	bne.n	80004c4 <__udivmoddi4+0x1cc>
 800042e:	428b      	cmp	r3, r1
 8000430:	d302      	bcc.n	8000438 <__udivmoddi4+0x140>
 8000432:	4282      	cmp	r2, r0
 8000434:	f200 80b8 	bhi.w	80005a8 <__udivmoddi4+0x2b0>
 8000438:	1a84      	subs	r4, r0, r2
 800043a:	eb61 0103 	sbc.w	r1, r1, r3
 800043e:	2001      	movs	r0, #1
 8000440:	468c      	mov	ip, r1
 8000442:	2d00      	cmp	r5, #0
 8000444:	d0a8      	beq.n	8000398 <__udivmoddi4+0xa0>
 8000446:	e9c5 4c00 	strd	r4, ip, [r5]
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0xa0>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f603 	lsr.w	r6, r0, r3
 8000454:	4097      	lsls	r7, r2
 8000456:	fa01 f002 	lsl.w	r0, r1, r2
 800045a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800045e:	40d9      	lsrs	r1, r3
 8000460:	4330      	orrs	r0, r6
 8000462:	0c03      	lsrs	r3, r0, #16
 8000464:	fbb1 f6fe 	udiv	r6, r1, lr
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000470:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000474:	fb06 f108 	mul.w	r1, r6, r8
 8000478:	4299      	cmp	r1, r3
 800047a:	fa04 f402 	lsl.w	r4, r4, r2
 800047e:	d909      	bls.n	8000494 <__udivmoddi4+0x19c>
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	f106 3cff 	add.w	ip, r6, #4294967295
 8000486:	f080 808d 	bcs.w	80005a4 <__udivmoddi4+0x2ac>
 800048a:	4299      	cmp	r1, r3
 800048c:	f240 808a 	bls.w	80005a4 <__udivmoddi4+0x2ac>
 8000490:	3e02      	subs	r6, #2
 8000492:	443b      	add	r3, r7
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b281      	uxth	r1, r0
 8000498:	fbb3 f0fe 	udiv	r0, r3, lr
 800049c:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb00 f308 	mul.w	r3, r0, r8
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x1c4>
 80004ac:	1879      	adds	r1, r7, r1
 80004ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b2:	d273      	bcs.n	800059c <__udivmoddi4+0x2a4>
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d971      	bls.n	800059c <__udivmoddi4+0x2a4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4439      	add	r1, r7
 80004bc:	1acb      	subs	r3, r1, r3
 80004be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004c2:	e778      	b.n	80003b6 <__udivmoddi4+0xbe>
 80004c4:	f1c6 0c20 	rsb	ip, r6, #32
 80004c8:	fa03 f406 	lsl.w	r4, r3, r6
 80004cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d0:	431c      	orrs	r4, r3
 80004d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004d6:	fa01 f306 	lsl.w	r3, r1, r6
 80004da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004de:	fa21 f10c 	lsr.w	r1, r1, ip
 80004e2:	431f      	orrs	r7, r3
 80004e4:	0c3b      	lsrs	r3, r7, #16
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fa1f f884 	uxth.w	r8, r4
 80004ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004f6:	fb09 fa08 	mul.w	sl, r9, r8
 80004fa:	458a      	cmp	sl, r1
 80004fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000500:	fa00 f306 	lsl.w	r3, r0, r6
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x220>
 8000506:	1861      	adds	r1, r4, r1
 8000508:	f109 30ff 	add.w	r0, r9, #4294967295
 800050c:	d248      	bcs.n	80005a0 <__udivmoddi4+0x2a8>
 800050e:	458a      	cmp	sl, r1
 8000510:	d946      	bls.n	80005a0 <__udivmoddi4+0x2a8>
 8000512:	f1a9 0902 	sub.w	r9, r9, #2
 8000516:	4421      	add	r1, r4
 8000518:	eba1 010a 	sub.w	r1, r1, sl
 800051c:	b2bf      	uxth	r7, r7
 800051e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000522:	fb0e 1110 	mls	r1, lr, r0, r1
 8000526:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800052a:	fb00 f808 	mul.w	r8, r0, r8
 800052e:	45b8      	cmp	r8, r7
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x24a>
 8000532:	19e7      	adds	r7, r4, r7
 8000534:	f100 31ff 	add.w	r1, r0, #4294967295
 8000538:	d22e      	bcs.n	8000598 <__udivmoddi4+0x2a0>
 800053a:	45b8      	cmp	r8, r7
 800053c:	d92c      	bls.n	8000598 <__udivmoddi4+0x2a0>
 800053e:	3802      	subs	r0, #2
 8000540:	4427      	add	r7, r4
 8000542:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000546:	eba7 0708 	sub.w	r7, r7, r8
 800054a:	fba0 8902 	umull	r8, r9, r0, r2
 800054e:	454f      	cmp	r7, r9
 8000550:	46c6      	mov	lr, r8
 8000552:	4649      	mov	r1, r9
 8000554:	d31a      	bcc.n	800058c <__udivmoddi4+0x294>
 8000556:	d017      	beq.n	8000588 <__udivmoddi4+0x290>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x27a>
 800055a:	ebb3 020e 	subs.w	r2, r3, lr
 800055e:	eb67 0701 	sbc.w	r7, r7, r1
 8000562:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000566:	40f2      	lsrs	r2, r6
 8000568:	ea4c 0202 	orr.w	r2, ip, r2
 800056c:	40f7      	lsrs	r7, r6
 800056e:	e9c5 2700 	strd	r2, r7, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	462e      	mov	r6, r5
 800057c:	4628      	mov	r0, r5
 800057e:	e70b      	b.n	8000398 <__udivmoddi4+0xa0>
 8000580:	4606      	mov	r6, r0
 8000582:	e6e9      	b.n	8000358 <__udivmoddi4+0x60>
 8000584:	4618      	mov	r0, r3
 8000586:	e6fd      	b.n	8000384 <__udivmoddi4+0x8c>
 8000588:	4543      	cmp	r3, r8
 800058a:	d2e5      	bcs.n	8000558 <__udivmoddi4+0x260>
 800058c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000590:	eb69 0104 	sbc.w	r1, r9, r4
 8000594:	3801      	subs	r0, #1
 8000596:	e7df      	b.n	8000558 <__udivmoddi4+0x260>
 8000598:	4608      	mov	r0, r1
 800059a:	e7d2      	b.n	8000542 <__udivmoddi4+0x24a>
 800059c:	4660      	mov	r0, ip
 800059e:	e78d      	b.n	80004bc <__udivmoddi4+0x1c4>
 80005a0:	4681      	mov	r9, r0
 80005a2:	e7b9      	b.n	8000518 <__udivmoddi4+0x220>
 80005a4:	4666      	mov	r6, ip
 80005a6:	e775      	b.n	8000494 <__udivmoddi4+0x19c>
 80005a8:	4630      	mov	r0, r6
 80005aa:	e74a      	b.n	8000442 <__udivmoddi4+0x14a>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	4439      	add	r1, r7
 80005b2:	e713      	b.n	80003dc <__udivmoddi4+0xe4>
 80005b4:	3802      	subs	r0, #2
 80005b6:	443c      	add	r4, r7
 80005b8:	e724      	b.n	8000404 <__udivmoddi4+0x10c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Bulk_Read_4B>:
 * * @param	address		address from which the data is to be read
 * 			*data		pointer to store the data which is read from the corresponding address
 * 			size		size of the data to be read
 */
void Bulk_Read_4B(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
 80005cc:	807b      	strh	r3, [r7, #2]
	uint8_t cmd[5];
	cmd[0] = BYTE_4_READ;
 80005ce:	2313      	movs	r3, #19
 80005d0:	743b      	strb	r3, [r7, #16]
	cmd[1] = (uint8_t) (address >> 24 & 0xff);
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	0e1b      	lsrs	r3, r3, #24
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	747b      	strb	r3, [r7, #17]
	cmd[2] = (uint8_t) (address >> 16 & 0xff);
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	0c1b      	lsrs	r3, r3, #16
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t) (address >> 8);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	74fb      	strb	r3, [r7, #19]
	cmd[4] = (uint8_t) (address);
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	753b      	strb	r3, [r7, #20]
	FM_Enable(SPI);
 80005f0:	68f8      	ldr	r0, [r7, #12]
 80005f2:	f000 f93d 	bl	8000870 <FM_Enable>
	HAL_SPI_Transmit(SPI, cmd, 5, 100);
 80005f6:	f107 0110 	add.w	r1, r7, #16
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	2205      	movs	r2, #5
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	f008 fd11 	bl	8009026 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, size, 200);
 8000604:	887a      	ldrh	r2, [r7, #2]
 8000606:	23c8      	movs	r3, #200	; 0xc8
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f008 fe47 	bl	800929e <HAL_SPI_Receive>
	FM_Disable(SPI);
 8000610:	68f8      	ldr	r0, [r7, #12]
 8000612:	f000 f947 	bl	80008a4 <FM_Disable>
	HAL_Delay(5);
 8000616:	2005      	movs	r0, #5
 8000618:	f007 fd14 	bl	8008044 <HAL_Delay>
	return;
 800061c:	bf00      	nop
}
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <Page_Write_4B>:
 * 			size		size of the data
 *@retval	none
 */

void Page_Write_4B(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	807b      	strh	r3, [r7, #2]
	uint8_t cmd = BYTE_4_PAGE_PROGRAM;
 8000632:	2312      	movs	r3, #18
 8000634:	75fb      	strb	r3, [r7, #23]
	uint8_t command[4];
	while (size > PAGE_SIZE) {
 8000636:	e03e      	b.n	80006b6 <Page_Write_4B+0x92>
		command[0] = (uint8_t) (address >> 24 & 0xff);
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	0e1b      	lsrs	r3, r3, #24
 800063c:	b2db      	uxtb	r3, r3
 800063e:	743b      	strb	r3, [r7, #16]
		command[1] = (uint8_t) (address >> 16 & 0xff);
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	0c1b      	lsrs	r3, r3, #16
 8000644:	b2db      	uxtb	r3, r3
 8000646:	747b      	strb	r3, [r7, #17]
		command[2] = (uint8_t) (address >> 8 & 0xff);
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	b2db      	uxtb	r3, r3
 800064e:	74bb      	strb	r3, [r7, #18]
		command[3] = (uint8_t) (address & 0xFF);
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	74fb      	strb	r3, [r7, #19]
		Write_Enable(SPI);
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f000 f8ec 	bl	8000834 <Write_Enable>
		FM_Enable(SPI);
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f000 f907 	bl	8000870 <FM_Enable>
		HAL_Delay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f007 fcee 	bl	8008044 <HAL_Delay>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 8000668:	f107 0117 	add.w	r1, r7, #23
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	2201      	movs	r2, #1
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f008 fcd8 	bl	8009026 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, command, 4, 200);
 8000676:	f107 0110 	add.w	r1, r7, #16
 800067a:	23c8      	movs	r3, #200	; 0xc8
 800067c:	2204      	movs	r2, #4
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f008 fcd1 	bl	8009026 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, data, PAGE_SIZE, 200);
 8000684:	23c8      	movs	r3, #200	; 0xc8
 8000686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f008 fcca 	bl	8009026 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f000 f906 	bl	80008a4 <FM_Disable>
		HAL_Delay(10);
 8000698:	200a      	movs	r0, #10
 800069a:	f007 fcd3 	bl	8008044 <HAL_Delay>
		size = size - PAGE_SIZE;
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80006a4:	807b      	strh	r3, [r7, #2]
		data = data + 256;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80006ac:	607b      	str	r3, [r7, #4]
		address = address + 256;
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80006b4:	60bb      	str	r3, [r7, #8]
	while (size > PAGE_SIZE) {
 80006b6:	887b      	ldrh	r3, [r7, #2]
 80006b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006bc:	d8bc      	bhi.n	8000638 <Page_Write_4B+0x14>
	}
	command[0] = (uint8_t) (address >> 24 & 0xff);
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	0e1b      	lsrs	r3, r3, #24
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	743b      	strb	r3, [r7, #16]
	command[1] = (uint8_t) (address >> 16 & 0xff);
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	0c1b      	lsrs	r3, r3, #16
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	747b      	strb	r3, [r7, #17]
	command[2] = (uint8_t) (address >> 8 & 0xff);
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	74bb      	strb	r3, [r7, #18]
	command[3] = (uint8_t) (address & 0xFF);
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	74fb      	strb	r3, [r7, #19]
	Write_Enable(SPI);
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f000 f8a9 	bl	8000834 <Write_Enable>
	FM_Enable(SPI);
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f000 f8c4 	bl	8000870 <FM_Enable>
	HAL_Delay(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f007 fcab 	bl	8008044 <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 50);
 80006ee:	f107 0117 	add.w	r1, r7, #23
 80006f2:	2332      	movs	r3, #50	; 0x32
 80006f4:	2201      	movs	r2, #1
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f008 fc95 	bl	8009026 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI, command, 4, 100);
 80006fc:	f107 0110 	add.w	r1, r7, #16
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	2204      	movs	r2, #4
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f008 fc8e 	bl	8009026 <HAL_SPI_Transmit>
	HAL_Delay(1);
 800070a:	2001      	movs	r0, #1
 800070c:	f007 fc9a 	bl	8008044 <HAL_Delay>
	HAL_SPI_Transmit(SPI, data, size, 200);
 8000710:	887a      	ldrh	r2, [r7, #2]
 8000712:	23c8      	movs	r3, #200	; 0xc8
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f008 fc85 	bl	8009026 <HAL_SPI_Transmit>
	FM_Disable(SPI);
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f000 f8c1 	bl	80008a4 <FM_Disable>
	HAL_Delay(10);
 8000722:	200a      	movs	r0, #10
 8000724:	f007 fc8e 	bl	8008044 <HAL_Delay>
	return;
 8000728:	bf00      	nop
}
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <Sector_Erase_4B>:

/*
 * @brief	similar function as Sector_Erase but 4 byte address mode for the FM
 * 			Parameters are same as for Sector_Erase
 */
uint8_t Sector_Erase_4B(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t sector_size) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	4613      	mov	r3, r2
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t addr[4];
	uint8_t cmd;
	addr[0] = (uint8_t) (address >> 24);
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	0e1b      	lsrs	r3, r3, #24
 8000742:	b2db      	uxtb	r3, r3
 8000744:	753b      	strb	r3, [r7, #20]
	addr[1] = (uint8_t) (address >> 16);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	0c1b      	lsrs	r3, r3, #16
 800074a:	b2db      	uxtb	r3, r3
 800074c:	757b      	strb	r3, [r7, #21]
	addr[2] = (uint8_t) (address >> 8);
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	b2db      	uxtb	r3, r3
 8000754:	75bb      	strb	r3, [r7, #22]
	addr[3] = (uint8_t) (address);
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	75fb      	strb	r3, [r7, #23]
	switch (sector_size) {
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b40      	cmp	r3, #64	; 0x40
 8000760:	d006      	beq.n	8000770 <Sector_Erase_4B+0x40>
 8000762:	2b40      	cmp	r3, #64	; 0x40
 8000764:	dc61      	bgt.n	800082a <Sector_Erase_4B+0xfa>
 8000766:	2b04      	cmp	r3, #4
 8000768:	d040      	beq.n	80007ec <Sector_Erase_4B+0xbc>
 800076a:	2b20      	cmp	r3, #32
 800076c:	d01f      	beq.n	80007ae <Sector_Erase_4B+0x7e>
 800076e:	e05c      	b.n	800082a <Sector_Erase_4B+0xfa>
	case 64:
		cmd = SECTOR_ERASE_4_BYTE;
 8000770:	23dc      	movs	r3, #220	; 0xdc
 8000772:	74fb      	strb	r3, [r7, #19]
		Write_Enable(SPI);
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f000 f85d 	bl	8000834 <Write_Enable>
		FM_Enable(SPI);
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f000 f878 	bl	8000870 <FM_Enable>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 8000780:	f107 0113 	add.w	r1, r7, #19
 8000784:	2364      	movs	r3, #100	; 0x64
 8000786:	2201      	movs	r2, #1
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f008 fc4c 	bl	8009026 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, addr, 4, 100);
 800078e:	f107 0114 	add.w	r1, r7, #20
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	2204      	movs	r2, #4
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f008 fc45 	bl	8009026 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	f000 f881 	bl	80008a4 <FM_Disable>
		HAL_Delay(1000);
 80007a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a6:	f007 fc4d 	bl	8008044 <HAL_Delay>
		return 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e03e      	b.n	800082c <Sector_Erase_4B+0xfc>
	case 32:
		cmd = SUBSECTOR_ERASE_32KB_4_BYTE;
 80007ae:	235c      	movs	r3, #92	; 0x5c
 80007b0:	74fb      	strb	r3, [r7, #19]
		Write_Enable(SPI);
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f000 f83e 	bl	8000834 <Write_Enable>
		FM_Enable(SPI);
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f000 f859 	bl	8000870 <FM_Enable>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 80007be:	f107 0113 	add.w	r1, r7, #19
 80007c2:	2364      	movs	r3, #100	; 0x64
 80007c4:	2201      	movs	r2, #1
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	f008 fc2d 	bl	8009026 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, addr, 4, 100);
 80007cc:	f107 0114 	add.w	r1, r7, #20
 80007d0:	2364      	movs	r3, #100	; 0x64
 80007d2:	2204      	movs	r2, #4
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f008 fc26 	bl	8009026 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 80007da:	68f8      	ldr	r0, [r7, #12]
 80007dc:	f000 f862 	bl	80008a4 <FM_Disable>
		HAL_Delay(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e4:	f007 fc2e 	bl	8008044 <HAL_Delay>
		return 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	e01f      	b.n	800082c <Sector_Erase_4B+0xfc>
	case 4:
		cmd = SUBSECTOR_ERASE_4KB_4_BYTE;
 80007ec:	2321      	movs	r3, #33	; 0x21
 80007ee:	74fb      	strb	r3, [r7, #19]
		Write_Enable(SPI);
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f000 f81f 	bl	8000834 <Write_Enable>
		FM_Enable(SPI);
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f000 f83a 	bl	8000870 <FM_Enable>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 80007fc:	f107 0113 	add.w	r1, r7, #19
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	2201      	movs	r2, #1
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f008 fc0e 	bl	8009026 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, addr, 4, 100);
 800080a:	f107 0114 	add.w	r1, r7, #20
 800080e:	2364      	movs	r3, #100	; 0x64
 8000810:	2204      	movs	r2, #4
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f008 fc07 	bl	8009026 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f000 f843 	bl	80008a4 <FM_Disable>
		HAL_Delay(1000);
 800081e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000822:	f007 fc0f 	bl	8008044 <HAL_Delay>
		return 3;
 8000826:	2303      	movs	r3, #3
 8000828:	e000      	b.n	800082c <Sector_Erase_4B+0xfc>
	default:
		return 0;
 800082a:	2300      	movs	r3, #0
	}
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <Write_Enable>:
	FM_Enable(SPI);
	HAL_SPI_Transmit(SPI, &cmd, 1, 100);
	FM_Disable(SPI);
}

void Write_Enable(SPI_HandleTypeDef *SPI) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = WRITE_ENABLE;
 800083c:	2306      	movs	r3, #6
 800083e:	73fb      	strb	r3, [r7, #15]
	FM_Enable(SPI);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f815 	bl	8000870 <FM_Enable>
	HAL_Delay(1);
 8000846:	2001      	movs	r0, #1
 8000848:	f007 fbfc 	bl	8008044 <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 500);
 800084c:	f107 010f 	add.w	r1, r7, #15
 8000850:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000854:	2201      	movs	r2, #1
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f008 fbe5 	bl	8009026 <HAL_SPI_Transmit>
	FM_Disable(SPI);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f821 	bl	80008a4 <FM_Disable>
	HAL_Delay(10);
 8000862:	200a      	movs	r0, #10
 8000864:	f007 fbee 	bl	8008044 <HAL_Delay>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <FM_Enable>:
	FM_Enable(SPI);
	HAL_SPI_Transmit(SPI, &cmd, 1, 100);
	FM_Disable(SPI);
}

static void FM_Enable(SPI_HandleTypeDef *SPI) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if (SPI == &MAIN_FM) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <FM_Enable+0x2c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d108      	bne.n	8000892 <FM_Enable+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <FM_Enable+0x30>)
 8000888:	f007 fe92 	bl	80085b0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f007 fbd9 	bl	8008044 <HAL_Delay>
	}
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000dc 	.word	0x200000dc
 80008a0:	40020400 	.word	0x40020400

080008a4 <FM_Disable>:

static void FM_Disable(SPI_HandleTypeDef *SPI) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	if (SPI == &MAIN_FM) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <FM_Disable+0x2c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d108      	bne.n	80008c6 <FM_Disable+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <FM_Disable+0x30>)
 80008bc:	f007 fe78 	bl	80085b0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f007 fbbf 	bl	8008044 <HAL_Delay>
	}

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000dc 	.word	0x200000dc
 80008d4:	40020400 	.word	0x40020400

080008d8 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4293      	cmp	r3, r2
 80008e8:	bf38      	it	cc
 80008ea:	4613      	movcc	r3, r2
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4293      	cmp	r3, r2
 8000908:	bf28      	it	cs
 800090a:	4613      	movcs	r3, r2
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	fbb3 f2f2 	udiv	r2, r3, r2
 800092a:	6839      	ldr	r1, [r7, #0]
 800092c:	fb01 f202 	mul.w	r2, r1, r2
 8000930:	1a9b      	subs	r3, r3, r2
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	1ad3      	subs	r3, r2, r3
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	3b01      	subs	r3, #1
 8000954:	6839      	ldr	r1, [r7, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ffde 	bl	8000918 <lfs_aligndown>
 800095c:	4603      	mov	r3, r0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3b01      	subs	r3, #1
 8000972:	fab3 f383 	clz	r3, r3
 8000976:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	fa93 f3a3 	rbit	r3, r3
 8000994:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff fc8f 	bl	80002d0 <__popcountsi2>
 80009b2:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	1ad3      	subs	r3, r2, r3
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80009e0:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ffee 	bl	80009d8 <lfs_fromle32>
 80009fc:	4603      	mov	r3, r0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffed 	bl	8000a06 <lfs_frombe32>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f009 fa80 	bl	8009f44 <malloc>
 8000a44:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f009 fa7c 	bl	8009f54 <free>
#else
    (void)p;
#endif
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68d8      	ldr	r0, [r3, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a96:	461a      	mov	r2, r3
 8000a98:	21ff      	movs	r1, #255	; 0xff
 8000a9a:	f009 fa7f 	bl	8009f9c <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac0:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8000ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ac6:	441a      	add	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d80a      	bhi.n	8000ae8 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8124 	beq.w	8000d24 <lfs_bd_read+0x274>
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	f0c0 811e 	bcc.w	8000d24 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8000ae8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000aec:	e11f      	b.n	8000d2e <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000af0:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d03f      	beq.n	8000b78 <lfs_bd_read+0xc8>
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d13a      	bne.n	8000b78 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d232      	bcs.n	8000b78 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d324      	bcc.n	8000b66 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	6859      	ldr	r1, [r3, #4]
 8000b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b26:	1acb      	subs	r3, r1, r3
 8000b28:	4413      	add	r3, r2
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	69b8      	ldr	r0, [r7, #24]
 8000b2e:	f7ff fee3 	bl	80008f8 <lfs_min>
 8000b32:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b3e:	1acb      	subs	r3, r1, r3
 8000b40:	4413      	add	r3, r2
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4619      	mov	r1, r3
 8000b46:	69f8      	ldr	r0, [r7, #28]
 8000b48:	f009 fa1a 	bl	8009f80 <memcpy>

                data += diff;
 8000b4c:	69fa      	ldr	r2, [r7, #28]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4413      	add	r3, r2
 8000b52:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4413      	add	r3, r2
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000b64:	e0de      	b.n	8000d24 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	4619      	mov	r1, r3
 8000b70:	69b8      	ldr	r0, [r7, #24]
 8000b72:	f7ff fec1 	bl	80008f8 <lfs_min>
 8000b76:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d13a      	bne.n	8000bf8 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d232      	bcs.n	8000bf8 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d324      	bcc.n	8000be6 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6859      	ldr	r1, [r3, #4]
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba6:	1acb      	subs	r3, r1, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	4619      	mov	r1, r3
 8000bac:	69b8      	ldr	r0, [r7, #24]
 8000bae:	f7ff fea3 	bl	80008f8 <lfs_min>
 8000bb2:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000bbe:	1acb      	subs	r3, r1, r3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	69f8      	ldr	r0, [r7, #28]
 8000bc8:	f009 f9da 	bl	8009f80 <memcpy>

                data += diff;
 8000bcc:	69fa      	ldr	r2, [r7, #28]
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	4413      	add	r3, r2
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000be4:	e09e      	b.n	8000d24 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	4619      	mov	r1, r3
 8000bf0:	69b8      	ldr	r0, [r7, #24]
 8000bf2:	f7ff fe81 	bl	80008f8 <lfs_min>
 8000bf6:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d336      	bcc.n	8000c6e <lfs_bd_read+0x1be>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c04:	695a      	ldr	r2, [r3, #20]
 8000c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c0c:	fb02 f201 	mul.w	r2, r2, r1
 8000c10:	1a9b      	subs	r3, r3, r2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d12b      	bne.n	8000c6e <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c1a:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d325      	bcc.n	8000c6e <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	69b8      	ldr	r0, [r7, #24]
 8000c2c:	f7ff fe74 	bl	8000918 <lfs_aligndown>
 8000c30:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c36:	685c      	ldr	r4, [r3, #4]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c46:	47a0      	blx	r4
 8000c48:	6178      	str	r0, [r7, #20]
            if (err) {
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <lfs_bd_read+0x1a4>
                return err;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	e06c      	b.n	8000d2e <lfs_bd_read+0x27e>
            }

            data += diff;
 8000c54:	69fa      	ldr	r2, [r7, #28]
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	4413      	add	r3, r2
 8000c5a:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	4413      	add	r3, r2
 8000c62:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8000c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000c6c:	e05a      	b.n	8000d24 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00a      	beq.n	8000c8c <lfs_bd_read+0x1dc>
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d305      	bcc.n	8000c8c <lfs_bd_read+0x1dc>
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <lfs_bd_read+0x288>)
 8000c82:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <lfs_bd_read+0x28c>)
 8000c84:	2174      	movs	r1, #116	; 0x74
 8000c86:	482e      	ldr	r0, [pc, #184]	; (8000d40 <lfs_bd_read+0x290>)
 8000c88:	f009 f902 	bl	8009e90 <__assert_func>
        rcache->block = block;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c90:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c9c:	f7ff fe3c 	bl	8000918 <lfs_aligndown>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8000ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	f7ff fe44 	bl	8000942 <lfs_alignup>
 8000cba:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	f7ff fe17 	bl	80008f8 <lfs_min>
 8000cca:	4602      	mov	r2, r0
                - rcache->off,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000cd0:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4610      	mov	r0, r2
 8000cdc:	f7ff fe0c 	bl	80008f8 <lfs_min>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cea:	685c      	ldr	r4, [r3, #4]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6819      	ldr	r1, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	462b      	mov	r3, r5
 8000d04:	47a0      	blx	r4
 8000d06:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	dd05      	ble.n	8000d1a <lfs_bd_read+0x26a>
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <lfs_bd_read+0x294>)
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <lfs_bd_read+0x28c>)
 8000d12:	217f      	movs	r1, #127	; 0x7f
 8000d14:	480a      	ldr	r0, [pc, #40]	; (8000d40 <lfs_bd_read+0x290>)
 8000d16:	f009 f8bb 	bl	8009e90 <__assert_func>
        if (err) {
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <lfs_bd_read+0x274>
            return err;
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	e004      	b.n	8000d2e <lfs_bd_read+0x27e>
    while (size > 0) {
 8000d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f47f aee1 	bne.w	8000aee <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bdb0      	pop	{r4, r5, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	0800af64 	.word	0x0800af64
 8000d3c:	0800bbd8 	.word	0x0800bbd8
 8000d40:	0800af94 	.word	0x0800af94
 8000d44:	0800afa8 	.word	0x0800afa8

08000d48 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b090      	sub	sp, #64	; 0x40
 8000d4c:	af04      	add	r7, sp, #16
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d62:	e039      	b.n	8000dd8 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2108      	movs	r1, #8
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fdc3 	bl	80008f8 <lfs_min>
 8000d72:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d78:	1ad1      	subs	r1, r2, r3
 8000d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7e:	4413      	add	r3, r2
 8000d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d82:	9203      	str	r2, [sp, #12]
 8000d84:	f107 0214 	add.w	r2, r7, #20
 8000d88:	9202      	str	r2, [sp, #8]
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	460b      	mov	r3, r1
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f7ff fe8a 	bl	8000ab0 <lfs_bd_read>
 8000d9c:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <lfs_bd_cmp+0x60>
            return err;
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	e01c      	b.n	8000de2 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dac:	18d1      	adds	r1, r2, r3
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db4:	4618      	mov	r0, r3
 8000db6:	f009 f8d5 	bl	8009f64 <memcmp>
 8000dba:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da01      	bge.n	8000dcc <lfs_bd_cmp+0x84>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e00a      	b.n	8000de2 <lfs_bd_cmp+0x9a>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e008      	b.n	8000de2 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	4413      	add	r3, r2
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d3c1      	bcc.n	8000d64 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3730      	adds	r7, #48	; 0x30
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b08e      	sub	sp, #56	; 0x38
 8000dee:	af04      	add	r7, sp, #16
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8000e00:	e030      	b.n	8000e64 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8000e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2108      	movs	r1, #8
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fd74 	bl	80008f8 <lfs_min>
 8000e10:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	1ad1      	subs	r1, r2, r3
 8000e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	4413      	add	r3, r2
 8000e1e:	6a3a      	ldr	r2, [r7, #32]
 8000e20:	9203      	str	r2, [sp, #12]
 8000e22:	f107 0214 	add.w	r2, r7, #20
 8000e26:	9202      	str	r2, [sp, #8]
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff fe3b 	bl	8000ab0 <lfs_bd_read>
 8000e3a:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <lfs_bd_crc+0x5c>
            return err;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	e013      	b.n	8000e6e <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8000e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f107 0114 	add.w	r1, r7, #20
 8000e4e:	6a3a      	ldr	r2, [r7, #32]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f006 fcaf 	bl	80077b4 <lfs_crc>
 8000e56:	4602      	mov	r2, r0
 8000e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e5a:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	4413      	add	r3, r2
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
 8000e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d3ca      	bcc.n	8000e02 <lfs_bd_crc+0x18>
    }

    return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af04      	add	r7, sp, #16
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8e:	d060      	beq.n	8000f52 <lfs_bd_flush+0xda>
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f113 0f02 	cmn.w	r3, #2
 8000e98:	d05b      	beq.n	8000f52 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d305      	bcc.n	8000eb2 <lfs_bd_flush+0x3a>
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <lfs_bd_flush+0xe4>)
 8000ea8:	4a2d      	ldr	r2, [pc, #180]	; (8000f60 <lfs_bd_flush+0xe8>)
 8000eaa:	21bc      	movs	r1, #188	; 0xbc
 8000eac:	482d      	ldr	r0, [pc, #180]	; (8000f64 <lfs_bd_flush+0xec>)
 8000eae:	f008 ffef 	bl	8009e90 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	f7ff fd3f 	bl	8000942 <lfs_alignup>
 8000ec4:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000eca:	689c      	ldr	r4, [r3, #8]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	6819      	ldr	r1, [r3, #0]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	462b      	mov	r3, r5
 8000ee2:	47a0      	blx	r4
 8000ee4:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	dd05      	ble.n	8000ef8 <lfs_bd_flush+0x80>
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <lfs_bd_flush+0xf0>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <lfs_bd_flush+0xe8>)
 8000ef0:	21c0      	movs	r1, #192	; 0xc0
 8000ef2:	481c      	ldr	r0, [pc, #112]	; (8000f64 <lfs_bd_flush+0xec>)
 8000ef4:	f008 ffcc 	bl	8009e90 <__assert_func>
        if (err) {
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <lfs_bd_flush+0x8a>
            return err;
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	e028      	b.n	8000f54 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d020      	beq.n	8000f4a <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f7ff fdaa 	bl	8000a64 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8000f1c:	69f8      	ldr	r0, [r7, #28]
 8000f1e:	9003      	str	r0, [sp, #12]
 8000f20:	9102      	str	r1, [sp, #8]
 8000f22:	9201      	str	r2, [sp, #4]
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f7ff ff0b 	bl	8000d48 <lfs_bd_cmp>
 8000f32:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da01      	bge.n	8000f3e <lfs_bd_flush+0xc6>
                return res;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	e00a      	b.n	8000f54 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8000f44:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000f48:	e004      	b.n	8000f54 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f7ff fd98 	bl	8000a82 <lfs_cache_zero>
    }

    return 0;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5c:	0800afb4 	.word	0x0800afb4
 8000f60:	0800bbe4 	.word	0x0800bbe4
 8000f64:	0800af94 	.word	0x0800af94
 8000f68:	0800afa8 	.word	0x0800afa8

08000f6c <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f7ff fd71 	bl	8000a64 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f7ff ff75 	bl	8000e78 <lfs_bd_flush>
 8000f8e:	6178      	str	r0, [r7, #20]
    if (err) {
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <lfs_bd_sync+0x2e>
        return err;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	e011      	b.n	8000fbe <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4798      	blx	r3
 8000fa8:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	dd05      	ble.n	8000fbc <lfs_bd_sync+0x50>
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <lfs_bd_sync+0x5c>)
 8000fb2:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <lfs_bd_sync+0x60>)
 8000fb4:	21e6      	movs	r1, #230	; 0xe6
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <lfs_bd_sync+0x64>)
 8000fb8:	f008 ff6a 	bl	8009e90 <__assert_func>
    return err;
 8000fbc:	697b      	ldr	r3, [r7, #20]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	0800afa8 	.word	0x0800afa8
 8000fcc:	0800bbf4 	.word	0x0800bbf4
 8000fd0:	0800af94 	.word	0x0800af94

08000fd4 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8000fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe4:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8000fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe8:	f113 0f02 	cmn.w	r3, #2
 8000fec:	d00a      	beq.n	8001004 <lfs_bd_prog+0x30>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d305      	bcc.n	8001004 <lfs_bd_prog+0x30>
 8000ff8:	4b47      	ldr	r3, [pc, #284]	; (8001118 <lfs_bd_prog+0x144>)
 8000ffa:	4a48      	ldr	r2, [pc, #288]	; (800111c <lfs_bd_prog+0x148>)
 8000ffc:	21f1      	movs	r1, #241	; 0xf1
 8000ffe:	4848      	ldr	r0, [pc, #288]	; (8001120 <lfs_bd_prog+0x14c>)
 8001000:	f008 ff46 	bl	8009e90 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8001004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001008:	441a      	add	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	429a      	cmp	r2, r3
 8001012:	d978      	bls.n	8001106 <lfs_bd_prog+0x132>
 8001014:	4b43      	ldr	r3, [pc, #268]	; (8001124 <lfs_bd_prog+0x150>)
 8001016:	4a41      	ldr	r2, [pc, #260]	; (800111c <lfs_bd_prog+0x148>)
 8001018:	21f2      	movs	r1, #242	; 0xf2
 800101a:	4841      	ldr	r0, [pc, #260]	; (8001120 <lfs_bd_prog+0x14c>)
 800101c:	f008 ff38 	bl	8009e90 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001026:	429a      	cmp	r2, r3
 8001028:	d151      	bne.n	80010ce <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800102e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001030:	429a      	cmp	r2, r3
 8001032:	d34c      	bcc.n	80010ce <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	4413      	add	r3, r2
                off >= pcache->off &&
 8001040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001042:	429a      	cmp	r2, r3
 8001044:	d243      	bcs.n	80010ce <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800104a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	6859      	ldr	r1, [r3, #4]
 8001050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001052:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8001054:	4413      	add	r3, r2
 8001056:	4619      	mov	r1, r3
 8001058:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800105a:	f7ff fc4d 	bl	80008f8 <lfs_min>
 800105e:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800106a:	1acb      	subs	r3, r1, r3
 800106c:	4413      	add	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	69f9      	ldr	r1, [r7, #28]
 8001072:	4618      	mov	r0, r3
 8001074:	f008 ff84 	bl	8009f80 <memcpy>

            data += diff;
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4413      	add	r3, r2
 800107e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8001080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4413      	add	r3, r2
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8001088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	6898      	ldr	r0, [r3, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fc1b 	bl	80008d8 <lfs_max>
 80010a2:	4602      	mov	r2, r0
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d127      	bne.n	8001106 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f7ff fedb 	bl	8000e78 <lfs_bd_flush>
 80010c2:	6178      	str	r0, [r7, #20]
                if (err) {
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d01d      	beq.n	8001106 <lfs_bd_prog+0x132>
                    return err;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	e01f      	b.n	800110e <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d6:	d006      	beq.n	80010e6 <lfs_bd_prog+0x112>
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <lfs_bd_prog+0x154>)
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <lfs_bd_prog+0x148>)
 80010dc:	f240 110f 	movw	r1, #271	; 0x10f
 80010e0:	480f      	ldr	r0, [pc, #60]	; (8001120 <lfs_bd_prog+0x14c>)
 80010e2:	f008 fed5 	bl	8009e90 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ea:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010f6:	f7ff fc0f 	bl	8000918 <lfs_aligndown>
 80010fa:	4602      	mov	r2, r0
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8001106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001108:	2b00      	cmp	r3, #0
 800110a:	d189      	bne.n	8001020 <lfs_bd_prog+0x4c>
    }

    return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	0800afd8 	.word	0x0800afd8
 800111c:	0800bc00 	.word	0x0800bc00
 8001120:	0800af94 	.word	0x0800af94
 8001124:	0800b010 	.word	0x0800b010
 8001128:	0800b034 	.word	0x0800b034

0800112c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d306      	bcc.n	800114e <lfs_bd_erase+0x22>
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <lfs_bd_erase+0x54>)
 8001142:	4a10      	ldr	r2, [pc, #64]	; (8001184 <lfs_bd_erase+0x58>)
 8001144:	f240 111d 	movw	r1, #285	; 0x11d
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <lfs_bd_erase+0x5c>)
 800114a:	f008 fea1 	bl	8009e90 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001158:	6839      	ldr	r1, [r7, #0]
 800115a:	4610      	mov	r0, r2
 800115c:	4798      	blx	r3
 800115e:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	dd06      	ble.n	8001174 <lfs_bd_erase+0x48>
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <lfs_bd_erase+0x60>)
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <lfs_bd_erase+0x58>)
 800116a:	f240 111f 	movw	r1, #287	; 0x11f
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <lfs_bd_erase+0x5c>)
 8001170:	f008 fe8e 	bl	8009e90 <__assert_func>
    return err;
 8001174:	68fb      	ldr	r3, [r7, #12]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	0800b058 	.word	0x0800b058
 8001184:	0800bc0c 	.word	0x0800bc0c
 8001188:	0800af94 	.word	0x0800af94
 800118c:	0800afa8 	.word	0x0800afa8

08001190 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3304      	adds	r3, #4
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	601a      	str	r2, [r3, #0]
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ca:	d005      	beq.n	80011d8 <lfs_pair_isnull+0x1e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3304      	adds	r3, #4
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d6:	d101      	bne.n	80011dc <lfs_pair_isnull+0x22>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <lfs_pair_isnull+0x24>
 80011dc:	2300      	movs	r3, #0
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d017      	beq.n	8001236 <lfs_pair_cmp+0x46>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3304      	adds	r3, #4
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d00f      	beq.n	8001236 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3304      	adds	r3, #4
 800121e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001220:	429a      	cmp	r2, r3
 8001222:	d008      	beq.n	8001236 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3304      	adds	r3, #4
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800122e:	429a      	cmp	r2, r3
 8001230:	d001      	beq.n	8001236 <lfs_pair_cmp+0x46>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <lfs_pair_cmp+0x48>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d107      	bne.n	800126a <lfs_pair_issync+0x26>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3304      	adds	r3, #4
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	3304      	adds	r3, #4
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d00d      	beq.n	8001286 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3304      	adds	r3, #4
 8001272:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001274:	429a      	cmp	r2, r3
 8001276:	d108      	bne.n	800128a <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3304      	adds	r3, #4
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d101      	bne.n	800128a <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <lfs_pair_issync+0x48>
 800128a:	2300      	movs	r3, #0
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800129e:	b590      	push	{r4, r7, lr}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fb94 	bl	80009d8 <lfs_fromle32>
 80012b0:	4602      	mov	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3304      	adds	r3, #4
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	1d1c      	adds	r4, r3, #4
 80012c0:	4610      	mov	r0, r2
 80012c2:	f7ff fb89 	bl	80009d8 <lfs_fromle32>
 80012c6:	4603      	mov	r3, r0
 80012c8:	6023      	str	r3, [r4, #0]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}

080012d2 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80012d2:	b590      	push	{r4, r7, lr}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fb85 	bl	80009ee <lfs_tole32>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3304      	adds	r3, #4
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	1d1c      	adds	r4, r3, #4
 80012f4:	4610      	mov	r0, r2
 80012f6:	f7ff fb7a 	bl	80009ee <lfs_tole32>
 80012fa:	4603      	mov	r3, r0
 80012fc:	6023      	str	r3, [r4, #0]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}

08001306 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	43db      	mvns	r3, r3
 8001312:	0fdb      	lsrs	r3, r3, #31
 8001314:	b2db      	uxtb	r3, r3
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	059b      	lsls	r3, r3, #22
 800132e:	159b      	asrs	r3, r3, #22
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	0d1b      	lsrs	r3, r3, #20
 8001354:	b29b      	uxth	r3, r3
 8001356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800135a:	b29b      	uxth	r3, r3
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	0d1b      	lsrs	r3, r3, #20
 8001374:	b29b      	uxth	r3, r3
 8001376:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 800137a:	b29b      	uxth	r3, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0d1b      	lsrs	r3, r3, #20
 8001394:	b29b      	uxth	r3, r3
 8001396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139a:	b29b      	uxth	r3, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	0d1b      	lsrs	r3, r3, #20
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffec 	bl	80013a8 <lfs_tag_chunk>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b25b      	sxtb	r3, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	0a9b      	lsrs	r3, r3, #10
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013ee:	b29b      	uxth	r3, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff7f 	bl	8001322 <lfs_tag_isdelete>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ffe5 	bl	80013fc <lfs_tag_size>
 8001432:	4603      	mov	r3, r0
 8001434:	3304      	adds	r3, #4
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800143e:	b480      	push	{r7}
 8001440:	b085      	sub	sp, #20
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e012      	b.n	8001474 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	6819      	ldr	r1, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	4403      	add	r3, r0
 800146a:	404a      	eors	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b02      	cmp	r3, #2
 8001478:	dde9      	ble.n	800144e <lfs_gstate_xor+0x10>
    }
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	e00b      	b.n	80014ae <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <lfs_gstate_iszero+0x20>
            return false;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e006      	b.n	80014b6 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	ddf0      	ble.n	8001496 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff94 	bl	80013fc <lfs_tag_size>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff81 	bl	80013fc <lfs_tag_size>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b2db      	uxtb	r3, r3
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff18 	bl	8001348 <lfs_tag_type1>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf14      	ite	ne
 800151e:	2301      	movne	r3, #1
 8001520:	2300      	moveq	r3, #0
 8001522:	b2db      	uxtb	r3, r3
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5f 	bl	80013fc <lfs_tag_size>
 800153e:	4603      	mov	r3, r0
 8001540:	0a5b      	lsrs	r3, r3, #9
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf14      	ite	ne
 8001546:	2301      	movne	r3, #1
 8001548:	2300      	moveq	r3, #0
 800154a:	b2db      	uxtb	r3, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fef0 	bl	8001348 <lfs_tag_type1>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00a      	beq.n	8001584 <lfs_gstate_hasmovehere+0x30>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fe3b 	bl	80011f0 <lfs_pair_cmp>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <lfs_gstate_hasmovehere+0x30>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <lfs_gstate_hasmovehere+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	b2db      	uxtb	r3, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fa19 	bl	80009d8 <lfs_fromle32>
 80015a6:	4602      	mov	r2, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fa11 	bl	80009d8 <lfs_fromle32>
 80015b6:	4602      	mov	r2, r0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fa09 	bl	80009d8 <lfs_fromle32>
 80015c6:	4602      	mov	r2, r0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fa04 	bl	80009ee <lfs_tole32>
 80015e6:	4602      	mov	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f9fc 	bl	80009ee <lfs_tole32>
 80015f6:	4602      	mov	r2, r0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff f9f4 	bl	80009ee <lfs_tole32>
 8001606:	4602      	mov	r2, r0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff f9d9 	bl	80009d8 <lfs_fromle32>
 8001626:	4602      	mov	r2, r0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f9d1 	bl	80009d8 <lfs_fromle32>
 8001636:	4602      	mov	r2, r0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	605a      	str	r2, [r3, #4]
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff f9cc 	bl	80009ee <lfs_tole32>
 8001656:	4602      	mov	r2, r0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff f9c4 	bl	80009ee <lfs_tole32>
 8001666:	4602      	mov	r2, r0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	605a      	str	r2, [r3, #4]
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff f9a9 	bl	80009d8 <lfs_fromle32>
 8001686:	4602      	mov	r2, r0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff f9a1 	bl	80009d8 <lfs_fromle32>
 8001696:	4602      	mov	r2, r0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	605a      	str	r2, [r3, #4]
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff f99c 	bl	80009ee <lfs_tole32>
 80016b6:	4602      	mov	r2, r0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f994 	bl	80009ee <lfs_tole32>
 80016c6:	4602      	mov	r2, r0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	605a      	str	r2, [r3, #4]
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff f979 	bl	80009d8 <lfs_fromle32>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f971 	bl	80009d8 <lfs_fromle32>
 80016f6:	4602      	mov	r2, r0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff f969 	bl	80009d8 <lfs_fromle32>
 8001706:	4602      	mov	r2, r0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff f961 	bl	80009d8 <lfs_fromle32>
 8001716:	4602      	mov	r2, r0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f959 	bl	80009d8 <lfs_fromle32>
 8001726:	4602      	mov	r2, r0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff f951 	bl	80009d8 <lfs_fromle32>
 8001736:	4602      	mov	r2, r0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	615a      	str	r2, [r3, #20]
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f94c 	bl	80009ee <lfs_tole32>
 8001756:	4602      	mov	r2, r0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff f944 	bl	80009ee <lfs_tole32>
 8001766:	4602      	mov	r2, r0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff f93c 	bl	80009ee <lfs_tole32>
 8001776:	4602      	mov	r2, r0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff f934 	bl	80009ee <lfs_tole32>
 8001786:	4602      	mov	r2, r0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff f92c 	bl	80009ee <lfs_tole32>
 8001796:	4602      	mov	r2, r0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff f924 	bl	80009ee <lfs_tole32>
 80017a6:	4602      	mov	r2, r0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	615a      	str	r2, [r3, #20]
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e009      	b.n	80017d8 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d101      	bne.n	80017d2 <lfs_mlist_isopen+0x1e>
            return true;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e007      	b.n	80017e2 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f1      	bne.n	80017c4 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80017ee:	b480      	push	{r7}
 80017f0:	b085      	sub	sp, #20
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3328      	adds	r3, #40	; 0x28
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	e00d      	b.n	800181c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d105      	bne.n	8001816 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	601a      	str	r2, [r3, #0]
            break;
 8001814:	e007      	b.n	8001826 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ed      	bne.n	8001800 <lfs_mlist_remove+0x12>
        }
    }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <lfs_fs_disk_version+0x18>)
    }
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	00020001 	.word	0x00020001

08001874 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ffeb 	bl	8001858 <lfs_fs_disk_version>
 8001882:	4603      	mov	r3, r0
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	b29b      	uxth	r3, r3

}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ffdd 	bl	8001858 <lfs_fs_disk_version>
 800189e:	4603      	mov	r3, r0
 80018a0:	b29b      	uxth	r3, r3
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->lookahead.next = 0;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ckpoint(lfs);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffe5 	bl	80018aa <lfs_alloc_ckpoint>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001902:	4413      	add	r3, r2
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8001908:	fbb3 f1f2 	udiv	r1, r3, r2
 800190c:	fb02 f201 	mul.w	r2, r2, r1
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	429a      	cmp	r2, r3
 800191c:	d212      	bcs.n	8001944 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	441a      	add	r2, r3
 8001928:	7811      	ldrb	r1, [r2, #0]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f002 0207 	and.w	r2, r2, #7
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800193c:	4403      	add	r3, r0
 800193e:	430a      	orrs	r2, r1
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	4413      	add	r3, r2
            % lfs->block_count;
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800196a:	fbb3 f1f2 	udiv	r1, r3, r2
 800196e:	fb02 f201 	mul.w	r2, r2, r1
 8001972:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->lookahead.next = 0;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    lfs->lookahead.size = lfs_min(
 8001984:	00da      	lsls	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198a:	4619      	mov	r1, r3
 800198c:	4610      	mov	r0, r2
 800198e:	f7fe ffb3 	bl	80008f8 <lfs_min>
 8001992:	4602      	mov	r2, r0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	659a      	str	r2, [r3, #88]	; 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	461a      	mov	r2, r3
 80019a4:	2100      	movs	r1, #0
 80019a6:	f008 faf9 	bl	8009f9c <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 80019aa:	2301      	movs	r3, #1
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4909      	ldr	r1, [pc, #36]	; (80019d4 <lfs_alloc_scan+0x80>)
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f004 ffd9 	bl	8006968 <lfs_fs_traverse_>
 80019b6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d004      	beq.n	80019c8 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff81 	bl	80018c6 <lfs_alloc_drop>
        return err;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	e000      	b.n	80019ca <lfs_alloc_scan+0x76>
    }

    return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	080018e9 	.word	0x080018e9

080019d8 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af02      	add	r7, sp, #8
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80019e2:	e04d      	b.n	8001a80 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d131      	bne.n	8001a6c <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	4413      	add	r3, r2
                        % lfs->block_count;
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001a16:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a1a:	fb02 f201 	mul.w	r2, r2, r1
 8001a1e:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->lookahead.ckpoint -= 1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	1e5a      	subs	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	661a      	str	r2, [r3, #96]	; 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d211      	bcs.n	8001a68 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1dd      	bne.n	8001a24 <lfs_alloc+0x4c>
                        return 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e032      	b.n	8001ad2 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->lookahead.ckpoint -= 1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7a:	1e5a      	subs	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	661a      	str	r2, [r3, #96]	; 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d3ab      	bcc.n	80019e4 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d116      	bne.n	8001ac2 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	4413      	add	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001aa2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001aa6:	fb02 f201 	mul.w	r2, r2, r1
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <lfs_alloc+0x104>)
 8001aae:	9200      	str	r2, [sp, #0]
 8001ab0:	f240 22ba 	movw	r2, #698	; 0x2ba
 8001ab4:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <lfs_alloc+0x108>)
 8001ab6:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <lfs_alloc+0x10c>)
 8001ab8:	f008 fe10 	bl	800a6dc <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 8001abc:	f06f 031b 	mvn.w	r3, #27
 8001ac0:	e007      	b.n	8001ad2 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff46 	bl	8001954 <lfs_alloc_scan>
 8001ac8:	60f8      	str	r0, [r7, #12]
        if(err) {
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d088      	beq.n	80019e2 <lfs_alloc+0xa>
            return err;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	0800b0a0 	.word	0x0800b0a0
 8001ae0:	0800af94 	.word	0x0800af94
 8001ae4:	0800b074 	.word	0x0800b074

08001ae8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b08f      	sub	sp, #60	; 0x3c
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	333c      	adds	r3, #60	; 0x3c
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fd20 	bl	8001554 <lfs_gstate_hasmovehere>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80c9 	beq.w	8001cae <lfs_dir_getslice+0x1c6>
            lfs_tag_id(gmask) != 0) {
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fc5d 	bl	80013dc <lfs_tag_id>
 8001b22:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80c2 	beq.w	8001cae <lfs_dir_getslice+0x1c6>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fc54 	bl	80013dc <lfs_tag_id>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461c      	mov	r4, r3
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f7ff fc4f 	bl	80013dc <lfs_tag_id>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	429c      	cmp	r4, r3
 8001b42:	d102      	bne.n	8001b4a <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 8001b44:	f06f 0301 	mvn.w	r3, #1
 8001b48:	e0bd      	b.n	8001cc6 <lfs_dir_getslice+0x1de>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fc44 	bl	80013dc <lfs_tag_id>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461c      	mov	r4, r3
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f7ff fc3f 	bl	80013dc <lfs_tag_id>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	429c      	cmp	r4, r3
 8001b62:	f080 80a4 	bcs.w	8001cae <lfs_dir_getslice+0x1c6>
            gdiff -= LFS_MKTAG(0, 1, 0);
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001b6c:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001b6e:	e09e      	b.n	8001cae <lfs_dir_getslice+0x1c6>
        off -= lfs_tag_dsize(ntag);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fc4f 	bl	8001416 <lfs_tag_dsize>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	9203      	str	r2, [sp, #12]
 8001b8e:	f107 0210 	add.w	r2, r7, #16
 8001b92:	9202      	str	r2, [sp, #8]
 8001b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b96:	9201      	str	r2, [sp, #4]
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7fe ff85 	bl	8000ab0 <lfs_bd_read>
 8001ba6:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <lfs_dir_getslice+0xca>
            return err;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	e089      	b.n	8001cc6 <lfs_dir_getslice+0x1de>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe ff26 	bl	8000a06 <lfs_frombe32>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4053      	eors	r3, r2
 8001bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bc4:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fc08 	bl	80013dc <lfs_tag_id>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d02b      	beq.n	8001c2a <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001bd2:	69f8      	ldr	r0, [r7, #28]
 8001bd4:	f7ff fbb8 	bl	8001348 <lfs_tag_type1>
 8001bd8:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bde:	d124      	bne.n	8001c2a <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001be0:	69f8      	ldr	r0, [r7, #28]
 8001be2:	f7ff fbfb 	bl	80013dc <lfs_tag_id>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461c      	mov	r4, r3
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fbf3 	bl	80013dc <lfs_tag_id>
 8001bf6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001bf8:	429c      	cmp	r4, r3
 8001bfa:	d816      	bhi.n	8001c2a <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	1ad2      	subs	r2, r2, r3
 8001c02:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <lfs_dir_getslice+0x1e8>)
 8001c04:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001c06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d102      	bne.n	8001c1a <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8001c14:	f06f 0301 	mvn.w	r3, #1
 8001c18:	e055      	b.n	8001cc6 <lfs_dir_getslice+0x1de>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001c1a:	69f8      	ldr	r0, [r7, #28]
 8001c1c:	f7ff fbd1 	bl	80013c2 <lfs_tag_splice>
 8001c20:	4603      	mov	r3, r0
 8001c22:	029a      	lsls	r2, r3, #10
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	4413      	add	r3, r2
 8001c28:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	1ad2      	subs	r2, r2, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	405a      	eors	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d138      	bne.n	8001cae <lfs_dir_getslice+0x1c6>
            if (lfs_tag_isdelete(tag)) {
 8001c3c:	69f8      	ldr	r0, [r7, #28]
 8001c3e:	f7ff fb70 	bl	8001322 <lfs_tag_isdelete>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <lfs_dir_getslice+0x166>
                return LFS_ERR_NOENT;
 8001c48:	f06f 0301 	mvn.w	r3, #1
 8001c4c:	e03b      	b.n	8001cc6 <lfs_dir_getslice+0x1de>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001c4e:	69f8      	ldr	r0, [r7, #28]
 8001c50:	f7ff fbd4 	bl	80013fc <lfs_tag_size>
 8001c54:	4603      	mov	r3, r0
 8001c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fe4d 	bl	80008f8 <lfs_min>
 8001c5e:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c6a:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001c6c:	3204      	adds	r2, #4
 8001c6e:	6979      	ldr	r1, [r7, #20]
 8001c70:	9103      	str	r1, [sp, #12]
 8001c72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c74:	9102      	str	r1, [sp, #8]
 8001c76:	9201      	str	r2, [sp, #4]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f7fe ff15 	bl	8000ab0 <lfs_bd_read>
 8001c86:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <lfs_dir_getslice+0x1aa>
                return err;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	e019      	b.n	8001cc6 <lfs_dir_getslice+0x1de>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001c92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	18d0      	adds	r0, r2, r3
 8001c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	f008 f97b 	bl	8009f9c <memset>

            return tag + gdiff;
 8001ca6:	6a3a      	ldr	r2, [r7, #32]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	4413      	add	r3, r2
 8001cac:	e00b      	b.n	8001cc6 <lfs_dir_getslice+0x1de>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fbb0 	bl	8001416 <lfs_tag_dsize>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	3304      	adds	r3, #4
 8001cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f4bf af57 	bcs.w	8001b70 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 8001cc2:	f06f 0301 	mvn.w	r3, #1
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	372c      	adds	r7, #44	; 0x2c
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	000ffc00 	.word	0x000ffc00

08001cd4 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af04      	add	r7, sp, #16
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f7ff fb8a 	bl	80013fc <lfs_tag_size>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7ff fef4 	bl	8001ae8 <lfs_dir_getslice>
 8001d00:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b08c      	sub	sp, #48	; 0x30
 8001d0e:	af04      	add	r7, sp, #16
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d20:	441a      	add	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f240 80c0 	bls.w	8001eae <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001d2e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001d32:	e0c1      	b.n	8001eb8 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d36:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03f      	beq.n	8001dbe <lfs_dir_getread+0xb4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f113 0f02 	cmn.w	r3, #2
 8001d46:	d13a      	bne.n	8001dbe <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d232      	bcs.n	8001dbe <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d324      	bcc.n	8001dac <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6859      	ldr	r1, [r3, #4]
 8001d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6c:	1acb      	subs	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	69b8      	ldr	r0, [r7, #24]
 8001d74:	f7fe fdc0 	bl	80008f8 <lfs_min>
 8001d78:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d84:	1acb      	subs	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	69f8      	ldr	r0, [r7, #28]
 8001d8e:	f008 f8f7 	bl	8009f80 <memcpy>

                data += diff;
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	4413      	add	r3, r2
 8001d98:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	4413      	add	r3, r2
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001da2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001daa:	e080      	b.n	8001eae <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4619      	mov	r1, r3
 8001db6:	69b8      	ldr	r0, [r7, #24]
 8001db8:	f7fe fd9e 	bl	80008f8 <lfs_min>
 8001dbc:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f113 0f02 	cmn.w	r3, #2
 8001dc6:	d13a      	bne.n	8001e3e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d232      	bcs.n	8001e3e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d324      	bcc.n	8001e2c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dec:	1acb      	subs	r3, r1, r3
 8001dee:	4413      	add	r3, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	69b8      	ldr	r0, [r7, #24]
 8001df4:	f7fe fd80 	bl	80008f8 <lfs_min>
 8001df8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e04:	1acb      	subs	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	69f8      	ldr	r0, [r7, #28]
 8001e0e:	f008 f8b7 	bl	8009f80 <memcpy>

                data += diff;
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	4413      	add	r3, r2
 8001e18:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	4413      	add	r3, r2
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001e2a:	e040      	b.n	8001eae <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	69b8      	ldr	r0, [r7, #24]
 8001e38:	f7fe fd5e 	bl	80008f8 <lfs_min>
 8001e3c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f06f 0201 	mvn.w	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e50:	f7fe fd62 	bl	8000918 <lfs_aligndown>
 8001e54:	4602      	mov	r2, r0
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	441a      	add	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f7fe fd6a 	bl	8000942 <lfs_alignup>
 8001e6e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	4619      	mov	r1, r3
 8001e78:	4610      	mov	r0, r2
 8001e7a:	f7fe fd3d 	bl	80008f8 <lfs_min>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e8c:	6839      	ldr	r1, [r7, #0]
 8001e8e:	6889      	ldr	r1, [r1, #8]
 8001e90:	9102      	str	r1, [sp, #8]
 8001e92:	9201      	str	r2, [sp, #4]
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff fe23 	bl	8001ae8 <lfs_dir_getslice>
 8001ea2:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	da01      	bge.n	8001eae <lfs_dir_getread+0x1a4>
            return err;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	e004      	b.n	8001eb8 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f af3f 	bne.w	8001d34 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <lfs_dir_traverse_filter+0x1e>
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <lfs_dir_traverse_filter+0xac>)
 8001edc:	e000      	b.n	8001ee0 <lfs_dir_traverse_filter+0x20>
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001ee0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	405a      	eors	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d014      	beq.n	8001f1c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fa13 	bl	8001322 <lfs_tag_isdelete>
 8001efc:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <lfs_dir_traverse_filter+0xac>)
 8001f06:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	6819      	ldr	r1, [r3, #0]
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <lfs_dir_traverse_filter+0xb4>)
 8001f0e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001f10:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8001f14:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d104      	bne.n	8001f26 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
        return true;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e01e      	b.n	8001f64 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001f26:	68b8      	ldr	r0, [r7, #8]
 8001f28:	f7ff fa0e 	bl	8001348 <lfs_tag_type1>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f32:	d116      	bne.n	8001f62 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001f34:	68b8      	ldr	r0, [r7, #8]
 8001f36:	f7ff fa51 	bl	80013dc <lfs_tag_id>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461c      	mov	r4, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fa4a 	bl	80013dc <lfs_tag_id>
 8001f48:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001f4a:	429c      	cmp	r4, r3
 8001f4c:	d809      	bhi.n	8001f62 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001f4e:	68b8      	ldr	r0, [r7, #8]
 8001f50:	f7ff fa37 	bl	80013c2 <lfs_tag_splice>
 8001f54:	4603      	mov	r3, r0
 8001f56:	029a      	lsls	r2, r3, #10
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	441a      	add	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd90      	pop	{r4, r7, pc}
 8001f6c:	7ffffc00 	.word	0x7ffffc00
 8001f70:	700ffc00 	.word	0x700ffc00
 8001f74:	000ffc00 	.word	0x000ffc00

08001f78 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b0c1      	sub	sp, #260	; 0x104
 8001f7c:	af04      	add	r7, sp, #16
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8001f8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001f96:	6838      	ldr	r0, [r7, #0]
 8001f98:	f7ff fa3d 	bl	8001416 <lfs_tag_dsize>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d237      	bcs.n	800201a <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8001faa:	6838      	ldr	r0, [r7, #0]
 8001fac:	f7ff fa33 	bl	8001416 <lfs_tag_dsize>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001fb8:	68f9      	ldr	r1, [r7, #12]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	9203      	str	r2, [sp, #12]
 8001fc2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001fc6:	9202      	str	r2, [sp, #8]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	9201      	str	r2, [sp, #4]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2304      	movs	r3, #4
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7fe fd6b 	bl	8000ab0 <lfs_bd_read>
 8001fda:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8001fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <lfs_dir_traverse+0x74>
                    return err;
 8001fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fea:	e3d0      	b.n	800278e <lfs_dir_traverse+0x816>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fd09 	bl	8000a06 <lfs_frombe32>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	4053      	eors	r3, r2
 8001ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ffe:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3304      	adds	r3, #4
 800200a:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 800200c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8002014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	e01b      	b.n	8002052 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800201a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800201e:	2b00      	cmp	r3, #0
 8002020:	dd13      	ble.n	800204a <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8002022:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 800202a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8002034:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002038:	3308      	adds	r3, #8
 800203a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 800203e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002042:	3b01      	subs	r3, #1
 8002044:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002048:	e003      	b.n	8002052 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8002050:	e2bd      	b.n	80025ce <lfs_dir_traverse+0x656>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8002052:	4b86      	ldr	r3, [pc, #536]	; (800226c <lfs_dir_traverse+0x2f4>)
 8002054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8002058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800205a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800205e:	405a      	eors	r2, r3
 8002060:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002064:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002068:	400b      	ands	r3, r1
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 82a1 	bne.w	80025b4 <lfs_dir_traverse+0x63c>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8002072:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002076:	f7ff f9b1 	bl	80013dc <lfs_tag_id>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80ff 	beq.w	8002280 <lfs_dir_traverse+0x308>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8002082:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002086:	2b02      	cmp	r3, #2
 8002088:	d906      	bls.n	8002098 <lfs_dir_traverse+0x120>
 800208a:	4b79      	ldr	r3, [pc, #484]	; (8002270 <lfs_dir_traverse+0x2f8>)
 800208c:	4a79      	ldr	r2, [pc, #484]	; (8002274 <lfs_dir_traverse+0x2fc>)
 800208e:	f240 31bf 	movw	r1, #959	; 0x3bf
 8002092:	4879      	ldr	r0, [pc, #484]	; (8002278 <lfs_dir_traverse+0x300>)
 8002094:	f007 fefc 	bl	8009e90 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8002098:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800209a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020aa:	4413      	add	r3, r2
 80020ac:	3b98      	subs	r3, #152	; 0x98
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020b6:	4613      	mov	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020c2:	4413      	add	r3, r2
 80020c4:	3b94      	subs	r3, #148	; 0x94
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020da:	4413      	add	r3, r2
 80020dc:	3b90      	subs	r3, #144	; 0x90
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80020f2:	4413      	add	r3, r2
 80020f4:	3b8c      	subs	r3, #140	; 0x8c
 80020f6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800210c:	4413      	add	r3, r2
 800210e:	3b88      	subs	r3, #136	; 0x88
 8002110:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800211a:	4613      	mov	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002126:	4413      	add	r3, r2
 8002128:	3b84      	subs	r3, #132	; 0x84
 800212a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002134:	4613      	mov	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002140:	4413      	add	r3, r2
 8002142:	3b80      	subs	r3, #128	; 0x80
 8002144:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800215a:	4413      	add	r3, r2
 800215c:	3b7c      	subs	r3, #124	; 0x7c
 800215e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002174:	4413      	add	r3, r2
 8002176:	3b7a      	subs	r3, #122	; 0x7a
 8002178:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800217c:	801a      	strh	r2, [r3, #0]
 800217e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002182:	4613      	mov	r3, r2
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800218e:	4413      	add	r3, r2
 8002190:	3b78      	subs	r3, #120	; 0x78
 8002192:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002196:	801a      	strh	r2, [r3, #0]
 8002198:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80021a8:	4413      	add	r3, r2
 80021aa:	3b74      	subs	r3, #116	; 0x74
 80021ac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80021c2:	4413      	add	r3, r2
 80021c4:	3b70      	subs	r3, #112	; 0x70
 80021c6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021d0:	4613      	mov	r3, r2
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80021dc:	4413      	add	r3, r2
 80021de:	3b6c      	subs	r3, #108	; 0x6c
 80021e0:	6019      	str	r1, [r3, #0]
 80021e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80021f2:	4413      	add	r3, r2
 80021f4:	3b68      	subs	r3, #104	; 0x68
 80021f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800220c:	4413      	add	r3, r2
 800220e:	3b68      	subs	r3, #104	; 0x68
 8002210:	3304      	adds	r3, #4
 8002212:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800221a:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800221e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002222:	3301      	adds	r3, #1
 8002224:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <lfs_dir_traverse+0x304>)
 8002248:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 800224c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	3328      	adds	r3, #40	; 0x28
 8002260:	440b      	add	r3, r1
 8002262:	3304      	adds	r3, #4
 8002264:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002268:	e695      	b.n	8001f96 <lfs_dir_traverse+0x1e>
 800226a:	bf00      	nop
 800226c:	7ff00000 	.word	0x7ff00000
 8002270:	0800b0a4 	.word	0x0800b0a4
 8002274:	0800bc1c 	.word	0x0800bc1c
 8002278:	0800af94 	.word	0x0800af94
 800227c:	08001ec1 	.word	0x08001ec1
                continue;
            }
        }

popped:
 8002280:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8002282:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002286:	f7ff f8a9 	bl	80013dc <lfs_tag_id>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d015      	beq.n	80022bc <lfs_dir_traverse+0x344>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8002290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f8a2 	bl	80013dc <lfs_tag_id>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800229c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f200 8189 	bhi.w	80025b8 <lfs_dir_traverse+0x640>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 80022a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f897 	bl	80013dc <lfs_tag_id>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f240 817e 	bls.w	80025b8 <lfs_dir_traverse+0x640>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 80022bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f862 	bl	8001388 <lfs_tag_type3>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f43f ae65 	beq.w	8001f96 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80022cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f85a 	bl	8001388 <lfs_tag_type3>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461a      	mov	r2, r3
 80022d8:	f240 1301 	movw	r3, #257	; 0x101
 80022dc:	429a      	cmp	r2, r3
 80022de:	f040 80ed 	bne.w	80024bc <lfs_dir_traverse+0x544>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80022e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022e6:	4ab7      	ldr	r2, [pc, #732]	; (80025c4 <lfs_dir_traverse+0x64c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	f000 8167 	beq.w	80025bc <lfs_dir_traverse+0x644>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80022ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022fe:	4413      	add	r3, r2
 8002300:	3b98      	subs	r3, #152	; 0x98
 8002302:	4618      	mov	r0, r3
 8002304:	233c      	movs	r3, #60	; 0x3c
 8002306:	461a      	mov	r2, r3
 8002308:	2100      	movs	r1, #0
 800230a:	f007 fe47 	bl	8009f9c <memset>
 800230e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800231e:	4413      	add	r3, r2
 8002320:	3b98      	subs	r3, #152	; 0x98
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002336:	4413      	add	r3, r2
 8002338:	3b94      	subs	r3, #148	; 0x94
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800234e:	4413      	add	r3, r2
 8002350:	3b90      	subs	r3, #144	; 0x90
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002366:	4413      	add	r3, r2
 8002368:	3b8c      	subs	r3, #140	; 0x8c
 800236a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002374:	4613      	mov	r3, r2
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002380:	4413      	add	r3, r2
 8002382:	3b88      	subs	r3, #136	; 0x88
 8002384:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800239a:	4413      	add	r3, r2
 800239c:	3b84      	subs	r3, #132	; 0x84
 800239e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023a8:	4613      	mov	r3, r2
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023b4:	4413      	add	r3, r2
 80023b6:	3b80      	subs	r3, #128	; 0x80
 80023b8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023ce:	4413      	add	r3, r2
 80023d0:	3b7c      	subs	r3, #124	; 0x7c
 80023d2:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80023d6:	801a      	strh	r2, [r3, #0]
 80023d8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80023e8:	4413      	add	r3, r2
 80023ea:	3b7a      	subs	r3, #122	; 0x7a
 80023ec:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80023f0:	801a      	strh	r2, [r3, #0]
 80023f2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002402:	4413      	add	r3, r2
 8002404:	3b78      	subs	r3, #120	; 0x78
 8002406:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800240a:	801a      	strh	r2, [r3, #0]
 800240c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800241c:	4413      	add	r3, r2
 800241e:	3b74      	subs	r3, #116	; 0x74
 8002420:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002436:	4413      	add	r3, r2
 8002438:	3b70      	subs	r3, #112	; 0x70
 800243a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800243e:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8002440:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002444:	3301      	adds	r3, #1
 8002446:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 800244a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe ffd5 	bl	80013fc <lfs_tag_size>
 8002452:	4603      	mov	r3, r0
 8002454:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe ffbe 	bl	80013dc <lfs_tag_id>
 8002460:	4603      	mov	r3, r0
 8002462:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8002466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246a:	60bb      	str	r3, [r7, #8]
            off = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295
 8002474:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8002482:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <lfs_dir_traverse+0x650>)
 8002484:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002488:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800248c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8002490:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002494:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8002498:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800249c:	3301      	adds	r3, #1
 800249e:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 80024a2:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 80024a6:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80024b2:	4413      	add	r3, r2
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 80024ba:	e56c      	b.n	8001f96 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 80024bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe ff62 	bl	8001388 <lfs_tag_type3>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80024ca:	d159      	bne.n	8002580 <lfs_dir_traverse+0x608>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024d2:	e04b      	b.n	800256c <lfs_dir_traverse+0x5f4>
                const struct lfs_attr *a = buffer;
 80024d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80024dc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	461a      	mov	r2, r3
 80024ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80024f6:	051c      	lsls	r4, r3, #20
 80024f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe ff6e 	bl	80013dc <lfs_tag_id>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002508:	4413      	add	r3, r2
 800250a:	029b      	lsls	r3, r3, #10
 800250c:	ea44 0103 	orr.w	r1, r4, r3
 8002510:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	461a      	mov	r2, r3
 800251e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002522:	4413      	add	r3, r2
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8002528:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	461a      	mov	r2, r3
 8002536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800253a:	4413      	add	r3, r2
 800253c:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800253e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002542:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002546:	4798      	blx	r3
 8002548:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 800254c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002550:	2b00      	cmp	r3, #0
 8002552:	da02      	bge.n	800255a <lfs_dir_traverse+0x5e2>
                    return res;
 8002554:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002558:	e119      	b.n	800278e <lfs_dir_traverse+0x816>
                }

                if (res) {
 800255a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d12e      	bne.n	80025c0 <lfs_dir_traverse+0x648>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002566:	3301      	adds	r3, #1
 8002568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800256c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe ff44 	bl	80013fc <lfs_tag_size>
 8002574:	4602      	mov	r2, r0
 8002576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800257a:	4293      	cmp	r3, r2
 800257c:	d3aa      	bcc.n	80024d4 <lfs_dir_traverse+0x55c>
 800257e:	e50a      	b.n	8001f96 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8002580:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002584:	029a      	lsls	r2, r3, #10
 8002586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002588:	18d1      	adds	r1, r2, r3
 800258a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800258e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002592:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002596:	4798      	blx	r3
 8002598:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 800259c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	da02      	bge.n	80025aa <lfs_dir_traverse+0x632>
                return res;
 80025a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025a8:	e0f1      	b.n	800278e <lfs_dir_traverse+0x816>
            }

            if (res) {
 80025aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10c      	bne.n	80025cc <lfs_dir_traverse+0x654>
 80025b2:	e4f0      	b.n	8001f96 <lfs_dir_traverse+0x1e>
                continue;
 80025b4:	bf00      	nop
 80025b6:	e4ee      	b.n	8001f96 <lfs_dir_traverse+0x1e>
            continue;
 80025b8:	bf00      	nop
 80025ba:	e4ec      	b.n	8001f96 <lfs_dir_traverse+0x1e>
                continue;
 80025bc:	bf00      	nop
 80025be:	e4ea      	b.n	8001f96 <lfs_dir_traverse+0x1e>
                    break;
 80025c0:	bf00      	nop
        {
 80025c2:	e4e8      	b.n	8001f96 <lfs_dir_traverse+0x1e>
 80025c4:	08001ec1 	.word	0x08001ec1
 80025c8:	600ffc00 	.word	0x600ffc00
                break;
 80025cc:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80025ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80d9 	beq.w	800278a <lfs_dir_traverse+0x812>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80025d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025dc:	1e5a      	subs	r2, r3, #1
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80025ea:	4413      	add	r3, r2
 80025ec:	3b98      	subs	r3, #152	; 0x98
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80025f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025f6:	1e5a      	subs	r2, r3, #1
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002604:	4413      	add	r3, r2
 8002606:	3b94      	subs	r3, #148	; 0x94
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800260c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	4613      	mov	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800261e:	4413      	add	r3, r2
 8002620:	3b90      	subs	r3, #144	; 0x90
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8002626:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800262a:	1e5a      	subs	r2, r3, #1
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002638:	4413      	add	r3, r2
 800263a:	3b8c      	subs	r3, #140	; 0x8c
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8002642:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002646:	1e5a      	subs	r2, r3, #1
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002654:	4413      	add	r3, r2
 8002656:	3b88      	subs	r3, #136	; 0x88
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 800265e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002662:	1e5a      	subs	r2, r3, #1
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002670:	4413      	add	r3, r2
 8002672:	3b84      	subs	r3, #132	; 0x84
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 800267a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800267e:	1e5a      	subs	r2, r3, #1
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800268c:	4413      	add	r3, r2
 800268e:	3b80      	subs	r3, #128	; 0x80
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8002696:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800269a:	1e5a      	subs	r2, r3, #1
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80026a8:	4413      	add	r3, r2
 80026aa:	3b7c      	subs	r3, #124	; 0x7c
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 80026b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026b6:	1e5a      	subs	r2, r3, #1
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80026c4:	4413      	add	r3, r2
 80026c6:	3b7a      	subs	r3, #122	; 0x7a
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 80026ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026d2:	1e5a      	subs	r2, r3, #1
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80026e0:	4413      	add	r3, r2
 80026e2:	3b78      	subs	r3, #120	; 0x78
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 80026ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026ee:	1e5a      	subs	r2, r3, #1
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80026fc:	4413      	add	r3, r2
 80026fe:	3b74      	subs	r3, #116	; 0x74
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8002706:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800270a:	1e5a      	subs	r2, r3, #1
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002718:	4413      	add	r3, r2
 800271a:	3b70      	subs	r3, #112	; 0x70
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8002722:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002726:	1e5a      	subs	r2, r3, #1
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002734:	4413      	add	r3, r2
 8002736:	3b6c      	subs	r3, #108	; 0x6c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 800273c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800274e:	4413      	add	r3, r2
 8002750:	3b68      	subs	r3, #104	; 0x68
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8002758:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800275c:	1e5a      	subs	r2, r3, #1
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800276a:	4413      	add	r3, r2
 800276c:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8002770:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002774:	3204      	adds	r2, #4
 8002776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800277a:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800277e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002782:	3b01      	subs	r3, #1
 8002784:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8002788:	e57b      	b.n	8002282 <lfs_dir_traverse+0x30a>
    } else {
        return res;
 800278a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 800278e:	4618      	mov	r0, r3
 8002790:	37f4      	adds	r7, #244	; 0xf4
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	bf00      	nop

08002798 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	b0a5      	sub	sp, #148	; 0x94
 800279c:	af04      	add	r7, sp, #16
 800279e:	6178      	str	r0, [r7, #20]
 80027a0:	6139      	str	r1, [r7, #16]
 80027a2:	60fa      	str	r2, [r7, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00f      	beq.n	80027d4 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027bc:	429a      	cmp	r2, r3
 80027be:	d206      	bcs.n	80027ce <lfs_dir_fetchmatch+0x36>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3304      	adds	r3, #4
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 80027ce:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80027d2:	e39d      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80027d4:	2300      	movs	r3, #0
 80027d6:	647b      	str	r3, [r7, #68]	; 0x44
 80027d8:	2300      	movs	r3, #0
 80027da:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 80027e0:	2300      	movs	r3, #0
 80027e2:	677b      	str	r3, [r7, #116]	; 0x74
 80027e4:	e056      	b.n	8002894 <lfs_dir_fetchmatch+0xfc>
        int err = lfs_bd_read(lfs,
 80027e6:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80027e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 80027f0:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 80027f2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80027f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027f8:	0092      	lsls	r2, r2, #2
 80027fa:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 80027fc:	2104      	movs	r1, #4
 80027fe:	9103      	str	r1, [sp, #12]
 8002800:	9202      	str	r2, [sp, #8]
 8002802:	2200      	movs	r2, #0
 8002804:	9201      	str	r2, [sp, #4]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2304      	movs	r3, #4
 800280a:	4602      	mov	r2, r0
 800280c:	2100      	movs	r1, #0
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f7fe f94e 	bl	8000ab0 <lfs_bd_read>
 8002814:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8002816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800281e:	4413      	add	r3, r2
 8002820:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe f8d7 	bl	80009d8 <lfs_fromle32>
 800282a:	4602      	mov	r2, r0
 800282c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002834:	440b      	add	r3, r1
 8002836:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800283a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <lfs_dir_fetchmatch+0xb4>
 8002840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002842:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002846:	d001      	beq.n	800284c <lfs_dir_fetchmatch+0xb4>
            return err;
 8002848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284a:	e361      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
        }

        if (err != LFS_ERR_CORRUPT &&
 800284c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002852:	d01c      	beq.n	800288e <lfs_dir_fetchmatch+0xf6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8002854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800285c:	4413      	add	r3, r2
 800285e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002864:	3301      	adds	r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	bfb8      	it	lt
 800286e:	425b      	neglt	r3, r3
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002876:	440b      	add	r3, r1
 8002878:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800287c:	4619      	mov	r1, r3
 800287e:	4610      	mov	r0, r2
 8002880:	f7fe f89c 	bl	80009bc <lfs_scmp>
 8002884:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8002886:	2b00      	cmp	r3, #0
 8002888:	dd01      	ble.n	800288e <lfs_dir_fetchmatch+0xf6>
            r = i;
 800288a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288c:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 800288e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002890:	3301      	adds	r3, #1
 8002892:	677b      	str	r3, [r7, #116]	; 0x74
 8002894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002896:	2b01      	cmp	r3, #1
 8002898:	dda5      	ble.n	80027e6 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800289a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800289c:	2b00      	cmp	r3, #0
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	bfb8      	it	lt
 80028a4:	425b      	neglt	r3, r3
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80028b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b4:	3301      	adds	r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	bfb8      	it	lt
 80028be:	425b      	neglt	r3, r3
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4413      	add	r3, r2
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 80028cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	bfb8      	it	lt
 80028d6:	425b      	neglt	r3, r3
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028de:	4413      	add	r3, r2
 80028e0:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 80028ee:	2300      	movs	r3, #0
 80028f0:	673b      	str	r3, [r7, #112]	; 0x70
 80028f2:	e2f9      	b.n	8002ee8 <lfs_dir_fetchmatch+0x750>
        lfs_off_t off = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 80028f8:	f04f 33ff 	mov.w	r3, #4294967295
 80028fc:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002904:	4aa8      	ldr	r2, [pc, #672]	; (8002ba8 <lfs_dir_fetchmatch+0x410>)
 8002906:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800290a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800290e:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 8002918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800291a:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 800291c:	2300      	movs	r3, #0
 800291e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 8002922:	2300      	movs	r3, #0
 8002924:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe f85e 	bl	80009ee <lfs_tole32>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	3308      	adds	r3, #8
 800293c:	2204      	movs	r2, #4
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f004 ff36 	bl	80077b4 <lfs_crc>
 8002948:	4603      	mov	r3, r0
 800294a:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe f841 	bl	80009d8 <lfs_fromle32>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800295c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800295e:	f7fe fd5a 	bl	8001416 <lfs_tag_dsize>
 8002962:	4602      	mov	r2, r0
 8002964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002966:	4413      	add	r3, r2
 8002968:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 800296a:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002970:	69d8      	ldr	r0, [r3, #28]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2204      	movs	r2, #4
 8002978:	9203      	str	r2, [sp, #12]
 800297a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800297e:	9202      	str	r2, [sp, #8]
 8002980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002982:	9201      	str	r2, [sp, #4]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	4603      	mov	r3, r0
 8002988:	460a      	mov	r2, r1
 800298a:	2100      	movs	r1, #0
 800298c:	6978      	ldr	r0, [r7, #20]
 800298e:	f7fe f88f 	bl	8000ab0 <lfs_bd_read>
 8002992:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <lfs_dir_fetchmatch+0x210>
                if (err == LFS_ERR_CORRUPT) {
 800299a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800299c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80029a0:	f000 81d5 	beq.w	8002d4e <lfs_dir_fetchmatch+0x5b6>
                    // can't continue?
                    break;
                }
                return err;
 80029a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a6:	e2b3      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80029ae:	2204      	movs	r2, #4
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 feff 	bl	80077b4 <lfs_crc>
 80029b6:	4603      	mov	r3, r0
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe f822 	bl	8000a06 <lfs_frombe32>
 80029c2:	4602      	mov	r2, r0
 80029c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029c6:	4053      	eors	r3, r2
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fc9a 	bl	8001306 <lfs_tag_isvalid>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f083 0301 	eor.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <lfs_dir_fetchmatch+0x25e>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 80029de:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80029e0:	f7fe fcc2 	bl	8001368 <lfs_tag_type2>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 80029f4:	e1ba      	b.n	8002d6c <lfs_dir_fetchmatch+0x5d4>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe fd0c 	bl	8001416 <lfs_tag_dsize>
 80029fe:	4602      	mov	r2, r0
 8002a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a02:	441a      	add	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	f200 81a1 	bhi.w	8002d52 <lfs_dir_fetchmatch+0x5ba>
                break;
            }

            ptag = tag;
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fca6 	bl	8001368 <lfs_tag_type2>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002a22:	d15e      	bne.n	8002ae2 <lfs_dir_fetchmatch+0x34a>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8002a24:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002a2a:	69dc      	ldr	r4, [r3, #28]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a32:	3204      	adds	r2, #4
 8002a34:	2104      	movs	r1, #4
 8002a36:	9103      	str	r1, [sp, #12]
 8002a38:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002a3c:	9102      	str	r1, [sp, #8]
 8002a3e:	9201      	str	r2, [sp, #4]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	4623      	mov	r3, r4
 8002a44:	4602      	mov	r2, r0
 8002a46:	2100      	movs	r1, #0
 8002a48:	6978      	ldr	r0, [r7, #20]
 8002a4a:	f7fe f831 	bl	8000ab0 <lfs_bd_read>
 8002a4e:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8002a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <lfs_dir_fetchmatch+0x2cc>
                    if (err == LFS_ERR_CORRUPT) {
 8002a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a58:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002a5c:	f000 817b 	beq.w	8002d56 <lfs_dir_fetchmatch+0x5be>
                        break;
                    }
                    return err;
 8002a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 8002a62:	e255      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
                }
                dcrc = lfs_fromle32(dcrc);
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd ffb6 	bl	80009d8 <lfs_fromle32>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8002a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f040 8170 	bne.w	8002d5a <lfs_dir_fetchmatch+0x5c2>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe fc93 	bl	80013a8 <lfs_tag_chunk>
 8002a82:	4603      	mov	r3, r0
 8002a84:	07db      	lsls	r3, r3, #31
 8002a86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a88:	4053      	eors	r3, r2
 8002a8a:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002a94:	2204      	movs	r2, #4
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 fe8c 	bl	80077b4 <lfs_crc>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe fcb4 	bl	8001416 <lfs_tag_dsize>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab2:	441a      	add	r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002abc:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ac4:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002ac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8002ad8:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae0:	e73c      	b.n	800295c <lfs_dir_fetchmatch+0x1c4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8002ae2:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	681c      	ldr	r4, [r3, #0]
 8002af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af2:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fc8d 	bl	8001416 <lfs_tag_dsize>
 8002afc:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8002afe:	3b04      	subs	r3, #4
 8002b00:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b04:	9203      	str	r2, [sp, #12]
 8002b06:	9302      	str	r3, [sp, #8]
 8002b08:	9501      	str	r5, [sp, #4]
 8002b0a:	9400      	str	r4, [sp, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4632      	mov	r2, r6
 8002b10:	2100      	movs	r1, #0
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7fe f969 	bl	8000dea <lfs_bd_crc>
 8002b18:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8002b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <lfs_dir_fetchmatch+0x396>
                if (err == LFS_ERR_CORRUPT) {
 8002b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b22:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002b26:	f000 811a 	beq.w	8002d5e <lfs_dir_fetchmatch+0x5c6>
                    break;
                }
                return err;
 8002b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b2c:	e1f0      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe fc09 	bl	8001348 <lfs_tag_type1>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d113      	bne.n	8002b64 <lfs_dir_fetchmatch+0x3cc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fc4c 	bl	80013dc <lfs_tag_id>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	f200 80b5 	bhi.w	8002cbc <lfs_dir_fetchmatch+0x524>
                    tempcount = lfs_tag_id(tag) + 1;
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fc41 	bl	80013dc <lfs_tag_id>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002b62:	e0ab      	b.n	8002cbc <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fbee 	bl	8001348 <lfs_tag_type1>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b72:	d139      	bne.n	8002be8 <lfs_dir_fetchmatch+0x450>
                tempcount += lfs_tag_splice(tag);
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fc23 	bl	80013c2 <lfs_tag_splice>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002b84:	4413      	add	r3, r2
 8002b86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002b8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <lfs_dir_fetchmatch+0x414>)
 8002b8e:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002b90:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002b94:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d108      	bne.n	8002bb0 <lfs_dir_fetchmatch+0x418>
                    tempbesttag |= 0x80000000;
 8002b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ba6:	e089      	b.n	8002cbc <lfs_dir_fetchmatch+0x524>
 8002ba8:	0800b0e4 	.word	0x0800b0e4
 8002bac:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8002bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	f000 8081 	beq.w	8002cbc <lfs_dir_fetchmatch+0x524>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe fc0d 	bl	80013dc <lfs_tag_id>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461c      	mov	r4, r3
 8002bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe fc07 	bl	80013dc <lfs_tag_id>
 8002bce:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002bd0:	429c      	cmp	r4, r3
 8002bd2:	d873      	bhi.n	8002cbc <lfs_dir_fetchmatch+0x524>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fbf3 	bl	80013c2 <lfs_tag_splice>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	029a      	lsls	r2, r3, #10
 8002be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002be2:	4413      	add	r3, r2
 8002be4:	663b      	str	r3, [r7, #96]	; 0x60
 8002be6:	e069      	b.n	8002cbc <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fbac 	bl	8001348 <lfs_tag_type1>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bf6:	d132      	bne.n	8002c5e <lfs_dir_fetchmatch+0x4c6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fbd4 	bl	80013a8 <lfs_tag_chunk>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf14      	ite	ne
 8002c0a:	2301      	movne	r3, #1
 8002c0c:	2300      	moveq	r3, #0
 8002c0e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 8002c12:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002c18:	69dc      	ldr	r4, [r3, #28]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c20:	3204      	adds	r2, #4
 8002c22:	2108      	movs	r1, #8
 8002c24:	9103      	str	r1, [sp, #12]
 8002c26:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002c2a:	9102      	str	r1, [sp, #8]
 8002c2c:	9201      	str	r2, [sp, #4]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4623      	mov	r3, r4
 8002c32:	4602      	mov	r2, r0
 8002c34:	2100      	movs	r1, #0
 8002c36:	6978      	ldr	r0, [r7, #20]
 8002c38:	f7fd ff3a 	bl	8000ab0 <lfs_bd_read>
 8002c3c:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d006      	beq.n	8002c52 <lfs_dir_fetchmatch+0x4ba>
                    if (err == LFS_ERR_CORRUPT) {
 8002c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c46:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c4a:	f000 808a 	beq.w	8002d62 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8002c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c50:	e15e      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
                }
                lfs_pair_fromle32(temptail);
 8002c52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fb21 	bl	800129e <lfs_pair_fromle32>
 8002c5c:	e02e      	b.n	8002cbc <lfs_dir_fetchmatch+0x524>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fb91 	bl	8001388 <lfs_tag_type3>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d124      	bne.n	8002cbc <lfs_dir_fetchmatch+0x524>
                err = lfs_bd_read(lfs,
 8002c72:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002c78:	69dc      	ldr	r4, [r3, #28]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c80:	3204      	adds	r2, #4
 8002c82:	2108      	movs	r1, #8
 8002c84:	9103      	str	r1, [sp, #12]
 8002c86:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002c8a:	9102      	str	r1, [sp, #8]
 8002c8c:	9201      	str	r2, [sp, #4]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4623      	mov	r3, r4
 8002c92:	4602      	mov	r2, r0
 8002c94:	2100      	movs	r1, #0
 8002c96:	6978      	ldr	r0, [r7, #20]
 8002c98:	f7fd ff0a 	bl	8000ab0 <lfs_bd_read>
 8002c9c:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8002c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <lfs_dir_fetchmatch+0x514>
                    if (err == LFS_ERR_CORRUPT) {
 8002ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002caa:	d05c      	beq.n	8002d66 <lfs_dir_fetchmatch+0x5ce>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002cac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe fcaf 	bl	8001614 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cc2:	405a      	eors	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f47f ae47 	bne.w	800295c <lfs_dir_fetchmatch+0x1c4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002cd4:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd8:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	f107 0220 	add.w	r2, r7, #32
 8002ce0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ce4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002ce8:	4798      	blx	r3
 8002cea:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8002cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	da05      	bge.n	8002cfe <lfs_dir_fetchmatch+0x566>
                    if (res == LFS_ERR_CORRUPT) {
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002cf8:	d037      	beq.n	8002d6a <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return res;
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8002cfc:	e108      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
                }

                if (res == LFS_CMP_EQ) {
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <lfs_dir_fetchmatch+0x572>
                    // found a match
                    tempbesttag = tag;
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	663b      	str	r3, [r7, #96]	; 0x60
 8002d08:	e628      	b.n	800295c <lfs_dir_fetchmatch+0x1c4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d0e:	405a      	eors	r2, r3
 8002d10:	4b81      	ldr	r3, [pc, #516]	; (8002f18 <lfs_dir_fetchmatch+0x780>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <lfs_dir_fetchmatch+0x588>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d1e:	e61d      	b.n	800295c <lfs_dir_fetchmatch+0x1c4>
                } else if (res == LFS_CMP_GT &&
 8002d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	f47f ae1a 	bne.w	800295c <lfs_dir_fetchmatch+0x1c4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fb56 	bl	80013dc <lfs_tag_id>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461c      	mov	r4, r3
 8002d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fb50 	bl	80013dc <lfs_tag_id>
 8002d3c:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002d3e:	429c      	cmp	r4, r3
 8002d40:	f63f ae0c 	bhi.w	800295c <lfs_dir_fetchmatch+0x1c4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d4c:	e606      	b.n	800295c <lfs_dir_fetchmatch+0x1c4>
                    break;
 8002d4e:	bf00      	nop
 8002d50:	e00c      	b.n	8002d6c <lfs_dir_fetchmatch+0x5d4>
                break;
 8002d52:	bf00      	nop
 8002d54:	e00a      	b.n	8002d6c <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002d56:	bf00      	nop
 8002d58:	e008      	b.n	8002d6c <lfs_dir_fetchmatch+0x5d4>
                    break;
 8002d5a:	bf00      	nop
 8002d5c:	e006      	b.n	8002d6c <lfs_dir_fetchmatch+0x5d4>
                    break;
 8002d5e:	bf00      	nop
 8002d60:	e004      	b.n	8002d6c <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002d6a:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d000      	beq.n	8002d76 <lfs_dir_fetchmatch+0x5de>
 8002d74:	e016      	b.n	8002da4 <lfs_dir_fetchmatch+0x60c>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fa09 	bl	8001190 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d80:	3301      	adds	r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	bfb8      	it	lt
 8002d8a:	425b      	neglt	r3, r3
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d92:	4413      	add	r3, r2
 8002d94:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d9e:	3301      	adds	r3, #1
 8002da0:	673b      	str	r3, [r7, #112]	; 0x70
 8002da2:	e0a1      	b.n	8002ee8 <lfs_dir_fetchmatch+0x750>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2200      	movs	r2, #0
 8002da8:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002daa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d03a      	beq.n	8002e28 <lfs_dir_fetchmatch+0x690>
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002dba:	6992      	ldr	r2, [r2, #24]
 8002dbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002dc0:	fb02 f201 	mul.w	r2, r2, r1
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d12e      	bne.n	8002e28 <lfs_dir_fetchmatch+0x690>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002dca:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d02a      	beq.n	8002e28 <lfs_dir_fetchmatch+0x690>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8002dd8:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 8002dde:	69dd      	ldr	r5, [r3, #28]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	68d2      	ldr	r2, [r2, #12]
 8002de8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002dea:	f107 001c 	add.w	r0, r7, #28
 8002dee:	9003      	str	r0, [sp, #12]
 8002df0:	9102      	str	r1, [sp, #8]
 8002df2:	9201      	str	r2, [sp, #4]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	462b      	mov	r3, r5
 8002df8:	4622      	mov	r2, r4
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	6978      	ldr	r0, [r7, #20]
 8002dfe:	f7fd fff4 	bl	8000dea <lfs_bd_crc>
 8002e02:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <lfs_dir_fetchmatch+0x67e>
 8002e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002e10:	d001      	beq.n	8002e16 <lfs_dir_fetchmatch+0x67e>
                    return err;
 8002e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e14:	e07c      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2301      	moveq	r3, #1
 8002e20:	2300      	movne	r3, #0
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	333c      	adds	r3, #60	; 0x3c
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe fb8f 	bl	8001554 <lfs_gstate_hasmovehere>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d028      	beq.n	8002e8e <lfs_dir_fetchmatch+0x6f6>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe facb 	bl	80013dc <lfs_tag_id>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461c      	mov	r4, r3
 8002e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fac5 	bl	80013dc <lfs_tag_id>
 8002e52:	4603      	mov	r3, r0
 8002e54:	429c      	cmp	r4, r3
 8002e56:	d104      	bne.n	8002e62 <lfs_dir_fetchmatch+0x6ca>
                besttag |= 0x80000000;
 8002e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e60:	e015      	b.n	8002e8e <lfs_dir_fetchmatch+0x6f6>
            } else if (besttag != -1 &&
 8002e62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d011      	beq.n	8002e8e <lfs_dir_fetchmatch+0x6f6>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fab4 	bl	80013dc <lfs_tag_id>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461c      	mov	r4, r3
 8002e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe faae 	bl	80013dc <lfs_tag_id>
 8002e80:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8002e82:	429c      	cmp	r4, r3
 8002e84:	d203      	bcs.n	8002e8e <lfs_dir_fetchmatch+0x6f6>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002e86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e88:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <lfs_dir_fetchmatch+0x720>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002e96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fa9f 	bl	80013dc <lfs_tag_id>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	8a9b      	ldrh	r3, [r3, #20]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f7fd fd25 	bl	80008f8 <lfs_min>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eb6:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fa23 	bl	8001306 <lfs_tag_isvalid>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <lfs_dir_fetchmatch+0x732>
            return besttag;
 8002ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ec8:	e022      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fa85 	bl	80013dc <lfs_tag_id>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	8a9b      	ldrh	r3, [r3, #20]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d202      	bcs.n	8002ee4 <lfs_dir_fetchmatch+0x74c>
            return LFS_ERR_NOENT;
 8002ede:	f06f 0301 	mvn.w	r3, #1
 8002ee2:	e015      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
        } else {
            return 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e013      	b.n	8002f10 <lfs_dir_fetchmatch+0x778>
    for (int i = 0; i < 2; i++) {
 8002ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	f77f ad02 	ble.w	80028f4 <lfs_dir_fetchmatch+0x15c>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4908      	ldr	r1, [pc, #32]	; (8002f1c <lfs_dir_fetchmatch+0x784>)
 8002efa:	9101      	str	r1, [sp, #4]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	4613      	mov	r3, r2
 8002f00:	f240 5262 	movw	r2, #1378	; 0x562
 8002f04:	4906      	ldr	r1, [pc, #24]	; (8002f20 <lfs_dir_fetchmatch+0x788>)
 8002f06:	4807      	ldr	r0, [pc, #28]	; (8002f24 <lfs_dir_fetchmatch+0x78c>)
 8002f08:	f007 fbe8 	bl	800a6dc <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002f0c:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3784      	adds	r7, #132	; 0x84
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f18:	7ffffc00 	.word	0x7ffffc00
 8002f1c:	0800b0a0 	.word	0x0800b0a0
 8002f20:	0800af94 	.word	0x0800af94
 8002f24:	0800b0ac 	.word	0x0800b0ac

08002f28 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af04      	add	r7, sp, #16
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002f34:	2300      	movs	r3, #0
 8002f36:	9303      	str	r3, [sp, #12]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	9302      	str	r3, [sp, #8]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	f04f 33ff 	mov.w	r3, #4294967295
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7ff fc22 	bl	8002798 <lfs_dir_fetchmatch>
 8002f54:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <lfs_dir_getgstate+0x5c>)
 8002f74:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <lfs_dir_getgstate+0x60>)
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7fe feab 	bl	8001cd4 <lfs_dir_get>
 8002f7e:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	da05      	bge.n	8002f92 <lfs_dir_getgstate+0x32>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f113 0f02 	cmn.w	r3, #2
 8002f8c:	d001      	beq.n	8002f92 <lfs_dir_getgstate+0x32>
        return res;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	e00f      	b.n	8002fb2 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f113 0f02 	cmn.w	r3, #2
 8002f98:	d00a      	beq.n	8002fb0 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002f9a:	f107 0310 	add.w	r3, r7, #16
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe faf8 	bl	8001594 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002fa4:	f107 0310 	add.w	r3, r7, #16
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fa47 	bl	800143e <lfs_gstate_xor>
    }

    return 0;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	7ff0000c 	.word	0x7ff0000c
 8002fc0:	7ff00000 	.word	0x7ff00000

08002fc4 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b08f      	sub	sp, #60	; 0x3c
 8002fc8:	af04      	add	r7, sp, #16
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	689c      	ldr	r4, [r3, #8]
 8002fe2:	68b8      	ldr	r0, [r7, #8]
 8002fe4:	f7fe fa0a 	bl	80013fc <lfs_tag_size>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4619      	mov	r1, r3
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7fd fc83 	bl	80008f8 <lfs_min>
 8002ff2:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002ff4:	6a3c      	ldr	r4, [r7, #32]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	6852      	ldr	r2, [r2, #4]
 8002ffe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003000:	6849      	ldr	r1, [r1, #4]
 8003002:	69b8      	ldr	r0, [r7, #24]
 8003004:	9003      	str	r0, [sp, #12]
 8003006:	9102      	str	r1, [sp, #8]
 8003008:	9201      	str	r2, [sp, #4]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	4622      	mov	r2, r4
 8003010:	2100      	movs	r1, #0
 8003012:	6a38      	ldr	r0, [r7, #32]
 8003014:	f7fd fe98 	bl	8000d48 <lfs_bd_cmp>
 8003018:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <lfs_dir_find_match+0x60>
        return res;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	e014      	b.n	800304e <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	689c      	ldr	r4, [r3, #8]
 8003028:	68b8      	ldr	r0, [r7, #8]
 800302a:	f7fe f9e7 	bl	80013fc <lfs_tag_size>
 800302e:	4603      	mov	r3, r0
 8003030:	429c      	cmp	r4, r3
 8003032:	d00b      	beq.n	800304c <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	689c      	ldr	r4, [r3, #8]
 8003038:	68b8      	ldr	r0, [r7, #8]
 800303a:	f7fe f9df 	bl	80013fc <lfs_tag_size>
 800303e:	4603      	mov	r3, r0
 8003040:	429c      	cmp	r4, r3
 8003042:	d201      	bcs.n	8003048 <lfs_dir_find_match+0x84>
 8003044:	2301      	movs	r3, #1
 8003046:	e002      	b.n	800304e <lfs_dir_find_match+0x8a>
 8003048:	2302      	movs	r3, #2
 800304a:	e000      	b.n	800304e <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	372c      	adds	r7, #44	; 0x2c
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}
	...

08003058 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b093      	sub	sp, #76	; 0x4c
 800305c:	af04      	add	r7, sp, #16
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003078:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800307a:	4b6e      	ldr	r3, [pc, #440]	; (8003234 <lfs_dir_find+0x1dc>)
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1a      	ldr	r2, [r3, #32]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800308e:	496a      	ldr	r1, [pc, #424]	; (8003238 <lfs_dir_find+0x1e0>)
 8003090:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003092:	f007 fb69 	bl	800a768 <strspn>
 8003096:	4602      	mov	r2, r0
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	4413      	add	r3, r2
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800309e:	4966      	ldr	r1, [pc, #408]	; (8003238 <lfs_dir_find+0x1e0>)
 80030a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030a2:	f007 fb50 	bl	800a746 <strcspn>
 80030a6:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d105      	bne.n	80030ba <lfs_dir_find+0x62>
 80030ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	4b62      	ldr	r3, [pc, #392]	; (800323c <lfs_dir_find+0x1e4>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d00a      	beq.n	80030d0 <lfs_dir_find+0x78>
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d10c      	bne.n	80030da <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 80030c0:	2202      	movs	r2, #2
 80030c2:	495f      	ldr	r1, [pc, #380]	; (8003240 <lfs_dir_find+0x1e8>)
 80030c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030c6:	f006 ff4d 	bl	8009f64 <memcmp>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d104      	bne.n	80030da <lfs_dir_find+0x82>
            name += namelen;
 80030d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	4413      	add	r3, r2
 80030d6:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 80030d8:	e7d9      	b.n	800308e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 80030da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	4413      	add	r3, r2
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 80030e6:	4954      	ldr	r1, [pc, #336]	; (8003238 <lfs_dir_find+0x1e0>)
 80030e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030ea:	f007 fb3d 	bl	800a768 <strspn>
 80030ee:	4602      	mov	r2, r0
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	4413      	add	r3, r2
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 80030f6:	4950      	ldr	r1, [pc, #320]	; (8003238 <lfs_dir_find+0x1e0>)
 80030f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030fa:	f007 fb24 	bl	800a746 <strcspn>
 80030fe:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01d      	beq.n	8003142 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d112      	bne.n	8003132 <lfs_dir_find+0xda>
 800310c:	2202      	movs	r2, #2
 800310e:	494c      	ldr	r1, [pc, #304]	; (8003240 <lfs_dir_find+0x1e8>)
 8003110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003112:	f006 ff27 	bl	8009f64 <memcmp>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <lfs_dir_find+0xda>
                depth -= 1;
 800311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311e:	3b01      	subs	r3, #1
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8003128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	4413      	add	r3, r2
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8003130:	e7ad      	b.n	800308e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	3301      	adds	r3, #1
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8003138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	4413      	add	r3, r2
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8003140:	e7d1      	b.n	80030e6 <lfs_dir_find+0x8e>
                break;
 8003142:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <lfs_dir_find+0xf8>
            return tag;
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	e06c      	b.n	800322a <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003154:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe f915 	bl	8001388 <lfs_tag_type3>
 800315e:	4603      	mov	r3, r0
 8003160:	2b02      	cmp	r3, #2
 8003162:	d002      	beq.n	800316a <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8003164:	f06f 0313 	mvn.w	r3, #19
 8003168:	e05f      	b.n	800322a <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	4618      	mov	r0, r3
 800316e:	f7fe f935 	bl	80013dc <lfs_tag_id>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800317a:	429a      	cmp	r2, r3
 800317c:	d01c      	beq.n	80031b8 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe f92b 	bl	80013dc <lfs_tag_id>
 8003186:	4603      	mov	r3, r0
 8003188:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800318a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800318e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003196:	9200      	str	r2, [sp, #0]
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <lfs_dir_find+0x1ec>)
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7fe fd99 	bl	8001cd4 <lfs_dir_get>
 80031a2:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	da01      	bge.n	80031ae <lfs_dir_find+0x156>
                return res;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	e03d      	b.n	800322a <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3318      	adds	r3, #24
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe f873 	bl	800129e <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 80031be:	212f      	movs	r1, #47	; 0x2f
 80031c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031c2:	f007 fab3 	bl	800a72c <strchr>
 80031c6:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <lfs_dir_find+0x178>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	e000      	b.n	80031d2 <lfs_dir_find+0x17a>
 80031d0:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	613a      	str	r2, [r7, #16]
 80031d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d8:	617a      	str	r2, [r7, #20]
 80031da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031dc:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 80031de:	f107 0210 	add.w	r2, r7, #16
 80031e2:	9203      	str	r2, [sp, #12]
 80031e4:	4a18      	ldr	r2, [pc, #96]	; (8003248 <lfs_dir_find+0x1f0>)
 80031e6:	9202      	str	r2, [sp, #8]
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80031f2:	4622      	mov	r2, r4
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff face 	bl	8002798 <lfs_dir_fetchmatch>
 80031fc:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	2b00      	cmp	r3, #0
 8003202:	da01      	bge.n	8003208 <lfs_dir_find+0x1b0>
                return tag;
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	e010      	b.n	800322a <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	2b00      	cmp	r3, #0
 800320c:	d004      	beq.n	8003218 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800320e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	4413      	add	r3, r2
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8003216:	e73a      	b.n	800308e <lfs_dir_find+0x36>
            if (!dir->split) {
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	7ddb      	ldrb	r3, [r3, #23]
 800321c:	f083 0301 	eor.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0c8      	beq.n	80031b8 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8003226:	f06f 0301 	mvn.w	r3, #1
    }
}
 800322a:	4618      	mov	r0, r3
 800322c:	373c      	adds	r7, #60	; 0x3c
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	bf00      	nop
 8003234:	002ffc00 	.word	0x002ffc00
 8003238:	0800b0ec 	.word	0x0800b0ec
 800323c:	0800b0f0 	.word	0x0800b0f0
 8003240:	0800b0f4 	.word	0x0800b0f4
 8003244:	700ffc00 	.word	0x700ffc00
 8003248:	08002fc5 	.word	0x08002fc5

0800324c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b08b      	sub	sp, #44	; 0x2c
 8003250:	af04      	add	r7, sp, #16
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f103 0010 	add.w	r0, r3, #16
 8003260:	68fc      	ldr	r4, [r7, #12]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	6852      	ldr	r2, [r2, #4]
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	9103      	str	r1, [sp, #12]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	9102      	str	r1, [sp, #8]
 8003272:	9201      	str	r2, [sp, #4]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2300      	movs	r3, #0
 8003278:	4622      	mov	r2, r4
 800327a:	4601      	mov	r1, r0
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7fd fea9 	bl	8000fd4 <lfs_bd_prog>
 8003282:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <lfs_dir_commitprog+0x42>
        return err;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	e010      	b.n	80032b0 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4618      	mov	r0, r3
 8003298:	f004 fa8c 	bl	80077b4 <lfs_crc>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	60da      	str	r2, [r3, #12]
    commit->off += size;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	441a      	add	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	605a      	str	r2, [r3, #4]
    return 0;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd90      	pop	{r4, r7, pc}

080032b8 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b08f      	sub	sp, #60	; 0x3c
 80032bc:	af04      	add	r7, sp, #16
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe f8a5 	bl	8001416 <lfs_tag_dsize>
 80032cc:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	441a      	add	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d902      	bls.n	80032e4 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80032de:	f06f 031b 	mvn.w	r3, #27
 80032e2:	e065      	b.n	80033b0 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4053      	eors	r3, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd fb94 	bl	8000a1e <lfs_tobe32>
 80032f6:	4603      	mov	r3, r0
 80032f8:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80032fa:	f107 0214 	add.w	r2, r7, #20
 80032fe:	2304      	movs	r3, #4
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7ff ffa2 	bl	800324c <lfs_dir_commitprog>
 8003308:	61f8      	str	r0, [r7, #28]
    if (err) {
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <lfs_dir_commitattr+0x5c>
        return err;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	e04d      	b.n	80033b0 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	db0c      	blt.n	8003334 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	3b04      	subs	r3, #4
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff ff92 	bl	800324c <lfs_dir_commitprog>
 8003328:	61f8      	str	r0, [r7, #28]
        if (err) {
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d039      	beq.n	80033a4 <lfs_dir_commitattr+0xec>
            return err;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	e03d      	b.n	80033b0 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
 800333c:	e02d      	b.n	800339a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800333e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8003340:	6a3a      	ldr	r2, [r7, #32]
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8003346:	1f1c      	subs	r4, r3, #4
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8003350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003352:	440a      	add	r2, r1
 8003354:	2101      	movs	r1, #1
 8003356:	9103      	str	r1, [sp, #12]
 8003358:	f107 0113 	add.w	r1, r7, #19
 800335c:	9102      	str	r1, [sp, #8]
 800335e:	9201      	str	r2, [sp, #4]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	4623      	mov	r3, r4
 8003364:	4602      	mov	r2, r0
 8003366:	2100      	movs	r1, #0
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7fd fba1 	bl	8000ab0 <lfs_bd_read>
 800336e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <lfs_dir_commitattr+0xc2>
                return err;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	e01a      	b.n	80033b0 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800337a:	f107 0213 	add.w	r2, r7, #19
 800337e:	2301      	movs	r3, #1
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f7ff ff62 	bl	800324c <lfs_dir_commitprog>
 8003388:	61f8      	str	r0, [r7, #28]
            if (err) {
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <lfs_dir_commitattr+0xdc>
                return err;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	e00d      	b.n	80033b0 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	3301      	adds	r3, #1
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	3b04      	subs	r3, #4
 800339e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d3cc      	bcc.n	800333e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	609a      	str	r2, [r3, #8]
    return 0;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	372c      	adds	r7, #44	; 0x2c
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd90      	pop	{r4, r7, pc}

080033b8 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b097      	sub	sp, #92	; 0x5c
 80033bc:	af04      	add	r7, sp, #16
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 80033c6:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f7fd fa90 	bl	80008f8 <lfs_min>
 80033d8:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7fd faad 	bl	8000942 <lfs_alignup>
 80033e8:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80033f2:	e0fe      	b.n	80035f2 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	3b04      	subs	r3, #4
 80033fe:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd fa78 	bl	80008f8 <lfs_min>
 8003408:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4413      	add	r3, r2
        lfs_off_t noff = (
 8003410:	3304      	adds	r3, #4
 8003412:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8003414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	429a      	cmp	r2, r3
 800341a:	d206      	bcs.n	800342a <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 800341c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341e:	3b14      	subs	r3, #20
 8003420:	4619      	mov	r1, r3
 8003422:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003424:	f7fd fa68 	bl	80008f8 <lfs_min>
 8003428:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 800342a:	23ff      	movs	r3, #255	; 0xff
 800342c:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800342e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	429a      	cmp	r2, r3
 8003434:	d35f      	bcc.n	80034f6 <lfs_dir_commitcrc+0x13e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003446:	429a      	cmp	r2, r3
 8003448:	d855      	bhi.n	80034f6 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800344a:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8003450:	6998      	ldr	r0, [r3, #24]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	9203      	str	r2, [sp, #12]
 800345a:	f107 021b 	add.w	r2, r7, #27
 800345e:	9202      	str	r2, [sp, #8]
 8003460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003462:	9201      	str	r2, [sp, #4]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	4603      	mov	r3, r0
 8003468:	460a      	mov	r2, r1
 800346a:	2100      	movs	r1, #0
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fd fb1f 	bl	8000ab0 <lfs_bd_read>
 8003472:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <lfs_dir_commitcrc+0xce>
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003480:	d001      	beq.n	8003486 <lfs_dir_commitcrc+0xce>
                return err;
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	e101      	b.n	800368a <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348a:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8003494:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 800349a:	699c      	ldr	r4, [r3, #24]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	f107 0108 	add.w	r1, r7, #8
 80034a6:	3104      	adds	r1, #4
 80034a8:	9103      	str	r1, [sp, #12]
 80034aa:	9202      	str	r2, [sp, #8]
 80034ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ae:	9201      	str	r2, [sp, #4]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	4623      	mov	r3, r4
 80034b4:	4602      	mov	r2, r0
 80034b6:	2100      	movs	r1, #0
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7fd fc96 	bl	8000dea <lfs_bd_crc>
 80034be:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <lfs_dir_commitcrc+0x11a>
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80034cc:	d001      	beq.n	80034d2 <lfs_dir_commitcrc+0x11a>
                    return err;
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	e0db      	b.n	800368a <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 80034d2:	f107 0308 	add.w	r3, r7, #8
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe f8b4 	bl	8001644 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 80034dc:	f107 0308 	add.w	r3, r7, #8
 80034e0:	4a6c      	ldr	r2, [pc, #432]	; (8003694 <lfs_dir_commitcrc+0x2dc>)
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fee7 	bl	80032b8 <lfs_dir_commitattr>
 80034ea:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <lfs_dir_commitcrc+0x13e>
                    return err;
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	e0c9      	b.n	800368a <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 80034f6:	7efb      	ldrb	r3, [r7, #27]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	09db      	lsrs	r3, r3, #7
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	051a      	lsls	r2, r3, #20
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800350c:	1acb      	subs	r3, r1, r3
 800350e:	3b04      	subs	r3, #4
 8003510:	4313      	orrs	r3, r2
 8003512:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8003516:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	4053      	eors	r3, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f7fd fa7a 	bl	8000a1e <lfs_tobe32>
 800352a:	4603      	mov	r3, r0
 800352c:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f107 0110 	add.w	r1, r7, #16
 8003536:	2204      	movs	r2, #4
 8003538:	4618      	mov	r0, r3
 800353a:	f004 f93b 	bl	80077b4 <lfs_crc>
 800353e:	4602      	mov	r2, r0
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd fa50 	bl	80009ee <lfs_tole32>
 800354e:	4603      	mov	r3, r0
 8003550:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f103 0010 	add.w	r0, r3, #16
 8003558:	687c      	ldr	r4, [r7, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	6852      	ldr	r2, [r2, #4]
 8003562:	2108      	movs	r1, #8
 8003564:	9103      	str	r1, [sp, #12]
 8003566:	f107 0110 	add.w	r1, r7, #16
 800356a:	9102      	str	r1, [sp, #8]
 800356c:	9201      	str	r2, [sp, #4]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	2300      	movs	r3, #0
 8003572:	4622      	mov	r2, r4
 8003574:	4601      	mov	r1, r0
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fd fd2c 	bl	8000fd4 <lfs_bd_prog>
 800357c:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <lfs_dir_commitcrc+0x1d0>
            return err;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	e080      	b.n	800368a <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035a0:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 80035a2:	7efb      	ldrb	r3, [r7, #27]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	061b      	lsls	r3, r3, #24
 80035a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	405a      	eors	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ba:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 80035bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d208      	bcs.n	80035d6 <lfs_dir_commitcrc+0x21e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	4413      	add	r3, r2
 80035d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d30d      	bcc.n	80035f2 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f103 0110 	add.w	r1, r3, #16
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	2300      	movs	r3, #0
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fd fcc3 	bl	8000f6c <lfs_bd_sync>
 80035e6:	6238      	str	r0, [r7, #32]
            if (err) {
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <lfs_dir_commitcrc+0x23a>
                return err;
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	e04b      	b.n	800368a <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035f8:	429a      	cmp	r2, r3
 80035fa:	f63f aefb 	bhi.w	80033f4 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360e:	1d1c      	adds	r4, r3, #4
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003618:	1a8a      	subs	r2, r1, r2
 800361a:	f107 011c 	add.w	r1, r7, #28
 800361e:	9103      	str	r1, [sp, #12]
 8003620:	9202      	str	r2, [sp, #8]
 8003622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003624:	9201      	str	r2, [sp, #4]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	4623      	mov	r3, r4
 800362a:	4602      	mov	r2, r0
 800362c:	2100      	movs	r1, #0
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fbdb 	bl	8000dea <lfs_bd_crc>
 8003634:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <lfs_dir_commitcrc+0x288>
        return err;
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	e024      	b.n	800368a <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003644:	429a      	cmp	r2, r3
 8003646:	d002      	beq.n	800364e <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8003648:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800364c:	e01d      	b.n	800368a <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f107 021c 	add.w	r2, r7, #28
 8003658:	9203      	str	r2, [sp, #12]
 800365a:	2204      	movs	r2, #4
 800365c:	9202      	str	r2, [sp, #8]
 800365e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003660:	9201      	str	r2, [sp, #4]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2304      	movs	r3, #4
 8003666:	460a      	mov	r2, r1
 8003668:	2100      	movs	r1, #0
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fd fbbd 	bl	8000dea <lfs_bd_crc>
 8003670:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <lfs_dir_commitcrc+0x2c4>
        return err;
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	e006      	b.n	800368a <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8003682:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003686:	e000      	b.n	800368a <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	374c      	adds	r7, #76	; 0x4c
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}
 8003692:	bf00      	nop
 8003694:	5ffffc08 	.word	0x5ffffc08

08003698 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af04      	add	r7, sp, #16
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	e016      	b.n	80036d6 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	3301      	adds	r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	bfb8      	it	lt
 80036b4:	425b      	neglt	r3, r3
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	4413      	add	r3, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fe f98a 	bl	80019d8 <lfs_alloc>
 80036c4:	60f8      	str	r0, [r7, #12]
        if (err) {
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <lfs_dir_alloc+0x38>
            return err;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	e058      	b.n	8003782 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3301      	adds	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	dde5      	ble.n	80036a8 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80036ec:	2004      	movs	r0, #4
 80036ee:	9003      	str	r0, [sp, #12]
 80036f0:	9202      	str	r2, [sp, #8]
 80036f2:	2200      	movs	r2, #0
 80036f4:	9201      	str	r2, [sp, #4]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2304      	movs	r3, #4
 80036fa:	460a      	mov	r2, r1
 80036fc:	2100      	movs	r1, #0
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd f9d6 	bl	8000ab0 <lfs_bd_read>
 8003704:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd f964 	bl	80009d8 <lfs_fromle32>
 8003710:	4602      	mov	r2, r0
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <lfs_dir_alloc+0x90>
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003722:	d001      	beq.n	8003728 <lfs_dir_alloc+0x90>
        return err;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	e02c      	b.n	8003782 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b00      	cmp	r3, #0
 8003730:	dd0e      	ble.n	8003750 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	3301      	adds	r3, #1
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	4619      	mov	r1, r3
 8003744:	4610      	mov	r0, r2
 8003746:	f7fd f8fc 	bl	8000942 <lfs_alignup>
 800374a:	4602      	mov	r2, r0
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2204      	movs	r2, #4
 8003754:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2200      	movs	r2, #0
 8003762:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f04f 32ff 	mov.w	r2, #4294967295
 800376a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f04f 32ff 	mov.w	r2, #4294967295
 8003772:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800378a:	b580      	push	{r7, lr}
 800378c:	b092      	sub	sp, #72	; 0x48
 800378e:	af04      	add	r7, sp, #16
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003798:	f107 0310 	add.w	r3, r7, #16
 800379c:	4619      	mov	r1, r3
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff ff7a 	bl	8003698 <lfs_dir_alloc>
 80037a4:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80037a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <lfs_dir_split+0x26>
        return err;
 80037ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ae:	e03c      	b.n	800382a <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	7ddb      	ldrb	r3, [r3, #23]
 80037b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80037c4:	f107 0110 	add.w	r1, r7, #16
 80037c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037cc:	9302      	str	r3, [sp, #8]
 80037ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f879 	bl	80038d4 <lfs_dir_compact>
 80037e2:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da01      	bge.n	80037ee <lfs_dir_split+0x64>
        return res;
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	e01d      	b.n	800382a <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2201      	movs	r2, #1
 80037fe:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3320      	adds	r3, #32
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f7fd fcf1 	bl	80011f0 <lfs_pair_cmp>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <lfs_dir_split+0x9e>
 8003814:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003818:	2b00      	cmp	r3, #0
 800381a:	d105      	bne.n	8003828 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3738      	adds	r7, #56	; 0x38
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8003842:	68b8      	ldr	r0, [r7, #8]
 8003844:	f7fd fde7 	bl	8001416 <lfs_tag_dsize>
 8003848:	4602      	mov	r2, r0
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	441a      	add	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	601a      	str	r2, [r3, #0]
    return 0;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	f7ff fd1d 	bl	80032b8 <lfs_dir_commitattr>
 800387e:	4603      	mov	r3, r0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003898:	2b00      	cmp	r3, #0
 800389a:	dd11      	ble.n	80038c0 <lfs_dir_needsrelocation+0x38>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	3301      	adds	r3, #1
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038a8:	3201      	adds	r2, #1
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80038b2:	fb02 f201 	mul.w	r2, r2, r1
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <lfs_dir_needsrelocation+0x38>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <lfs_dir_needsrelocation+0x3a>
 80038c0:	2300      	movs	r3, #0
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	b2db      	uxtb	r3, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b0a4      	sub	sp, #144	; 0x90
 80038d8:	af0a      	add	r7, sp, #40	; 0x28
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80038e2:	2300      	movs	r3, #0
 80038e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff ffcc 	bl	8003888 <lfs_dir_needsrelocation>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003900:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00e      	beq.n	8003926 <lfs_dir_compact+0x52>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	657a      	str	r2, [r7, #84]	; 0x54
 800390e:	2201      	movs	r2, #1
 8003910:	65ba      	str	r2, [r7, #88]	; 0x58
 8003912:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fc69 	bl	80011f0 <lfs_pair_cmp>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	f040 8155 	bne.w	8003bd0 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800392a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800392c:	2300      	movs	r3, #0
 800392e:	643b      	str	r3, [r7, #64]	; 0x40
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	647b      	str	r3, [r7, #68]	; 0x44
 8003936:	f04f 33ff 	mov.w	r3, #4294967295
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48
 800393c:	2300      	movs	r3, #0
 800393e:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <lfs_dir_compact+0x80>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800394e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003950:	3b08      	subs	r3, #8
 8003952:	e003      	b.n	800395c <lfs_dir_compact+0x88>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800395c:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4619      	mov	r1, r3
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7fd fbe1 	bl	800112c <lfs_bd_erase>
 800396a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800396c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003974:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003978:	f000 812c 	beq.w	8003bd4 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800397c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800397e:	e187      	b.n	8003c90 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd f832 	bl	80009ee <lfs_tole32>
 800398a:	4602      	mov	r2, r0
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003996:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800399a:	2304      	movs	r3, #4
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff fc55 	bl	800324c <lfs_dir_commitprog>
 80039a2:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd f815 	bl	80009d8 <lfs_fromle32>
 80039ae:	4602      	mov	r2, r0
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	609a      	str	r2, [r3, #8]
            if (err) {
 80039b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80039ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039bc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80039c0:	f000 810a 	beq.w	8003bd8 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80039c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c6:	e163      	b.n	8003c90 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80039c8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80039cc:	425b      	negs	r3, r3
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	637a      	str	r2, [r7, #52]	; 0x34
 80039d6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80039da:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80039dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80039e0:	9208      	str	r2, [sp, #32]
 80039e2:	4aad      	ldr	r2, [pc, #692]	; (8003c98 <lfs_dir_compact+0x3c4>)
 80039e4:	9207      	str	r2, [sp, #28]
 80039e6:	9306      	str	r3, [sp, #24]
 80039e8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80039ec:	9305      	str	r3, [sp, #20]
 80039ee:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80039f2:	9304      	str	r3, [sp, #16]
 80039f4:	2300      	movs	r3, #0
 80039f6:	9303      	str	r3, [sp, #12]
 80039f8:	4ba8      	ldr	r3, [pc, #672]	; (8003c9c <lfs_dir_compact+0x3c8>)
 80039fa:	9302      	str	r3, [sp, #8]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
 8003a08:	2200      	movs	r2, #0
 8003a0a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f7fe fab3 	bl	8001f78 <lfs_dir_traverse>
 8003a12:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8003a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8003a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a1c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003a20:	f000 80dc 	beq.w	8003bdc <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8003a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a26:	e133      	b.n	8003c90 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	3318      	adds	r3, #24
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fd fbc4 	bl	80011ba <lfs_pair_isnull>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f083 0301 	eor.w	r3, r3, #1
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d022      	beq.n	8003a84 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3318      	adds	r3, #24
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd fc45 	bl	80012d2 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	7ddb      	ldrb	r3, [r3, #23]
 8003a4c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003a50:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003a52:	4a93      	ldr	r2, [pc, #588]	; (8003ca0 <lfs_dir_compact+0x3cc>)
 8003a54:	431a      	orrs	r2, r3
                        dir->tail);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003a5a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff fc2a 	bl	80032b8 <lfs_dir_commitattr>
 8003a64:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3318      	adds	r3, #24
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fc17 	bl	800129e <lfs_pair_fromle32>
                if (err) {
 8003a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a78:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003a7c:	f000 80b0 	beq.w	8003be0 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a82:	e105      	b.n	8003c90 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003a90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a94:	f083 0301 	eor.w	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d011      	beq.n	8003ac2 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd fcc7 	bl	800143e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fcbe 	bl	800143e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fcb5 	bl	800143e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ada:	f023 0303 	bic.w	r3, r3, #3
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff fa39 	bl	8002f60 <lfs_dir_getgstate>
 8003aee:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <lfs_dir_compact+0x226>
                return err;
 8003af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af8:	e0ca      	b.n	8003c90 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fcc2 	bl	8001488 <lfs_gstate_iszero>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d016      	beq.n	8003b3e <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8003b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fd fd5d 	bl	80015d4 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b1e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003b22:	4a60      	ldr	r2, [pc, #384]	; (8003ca4 <lfs_dir_compact+0x3d0>)
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f7ff fbc7 	bl	80032b8 <lfs_dir_commitattr>
 8003b2a:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8003b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b34:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003b38:	d054      	beq.n	8003be4 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8003b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3c:	e0a8      	b.n	8003c90 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8003b3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b42:	4619      	mov	r1, r3
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f7ff fc37 	bl	80033b8 <lfs_dir_commitcrc>
 8003b4a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8003b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b54:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003b58:	d046      	beq.n	8003be8 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5c:	e098      	b.n	8003c90 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b64:	6992      	ldr	r2, [r2, #24]
 8003b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b6a:	fb02 f201 	mul.w	r2, r2, r1
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d006      	beq.n	8003b82 <lfs_dir_compact+0x2ae>
 8003b74:	4b4c      	ldr	r3, [pc, #304]	; (8003ca8 <lfs_dir_compact+0x3d4>)
 8003b76:	4a4d      	ldr	r2, [pc, #308]	; (8003cac <lfs_dir_compact+0x3d8>)
 8003b78:	f640 010f 	movw	r1, #2063	; 0x80f
 8003b7c:	484c      	ldr	r0, [pc, #304]	; (8003cb0 <lfs_dir_compact+0x3dc>)
 8003b7e:	f006 f987 	bl	8009e90 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fd fb03 	bl	8001190 <lfs_pair_swap>
            dir->count = end - begin;
 8003b8a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003b8e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3348      	adds	r3, #72	; 0x48
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003bb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003bb6:	f083 0301 	eor.w	r3, r3, #1
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d064      	beq.n	8003c8a <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	333c      	adds	r3, #60	; 0x3c
 8003bc6:	3230      	adds	r2, #48	; 0x30
 8003bc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003bce:	e05c      	b.n	8003c8a <lfs_dir_compact+0x3b6>
        goto relocate;
 8003bd0:	bf00      	nop
 8003bd2:	e00a      	b.n	8003bea <lfs_dir_compact+0x316>
                    goto relocate;
 8003bd4:	bf00      	nop
 8003bd6:	e008      	b.n	8003bea <lfs_dir_compact+0x316>
                    goto relocate;
 8003bd8:	bf00      	nop
 8003bda:	e006      	b.n	8003bea <lfs_dir_compact+0x316>
                    goto relocate;
 8003bdc:	bf00      	nop
 8003bde:	e004      	b.n	8003bea <lfs_dir_compact+0x316>
                        goto relocate;
 8003be0:	bf00      	nop
 8003be2:	e002      	b.n	8003bea <lfs_dir_compact+0x316>
                        goto relocate;
 8003be4:	bf00      	nop
 8003be6:	e000      	b.n	8003bea <lfs_dir_compact+0x316>
                    goto relocate;
 8003be8:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3310      	adds	r3, #16
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f7fc ff34 	bl	8000a64 <lfs_cache_drop>
        if (!tired) {
 8003bfc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003c00:	f083 0301 	eor.w	r3, r3, #1
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <lfs_dir_compact+0x3e0>)
 8003c10:	9200      	str	r2, [sp, #0]
 8003c12:	f640 0221 	movw	r2, #2081	; 0x821
 8003c16:	4926      	ldr	r1, [pc, #152]	; (8003cb0 <lfs_dir_compact+0x3dc>)
 8003c18:	4827      	ldr	r0, [pc, #156]	; (8003cb8 <lfs_dir_compact+0x3e4>)
 8003c1a:	f006 fd5f 	bl	800a6dc <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2200      	movs	r2, #0
 8003c22:	617a      	str	r2, [r7, #20]
 8003c24:	2201      	movs	r2, #1
 8003c26:	61ba      	str	r2, [r7, #24]
 8003c28:	f107 0214 	add.w	r2, r7, #20
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd fade 	bl	80011f0 <lfs_pair_cmp>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10c      	bne.n	8003c54 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <lfs_dir_compact+0x3e0>)
 8003c40:	9200      	str	r2, [sp, #0]
 8003c42:	f640 0226 	movw	r2, #2086	; 0x826
 8003c46:	491a      	ldr	r1, [pc, #104]	; (8003cb0 <lfs_dir_compact+0x3dc>)
 8003c48:	481c      	ldr	r0, [pc, #112]	; (8003cbc <lfs_dir_compact+0x3e8>)
 8003c4a:	f006 fd47 	bl	800a6dc <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003c4e:	f06f 031b 	mvn.w	r3, #27
 8003c52:	e01d      	b.n	8003c90 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4619      	mov	r1, r3
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7fd febc 	bl	80019d8 <lfs_alloc>
 8003c60:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00c      	beq.n	8003c82 <lfs_dir_compact+0x3ae>
 8003c68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c6a:	f113 0f1c 	cmn.w	r3, #28
 8003c6e:	d106      	bne.n	8003c7e <lfs_dir_compact+0x3aa>
 8003c70:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003c74:	f083 0301 	eor.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <lfs_dir_compact+0x3ae>
            return err;
 8003c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c80:	e006      	b.n	8003c90 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8003c88:	e64d      	b.n	8003926 <lfs_dir_compact+0x52>
        break;
 8003c8a:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003c8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3768      	adds	r7, #104	; 0x68
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	0800385f 	.word	0x0800385f
 8003c9c:	400ffc00 	.word	0x400ffc00
 8003ca0:	000ffc08 	.word	0x000ffc08
 8003ca4:	7ffffc0c 	.word	0x7ffffc0c
 8003ca8:	0800b0f8 	.word	0x0800b0f8
 8003cac:	0800bc30 	.word	0x0800bc30
 8003cb0:	0800af94 	.word	0x0800af94
 8003cb4:	0800b0a0 	.word	0x0800b0a0
 8003cb8:	0800b120 	.word	0x0800b120
 8003cbc:	0800b144 	.word	0x0800b144

08003cc0 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b097      	sub	sp, #92	; 0x5c
 8003cc4:	af0a      	add	r7, sp, #40	; 0x28
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003cce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003cd4:	e058      	b.n	8003d88 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	4252      	negs	r2, r2
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	b212      	sxth	r2, r2
 8003ce8:	f107 0118 	add.w	r1, r7, #24
 8003cec:	9108      	str	r1, [sp, #32]
 8003cee:	4979      	ldr	r1, [pc, #484]	; (8003ed4 <lfs_dir_splittingcompact+0x214>)
 8003cf0:	9107      	str	r1, [sp, #28]
 8003cf2:	9206      	str	r2, [sp, #24]
 8003cf4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003cf8:	9205      	str	r2, [sp, #20]
 8003cfa:	9304      	str	r3, [sp, #16]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9303      	str	r3, [sp, #12]
 8003d00:	4b75      	ldr	r3, [pc, #468]	; (8003ed8 <lfs_dir_splittingcompact+0x218>)
 8003d02:	9302      	str	r3, [sp, #8]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d10:	2200      	movs	r2, #0
 8003d12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7fe f92f 	bl	8001f78 <lfs_dir_traverse>
 8003d1a:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <lfs_dir_splittingcompact+0x66>
                return err;
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	e0d2      	b.n	8003ecc <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8003d26:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2bfe      	cmp	r3, #254	; 0xfe
 8003d30:	d822      	bhi.n	8003d78 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d36:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003d38:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    && size <= lfs_min(
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    && size <= lfs_min(
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	e003      	b.n	8003d58 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d54:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003d56:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 8003d5c:	6992      	ldr	r2, [r2, #24]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fc fdee 	bl	8000942 <lfs_alignup>
 8003d66:	4603      	mov	r3, r0
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7fc fdc4 	bl	80008f8 <lfs_min>
 8003d70:	4602      	mov	r2, r0
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d20e      	bcs.n	8003d96 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003d78:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d84:	4413      	add	r3, r2
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003d88:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d8a0      	bhi.n	8003cd6 <lfs_dir_splittingcompact+0x16>
 8003d94:	e000      	b.n	8003d98 <lfs_dir_splittingcompact+0xd8>
                break;
 8003d96:	bf00      	nop
        }

        if (split == begin) {
 8003d98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d02d      	beq.n	8003dfe <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003daa:	9202      	str	r2, [sp, #8]
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff fce6 	bl	800378a <lfs_dir_split>
 8003dbe:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <lfs_dir_splittingcompact+0x112>
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	f113 0f1c 	cmn.w	r3, #28
 8003dcc:	d001      	beq.n	8003dd2 <lfs_dir_splittingcompact+0x112>
            return err;
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	e07c      	b.n	8003ecc <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00e      	beq.n	8003df6 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	493e      	ldr	r1, [pc, #248]	; (8003edc <lfs_dir_splittingcompact+0x21c>)
 8003de2:	9101      	str	r1, [sp, #4]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	4613      	mov	r3, r2
 8003de8:	f640 0279 	movw	r2, #2169	; 0x879
 8003dec:	493c      	ldr	r1, [pc, #240]	; (8003ee0 <lfs_dir_splittingcompact+0x220>)
 8003dee:	483d      	ldr	r0, [pc, #244]	; (8003ee4 <lfs_dir_splittingcompact+0x224>)
 8003df0:	f006 fc74 	bl	800a6dc <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003df4:	e004      	b.n	8003e00 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003dfc:	e767      	b.n	8003cce <lfs_dir_splittingcompact+0xe>
            break;
 8003dfe:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff fd40 	bl	8003888 <lfs_dir_needsrelocation>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04f      	beq.n	8003eae <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2200      	movs	r2, #0
 8003e12:	613a      	str	r2, [r7, #16]
 8003e14:	2201      	movs	r2, #1
 8003e16:	617a      	str	r2, [r7, #20]
 8003e18:	f107 0210 	add.w	r2, r7, #16
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd f9e6 	bl	80011f0 <lfs_pair_cmp>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d141      	bne.n	8003eae <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f003 fb92 	bl	8007554 <lfs_fs_size_>
 8003e30:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	da01      	bge.n	8003e3c <lfs_dir_splittingcompact+0x17c>
            return size;
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	e047      	b.n	8003ecc <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	1ad2      	subs	r2, r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e48:	08db      	lsrs	r3, r3, #3
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d92f      	bls.n	8003eae <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	4a22      	ldr	r2, [pc, #136]	; (8003edc <lfs_dir_splittingcompact+0x21c>)
 8003e54:	9200      	str	r2, [sp, #0]
 8003e56:	f640 028f 	movw	r2, #2191	; 0x88f
 8003e5a:	4921      	ldr	r1, [pc, #132]	; (8003ee0 <lfs_dir_splittingcompact+0x220>)
 8003e5c:	4822      	ldr	r0, [pc, #136]	; (8003ee8 <lfs_dir_splittingcompact+0x228>)
 8003e5e:	f006 fc3d 	bl	800a6dc <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003e62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e66:	9302      	str	r3, [sp, #8]
 8003e68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f7ff fc86 	bl	800378a <lfs_dir_split>
 8003e7e:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <lfs_dir_splittingcompact+0x1d2>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f113 0f1c 	cmn.w	r3, #28
 8003e8c:	d001      	beq.n	8003e92 <lfs_dir_splittingcompact+0x1d2>
                return err;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	e01c      	b.n	8003ecc <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <lfs_dir_splittingcompact+0x21c>)
 8003e9a:	f640 0299 	movw	r2, #2201	; 0x899
 8003e9e:	4910      	ldr	r1, [pc, #64]	; (8003ee0 <lfs_dir_splittingcompact+0x220>)
 8003ea0:	4812      	ldr	r0, [pc, #72]	; (8003eec <lfs_dir_splittingcompact+0x22c>)
 8003ea2:	f006 fc1b 	bl	800a6dc <iprintf>
 8003ea6:	e002      	b.n	8003eae <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003eae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff fd05 	bl	80038d4 <lfs_dir_compact>
 8003eca:	4603      	mov	r3, r0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3734      	adds	r7, #52	; 0x34
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd90      	pop	{r4, r7, pc}
 8003ed4:	08003833 	.word	0x08003833
 8003ed8:	400ffc00 	.word	0x400ffc00
 8003edc:	0800b0a0 	.word	0x0800b0a0
 8003ee0:	0800af94 	.word	0x0800af94
 8003ee4:	0800b17c 	.word	0x0800b17c
 8003ee8:	0800b1ac 	.word	0x0800b1ac
 8003eec:	0800b1dc 	.word	0x0800b1dc

08003ef0 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003ef0:	b5b0      	push	{r4, r5, r7, lr}
 8003ef2:	b0a6      	sub	sp, #152	; 0x98
 8003ef4:	af0a      	add	r7, sp, #40	; 0x28
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003f08:	2300      	movs	r3, #0
 8003f0a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f0c:	e06d      	b.n	8003fea <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	4413      	add	r3, r2
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fd fa35 	bl	8001388 <lfs_tag_type3>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	f240 4301 	movw	r3, #1025	; 0x401
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d106      	bne.n	8003f38 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	8a9b      	ldrh	r3, [r3, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	829a      	strh	r2, [r3, #20]
 8003f36:	e055      	b.n	8003fe4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	4413      	add	r3, r2
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd fa20 	bl	8001388 <lfs_tag_type3>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d114      	bne.n	8003f7e <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	8a9b      	ldrh	r3, [r3, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <lfs_dir_relocatingcommit+0x7a>
 8003f5c:	4ba4      	ldr	r3, [pc, #656]	; (80041f0 <lfs_dir_relocatingcommit+0x300>)
 8003f5e:	4aa5      	ldr	r2, [pc, #660]	; (80041f4 <lfs_dir_relocatingcommit+0x304>)
 8003f60:	f640 01b2 	movw	r1, #2226	; 0x8b2
 8003f64:	48a4      	ldr	r0, [pc, #656]	; (80041f8 <lfs_dir_relocatingcommit+0x308>)
 8003f66:	f005 ff93 	bl	8009e90 <__assert_func>
            dir->count -= 1;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	8a9b      	ldrh	r3, [r3, #20]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003f7c:	e032      	b.n	8003fe4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	4413      	add	r3, r2
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fd f9dd 	bl	8001348 <lfs_tag_type1>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f94:	d126      	bne.n	8003fe4 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	4413      	add	r3, r2
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd f9f1 	bl	80013a8 <lfs_tag_chunk>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	3318      	adds	r3, #24
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd f95d 	bl	800129e <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	667b      	str	r3, [r7, #100]	; 0x64
 8003fea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	db8c      	blt.n	8003f0e <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003ff4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d02b      	beq.n	8004054 <lfs_dir_relocatingcommit+0x164>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	8a9b      	ldrh	r3, [r3, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d127      	bne.n	8004054 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8004004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <lfs_dir_relocatingcommit+0x12a>
 800400c:	4b7b      	ldr	r3, [pc, #492]	; (80041fc <lfs_dir_relocatingcommit+0x30c>)
 800400e:	4a79      	ldr	r2, [pc, #484]	; (80041f4 <lfs_dir_relocatingcommit+0x304>)
 8004010:	f640 01bf 	movw	r1, #2239	; 0x8bf
 8004014:	4878      	ldr	r0, [pc, #480]	; (80041f8 <lfs_dir_relocatingcommit+0x308>)
 8004016:	f005 ff3b 	bl	8009e90 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004020:	4619      	mov	r1, r3
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f002 fdf2 	bl	8006c0c <lfs_fs_pred>
 8004028:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 800402a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <lfs_dir_relocatingcommit+0x14c>
 8004030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004032:	f113 0f02 	cmn.w	r3, #2
 8004036:	d001      	beq.n	800403c <lfs_dir_relocatingcommit+0x14c>
            return err;
 8004038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800403a:	e20f      	b.n	800445c <lfs_dir_relocatingcommit+0x56c>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800403c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800403e:	f113 0f02 	cmn.w	r3, #2
 8004042:	d007      	beq.n	8004054 <lfs_dir_relocatingcommit+0x164>
 8004044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004048:	7ddb      	ldrb	r3, [r3, #23]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800404e:	2302      	movs	r3, #2
 8004050:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8004052:	e121      	b.n	8004298 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	7d9b      	ldrb	r3, [r3, #22]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80fb 	beq.w	8004254 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8004062:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004070:	f04f 33ff 	mov.w	r3, #4294967295
 8004074:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800407a:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <lfs_dir_relocatingcommit+0x1a0>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800408a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408c:	3b08      	subs	r3, #8
 800408e:	e003      	b.n	8004098 <lfs_dir_relocatingcommit+0x1a8>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	3318      	adds	r3, #24
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd f917 	bl	80012d2 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 80040b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ba:	9308      	str	r3, [sp, #32]
 80040bc:	4b50      	ldr	r3, [pc, #320]	; (8004200 <lfs_dir_relocatingcommit+0x310>)
 80040be:	9307      	str	r3, [sp, #28]
 80040c0:	2300      	movs	r3, #0
 80040c2:	9306      	str	r3, [sp, #24]
 80040c4:	2300      	movs	r3, #0
 80040c6:	9305      	str	r3, [sp, #20]
 80040c8:	2300      	movs	r3, #0
 80040ca:	9304      	str	r3, [sp, #16]
 80040cc:	2300      	movs	r3, #0
 80040ce:	9303      	str	r3, [sp, #12]
 80040d0:	2300      	movs	r3, #0
 80040d2:	9302      	str	r3, [sp, #8]
 80040d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040d8:	9301      	str	r3, [sp, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	460b      	mov	r3, r1
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7fd ff48 	bl	8001f78 <lfs_dir_traverse>
 80040e8:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3318      	adds	r3, #24
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fd f8d5 	bl	800129e <lfs_pair_fromle32>
        if (err) {
 80040f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80040fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fc:	f113 0f1c 	cmn.w	r3, #28
 8004100:	f000 80aa 	beq.w	8004258 <lfs_dir_relocatingcommit+0x368>
 8004104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004106:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800410a:	f000 80a5 	beq.w	8004258 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800410e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004110:	e1a4      	b.n	800445c <lfs_dir_relocatingcommit+0x56c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8004112:	f107 031c 	add.w	r3, r7, #28
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004124:	f107 031c 	add.w	r3, r7, #28
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd f987 	bl	800143e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004136:	f107 031c 	add.w	r3, r7, #28
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f7fd f97e 	bl	800143e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004148:	f107 031c 	add.w	r3, r7, #28
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd f975 	bl	800143e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800415a:	f023 0303 	bic.w	r3, r3, #3
 800415e:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8004160:	f107 031c 	add.w	r3, r7, #28
 8004164:	4618      	mov	r0, r3
 8004166:	f7fd f98f 	bl	8001488 <lfs_gstate_iszero>
 800416a:	4603      	mov	r3, r0
 800416c:	f083 0301 	eor.w	r3, r3, #1
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d027      	beq.n	80041c6 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8004176:	f107 031c 	add.w	r3, r7, #28
 800417a:	461a      	mov	r2, r3
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7fe feee 	bl	8002f60 <lfs_dir_getgstate>
 8004184:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8004186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 800418c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418e:	e165      	b.n	800445c <lfs_dir_relocatingcommit+0x56c>
            }

            lfs_gstate_tole32(&delta);
 8004190:	f107 031c 	add.w	r3, r7, #28
 8004194:	4618      	mov	r0, r3
 8004196:	f7fd fa1d 	bl	80015d4 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800419a:	f107 031c 	add.w	r3, r7, #28
 800419e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80041a2:	4a18      	ldr	r2, [pc, #96]	; (8004204 <lfs_dir_relocatingcommit+0x314>)
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff f887 	bl	80032b8 <lfs_dir_commitattr>
 80041aa:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80041b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b4:	f113 0f1c 	cmn.w	r3, #28
 80041b8:	d050      	beq.n	800425c <lfs_dir_relocatingcommit+0x36c>
 80041ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041bc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80041c0:	d04c      	beq.n	800425c <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80041c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c4:	e14a      	b.n	800445c <lfs_dir_relocatingcommit+0x56c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80041c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041ca:	4619      	mov	r1, r3
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff f8f3 	bl	80033b8 <lfs_dir_commitcrc>
 80041d2:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 80041d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80041da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041dc:	f113 0f1c 	cmn.w	r3, #28
 80041e0:	d03e      	beq.n	8004260 <lfs_dir_relocatingcommit+0x370>
 80041e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80041e8:	d03a      	beq.n	8004260 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80041ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ec:	e136      	b.n	800445c <lfs_dir_relocatingcommit+0x56c>
 80041ee:	bf00      	nop
 80041f0:	0800b208 	.word	0x0800b208
 80041f4:	0800bc40 	.word	0x0800bc40
 80041f8:	0800af94 	.word	0x0800af94
 80041fc:	0800b218 	.word	0x0800b218
 8004200:	0800385f 	.word	0x0800385f
 8004204:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8004208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800420e:	6992      	ldr	r2, [r2, #24]
 8004210:	fbb3 f1f2 	udiv	r1, r3, r2
 8004214:	fb02 f201 	mul.w	r2, r2, r1
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <lfs_dir_relocatingcommit+0x33c>
 800421e:	4b91      	ldr	r3, [pc, #580]	; (8004464 <lfs_dir_relocatingcommit+0x574>)
 8004220:	4a91      	ldr	r2, [pc, #580]	; (8004468 <lfs_dir_relocatingcommit+0x578>)
 8004222:	f640 1109 	movw	r1, #2313	; 0x909
 8004226:	4891      	ldr	r0, [pc, #580]	; (800446c <lfs_dir_relocatingcommit+0x57c>)
 8004228:	f005 fe32 	bl	8009e90 <__assert_func>
        dir->off = commit.off;
 800422c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8004232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	333c      	adds	r3, #60	; 0x3c
 800423e:	3230      	adds	r2, #48	; 0x30
 8004240:	ca07      	ldmia	r2, {r0, r1, r2}
 8004242:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3348      	adds	r3, #72	; 0x48
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	605a      	str	r2, [r3, #4]
 8004250:	609a      	str	r2, [r3, #8]
 8004252:	e021      	b.n	8004298 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8004254:	bf00      	nop
 8004256:	e004      	b.n	8004262 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004258:	bf00      	nop
 800425a:	e002      	b.n	8004262 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 800425c:	bf00      	nop
 800425e:	e000      	b.n	8004262 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004260:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3310      	adds	r3, #16
 8004266:	4619      	mov	r1, r3
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7fc fbfb 	bl	8000a64 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	8a9b      	ldrh	r3, [r3, #20]
 8004272:	9302      	str	r3, [sp, #8]
 8004274:	2300      	movs	r3, #0
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff fd1b 	bl	8003cc0 <lfs_dir_splittingcompact>
 800428a:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 800428c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428e:	2b00      	cmp	r3, #0
 8004290:	da01      	bge.n	8004296 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8004292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004294:	e0e2      	b.n	800445c <lfs_dir_relocatingcommit+0x56c>
    }

    goto fixmlist;
 8004296:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	64bb      	str	r3, [r7, #72]	; 0x48
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	663b      	str	r3, [r7, #96]	; 0x60
 80042aa:	e0d2      	b.n	8004452 <lfs_dir_relocatingcommit+0x562>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80042ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ae:	3308      	adds	r3, #8
 80042b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042b4:	4611      	mov	r1, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fc ff9a 	bl	80011f0 <lfs_pair_cmp>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 80c4 	bne.w	800444c <lfs_dir_relocatingcommit+0x55c>
            d->m = *dir;
 80042c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	f103 0408 	add.w	r4, r3, #8
 80042cc:	4615      	mov	r5, r2
 80042ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80042da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042dc:	3308      	adds	r3, #8
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	f000 80a9 	beq.w	8004438 <lfs_dir_relocatingcommit+0x548>
                for (int i = 0; i < attrcount; i++) {
 80042e6:	2300      	movs	r3, #0
 80042e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ea:	e07b      	b.n	80043e4 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80042ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	4413      	add	r3, r2
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd f846 	bl	8001388 <lfs_tag_type3>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004304:	429a      	cmp	r2, r3
 8004306:	d115      	bne.n	8004334 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8004308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800430a:	889c      	ldrh	r4, [r3, #4]
 800430c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	4413      	add	r3, r2
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd f860 	bl	80013dc <lfs_tag_id>
 800431c:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800431e:	429c      	cmp	r4, r3
 8004320:	d108      	bne.n	8004334 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8004322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004324:	f04f 32ff 	mov.w	r2, #4294967295
 8004328:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 800432a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800432c:	f04f 32ff 	mov.w	r2, #4294967295
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	e054      	b.n	80043de <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	4413      	add	r3, r2
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd f822 	bl	8001388 <lfs_tag_type3>
 8004344:	4603      	mov	r3, r0
 8004346:	461a      	mov	r2, r3
 8004348:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800434c:	429a      	cmp	r2, r3
 800434e:	d11c      	bne.n	800438a <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8004350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004352:	889c      	ldrh	r4, [r3, #4]
 8004354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	4413      	add	r3, r2
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd f83c 	bl	80013dc <lfs_tag_id>
 8004364:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004366:	429c      	cmp	r4, r3
 8004368:	d90f      	bls.n	800438a <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 800436a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436c:	889b      	ldrh	r3, [r3, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004374:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004378:	799b      	ldrb	r3, [r3, #6]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d12f      	bne.n	80043de <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 800437e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	1e5a      	subs	r2, r3, #1
 8004384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8004388:	e029      	b.n	80043de <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800438a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4413      	add	r3, r2
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7fc fff7 	bl	8001388 <lfs_tag_type3>
 800439a:	4603      	mov	r3, r0
 800439c:	461a      	mov	r2, r3
 800439e:	f240 4301 	movw	r3, #1025	; 0x401
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d11b      	bne.n	80043de <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80043a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a8:	889c      	ldrh	r4, [r3, #4]
 80043aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	4413      	add	r3, r2
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd f811 	bl	80013dc <lfs_tag_id>
 80043ba:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80043bc:	429c      	cmp	r4, r3
 80043be:	d30e      	bcc.n	80043de <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 80043c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043c2:	889b      	ldrh	r3, [r3, #4]
 80043c4:	3301      	adds	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ca:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80043cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ce:	799b      	ldrb	r3, [r3, #6]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d104      	bne.n	80043de <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 80043d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043dc:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 80043de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e0:	3301      	adds	r3, #1
 80043e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043ea:	429a      	cmp	r2, r3
 80043ec:	f6ff af7e 	blt.w	80042ec <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80043f0:	e022      	b.n	8004438 <lfs_dir_relocatingcommit+0x548>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 80043f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f4:	f103 0220 	add.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3320      	adds	r3, #32
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f7fc fef6 	bl	80011f0 <lfs_pair_cmp>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <lfs_dir_relocatingcommit+0x52a>
                    d->id -= d->m.count;
 800440a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440c:	889a      	ldrh	r2, [r3, #4]
 800440e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004410:	8b9b      	ldrh	r3, [r3, #28]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	b29a      	uxth	r2, r3
 8004416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004418:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800441a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800441c:	f103 0108 	add.w	r1, r3, #8
 8004420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004422:	3320      	adds	r3, #32
 8004424:	461a      	mov	r2, r3
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7fe fd7e 	bl	8002f28 <lfs_dir_fetch>
 800442c:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 800442e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <lfs_dir_relocatingcommit+0x548>
                    return err;
 8004434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004436:	e011      	b.n	800445c <lfs_dir_relocatingcommit+0x56c>
            while (d->id >= d->m.count && d->m.split) {
 8004438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800443a:	889a      	ldrh	r2, [r3, #4]
 800443c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800443e:	8b9b      	ldrh	r3, [r3, #28]
 8004440:	429a      	cmp	r2, r3
 8004442:	d303      	bcc.n	800444c <lfs_dir_relocatingcommit+0x55c>
 8004444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004446:	7fdb      	ldrb	r3, [r3, #31]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1d2      	bne.n	80043f2 <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800444c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	663b      	str	r3, [r7, #96]	; 0x60
 8004452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004454:	2b00      	cmp	r3, #0
 8004456:	f47f af29 	bne.w	80042ac <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800445c:	4618      	mov	r0, r3
 800445e:	3770      	adds	r7, #112	; 0x70
 8004460:	46bd      	mov	sp, r7
 8004462:	bdb0      	pop	{r4, r5, r7, pc}
 8004464:	0800b0f8 	.word	0x0800b0f8
 8004468:	0800bc40 	.word	0x0800bc40
 800446c:	0800af94 	.word	0x0800af94

08004470 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004470:	b5b0      	push	{r4, r5, r7, lr}
 8004472:	b0bc      	sub	sp, #240	; 0xf0
 8004474:	af04      	add	r7, sp, #16
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004486:	e045      	b.n	8004514 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448c:	3308      	adds	r3, #8
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	d03a      	beq.n	800450a <lfs_dir_orphaningcommit+0x9a>
 8004494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004498:	3308      	adds	r3, #8
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	4611      	mov	r1, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fc fea6 	bl	80011f0 <lfs_pair_cmp>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d12f      	bne.n	800450a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80044aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ae:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d12a      	bne.n	800450a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80044b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d023      	beq.n	800450a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80044c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d91b      	bls.n	800450a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80044d2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fff2 	bl	80054c0 <lfs_file_outline>
 80044dc:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80044e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <lfs_dir_orphaningcommit+0x7e>
                return err;
 80044e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044ec:	e2ad      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80044ee:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f001 f806 	bl	8005504 <lfs_file_flush>
 80044f8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80044fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <lfs_dir_orphaningcommit+0x9a>
                return err;
 8004504:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004508:	e29f      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800450a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1b5      	bne.n	8004488 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004532:	461d      	mov	r5, r3
 8004534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004538:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800453c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8004546:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff fccc 	bl	8003ef0 <lfs_dir_relocatingcommit>
 8004558:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 800455c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004560:	2b00      	cmp	r3, #0
 8004562:	da02      	bge.n	800456a <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004568:	e26f      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f7fc fe3c 	bl	80011f0 <lfs_pair_cmp>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	461d      	mov	r5, r3
 8004582:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800458a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800458e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8004592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004596:	2b02      	cmp	r3, #2
 8004598:	d14a      	bne.n	8004630 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3348      	adds	r3, #72	; 0x48
 800459e:	461a      	mov	r2, r3
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7fe fcdc 	bl	8002f60 <lfs_dir_getgstate>
 80045a8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80045ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <lfs_dir_orphaningcommit+0x14a>
            return err;
 80045b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045b8:	e247      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80045ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80045c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3318      	adds	r3, #24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fc fe81 	bl	80012d2 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	7ddb      	ldrb	r3, [r3, #23]
 80045d4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80045d8:	051a      	lsls	r2, r3, #20
 80045da:	4bc2      	ldr	r3, [pc, #776]	; (80048e4 <lfs_dir_orphaningcommit+0x474>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	667b      	str	r3, [r7, #100]	; 0x64
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	3318      	adds	r3, #24
 80045e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80045e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80045ea:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80045ee:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80045f2:	2000      	movs	r0, #0
 80045f4:	9001      	str	r0, [sp, #4]
 80045f6:	2001      	movs	r0, #1
 80045f8:	9000      	str	r0, [sp, #0]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff fc78 	bl	8003ef0 <lfs_dir_relocatingcommit>
 8004600:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	3318      	adds	r3, #24
 8004608:	4618      	mov	r0, r3
 800460a:	f7fc fe48 	bl	800129e <lfs_pair_fromle32>
        if (state < 0) {
 800460e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004612:	2b00      	cmp	r3, #0
 8004614:	da02      	bge.n	800461c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8004616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800461a:	e216      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 800461c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004620:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004628:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800462c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8004630:	2300      	movs	r3, #0
 8004632:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8004636:	e1fc      	b.n	8004a32 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8004638:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800463c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004640:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004644:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004648:	4ca7      	ldr	r4, [pc, #668]	; (80048e8 <lfs_dir_orphaningcommit+0x478>)
 800464a:	9403      	str	r4, [sp, #12]
 800464c:	9102      	str	r1, [sp, #8]
 800464e:	9201      	str	r2, [sp, #4]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	4603      	mov	r3, r0
 8004654:	f640 1295 	movw	r2, #2453	; 0x995
 8004658:	49a4      	ldr	r1, [pc, #656]	; (80048ec <lfs_dir_orphaningcommit+0x47c>)
 800465a:	48a5      	ldr	r0, [pc, #660]	; (80048f0 <lfs_dir_orphaningcommit+0x480>)
 800465c:	f006 f83e 	bl	800a6dc <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f103 0220 	add.w	r2, r3, #32
 800466c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f7fc fdbc 	bl	80011f0 <lfs_pair_cmp>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d107      	bne.n	800468e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800467e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8004686:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004696:	e037      	b.n	8004708 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004698:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800469c:	f103 0208 	add.w	r2, r3, #8
 80046a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc fda2 	bl	80011f0 <lfs_pair_cmp>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80046b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80046b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046ba:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80046bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046c4:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80046c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046ca:	799b      	ldrb	r3, [r3, #6]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d116      	bne.n	80046fe <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80046d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046d4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80046d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc fd86 	bl	80011f0 <lfs_pair_cmp>
 80046e4:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80046ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80046ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046f2:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80046f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80046fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004708:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1c3      	bne.n	8004698 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8004710:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004714:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004718:	4619      	mov	r1, r3
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f002 fb28 	bl	8006d70 <lfs_fs_parent>
 8004720:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8004724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004728:	2b00      	cmp	r3, #0
 800472a:	da07      	bge.n	800473c <lfs_dir_orphaningcommit+0x2cc>
 800472c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004730:	f113 0f02 	cmn.w	r3, #2
 8004734:	d002      	beq.n	800473c <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8004736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800473a:	e186      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 800473c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004740:	f113 0f02 	cmn.w	r3, #2
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800474e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004752:	f113 0f02 	cmn.w	r3, #2
 8004756:	f000 809e 	beq.w	8004896 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800475a:	2101      	movs	r1, #1
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f002 fb9f 	bl	8006ea0 <lfs_fs_preporphans>
 8004762:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8004766:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <lfs_dir_orphaningcommit+0x304>
                return err;
 800476e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004772:	e16a      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004774:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004778:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3330      	adds	r3, #48	; 0x30
 8004780:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f7fc fee4 	bl	8001554 <lfs_gstate_hasmovehere>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d02d      	beq.n	80047ee <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	4618      	mov	r0, r3
 8004798:	f7fc fe20 	bl	80013dc <lfs_tag_id>
 800479c:	4603      	mov	r3, r0
 800479e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 80047a2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80047a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a6:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80047aa:	484f      	ldr	r0, [pc, #316]	; (80048e8 <lfs_dir_orphaningcommit+0x478>)
 80047ac:	9002      	str	r0, [sp, #8]
 80047ae:	9201      	str	r2, [sp, #4]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	460b      	mov	r3, r1
 80047b4:	f640 12c2 	movw	r2, #2498	; 0x9c2
 80047b8:	494c      	ldr	r1, [pc, #304]	; (80048ec <lfs_dir_orphaningcommit+0x47c>)
 80047ba:	484e      	ldr	r0, [pc, #312]	; (80048f4 <lfs_dir_orphaningcommit+0x484>)
 80047bc:	f005 ff8e 	bl	800a6dc <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80047c0:	2200      	movs	r2, #0
 80047c2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f002 fbba 	bl	8006f40 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80047cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fc fe03 	bl	80013dc <lfs_tag_id>
 80047d6:	4603      	mov	r3, r0
 80047d8:	461a      	mov	r2, r3
 80047da:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80047de:	4293      	cmp	r3, r2
 80047e0:	d205      	bcs.n	80047ee <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80047e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047e6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80047ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80047ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f0:	657b      	str	r3, [r7, #84]	; 0x54
 80047f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f4:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80047f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc fd69 	bl	80012d2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8004800:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004804:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <lfs_dir_orphaningcommit+0x3ac>
 800480c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004810:	029b      	lsls	r3, r3, #10
 8004812:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004816:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800481a:	e000      	b.n	800481e <lfs_dir_orphaningcommit+0x3ae>
 800481c:	2300      	movs	r3, #0
 800481e:	647b      	str	r3, [r7, #68]	; 0x44
 8004820:	2300      	movs	r3, #0
 8004822:	64bb      	str	r3, [r7, #72]	; 0x48
 8004824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004828:	64fb      	str	r3, [r7, #76]	; 0x4c
 800482a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800482e:	653b      	str	r3, [r7, #80]	; 0x50
 8004830:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004834:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004838:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800483c:	2000      	movs	r0, #0
 800483e:	9001      	str	r0, [sp, #4]
 8004840:	2002      	movs	r0, #2
 8004842:	9000      	str	r0, [sp, #0]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7ff fb53 	bl	8003ef0 <lfs_dir_relocatingcommit>
 800484a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800484e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004852:	4618      	mov	r0, r3
 8004854:	f7fc fd23 	bl	800129e <lfs_pair_fromle32>
            if (state < 0) {
 8004858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800485c:	2b00      	cmp	r3, #0
 800485e:	da02      	bge.n	8004866 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004864:	e0f1      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8004866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800486a:	2b01      	cmp	r3, #1
 800486c:	d113      	bne.n	8004896 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800486e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8004874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800487a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800487e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004886:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800488a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004894:	e0cd      	b.n	8004a32 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004896:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800489a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800489e:	4619      	mov	r1, r3
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f002 f9b3 	bl	8006c0c <lfs_fs_pred>
 80048a6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80048aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <lfs_dir_orphaningcommit+0x452>
 80048b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048b6:	f113 0f02 	cmn.w	r3, #2
 80048ba:	d002      	beq.n	80048c2 <lfs_dir_orphaningcommit+0x452>
            return err;
 80048bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048c0:	e0c3      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80048c2:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01a      	beq.n	8004900 <lfs_dir_orphaningcommit+0x490>
 80048ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048ce:	f113 0f02 	cmn.w	r3, #2
 80048d2:	d115      	bne.n	8004900 <lfs_dir_orphaningcommit+0x490>
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <lfs_dir_orphaningcommit+0x488>)
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <lfs_dir_orphaningcommit+0x48c>)
 80048d8:	f640 11e5 	movw	r1, #2533	; 0x9e5
 80048dc:	4803      	ldr	r0, [pc, #12]	; (80048ec <lfs_dir_orphaningcommit+0x47c>)
 80048de:	f005 fad7 	bl	8009e90 <__assert_func>
 80048e2:	bf00      	nop
 80048e4:	000ffc08 	.word	0x000ffc08
 80048e8:	0800b0a0 	.word	0x0800b0a0
 80048ec:	0800af94 	.word	0x0800af94
 80048f0:	0800b220 	.word	0x0800b220
 80048f4:	0800b25c 	.word	0x0800b25c
 80048f8:	0800b2a0 	.word	0x0800b2a0
 80048fc:	0800bc5c 	.word	0x0800bc5c

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8004900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004904:	f113 0f02 	cmn.w	r3, #2
 8004908:	f000 8093 	beq.w	8004a32 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3330      	adds	r3, #48	; 0x30
 8004910:	4618      	mov	r0, r3
 8004912:	f7fc fdd6 	bl	80014c2 <lfs_gstate_hasorphans>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d011      	beq.n	8004940 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 800491c:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004920:	425b      	negs	r3, r3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	b25b      	sxtb	r3, r3
 8004926:	4619      	mov	r1, r3
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f002 fab9 	bl	8006ea0 <lfs_fs_preporphans>
 800492e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8004932:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 800493a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800493e:	e084      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004940:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004944:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3330      	adds	r3, #48	; 0x30
 800494c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004950:	4611      	mov	r1, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fdfe 	bl	8001554 <lfs_gstate_hasmovehere>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01c      	beq.n	8004998 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	4618      	mov	r0, r3
 8004964:	f7fc fd3a 	bl	80013dc <lfs_tag_id>
 8004968:	4603      	mov	r3, r0
 800496a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800496e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004972:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004976:	4837      	ldr	r0, [pc, #220]	; (8004a54 <lfs_dir_orphaningcommit+0x5e4>)
 8004978:	9002      	str	r0, [sp, #8]
 800497a:	9201      	str	r2, [sp, #4]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	460b      	mov	r3, r1
 8004980:	f640 12f6 	movw	r2, #2550	; 0x9f6
 8004984:	4934      	ldr	r1, [pc, #208]	; (8004a58 <lfs_dir_orphaningcommit+0x5e8>)
 8004986:	4835      	ldr	r0, [pc, #212]	; (8004a5c <lfs_dir_orphaningcommit+0x5ec>)
 8004988:	f005 fea8 	bl	800a6dc <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800498c:	2200      	movs	r2, #0
 800498e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f002 fad4 	bl	8006f40 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 800499e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 80049a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fc fc92 	bl	80012d2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80049ae:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80049b2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <lfs_dir_orphaningcommit+0x55a>
 80049ba:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80049be:	029b      	lsls	r3, r3, #10
 80049c0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80049c4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80049c8:	e000      	b.n	80049cc <lfs_dir_orphaningcommit+0x55c>
 80049ca:	2300      	movs	r3, #0
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	2300      	movs	r3, #0
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80049d6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80049da:	051a      	lsls	r2, r3, #20
 80049dc:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <lfs_dir_orphaningcommit+0x5f0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30
 80049e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80049f0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80049f4:	2000      	movs	r0, #0
 80049f6:	9001      	str	r0, [sp, #4]
 80049f8:	2002      	movs	r0, #2
 80049fa:	9000      	str	r0, [sp, #0]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff fa77 	bl	8003ef0 <lfs_dir_relocatingcommit>
 8004a02:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004a06:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fc fc47 	bl	800129e <lfs_pair_fromle32>
            if (state < 0) {
 8004a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	da02      	bge.n	8004a1e <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8004a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a1c:	e015      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8004a1e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004a22:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8004a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	f43f adfe 	beq.w	8004638 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004a3c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <lfs_dir_orphaningcommit+0x5d8>
 8004a44:	2303      	movs	r3, #3
 8004a46:	e000      	b.n	8004a4a <lfs_dir_orphaningcommit+0x5da>
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	37e0      	adds	r7, #224	; 0xe0
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bdb0      	pop	{r4, r5, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	0800b0a0 	.word	0x0800b0a0
 8004a58:	0800af94 	.word	0x0800af94
 8004a5c:	0800b25c 	.word	0x0800b25c
 8004a60:	000ffc08 	.word	0x000ffc08

08004a64 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fcf9 	bl	8004470 <lfs_dir_orphaningcommit>
 8004a7e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da01      	bge.n	8004a8a <lfs_dir_commit+0x26>
        return orphans;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	e00d      	b.n	8004aa6 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d009      	beq.n	8004aa4 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004a90:	2100      	movs	r1, #0
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f002 fb76 	bl	8007184 <lfs_fs_deorphan>
 8004a98:	6138      	str	r0, [r7, #16]
        if (err) {
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <lfs_dir_commit+0x40>
            return err;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	e000      	b.n	8004aa6 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004aae:	b590      	push	{r4, r7, lr}
 8004ab0:	b087      	sub	sp, #28
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	3b08      	subs	r3, #8
 8004ac6:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <lfs_ctz_index+0x2e>
        return 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e01c      	b.n	8004b16 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fb ff5f 	bl	80009a4 <lfs_popc>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	3302      	adds	r3, #2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	1ad2      	subs	r2, r2, r3
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	1ad4      	subs	r4, r2, r3
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7fb ff4d 	bl	80009a4 <lfs_popc>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	1ae2      	subs	r2, r4, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	601a      	str	r2, [r3, #0]
    return i;
 8004b14:	68fb      	ldr	r3, [r7, #12]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd90      	pop	{r4, r7, pc}

08004b1e <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004b1e:	b590      	push	{r4, r7, lr}
 8004b20:	b08f      	sub	sp, #60	; 0x3c
 8004b22:	af04      	add	r7, sp, #16
 8004b24:	60f8      	str	r0, [r7, #12]
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b34:	f04f 32ff 	mov.w	r2, #4294967295
 8004b38:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
        return 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e053      	b.n	8004bec <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	3b01      	subs	r3, #1
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	f107 0314 	add.w	r3, r7, #20
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff ffac 	bl	8004aae <lfs_ctz_index>
 8004b56:	4603      	mov	r3, r0
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004b5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b5e:	4619      	mov	r1, r3
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff ffa4 	bl	8004aae <lfs_ctz_index>
 8004b66:	4603      	mov	r3, r0
 8004b68:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004b6a:	e034      	b.n	8004bd6 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fb fef6 	bl	8000966 <lfs_npw2>
 8004b7a:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004b7c:	1e5c      	subs	r4, r3, #1
 8004b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b80:	f7fb ff01 	bl	8000986 <lfs_ctz>
 8004b84:	4603      	mov	r3, r0
 8004b86:	4619      	mov	r1, r3
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f7fb feb5 	bl	80008f8 <lfs_min>
 8004b8e:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	0092      	lsls	r2, r2, #2
 8004b96:	2104      	movs	r1, #4
 8004b98:	9103      	str	r1, [sp, #12]
 8004b9a:	4639      	mov	r1, r7
 8004b9c:	9102      	str	r1, [sp, #8]
 8004b9e:	9201      	str	r2, [sp, #4]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	2304      	movs	r3, #4
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7fb ff81 	bl	8000ab0 <lfs_bd_read>
 8004bae:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fb ff10 	bl	80009d8 <lfs_fromle32>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	603b      	str	r3, [r7, #0]
        if (err) {
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <lfs_ctz_find+0xa8>
            return err;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	e012      	b.n	8004bec <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d8c6      	bhi.n	8004b6c <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be2:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be8:	601a      	str	r2, [r3, #0]
    return 0;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	372c      	adds	r7, #44	; 0x2c
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd90      	pop	{r4, r7, pc}

08004bf4 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b092      	sub	sp, #72	; 0x48
 8004bf8:	af04      	add	r7, sp, #16
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004c02:	f107 0320 	add.w	r3, r7, #32
 8004c06:	4619      	mov	r1, r3
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7fc fee5 	bl	80019d8 <lfs_alloc>
 8004c0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <lfs_ctz_extend+0x26>
            return err;
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	e0e9      	b.n	8004dee <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7fc fa84 	bl	800112c <lfs_bd_erase>
 8004c24:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d006      	beq.n	8004c3a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004c32:	f000 80cb 	beq.w	8004dcc <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	e0d9      	b.n	8004dee <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8004c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d107      	bne.n	8004c50 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004c40:	6a3a      	ldr	r2, [r7, #32]
 8004c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c44:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
                return 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e0ce      	b.n	8004dee <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8004c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c52:	3b01      	subs	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004c56:	f107 031c 	add.w	r3, r7, #28
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f7ff ff26 	bl	8004aae <lfs_ctz_index>
 8004c62:	4603      	mov	r3, r0
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c70:	69da      	ldr	r2, [r3, #28]
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d044      	beq.n	8004d02 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004c78:	2300      	movs	r3, #0
 8004c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7c:	e035      	b.n	8004cea <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c82:	1ad2      	subs	r2, r2, r3
 8004c84:	2301      	movs	r3, #1
 8004c86:	9303      	str	r3, [sp, #12]
 8004c88:	f107 0317 	add.w	r3, r7, #23
 8004c8c:	9302      	str	r3, [sp, #8]
 8004c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	4613      	mov	r3, r2
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f7fb ff07 	bl	8000ab0 <lfs_bd_read>
 8004ca2:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <lfs_ctz_extend+0xba>
                        return err;
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	e09f      	b.n	8004dee <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	9203      	str	r2, [sp, #12]
 8004cb4:	f107 0217 	add.w	r2, r7, #23
 8004cb8:	9202      	str	r2, [sp, #8]
 8004cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cbc:	9201      	str	r2, [sp, #4]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7fc f984 	bl	8000fd4 <lfs_bd_prog>
 8004ccc:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004cda:	d101      	bne.n	8004ce0 <lfs_ctz_extend+0xec>
                            goto relocate;
 8004cdc:	bf00      	nop
                    goto relocate;
 8004cde:	e075      	b.n	8004dcc <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8004ce2:	e084      	b.n	8004dee <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d3c5      	bcc.n	8004c7e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004cf2:	6a3a      	ldr	r2, [r7, #32]
 8004cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf6:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfc:	601a      	str	r2, [r3, #0]
                return 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e075      	b.n	8004dee <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	3301      	adds	r3, #1
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d0a:	f7fb fe3c 	bl	8000986 <lfs_ctz>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	3301      	adds	r3, #1
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004d18:	2300      	movs	r3, #0
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1c:	e049      	b.n	8004db2 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fb fe64 	bl	80009ee <lfs_tole32>
 8004d26:	4603      	mov	r3, r0
 8004d28:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	0092      	lsls	r2, r2, #2
 8004d30:	2104      	movs	r1, #4
 8004d32:	9103      	str	r1, [sp, #12]
 8004d34:	f107 0118 	add.w	r1, r7, #24
 8004d38:	9102      	str	r1, [sp, #8]
 8004d3a:	9201      	str	r2, [sp, #4]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	2301      	movs	r3, #1
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7fc f945 	bl	8000fd4 <lfs_bd_prog>
 8004d4a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fb fe42 	bl	80009d8 <lfs_fromle32>
 8004d54:	4603      	mov	r3, r0
 8004d56:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004d64:	d034      	beq.n	8004dd0 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	e041      	b.n	8004dee <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d01b      	beq.n	8004dac <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d78:	0092      	lsls	r2, r2, #2
 8004d7a:	2104      	movs	r1, #4
 8004d7c:	9103      	str	r1, [sp, #12]
 8004d7e:	f107 0118 	add.w	r1, r7, #24
 8004d82:	9102      	str	r1, [sp, #8]
 8004d84:	9201      	str	r2, [sp, #4]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2304      	movs	r3, #4
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7fb fe8e 	bl	8000ab0 <lfs_bd_read>
 8004d94:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fb fe1d 	bl	80009d8 <lfs_fromle32>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <lfs_ctz_extend+0x1b8>
                        return err;
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	e020      	b.n	8004dee <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	3301      	adds	r3, #1
 8004db0:	633b      	str	r3, [r7, #48]	; 0x30
 8004db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d3b1      	bcc.n	8004d1e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8004dba:	6a3a      	ldr	r2, [r7, #32]
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbe:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	009a      	lsls	r2, r3, #2
 8004dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc6:	601a      	str	r2, [r3, #0]
            return 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e010      	b.n	8004dee <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8004dcc:	bf00      	nop
 8004dce:	e000      	b.n	8004dd2 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8004dd0:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	4a08      	ldr	r2, [pc, #32]	; (8004df8 <lfs_ctz_extend+0x204>)
 8004dd6:	9200      	str	r2, [sp, #0]
 8004dd8:	f640 32af 	movw	r2, #2991	; 0xbaf
 8004ddc:	4907      	ldr	r1, [pc, #28]	; (8004dfc <lfs_ctz_extend+0x208>)
 8004dde:	4808      	ldr	r0, [pc, #32]	; (8004e00 <lfs_ctz_extend+0x20c>)
 8004de0:	f005 fc7c 	bl	800a6dc <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7fb fe3c 	bl	8000a64 <lfs_cache_drop>
    while (true) {
 8004dec:	e709      	b.n	8004c02 <lfs_ctz_extend+0xe>
    }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3738      	adds	r7, #56	; 0x38
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	0800b0a0 	.word	0x0800b0a0
 8004dfc:	0800af94 	.word	0x0800af94
 8004e00:	0800b120 	.word	0x0800b120

08004e04 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b090      	sub	sp, #64	; 0x40
 8004e08:	af04      	add	r7, sp, #16
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <lfs_ctz_traverse+0x18>
        return 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e06d      	b.n	8004ef8 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	f107 031c 	add.w	r3, r7, #28
 8004e26:	4619      	mov	r1, r3
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7ff fe40 	bl	8004aae <lfs_ctz_index>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8004e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e34:	6839      	ldr	r1, [r7, #0]
 8004e36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004e38:	4798      	blx	r3
 8004e3a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <lfs_ctz_traverse+0x42>
            return err;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	e058      	b.n	8004ef8 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <lfs_ctz_traverse+0x4c>
            return 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e053      	b.n	8004ef8 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	f1c3 0302 	rsb	r3, r3, #2
 8004e5a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004e5e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004e60:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004e62:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004e64:	9303      	str	r3, [sp, #12]
 8004e66:	f107 0314 	add.w	r3, r7, #20
 8004e6a:	9302      	str	r3, [sp, #8]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9301      	str	r3, [sp, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7fb fe18 	bl	8000ab0 <lfs_bd_read>
 8004e80:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb fda7 	bl	80009d8 <lfs_fromle32>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fb fda1 	bl	80009d8 <lfs_fromle32>
 8004e96:	4603      	mov	r3, r0
 8004e98:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <lfs_ctz_traverse+0xa0>
            return err;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	e029      	b.n	8004ef8 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea8:	e013      	b.n	8004ed2 <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	4611      	mov	r1, r2
 8004ebc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004ebe:	4798      	blx	r3
 8004ec0:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <lfs_ctz_traverse+0xc8>
                return err;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	e015      	b.n	8004ef8 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	3301      	adds	r3, #1
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	dbe6      	blt.n	8004eaa <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004eec:	603b      	str	r3, [r7, #0]
        index -= count;
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004ef6:	e79c      	b.n	8004e32 <lfs_ctz_traverse+0x2e>
    }
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3730      	adds	r7, #48	; 0x30
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8004f00:	b5b0      	push	{r4, r5, r7, lr}
 8004f02:	b09a      	sub	sp, #104	; 0x68
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f002 fae3 	bl	80074e4 <lfs_fs_forceconsistency>
 8004f1e:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8004f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <lfs_file_opencfg_+0x2a>
            return err;
 8004f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f28:	e1b0      	b.n	800528c <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004f2e:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2200      	movs	r2, #0
 8004f46:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f103 0108 	add.w	r1, r3, #8
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	3304      	adds	r3, #4
 8004f52:	1d3a      	adds	r2, r7, #4
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7fe f87f 	bl	8003058 <lfs_dir_find>
 8004f5a:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8004f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	da0c      	bge.n	8004f7c <lfs_file_opencfg_+0x7c>
 8004f62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f64:	f113 0f02 	cmn.w	r3, #2
 8004f68:	d105      	bne.n	8004f76 <lfs_file_opencfg_+0x76>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	889b      	ldrh	r3, [r3, #4]
 8004f6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d102      	bne.n	8004f7c <lfs_file_opencfg_+0x7c>
        err = tag;
 8004f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f78:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004f7a:	e17c      	b.n	8005276 <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7fc fc54 	bl	8001832 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f8c:	f113 0f02 	cmn.w	r3, #2
 8004f90:	d14e      	bne.n	8005030 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8004f9c:	f06f 0301 	mvn.w	r3, #1
 8004fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004fa2:	e168      	b.n	8005276 <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fb f922 	bl	80001f0 <strlen>
 8004fac:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d903      	bls.n	8004fc0 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004fb8:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004fbe:	e15a      	b.n	8005276 <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f103 0108 	add.w	r1, r3, #8
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	889b      	ldrh	r3, [r3, #4]
 8004fca:	029b      	lsls	r3, r3, #10
 8004fcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	889b      	ldrh	r3, [r3, #4]
 8004fde:	029a      	lsls	r2, r3, #10
 8004fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	889b      	ldrh	r3, [r3, #4]
 8004ff2:	029b      	lsls	r3, r3, #10
 8004ff4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffe:	2300      	movs	r3, #0
 8005000:	643b      	str	r3, [r7, #64]	; 0x40
 8005002:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005006:	2303      	movs	r3, #3
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f7ff fd2b 	bl	8004a64 <lfs_dir_commit>
 800500e:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8005010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005012:	f113 0f1c 	cmn.w	r3, #28
 8005016:	d001      	beq.n	800501c <lfs_file_opencfg_+0x11c>
 8005018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501a:	e001      	b.n	8005020 <lfs_file_opencfg_+0x120>
 800501c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005020:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8005022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005024:	2b00      	cmp	r3, #0
 8005026:	f040 8125 	bne.w	8005274 <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800502a:	4b9a      	ldr	r3, [pc, #616]	; (8005294 <lfs_file_opencfg_+0x394>)
 800502c:	65bb      	str	r3, [r7, #88]	; 0x58
 800502e:	e044      	b.n	80050ba <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 800503a:	f06f 0310 	mvn.w	r3, #16
 800503e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005040:	e119      	b.n	8005276 <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8005042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005044:	4618      	mov	r0, r3
 8005046:	f7fc f99f 	bl	8001388 <lfs_tag_type3>
 800504a:	4603      	mov	r3, r0
 800504c:	2b01      	cmp	r3, #1
 800504e:	d003      	beq.n	8005058 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8005050:	f06f 0314 	mvn.w	r3, #20
 8005054:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005056:	e10e      	b.n	8005276 <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00e      	beq.n	8005080 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	889b      	ldrh	r3, [r3, #4]
 8005066:	029b      	lsls	r3, r3, #10
 8005068:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005070:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
 800507e:	e01c      	b.n	80050ba <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	889b      	ldrh	r3, [r3, #4]
 800508a:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800508c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005090:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005098:	9200      	str	r2, [sp, #0]
 800509a:	4a7f      	ldr	r2, [pc, #508]	; (8005298 <lfs_file_opencfg_+0x398>)
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7fc fe19 	bl	8001cd4 <lfs_dir_get>
 80050a2:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 80050a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	da02      	bge.n	80050b0 <lfs_file_opencfg_+0x1b0>
            err = tag;
 80050aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ac:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80050ae:	e0e2      	b.n	8005276 <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	3328      	adds	r3, #40	; 0x28
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fc fadd 	bl	8001674 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80050ba:	2300      	movs	r3, #0
 80050bc:	657b      	str	r3, [r7, #84]	; 0x54
 80050be:	e063      	b.n	8005188 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d03c      	beq.n	8005146 <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d6:	6859      	ldr	r1, [r3, #4]
 80050d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050da:	4613      	mov	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80050ea:	051a      	lsls	r2, r3, #20
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	889b      	ldrh	r3, [r3, #4]
 80050f0:	029b      	lsls	r3, r3, #10
 80050f2:	ea42 0103 	orr.w	r1, r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fa:	6858      	ldr	r0, [r3, #4]
 80050fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050fe:	4613      	mov	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4403      	add	r3, r0
 8005108:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800510a:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005112:	6859      	ldr	r1, [r3, #4]
 8005114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005116:	4613      	mov	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	4603      	mov	r3, r0
 8005126:	4a5d      	ldr	r2, [pc, #372]	; (800529c <lfs_file_opencfg_+0x39c>)
 8005128:	4621      	mov	r1, r4
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7fc fdd2 	bl	8001cd4 <lfs_dir_get>
 8005130:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8005132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005134:	2b00      	cmp	r3, #0
 8005136:	da06      	bge.n	8005146 <lfs_file_opencfg_+0x246>
 8005138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513a:	f113 0f02 	cmn.w	r3, #2
 800513e:	d002      	beq.n	8005146 <lfs_file_opencfg_+0x246>
                err = res;
 8005140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005142:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005144:	e097      	b.n	8005276 <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d017      	beq.n	8005182 <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005156:	6859      	ldr	r1, [r3, #4]
 8005158:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800516a:	429a      	cmp	r2, r3
 800516c:	d903      	bls.n	8005176 <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 800516e:	f06f 031b 	mvn.w	r3, #27
 8005172:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005174:	e07f      	b.n	8005276 <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005184:	3301      	adds	r3, #1
 8005186:	657b      	str	r3, [r7, #84]	; 0x54
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005190:	429a      	cmp	r2, r3
 8005192:	d395      	bcc.n	80050c0 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80051a8:	e010      	b.n	80051cc <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fb fc40 	bl	8000a36 <lfs_malloc>
 80051b6:	4602      	mov	r2, r0
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d103      	bne.n	80051cc <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 80051c4:	f06f 030b 	mvn.w	r3, #11
 80051c8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80051ca:	e054      	b.n	8005276 <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	3340      	adds	r3, #64	; 0x40
 80051d0:	4619      	mov	r1, r3
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7fb fc55 	bl	8000a82 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80051d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fc f8d4 	bl	8001388 <lfs_tag_type3>
 80051e0:	4603      	mov	r3, r0
 80051e2:	461a      	mov	r2, r3
 80051e4:	f240 2301 	movw	r3, #513	; 0x201
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d141      	bne.n	8005270 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f06f 0201 	mvn.w	r2, #1
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80051f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fc f900 	bl	80013fc <lfs_tag_size>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d020      	beq.n	8005270 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	889b      	ldrh	r3, [r3, #4]
 8005238:	029c      	lsls	r4, r3, #10
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8005242:	4618      	mov	r0, r3
 8005244:	f7fb fb58 	bl	80008f8 <lfs_min>
 8005248:	4603      	mov	r3, r0
 800524a:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800524c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	4613      	mov	r3, r2
 8005258:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <lfs_file_opencfg_+0x398>)
 800525a:	4629      	mov	r1, r5
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7fc fd39 	bl	8001cd4 <lfs_dir_get>
 8005262:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8005264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005266:	2b00      	cmp	r3, #0
 8005268:	da02      	bge.n	8005270 <lfs_file_opencfg_+0x370>
                err = res;
 800526a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526c:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800526e:	e002      	b.n	8005276 <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8005270:	2300      	movs	r3, #0
 8005272:	e00b      	b.n	800528c <lfs_file_opencfg_+0x38c>
            goto cleanup;
 8005274:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_close_(lfs, file);
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f823 	bl	80052d0 <lfs_file_close_>
    return err;
 800528a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800528c:	4618      	mov	r0, r3
 800528e:	3760      	adds	r7, #96	; 0x60
 8005290:	46bd      	mov	sp, r7
 8005292:	bdb0      	pop	{r4, r5, r7, pc}
 8005294:	20100000 	.word	0x20100000
 8005298:	700ffc00 	.word	0x700ffc00
 800529c:	7ffffc00 	.word	0x7ffffc00

080052a0 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <lfs_file_open_+0x2c>)
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fe21 	bl	8004f00 <lfs_file_opencfg_>
 80052be:	6178      	str	r0, [r7, #20]
    return err;
 80052c0:	697b      	ldr	r3, [r7, #20]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	0800bc74 	.word	0x0800bc74

080052d0 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f9e5 	bl	80056ac <lfs_file_sync_>
 80052e2:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc fa81 	bl	80017ee <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d104      	bne.n	8005300 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fb fba7 	bl	8000a4e <lfs_free>
    }

    return err;
 8005300:	68fb      	ldr	r3, [r7, #12]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b08d      	sub	sp, #52	; 0x34
 8005310:	af06      	add	r7, sp, #24
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005316:	f107 030c 	add.w	r3, r7, #12
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7fc fb5b 	bl	80019d8 <lfs_alloc>
 8005322:	6138      	str	r0, [r7, #16]
        if (err) {
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <lfs_file_relocate+0x22>
            return err;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	e0bb      	b.n	80054a6 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fb fefa 	bl	800112c <lfs_bd_erase>
 8005338:	6138      	str	r0, [r7, #16]
        if (err) {
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d006      	beq.n	800534e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005346:	f000 809b 	beq.w	8005480 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	e0ab      	b.n	80054a6 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	e069      	b.n	8005428 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d027      	beq.n	80053b0 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	f103 0008 	add.w	r0, r3, #8
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	889b      	ldrh	r3, [r3, #4]
 8005378:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800537a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800537e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005382:	2101      	movs	r1, #1
 8005384:	9105      	str	r1, [sp, #20]
 8005386:	f107 010b 	add.w	r1, r7, #11
 800538a:	9104      	str	r1, [sp, #16]
 800538c:	6979      	ldr	r1, [r7, #20]
 800538e:	9103      	str	r1, [sp, #12]
 8005390:	9302      	str	r3, [sp, #8]
 8005392:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <lfs_file_relocate+0x1a4>)
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	9200      	str	r2, [sp, #0]
 8005398:	4623      	mov	r3, r4
 800539a:	2200      	movs	r2, #0
 800539c:	4601      	mov	r1, r0
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc fcb3 	bl	8001d0a <lfs_dir_getread>
 80053a4:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01e      	beq.n	80053ea <lfs_file_relocate+0xde>
                    return err;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	e07a      	b.n	80054a6 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80053b6:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1ad4      	subs	r4, r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	2201      	movs	r2, #1
 80053c6:	9203      	str	r2, [sp, #12]
 80053c8:	f107 020b 	add.w	r2, r7, #11
 80053cc:	9202      	str	r2, [sp, #8]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	9201      	str	r2, [sp, #4]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	4623      	mov	r3, r4
 80053d6:	4602      	mov	r2, r0
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fb fb69 	bl	8000ab0 <lfs_bd_read>
 80053de:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <lfs_file_relocate+0xde>
                    return err;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	e05d      	b.n	80054a6 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f103 0110 	add.w	r1, r3, #16
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	9203      	str	r2, [sp, #12]
 80053f8:	f107 020b 	add.w	r2, r7, #11
 80053fc:	9202      	str	r2, [sp, #8]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	9201      	str	r2, [sp, #4]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	2301      	movs	r3, #1
 8005406:	4602      	mov	r2, r0
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fb fde3 	bl	8000fd4 <lfs_bd_prog>
 800540e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800541c:	d032      	beq.n	8005484 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	e041      	b.n	80054a6 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	429a      	cmp	r2, r3
 8005430:	d390      	bcc.n	8005354 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69d9      	ldr	r1, [r3, #28]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	461a      	mov	r2, r3
 8005442:	f004 fd9d 	bl	8009f80 <memcpy>
        file->cache.block = lfs->pcache.block;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695a      	ldr	r2, [r3, #20]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3310      	adds	r3, #16
 8005462:	4619      	mov	r1, r3
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fb fb0c 	bl	8000a82 <lfs_cache_zero>

        file->block = nblock;
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800547c:	2300      	movs	r3, #0
 800547e:	e012      	b.n	80054a6 <lfs_file_relocate+0x19a>
                goto relocate;
 8005480:	bf00      	nop
 8005482:	e000      	b.n	8005486 <lfs_file_relocate+0x17a>
                    goto relocate;
 8005484:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <lfs_file_relocate+0x1a8>)
 800548a:	9200      	str	r2, [sp, #0]
 800548c:	f640 42e5 	movw	r2, #3301	; 0xce5
 8005490:	4909      	ldr	r1, [pc, #36]	; (80054b8 <lfs_file_relocate+0x1ac>)
 8005492:	480a      	ldr	r0, [pc, #40]	; (80054bc <lfs_file_relocate+0x1b0>)
 8005494:	f005 f922 	bl	800a6dc <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3310      	adds	r3, #16
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fb fae0 	bl	8000a64 <lfs_cache_drop>
    while (true) {
 80054a4:	e737      	b.n	8005316 <lfs_file_relocate+0xa>
    }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd90      	pop	{r4, r7, pc}
 80054ae:	bf00      	nop
 80054b0:	fff7fc00 	.word	0xfff7fc00
 80054b4:	0800b0a0 	.word	0x0800b0a0
 80054b8:	0800af94 	.word	0x0800af94
 80054bc:	0800b120 	.word	0x0800b120

080054c0 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ckpoint(lfs);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fc f9e9 	bl	80018aa <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ff16 	bl	800530c <lfs_file_relocate>
 80054e0:	60f8      	str	r0, [r7, #12]
    if (err) {
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <lfs_file_outline+0x2c>
        return err;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	e006      	b.n	80054fa <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005504:	b590      	push	{r4, r7, lr}
 8005506:	b09f      	sub	sp, #124	; 0x7c
 8005508:	af02      	add	r7, sp, #8
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d011      	beq.n	800553e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d105      	bne.n	8005532 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	3340      	adds	r3, #64	; 0x40
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fb fa99 	bl	8000a64 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80a4 	beq.w	8005694 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005550:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d176      	bne.n	800564c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800555e:	f107 030c 	add.w	r3, r7, #12
 8005562:	2254      	movs	r2, #84	; 0x54
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f004 fd18 	bl	8009f9c <memset>
                .ctz.head = file->ctz.head,
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8005576:	63bb      	str	r3, [r7, #56]	; 0x38
 8005578:	2301      	movs	r3, #1
 800557a:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8005580:	643b      	str	r3, [r7, #64]	; 0x40
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800558a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fb fa66 	bl	8000a64 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8005598:	e02b      	b.n	80055f2 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800559a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800559e:	f107 010c 	add.w	r1, r7, #12
 80055a2:	2301      	movs	r3, #1
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f921 	bl	80057ec <lfs_file_flushedread>
 80055aa:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80055ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da01      	bge.n	80055b6 <lfs_file_flush+0xb2>
                    return res;
 80055b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b4:	e06f      	b.n	8005696 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80055b6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80055ba:	2301      	movs	r3, #1
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fa1c 	bl	80059fc <lfs_file_flushedwrite>
 80055c4:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80055c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	da01      	bge.n	80055d0 <lfs_file_flush+0xcc>
                    return res;
 80055cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ce:	e062      	b.n	8005696 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d00b      	beq.n	80055f2 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80055da:	f107 030c 	add.w	r3, r7, #12
 80055de:	3340      	adds	r3, #64	; 0x40
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fb fa3e 	bl	8000a64 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4619      	mov	r1, r3
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fb fa39 	bl	8000a64 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d3cd      	bcc.n	800559a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	2301      	movs	r3, #1
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fb fc35 	bl	8000e78 <lfs_bd_flush>
 800560e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005612:	2b00      	cmp	r3, #0
 8005614:	d026      	beq.n	8005664 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8005616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005618:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800561c:	d001      	beq.n	8005622 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800561e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005620:	e039      	b.n	8005696 <lfs_file_flush+0x192>
                        goto relocate;
 8005622:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	4a1d      	ldr	r2, [pc, #116]	; (80056a0 <lfs_file_flush+0x19c>)
 800562a:	9200      	str	r2, [sp, #0]
 800562c:	f640 5234 	movw	r2, #3380	; 0xd34
 8005630:	491c      	ldr	r1, [pc, #112]	; (80056a4 <lfs_file_flush+0x1a0>)
 8005632:	481d      	ldr	r0, [pc, #116]	; (80056a8 <lfs_file_flush+0x1a4>)
 8005634:	f005 f852 	bl	800a6dc <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005638:	6839      	ldr	r1, [r7, #0]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff fe66 	bl	800530c <lfs_file_relocate>
 8005640:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0da      	beq.n	80055fe <lfs_file_flush+0xfa>
                    return err;
 8005648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800564a:	e024      	b.n	8005696 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f7fb f93e 	bl	80008d8 <lfs_max>
 800565c:	4602      	mov	r2, r0
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	635a      	str	r2, [r3, #52]	; 0x34
 8005662:	e000      	b.n	8005666 <lfs_file_flush+0x162>
                break;
 8005664:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005692:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3774      	adds	r7, #116	; 0x74
 800569a:	46bd      	mov	sp, r7
 800569c:	bd90      	pop	{r4, r7, pc}
 800569e:	bf00      	nop
 80056a0:	0800b0a0 	.word	0x0800b0a0
 80056a4:	0800af94 	.word	0x0800af94
 80056a8:	0800b120 	.word	0x0800b120

080056ac <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b090      	sub	sp, #64	; 0x40
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e08e      	b.n	80057e4 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff ff1b 	bl	8005504 <lfs_file_flush>
 80056ce:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	e07e      	b.n	80057e4 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d077      	beq.n	80057e2 <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fb fd5f 	bl	80011ba <lfs_pair_isnull>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f083 0301 	eor.w	r3, r3, #1
 8005702:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8005704:	2b00      	cmp	r3, #0
 8005706:	d06c      	beq.n	80057e2 <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10d      	bne.n	8005730 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f103 0110 	add.w	r1, r3, #16
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	2300      	movs	r3, #0
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fb fc24 	bl	8000f6c <lfs_bd_sync>
 8005724:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <lfs_file_sync_+0x84>
                return err;
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	e059      	b.n	80057e4 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 800573c:	f240 2301 	movw	r3, #513	; 0x201
 8005740:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
 800574e:	e014      	b.n	800577a <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8005750:	f240 2302 	movw	r3, #514	; 0x202
 8005754:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800575c:	3228      	adds	r2, #40	; 0x28
 800575e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005762:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8005766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800576a:	4618      	mov	r0, r3
 800576c:	f7fb ff9a 	bl	80016a4 <lfs_ctz_tole32>
            buffer = &ctz;
 8005770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005774:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8005776:	2308      	movs	r3, #8
 8005778:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f103 0108 	add.w	r1, r3, #8
 8005780:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005782:	051a      	lsls	r2, r3, #20
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	889b      	ldrh	r3, [r3, #4]
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	431a      	orrs	r2, r3
 800578c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578e:	4313      	orrs	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	889b      	ldrh	r3, [r3, #4]
 800579a:	029a      	lsls	r2, r3, #10
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	f107 0218 	add.w	r2, r7, #24
 80057b6:	2302      	movs	r3, #2
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff f953 	bl	8004a64 <lfs_dir_commit>
 80057be:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	e006      	b.n	80057e4 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3740      	adds	r7, #64	; 0x40
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80057ec:	b5b0      	push	{r4, r5, r7, lr}
 80057ee:	b090      	sub	sp, #64	; 0x40
 80057f0:	af06      	add	r7, sp, #24
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	429a      	cmp	r2, r3
 800580c:	d301      	bcc.n	8005812 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 800580e:	2300      	movs	r3, #0
 8005810:	e0b7      	b.n	8005982 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	4619      	mov	r1, r3
 800581e:	6838      	ldr	r0, [r7, #0]
 8005820:	f7fb f86a 	bl	80008f8 <lfs_min>
 8005824:	6038      	str	r0, [r7, #0]
    nsize = size;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800582a:	e0a5      	b.n	8005978 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d006      	beq.n	8005846 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005840:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d130      	bne.n	80058a8 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d11c      	bne.n	800588c <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	3138      	adds	r1, #56	; 0x38
 8005868:	68b8      	ldr	r0, [r7, #8]
 800586a:	303c      	adds	r0, #60	; 0x3c
 800586c:	9003      	str	r0, [sp, #12]
 800586e:	9102      	str	r1, [sp, #8]
 8005870:	9201      	str	r2, [sp, #4]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	462b      	mov	r3, r5
 8005876:	4622      	mov	r2, r4
 8005878:	2100      	movs	r1, #0
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff f94f 	bl	8004b1e <lfs_ctz_find>
 8005880:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <lfs_file_flushedread+0xb0>
                    return err;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	e07a      	b.n	8005982 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f06f 0201 	mvn.w	r2, #1
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ac:	69da      	ldr	r2, [r3, #28]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	4619      	mov	r1, r3
 80058b6:	6a38      	ldr	r0, [r7, #32]
 80058b8:	f7fb f81e 	bl	80008f8 <lfs_min>
 80058bc:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d026      	beq.n	8005918 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f103 0408 	add.w	r4, r3, #8
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 80058da:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	889b      	ldrh	r3, [r3, #4]
 80058e0:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80058e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80058ee:	69b8      	ldr	r0, [r7, #24]
 80058f0:	9005      	str	r0, [sp, #20]
 80058f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058f4:	9004      	str	r0, [sp, #16]
 80058f6:	9103      	str	r1, [sp, #12]
 80058f8:	9302      	str	r3, [sp, #8]
 80058fa:	4b24      	ldr	r3, [pc, #144]	; (800598c <lfs_file_flushedread+0x1a0>)
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	9200      	str	r2, [sp, #0]
 8005900:	462b      	mov	r3, r5
 8005902:	2200      	movs	r2, #0
 8005904:	4621      	mov	r1, r4
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f7fc f9ff 	bl	8001d0a <lfs_dir_getread>
 800590c:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01d      	beq.n	8005950 <lfs_file_flushedread+0x164>
                return err;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	e034      	b.n	8005982 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8005922:	69dc      	ldr	r4, [r3, #28]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	9103      	str	r1, [sp, #12]
 8005930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005932:	9102      	str	r1, [sp, #8]
 8005934:	9201      	str	r2, [sp, #4]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4623      	mov	r3, r4
 800593a:	4602      	mov	r2, r0
 800593c:	2100      	movs	r1, #0
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7fb f8b6 	bl	8000ab0 <lfs_bd_read>
 8005944:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <lfs_file_flushedread+0x164>
                return err;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	e018      	b.n	8005982 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	441a      	add	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	441a      	add	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	4413      	add	r3, r2
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8005970:	6a3a      	ldr	r2, [r7, #32]
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f47f af56 	bne.w	800582c <lfs_file_flushedread+0x40>
    }

    return size;
 8005980:	683b      	ldr	r3, [r7, #0]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3728      	adds	r7, #40	; 0x28
 8005986:	46bd      	mov	sp, r7
 8005988:	bdb0      	pop	{r4, r5, r7, pc}
 800598a:	bf00      	nop
 800598c:	fff7fc00 	.word	0xfff7fc00

08005990 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <lfs_file_read_+0x28>
 80059aa:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <lfs_file_read_+0x60>)
 80059ac:	4a11      	ldr	r2, [pc, #68]	; (80059f4 <lfs_file_read_+0x64>)
 80059ae:	f640 51c8 	movw	r1, #3528	; 0xdc8
 80059b2:	4811      	ldr	r0, [pc, #68]	; (80059f8 <lfs_file_read_+0x68>)
 80059b4:	f004 fa6c 	bl	8009e90 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff fd9c 	bl	8005504 <lfs_file_flush>
 80059cc:	6178      	str	r0, [r7, #20]
        if (err) {
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <lfs_file_read_+0x48>
            return err;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	e006      	b.n	80059e6 <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff ff04 	bl	80057ec <lfs_file_flushedread>
 80059e4:	4603      	mov	r3, r0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	0800b2c8 	.word	0x0800b2c8
 80059f4:	0800bc80 	.word	0x0800bc80
 80059f8:	0800af94 	.word	0x0800af94

080059fc <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80059fc:	b5b0      	push	{r4, r5, r7, lr}
 80059fe:	b090      	sub	sp, #64	; 0x40
 8005a00:	af04      	add	r7, sp, #16
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80f4 	beq.w	8005c08 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	441a      	add	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f7fa ff52 	bl	80008d8 <lfs_max>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	f240 80e4 	bls.w	8005c08 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f7ff fd3c 	bl	80054c0 <lfs_file_outline>
 8005a48:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 80db 	beq.w	8005c08 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	e0d7      	b.n	8005c12 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d006      	beq.n	8005a7c <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a76:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d16d      	bne.n	8005b58 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d159      	bne.n	8005b3c <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d12f      	bne.n	8005af4 <lfs_file_flushedwrite+0xf8>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d02b      	beq.n	8005af4 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005ab8:	f107 0010 	add.w	r0, r7, #16
 8005abc:	9003      	str	r0, [sp, #12]
 8005abe:	9102      	str	r1, [sp, #8]
 8005ac0:	9201      	str	r2, [sp, #4]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	2100      	movs	r1, #0
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff f827 	bl	8004b1e <lfs_ctz_find>
 8005ad0:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	e094      	b.n	8005c12 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	3340      	adds	r3, #64	; 0x40
 8005aec:	4619      	mov	r1, r3
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7fa ffc7 	bl	8000a82 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7fb fed8 	bl	80018aa <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005b00:	68fc      	ldr	r4, [r7, #12]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	3238      	adds	r2, #56	; 0x38
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	313c      	adds	r1, #60	; 0x3c
 8005b12:	9102      	str	r1, [sp, #8]
 8005b14:	9201      	str	r2, [sp, #4]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	462b      	mov	r3, r5
 8005b1a:	4622      	mov	r2, r4
 8005b1c:	4601      	mov	r1, r0
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff f868 	bl	8004bf4 <lfs_ctz_extend>
 8005b24:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00f      	beq.n	8005b4c <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	e06a      	b.n	8005c12 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f06f 0201 	mvn.w	r2, #1
 8005b42:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5c:	69da      	ldr	r2, [r3, #28]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	4619      	mov	r1, r3
 8005b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b68:	f7fa fec6 	bl	80008f8 <lfs_min>
 8005b6c:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005b74:	68fc      	ldr	r4, [r7, #12]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b7e:	69b9      	ldr	r1, [r7, #24]
 8005b80:	9103      	str	r1, [sp, #12]
 8005b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b84:	9102      	str	r1, [sp, #8]
 8005b86:	9201      	str	r2, [sp, #4]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4622      	mov	r2, r4
 8005b8e:	4601      	mov	r1, r0
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7fb fa1f 	bl	8000fd4 <lfs_bd_prog>
 8005b96:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d01c      	beq.n	8005bd8 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005ba4:	d007      	beq.n	8005bb6 <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	e02d      	b.n	8005c12 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8005bb6:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f7ff fba6 	bl	800530c <lfs_file_relocate>
 8005bc0:	6178      	str	r0, [r7, #20]
            if (err) {
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0d2      	beq.n	8005b6e <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	e01c      	b.n	8005c12 <lfs_file_flushedwrite+0x216>
            break;
 8005bd8:	bf00      	nop
            }
        }

        file->pos += diff;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	441a      	add	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	441a      	add	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ckpoint(lfs);
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7fb fe51 	bl	80018aa <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f47f af29 	bne.w	8005a62 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8005c10:	683b      	ldr	r3, [r7, #0]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3730      	adds	r7, #48	; 0x30
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005c1c <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	; 0x28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <lfs_file_write_+0x28>
 8005c36:	4b38      	ldr	r3, [pc, #224]	; (8005d18 <lfs_file_write_+0xfc>)
 8005c38:	4a38      	ldr	r2, [pc, #224]	; (8005d1c <lfs_file_write_+0x100>)
 8005c3a:	f640 612f 	movw	r1, #3631	; 0xe2f
 8005c3e:	4838      	ldr	r0, [pc, #224]	; (8005d20 <lfs_file_write_+0x104>)
 8005c40:	f004 f926 	bl	8009e90 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7ff fc56 	bl	8005504 <lfs_file_flush>
 8005c58:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <lfs_file_write_+0x48>
            return err;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	e055      	b.n	8005d10 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <lfs_file_write_+0x68>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d203      	bcs.n	8005c84 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	441a      	add	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d902      	bls.n	8005c9a <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005c94:	f06f 031a 	mvn.w	r3, #26
 8005c98:	e03a      	b.n	8005d10 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d121      	bne.n	8005cea <lfs_file_write_+0xce>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d91b      	bls.n	8005cea <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb6:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8005cc0:	e00e      	b.n	8005ce0 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	75fb      	strb	r3, [r7, #23]
 8005cc6:	f107 0217 	add.w	r2, r7, #23
 8005cca:	2301      	movs	r3, #1
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7ff fe94 	bl	80059fc <lfs_file_flushedwrite>
 8005cd4:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da01      	bge.n	8005ce0 <lfs_file_write_+0xc4>
                return res;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	e017      	b.n	8005d10 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce4:	6a3a      	ldr	r2, [r7, #32]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d8eb      	bhi.n	8005cc2 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff fe83 	bl	80059fc <lfs_file_flushedwrite>
 8005cf6:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da01      	bge.n	8005d02 <lfs_file_write_+0xe6>
        return nsize;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	e006      	b.n	8005d10 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3728      	adds	r7, #40	; 0x28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	0800b2f8 	.word	0x0800b2f8
 8005d1c:	0800bc90 	.word	0x0800bc90
 8005d20:	0800af94 	.word	0x0800af94

08005d24 <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	; 0x30
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d102      	bne.n	8005d44 <lfs_file_seek_+0x20>
        npos = off;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d42:	e025      	b.n	8005d90 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d10f      	bne.n	8005d6a <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	461a      	mov	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	da02      	bge.n	8005d5e <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8005d58:	f06f 0315 	mvn.w	r3, #21
 8005d5c:	e067      	b.n	8005e2e <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4413      	add	r3, r2
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d68:	e012      	b.n	8005d90 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d10f      	bne.n	8005d90 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f875 	bl	8005e62 <lfs_file_size_>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	da02      	bge.n	8005d8c <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 8005d86:	f06f 0315 	mvn.w	r3, #21
 8005d8a:	e050      	b.n	8005e2e <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d902      	bls.n	8005da0 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8005d9a:	f06f 0315 	mvn.w	r3, #21
 8005d9e:	e046      	b.n	8005e2e <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d101      	bne.n	8005dae <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	e03f      	b.n	8005e2e <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12b      	bne.n	8005e12 <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbe:	61bb      	str	r3, [r7, #24]
 8005dc0:	f107 0318 	add.w	r3, r7, #24
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7fe fe71 	bl	8004aae <lfs_ctz_index>
 8005dcc:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8005dd2:	f107 0314 	add.w	r3, r7, #20
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7fe fe68 	bl	8004aae <lfs_ctz_index>
 8005dde:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8005de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d114      	bne.n	8005e12 <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d80f      	bhi.n	8005e12 <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfa:	441a      	add	r2, r3
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d907      	bls.n	8005e12 <lfs_file_seek_+0xee>
            file->pos = npos;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e06:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	e00d      	b.n	8005e2e <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff fb75 	bl	8005504 <lfs_file_flush>
 8005e1a:	61f8      	str	r0, [r7, #28]
    if (err) {
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <lfs_file_seek_+0x102>
        return err;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	e003      	b.n	8005e2e <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e2a:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3730      	adds	r7, #48	; 0x30
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <lfs_file_rewind_>:
static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file) {
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);
 8005e40:	2300      	movs	r3, #0
 8005e42:	2200      	movs	r2, #0
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff ff6c 	bl	8005d24 <lfs_file_seek_>
 8005e4c:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	da01      	bge.n	8005e58 <lfs_file_rewind_+0x22>
        return (int)res;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	e000      	b.n	8005e5a <lfs_file_rewind_+0x24>
    }

    return 0;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f7fa fd28 	bl	80008d8 <lfs_max>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	e001      	b.n	8005e90 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b08d      	sub	sp, #52	; 0x34
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	6a1a      	ldr	r2, [r3, #32]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <lfs_init+0x34>
 8005ebe:	4b96      	ldr	r3, [pc, #600]	; (8006118 <lfs_init+0x280>)
 8005ec0:	4a96      	ldr	r2, [pc, #600]	; (800611c <lfs_init+0x284>)
 8005ec2:	f241 015b 	movw	r1, #4187	; 0x105b
 8005ec6:	4896      	ldr	r0, [pc, #600]	; (8006120 <lfs_init+0x288>)
 8005ec8:	f003 ffe2 	bl	8009e90 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <lfs_init+0x4c>
 8005ed6:	4b93      	ldr	r3, [pc, #588]	; (8006124 <lfs_init+0x28c>)
 8005ed8:	4a90      	ldr	r2, [pc, #576]	; (800611c <lfs_init+0x284>)
 8005eda:	f241 015c 	movw	r1, #4188	; 0x105c
 8005ede:	4890      	ldr	r0, [pc, #576]	; (8006120 <lfs_init+0x288>)
 8005ee0:	f003 ffd6 	bl	8009e90 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <lfs_init+0x64>
 8005eee:	4b8e      	ldr	r3, [pc, #568]	; (8006128 <lfs_init+0x290>)
 8005ef0:	4a8a      	ldr	r2, [pc, #552]	; (800611c <lfs_init+0x284>)
 8005ef2:	f241 015d 	movw	r1, #4189	; 0x105d
 8005ef6:	488a      	ldr	r0, [pc, #552]	; (8006120 <lfs_init+0x288>)
 8005ef8:	f003 ffca 	bl	8009e90 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f06:	6952      	ldr	r2, [r2, #20]
 8005f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f0c:	fb02 f201 	mul.w	r2, r2, r1
 8005f10:	1a9b      	subs	r3, r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d006      	beq.n	8005f24 <lfs_init+0x8c>
 8005f16:	4b85      	ldr	r3, [pc, #532]	; (800612c <lfs_init+0x294>)
 8005f18:	4a80      	ldr	r2, [pc, #512]	; (800611c <lfs_init+0x284>)
 8005f1a:	f241 0161 	movw	r1, #4193	; 0x1061
 8005f1e:	4880      	ldr	r0, [pc, #512]	; (8006120 <lfs_init+0x288>)
 8005f20:	f003 ffb6 	bl	8009e90 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f2e:	6992      	ldr	r2, [r2, #24]
 8005f30:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f34:	fb02 f201 	mul.w	r2, r2, r1
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d006      	beq.n	8005f4c <lfs_init+0xb4>
 8005f3e:	4b7c      	ldr	r3, [pc, #496]	; (8006130 <lfs_init+0x298>)
 8005f40:	4a76      	ldr	r2, [pc, #472]	; (800611c <lfs_init+0x284>)
 8005f42:	f241 0162 	movw	r1, #4194	; 0x1062
 8005f46:	4876      	ldr	r0, [pc, #472]	; (8006120 <lfs_init+0x288>)
 8005f48:	f003 ffa2 	bl	8009e90 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f56:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005f58:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f5c:	fb02 f201 	mul.w	r2, r2, r1
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d006      	beq.n	8005f74 <lfs_init+0xdc>
 8005f66:	4b73      	ldr	r3, [pc, #460]	; (8006134 <lfs_init+0x29c>)
 8005f68:	4a6c      	ldr	r2, [pc, #432]	; (800611c <lfs_init+0x284>)
 8005f6a:	f241 0163 	movw	r1, #4195	; 0x1063
 8005f6e:	486c      	ldr	r0, [pc, #432]	; (8006120 <lfs_init+0x288>)
 8005f70:	f003 ff8e 	bl	8009e90 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7c:	d806      	bhi.n	8005f8c <lfs_init+0xf4>
 8005f7e:	4b6e      	ldr	r3, [pc, #440]	; (8006138 <lfs_init+0x2a0>)
 8005f80:	4a66      	ldr	r2, [pc, #408]	; (800611c <lfs_init+0x284>)
 8005f82:	f241 0166 	movw	r1, #4198	; 0x1066
 8005f86:	4866      	ldr	r0, [pc, #408]	; (8006120 <lfs_init+0x288>)
 8005f88:	f003 ff82 	bl	8009e90 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	3b08      	subs	r3, #8
 8005f94:	f04f 32ff 	mov.w	r2, #4294967295
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fa fce2 	bl	8000966 <lfs_npw2>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	009a      	lsls	r2, r3, #2
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d906      	bls.n	8005fbe <lfs_init+0x126>
 8005fb0:	4b62      	ldr	r3, [pc, #392]	; (800613c <lfs_init+0x2a4>)
 8005fb2:	4a5a      	ldr	r2, [pc, #360]	; (800611c <lfs_init+0x284>)
 8005fb4:	f241 0169 	movw	r1, #4201	; 0x1069
 8005fb8:	4859      	ldr	r0, [pc, #356]	; (8006120 <lfs_init+0x288>)
 8005fba:	f003 ff69 	bl	8009e90 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <lfs_init+0x13e>
 8005fc8:	4b5d      	ldr	r3, [pc, #372]	; (8006140 <lfs_init+0x2a8>)
 8005fca:	4a54      	ldr	r2, [pc, #336]	; (800611c <lfs_init+0x284>)
 8005fcc:	f241 0172 	movw	r1, #4210	; 0x1072
 8005fd0:	4853      	ldr	r0, [pc, #332]	; (8006120 <lfs_init+0x288>)
 8005fd2:	f003 ff5d 	bl	8009e90 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00f      	beq.n	8006000 <lfs_init+0x168>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d206      	bcs.n	8006000 <lfs_init+0x168>
 8005ff2:	4b54      	ldr	r3, [pc, #336]	; (8006144 <lfs_init+0x2ac>)
 8005ff4:	4a49      	ldr	r2, [pc, #292]	; (800611c <lfs_init+0x284>)
 8005ff6:	f241 0178 	movw	r1, #4216	; 0x1078
 8005ffa:	4849      	ldr	r0, [pc, #292]	; (8006120 <lfs_init+0x288>)
 8005ffc:	f003 ff48 	bl	8009e90 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d00e      	beq.n	800602a <lfs_init+0x192>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	429a      	cmp	r2, r3
 800601a:	d906      	bls.n	800602a <lfs_init+0x192>
 800601c:	4b4a      	ldr	r3, [pc, #296]	; (8006148 <lfs_init+0x2b0>)
 800601e:	4a3f      	ldr	r2, [pc, #252]	; (800611c <lfs_init+0x284>)
 8006020:	f241 017a 	movw	r1, #4218	; 0x107a
 8006024:	483e      	ldr	r0, [pc, #248]	; (8006120 <lfs_init+0x288>)
 8006026:	f003 ff33 	bl	8009e90 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60da      	str	r2, [r3, #12]
 800603e:	e010      	b.n	8006062 <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	4618      	mov	r0, r3
 8006048:	f7fa fcf5 	bl	8000a36 <lfs_malloc>
 800604c:	4602      	mov	r2, r0
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d103      	bne.n	8006062 <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 800605a:	f06f 030b 	mvn.w	r3, #11
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8006060:	e163      	b.n	800632a <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	61da      	str	r2, [r3, #28]
 8006076:	e010      	b.n	800609a <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	4618      	mov	r0, r3
 8006080:	f7fa fcd9 	bl	8000a36 <lfs_malloc>
 8006084:	4602      	mov	r2, r0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8006092:	f06f 030b 	mvn.w	r3, #11
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8006098:	e147      	b.n	800632a <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fa fcef 	bl	8000a82 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3310      	adds	r3, #16
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fa fce9 	bl	8000a82 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <lfs_init+0x230>
 80060ba:	4b24      	ldr	r3, [pc, #144]	; (800614c <lfs_init+0x2b4>)
 80060bc:	4a17      	ldr	r2, [pc, #92]	; (800611c <lfs_init+0x284>)
 80060be:	f241 0199 	movw	r1, #4249	; 0x1099
 80060c2:	4817      	ldr	r0, [pc, #92]	; (8006120 <lfs_init+0x288>)
 80060c4:	f003 fee4 	bl	8009e90 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d005      	beq.n	80060de <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	665a      	str	r2, [r3, #100]	; 0x64
 80060dc:	e010      	b.n	8006100 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fa fca6 	bl	8000a36 <lfs_malloc>
 80060ea:	4602      	mov	r2, r0
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->lookahead.buffer) {
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 80060f8:	f06f 030b 	mvn.w	r3, #11
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80060fe:	e114      	b.n	800632a <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	2bff      	cmp	r3, #255	; 0xff
 8006108:	d924      	bls.n	8006154 <lfs_init+0x2bc>
 800610a:	4b11      	ldr	r3, [pc, #68]	; (8006150 <lfs_init+0x2b8>)
 800610c:	4a03      	ldr	r2, [pc, #12]	; (800611c <lfs_init+0x284>)
 800610e:	f241 01a5 	movw	r1, #4261	; 0x10a5
 8006112:	4803      	ldr	r0, [pc, #12]	; (8006120 <lfs_init+0x288>)
 8006114:	f003 febc 	bl	8009e90 <__assert_func>
 8006118:	0800b328 	.word	0x0800b328
 800611c:	0800bca0 	.word	0x0800bca0
 8006120:	0800af94 	.word	0x0800af94
 8006124:	0800b344 	.word	0x0800b344
 8006128:	0800b360 	.word	0x0800b360
 800612c:	0800b37c 	.word	0x0800b37c
 8006130:	0800b3ac 	.word	0x0800b3ac
 8006134:	0800b3dc 	.word	0x0800b3dc
 8006138:	0800b410 	.word	0x0800b410
 800613c:	0800b42c 	.word	0x0800b42c
 8006140:	0800b478 	.word	0x0800b478
 8006144:	0800b494 	.word	0x0800b494
 8006148:	0800b4e8 	.word	0x0800b4e8
 800614c:	0800b548 	.word	0x0800b548
 8006150:	0800b568 	.word	0x0800b568
    lfs->name_max = lfs->cfg->name_max;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	22ff      	movs	r2, #255	; 0xff
 800616a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	2b00      	cmp	r3, #0
 8006174:	da06      	bge.n	8006184 <lfs_init+0x2ec>
 8006176:	4b71      	ldr	r3, [pc, #452]	; (800633c <lfs_init+0x4a4>)
 8006178:	4a71      	ldr	r2, [pc, #452]	; (8006340 <lfs_init+0x4a8>)
 800617a:	f241 01ab 	movw	r1, #4267	; 0x10ab
 800617e:	4871      	ldr	r0, [pc, #452]	; (8006344 <lfs_init+0x4ac>)
 8006180:	f003 fe86 	bl	8009e90 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800619c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d906      	bls.n	80061ba <lfs_init+0x322>
 80061ac:	4b66      	ldr	r3, [pc, #408]	; (8006348 <lfs_init+0x4b0>)
 80061ae:	4a64      	ldr	r2, [pc, #400]	; (8006340 <lfs_init+0x4a8>)
 80061b0:	f241 01b1 	movw	r1, #4273	; 0x10b1
 80061b4:	4863      	ldr	r0, [pc, #396]	; (8006344 <lfs_init+0x4ac>)
 80061b6:	f003 fe6b 	bl	8009e90 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d103      	bne.n	80061d4 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80061d2:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d906      	bls.n	80061f2 <lfs_init+0x35a>
 80061e4:	4b59      	ldr	r3, [pc, #356]	; (800634c <lfs_init+0x4b4>)
 80061e6:	4a56      	ldr	r2, [pc, #344]	; (8006340 <lfs_init+0x4a8>)
 80061e8:	f241 01b7 	movw	r1, #4279	; 0x10b7
 80061ec:	4855      	ldr	r0, [pc, #340]	; (8006344 <lfs_init+0x4ac>)
 80061ee:	f003 fe4f 	bl	8009e90 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d00e      	beq.n	800621c <lfs_init+0x384>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	429a      	cmp	r2, r3
 800620c:	d906      	bls.n	800621c <lfs_init+0x384>
 800620e:	4b50      	ldr	r3, [pc, #320]	; (8006350 <lfs_init+0x4b8>)
 8006210:	4a4b      	ldr	r2, [pc, #300]	; (8006340 <lfs_init+0x4a8>)
 8006212:	f241 01b9 	movw	r1, #4281	; 0x10b9
 8006216:	484b      	ldr	r0, [pc, #300]	; (8006344 <lfs_init+0x4ac>)
 8006218:	f003 fe3a 	bl	8009e90 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d00d      	beq.n	8006244 <lfs_init+0x3ac>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800622c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006232:	429a      	cmp	r2, r3
 8006234:	d906      	bls.n	8006244 <lfs_init+0x3ac>
 8006236:	4b47      	ldr	r3, [pc, #284]	; (8006354 <lfs_init+0x4bc>)
 8006238:	4a41      	ldr	r2, [pc, #260]	; (8006340 <lfs_init+0x4a8>)
 800623a:	f241 01bb 	movw	r1, #4283	; 0x10bb
 800623e:	4841      	ldr	r0, [pc, #260]	; (8006344 <lfs_init+0x4ac>)
 8006240:	f003 fe26 	bl	8009e90 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800624a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624e:	d019      	beq.n	8006284 <lfs_init+0x3ec>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800625a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <lfs_init+0x3d2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	08db      	lsrs	r3, r3, #3
 8006268:	e003      	b.n	8006272 <lfs_init+0x3da>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	08db      	lsrs	r3, r3, #3
 8006272:	4293      	cmp	r3, r2
 8006274:	d206      	bcs.n	8006284 <lfs_init+0x3ec>
 8006276:	4b38      	ldr	r3, [pc, #224]	; (8006358 <lfs_init+0x4c0>)
 8006278:	4a31      	ldr	r2, [pc, #196]	; (8006340 <lfs_init+0x4a8>)
 800627a:	f241 01bd 	movw	r1, #4285	; 0x10bd
 800627e:	4831      	ldr	r0, [pc, #196]	; (8006344 <lfs_init+0x4ac>)
 8006280:	f003 fe06 	bl	8009e90 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	67da      	str	r2, [r3, #124]	; 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d103      	bne.n	80062a0 <lfs_init+0x408>
        lfs->inline_max = 0;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	67da      	str	r2, [r3, #124]	; 0x7c
 800629e:	e022      	b.n	80062e6 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d11e      	bne.n	80062e6 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->inline_max = lfs_min(
 80062ac:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d004      	beq.n	80062c6 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 80062c2:	08db      	lsrs	r3, r3, #3
 80062c4:	e003      	b.n	80062ce <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ca:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 80062cc:	08db      	lsrs	r3, r3, #3
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7fa fb11 	bl	80008f8 <lfs_min>
 80062d6:	4603      	mov	r3, r0
 80062d8:	4619      	mov	r1, r3
 80062da:	4620      	mov	r0, r4
 80062dc:	f7fa fb0c 	bl	80008f8 <lfs_min>
 80062e0:	4602      	mov	r2, r0
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ec:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	333c      	adds	r3, #60	; 0x3c
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	605a      	str	r2, [r3, #4]
 800630c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3330      	adds	r3, #48	; 0x30
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	605a      	str	r2, [r3, #4]
 8006318:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3348      	adds	r3, #72	; 0x48
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	605a      	str	r2, [r3, #4]
 8006324:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8006326:	2300      	movs	r3, #0
 8006328:	e003      	b.n	8006332 <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f816 	bl	800635c <lfs_deinit>
    return err;
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006332:	4618      	mov	r0, r3
 8006334:	3734      	adds	r7, #52	; 0x34
 8006336:	46bd      	mov	sp, r7
 8006338:	bd90      	pop	{r4, r7, pc}
 800633a:	bf00      	nop
 800633c:	0800b584 	.word	0x0800b584
 8006340:	0800bca0 	.word	0x0800bca0
 8006344:	0800af94 	.word	0x0800af94
 8006348:	0800b5a8 	.word	0x0800b5a8
 800634c:	0800b5c4 	.word	0x0800b5c4
 8006350:	0800b5f4 	.word	0x0800b5f4
 8006354:	0800b64c 	.word	0x0800b64c
 8006358:	0800b69c 	.word	0x0800b69c

0800635c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636a:	2b00      	cmp	r3, #0
 800636c:	d104      	bne.n	8006378 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	4618      	mov	r0, r3
 8006374:	f7fa fb6b 	bl	8000a4e <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	4618      	mov	r0, r3
 8006388:	f7fa fb61 	bl	8000a4e <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800639a:	4618      	mov	r0, r3
 800639c:	f7fa fb57 	bl	8000a4e <lfs_free>
    }

    return 0;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b0a0      	sub	sp, #128	; 0x80
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
    int err = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff fd6b 	bl	8005e98 <lfs_init>
 80063c2:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80063c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <lfs_format_+0x22>
            return err;
 80063ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063cc:	e08d      	b.n	80064ea <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <lfs_format_+0x38>
 80063d6:	4b47      	ldr	r3, [pc, #284]	; (80064f4 <lfs_format_+0x148>)
 80063d8:	4a47      	ldr	r2, [pc, #284]	; (80064f8 <lfs_format_+0x14c>)
 80063da:	f241 01fd 	movw	r1, #4349	; 0x10fd
 80063de:	4847      	ldr	r0, [pc, #284]	; (80064fc <lfs_format_+0x150>)
 80063e0:	f003 fd56 	bl	8009e90 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	461a      	mov	r2, r3
 80063f0:	2100      	movs	r1, #0
 80063f2:	f003 fdd3 	bl	8009f9c <memset>
        lfs->lookahead.start = 0;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	00da      	lsls	r2, r3, #3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f7fa fa74 	bl	80008f8 <lfs_min>
 8006410:	4602      	mov	r2, r0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ckpoint(lfs);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7fb fa44 	bl	80018aa <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8006422:	f107 030c 	add.w	r3, r7, #12
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7fd f935 	bl	8003698 <lfs_dir_alloc>
 800642e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d150      	bne.n	80064d8 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fb fa0e 	bl	8001858 <lfs_fs_disk_version>
 800643c:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 800643e:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006444:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8006446:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800644c:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8006452:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8006458:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 800645e:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8006460:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006464:	4618      	mov	r0, r3
 8006466:	f7fb f96d 	bl	8001744 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800646a:	4b25      	ldr	r3, [pc, #148]	; (8006500 <lfs_format_+0x154>)
 800646c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800646e:	2300      	movs	r3, #0
 8006470:	653b      	str	r3, [r7, #80]	; 0x50
 8006472:	4b24      	ldr	r3, [pc, #144]	; (8006504 <lfs_format_+0x158>)
 8006474:	657b      	str	r3, [r7, #84]	; 0x54
 8006476:	4b24      	ldr	r3, [pc, #144]	; (8006508 <lfs_format_+0x15c>)
 8006478:	65bb      	str	r3, [r7, #88]	; 0x58
 800647a:	4b24      	ldr	r3, [pc, #144]	; (800650c <lfs_format_+0x160>)
 800647c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800647e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006482:	663b      	str	r3, [r7, #96]	; 0x60
 8006484:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006488:	f107 010c 	add.w	r1, r7, #12
 800648c:	2303      	movs	r3, #3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fe fae8 	bl	8004a64 <lfs_dir_commit>
 8006494:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8006496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d11f      	bne.n	80064dc <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800649c:	2300      	movs	r3, #0
 800649e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80064a2:	f107 010c 	add.w	r1, r7, #12
 80064a6:	2300      	movs	r3, #0
 80064a8:	2200      	movs	r2, #0
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fe fada 	bl	8004a64 <lfs_dir_commit>
 80064b0:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80064b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d113      	bne.n	80064e0 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80064b8:	2300      	movs	r3, #0
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064bc:	2301      	movs	r3, #1
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
 80064c0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80064c4:	f107 030c 	add.w	r3, r7, #12
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fc fd2c 	bl	8002f28 <lfs_dir_fetch>
 80064d0:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80064d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	e004      	b.n	80064e2 <lfs_format_+0x136>
            goto cleanup;
 80064d8:	bf00      	nop
 80064da:	e002      	b.n	80064e2 <lfs_format_+0x136>
            goto cleanup;
 80064dc:	bf00      	nop
 80064de:	e000      	b.n	80064e2 <lfs_format_+0x136>
            goto cleanup;
 80064e0:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff ff3a 	bl	800635c <lfs_deinit>
    return err;
 80064e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3780      	adds	r7, #128	; 0x80
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	0800b72c 	.word	0x0800b72c
 80064f8:	0800bcac 	.word	0x0800bcac
 80064fc:	0800af94 	.word	0x0800af94
 8006500:	40100000 	.word	0x40100000
 8006504:	0ff00008 	.word	0x0ff00008
 8006508:	0800b744 	.word	0x0800b744
 800650c:	20100018 	.word	0x20100018

08006510 <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8006510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006512:	b0a1      	sub	sp, #132	; 0x84
 8006514:	af04      	add	r7, sp, #16
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fcbb 	bl	8005e98 <lfs_init>
 8006522:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err) {
 8006524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <lfs_mount_+0x1e>
        return err;
 800652a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652c:	e202      	b.n	8006934 <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800652e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006532:	2220      	movs	r2, #32
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f003 fd30 	bl	8009f9c <memset>
 800653c:	2301      	movs	r3, #1
 800653e:	657b      	str	r3, [r7, #84]	; 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006540:	4a9a      	ldr	r2, [pc, #616]	; (80067ac <lfs_mount_+0x29c>)
 8006542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800654a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800654e:	2301      	movs	r3, #1
 8006550:	66bb      	str	r3, [r7, #104]	; 0x68
    lfs_size_t tortoise_period = 1;
 8006552:	2301      	movs	r3, #1
 8006554:	667b      	str	r3, [r7, #100]	; 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 8006556:	e199      	b.n	800688c <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8006558:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800655c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006560:	3318      	adds	r3, #24
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f7fa fe6d 	bl	8001244 <lfs_pair_issync>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 8006570:	4b8f      	ldr	r3, [pc, #572]	; (80067b0 <lfs_mount_+0x2a0>)
 8006572:	f241 1246 	movw	r2, #4422	; 0x1146
 8006576:	498f      	ldr	r1, [pc, #572]	; (80067b4 <lfs_mount_+0x2a4>)
 8006578:	488f      	ldr	r0, [pc, #572]	; (80067b8 <lfs_mount_+0x2a8>)
 800657a:	f004 f8af 	bl	800a6dc <iprintf>
            err = LFS_ERR_CORRUPT;
 800657e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006582:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto cleanup;
 8006584:	e1d2      	b.n	800692c <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 8006586:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658a:	429a      	cmp	r2, r3
 800658c:	d108      	bne.n	80065a0 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 800658e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006590:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise[1] = dir.tail[1];
 8006592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
            tortoise_i = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	66bb      	str	r3, [r7, #104]	; 0x68
            tortoise_period *= 2;
 800659a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	667b      	str	r3, [r7, #100]	; 0x64
        }
        tortoise_i += 1;
 80065a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065a2:	3301      	adds	r3, #1
 80065a4:	66bb      	str	r3, [r7, #104]	; 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
 80065aa:	4b84      	ldr	r3, [pc, #528]	; (80067bc <lfs_mount_+0x2ac>)
 80065ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ae:	2308      	movs	r3, #8
 80065b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80065b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065b6:	f103 0218 	add.w	r2, r3, #24
 80065ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80065be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	4b7e      	ldr	r3, [pc, #504]	; (80067c0 <lfs_mount_+0x2b0>)
 80065c6:	9302      	str	r3, [sp, #8]
 80065c8:	2300      	movs	r3, #0
 80065ca:	9301      	str	r3, [sp, #4]
 80065cc:	4b7d      	ldr	r3, [pc, #500]	; (80067c4 <lfs_mount_+0x2b4>)
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	4b7d      	ldr	r3, [pc, #500]	; (80067c8 <lfs_mount_+0x2b8>)
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fc f8e0 	bl	8002798 <lfs_dir_fetchmatch>
 80065d8:	65f8      	str	r0, [r7, #92]	; 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80065da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	da02      	bge.n	80065e6 <lfs_mount_+0xd6>
            err = tag;
 80065e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065e2:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto cleanup;
 80065e4:	e1a2      	b.n	800692c <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80065e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 8142 	beq.w	8006872 <lfs_mount_+0x362>
 80065ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fa fe96 	bl	8001322 <lfs_tag_isdelete>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f083 0301 	eor.w	r3, r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 8137 	beq.w	8006872 <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 8006604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800660a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006610:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006614:	f107 030c 	add.w	r3, r7, #12
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	4b6c      	ldr	r3, [pc, #432]	; (80067cc <lfs_mount_+0x2bc>)
 800661c:	4a6a      	ldr	r2, [pc, #424]	; (80067c8 <lfs_mount_+0x2b8>)
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fb fb58 	bl	8001cd4 <lfs_dir_get>
 8006624:	65f8      	str	r0, [r7, #92]	; 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8006626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006628:	2b00      	cmp	r3, #0
 800662a:	da02      	bge.n	8006632 <lfs_mount_+0x122>
                err = tag;
 800662c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800662e:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 8006630:	e17c      	b.n	800692c <lfs_mount_+0x41c>
            }
            lfs_superblock_fromle32(&superblock);
 8006632:	f107 030c 	add.w	r3, r7, #12
 8006636:	4618      	mov	r0, r3
 8006638:	f7fb f84c 	bl	80016d4 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	0c1b      	lsrs	r3, r3, #16
 8006640:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fb f912 	bl	8001874 <lfs_fs_disk_version_major>
 8006650:	4603      	mov	r3, r0
 8006652:	461a      	mov	r2, r3
 8006654:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006658:	4293      	cmp	r3, r2
 800665a:	d108      	bne.n	800666e <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7fb f917 	bl	8001890 <lfs_fs_disk_version_minor>
 8006662:	4603      	mov	r3, r0
 8006664:	461a      	mov	r2, r3
 8006666:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800666a:	4293      	cmp	r3, r2
 800666c:	d91d      	bls.n	80066aa <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 800666e:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
 8006672:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fb f8fc 	bl	8001874 <lfs_fs_disk_version_major>
 800667c:	4603      	mov	r3, r0
 800667e:	461e      	mov	r6, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fb f905 	bl	8001890 <lfs_fs_disk_version_minor>
 8006686:	4603      	mov	r3, r0
 8006688:	461a      	mov	r2, r3
 800668a:	4b49      	ldr	r3, [pc, #292]	; (80067b0 <lfs_mount_+0x2a0>)
 800668c:	9303      	str	r3, [sp, #12]
 800668e:	9202      	str	r2, [sp, #8]
 8006690:	9601      	str	r6, [sp, #4]
 8006692:	9400      	str	r4, [sp, #0]
 8006694:	462b      	mov	r3, r5
 8006696:	f241 1274 	movw	r2, #4468	; 0x1174
 800669a:	4946      	ldr	r1, [pc, #280]	; (80067b4 <lfs_mount_+0x2a4>)
 800669c:	484c      	ldr	r0, [pc, #304]	; (80067d0 <lfs_mount_+0x2c0>)
 800669e:	f004 f81d 	bl	800a6dc <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80066a2:	f06f 0315 	mvn.w	r3, #21
 80066a6:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 80066a8:	e0e2      	b.n	8006870 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 80066aa:	2300      	movs	r3, #0
 80066ac:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7fb f8ed 	bl	8001890 <lfs_fs_disk_version_minor>
 80066b6:	4603      	mov	r3, r0
 80066b8:	461a      	mov	r2, r3
 80066ba:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80066be:	4293      	cmp	r3, r2
 80066c0:	d21c      	bcs.n	80066fc <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 80066c2:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
 80066c6:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fb f8d2 	bl	8001874 <lfs_fs_disk_version_major>
 80066d0:	4603      	mov	r3, r0
 80066d2:	461e      	mov	r6, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7fb f8db 	bl	8001890 <lfs_fs_disk_version_minor>
 80066da:	4603      	mov	r3, r0
 80066dc:	461a      	mov	r2, r3
 80066de:	4b34      	ldr	r3, [pc, #208]	; (80067b0 <lfs_mount_+0x2a0>)
 80066e0:	9303      	str	r3, [sp, #12]
 80066e2:	9202      	str	r2, [sp, #8]
 80066e4:	9601      	str	r6, [sp, #4]
 80066e6:	9400      	str	r4, [sp, #0]
 80066e8:	462b      	mov	r3, r5
 80066ea:	f241 1283 	movw	r2, #4483	; 0x1183
 80066ee:	4931      	ldr	r1, [pc, #196]	; (80067b4 <lfs_mount_+0x2a4>)
 80066f0:	4838      	ldr	r0, [pc, #224]	; (80067d4 <lfs_mount_+0x2c4>)
 80066f2:	f003 fff3 	bl	800a6dc <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 80066f6:	2301      	movs	r3, #1
 80066f8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 80066fc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fbb6 	bl	8006e74 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d018      	beq.n	8006740 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006714:	429a      	cmp	r2, r3
 8006716:	d910      	bls.n	800673a <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671e:	4924      	ldr	r1, [pc, #144]	; (80067b0 <lfs_mount_+0x2a0>)
 8006720:	9101      	str	r1, [sp, #4]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	4613      	mov	r3, r2
 8006726:	f241 1292 	movw	r2, #4498	; 0x1192
 800672a:	4922      	ldr	r1, [pc, #136]	; (80067b4 <lfs_mount_+0x2a4>)
 800672c:	482a      	ldr	r0, [pc, #168]	; (80067d8 <lfs_mount_+0x2c8>)
 800672e:	f003 ffd5 	bl	800a6dc <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8006732:	f06f 0315 	mvn.w	r3, #21
 8006736:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 8006738:	e09a      	b.n	8006870 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d018      	beq.n	8006778 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800674c:	429a      	cmp	r2, r3
 800674e:	d910      	bls.n	8006772 <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8006750:	69fa      	ldr	r2, [r7, #28]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006756:	4916      	ldr	r1, [pc, #88]	; (80067b0 <lfs_mount_+0x2a0>)
 8006758:	9101      	str	r1, [sp, #4]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	4613      	mov	r3, r2
 800675e:	f241 129d 	movw	r2, #4509	; 0x119d
 8006762:	4914      	ldr	r1, [pc, #80]	; (80067b4 <lfs_mount_+0x2a4>)
 8006764:	481d      	ldr	r0, [pc, #116]	; (80067dc <lfs_mount_+0x2cc>)
 8006766:	f003 ffb9 	bl	800a6dc <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800676a:	f06f 0315 	mvn.w	r3, #21
 800676e:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 8006770:	e07e      	b.n	8006870 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d040      	beq.n	8006800 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 800677e:	6a3a      	ldr	r2, [r7, #32]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006784:	429a      	cmp	r2, r3
 8006786:	d92d      	bls.n	80067e4 <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8006788:	6a3a      	ldr	r2, [r7, #32]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800678e:	4908      	ldr	r1, [pc, #32]	; (80067b0 <lfs_mount_+0x2a0>)
 8006790:	9101      	str	r1, [sp, #4]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	f241 12a8 	movw	r2, #4520	; 0x11a8
 800679a:	4906      	ldr	r1, [pc, #24]	; (80067b4 <lfs_mount_+0x2a4>)
 800679c:	4810      	ldr	r0, [pc, #64]	; (80067e0 <lfs_mount_+0x2d0>)
 800679e:	f003 ff9d 	bl	800a6dc <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80067a2:	f06f 0315 	mvn.w	r3, #21
 80067a6:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 80067a8:	e062      	b.n	8006870 <lfs_mount_+0x360>
 80067aa:	bf00      	nop
 80067ac:	0800b0e4 	.word	0x0800b0e4
 80067b0:	0800b0a0 	.word	0x0800b0a0
 80067b4:	0800af94 	.word	0x0800af94
 80067b8:	0800b750 	.word	0x0800b750
 80067bc:	0800b744 	.word	0x0800b744
 80067c0:	08002fc5 	.word	0x08002fc5
 80067c4:	0ff00008 	.word	0x0ff00008
 80067c8:	7ffffc00 	.word	0x7ffffc00
 80067cc:	20100018 	.word	0x20100018
 80067d0:	0800b77c 	.word	0x0800b77c
 80067d4:	0800b7b4 	.word	0x0800b7b4
 80067d8:	0800b7f4 	.word	0x0800b7f4
 80067dc:	0800b828 	.word	0x0800b828
 80067e0:	0800b85c 	.word	0x0800b85c
                }

                lfs->attr_max = superblock.attr_max;
 80067e4:	6a3a      	ldr	r2, [r7, #32]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	679a      	str	r2, [r3, #120]	; 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067f2:	4619      	mov	r1, r3
 80067f4:	4610      	mov	r0, r2
 80067f6:	f7fa f87f 	bl	80008f8 <lfs_min>
 80067fa:	4602      	mov	r2, r0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	67da      	str	r2, [r3, #124]	; 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d017      	beq.n	800683a <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	429a      	cmp	r2, r3
 8006814:	d011      	beq.n	800683a <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	4947      	ldr	r1, [pc, #284]	; (800693c <lfs_mount_+0x42c>)
 8006820:	9101      	str	r1, [sp, #4]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	f241 12b7 	movw	r2, #4535	; 0x11b7
 800682a:	4945      	ldr	r1, [pc, #276]	; (8006940 <lfs_mount_+0x430>)
 800682c:	4845      	ldr	r0, [pc, #276]	; (8006944 <lfs_mount_+0x434>)
 800682e:	f003 ff55 	bl	800a6dc <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8006832:	f06f 0315 	mvn.w	r3, #21
 8006836:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 8006838:	e01a      	b.n	8006870 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	429a      	cmp	r2, r3
 800684a:	d012      	beq.n	8006872 <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	4939      	ldr	r1, [pc, #228]	; (800693c <lfs_mount_+0x42c>)
 8006856:	9101      	str	r1, [sp, #4]
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	4613      	mov	r3, r2
 800685c:	f44f 528e 	mov.w	r2, #4544	; 0x11c0
 8006860:	4937      	ldr	r1, [pc, #220]	; (8006940 <lfs_mount_+0x430>)
 8006862:	4839      	ldr	r0, [pc, #228]	; (8006948 <lfs_mount_+0x438>)
 8006864:	f003 ff3a 	bl	800a6dc <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8006868:	f06f 0315 	mvn.w	r3, #21
 800686c:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 800686e:	bf00      	nop
            goto cleanup;
 8006870:	e05c      	b.n	800692c <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006878:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fc fb6e 	bl	8002f60 <lfs_dir_getgstate>
 8006884:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 8006886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d14e      	bne.n	800692a <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 800688c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006890:	3318      	adds	r3, #24
 8006892:	4618      	mov	r0, r3
 8006894:	f7fa fc91 	bl	80011ba <lfs_pair_isnull>
 8006898:	4603      	mov	r3, r0
 800689a:	f083 0301 	eor.w	r3, r3, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f47f ae59 	bne.w	8006558 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3330      	adds	r3, #48	; 0x30
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fa fdec 	bl	8001488 <lfs_gstate_iszero>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f083 0301 	eor.w	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d010      	beq.n	80068de <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068c8:	481c      	ldr	r0, [pc, #112]	; (800693c <lfs_mount_+0x42c>)
 80068ca:	9002      	str	r0, [sp, #8]
 80068cc:	9201      	str	r2, [sp, #4]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	460b      	mov	r3, r1
 80068d2:	f241 12d0 	movw	r2, #4560	; 0x11d0
 80068d6:	491a      	ldr	r1, [pc, #104]	; (8006940 <lfs_mount_+0x430>)
 80068d8:	481c      	ldr	r0, [pc, #112]	; (800694c <lfs_mount_+0x43c>)
 80068da:	f003 feff 	bl	800a6dc <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fa fd0f 	bl	8001306 <lfs_tag_isvalid>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f083 0301 	eor.w	r3, r3, #1
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	441a      	add	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	333c      	adds	r3, #60	; 0x3c
 8006902:	3230      	adds	r2, #48	; 0x30
 8006904:	ca07      	ldmia	r2, {r0, r1, r2}
 8006906:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006912:	fbb3 f1f2 	udiv	r1, r3, r2
 8006916:	fb02 f201 	mul.w	r2, r2, r1
 800691a:	1a9a      	subs	r2, r3, r2
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7fa ffd0 	bl	80018c6 <lfs_alloc_drop>

    return 0;
 8006926:	2300      	movs	r3, #0
 8006928:	e004      	b.n	8006934 <lfs_mount_+0x424>
            goto cleanup;
 800692a:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f80f 	bl	8006950 <lfs_unmount_>
    return err;
 8006932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8006934:	4618      	mov	r0, r3
 8006936:	3774      	adds	r7, #116	; 0x74
 8006938:	46bd      	mov	sp, r7
 800693a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800693c:	0800b0a0 	.word	0x0800b0a0
 8006940:	0800af94 	.word	0x0800af94
 8006944:	0800b890 	.word	0x0800b890
 8006948:	0800b8c4 	.word	0x0800b8c4
 800694c:	0800b8f4 	.word	0x0800b8f4

08006950 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff fcff 	bl	800635c <lfs_deinit>
 800695e:	4603      	mov	r3, r0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8006968:	b590      	push	{r4, r7, lr}
 800696a:	b0a1      	sub	sp, #132	; 0x84
 800696c:	af04      	add	r7, sp, #16
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800697a:	2220      	movs	r2, #32
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f003 fb0c 	bl	8009f9c <memset>
 8006984:	2301      	movs	r3, #1
 8006986:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006988:	4a9b      	ldr	r2, [pc, #620]	; (8006bf8 <lfs_fs_traverse_+0x290>)
 800698a:	f107 031c 	add.w	r3, r7, #28
 800698e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006992:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006996:	2301      	movs	r3, #1
 8006998:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 800699a:	2301      	movs	r3, #1
 800699c:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 800699e:	e0c1      	b.n	8006b24 <lfs_fs_traverse_+0x1bc>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80069a0:	f107 021c 	add.w	r2, r7, #28
 80069a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a8:	3318      	adds	r3, #24
 80069aa:	4611      	mov	r1, r2
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fa fc49 	bl	8001244 <lfs_pair_issync>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 80069b8:	4b90      	ldr	r3, [pc, #576]	; (8006bfc <lfs_fs_traverse_+0x294>)
 80069ba:	f241 222b 	movw	r2, #4651	; 0x122b
 80069be:	4990      	ldr	r1, [pc, #576]	; (8006c00 <lfs_fs_traverse_+0x298>)
 80069c0:	4890      	ldr	r0, [pc, #576]	; (8006c04 <lfs_fs_traverse_+0x29c>)
 80069c2:	f003 fe8b 	bl	800a6dc <iprintf>
            return LFS_ERR_CORRUPT;
 80069c6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80069ca:	e110      	b.n	8006bee <lfs_fs_traverse_+0x286>
        }
        if (tortoise_i == tortoise_period) {
 80069cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d108      	bne.n	80069e6 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 80069d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d6:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 80069d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069da:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 80069e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 80069e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e8:	3301      	adds	r3, #1
 80069ea:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 80069ec:	2300      	movs	r3, #0
 80069ee:	667b      	str	r3, [r7, #100]	; 0x64
 80069f0:	e014      	b.n	8006a1c <lfs_fs_traverse_+0xb4>
            int err = cb(data, dir.tail[i]);
 80069f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069f4:	3306      	adds	r3, #6
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80069fc:	4413      	add	r3, r2
 80069fe:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4611      	mov	r1, r2
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
 8006a0a:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8006a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <lfs_fs_traverse_+0xae>
                return err;
 8006a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a14:	e0eb      	b.n	8006bee <lfs_fs_traverse_+0x286>
        for (int i = 0; i < 2; i++) {
 8006a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a18:	3301      	adds	r3, #1
 8006a1a:	667b      	str	r3, [r7, #100]	; 0x64
 8006a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	dde7      	ble.n	80069f2 <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8006a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a26:	f103 0218 	add.w	r2, r3, #24
 8006a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a2e:	4619      	mov	r1, r3
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7fc fa79 	bl	8002f28 <lfs_dir_fetch>
 8006a36:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8006a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <lfs_fs_traverse_+0xda>
            return err;
 8006a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a40:	e0d5      	b.n	8006bee <lfs_fs_traverse_+0x286>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8006a42:	2300      	movs	r3, #0
 8006a44:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006a48:	e067      	b.n	8006b1a <lfs_fs_traverse_+0x1b2>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006a4a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006a4e:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006a50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a54:	f043 0308 	orr.w	r3, r3, #8
 8006a58:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006a5c:	f107 0214 	add.w	r2, r7, #20
 8006a60:	9200      	str	r2, [sp, #0]
 8006a62:	4a69      	ldr	r2, [pc, #420]	; (8006c08 <lfs_fs_traverse_+0x2a0>)
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7fb f935 	bl	8001cd4 <lfs_dir_get>
 8006a6a:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 8006a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	da05      	bge.n	8006a7e <lfs_fs_traverse_+0x116>
                if (tag == LFS_ERR_NOENT) {
 8006a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a74:	f113 0f02 	cmn.w	r3, #2
 8006a78:	d049      	beq.n	8006b0e <lfs_fs_traverse_+0x1a6>
                    continue;
                }
                return tag;
 8006a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a7c:	e0b7      	b.n	8006bee <lfs_fs_traverse_+0x286>
            }
            lfs_ctz_fromle32(&ctz);
 8006a7e:	f107 0314 	add.w	r3, r7, #20
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fa fdf6 	bl	8001674 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8006a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fa fc7c 	bl	8001388 <lfs_tag_type3>
 8006a90:	4603      	mov	r3, r0
 8006a92:	461a      	mov	r2, r3
 8006a94:	f240 2302 	movw	r3, #514	; 0x202
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d113      	bne.n	8006ac4 <lfs_fs_traverse_+0x15c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8006a9c:	68f9      	ldr	r1, [r7, #12]
 8006a9e:	6978      	ldr	r0, [r7, #20]
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	9202      	str	r2, [sp, #8]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	9201      	str	r2, [sp, #4]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	4603      	mov	r3, r0
 8006aae:	460a      	mov	r2, r1
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7fe f9a6 	bl	8004e04 <lfs_ctz_traverse>
 8006ab8:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8006aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d027      	beq.n	8006b10 <lfs_fs_traverse_+0x1a8>
                    return err;
 8006ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac2:	e094      	b.n	8006bee <lfs_fs_traverse_+0x286>
                }
            } else if (includeorphans &&
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d022      	beq.n	8006b10 <lfs_fs_traverse_+0x1a8>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8006aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fa fc5b 	bl	8001388 <lfs_tag_type3>
 8006ad2:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8006ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad8:	d11a      	bne.n	8006b10 <lfs_fs_traverse_+0x1a8>
                for (int i = 0; i < 2; i++) {
 8006ada:	2300      	movs	r3, #0
 8006adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ade:	e012      	b.n	8006b06 <lfs_fs_traverse_+0x19e>
                    err = cb(data, (&ctz.head)[i]);
 8006ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	f107 0214 	add.w	r2, r7, #20
 8006ae8:	4413      	add	r3, r2
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4611      	mov	r1, r2
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
 8006af4:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 8006af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <lfs_fs_traverse_+0x198>
                        return err;
 8006afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afe:	e076      	b.n	8006bee <lfs_fs_traverse_+0x286>
                for (int i = 0; i < 2; i++) {
 8006b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b02:	3301      	adds	r3, #1
 8006b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	dde9      	ble.n	8006ae0 <lfs_fs_traverse_+0x178>
 8006b0c:	e000      	b.n	8006b10 <lfs_fs_traverse_+0x1a8>
                    continue;
 8006b0e:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006b10:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006b14:	3301      	adds	r3, #1
 8006b16:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006b1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b1c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d392      	bcc.n	8006a4a <lfs_fs_traverse_+0xe2>
    while (!lfs_pair_isnull(dir.tail)) {
 8006b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b28:	3318      	adds	r3, #24
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fa fb45 	bl	80011ba <lfs_pair_isnull>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f083 0301 	eor.w	r3, r3, #1
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f47f af31 	bne.w	80069a0 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b44:	e04f      	b.n	8006be6 <lfs_fs_traverse_+0x27e>
        if (f->type != LFS_TYPE_REG) {
 8006b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b48:	799b      	ldrb	r3, [r3, #6]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d147      	bne.n	8006bde <lfs_fs_traverse_+0x276>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d01d      	beq.n	8006b96 <lfs_fs_traverse_+0x22e>
 8006b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d117      	bne.n	8006b96 <lfs_fs_traverse_+0x22e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b68:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b70:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	9202      	str	r2, [sp, #8]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	9201      	str	r2, [sp, #4]
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	4623      	mov	r3, r4
 8006b82:	4602      	mov	r2, r0
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7fe f93d 	bl	8004e04 <lfs_ctz_traverse>
 8006b8a:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <lfs_fs_traverse_+0x22e>
                return err;
 8006b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b94:	e02b      	b.n	8006bee <lfs_fs_traverse_+0x286>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01e      	beq.n	8006be0 <lfs_fs_traverse_+0x278>
 8006ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d118      	bne.n	8006be0 <lfs_fs_traverse_+0x278>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bb0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bb8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	9202      	str	r2, [sp, #8]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	9201      	str	r2, [sp, #4]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	4623      	mov	r3, r4
 8006bca:	4602      	mov	r2, r0
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7fe f919 	bl	8004e04 <lfs_ctz_traverse>
 8006bd2:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8006bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <lfs_fs_traverse_+0x278>
                return err;
 8006bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bdc:	e007      	b.n	8006bee <lfs_fs_traverse_+0x286>
            continue;
 8006bde:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006be0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1ac      	bne.n	8006b46 <lfs_fs_traverse_+0x1de>
            }
        }
    }
#endif

    return 0;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3774      	adds	r7, #116	; 0x74
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd90      	pop	{r4, r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	0800b0e4 	.word	0x0800b0e4
 8006bfc:	0800b0a0 	.word	0x0800b0a0
 8006c00:	0800af94 	.word	0x0800af94
 8006c04:	0800b750 	.word	0x0800b750
 8006c08:	700ffc00 	.word	0x700ffc00

08006c0c <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	; 0x28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006c24:	4a2d      	ldr	r2, [pc, #180]	; (8006cdc <lfs_fs_pred+0xd0>)
 8006c26:	f107 0314 	add.w	r3, r7, #20
 8006c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c2e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006c32:	2301      	movs	r3, #1
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 8006c36:	2301      	movs	r3, #1
 8006c38:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8006c3a:	e03e      	b.n	8006cba <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3318      	adds	r3, #24
 8006c40:	f107 0214 	add.w	r2, r7, #20
 8006c44:	4611      	mov	r1, r2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fa fafc 	bl	8001244 <lfs_pair_issync>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8006c52:	4b23      	ldr	r3, [pc, #140]	; (8006ce0 <lfs_fs_pred+0xd4>)
 8006c54:	f241 2289 	movw	r2, #4745	; 0x1289
 8006c58:	4922      	ldr	r1, [pc, #136]	; (8006ce4 <lfs_fs_pred+0xd8>)
 8006c5a:	4823      	ldr	r0, [pc, #140]	; (8006ce8 <lfs_fs_pred+0xdc>)
 8006c5c:	f003 fd3e 	bl	800a6dc <iprintf>
            return LFS_ERR_CORRUPT;
 8006c60:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006c64:	e036      	b.n	8006cd4 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8006c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d10a      	bne.n	8006c84 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	3301      	adds	r3, #1
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3318      	adds	r3, #24
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fa faad 	bl	80011f0 <lfs_pair_cmp>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <lfs_fs_pred+0x94>
            return 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e019      	b.n	8006cd4 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3318      	adds	r3, #24
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7fc f93d 	bl	8002f28 <lfs_dir_fetch>
 8006cae:	61f8      	str	r0, [r7, #28]
        if (err) {
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <lfs_fs_pred+0xae>
            return err;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	e00c      	b.n	8006cd4 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3318      	adds	r3, #24
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fa fa7b 	bl	80011ba <lfs_pair_isnull>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f083 0301 	eor.w	r3, r3, #1
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1b5      	bne.n	8006c3c <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006cd0:	f06f 0301 	mvn.w	r3, #1
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3728      	adds	r7, #40	; 0x28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	0800b0e4 	.word	0x0800b0e4
 8006ce0:	0800b0a0 	.word	0x0800b0a0
 8006ce4:	0800af94 	.word	0x0800af94
 8006ce8:	0800b750 	.word	0x0800b750

08006cec <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006cec:	b5b0      	push	{r4, r5, r7, lr}
 8006cee:	b08e      	sub	sp, #56	; 0x38
 8006cf0:	af04      	add	r7, sp, #16
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006d0c:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8006d12:	69dd      	ldr	r5, [r3, #28]
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	6852      	ldr	r2, [r2, #4]
 8006d1c:	2108      	movs	r1, #8
 8006d1e:	9103      	str	r1, [sp, #12]
 8006d20:	f107 0110 	add.w	r1, r7, #16
 8006d24:	9102      	str	r1, [sp, #8]
 8006d26:	9201      	str	r2, [sp, #4]
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4601      	mov	r1, r0
 8006d30:	6a38      	ldr	r0, [r7, #32]
 8006d32:	f7f9 febd 	bl	8000ab0 <lfs_bd_read>
 8006d36:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <lfs_fs_parent_match+0x56>
        return err;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	e012      	b.n	8006d68 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8006d42:	f107 0310 	add.w	r3, r7, #16
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fa faa9 	bl	800129e <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	1d1a      	adds	r2, r3, #4
 8006d50:	f107 0310 	add.w	r3, r7, #16
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fa fa4a 	bl	80011f0 <lfs_pair_cmp>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bf14      	ite	ne
 8006d62:	2301      	movne	r3, #1
 8006d64:	2300      	moveq	r3, #0
 8006d66:	b2db      	uxtb	r3, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3728      	adds	r7, #40	; 0x28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bdb0      	pop	{r4, r5, r7, pc}

08006d70 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b090      	sub	sp, #64	; 0x40
 8006d74:	af04      	add	r7, sp, #16
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006d88:	4a33      	ldr	r2, [pc, #204]	; (8006e58 <lfs_fs_parent+0xe8>)
 8006d8a:	f107 031c 	add.w	r3, r7, #28
 8006d8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d92:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006d96:	2301      	movs	r3, #1
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8006d9e:	e049      	b.n	8006e34 <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3318      	adds	r3, #24
 8006da4:	f107 021c 	add.w	r2, r7, #28
 8006da8:	4611      	mov	r1, r2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fa fa4a 	bl	8001244 <lfs_pair_issync>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8006db6:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <lfs_fs_parent+0xec>)
 8006db8:	f241 22ca 	movw	r2, #4810	; 0x12ca
 8006dbc:	4928      	ldr	r1, [pc, #160]	; (8006e60 <lfs_fs_parent+0xf0>)
 8006dbe:	4829      	ldr	r0, [pc, #164]	; (8006e64 <lfs_fs_parent+0xf4>)
 8006dc0:	f003 fc8c 	bl	800a6dc <iprintf>
            return LFS_ERR_CORRUPT;
 8006dc4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006dc8:	e041      	b.n	8006e4e <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 8006dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d10a      	bne.n	8006de8 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	3301      	adds	r3, #1
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006e04:	f107 0310 	add.w	r3, r7, #16
 8006e08:	9303      	str	r3, [sp, #12]
 8006e0a:	4b17      	ldr	r3, [pc, #92]	; (8006e68 <lfs_fs_parent+0xf8>)
 8006e0c:	9302      	str	r3, [sp, #8]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <lfs_fs_parent+0xfc>)
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <lfs_fs_parent+0x100>)
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7fb fcbc 	bl	8002798 <lfs_dir_fetchmatch>
 8006e20:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <lfs_fs_parent+0xc4>
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	f113 0f02 	cmn.w	r3, #2
 8006e2e:	d001      	beq.n	8006e34 <lfs_fs_parent+0xc4>
            return tag;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	e00c      	b.n	8006e4e <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3318      	adds	r3, #24
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fa f9be 	bl	80011ba <lfs_pair_isnull>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f083 0301 	eor.w	r3, r3, #1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1aa      	bne.n	8006da0 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006e4a:	f06f 0301 	mvn.w	r3, #1
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3730      	adds	r7, #48	; 0x30
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	0800b0e4 	.word	0x0800b0e4
 8006e5c:	0800b0a0 	.word	0x0800b0a0
 8006e60:	0800af94 	.word	0x0800af94
 8006e64:	0800b750 	.word	0x0800b750
 8006e68:	08006ced 	.word	0x08006ced
 8006e6c:	20000008 	.word	0x20000008
 8006e70:	7ff003ff 	.word	0x7ff003ff

08006e74 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	025b      	lsls	r3, r3, #9
 8006e8c:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
	...

08006ea0 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006ea0:	b590      	push	{r4, r7, lr}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fa faa3 	bl	80013fc <lfs_tag_size>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <lfs_fs_preporphans+0x32>
 8006ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	da06      	bge.n	8006ed2 <lfs_fs_preporphans+0x32>
 8006ec4:	4b1a      	ldr	r3, [pc, #104]	; (8006f30 <lfs_fs_preporphans+0x90>)
 8006ec6:	4a1b      	ldr	r2, [pc, #108]	; (8006f34 <lfs_fs_preporphans+0x94>)
 8006ec8:	f241 21eb 	movw	r1, #4843	; 0x12eb
 8006ecc:	481a      	ldr	r0, [pc, #104]	; (8006f38 <lfs_fs_preporphans+0x98>)
 8006ece:	f002 ffdf 	bl	8009e90 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fa fa90 	bl	80013fc <lfs_tag_size>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8006ee2:	d90a      	bls.n	8006efa <lfs_fs_preporphans+0x5a>
 8006ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	dd06      	ble.n	8006efa <lfs_fs_preporphans+0x5a>
 8006eec:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <lfs_fs_preporphans+0x9c>)
 8006eee:	4a11      	ldr	r2, [pc, #68]	; (8006f34 <lfs_fs_preporphans+0x94>)
 8006ef0:	f241 21ec 	movw	r1, #4844	; 0x12ec
 8006ef4:	4810      	ldr	r0, [pc, #64]	; (8006f38 <lfs_fs_preporphans+0x98>)
 8006ef6:	f002 ffcb 	bl	8009e90 <__assert_func>
    lfs->gstate.tag += orphans;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f02:	441a      	add	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3330      	adds	r3, #48	; 0x30
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fa fad4 	bl	80014c2 <lfs_gstate_hasorphans>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006f1e:	ea44 0203 	orr.w	r2, r4, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd90      	pop	{r4, r7, pc}
 8006f30:	0800b92c 	.word	0x0800b92c
 8006f34:	0800bcb8 	.word	0x0800bcb8
 8006f38:	0800af94 	.word	0x0800af94
 8006f3c:	0800b964 	.word	0x0800b964

08006f40 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	4a17      	ldr	r2, [pc, #92]	; (8006fb0 <lfs_fs_prepmove+0x70>)
 8006f54:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006f56:	897b      	ldrh	r3, [r7, #10]
 8006f58:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006f5c:	428b      	cmp	r3, r1
 8006f5e:	d006      	beq.n	8006f6e <lfs_fs_prepmove+0x2e>
 8006f60:	897b      	ldrh	r3, [r7, #10]
 8006f62:	029b      	lsls	r3, r3, #10
 8006f64:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006f68:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006f6c:	e000      	b.n	8006f70 <lfs_fs_prepmove+0x30>
 8006f6e:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006f70:	431a      	orrs	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006f76:	897b      	ldrh	r3, [r7, #10]
 8006f78:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d002      	beq.n	8006f86 <lfs_fs_prepmove+0x46>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	e000      	b.n	8006f88 <lfs_fs_prepmove+0x48>
 8006f86:	2300      	movs	r3, #0
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006f8c:	897b      	ldrh	r3, [r7, #10]
 8006f8e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d003      	beq.n	8006f9e <lfs_fs_prepmove+0x5e>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	e000      	b.n	8006fa0 <lfs_fs_prepmove+0x60>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006fa4:	bf00      	nop
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	800003ff 	.word	0x800003ff

08006fb4 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b098      	sub	sp, #96	; 0x60
 8006fb8:	af02      	add	r7, sp, #8
 8006fba:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3330      	adds	r3, #48	; 0x30
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fa fab3 	bl	800152c <lfs_gstate_needssuperblock>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f083 0301 	eor.w	r3, r3, #1
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <lfs_fs_desuperblock+0x22>
        return 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e04e      	b.n	8007074 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1a      	ldr	r2, [r3, #32]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	4927      	ldr	r1, [pc, #156]	; (800707c <lfs_fs_desuperblock+0xc8>)
 8006fe0:	9101      	str	r1, [sp, #4]
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	f241 3205 	movw	r2, #4869	; 0x1305
 8006fea:	4925      	ldr	r1, [pc, #148]	; (8007080 <lfs_fs_desuperblock+0xcc>)
 8006fec:	4825      	ldr	r0, [pc, #148]	; (8007084 <lfs_fs_desuperblock+0xd0>)
 8006fee:	f003 fb75 	bl	800a6dc <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f103 0220 	add.w	r2, r3, #32
 8006ff8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fb ff92 	bl	8002f28 <lfs_dir_fetch>
 8007004:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8007006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <lfs_fs_desuperblock+0x5c>
        return err;
 800700c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800700e:	e031      	b.n	8007074 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7fa fc21 	bl	8001858 <lfs_fs_disk_version>
 8007016:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8007018:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800701e:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8007020:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 800702c:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 8007038:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 800703a:	f107 031c 	add.w	r3, r7, #28
 800703e:	4618      	mov	r0, r3
 8007040:	f7fa fb80 	bl	8001744 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007044:	4b10      	ldr	r3, [pc, #64]	; (8007088 <lfs_fs_desuperblock+0xd4>)
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	f107 031c 	add.w	r3, r7, #28
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	f107 0214 	add.w	r2, r7, #20
 8007052:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8007056:	2301      	movs	r3, #1
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7fd fd03 	bl	8004a64 <lfs_dir_commit>
 800705e:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8007060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <lfs_fs_desuperblock+0xb6>
        return err;
 8007066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007068:	e004      	b.n	8007074 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800706a:	2100      	movs	r1, #0
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff ff01 	bl	8006e74 <lfs_fs_prepsuperblock>
    return 0;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3758      	adds	r7, #88	; 0x58
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	0800b0a0 	.word	0x0800b0a0
 8007080:	0800af94 	.word	0x0800af94
 8007084:	0800b99c 	.word	0x0800b99c
 8007088:	20100018 	.word	0x20100018

0800708c <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800708c:	b5b0      	push	{r4, r5, r7, lr}
 800708e:	b094      	sub	sp, #80	; 0x50
 8007090:	af04      	add	r7, sp, #16
 8007092:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	333c      	adds	r3, #60	; 0x3c
 8007098:	4618      	mov	r0, r3
 800709a:	f7fa fa34 	bl	8001506 <lfs_gstate_hasmove>
 800709e:	4603      	mov	r3, r0
 80070a0:	f083 0301 	eor.w	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <lfs_fs_demove+0x22>
        return 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e05b      	b.n	8007166 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fa f98e 	bl	80013dc <lfs_tag_id>
 80070c0:	4603      	mov	r3, r0
 80070c2:	461a      	mov	r2, r3
 80070c4:	4b2a      	ldr	r3, [pc, #168]	; (8007170 <lfs_fs_demove+0xe4>)
 80070c6:	9302      	str	r3, [sp, #8]
 80070c8:	9201      	str	r2, [sp, #4]
 80070ca:	9400      	str	r4, [sp, #0]
 80070cc:	462b      	mov	r3, r5
 80070ce:	f241 322d 	movw	r2, #4909	; 0x132d
 80070d2:	4928      	ldr	r1, [pc, #160]	; (8007174 <lfs_fs_demove+0xe8>)
 80070d4:	4828      	ldr	r0, [pc, #160]	; (8007178 <lfs_fs_demove+0xec>)
 80070d6:	f003 fb01 	bl	800a6dc <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fa f952 	bl	8001388 <lfs_tag_type3>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d006      	beq.n	80070fe <lfs_fs_demove+0x72>
 80070f0:	4b22      	ldr	r3, [pc, #136]	; (800717c <lfs_fs_demove+0xf0>)
 80070f2:	4a23      	ldr	r2, [pc, #140]	; (8007180 <lfs_fs_demove+0xf4>)
 80070f4:	f241 3134 	movw	r1, #4916	; 0x1334
 80070f8:	481e      	ldr	r0, [pc, #120]	; (8007174 <lfs_fs_demove+0xe8>)
 80070fa:	f002 fec9 	bl	8009e90 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007104:	f107 0318 	add.w	r3, r7, #24
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fb ff0c 	bl	8002f28 <lfs_dir_fetch>
 8007110:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8007112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <lfs_fs_demove+0x90>
        return err;
 8007118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711a:	e024      	b.n	8007166 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007120:	4618      	mov	r0, r3
 8007122:	f7fa f95b 	bl	80013dc <lfs_tag_id>
 8007126:	4603      	mov	r3, r0
 8007128:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800712a:	2200      	movs	r2, #0
 800712c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ff05 	bl	8006f40 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8007136:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007138:	029b      	lsls	r3, r3, #10
 800713a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800713e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007142:	613b      	str	r3, [r7, #16]
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	f107 0210 	add.w	r2, r7, #16
 800714c:	f107 0118 	add.w	r1, r7, #24
 8007150:	2301      	movs	r3, #1
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fd fc86 	bl	8004a64 <lfs_dir_commit>
 8007158:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800715a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <lfs_fs_demove+0xd8>
        return err;
 8007160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007162:	e000      	b.n	8007166 <lfs_fs_demove+0xda>
    }

    return 0;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3740      	adds	r7, #64	; 0x40
 800716a:	46bd      	mov	sp, r7
 800716c:	bdb0      	pop	{r4, r5, r7, pc}
 800716e:	bf00      	nop
 8007170:	0800b0a0 	.word	0x0800b0a0
 8007174:	0800af94 	.word	0x0800af94
 8007178:	0800b9d0 	.word	0x0800b9d0
 800717c:	0800ba04 	.word	0x0800ba04
 8007180:	0800bccc 	.word	0x0800bccc

08007184 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8007184:	b5b0      	push	{r4, r5, r7, lr}
 8007186:	b0b2      	sub	sp, #200	; 0xc8
 8007188:	af04      	add	r7, sp, #16
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3330      	adds	r3, #48	; 0x30
 8007194:	4618      	mov	r0, r3
 8007196:	f7fa f994 	bl	80014c2 <lfs_gstate_hasorphans>
 800719a:	4603      	mov	r3, r0
 800719c:	f083 0301 	eor.w	r3, r3, #1
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <lfs_fs_deorphan+0x26>
        return 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	e187      	b.n	80074ba <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 80071b0:	e170      	b.n	8007494 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80071b2:	f107 0308 	add.w	r3, r7, #8
 80071b6:	2220      	movs	r2, #32
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f002 feee 	bl	8009f9c <memset>
 80071c0:	2301      	movs	r3, #1
 80071c2:	77fb      	strb	r3, [r7, #31]
 80071c4:	2301      	movs	r3, #1
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 80071c8:	2300      	movs	r3, #0
 80071ca:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 80071ce:	e149      	b.n	8007464 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80071d0:	f107 0308 	add.w	r3, r7, #8
 80071d4:	f103 0218 	add.w	r2, r3, #24
 80071d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fb fea2 	bl	8002f28 <lfs_dir_fetch>
 80071e4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 80071e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <lfs_fs_deorphan+0x72>
                return err;
 80071f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071f4:	e161      	b.n	80074ba <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 80071f6:	7ffb      	ldrb	r3, [r7, #31]
 80071f8:	f083 0301 	eor.w	r3, r3, #1
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 8126 	beq.w	8007450 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8007204:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007208:	f107 0308 	add.w	r3, r7, #8
 800720c:	3318      	adds	r3, #24
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff fdad 	bl	8006d70 <lfs_fs_parent>
 8007216:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800721a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800721e:	2b00      	cmp	r3, #0
 8007220:	da07      	bge.n	8007232 <lfs_fs_deorphan+0xae>
 8007222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007226:	f113 0f02 	cmn.w	r3, #2
 800722a:	d002      	beq.n	8007232 <lfs_fs_deorphan+0xae>
                    return tag;
 800722c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007230:	e143      	b.n	80074ba <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8007232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007236:	2b00      	cmp	r3, #0
 8007238:	f040 80ac 	bne.w	8007394 <lfs_fs_deorphan+0x210>
 800723c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007240:	f113 0f02 	cmn.w	r3, #2
 8007244:	f000 80a6 	beq.w	8007394 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8007248:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800724c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007250:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	4613      	mov	r3, r2
 8007258:	4a9a      	ldr	r2, [pc, #616]	; (80074c4 <lfs_fs_deorphan+0x340>)
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fa fd3a 	bl	8001cd4 <lfs_dir_get>
 8007260:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8007264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007268:	2b00      	cmp	r3, #0
 800726a:	da02      	bge.n	8007272 <lfs_fs_deorphan+0xee>
                        return state;
 800726c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007270:	e0eb      	b.n	800744a <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8007272:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007276:	4618      	mov	r0, r3
 8007278:	f7fa f811 	bl	800129e <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 800727c:	f107 0308 	add.w	r3, r7, #8
 8007280:	f103 0218 	add.w	r2, r3, #24
 8007284:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007288:	4611      	mov	r1, r2
 800728a:	4618      	mov	r0, r3
 800728c:	f7f9 ffda 	bl	8001244 <lfs_pair_issync>
 8007290:	4603      	mov	r3, r0
 8007292:	f083 0301 	eor.w	r3, r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d07b      	beq.n	8007394 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 800729c:	6a38      	ldr	r0, [r7, #32]
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80072a4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80072a8:	4c87      	ldr	r4, [pc, #540]	; (80074c8 <lfs_fs_deorphan+0x344>)
 80072aa:	9403      	str	r4, [sp, #12]
 80072ac:	9102      	str	r1, [sp, #8]
 80072ae:	9201      	str	r2, [sp, #4]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	4603      	mov	r3, r0
 80072b4:	f241 327a 	movw	r2, #4986	; 0x137a
 80072b8:	4984      	ldr	r1, [pc, #528]	; (80074cc <lfs_fs_deorphan+0x348>)
 80072ba:	4885      	ldr	r0, [pc, #532]	; (80074d0 <lfs_fs_deorphan+0x34c>)
 80072bc:	f003 fa0e 	bl	800a6dc <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80072c0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80072c4:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3330      	adds	r3, #48	; 0x30
 80072cc:	f107 0208 	add.w	r2, r7, #8
 80072d0:	4611      	mov	r1, r2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fa f93e 	bl	8001554 <lfs_gstate_hasmovehere>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01c      	beq.n	8007318 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fa f87a 	bl	80013dc <lfs_tag_id>
 80072e8:	4603      	mov	r3, r0
 80072ea:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80072f6:	4874      	ldr	r0, [pc, #464]	; (80074c8 <lfs_fs_deorphan+0x344>)
 80072f8:	9002      	str	r0, [sp, #8]
 80072fa:	9201      	str	r2, [sp, #4]
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	460b      	mov	r3, r1
 8007300:	f241 3285 	movw	r2, #4997	; 0x1385
 8007304:	4971      	ldr	r1, [pc, #452]	; (80074cc <lfs_fs_deorphan+0x348>)
 8007306:	4873      	ldr	r0, [pc, #460]	; (80074d4 <lfs_fs_deorphan+0x350>)
 8007308:	f003 f9e8 	bl	800a6dc <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800730c:	2200      	movs	r2, #0
 800730e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fe14 	bl	8006f40 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8007318:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800731c:	4618      	mov	r0, r3
 800731e:	f7f9 ffd8 	bl	80012d2 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8007322:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8007326:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800732a:	4293      	cmp	r3, r2
 800732c:	d007      	beq.n	800733e <lfs_fs_deorphan+0x1ba>
 800732e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8007332:	029b      	lsls	r3, r3, #10
 8007334:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007338:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800733c:	e000      	b.n	8007340 <lfs_fs_deorphan+0x1bc>
 800733e:	2300      	movs	r3, #0
 8007340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007344:	2300      	movs	r3, #0
 8007346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800734a:	4b63      	ldr	r3, [pc, #396]	; (80074d8 <lfs_fs_deorphan+0x354>)
 800734c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007350:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007354:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007358:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800735c:	f107 0108 	add.w	r1, r7, #8
 8007360:	2302      	movs	r3, #2
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fd f884 	bl	8004470 <lfs_dir_orphaningcommit>
 8007368:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800736c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007370:	4618      	mov	r0, r3
 8007372:	f7f9 ff94 	bl	800129e <lfs_pair_fromle32>
                        if (state < 0) {
 8007376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800737a:	2b00      	cmp	r3, #0
 800737c:	da02      	bge.n	8007384 <lfs_fs_deorphan+0x200>
                            return state;
 800737e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8007382:	e062      	b.n	800744a <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8007384:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007388:	2b03      	cmp	r3, #3
 800738a:	d16b      	bne.n	8007464 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 800738c:	2301      	movs	r3, #1
 800738e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8007392:	e067      	b.n	8007464 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8007394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007398:	2b01      	cmp	r3, #1
 800739a:	d159      	bne.n	8007450 <lfs_fs_deorphan+0x2cc>
 800739c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073a0:	f113 0f02 	cmn.w	r3, #2
 80073a4:	d154      	bne.n	8007450 <lfs_fs_deorphan+0x2cc>
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d051      	beq.n	8007450 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80073ac:	6a3a      	ldr	r2, [r7, #32]
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	4945      	ldr	r1, [pc, #276]	; (80074c8 <lfs_fs_deorphan+0x344>)
 80073b2:	9101      	str	r1, [sp, #4]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4613      	mov	r3, r2
 80073b8:	f241 32a5 	movw	r2, #5029	; 0x13a5
 80073bc:	4943      	ldr	r1, [pc, #268]	; (80074cc <lfs_fs_deorphan+0x348>)
 80073be:	4847      	ldr	r0, [pc, #284]	; (80074dc <lfs_fs_deorphan+0x358>)
 80073c0:	f003 f98c 	bl	800a6dc <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80073ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7fb fdc5 	bl	8002f60 <lfs_dir_getgstate>
 80073d6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 80073da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <lfs_fs_deorphan+0x264>
                        return err;
 80073e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073e6:	e030      	b.n	800744a <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 80073e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073ec:	3318      	adds	r3, #24
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7f9 ff6f 	bl	80012d2 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80073f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073f8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80073fc:	051a      	lsls	r2, r3, #20
 80073fe:	4b38      	ldr	r3, [pc, #224]	; (80074e0 <lfs_fs_deorphan+0x35c>)
 8007400:	4313      	orrs	r3, r2
 8007402:	673b      	str	r3, [r7, #112]	; 0x70
 8007404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007408:	3318      	adds	r3, #24
 800740a:	677b      	str	r3, [r7, #116]	; 0x74
 800740c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	2301      	movs	r3, #1
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fd f82a 	bl	8004470 <lfs_dir_orphaningcommit>
 800741c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8007420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007424:	3318      	adds	r3, #24
 8007426:	4618      	mov	r0, r3
 8007428:	f7f9 ff39 	bl	800129e <lfs_pair_fromle32>
                    if (state < 0) {
 800742c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007430:	2b00      	cmp	r3, #0
 8007432:	da02      	bge.n	800743a <lfs_fs_deorphan+0x2b6>
                        return state;
 8007434:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 8007438:	e03f      	b.n	80074ba <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800743a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800743e:	2b03      	cmp	r3, #3
 8007440:	d104      	bne.n	800744c <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8007448:	e00c      	b.n	8007464 <lfs_fs_deorphan+0x2e0>
                return err;
 800744a:	e036      	b.n	80074ba <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 800744c:	bf00      	nop
 800744e:	e009      	b.n	8007464 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 8007450:	f107 0408 	add.w	r4, r7, #8
 8007454:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8007458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800745a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800745c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8007464:	f107 0308 	add.w	r3, r7, #8
 8007468:	3318      	adds	r3, #24
 800746a:	4618      	mov	r0, r3
 800746c:	f7f9 fea5 	bl	80011ba <lfs_pair_isnull>
 8007470:	4603      	mov	r3, r0
 8007472:	f083 0301 	eor.w	r3, r3, #1
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	f47f aea9 	bne.w	80071d0 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 800747e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <lfs_fs_deorphan+0x306>
 8007486:	2300      	movs	r3, #0
 8007488:	e002      	b.n	8007490 <lfs_fs_deorphan+0x30c>
 800748a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800748e:	3301      	adds	r3, #1
 8007490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8007494:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007498:	2b01      	cmp	r3, #1
 800749a:	f77f ae8a 	ble.w	80071b2 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3330      	adds	r3, #48	; 0x30
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fa f820 	bl	80014e8 <lfs_gstate_getorphans>
 80074a8:	4603      	mov	r3, r0
 80074aa:	425b      	negs	r3, r3
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	b25b      	sxtb	r3, r3
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff fcf4 	bl	8006ea0 <lfs_fs_preporphans>
 80074b8:	4603      	mov	r3, r0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	37b8      	adds	r7, #184	; 0xb8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bdb0      	pop	{r4, r5, r7, pc}
 80074c2:	bf00      	nop
 80074c4:	7ffffc00 	.word	0x7ffffc00
 80074c8:	0800b0a0 	.word	0x0800b0a0
 80074cc:	0800af94 	.word	0x0800af94
 80074d0:	0800ba38 	.word	0x0800ba38
 80074d4:	0800ba7c 	.word	0x0800ba7c
 80074d8:	600ffc08 	.word	0x600ffc08
 80074dc:	0800bac4 	.word	0x0800bac4
 80074e0:	000ffc08 	.word	0x000ffc08

080074e4 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff fd61 	bl	8006fb4 <lfs_fs_desuperblock>
 80074f2:	60f8      	str	r0, [r7, #12]
    if (err) {
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <lfs_fs_forceconsistency+0x1a>
        return err;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	e013      	b.n	8007526 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff fdc4 	bl	800708c <lfs_fs_demove>
 8007504:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <lfs_fs_forceconsistency+0x2c>
        return err;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	e00a      	b.n	8007526 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8007510:	2101      	movs	r1, #1
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7ff fe36 	bl	8007184 <lfs_fs_deorphan>
 8007518:	60f8      	str	r0, [r7, #12]
    if (err) {
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <lfs_fs_forceconsistency+0x40>
        return err;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	e000      	b.n	8007526 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	601a      	str	r2, [r3, #0]
    return 0;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8007560:	f107 0208 	add.w	r2, r7, #8
 8007564:	2300      	movs	r3, #0
 8007566:	4907      	ldr	r1, [pc, #28]	; (8007584 <lfs_fs_size_+0x30>)
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff f9fd 	bl	8006968 <lfs_fs_traverse_>
 800756e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <lfs_fs_size_+0x26>
        return err;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	e000      	b.n	800757c <lfs_fs_size_+0x28>
    }

    return size;
 800757a:	68bb      	ldr	r3, [r7, #8]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	0800752f 	.word	0x0800752f

08007588 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <lfs_format+0x18>
        return err;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	e005      	b.n	80075ac <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fe ff02 	bl	80063ac <lfs_format_>
 80075a8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80075aa:	68fb      	ldr	r3, [r7, #12]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <lfs_mount+0x18>
        return err;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	e005      	b.n	80075d8 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fe ff9e 	bl	8006510 <lfs_mount_>
 80075d4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80075d6:	68fb      	ldr	r3, [r7, #12]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]
    if (err) {
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <lfs_unmount+0x16>
        return err;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	e004      	b.n	8007600 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_unmount_(lfs);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff f9aa 	bl	8006950 <lfs_unmount_>
 80075fc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80075fe:	68fb      	ldr	r3, [r7, #12]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007616:	2300      	movs	r3, #0
 8007618:	617b      	str	r3, [r7, #20]
    if (err) {
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <lfs_file_open+0x1c>
        return err;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	e01a      	b.n	800765a <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	4618      	mov	r0, r3
 800762c:	f7fa f8c2 	bl	80017b4 <lfs_mlist_isopen>
 8007630:	4603      	mov	r3, r0
 8007632:	f083 0301 	eor.w	r3, r3, #1
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d106      	bne.n	800764a <lfs_file_open+0x42>
 800763c:	4b09      	ldr	r3, [pc, #36]	; (8007664 <lfs_file_open+0x5c>)
 800763e:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <lfs_file_open+0x60>)
 8007640:	f241 71b6 	movw	r1, #6070	; 0x17b6
 8007644:	4809      	ldr	r0, [pc, #36]	; (800766c <lfs_file_open+0x64>)
 8007646:	f002 fc23 	bl	8009e90 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7fd fe25 	bl	80052a0 <lfs_file_open_>
 8007656:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007658:	697b      	ldr	r3, [r7, #20]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	0800bb14 	.word	0x0800bb14
 8007668:	0800bcdc 	.word	0x0800bcdc
 800766c:	0800af94 	.word	0x0800af94

08007670 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <lfs_file_close+0x18>
        return err;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	e015      	b.n	80076b4 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	4618      	mov	r0, r3
 8007690:	f7fa f890 	bl	80017b4 <lfs_mlist_isopen>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <lfs_file_close+0x38>
 800769a:	4b08      	ldr	r3, [pc, #32]	; (80076bc <lfs_file_close+0x4c>)
 800769c:	4a08      	ldr	r2, [pc, #32]	; (80076c0 <lfs_file_close+0x50>)
 800769e:	f241 71da 	movw	r1, #6106	; 0x17da
 80076a2:	4808      	ldr	r0, [pc, #32]	; (80076c4 <lfs_file_close+0x54>)
 80076a4:	f002 fbf4 	bl	8009e90 <__assert_func>

    err = lfs_file_close_(lfs, file);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7fd fe10 	bl	80052d0 <lfs_file_close_>
 80076b0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80076b2:	68fb      	ldr	r3, [r7, #12]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	0800bb4c 	.word	0x0800bb4c
 80076c0:	0800bcec 	.word	0x0800bcec
 80076c4:	0800af94 	.word	0x0800af94

080076c8 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
    if (err) {
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <lfs_file_read+0x1c>
        return err;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	e017      	b.n	8007714 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	68b9      	ldr	r1, [r7, #8]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fa f862 	bl	80017b4 <lfs_mlist_isopen>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <lfs_file_read+0x3c>
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <lfs_file_read+0x54>)
 80076f8:	4a09      	ldr	r2, [pc, #36]	; (8007720 <lfs_file_read+0x58>)
 80076fa:	f241 71fc 	movw	r1, #6140	; 0x17fc
 80076fe:	4809      	ldr	r0, [pc, #36]	; (8007724 <lfs_file_read+0x5c>)
 8007700:	f002 fbc6 	bl	8009e90 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7fe f940 	bl	8005990 <lfs_file_read_>
 8007710:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007712:	693b      	ldr	r3, [r7, #16]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	0800bb4c 	.word	0x0800bb4c
 8007720:	0800bcfc 	.word	0x0800bcfc
 8007724:	0800af94 	.word	0x0800af94

08007728 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
    if (err) {
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <lfs_file_write+0x1c>
        return err;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	e017      	b.n	8007774 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	4618      	mov	r0, r3
 800774c:	f7fa f832 	bl	80017b4 <lfs_mlist_isopen>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d106      	bne.n	8007764 <lfs_file_write+0x3c>
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <lfs_file_write+0x54>)
 8007758:	4a09      	ldr	r2, [pc, #36]	; (8007780 <lfs_file_write+0x58>)
 800775a:	f641 010e 	movw	r1, #6158	; 0x180e
 800775e:	4809      	ldr	r0, [pc, #36]	; (8007784 <lfs_file_write+0x5c>)
 8007760:	f002 fb96 	bl	8009e90 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7fe fa56 	bl	8005c1c <lfs_file_write_>
 8007770:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007772:	693b      	ldr	r3, [r7, #16]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	0800bb4c 	.word	0x0800bb4c
 8007780:	0800bd0c 	.word	0x0800bd0c
 8007784:	0800af94 	.word	0x0800af94

08007788 <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <lfs_file_rewind+0x18>
        return err;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e005      	b.n	80077ac <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rewind_(lfs, file);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fe fb47 	bl	8005e36 <lfs_file_rewind_>
 80077a8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80077aa:	68fb      	ldr	r3, [r7, #12]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80077c4:	2300      	movs	r3, #0
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	e024      	b.n	8007814 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	091a      	lsrs	r2, r3, #4
 80077ce:	6939      	ldr	r1, [r7, #16]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	440b      	add	r3, r1
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	4619      	mov	r1, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	404b      	eors	r3, r1
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	4912      	ldr	r1, [pc, #72]	; (800782c <lfs_crc+0x78>)
 80077e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077e6:	4053      	eors	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	091a      	lsrs	r2, r3, #4
 80077ee:	6939      	ldr	r1, [r7, #16]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	440b      	add	r3, r1
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	091b      	lsrs	r3, r3, #4
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	4619      	mov	r1, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	404b      	eors	r3, r1
 8007800:	f003 030f 	and.w	r3, r3, #15
 8007804:	4909      	ldr	r1, [pc, #36]	; (800782c <lfs_crc+0x78>)
 8007806:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800780a:	4053      	eors	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	3301      	adds	r3, #1
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d3d6      	bcc.n	80077ca <lfs_crc+0x16>
    }

    return crc;
 800781c:	68fb      	ldr	r3, [r7, #12]
}
 800781e:	4618      	mov	r0, r3
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	0800bd1c 	.word	0x0800bd1c

08007830 <block_device_read>:
static void MX_SPI3_Init(void);
static void MX_UART7_Init(void);
/* USER CODE BEGIN PFP */
int block_device_read(const struct lfs_config *c, lfs_block_t block,
	lfs_off_t off, void *buffer, lfs_size_t size)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
	Bulk_Read_4B(&hspi3, (block * c->block_size + off), (uint8_t *)buffer,size);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	fb02 f203 	mul.w	r2, r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	18d1      	adds	r1, r2, r3
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	b29b      	uxth	r3, r3
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	4804      	ldr	r0, [pc, #16]	; (8007864 <block_device_read+0x34>)
 8007854:	f7f8 feb4 	bl	80005c0 <Bulk_Read_4B>
	return 0;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	200000dc 	.word	0x200000dc

08007868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// mount the filesystem
	    int err = lfs_mount(&lfs, &cfg);
 800786e:	4921      	ldr	r1, [pc, #132]	; (80078f4 <main+0x8c>)
 8007870:	4821      	ldr	r0, [pc, #132]	; (80078f8 <main+0x90>)
 8007872:	f7ff fe9f 	bl	80075b4 <lfs_mount>
 8007876:	6078      	str	r0, [r7, #4]

	    // reformat if we can't mount the filesystem
	    // this should only happen on the first boot
	    if (err) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <main+0x26>
	        lfs_format(&lfs, &cfg);
 800787e:	491d      	ldr	r1, [pc, #116]	; (80078f4 <main+0x8c>)
 8007880:	481d      	ldr	r0, [pc, #116]	; (80078f8 <main+0x90>)
 8007882:	f7ff fe81 	bl	8007588 <lfs_format>
	        lfs_mount(&lfs, &cfg);
 8007886:	491b      	ldr	r1, [pc, #108]	; (80078f4 <main+0x8c>)
 8007888:	481b      	ldr	r0, [pc, #108]	; (80078f8 <main+0x90>)
 800788a:	f7ff fe93 	bl	80075b4 <lfs_mount>
	    }

	    // read current count
	    uint32_t boot_count = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	603b      	str	r3, [r7, #0]
	    lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 8007892:	f240 1303 	movw	r3, #259	; 0x103
 8007896:	4a19      	ldr	r2, [pc, #100]	; (80078fc <main+0x94>)
 8007898:	4919      	ldr	r1, [pc, #100]	; (8007900 <main+0x98>)
 800789a:	4817      	ldr	r0, [pc, #92]	; (80078f8 <main+0x90>)
 800789c:	f7ff feb4 	bl	8007608 <lfs_file_open>
	    lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 80078a0:	463a      	mov	r2, r7
 80078a2:	2304      	movs	r3, #4
 80078a4:	4916      	ldr	r1, [pc, #88]	; (8007900 <main+0x98>)
 80078a6:	4814      	ldr	r0, [pc, #80]	; (80078f8 <main+0x90>)
 80078a8:	f7ff ff0e 	bl	80076c8 <lfs_file_read>

	    // update boot count
	    boot_count += 1;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	3301      	adds	r3, #1
 80078b0:	603b      	str	r3, [r7, #0]
	    lfs_file_rewind(&lfs, &file);
 80078b2:	4913      	ldr	r1, [pc, #76]	; (8007900 <main+0x98>)
 80078b4:	4810      	ldr	r0, [pc, #64]	; (80078f8 <main+0x90>)
 80078b6:	f7ff ff67 	bl	8007788 <lfs_file_rewind>
	    lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 80078ba:	463a      	mov	r2, r7
 80078bc:	2304      	movs	r3, #4
 80078be:	4910      	ldr	r1, [pc, #64]	; (8007900 <main+0x98>)
 80078c0:	480d      	ldr	r0, [pc, #52]	; (80078f8 <main+0x90>)
 80078c2:	f7ff ff31 	bl	8007728 <lfs_file_write>

	    // remember the storage is not updated until the file is closed successfully
	    lfs_file_close(&lfs, &file);
 80078c6:	490e      	ldr	r1, [pc, #56]	; (8007900 <main+0x98>)
 80078c8:	480b      	ldr	r0, [pc, #44]	; (80078f8 <main+0x90>)
 80078ca:	f7ff fed1 	bl	8007670 <lfs_file_close>

	    // release any resources we were using
	    lfs_unmount(&lfs);
 80078ce:	480a      	ldr	r0, [pc, #40]	; (80078f8 <main+0x90>)
 80078d0:	f7ff fe86 	bl	80075e0 <lfs_unmount>

	    // print the boot count
	    printf("boot_count: %d\n", boot_count);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	4619      	mov	r1, r3
 80078d8:	480a      	ldr	r0, [pc, #40]	; (8007904 <main+0x9c>)
 80078da:	f002 feff 	bl	800a6dc <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80078de:	f000 fb3f 	bl	8007f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80078e2:	f000 f811 	bl	8007908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80078e6:	f000 f8df 	bl	8007aa8 <MX_GPIO_Init>
  MX_SPI3_Init();
 80078ea:	f000 f87d 	bl	80079e8 <MX_SPI3_Init>
  MX_UART7_Init();
 80078ee:	f000 f8b1 	bl	8007a54 <MX_UART7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80078f2:	e7fe      	b.n	80078f2 <main+0x8a>
 80078f4:	0800bd5c 	.word	0x0800bd5c
 80078f8:	20000188 	.word	0x20000188
 80078fc:	0800bbbc 	.word	0x0800bbbc
 8007900:	20000134 	.word	0x20000134
 8007904:	0800bbc8 	.word	0x0800bbc8

08007908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b094      	sub	sp, #80	; 0x50
 800790c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800790e:	f107 0320 	add.w	r3, r7, #32
 8007912:	2230      	movs	r2, #48	; 0x30
 8007914:	2100      	movs	r1, #0
 8007916:	4618      	mov	r0, r3
 8007918:	f002 fb40 	bl	8009f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800791c:	f107 030c 	add.w	r3, r7, #12
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	605a      	str	r2, [r3, #4]
 8007926:	609a      	str	r2, [r3, #8]
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800792c:	2300      	movs	r3, #0
 800792e:	60bb      	str	r3, [r7, #8]
 8007930:	4b2b      	ldr	r3, [pc, #172]	; (80079e0 <SystemClock_Config+0xd8>)
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	4a2a      	ldr	r2, [pc, #168]	; (80079e0 <SystemClock_Config+0xd8>)
 8007936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800793a:	6413      	str	r3, [r2, #64]	; 0x40
 800793c:	4b28      	ldr	r3, [pc, #160]	; (80079e0 <SystemClock_Config+0xd8>)
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007944:	60bb      	str	r3, [r7, #8]
 8007946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007948:	2300      	movs	r3, #0
 800794a:	607b      	str	r3, [r7, #4]
 800794c:	4b25      	ldr	r3, [pc, #148]	; (80079e4 <SystemClock_Config+0xdc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a24      	ldr	r2, [pc, #144]	; (80079e4 <SystemClock_Config+0xdc>)
 8007952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	4b22      	ldr	r3, [pc, #136]	; (80079e4 <SystemClock_Config+0xdc>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007960:	607b      	str	r3, [r7, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007964:	2301      	movs	r3, #1
 8007966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800796e:	2302      	movs	r3, #2
 8007970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8007978:	230f      	movs	r3, #15
 800797a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800797c:	23d8      	movs	r3, #216	; 0xd8
 800797e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007980:	2302      	movs	r3, #2
 8007982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007984:	2304      	movs	r3, #4
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007988:	f107 0320 	add.w	r3, r7, #32
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fe79 	bl	8008684 <HAL_RCC_OscConfig>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007998:	f000 f8d8 	bl	8007b4c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800799c:	f000 fe22 	bl	80085e4 <HAL_PWREx_EnableOverDrive>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80079a6:	f000 f8d1 	bl	8007b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80079aa:	230f      	movs	r3, #15
 80079ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80079ae:	2302      	movs	r3, #2
 80079b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80079b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80079ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80079bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80079c2:	f107 030c 	add.w	r3, r7, #12
 80079c6:	2105      	movs	r1, #5
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 f8d3 	bl	8008b74 <HAL_RCC_ClockConfig>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80079d4:	f000 f8ba 	bl	8007b4c <Error_Handler>
  }
}
 80079d8:	bf00      	nop
 80079da:	3750      	adds	r7, #80	; 0x50
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40023800 	.word	0x40023800
 80079e4:	40007000 	.word	0x40007000

080079e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80079ec:	4b17      	ldr	r3, [pc, #92]	; (8007a4c <MX_SPI3_Init+0x64>)
 80079ee:	4a18      	ldr	r2, [pc, #96]	; (8007a50 <MX_SPI3_Init+0x68>)
 80079f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80079f2:	4b16      	ldr	r3, [pc, #88]	; (8007a4c <MX_SPI3_Init+0x64>)
 80079f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80079f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80079fa:	4b14      	ldr	r3, [pc, #80]	; (8007a4c <MX_SPI3_Init+0x64>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007a00:	4b12      	ldr	r3, [pc, #72]	; (8007a4c <MX_SPI3_Init+0x64>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a06:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <MX_SPI3_Init+0x64>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007a0c:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <MX_SPI3_Init+0x64>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007a12:	4b0e      	ldr	r3, [pc, #56]	; (8007a4c <MX_SPI3_Init+0x64>)
 8007a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a18:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a1a:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <MX_SPI3_Init+0x64>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007a20:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <MX_SPI3_Init+0x64>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007a26:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <MX_SPI3_Init+0x64>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a2c:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <MX_SPI3_Init+0x64>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8007a32:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <MX_SPI3_Init+0x64>)
 8007a34:	220a      	movs	r2, #10
 8007a36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007a38:	4804      	ldr	r0, [pc, #16]	; (8007a4c <MX_SPI3_Init+0x64>)
 8007a3a:	f001 fa6b 	bl	8008f14 <HAL_SPI_Init>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007a44:	f000 f882 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007a48:	bf00      	nop
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	200000dc 	.word	0x200000dc
 8007a50:	40003c00 	.word	0x40003c00

08007a54 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8007a58:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <MX_UART7_Init+0x4c>)
 8007a5a:	4a12      	ldr	r2, [pc, #72]	; (8007aa4 <MX_UART7_Init+0x50>)
 8007a5c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8007a5e:	4b10      	ldr	r3, [pc, #64]	; (8007aa0 <MX_UART7_Init+0x4c>)
 8007a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a64:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8007a66:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <MX_UART7_Init+0x4c>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8007a6c:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <MX_UART7_Init+0x4c>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8007a72:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <MX_UART7_Init+0x4c>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8007a78:	4b09      	ldr	r3, [pc, #36]	; (8007aa0 <MX_UART7_Init+0x4c>)
 8007a7a:	220c      	movs	r2, #12
 8007a7c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a7e:	4b08      	ldr	r3, [pc, #32]	; (8007aa0 <MX_UART7_Init+0x4c>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a84:	4b06      	ldr	r3, [pc, #24]	; (8007aa0 <MX_UART7_Init+0x4c>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8007a8a:	4805      	ldr	r0, [pc, #20]	; (8007aa0 <MX_UART7_Init+0x4c>)
 8007a8c:	f001 ffea 	bl	8009a64 <HAL_UART_Init>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8007a96:	f000 f859 	bl	8007b4c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8007a9a:	bf00      	nop
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000098 	.word	0x20000098
 8007aa4:	40007800 	.word	0x40007800

08007aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aae:	2300      	movs	r3, #0
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	4b25      	ldr	r3, [pc, #148]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab6:	4a24      	ldr	r2, [pc, #144]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007ab8:	f043 0302 	orr.w	r3, r3, #2
 8007abc:	6313      	str	r3, [r2, #48]	; 0x30
 8007abe:	4b22      	ldr	r3, [pc, #136]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	4b1e      	ldr	r3, [pc, #120]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	4a1d      	ldr	r2, [pc, #116]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007ad4:	f043 0304 	orr.w	r3, r3, #4
 8007ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8007ada:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ade:	f003 0304 	and.w	r3, r3, #4
 8007ae2:	613b      	str	r3, [r7, #16]
 8007ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	4b17      	ldr	r3, [pc, #92]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	4a16      	ldr	r2, [pc, #88]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007af0:	f043 0301 	orr.w	r3, r3, #1
 8007af4:	6313      	str	r3, [r2, #48]	; 0x30
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007b02:	2300      	movs	r3, #0
 8007b04:	60bb      	str	r3, [r7, #8]
 8007b06:	4b10      	ldr	r3, [pc, #64]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0a:	4a0f      	ldr	r2, [pc, #60]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b10:	6313      	str	r3, [r2, #48]	; 0x30
 8007b12:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	60bb      	str	r3, [r7, #8]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007b1e:	2300      	movs	r3, #0
 8007b20:	607b      	str	r3, [r7, #4]
 8007b22:	4b09      	ldr	r3, [pc, #36]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b26:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007b28:	f043 0310 	orr.w	r3, r3, #16
 8007b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b2e:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <MX_GPIO_Init+0xa0>)
 8007b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]

}
 8007b3a:	bf00      	nop
 8007b3c:	371c      	adds	r7, #28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	40023800 	.word	0x40023800

08007b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007b50:	b672      	cpsid	i
}
 8007b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007b54:	e7fe      	b.n	8007b54 <Error_Handler+0x8>
	...

08007b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b5e:	2300      	movs	r3, #0
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <HAL_MspInit+0x4c>)
 8007b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b66:	4a0f      	ldr	r2, [pc, #60]	; (8007ba4 <HAL_MspInit+0x4c>)
 8007b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <HAL_MspInit+0x4c>)
 8007b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b76:	607b      	str	r3, [r7, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	603b      	str	r3, [r7, #0]
 8007b7e:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <HAL_MspInit+0x4c>)
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	4a08      	ldr	r2, [pc, #32]	; (8007ba4 <HAL_MspInit+0x4c>)
 8007b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b88:	6413      	str	r3, [r2, #64]	; 0x40
 8007b8a:	4b06      	ldr	r3, [pc, #24]	; (8007ba4 <HAL_MspInit+0x4c>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	40023800 	.word	0x40023800

08007ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	; 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bb0:	f107 0314 	add.w	r3, r7, #20
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	609a      	str	r2, [r3, #8]
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a28      	ldr	r2, [pc, #160]	; (8007c68 <HAL_SPI_MspInit+0xc0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d14a      	bne.n	8007c60 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	4b27      	ldr	r3, [pc, #156]	; (8007c6c <HAL_SPI_MspInit+0xc4>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <HAL_SPI_MspInit+0xc4>)
 8007bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8007bda:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <HAL_SPI_MspInit+0xc4>)
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <HAL_SPI_MspInit+0xc4>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	4a1f      	ldr	r2, [pc, #124]	; (8007c6c <HAL_SPI_MspInit+0xc4>)
 8007bf0:	f043 0302 	orr.w	r3, r3, #2
 8007bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8007bf6:	4b1d      	ldr	r3, [pc, #116]	; (8007c6c <HAL_SPI_MspInit+0xc4>)
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c02:	2300      	movs	r3, #0
 8007c04:	60bb      	str	r3, [r7, #8]
 8007c06:	4b19      	ldr	r3, [pc, #100]	; (8007c6c <HAL_SPI_MspInit+0xc4>)
 8007c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0a:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <HAL_SPI_MspInit+0xc4>)
 8007c0c:	f043 0304 	orr.w	r3, r3, #4
 8007c10:	6313      	str	r3, [r2, #48]	; 0x30
 8007c12:	4b16      	ldr	r3, [pc, #88]	; (8007c6c <HAL_SPI_MspInit+0xc4>)
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	60bb      	str	r3, [r7, #8]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB4     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8007c1e:	2318      	movs	r3, #24
 8007c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c22:	2302      	movs	r3, #2
 8007c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007c2e:	2306      	movs	r3, #6
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c32:	f107 0314 	add.w	r3, r7, #20
 8007c36:	4619      	mov	r1, r3
 8007c38:	480d      	ldr	r0, [pc, #52]	; (8007c70 <HAL_SPI_MspInit+0xc8>)
 8007c3a:	f000 fb0d 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c44:	2302      	movs	r3, #2
 8007c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007c50:	2306      	movs	r3, #6
 8007c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c54:	f107 0314 	add.w	r3, r7, #20
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4806      	ldr	r0, [pc, #24]	; (8007c74 <HAL_SPI_MspInit+0xcc>)
 8007c5c:	f000 fafc 	bl	8008258 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007c60:	bf00      	nop
 8007c62:	3728      	adds	r7, #40	; 0x28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	40003c00 	.word	0x40003c00
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	40020400 	.word	0x40020400
 8007c74:	40020800 	.word	0x40020800

08007c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c80:	f107 0314 	add.w	r3, r7, #20
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	605a      	str	r2, [r3, #4]
 8007c8a:	609a      	str	r2, [r3, #8]
 8007c8c:	60da      	str	r2, [r3, #12]
 8007c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a19      	ldr	r2, [pc, #100]	; (8007cfc <HAL_UART_MspInit+0x84>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d12c      	bne.n	8007cf4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	613b      	str	r3, [r7, #16]
 8007c9e:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <HAL_UART_MspInit+0x88>)
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <HAL_UART_MspInit+0x88>)
 8007ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8007caa:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <HAL_UART_MspInit+0x88>)
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007cb2:	613b      	str	r3, [r7, #16]
 8007cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <HAL_UART_MspInit+0x88>)
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	4a10      	ldr	r2, [pc, #64]	; (8007d00 <HAL_UART_MspInit+0x88>)
 8007cc0:	f043 0310 	orr.w	r3, r3, #16
 8007cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8007cc6:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <HAL_UART_MspInit+0x88>)
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8007cd2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd8:	2302      	movs	r3, #2
 8007cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007ce8:	f107 0314 	add.w	r3, r7, #20
 8007cec:	4619      	mov	r1, r3
 8007cee:	4805      	ldr	r0, [pc, #20]	; (8007d04 <HAL_UART_MspInit+0x8c>)
 8007cf0:	f000 fab2 	bl	8008258 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8007cf4:	bf00      	nop
 8007cf6:	3728      	adds	r7, #40	; 0x28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40007800 	.word	0x40007800
 8007d00:	40023800 	.word	0x40023800
 8007d04:	40021000 	.word	0x40021000

08007d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007d0c:	e7fe      	b.n	8007d0c <NMI_Handler+0x4>

08007d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d12:	e7fe      	b.n	8007d12 <HardFault_Handler+0x4>

08007d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d18:	e7fe      	b.n	8007d18 <MemManage_Handler+0x4>

08007d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d1e:	e7fe      	b.n	8007d1e <BusFault_Handler+0x4>

08007d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d24:	e7fe      	b.n	8007d24 <UsageFault_Handler+0x4>

08007d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d26:	b480      	push	{r7}
 8007d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d2a:	bf00      	nop
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d34:	b480      	push	{r7}
 8007d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d38:	bf00      	nop
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d42:	b480      	push	{r7}
 8007d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d46:	bf00      	nop
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d54:	f000 f956 	bl	8008004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d58:	bf00      	nop
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
	return 1;
 8007d60:	2301      	movs	r3, #1
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <_kill>:

int _kill(int pid, int sig)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007d76:	f002 f8a9 	bl	8009ecc <__errno>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2216      	movs	r2, #22
 8007d7e:	601a      	str	r2, [r3, #0]
	return -1;
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <_exit>:

void _exit (int status)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007d94:	f04f 31ff 	mov.w	r1, #4294967295
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff ffe7 	bl	8007d6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8007d9e:	e7fe      	b.n	8007d9e <_exit+0x12>

08007da0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]
 8007db0:	e00a      	b.n	8007dc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007db2:	f3af 8000 	nop.w
 8007db6:	4601      	mov	r1, r0
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	60ba      	str	r2, [r7, #8]
 8007dbe:	b2ca      	uxtb	r2, r1
 8007dc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	dbf0      	blt.n	8007db2 <_read+0x12>
	}

return len;
 8007dd0:	687b      	ldr	r3, [r7, #4]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b086      	sub	sp, #24
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007de6:	2300      	movs	r3, #0
 8007de8:	617b      	str	r3, [r7, #20]
 8007dea:	e009      	b.n	8007e00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	60ba      	str	r2, [r7, #8]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	dbf1      	blt.n	8007dec <_write+0x12>
	}
	return len;
 8007e08:	687b      	ldr	r3, [r7, #4]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <_close>:

int _close(int file)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
	return -1;
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e3a:	605a      	str	r2, [r3, #4]
	return 0;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <_isatty>:

int _isatty(int file)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
	return 1;
 8007e52:	2301      	movs	r3, #1
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
	return 0;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007e84:	4a14      	ldr	r2, [pc, #80]	; (8007ed8 <_sbrk+0x5c>)
 8007e86:	4b15      	ldr	r3, [pc, #84]	; (8007edc <_sbrk+0x60>)
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007e90:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <_sbrk+0x64>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007e98:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <_sbrk+0x64>)
 8007e9a:	4a12      	ldr	r2, [pc, #72]	; (8007ee4 <_sbrk+0x68>)
 8007e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007e9e:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <_sbrk+0x64>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d207      	bcs.n	8007ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007eac:	f002 f80e 	bl	8009ecc <__errno>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	220c      	movs	r2, #12
 8007eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eba:	e009      	b.n	8007ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007ebc:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <_sbrk+0x64>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007ec2:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <_sbrk+0x64>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4413      	add	r3, r2
 8007eca:	4a05      	ldr	r2, [pc, #20]	; (8007ee0 <_sbrk+0x64>)
 8007ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007ece:	68fb      	ldr	r3, [r7, #12]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20030000 	.word	0x20030000
 8007edc:	00000400 	.word	0x00000400
 8007ee0:	2000008c 	.word	0x2000008c
 8007ee4:	20000220 	.word	0x20000220

08007ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007eec:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <SystemInit+0x20>)
 8007eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef2:	4a05      	ldr	r2, [pc, #20]	; (8007f08 <SystemInit+0x20>)
 8007ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007efc:	bf00      	nop
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	e000ed00 	.word	0xe000ed00

08007f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007f10:	480d      	ldr	r0, [pc, #52]	; (8007f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007f12:	490e      	ldr	r1, [pc, #56]	; (8007f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007f14:	4a0e      	ldr	r2, [pc, #56]	; (8007f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007f18:	e002      	b.n	8007f20 <LoopCopyDataInit>

08007f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007f1e:	3304      	adds	r3, #4

08007f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007f24:	d3f9      	bcc.n	8007f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007f26:	4a0b      	ldr	r2, [pc, #44]	; (8007f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007f28:	4c0b      	ldr	r4, [pc, #44]	; (8007f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007f2c:	e001      	b.n	8007f32 <LoopFillZerobss>

08007f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007f30:	3204      	adds	r2, #4

08007f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007f34:	d3fb      	bcc.n	8007f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007f36:	f7ff ffd7 	bl	8007ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007f3a:	f001 ffdf 	bl	8009efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007f3e:	f7ff fc93 	bl	8007868 <main>
  bx  lr    
 8007f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007f44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8007f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007f4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8007f50:	0800beac 	.word	0x0800beac
  ldr r2, =_sbss
 8007f54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8007f58:	2000021c 	.word	0x2000021c

08007f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007f5c:	e7fe      	b.n	8007f5c <ADC_IRQHandler>
	...

08007f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007f64:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <HAL_Init+0x40>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a0d      	ldr	r2, [pc, #52]	; (8007fa0 <HAL_Init+0x40>)
 8007f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <HAL_Init+0x40>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a0a      	ldr	r2, [pc, #40]	; (8007fa0 <HAL_Init+0x40>)
 8007f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007f7c:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <HAL_Init+0x40>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a07      	ldr	r2, [pc, #28]	; (8007fa0 <HAL_Init+0x40>)
 8007f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007f88:	2003      	movs	r0, #3
 8007f8a:	f000 f931 	bl	80081f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007f8e:	200f      	movs	r0, #15
 8007f90:	f000 f808 	bl	8007fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007f94:	f7ff fde0 	bl	8007b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40023c00 	.word	0x40023c00

08007fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007fac:	4b12      	ldr	r3, [pc, #72]	; (8007ff8 <HAL_InitTick+0x54>)
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <HAL_InitTick+0x58>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f93b 	bl	800823e <HAL_SYSTICK_Config>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e00e      	b.n	8007ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b0f      	cmp	r3, #15
 8007fd6:	d80a      	bhi.n	8007fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007fd8:	2200      	movs	r2, #0
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	f000 f911 	bl	8008206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007fe4:	4a06      	ldr	r2, [pc, #24]	; (8008000 <HAL_InitTick+0x5c>)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e000      	b.n	8007ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20000000 	.word	0x20000000
 8007ffc:	20000008 	.word	0x20000008
 8008000:	20000004 	.word	0x20000004

08008004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008004:	b480      	push	{r7}
 8008006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <HAL_IncTick+0x20>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	461a      	mov	r2, r3
 800800e:	4b06      	ldr	r3, [pc, #24]	; (8008028 <HAL_IncTick+0x24>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4413      	add	r3, r2
 8008014:	4a04      	ldr	r2, [pc, #16]	; (8008028 <HAL_IncTick+0x24>)
 8008016:	6013      	str	r3, [r2, #0]
}
 8008018:	bf00      	nop
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000008 	.word	0x20000008
 8008028:	20000208 	.word	0x20000208

0800802c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
  return uwTick;
 8008030:	4b03      	ldr	r3, [pc, #12]	; (8008040 <HAL_GetTick+0x14>)
 8008032:	681b      	ldr	r3, [r3, #0]
}
 8008034:	4618      	mov	r0, r3
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	20000208 	.word	0x20000208

08008044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800804c:	f7ff ffee 	bl	800802c <HAL_GetTick>
 8008050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805c:	d005      	beq.n	800806a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800805e:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <HAL_Delay+0x44>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800806a:	bf00      	nop
 800806c:	f7ff ffde 	bl	800802c <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	429a      	cmp	r2, r3
 800807a:	d8f7      	bhi.n	800806c <HAL_Delay+0x28>
  {
  }
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20000008 	.word	0x20000008

0800808c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800809c:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <__NVIC_SetPriorityGrouping+0x44>)
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80080a8:	4013      	ands	r3, r2
 80080aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80080b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80080b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80080be:	4a04      	ldr	r2, [pc, #16]	; (80080d0 <__NVIC_SetPriorityGrouping+0x44>)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	60d3      	str	r3, [r2, #12]
}
 80080c4:	bf00      	nop
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	e000ed00 	.word	0xe000ed00

080080d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80080d8:	4b04      	ldr	r3, [pc, #16]	; (80080ec <__NVIC_GetPriorityGrouping+0x18>)
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	0a1b      	lsrs	r3, r3, #8
 80080de:	f003 0307 	and.w	r3, r3, #7
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	e000ed00 	.word	0xe000ed00

080080f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	6039      	str	r1, [r7, #0]
 80080fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008100:	2b00      	cmp	r3, #0
 8008102:	db0a      	blt.n	800811a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	b2da      	uxtb	r2, r3
 8008108:	490c      	ldr	r1, [pc, #48]	; (800813c <__NVIC_SetPriority+0x4c>)
 800810a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800810e:	0112      	lsls	r2, r2, #4
 8008110:	b2d2      	uxtb	r2, r2
 8008112:	440b      	add	r3, r1
 8008114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008118:	e00a      	b.n	8008130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	b2da      	uxtb	r2, r3
 800811e:	4908      	ldr	r1, [pc, #32]	; (8008140 <__NVIC_SetPriority+0x50>)
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	f003 030f 	and.w	r3, r3, #15
 8008126:	3b04      	subs	r3, #4
 8008128:	0112      	lsls	r2, r2, #4
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	440b      	add	r3, r1
 800812e:	761a      	strb	r2, [r3, #24]
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	e000e100 	.word	0xe000e100
 8008140:	e000ed00 	.word	0xe000ed00

08008144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008144:	b480      	push	{r7}
 8008146:	b089      	sub	sp, #36	; 0x24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f003 0307 	and.w	r3, r3, #7
 8008156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	f1c3 0307 	rsb	r3, r3, #7
 800815e:	2b04      	cmp	r3, #4
 8008160:	bf28      	it	cs
 8008162:	2304      	movcs	r3, #4
 8008164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	3304      	adds	r3, #4
 800816a:	2b06      	cmp	r3, #6
 800816c:	d902      	bls.n	8008174 <NVIC_EncodePriority+0x30>
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	3b03      	subs	r3, #3
 8008172:	e000      	b.n	8008176 <NVIC_EncodePriority+0x32>
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008178:	f04f 32ff 	mov.w	r2, #4294967295
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	fa02 f303 	lsl.w	r3, r2, r3
 8008182:	43da      	mvns	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	401a      	ands	r2, r3
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800818c:	f04f 31ff 	mov.w	r1, #4294967295
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	fa01 f303 	lsl.w	r3, r1, r3
 8008196:	43d9      	mvns	r1, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800819c:	4313      	orrs	r3, r2
         );
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3724      	adds	r7, #36	; 0x24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
	...

080081ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081bc:	d301      	bcc.n	80081c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80081be:	2301      	movs	r3, #1
 80081c0:	e00f      	b.n	80081e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081c2:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <SysTick_Config+0x40>)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80081ca:	210f      	movs	r1, #15
 80081cc:	f04f 30ff 	mov.w	r0, #4294967295
 80081d0:	f7ff ff8e 	bl	80080f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <SysTick_Config+0x40>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80081da:	4b04      	ldr	r3, [pc, #16]	; (80081ec <SysTick_Config+0x40>)
 80081dc:	2207      	movs	r2, #7
 80081de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	e000e010 	.word	0xe000e010

080081f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ff47 	bl	800808c <__NVIC_SetPriorityGrouping>
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008206:	b580      	push	{r7, lr}
 8008208:	b086      	sub	sp, #24
 800820a:	af00      	add	r7, sp, #0
 800820c:	4603      	mov	r3, r0
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008218:	f7ff ff5c 	bl	80080d4 <__NVIC_GetPriorityGrouping>
 800821c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	6978      	ldr	r0, [r7, #20]
 8008224:	f7ff ff8e 	bl	8008144 <NVIC_EncodePriority>
 8008228:	4602      	mov	r2, r0
 800822a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800822e:	4611      	mov	r1, r2
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff ff5d 	bl	80080f0 <__NVIC_SetPriority>
}
 8008236:	bf00      	nop
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff ffb0 	bl	80081ac <SysTick_Config>
 800824c:	4603      	mov	r3, r0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008258:	b480      	push	{r7}
 800825a:	b089      	sub	sp, #36	; 0x24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008262:	2300      	movs	r3, #0
 8008264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008266:	2300      	movs	r3, #0
 8008268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800826a:	2300      	movs	r3, #0
 800826c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800826e:	2300      	movs	r3, #0
 8008270:	61fb      	str	r3, [r7, #28]
 8008272:	e177      	b.n	8008564 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008274:	2201      	movs	r2, #1
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4013      	ands	r3, r2
 8008286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	429a      	cmp	r2, r3
 800828e:	f040 8166 	bne.w	800855e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	2b01      	cmp	r3, #1
 800829c:	d005      	beq.n	80082aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d130      	bne.n	800830c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	005b      	lsls	r3, r3, #1
 80082b4:	2203      	movs	r2, #3
 80082b6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ba:	43db      	mvns	r3, r3
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	4013      	ands	r3, r2
 80082c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082e0:	2201      	movs	r2, #1
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	fa02 f303 	lsl.w	r3, r2, r3
 80082e8:	43db      	mvns	r3, r3
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	4013      	ands	r3, r2
 80082ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	091b      	lsrs	r3, r3, #4
 80082f6:	f003 0201 	and.w	r2, r3, #1
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	4313      	orrs	r3, r2
 8008304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f003 0303 	and.w	r3, r3, #3
 8008314:	2b03      	cmp	r3, #3
 8008316:	d017      	beq.n	8008348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	005b      	lsls	r3, r3, #1
 8008322:	2203      	movs	r2, #3
 8008324:	fa02 f303 	lsl.w	r3, r2, r3
 8008328:	43db      	mvns	r3, r3
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	4013      	ands	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	fa02 f303 	lsl.w	r3, r2, r3
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	4313      	orrs	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f003 0303 	and.w	r3, r3, #3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d123      	bne.n	800839c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	08da      	lsrs	r2, r3, #3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3208      	adds	r2, #8
 800835c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	f003 0307 	and.w	r3, r3, #7
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	220f      	movs	r2, #15
 800836c:	fa02 f303 	lsl.w	r3, r2, r3
 8008370:	43db      	mvns	r3, r3
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	4013      	ands	r3, r2
 8008376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	691a      	ldr	r2, [r3, #16]
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	fa02 f303 	lsl.w	r3, r2, r3
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	4313      	orrs	r3, r2
 800838c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	08da      	lsrs	r2, r3, #3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3208      	adds	r2, #8
 8008396:	69b9      	ldr	r1, [r7, #24]
 8008398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	2203      	movs	r2, #3
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	43db      	mvns	r3, r3
 80083ae:	69ba      	ldr	r2, [r7, #24]
 80083b0:	4013      	ands	r3, r2
 80083b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f003 0203 	and.w	r2, r3, #3
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	fa02 f303 	lsl.w	r3, r2, r3
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 80c0 	beq.w	800855e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	4b66      	ldr	r3, [pc, #408]	; (800857c <HAL_GPIO_Init+0x324>)
 80083e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e6:	4a65      	ldr	r2, [pc, #404]	; (800857c <HAL_GPIO_Init+0x324>)
 80083e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083ec:	6453      	str	r3, [r2, #68]	; 0x44
 80083ee:	4b63      	ldr	r3, [pc, #396]	; (800857c <HAL_GPIO_Init+0x324>)
 80083f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80083fa:	4a61      	ldr	r2, [pc, #388]	; (8008580 <HAL_GPIO_Init+0x328>)
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	089b      	lsrs	r3, r3, #2
 8008400:	3302      	adds	r3, #2
 8008402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	220f      	movs	r2, #15
 8008412:	fa02 f303 	lsl.w	r3, r2, r3
 8008416:	43db      	mvns	r3, r3
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	4013      	ands	r3, r2
 800841c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a58      	ldr	r2, [pc, #352]	; (8008584 <HAL_GPIO_Init+0x32c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d037      	beq.n	8008496 <HAL_GPIO_Init+0x23e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a57      	ldr	r2, [pc, #348]	; (8008588 <HAL_GPIO_Init+0x330>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d031      	beq.n	8008492 <HAL_GPIO_Init+0x23a>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a56      	ldr	r2, [pc, #344]	; (800858c <HAL_GPIO_Init+0x334>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d02b      	beq.n	800848e <HAL_GPIO_Init+0x236>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a55      	ldr	r2, [pc, #340]	; (8008590 <HAL_GPIO_Init+0x338>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d025      	beq.n	800848a <HAL_GPIO_Init+0x232>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a54      	ldr	r2, [pc, #336]	; (8008594 <HAL_GPIO_Init+0x33c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d01f      	beq.n	8008486 <HAL_GPIO_Init+0x22e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a53      	ldr	r2, [pc, #332]	; (8008598 <HAL_GPIO_Init+0x340>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d019      	beq.n	8008482 <HAL_GPIO_Init+0x22a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a52      	ldr	r2, [pc, #328]	; (800859c <HAL_GPIO_Init+0x344>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d013      	beq.n	800847e <HAL_GPIO_Init+0x226>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a51      	ldr	r2, [pc, #324]	; (80085a0 <HAL_GPIO_Init+0x348>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00d      	beq.n	800847a <HAL_GPIO_Init+0x222>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a50      	ldr	r2, [pc, #320]	; (80085a4 <HAL_GPIO_Init+0x34c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d007      	beq.n	8008476 <HAL_GPIO_Init+0x21e>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a4f      	ldr	r2, [pc, #316]	; (80085a8 <HAL_GPIO_Init+0x350>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d101      	bne.n	8008472 <HAL_GPIO_Init+0x21a>
 800846e:	2309      	movs	r3, #9
 8008470:	e012      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008472:	230a      	movs	r3, #10
 8008474:	e010      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008476:	2308      	movs	r3, #8
 8008478:	e00e      	b.n	8008498 <HAL_GPIO_Init+0x240>
 800847a:	2307      	movs	r3, #7
 800847c:	e00c      	b.n	8008498 <HAL_GPIO_Init+0x240>
 800847e:	2306      	movs	r3, #6
 8008480:	e00a      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008482:	2305      	movs	r3, #5
 8008484:	e008      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008486:	2304      	movs	r3, #4
 8008488:	e006      	b.n	8008498 <HAL_GPIO_Init+0x240>
 800848a:	2303      	movs	r3, #3
 800848c:	e004      	b.n	8008498 <HAL_GPIO_Init+0x240>
 800848e:	2302      	movs	r3, #2
 8008490:	e002      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008492:	2301      	movs	r3, #1
 8008494:	e000      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008496:	2300      	movs	r3, #0
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	f002 0203 	and.w	r2, r2, #3
 800849e:	0092      	lsls	r2, r2, #2
 80084a0:	4093      	lsls	r3, r2
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084a8:	4935      	ldr	r1, [pc, #212]	; (8008580 <HAL_GPIO_Init+0x328>)
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	089b      	lsrs	r3, r3, #2
 80084ae:	3302      	adds	r3, #2
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80084b6:	4b3d      	ldr	r3, [pc, #244]	; (80085ac <HAL_GPIO_Init+0x354>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	43db      	mvns	r3, r3
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	4013      	ands	r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80084da:	4a34      	ldr	r2, [pc, #208]	; (80085ac <HAL_GPIO_Init+0x354>)
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80084e0:	4b32      	ldr	r3, [pc, #200]	; (80085ac <HAL_GPIO_Init+0x354>)
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	43db      	mvns	r3, r3
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	4013      	ands	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	4313      	orrs	r3, r2
 8008502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008504:	4a29      	ldr	r2, [pc, #164]	; (80085ac <HAL_GPIO_Init+0x354>)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800850a:	4b28      	ldr	r3, [pc, #160]	; (80085ac <HAL_GPIO_Init+0x354>)
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	43db      	mvns	r3, r3
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	4013      	ands	r3, r2
 8008518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800852e:	4a1f      	ldr	r2, [pc, #124]	; (80085ac <HAL_GPIO_Init+0x354>)
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008534:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <HAL_GPIO_Init+0x354>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	43db      	mvns	r3, r3
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	4013      	ands	r3, r2
 8008542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	4313      	orrs	r3, r2
 8008556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008558:	4a14      	ldr	r2, [pc, #80]	; (80085ac <HAL_GPIO_Init+0x354>)
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	3301      	adds	r3, #1
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2b0f      	cmp	r3, #15
 8008568:	f67f ae84 	bls.w	8008274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	3724      	adds	r7, #36	; 0x24
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	40023800 	.word	0x40023800
 8008580:	40013800 	.word	0x40013800
 8008584:	40020000 	.word	0x40020000
 8008588:	40020400 	.word	0x40020400
 800858c:	40020800 	.word	0x40020800
 8008590:	40020c00 	.word	0x40020c00
 8008594:	40021000 	.word	0x40021000
 8008598:	40021400 	.word	0x40021400
 800859c:	40021800 	.word	0x40021800
 80085a0:	40021c00 	.word	0x40021c00
 80085a4:	40022000 	.word	0x40022000
 80085a8:	40022400 	.word	0x40022400
 80085ac:	40013c00 	.word	0x40013c00

080085b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	807b      	strh	r3, [r7, #2]
 80085bc:	4613      	mov	r3, r2
 80085be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085c0:	787b      	ldrb	r3, [r7, #1]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085c6:	887a      	ldrh	r2, [r7, #2]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085cc:	e003      	b.n	80085d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085ce:	887b      	ldrh	r3, [r7, #2]
 80085d0:	041a      	lsls	r2, r3, #16
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	619a      	str	r2, [r3, #24]
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
	...

080085e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80085ee:	2300      	movs	r3, #0
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	4b20      	ldr	r3, [pc, #128]	; (8008674 <HAL_PWREx_EnableOverDrive+0x90>)
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	4a1f      	ldr	r2, [pc, #124]	; (8008674 <HAL_PWREx_EnableOverDrive+0x90>)
 80085f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085fc:	6413      	str	r3, [r2, #64]	; 0x40
 80085fe:	4b1d      	ldr	r3, [pc, #116]	; (8008674 <HAL_PWREx_EnableOverDrive+0x90>)
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800860a:	4b1b      	ldr	r3, [pc, #108]	; (8008678 <HAL_PWREx_EnableOverDrive+0x94>)
 800860c:	2201      	movs	r2, #1
 800860e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008610:	f7ff fd0c 	bl	800802c <HAL_GetTick>
 8008614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008616:	e009      	b.n	800862c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008618:	f7ff fd08 	bl	800802c <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008626:	d901      	bls.n	800862c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e01f      	b.n	800866c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800862c:	4b13      	ldr	r3, [pc, #76]	; (800867c <HAL_PWREx_EnableOverDrive+0x98>)
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008638:	d1ee      	bne.n	8008618 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800863a:	4b11      	ldr	r3, [pc, #68]	; (8008680 <HAL_PWREx_EnableOverDrive+0x9c>)
 800863c:	2201      	movs	r2, #1
 800863e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008640:	f7ff fcf4 	bl	800802c <HAL_GetTick>
 8008644:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008646:	e009      	b.n	800865c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008648:	f7ff fcf0 	bl	800802c <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008656:	d901      	bls.n	800865c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e007      	b.n	800866c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800865c:	4b07      	ldr	r3, [pc, #28]	; (800867c <HAL_PWREx_EnableOverDrive+0x98>)
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008668:	d1ee      	bne.n	8008648 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	40023800 	.word	0x40023800
 8008678:	420e0040 	.word	0x420e0040
 800867c:	40007000 	.word	0x40007000
 8008680:	420e0044 	.word	0x420e0044

08008684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e264      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d075      	beq.n	800878e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086a2:	4ba3      	ldr	r3, [pc, #652]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f003 030c 	and.w	r3, r3, #12
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d00c      	beq.n	80086c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086ae:	4ba0      	ldr	r3, [pc, #640]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086b6:	2b08      	cmp	r3, #8
 80086b8:	d112      	bne.n	80086e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086ba:	4b9d      	ldr	r3, [pc, #628]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086c6:	d10b      	bne.n	80086e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086c8:	4b99      	ldr	r3, [pc, #612]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d05b      	beq.n	800878c <HAL_RCC_OscConfig+0x108>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d157      	bne.n	800878c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e23f      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e8:	d106      	bne.n	80086f8 <HAL_RCC_OscConfig+0x74>
 80086ea:	4b91      	ldr	r3, [pc, #580]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a90      	ldr	r2, [pc, #576]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80086f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	e01d      	b.n	8008734 <HAL_RCC_OscConfig+0xb0>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008700:	d10c      	bne.n	800871c <HAL_RCC_OscConfig+0x98>
 8008702:	4b8b      	ldr	r3, [pc, #556]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a8a      	ldr	r2, [pc, #552]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800870c:	6013      	str	r3, [r2, #0]
 800870e:	4b88      	ldr	r3, [pc, #544]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a87      	ldr	r2, [pc, #540]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	e00b      	b.n	8008734 <HAL_RCC_OscConfig+0xb0>
 800871c:	4b84      	ldr	r3, [pc, #528]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a83      	ldr	r2, [pc, #524]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	4b81      	ldr	r3, [pc, #516]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a80      	ldr	r2, [pc, #512]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 800872e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d013      	beq.n	8008764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800873c:	f7ff fc76 	bl	800802c <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008744:	f7ff fc72 	bl	800802c <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b64      	cmp	r3, #100	; 0x64
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e204      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008756:	4b76      	ldr	r3, [pc, #472]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d0f0      	beq.n	8008744 <HAL_RCC_OscConfig+0xc0>
 8008762:	e014      	b.n	800878e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008764:	f7ff fc62 	bl	800802c <HAL_GetTick>
 8008768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800876c:	f7ff fc5e 	bl	800802c <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b64      	cmp	r3, #100	; 0x64
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e1f0      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800877e:	4b6c      	ldr	r3, [pc, #432]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1f0      	bne.n	800876c <HAL_RCC_OscConfig+0xe8>
 800878a:	e000      	b.n	800878e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800878c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d063      	beq.n	8008862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800879a:	4b65      	ldr	r3, [pc, #404]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f003 030c 	and.w	r3, r3, #12
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00b      	beq.n	80087be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087a6:	4b62      	ldr	r3, [pc, #392]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087ae:	2b08      	cmp	r3, #8
 80087b0:	d11c      	bne.n	80087ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087b2:	4b5f      	ldr	r3, [pc, #380]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d116      	bne.n	80087ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087be:	4b5c      	ldr	r3, [pc, #368]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d005      	beq.n	80087d6 <HAL_RCC_OscConfig+0x152>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d001      	beq.n	80087d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e1c4      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087d6:	4b56      	ldr	r3, [pc, #344]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	4952      	ldr	r1, [pc, #328]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087ea:	e03a      	b.n	8008862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d020      	beq.n	8008836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087f4:	4b4f      	ldr	r3, [pc, #316]	; (8008934 <HAL_RCC_OscConfig+0x2b0>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087fa:	f7ff fc17 	bl	800802c <HAL_GetTick>
 80087fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008800:	e008      	b.n	8008814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008802:	f7ff fc13 	bl	800802c <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e1a5      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008814:	4b46      	ldr	r3, [pc, #280]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0302 	and.w	r3, r3, #2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d0f0      	beq.n	8008802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008820:	4b43      	ldr	r3, [pc, #268]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	4940      	ldr	r1, [pc, #256]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008830:	4313      	orrs	r3, r2
 8008832:	600b      	str	r3, [r1, #0]
 8008834:	e015      	b.n	8008862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008836:	4b3f      	ldr	r3, [pc, #252]	; (8008934 <HAL_RCC_OscConfig+0x2b0>)
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883c:	f7ff fbf6 	bl	800802c <HAL_GetTick>
 8008840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008842:	e008      	b.n	8008856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008844:	f7ff fbf2 	bl	800802c <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b02      	cmp	r3, #2
 8008850:	d901      	bls.n	8008856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008852:	2303      	movs	r3, #3
 8008854:	e184      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008856:	4b36      	ldr	r3, [pc, #216]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f0      	bne.n	8008844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b00      	cmp	r3, #0
 800886c:	d030      	beq.n	80088d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d016      	beq.n	80088a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008876:	4b30      	ldr	r3, [pc, #192]	; (8008938 <HAL_RCC_OscConfig+0x2b4>)
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800887c:	f7ff fbd6 	bl	800802c <HAL_GetTick>
 8008880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008884:	f7ff fbd2 	bl	800802c <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e164      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008896:	4b26      	ldr	r3, [pc, #152]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d0f0      	beq.n	8008884 <HAL_RCC_OscConfig+0x200>
 80088a2:	e015      	b.n	80088d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088a4:	4b24      	ldr	r3, [pc, #144]	; (8008938 <HAL_RCC_OscConfig+0x2b4>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088aa:	f7ff fbbf 	bl	800802c <HAL_GetTick>
 80088ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088b2:	f7ff fbbb 	bl	800802c <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e14d      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088c4:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80088c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1f0      	bne.n	80088b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80a0 	beq.w	8008a1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088de:	2300      	movs	r3, #0
 80088e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088e2:	4b13      	ldr	r3, [pc, #76]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10f      	bne.n	800890e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088ee:	2300      	movs	r3, #0
 80088f0:	60bb      	str	r3, [r7, #8]
 80088f2:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	4a0e      	ldr	r2, [pc, #56]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 80088f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088fc:	6413      	str	r3, [r2, #64]	; 0x40
 80088fe:	4b0c      	ldr	r3, [pc, #48]	; (8008930 <HAL_RCC_OscConfig+0x2ac>)
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008906:	60bb      	str	r3, [r7, #8]
 8008908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800890a:	2301      	movs	r3, #1
 800890c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800890e:	4b0b      	ldr	r3, [pc, #44]	; (800893c <HAL_RCC_OscConfig+0x2b8>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008916:	2b00      	cmp	r3, #0
 8008918:	d121      	bne.n	800895e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800891a:	4b08      	ldr	r3, [pc, #32]	; (800893c <HAL_RCC_OscConfig+0x2b8>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a07      	ldr	r2, [pc, #28]	; (800893c <HAL_RCC_OscConfig+0x2b8>)
 8008920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008926:	f7ff fb81 	bl	800802c <HAL_GetTick>
 800892a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800892c:	e011      	b.n	8008952 <HAL_RCC_OscConfig+0x2ce>
 800892e:	bf00      	nop
 8008930:	40023800 	.word	0x40023800
 8008934:	42470000 	.word	0x42470000
 8008938:	42470e80 	.word	0x42470e80
 800893c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008940:	f7ff fb74 	bl	800802c <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	2b02      	cmp	r3, #2
 800894c:	d901      	bls.n	8008952 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e106      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008952:	4b85      	ldr	r3, [pc, #532]	; (8008b68 <HAL_RCC_OscConfig+0x4e4>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0f0      	beq.n	8008940 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d106      	bne.n	8008974 <HAL_RCC_OscConfig+0x2f0>
 8008966:	4b81      	ldr	r3, [pc, #516]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896a:	4a80      	ldr	r2, [pc, #512]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 800896c:	f043 0301 	orr.w	r3, r3, #1
 8008970:	6713      	str	r3, [r2, #112]	; 0x70
 8008972:	e01c      	b.n	80089ae <HAL_RCC_OscConfig+0x32a>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b05      	cmp	r3, #5
 800897a:	d10c      	bne.n	8008996 <HAL_RCC_OscConfig+0x312>
 800897c:	4b7b      	ldr	r3, [pc, #492]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 800897e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008980:	4a7a      	ldr	r2, [pc, #488]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008982:	f043 0304 	orr.w	r3, r3, #4
 8008986:	6713      	str	r3, [r2, #112]	; 0x70
 8008988:	4b78      	ldr	r3, [pc, #480]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 800898a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898c:	4a77      	ldr	r2, [pc, #476]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 800898e:	f043 0301 	orr.w	r3, r3, #1
 8008992:	6713      	str	r3, [r2, #112]	; 0x70
 8008994:	e00b      	b.n	80089ae <HAL_RCC_OscConfig+0x32a>
 8008996:	4b75      	ldr	r3, [pc, #468]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	4a74      	ldr	r2, [pc, #464]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 800899c:	f023 0301 	bic.w	r3, r3, #1
 80089a0:	6713      	str	r3, [r2, #112]	; 0x70
 80089a2:	4b72      	ldr	r3, [pc, #456]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 80089a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a6:	4a71      	ldr	r2, [pc, #452]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 80089a8:	f023 0304 	bic.w	r3, r3, #4
 80089ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d015      	beq.n	80089e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b6:	f7ff fb39 	bl	800802c <HAL_GetTick>
 80089ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089bc:	e00a      	b.n	80089d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089be:	f7ff fb35 	bl	800802c <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d901      	bls.n	80089d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e0c5      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089d4:	4b65      	ldr	r3, [pc, #404]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 80089d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0ee      	beq.n	80089be <HAL_RCC_OscConfig+0x33a>
 80089e0:	e014      	b.n	8008a0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089e2:	f7ff fb23 	bl	800802c <HAL_GetTick>
 80089e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089e8:	e00a      	b.n	8008a00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089ea:	f7ff fb1f 	bl	800802c <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e0af      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a00:	4b5a      	ldr	r3, [pc, #360]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1ee      	bne.n	80089ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d105      	bne.n	8008a1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a12:	4b56      	ldr	r3, [pc, #344]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	4a55      	ldr	r2, [pc, #340]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 809b 	beq.w	8008b5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a28:	4b50      	ldr	r3, [pc, #320]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f003 030c 	and.w	r3, r3, #12
 8008a30:	2b08      	cmp	r3, #8
 8008a32:	d05c      	beq.n	8008aee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d141      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a3c:	4b4c      	ldr	r3, [pc, #304]	; (8008b70 <HAL_RCC_OscConfig+0x4ec>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a42:	f7ff faf3 	bl	800802c <HAL_GetTick>
 8008a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a48:	e008      	b.n	8008a5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a4a:	f7ff faef 	bl	800802c <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d901      	bls.n	8008a5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e081      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a5c:	4b43      	ldr	r3, [pc, #268]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1f0      	bne.n	8008a4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	69da      	ldr	r2, [r3, #28]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	019b      	lsls	r3, r3, #6
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	3b01      	subs	r3, #1
 8008a82:	041b      	lsls	r3, r3, #16
 8008a84:	431a      	orrs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	061b      	lsls	r3, r3, #24
 8008a8c:	4937      	ldr	r1, [pc, #220]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a92:	4b37      	ldr	r3, [pc, #220]	; (8008b70 <HAL_RCC_OscConfig+0x4ec>)
 8008a94:	2201      	movs	r2, #1
 8008a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a98:	f7ff fac8 	bl	800802c <HAL_GetTick>
 8008a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a9e:	e008      	b.n	8008ab2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa0:	f7ff fac4 	bl	800802c <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e056      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ab2:	4b2e      	ldr	r3, [pc, #184]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0f0      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x41c>
 8008abe:	e04e      	b.n	8008b5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ac0:	4b2b      	ldr	r3, [pc, #172]	; (8008b70 <HAL_RCC_OscConfig+0x4ec>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ac6:	f7ff fab1 	bl	800802c <HAL_GetTick>
 8008aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008acc:	e008      	b.n	8008ae0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ace:	f7ff faad 	bl	800802c <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d901      	bls.n	8008ae0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e03f      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ae0:	4b22      	ldr	r3, [pc, #136]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1f0      	bne.n	8008ace <HAL_RCC_OscConfig+0x44a>
 8008aec:	e037      	b.n	8008b5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d101      	bne.n	8008afa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e032      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008afa:	4b1c      	ldr	r3, [pc, #112]	; (8008b6c <HAL_RCC_OscConfig+0x4e8>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d028      	beq.n	8008b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d121      	bne.n	8008b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d11a      	bne.n	8008b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d111      	bne.n	8008b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b40:	085b      	lsrs	r3, r3, #1
 8008b42:	3b01      	subs	r3, #1
 8008b44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d107      	bne.n	8008b5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d001      	beq.n	8008b5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e000      	b.n	8008b60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	40007000 	.word	0x40007000
 8008b6c:	40023800 	.word	0x40023800
 8008b70:	42470060 	.word	0x42470060

08008b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e0cc      	b.n	8008d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b88:	4b68      	ldr	r3, [pc, #416]	; (8008d2c <HAL_RCC_ClockConfig+0x1b8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 030f 	and.w	r3, r3, #15
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d90c      	bls.n	8008bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b96:	4b65      	ldr	r3, [pc, #404]	; (8008d2c <HAL_RCC_ClockConfig+0x1b8>)
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	b2d2      	uxtb	r2, r2
 8008b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b9e:	4b63      	ldr	r3, [pc, #396]	; (8008d2c <HAL_RCC_ClockConfig+0x1b8>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d001      	beq.n	8008bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e0b8      	b.n	8008d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0302 	and.w	r3, r3, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d020      	beq.n	8008bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d005      	beq.n	8008bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bc8:	4b59      	ldr	r3, [pc, #356]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	4a58      	ldr	r2, [pc, #352]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008bd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008be0:	4b53      	ldr	r3, [pc, #332]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	4a52      	ldr	r2, [pc, #328]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bec:	4b50      	ldr	r3, [pc, #320]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	494d      	ldr	r1, [pc, #308]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d044      	beq.n	8008c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d107      	bne.n	8008c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c12:	4b47      	ldr	r3, [pc, #284]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d119      	bne.n	8008c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e07f      	b.n	8008d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d003      	beq.n	8008c32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d107      	bne.n	8008c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c32:	4b3f      	ldr	r3, [pc, #252]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e06f      	b.n	8008d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c42:	4b3b      	ldr	r3, [pc, #236]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e067      	b.n	8008d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c52:	4b37      	ldr	r3, [pc, #220]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f023 0203 	bic.w	r2, r3, #3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	4934      	ldr	r1, [pc, #208]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c64:	f7ff f9e2 	bl	800802c <HAL_GetTick>
 8008c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c6a:	e00a      	b.n	8008c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c6c:	f7ff f9de 	bl	800802c <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e04f      	b.n	8008d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c82:	4b2b      	ldr	r3, [pc, #172]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 020c 	and.w	r2, r3, #12
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d1eb      	bne.n	8008c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c94:	4b25      	ldr	r3, [pc, #148]	; (8008d2c <HAL_RCC_ClockConfig+0x1b8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 030f 	and.w	r3, r3, #15
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d20c      	bcs.n	8008cbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ca2:	4b22      	ldr	r3, [pc, #136]	; (8008d2c <HAL_RCC_ClockConfig+0x1b8>)
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	b2d2      	uxtb	r2, r2
 8008ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008caa:	4b20      	ldr	r3, [pc, #128]	; (8008d2c <HAL_RCC_ClockConfig+0x1b8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d001      	beq.n	8008cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e032      	b.n	8008d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d008      	beq.n	8008cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cc8:	4b19      	ldr	r3, [pc, #100]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	4916      	ldr	r1, [pc, #88]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0308 	and.w	r3, r3, #8
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d009      	beq.n	8008cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ce6:	4b12      	ldr	r3, [pc, #72]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	490e      	ldr	r1, [pc, #56]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cfa:	f000 f821 	bl	8008d40 <HAL_RCC_GetSysClockFreq>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	4b0b      	ldr	r3, [pc, #44]	; (8008d30 <HAL_RCC_ClockConfig+0x1bc>)
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	091b      	lsrs	r3, r3, #4
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	490a      	ldr	r1, [pc, #40]	; (8008d34 <HAL_RCC_ClockConfig+0x1c0>)
 8008d0c:	5ccb      	ldrb	r3, [r1, r3]
 8008d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d12:	4a09      	ldr	r2, [pc, #36]	; (8008d38 <HAL_RCC_ClockConfig+0x1c4>)
 8008d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d16:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <HAL_RCC_ClockConfig+0x1c8>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff f942 	bl	8007fa4 <HAL_InitTick>

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	40023c00 	.word	0x40023c00
 8008d30:	40023800 	.word	0x40023800
 8008d34:	0800bdb0 	.word	0x0800bdb0
 8008d38:	20000000 	.word	0x20000000
 8008d3c:	20000004 	.word	0x20000004

08008d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d40:	b5b0      	push	{r4, r5, r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d46:	2100      	movs	r1, #0
 8008d48:	6079      	str	r1, [r7, #4]
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	60f9      	str	r1, [r7, #12]
 8008d4e:	2100      	movs	r1, #0
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008d52:	2100      	movs	r1, #0
 8008d54:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d56:	4952      	ldr	r1, [pc, #328]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d58:	6889      	ldr	r1, [r1, #8]
 8008d5a:	f001 010c 	and.w	r1, r1, #12
 8008d5e:	2908      	cmp	r1, #8
 8008d60:	d00d      	beq.n	8008d7e <HAL_RCC_GetSysClockFreq+0x3e>
 8008d62:	2908      	cmp	r1, #8
 8008d64:	f200 8094 	bhi.w	8008e90 <HAL_RCC_GetSysClockFreq+0x150>
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	d002      	beq.n	8008d72 <HAL_RCC_GetSysClockFreq+0x32>
 8008d6c:	2904      	cmp	r1, #4
 8008d6e:	d003      	beq.n	8008d78 <HAL_RCC_GetSysClockFreq+0x38>
 8008d70:	e08e      	b.n	8008e90 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d72:	4b4c      	ldr	r3, [pc, #304]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008d74:	60bb      	str	r3, [r7, #8]
       break;
 8008d76:	e08e      	b.n	8008e96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d78:	4b4b      	ldr	r3, [pc, #300]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008d7a:	60bb      	str	r3, [r7, #8]
      break;
 8008d7c:	e08b      	b.n	8008e96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d7e:	4948      	ldr	r1, [pc, #288]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d80:	6849      	ldr	r1, [r1, #4]
 8008d82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008d86:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d88:	4945      	ldr	r1, [pc, #276]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d8a:	6849      	ldr	r1, [r1, #4]
 8008d8c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008d90:	2900      	cmp	r1, #0
 8008d92:	d024      	beq.n	8008dde <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d94:	4942      	ldr	r1, [pc, #264]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008d96:	6849      	ldr	r1, [r1, #4]
 8008d98:	0989      	lsrs	r1, r1, #6
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	f04f 0100 	mov.w	r1, #0
 8008da0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008da4:	f04f 0500 	mov.w	r5, #0
 8008da8:	ea00 0204 	and.w	r2, r0, r4
 8008dac:	ea01 0305 	and.w	r3, r1, r5
 8008db0:	493d      	ldr	r1, [pc, #244]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008db2:	fb01 f003 	mul.w	r0, r1, r3
 8008db6:	2100      	movs	r1, #0
 8008db8:	fb01 f102 	mul.w	r1, r1, r2
 8008dbc:	1844      	adds	r4, r0, r1
 8008dbe:	493a      	ldr	r1, [pc, #232]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0x168>)
 8008dc0:	fba2 0101 	umull	r0, r1, r2, r1
 8008dc4:	1863      	adds	r3, r4, r1
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	f7f7 fa66 	bl	80002a0 <__aeabi_uldivmod>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4613      	mov	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]
 8008ddc:	e04a      	b.n	8008e74 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dde:	4b30      	ldr	r3, [pc, #192]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	099b      	lsrs	r3, r3, #6
 8008de4:	461a      	mov	r2, r3
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008dee:	f04f 0100 	mov.w	r1, #0
 8008df2:	ea02 0400 	and.w	r4, r2, r0
 8008df6:	ea03 0501 	and.w	r5, r3, r1
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	f04f 0200 	mov.w	r2, #0
 8008e02:	f04f 0300 	mov.w	r3, #0
 8008e06:	014b      	lsls	r3, r1, #5
 8008e08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008e0c:	0142      	lsls	r2, r0, #5
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	1b00      	subs	r0, r0, r4
 8008e14:	eb61 0105 	sbc.w	r1, r1, r5
 8008e18:	f04f 0200 	mov.w	r2, #0
 8008e1c:	f04f 0300 	mov.w	r3, #0
 8008e20:	018b      	lsls	r3, r1, #6
 8008e22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008e26:	0182      	lsls	r2, r0, #6
 8008e28:	1a12      	subs	r2, r2, r0
 8008e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8008e2e:	f04f 0000 	mov.w	r0, #0
 8008e32:	f04f 0100 	mov.w	r1, #0
 8008e36:	00d9      	lsls	r1, r3, #3
 8008e38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e3c:	00d0      	lsls	r0, r2, #3
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	1912      	adds	r2, r2, r4
 8008e44:	eb45 0303 	adc.w	r3, r5, r3
 8008e48:	f04f 0000 	mov.w	r0, #0
 8008e4c:	f04f 0100 	mov.w	r1, #0
 8008e50:	0299      	lsls	r1, r3, #10
 8008e52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008e56:	0290      	lsls	r0, r2, #10
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4619      	mov	r1, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	461a      	mov	r2, r3
 8008e64:	f04f 0300 	mov.w	r3, #0
 8008e68:	f7f7 fa1a 	bl	80002a0 <__aeabi_uldivmod>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4613      	mov	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e74:	4b0a      	ldr	r3, [pc, #40]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	0c1b      	lsrs	r3, r3, #16
 8008e7a:	f003 0303 	and.w	r3, r3, #3
 8008e7e:	3301      	adds	r3, #1
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e8c:	60bb      	str	r3, [r7, #8]
      break;
 8008e8e:	e002      	b.n	8008e96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e90:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0x164>)
 8008e92:	60bb      	str	r3, [r7, #8]
      break;
 8008e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e96:	68bb      	ldr	r3, [r7, #8]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8008ea0:	40023800 	.word	0x40023800
 8008ea4:	00f42400 	.word	0x00f42400
 8008ea8:	017d7840 	.word	0x017d7840

08008eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008eac:	b480      	push	{r7}
 8008eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008eb0:	4b03      	ldr	r3, [pc, #12]	; (8008ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20000000 	.word	0x20000000

08008ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ec8:	f7ff fff0 	bl	8008eac <HAL_RCC_GetHCLKFreq>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	0a9b      	lsrs	r3, r3, #10
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	4903      	ldr	r1, [pc, #12]	; (8008ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eda:	5ccb      	ldrb	r3, [r1, r3]
 8008edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40023800 	.word	0x40023800
 8008ee8:	0800bdc0 	.word	0x0800bdc0

08008eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ef0:	f7ff ffdc 	bl	8008eac <HAL_RCC_GetHCLKFreq>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	0b5b      	lsrs	r3, r3, #13
 8008efc:	f003 0307 	and.w	r3, r3, #7
 8008f00:	4903      	ldr	r1, [pc, #12]	; (8008f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f02:	5ccb      	ldrb	r3, [r1, r3]
 8008f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	40023800 	.word	0x40023800
 8008f10:	0800bdc0 	.word	0x0800bdc0

08008f14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e07b      	b.n	800901e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d108      	bne.n	8008f40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f36:	d009      	beq.n	8008f4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	61da      	str	r2, [r3, #28]
 8008f3e:	e005      	b.n	8008f4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d106      	bne.n	8008f6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7fe fe1e 	bl	8007ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f94:	431a      	orrs	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f9e:	431a      	orrs	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fbc:	431a      	orrs	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd0:	ea42 0103 	orr.w	r1, r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	0c1b      	lsrs	r3, r3, #16
 8008fea:	f003 0104 	and.w	r1, r3, #4
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	f003 0210 	and.w	r2, r3, #16
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69da      	ldr	r2, [r3, #28]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800900c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b088      	sub	sp, #32
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	603b      	str	r3, [r7, #0]
 8009032:	4613      	mov	r3, r2
 8009034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <HAL_SPI_Transmit+0x22>
 8009044:	2302      	movs	r3, #2
 8009046:	e126      	b.n	8009296 <HAL_SPI_Transmit+0x270>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009050:	f7fe ffec 	bl	800802c <HAL_GetTick>
 8009054:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009056:	88fb      	ldrh	r3, [r7, #6]
 8009058:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b01      	cmp	r3, #1
 8009064:	d002      	beq.n	800906c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009066:	2302      	movs	r3, #2
 8009068:	77fb      	strb	r3, [r7, #31]
    goto error;
 800906a:	e10b      	b.n	8009284 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <HAL_SPI_Transmit+0x52>
 8009072:	88fb      	ldrh	r3, [r7, #6]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d102      	bne.n	800907e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800907c:	e102      	b.n	8009284 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2203      	movs	r2, #3
 8009082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	88fa      	ldrh	r2, [r7, #6]
 8009096:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	88fa      	ldrh	r2, [r7, #6]
 800909c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c4:	d10f      	bne.n	80090e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f0:	2b40      	cmp	r3, #64	; 0x40
 80090f2:	d007      	beq.n	8009104 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009102:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800910c:	d14b      	bne.n	80091a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_SPI_Transmit+0xf6>
 8009116:	8afb      	ldrh	r3, [r7, #22]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d13e      	bne.n	800919a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009120:	881a      	ldrh	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912c:	1c9a      	adds	r2, r3, #2
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009140:	e02b      	b.n	800919a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b02      	cmp	r3, #2
 800914e:	d112      	bne.n	8009176 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009154:	881a      	ldrh	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009160:	1c9a      	adds	r2, r3, #2
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	86da      	strh	r2, [r3, #54]	; 0x36
 8009174:	e011      	b.n	800919a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009176:	f7fe ff59 	bl	800802c <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d803      	bhi.n	800918e <HAL_SPI_Transmit+0x168>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d102      	bne.n	8009194 <HAL_SPI_Transmit+0x16e>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009198:	e074      	b.n	8009284 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800919e:	b29b      	uxth	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1ce      	bne.n	8009142 <HAL_SPI_Transmit+0x11c>
 80091a4:	e04c      	b.n	8009240 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <HAL_SPI_Transmit+0x18e>
 80091ae:	8afb      	ldrh	r3, [r7, #22]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d140      	bne.n	8009236 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	330c      	adds	r3, #12
 80091be:	7812      	ldrb	r2, [r2, #0]
 80091c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80091da:	e02c      	b.n	8009236 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d113      	bne.n	8009212 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	330c      	adds	r3, #12
 80091f4:	7812      	ldrb	r2, [r2, #0]
 80091f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009210:	e011      	b.n	8009236 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009212:	f7fe ff0b 	bl	800802c <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d803      	bhi.n	800922a <HAL_SPI_Transmit+0x204>
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009228:	d102      	bne.n	8009230 <HAL_SPI_Transmit+0x20a>
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d102      	bne.n	8009236 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009234:	e026      	b.n	8009284 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800923a:	b29b      	uxth	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1cd      	bne.n	80091dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fbcb 	bl	80099e0 <SPI_EndRxTxTransaction>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2220      	movs	r2, #32
 8009254:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800925e:	2300      	movs	r3, #0
 8009260:	613b      	str	r3, [r7, #16]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	613b      	str	r3, [r7, #16]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	77fb      	strb	r3, [r7, #31]
 8009280:	e000      	b.n	8009284 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009282:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009294:	7ffb      	ldrb	r3, [r7, #31]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3720      	adds	r7, #32
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b088      	sub	sp, #32
 80092a2:	af02      	add	r7, sp, #8
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	4613      	mov	r3, r2
 80092ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092ba:	d112      	bne.n	80092e2 <HAL_SPI_Receive+0x44>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10e      	bne.n	80092e2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2204      	movs	r2, #4
 80092c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80092cc:	88fa      	ldrh	r2, [r7, #6]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	4613      	mov	r3, r2
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 f8f1 	bl	80094c0 <HAL_SPI_TransmitReceive>
 80092de:	4603      	mov	r3, r0
 80092e0:	e0ea      	b.n	80094b8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d101      	bne.n	80092f0 <HAL_SPI_Receive+0x52>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e0e3      	b.n	80094b8 <HAL_SPI_Receive+0x21a>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092f8:	f7fe fe98 	bl	800802c <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b01      	cmp	r3, #1
 8009308:	d002      	beq.n	8009310 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800930a:	2302      	movs	r3, #2
 800930c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800930e:	e0ca      	b.n	80094a6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <HAL_SPI_Receive+0x7e>
 8009316:	88fb      	ldrh	r3, [r7, #6]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d102      	bne.n	8009322 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009320:	e0c1      	b.n	80094a6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2204      	movs	r2, #4
 8009326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	88fa      	ldrh	r2, [r7, #6]
 800933a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	88fa      	ldrh	r2, [r7, #6]
 8009340:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009368:	d10f      	bne.n	800938a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009388:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009394:	2b40      	cmp	r3, #64	; 0x40
 8009396:	d007      	beq.n	80093a8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d162      	bne.n	8009476 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80093b0:	e02e      	b.n	8009410 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d115      	bne.n	80093ec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f103 020c 	add.w	r2, r3, #12
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	7812      	ldrb	r2, [r2, #0]
 80093ce:	b2d2      	uxtb	r2, r2
 80093d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093ea:	e011      	b.n	8009410 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093ec:	f7fe fe1e 	bl	800802c <HAL_GetTick>
 80093f0:	4602      	mov	r2, r0
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d803      	bhi.n	8009404 <HAL_SPI_Receive+0x166>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009402:	d102      	bne.n	800940a <HAL_SPI_Receive+0x16c>
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d102      	bne.n	8009410 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800940e:	e04a      	b.n	80094a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1cb      	bne.n	80093b2 <HAL_SPI_Receive+0x114>
 800941a:	e031      	b.n	8009480 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b01      	cmp	r3, #1
 8009428:	d113      	bne.n	8009452 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68da      	ldr	r2, [r3, #12]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009434:	b292      	uxth	r2, r2
 8009436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	1c9a      	adds	r2, r3, #2
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009446:	b29b      	uxth	r3, r3
 8009448:	3b01      	subs	r3, #1
 800944a:	b29a      	uxth	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009450:	e011      	b.n	8009476 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009452:	f7fe fdeb 	bl	800802c <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d803      	bhi.n	800946a <HAL_SPI_Receive+0x1cc>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009468:	d102      	bne.n	8009470 <HAL_SPI_Receive+0x1d2>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009474:	e017      	b.n	80094a6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800947a:	b29b      	uxth	r3, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1cd      	bne.n	800941c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fa45 	bl	8009914 <SPI_EndRxTransaction>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2220      	movs	r2, #32
 8009494:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	75fb      	strb	r3, [r7, #23]
 80094a2:	e000      	b.n	80094a6 <HAL_SPI_Receive+0x208>
  }

error :
 80094a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08c      	sub	sp, #48	; 0x30
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80094ce:	2301      	movs	r3, #1
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_SPI_TransmitReceive+0x26>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e18a      	b.n	80097fc <HAL_SPI_TransmitReceive+0x33c>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094ee:	f7fe fd9d 	bl	800802c <HAL_GetTick>
 80094f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009504:	887b      	ldrh	r3, [r7, #2]
 8009506:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800950c:	2b01      	cmp	r3, #1
 800950e:	d00f      	beq.n	8009530 <HAL_SPI_TransmitReceive+0x70>
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009516:	d107      	bne.n	8009528 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d103      	bne.n	8009528 <HAL_SPI_TransmitReceive+0x68>
 8009520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009524:	2b04      	cmp	r3, #4
 8009526:	d003      	beq.n	8009530 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009528:	2302      	movs	r3, #2
 800952a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800952e:	e15b      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d005      	beq.n	8009542 <HAL_SPI_TransmitReceive+0x82>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <HAL_SPI_TransmitReceive+0x82>
 800953c:	887b      	ldrh	r3, [r7, #2]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d103      	bne.n	800954a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009548:	e14e      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b04      	cmp	r3, #4
 8009554:	d003      	beq.n	800955e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2205      	movs	r2, #5
 800955a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	887a      	ldrh	r2, [r7, #2]
 800956e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	887a      	ldrh	r2, [r7, #2]
 8009574:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	887a      	ldrh	r2, [r7, #2]
 8009580:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	887a      	ldrh	r2, [r7, #2]
 8009586:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	d007      	beq.n	80095b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ba:	d178      	bne.n	80096ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <HAL_SPI_TransmitReceive+0x10a>
 80095c4:	8b7b      	ldrh	r3, [r7, #26]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d166      	bne.n	8009698 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	881a      	ldrh	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	1c9a      	adds	r2, r3, #2
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095ee:	e053      	b.n	8009698 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d11b      	bne.n	8009636 <HAL_SPI_TransmitReceive+0x176>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d016      	beq.n	8009636 <HAL_SPI_TransmitReceive+0x176>
 8009608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960a:	2b01      	cmp	r3, #1
 800960c:	d113      	bne.n	8009636 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	881a      	ldrh	r2, [r3, #0]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	1c9a      	adds	r2, r3, #2
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009628:	b29b      	uxth	r3, r3
 800962a:	3b01      	subs	r3, #1
 800962c:	b29a      	uxth	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b01      	cmp	r3, #1
 8009642:	d119      	bne.n	8009678 <HAL_SPI_TransmitReceive+0x1b8>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d014      	beq.n	8009678 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	b292      	uxth	r2, r2
 800965a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009660:	1c9a      	adds	r2, r3, #2
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800966a:	b29b      	uxth	r3, r3
 800966c:	3b01      	subs	r3, #1
 800966e:	b29a      	uxth	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009674:	2301      	movs	r3, #1
 8009676:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009678:	f7fe fcd8 	bl	800802c <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009684:	429a      	cmp	r2, r3
 8009686:	d807      	bhi.n	8009698 <HAL_SPI_TransmitReceive+0x1d8>
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d003      	beq.n	8009698 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009696:	e0a7      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1a6      	bne.n	80095f0 <HAL_SPI_TransmitReceive+0x130>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1a1      	bne.n	80095f0 <HAL_SPI_TransmitReceive+0x130>
 80096ac:	e07c      	b.n	80097a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <HAL_SPI_TransmitReceive+0x1fc>
 80096b6:	8b7b      	ldrh	r3, [r7, #26]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d16b      	bne.n	8009794 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	330c      	adds	r3, #12
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d8:	b29b      	uxth	r3, r3
 80096da:	3b01      	subs	r3, #1
 80096dc:	b29a      	uxth	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096e2:	e057      	b.n	8009794 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d11c      	bne.n	800972c <HAL_SPI_TransmitReceive+0x26c>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d017      	beq.n	800972c <HAL_SPI_TransmitReceive+0x26c>
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d114      	bne.n	800972c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	330c      	adds	r3, #12
 800970c:	7812      	ldrb	r2, [r2, #0]
 800970e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800971e:	b29b      	uxth	r3, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009728:	2300      	movs	r3, #0
 800972a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b01      	cmp	r3, #1
 8009738:	d119      	bne.n	800976e <HAL_SPI_TransmitReceive+0x2ae>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800973e:	b29b      	uxth	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	d014      	beq.n	800976e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b01      	subs	r3, #1
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800976a:	2301      	movs	r3, #1
 800976c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800976e:	f7fe fc5d 	bl	800802c <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800977a:	429a      	cmp	r2, r3
 800977c:	d803      	bhi.n	8009786 <HAL_SPI_TransmitReceive+0x2c6>
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d102      	bne.n	800978c <HAL_SPI_TransmitReceive+0x2cc>
 8009786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009788:	2b00      	cmp	r3, #0
 800978a:	d103      	bne.n	8009794 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009792:	e029      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009798:	b29b      	uxth	r3, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1a2      	bne.n	80096e4 <HAL_SPI_TransmitReceive+0x224>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d19d      	bne.n	80096e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f917 	bl	80099e0 <SPI_EndRxTxTransaction>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d006      	beq.n	80097c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2220      	movs	r2, #32
 80097c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80097c4:	e010      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10b      	bne.n	80097e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	617b      	str	r3, [r7, #20]
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	e000      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80097e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3730      	adds	r7, #48	; 0x30
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4613      	mov	r3, r2
 8009812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009814:	f7fe fc0a 	bl	800802c <HAL_GetTick>
 8009818:	4602      	mov	r2, r0
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	4413      	add	r3, r2
 8009822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009824:	f7fe fc02 	bl	800802c <HAL_GetTick>
 8009828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800982a:	4b39      	ldr	r3, [pc, #228]	; (8009910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	015b      	lsls	r3, r3, #5
 8009830:	0d1b      	lsrs	r3, r3, #20
 8009832:	69fa      	ldr	r2, [r7, #28]
 8009834:	fb02 f303 	mul.w	r3, r2, r3
 8009838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800983a:	e054      	b.n	80098e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d050      	beq.n	80098e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009844:	f7fe fbf2 	bl	800802c <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	69fa      	ldr	r2, [r7, #28]
 8009850:	429a      	cmp	r2, r3
 8009852:	d902      	bls.n	800985a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d13d      	bne.n	80098d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009872:	d111      	bne.n	8009898 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987c:	d004      	beq.n	8009888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009886:	d107      	bne.n	8009898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a0:	d10f      	bne.n	80098c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e017      	b.n	8009906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	4013      	ands	r3, r2
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	bf0c      	ite	eq
 80098f6:	2301      	moveq	r3, #1
 80098f8:	2300      	movne	r3, #0
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	429a      	cmp	r2, r3
 8009902:	d19b      	bne.n	800983c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000000 	.word	0x20000000

08009914 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af02      	add	r7, sp, #8
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009928:	d111      	bne.n	800994e <SPI_EndRxTransaction+0x3a>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009932:	d004      	beq.n	800993e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800993c:	d107      	bne.n	800994e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800994c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009956:	d12a      	bne.n	80099ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009960:	d012      	beq.n	8009988 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2200      	movs	r2, #0
 800996a:	2180      	movs	r1, #128	; 0x80
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7ff ff49 	bl	8009804 <SPI_WaitFlagStateUntilTimeout>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d02d      	beq.n	80099d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997c:	f043 0220 	orr.w	r2, r3, #32
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e026      	b.n	80099d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2200      	movs	r2, #0
 8009990:	2101      	movs	r1, #1
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7ff ff36 	bl	8009804 <SPI_WaitFlagStateUntilTimeout>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d01a      	beq.n	80099d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a2:	f043 0220 	orr.w	r2, r3, #32
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e013      	b.n	80099d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2200      	movs	r2, #0
 80099b6:	2101      	movs	r1, #1
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f7ff ff23 	bl	8009804 <SPI_WaitFlagStateUntilTimeout>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c8:	f043 0220 	orr.w	r2, r3, #32
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e000      	b.n	80099d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80099ec:	4b1b      	ldr	r3, [pc, #108]	; (8009a5c <SPI_EndRxTxTransaction+0x7c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a1b      	ldr	r2, [pc, #108]	; (8009a60 <SPI_EndRxTxTransaction+0x80>)
 80099f2:	fba2 2303 	umull	r2, r3, r2, r3
 80099f6:	0d5b      	lsrs	r3, r3, #21
 80099f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099fc:	fb02 f303 	mul.w	r3, r2, r3
 8009a00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a0a:	d112      	bne.n	8009a32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2200      	movs	r2, #0
 8009a14:	2180      	movs	r1, #128	; 0x80
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7ff fef4 	bl	8009804 <SPI_WaitFlagStateUntilTimeout>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d016      	beq.n	8009a50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	f043 0220 	orr.w	r2, r3, #32
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e00f      	b.n	8009a52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00a      	beq.n	8009a4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a48:	2b80      	cmp	r3, #128	; 0x80
 8009a4a:	d0f2      	beq.n	8009a32 <SPI_EndRxTxTransaction+0x52>
 8009a4c:	e000      	b.n	8009a50 <SPI_EndRxTxTransaction+0x70>
        break;
 8009a4e:	bf00      	nop
  }

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20000000 	.word	0x20000000
 8009a60:	165e9f81 	.word	0x165e9f81

08009a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e03f      	b.n	8009af6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d106      	bne.n	8009a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7fe f8f4 	bl	8007c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2224      	movs	r2, #36	; 0x24
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f829 	bl	8009b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	691a      	ldr	r2, [r3, #16]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	695a      	ldr	r2, [r3, #20]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2220      	movs	r2, #32
 8009ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2220      	movs	r2, #32
 8009af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	b09f      	sub	sp, #124	; 0x7c
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b16:	68d9      	ldr	r1, [r3, #12]
 8009b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	ea40 0301 	orr.w	r3, r0, r1
 8009b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b24:	689a      	ldr	r2, [r3, #8]
 8009b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b2e:	695b      	ldr	r3, [r3, #20]
 8009b30:	431a      	orrs	r2, r3
 8009b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009b44:	f021 010c 	bic.w	r1, r1, #12
 8009b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b5e:	6999      	ldr	r1, [r3, #24]
 8009b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	ea40 0301 	orr.w	r3, r0, r1
 8009b68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	4bc5      	ldr	r3, [pc, #788]	; (8009e84 <UART_SetConfig+0x384>)
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d004      	beq.n	8009b7e <UART_SetConfig+0x7e>
 8009b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	4bc3      	ldr	r3, [pc, #780]	; (8009e88 <UART_SetConfig+0x388>)
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d103      	bne.n	8009b86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b7e:	f7ff f9b5 	bl	8008eec <HAL_RCC_GetPCLK2Freq>
 8009b82:	6778      	str	r0, [r7, #116]	; 0x74
 8009b84:	e002      	b.n	8009b8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b86:	f7ff f99d 	bl	8008ec4 <HAL_RCC_GetPCLK1Freq>
 8009b8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b94:	f040 80b6 	bne.w	8009d04 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b9a:	461c      	mov	r4, r3
 8009b9c:	f04f 0500 	mov.w	r5, #0
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	462b      	mov	r3, r5
 8009ba4:	1891      	adds	r1, r2, r2
 8009ba6:	6439      	str	r1, [r7, #64]	; 0x40
 8009ba8:	415b      	adcs	r3, r3
 8009baa:	647b      	str	r3, [r7, #68]	; 0x44
 8009bac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009bb0:	1912      	adds	r2, r2, r4
 8009bb2:	eb45 0303 	adc.w	r3, r5, r3
 8009bb6:	f04f 0000 	mov.w	r0, #0
 8009bba:	f04f 0100 	mov.w	r1, #0
 8009bbe:	00d9      	lsls	r1, r3, #3
 8009bc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009bc4:	00d0      	lsls	r0, r2, #3
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	1911      	adds	r1, r2, r4
 8009bcc:	6639      	str	r1, [r7, #96]	; 0x60
 8009bce:	416b      	adcs	r3, r5
 8009bd0:	667b      	str	r3, [r7, #100]	; 0x64
 8009bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	f04f 0300 	mov.w	r3, #0
 8009bdc:	1891      	adds	r1, r2, r2
 8009bde:	63b9      	str	r1, [r7, #56]	; 0x38
 8009be0:	415b      	adcs	r3, r3
 8009be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009be4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009be8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009bec:	f7f6 fb58 	bl	80002a0 <__aeabi_uldivmod>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4ba5      	ldr	r3, [pc, #660]	; (8009e8c <UART_SetConfig+0x38c>)
 8009bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	011e      	lsls	r6, r3, #4
 8009bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c00:	461c      	mov	r4, r3
 8009c02:	f04f 0500 	mov.w	r5, #0
 8009c06:	4622      	mov	r2, r4
 8009c08:	462b      	mov	r3, r5
 8009c0a:	1891      	adds	r1, r2, r2
 8009c0c:	6339      	str	r1, [r7, #48]	; 0x30
 8009c0e:	415b      	adcs	r3, r3
 8009c10:	637b      	str	r3, [r7, #52]	; 0x34
 8009c12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009c16:	1912      	adds	r2, r2, r4
 8009c18:	eb45 0303 	adc.w	r3, r5, r3
 8009c1c:	f04f 0000 	mov.w	r0, #0
 8009c20:	f04f 0100 	mov.w	r1, #0
 8009c24:	00d9      	lsls	r1, r3, #3
 8009c26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009c2a:	00d0      	lsls	r0, r2, #3
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	1911      	adds	r1, r2, r4
 8009c32:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c34:	416b      	adcs	r3, r5
 8009c36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	f04f 0300 	mov.w	r3, #0
 8009c42:	1891      	adds	r1, r2, r2
 8009c44:	62b9      	str	r1, [r7, #40]	; 0x28
 8009c46:	415b      	adcs	r3, r3
 8009c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009c52:	f7f6 fb25 	bl	80002a0 <__aeabi_uldivmod>
 8009c56:	4602      	mov	r2, r0
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4b8c      	ldr	r3, [pc, #560]	; (8009e8c <UART_SetConfig+0x38c>)
 8009c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8009c60:	095b      	lsrs	r3, r3, #5
 8009c62:	2164      	movs	r1, #100	; 0x64
 8009c64:	fb01 f303 	mul.w	r3, r1, r3
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	3332      	adds	r3, #50	; 0x32
 8009c6e:	4a87      	ldr	r2, [pc, #540]	; (8009e8c <UART_SetConfig+0x38c>)
 8009c70:	fba2 2303 	umull	r2, r3, r2, r3
 8009c74:	095b      	lsrs	r3, r3, #5
 8009c76:	005b      	lsls	r3, r3, #1
 8009c78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c7c:	441e      	add	r6, r3
 8009c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c80:	4618      	mov	r0, r3
 8009c82:	f04f 0100 	mov.w	r1, #0
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	1894      	adds	r4, r2, r2
 8009c8c:	623c      	str	r4, [r7, #32]
 8009c8e:	415b      	adcs	r3, r3
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
 8009c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c96:	1812      	adds	r2, r2, r0
 8009c98:	eb41 0303 	adc.w	r3, r1, r3
 8009c9c:	f04f 0400 	mov.w	r4, #0
 8009ca0:	f04f 0500 	mov.w	r5, #0
 8009ca4:	00dd      	lsls	r5, r3, #3
 8009ca6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009caa:	00d4      	lsls	r4, r2, #3
 8009cac:	4622      	mov	r2, r4
 8009cae:	462b      	mov	r3, r5
 8009cb0:	1814      	adds	r4, r2, r0
 8009cb2:	653c      	str	r4, [r7, #80]	; 0x50
 8009cb4:	414b      	adcs	r3, r1
 8009cb6:	657b      	str	r3, [r7, #84]	; 0x54
 8009cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	f04f 0300 	mov.w	r3, #0
 8009cc2:	1891      	adds	r1, r2, r2
 8009cc4:	61b9      	str	r1, [r7, #24]
 8009cc6:	415b      	adcs	r3, r3
 8009cc8:	61fb      	str	r3, [r7, #28]
 8009cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009cd2:	f7f6 fae5 	bl	80002a0 <__aeabi_uldivmod>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4b6c      	ldr	r3, [pc, #432]	; (8009e8c <UART_SetConfig+0x38c>)
 8009cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ce0:	095b      	lsrs	r3, r3, #5
 8009ce2:	2164      	movs	r1, #100	; 0x64
 8009ce4:	fb01 f303 	mul.w	r3, r1, r3
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	00db      	lsls	r3, r3, #3
 8009cec:	3332      	adds	r3, #50	; 0x32
 8009cee:	4a67      	ldr	r2, [pc, #412]	; (8009e8c <UART_SetConfig+0x38c>)
 8009cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf4:	095b      	lsrs	r3, r3, #5
 8009cf6:	f003 0207 	and.w	r2, r3, #7
 8009cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4432      	add	r2, r6
 8009d00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d02:	e0b9      	b.n	8009e78 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d06:	461c      	mov	r4, r3
 8009d08:	f04f 0500 	mov.w	r5, #0
 8009d0c:	4622      	mov	r2, r4
 8009d0e:	462b      	mov	r3, r5
 8009d10:	1891      	adds	r1, r2, r2
 8009d12:	6139      	str	r1, [r7, #16]
 8009d14:	415b      	adcs	r3, r3
 8009d16:	617b      	str	r3, [r7, #20]
 8009d18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009d1c:	1912      	adds	r2, r2, r4
 8009d1e:	eb45 0303 	adc.w	r3, r5, r3
 8009d22:	f04f 0000 	mov.w	r0, #0
 8009d26:	f04f 0100 	mov.w	r1, #0
 8009d2a:	00d9      	lsls	r1, r3, #3
 8009d2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d30:	00d0      	lsls	r0, r2, #3
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	eb12 0804 	adds.w	r8, r2, r4
 8009d3a:	eb43 0905 	adc.w	r9, r3, r5
 8009d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f04f 0100 	mov.w	r1, #0
 8009d48:	f04f 0200 	mov.w	r2, #0
 8009d4c:	f04f 0300 	mov.w	r3, #0
 8009d50:	008b      	lsls	r3, r1, #2
 8009d52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009d56:	0082      	lsls	r2, r0, #2
 8009d58:	4640      	mov	r0, r8
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	f7f6 faa0 	bl	80002a0 <__aeabi_uldivmod>
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4b49      	ldr	r3, [pc, #292]	; (8009e8c <UART_SetConfig+0x38c>)
 8009d66:	fba3 2302 	umull	r2, r3, r3, r2
 8009d6a:	095b      	lsrs	r3, r3, #5
 8009d6c:	011e      	lsls	r6, r3, #4
 8009d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d70:	4618      	mov	r0, r3
 8009d72:	f04f 0100 	mov.w	r1, #0
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	1894      	adds	r4, r2, r2
 8009d7c:	60bc      	str	r4, [r7, #8]
 8009d7e:	415b      	adcs	r3, r3
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d86:	1812      	adds	r2, r2, r0
 8009d88:	eb41 0303 	adc.w	r3, r1, r3
 8009d8c:	f04f 0400 	mov.w	r4, #0
 8009d90:	f04f 0500 	mov.w	r5, #0
 8009d94:	00dd      	lsls	r5, r3, #3
 8009d96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009d9a:	00d4      	lsls	r4, r2, #3
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	462b      	mov	r3, r5
 8009da0:	1814      	adds	r4, r2, r0
 8009da2:	64bc      	str	r4, [r7, #72]	; 0x48
 8009da4:	414b      	adcs	r3, r1
 8009da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f04f 0100 	mov.w	r1, #0
 8009db2:	f04f 0200 	mov.w	r2, #0
 8009db6:	f04f 0300 	mov.w	r3, #0
 8009dba:	008b      	lsls	r3, r1, #2
 8009dbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009dc0:	0082      	lsls	r2, r0, #2
 8009dc2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009dc6:	f7f6 fa6b 	bl	80002a0 <__aeabi_uldivmod>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4b2f      	ldr	r3, [pc, #188]	; (8009e8c <UART_SetConfig+0x38c>)
 8009dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8009dd4:	095b      	lsrs	r3, r3, #5
 8009dd6:	2164      	movs	r1, #100	; 0x64
 8009dd8:	fb01 f303 	mul.w	r3, r1, r3
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	011b      	lsls	r3, r3, #4
 8009de0:	3332      	adds	r3, #50	; 0x32
 8009de2:	4a2a      	ldr	r2, [pc, #168]	; (8009e8c <UART_SetConfig+0x38c>)
 8009de4:	fba2 2303 	umull	r2, r3, r2, r3
 8009de8:	095b      	lsrs	r3, r3, #5
 8009dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dee:	441e      	add	r6, r3
 8009df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009df2:	4618      	mov	r0, r3
 8009df4:	f04f 0100 	mov.w	r1, #0
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	1894      	adds	r4, r2, r2
 8009dfe:	603c      	str	r4, [r7, #0]
 8009e00:	415b      	adcs	r3, r3
 8009e02:	607b      	str	r3, [r7, #4]
 8009e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e08:	1812      	adds	r2, r2, r0
 8009e0a:	eb41 0303 	adc.w	r3, r1, r3
 8009e0e:	f04f 0400 	mov.w	r4, #0
 8009e12:	f04f 0500 	mov.w	r5, #0
 8009e16:	00dd      	lsls	r5, r3, #3
 8009e18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e1c:	00d4      	lsls	r4, r2, #3
 8009e1e:	4622      	mov	r2, r4
 8009e20:	462b      	mov	r3, r5
 8009e22:	eb12 0a00 	adds.w	sl, r2, r0
 8009e26:	eb43 0b01 	adc.w	fp, r3, r1
 8009e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f04f 0100 	mov.w	r1, #0
 8009e34:	f04f 0200 	mov.w	r2, #0
 8009e38:	f04f 0300 	mov.w	r3, #0
 8009e3c:	008b      	lsls	r3, r1, #2
 8009e3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e42:	0082      	lsls	r2, r0, #2
 8009e44:	4650      	mov	r0, sl
 8009e46:	4659      	mov	r1, fp
 8009e48:	f7f6 fa2a 	bl	80002a0 <__aeabi_uldivmod>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4b0e      	ldr	r3, [pc, #56]	; (8009e8c <UART_SetConfig+0x38c>)
 8009e52:	fba3 1302 	umull	r1, r3, r3, r2
 8009e56:	095b      	lsrs	r3, r3, #5
 8009e58:	2164      	movs	r1, #100	; 0x64
 8009e5a:	fb01 f303 	mul.w	r3, r1, r3
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	011b      	lsls	r3, r3, #4
 8009e62:	3332      	adds	r3, #50	; 0x32
 8009e64:	4a09      	ldr	r2, [pc, #36]	; (8009e8c <UART_SetConfig+0x38c>)
 8009e66:	fba2 2303 	umull	r2, r3, r2, r3
 8009e6a:	095b      	lsrs	r3, r3, #5
 8009e6c:	f003 020f 	and.w	r2, r3, #15
 8009e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4432      	add	r2, r6
 8009e76:	609a      	str	r2, [r3, #8]
}
 8009e78:	bf00      	nop
 8009e7a:	377c      	adds	r7, #124	; 0x7c
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e82:	bf00      	nop
 8009e84:	40011000 	.word	0x40011000
 8009e88:	40011400 	.word	0x40011400
 8009e8c:	51eb851f 	.word	0x51eb851f

08009e90 <__assert_func>:
 8009e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e92:	4614      	mov	r4, r2
 8009e94:	461a      	mov	r2, r3
 8009e96:	4b09      	ldr	r3, [pc, #36]	; (8009ebc <__assert_func+0x2c>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	68d8      	ldr	r0, [r3, #12]
 8009e9e:	b14c      	cbz	r4, 8009eb4 <__assert_func+0x24>
 8009ea0:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <__assert_func+0x30>)
 8009ea2:	9100      	str	r1, [sp, #0]
 8009ea4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ea8:	4906      	ldr	r1, [pc, #24]	; (8009ec4 <__assert_func+0x34>)
 8009eaa:	462b      	mov	r3, r5
 8009eac:	f000 f814 	bl	8009ed8 <fiprintf>
 8009eb0:	f000 fd2a 	bl	800a908 <abort>
 8009eb4:	4b04      	ldr	r3, [pc, #16]	; (8009ec8 <__assert_func+0x38>)
 8009eb6:	461c      	mov	r4, r3
 8009eb8:	e7f3      	b.n	8009ea2 <__assert_func+0x12>
 8009eba:	bf00      	nop
 8009ebc:	2000000c 	.word	0x2000000c
 8009ec0:	0800bdc8 	.word	0x0800bdc8
 8009ec4:	0800bdd5 	.word	0x0800bdd5
 8009ec8:	0800be03 	.word	0x0800be03

08009ecc <__errno>:
 8009ecc:	4b01      	ldr	r3, [pc, #4]	; (8009ed4 <__errno+0x8>)
 8009ece:	6818      	ldr	r0, [r3, #0]
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	2000000c 	.word	0x2000000c

08009ed8 <fiprintf>:
 8009ed8:	b40e      	push	{r1, r2, r3}
 8009eda:	b503      	push	{r0, r1, lr}
 8009edc:	4601      	mov	r1, r0
 8009ede:	ab03      	add	r3, sp, #12
 8009ee0:	4805      	ldr	r0, [pc, #20]	; (8009ef8 <fiprintf+0x20>)
 8009ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee6:	6800      	ldr	r0, [r0, #0]
 8009ee8:	9301      	str	r3, [sp, #4]
 8009eea:	f000 f933 	bl	800a154 <_vfiprintf_r>
 8009eee:	b002      	add	sp, #8
 8009ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ef4:	b003      	add	sp, #12
 8009ef6:	4770      	bx	lr
 8009ef8:	2000000c 	.word	0x2000000c

08009efc <__libc_init_array>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	4d0d      	ldr	r5, [pc, #52]	; (8009f34 <__libc_init_array+0x38>)
 8009f00:	4c0d      	ldr	r4, [pc, #52]	; (8009f38 <__libc_init_array+0x3c>)
 8009f02:	1b64      	subs	r4, r4, r5
 8009f04:	10a4      	asrs	r4, r4, #2
 8009f06:	2600      	movs	r6, #0
 8009f08:	42a6      	cmp	r6, r4
 8009f0a:	d109      	bne.n	8009f20 <__libc_init_array+0x24>
 8009f0c:	4d0b      	ldr	r5, [pc, #44]	; (8009f3c <__libc_init_array+0x40>)
 8009f0e:	4c0c      	ldr	r4, [pc, #48]	; (8009f40 <__libc_init_array+0x44>)
 8009f10:	f001 f81c 	bl	800af4c <_init>
 8009f14:	1b64      	subs	r4, r4, r5
 8009f16:	10a4      	asrs	r4, r4, #2
 8009f18:	2600      	movs	r6, #0
 8009f1a:	42a6      	cmp	r6, r4
 8009f1c:	d105      	bne.n	8009f2a <__libc_init_array+0x2e>
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
 8009f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f24:	4798      	blx	r3
 8009f26:	3601      	adds	r6, #1
 8009f28:	e7ee      	b.n	8009f08 <__libc_init_array+0xc>
 8009f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f2e:	4798      	blx	r3
 8009f30:	3601      	adds	r6, #1
 8009f32:	e7f2      	b.n	8009f1a <__libc_init_array+0x1e>
 8009f34:	0800bea4 	.word	0x0800bea4
 8009f38:	0800bea4 	.word	0x0800bea4
 8009f3c:	0800bea4 	.word	0x0800bea4
 8009f40:	0800bea8 	.word	0x0800bea8

08009f44 <malloc>:
 8009f44:	4b02      	ldr	r3, [pc, #8]	; (8009f50 <malloc+0xc>)
 8009f46:	4601      	mov	r1, r0
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	f000 b87f 	b.w	800a04c <_malloc_r>
 8009f4e:	bf00      	nop
 8009f50:	2000000c 	.word	0x2000000c

08009f54 <free>:
 8009f54:	4b02      	ldr	r3, [pc, #8]	; (8009f60 <free+0xc>)
 8009f56:	4601      	mov	r1, r0
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	f000 b827 	b.w	8009fac <_free_r>
 8009f5e:	bf00      	nop
 8009f60:	2000000c 	.word	0x2000000c

08009f64 <memcmp>:
 8009f64:	b530      	push	{r4, r5, lr}
 8009f66:	3901      	subs	r1, #1
 8009f68:	2400      	movs	r4, #0
 8009f6a:	42a2      	cmp	r2, r4
 8009f6c:	d101      	bne.n	8009f72 <memcmp+0xe>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e005      	b.n	8009f7e <memcmp+0x1a>
 8009f72:	5d03      	ldrb	r3, [r0, r4]
 8009f74:	3401      	adds	r4, #1
 8009f76:	5d0d      	ldrb	r5, [r1, r4]
 8009f78:	42ab      	cmp	r3, r5
 8009f7a:	d0f6      	beq.n	8009f6a <memcmp+0x6>
 8009f7c:	1b58      	subs	r0, r3, r5
 8009f7e:	bd30      	pop	{r4, r5, pc}

08009f80 <memcpy>:
 8009f80:	440a      	add	r2, r1
 8009f82:	4291      	cmp	r1, r2
 8009f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f88:	d100      	bne.n	8009f8c <memcpy+0xc>
 8009f8a:	4770      	bx	lr
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f96:	4291      	cmp	r1, r2
 8009f98:	d1f9      	bne.n	8009f8e <memcpy+0xe>
 8009f9a:	bd10      	pop	{r4, pc}

08009f9c <memset>:
 8009f9c:	4402      	add	r2, r0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d100      	bne.n	8009fa6 <memset+0xa>
 8009fa4:	4770      	bx	lr
 8009fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8009faa:	e7f9      	b.n	8009fa0 <memset+0x4>

08009fac <_free_r>:
 8009fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fae:	2900      	cmp	r1, #0
 8009fb0:	d048      	beq.n	800a044 <_free_r+0x98>
 8009fb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fb6:	9001      	str	r0, [sp, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f1a1 0404 	sub.w	r4, r1, #4
 8009fbe:	bfb8      	it	lt
 8009fc0:	18e4      	addlt	r4, r4, r3
 8009fc2:	f000 fec7 	bl	800ad54 <__malloc_lock>
 8009fc6:	4a20      	ldr	r2, [pc, #128]	; (800a048 <_free_r+0x9c>)
 8009fc8:	9801      	ldr	r0, [sp, #4]
 8009fca:	6813      	ldr	r3, [r2, #0]
 8009fcc:	4615      	mov	r5, r2
 8009fce:	b933      	cbnz	r3, 8009fde <_free_r+0x32>
 8009fd0:	6063      	str	r3, [r4, #4]
 8009fd2:	6014      	str	r4, [r2, #0]
 8009fd4:	b003      	add	sp, #12
 8009fd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fda:	f000 bec1 	b.w	800ad60 <__malloc_unlock>
 8009fde:	42a3      	cmp	r3, r4
 8009fe0:	d90b      	bls.n	8009ffa <_free_r+0x4e>
 8009fe2:	6821      	ldr	r1, [r4, #0]
 8009fe4:	1862      	adds	r2, r4, r1
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	bf04      	itt	eq
 8009fea:	681a      	ldreq	r2, [r3, #0]
 8009fec:	685b      	ldreq	r3, [r3, #4]
 8009fee:	6063      	str	r3, [r4, #4]
 8009ff0:	bf04      	itt	eq
 8009ff2:	1852      	addeq	r2, r2, r1
 8009ff4:	6022      	streq	r2, [r4, #0]
 8009ff6:	602c      	str	r4, [r5, #0]
 8009ff8:	e7ec      	b.n	8009fd4 <_free_r+0x28>
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	b10b      	cbz	r3, 800a004 <_free_r+0x58>
 800a000:	42a3      	cmp	r3, r4
 800a002:	d9fa      	bls.n	8009ffa <_free_r+0x4e>
 800a004:	6811      	ldr	r1, [r2, #0]
 800a006:	1855      	adds	r5, r2, r1
 800a008:	42a5      	cmp	r5, r4
 800a00a:	d10b      	bne.n	800a024 <_free_r+0x78>
 800a00c:	6824      	ldr	r4, [r4, #0]
 800a00e:	4421      	add	r1, r4
 800a010:	1854      	adds	r4, r2, r1
 800a012:	42a3      	cmp	r3, r4
 800a014:	6011      	str	r1, [r2, #0]
 800a016:	d1dd      	bne.n	8009fd4 <_free_r+0x28>
 800a018:	681c      	ldr	r4, [r3, #0]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	6053      	str	r3, [r2, #4]
 800a01e:	4421      	add	r1, r4
 800a020:	6011      	str	r1, [r2, #0]
 800a022:	e7d7      	b.n	8009fd4 <_free_r+0x28>
 800a024:	d902      	bls.n	800a02c <_free_r+0x80>
 800a026:	230c      	movs	r3, #12
 800a028:	6003      	str	r3, [r0, #0]
 800a02a:	e7d3      	b.n	8009fd4 <_free_r+0x28>
 800a02c:	6825      	ldr	r5, [r4, #0]
 800a02e:	1961      	adds	r1, r4, r5
 800a030:	428b      	cmp	r3, r1
 800a032:	bf04      	itt	eq
 800a034:	6819      	ldreq	r1, [r3, #0]
 800a036:	685b      	ldreq	r3, [r3, #4]
 800a038:	6063      	str	r3, [r4, #4]
 800a03a:	bf04      	itt	eq
 800a03c:	1949      	addeq	r1, r1, r5
 800a03e:	6021      	streq	r1, [r4, #0]
 800a040:	6054      	str	r4, [r2, #4]
 800a042:	e7c7      	b.n	8009fd4 <_free_r+0x28>
 800a044:	b003      	add	sp, #12
 800a046:	bd30      	pop	{r4, r5, pc}
 800a048:	20000090 	.word	0x20000090

0800a04c <_malloc_r>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	1ccd      	adds	r5, r1, #3
 800a050:	f025 0503 	bic.w	r5, r5, #3
 800a054:	3508      	adds	r5, #8
 800a056:	2d0c      	cmp	r5, #12
 800a058:	bf38      	it	cc
 800a05a:	250c      	movcc	r5, #12
 800a05c:	2d00      	cmp	r5, #0
 800a05e:	4606      	mov	r6, r0
 800a060:	db01      	blt.n	800a066 <_malloc_r+0x1a>
 800a062:	42a9      	cmp	r1, r5
 800a064:	d903      	bls.n	800a06e <_malloc_r+0x22>
 800a066:	230c      	movs	r3, #12
 800a068:	6033      	str	r3, [r6, #0]
 800a06a:	2000      	movs	r0, #0
 800a06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a06e:	f000 fe71 	bl	800ad54 <__malloc_lock>
 800a072:	4921      	ldr	r1, [pc, #132]	; (800a0f8 <_malloc_r+0xac>)
 800a074:	680a      	ldr	r2, [r1, #0]
 800a076:	4614      	mov	r4, r2
 800a078:	b99c      	cbnz	r4, 800a0a2 <_malloc_r+0x56>
 800a07a:	4f20      	ldr	r7, [pc, #128]	; (800a0fc <_malloc_r+0xb0>)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	b923      	cbnz	r3, 800a08a <_malloc_r+0x3e>
 800a080:	4621      	mov	r1, r4
 800a082:	4630      	mov	r0, r6
 800a084:	f000 fb42 	bl	800a70c <_sbrk_r>
 800a088:	6038      	str	r0, [r7, #0]
 800a08a:	4629      	mov	r1, r5
 800a08c:	4630      	mov	r0, r6
 800a08e:	f000 fb3d 	bl	800a70c <_sbrk_r>
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	d123      	bne.n	800a0de <_malloc_r+0x92>
 800a096:	230c      	movs	r3, #12
 800a098:	6033      	str	r3, [r6, #0]
 800a09a:	4630      	mov	r0, r6
 800a09c:	f000 fe60 	bl	800ad60 <__malloc_unlock>
 800a0a0:	e7e3      	b.n	800a06a <_malloc_r+0x1e>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	1b5b      	subs	r3, r3, r5
 800a0a6:	d417      	bmi.n	800a0d8 <_malloc_r+0x8c>
 800a0a8:	2b0b      	cmp	r3, #11
 800a0aa:	d903      	bls.n	800a0b4 <_malloc_r+0x68>
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	441c      	add	r4, r3
 800a0b0:	6025      	str	r5, [r4, #0]
 800a0b2:	e004      	b.n	800a0be <_malloc_r+0x72>
 800a0b4:	6863      	ldr	r3, [r4, #4]
 800a0b6:	42a2      	cmp	r2, r4
 800a0b8:	bf0c      	ite	eq
 800a0ba:	600b      	streq	r3, [r1, #0]
 800a0bc:	6053      	strne	r3, [r2, #4]
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f000 fe4e 	bl	800ad60 <__malloc_unlock>
 800a0c4:	f104 000b 	add.w	r0, r4, #11
 800a0c8:	1d23      	adds	r3, r4, #4
 800a0ca:	f020 0007 	bic.w	r0, r0, #7
 800a0ce:	1ac2      	subs	r2, r0, r3
 800a0d0:	d0cc      	beq.n	800a06c <_malloc_r+0x20>
 800a0d2:	1a1b      	subs	r3, r3, r0
 800a0d4:	50a3      	str	r3, [r4, r2]
 800a0d6:	e7c9      	b.n	800a06c <_malloc_r+0x20>
 800a0d8:	4622      	mov	r2, r4
 800a0da:	6864      	ldr	r4, [r4, #4]
 800a0dc:	e7cc      	b.n	800a078 <_malloc_r+0x2c>
 800a0de:	1cc4      	adds	r4, r0, #3
 800a0e0:	f024 0403 	bic.w	r4, r4, #3
 800a0e4:	42a0      	cmp	r0, r4
 800a0e6:	d0e3      	beq.n	800a0b0 <_malloc_r+0x64>
 800a0e8:	1a21      	subs	r1, r4, r0
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f000 fb0e 	bl	800a70c <_sbrk_r>
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d1dd      	bne.n	800a0b0 <_malloc_r+0x64>
 800a0f4:	e7cf      	b.n	800a096 <_malloc_r+0x4a>
 800a0f6:	bf00      	nop
 800a0f8:	20000090 	.word	0x20000090
 800a0fc:	20000094 	.word	0x20000094

0800a100 <__sfputc_r>:
 800a100:	6893      	ldr	r3, [r2, #8]
 800a102:	3b01      	subs	r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	b410      	push	{r4}
 800a108:	6093      	str	r3, [r2, #8]
 800a10a:	da08      	bge.n	800a11e <__sfputc_r+0x1e>
 800a10c:	6994      	ldr	r4, [r2, #24]
 800a10e:	42a3      	cmp	r3, r4
 800a110:	db01      	blt.n	800a116 <__sfputc_r+0x16>
 800a112:	290a      	cmp	r1, #10
 800a114:	d103      	bne.n	800a11e <__sfputc_r+0x1e>
 800a116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a11a:	f000 bb35 	b.w	800a788 <__swbuf_r>
 800a11e:	6813      	ldr	r3, [r2, #0]
 800a120:	1c58      	adds	r0, r3, #1
 800a122:	6010      	str	r0, [r2, #0]
 800a124:	7019      	strb	r1, [r3, #0]
 800a126:	4608      	mov	r0, r1
 800a128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <__sfputs_r>:
 800a12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a130:	4606      	mov	r6, r0
 800a132:	460f      	mov	r7, r1
 800a134:	4614      	mov	r4, r2
 800a136:	18d5      	adds	r5, r2, r3
 800a138:	42ac      	cmp	r4, r5
 800a13a:	d101      	bne.n	800a140 <__sfputs_r+0x12>
 800a13c:	2000      	movs	r0, #0
 800a13e:	e007      	b.n	800a150 <__sfputs_r+0x22>
 800a140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a144:	463a      	mov	r2, r7
 800a146:	4630      	mov	r0, r6
 800a148:	f7ff ffda 	bl	800a100 <__sfputc_r>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d1f3      	bne.n	800a138 <__sfputs_r+0xa>
 800a150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a154 <_vfiprintf_r>:
 800a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	460d      	mov	r5, r1
 800a15a:	b09d      	sub	sp, #116	; 0x74
 800a15c:	4614      	mov	r4, r2
 800a15e:	4698      	mov	r8, r3
 800a160:	4606      	mov	r6, r0
 800a162:	b118      	cbz	r0, 800a16c <_vfiprintf_r+0x18>
 800a164:	6983      	ldr	r3, [r0, #24]
 800a166:	b90b      	cbnz	r3, 800a16c <_vfiprintf_r+0x18>
 800a168:	f000 fcf0 	bl	800ab4c <__sinit>
 800a16c:	4b89      	ldr	r3, [pc, #548]	; (800a394 <_vfiprintf_r+0x240>)
 800a16e:	429d      	cmp	r5, r3
 800a170:	d11b      	bne.n	800a1aa <_vfiprintf_r+0x56>
 800a172:	6875      	ldr	r5, [r6, #4]
 800a174:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a176:	07d9      	lsls	r1, r3, #31
 800a178:	d405      	bmi.n	800a186 <_vfiprintf_r+0x32>
 800a17a:	89ab      	ldrh	r3, [r5, #12]
 800a17c:	059a      	lsls	r2, r3, #22
 800a17e:	d402      	bmi.n	800a186 <_vfiprintf_r+0x32>
 800a180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a182:	f000 fd81 	bl	800ac88 <__retarget_lock_acquire_recursive>
 800a186:	89ab      	ldrh	r3, [r5, #12]
 800a188:	071b      	lsls	r3, r3, #28
 800a18a:	d501      	bpl.n	800a190 <_vfiprintf_r+0x3c>
 800a18c:	692b      	ldr	r3, [r5, #16]
 800a18e:	b9eb      	cbnz	r3, 800a1cc <_vfiprintf_r+0x78>
 800a190:	4629      	mov	r1, r5
 800a192:	4630      	mov	r0, r6
 800a194:	f000 fb4a 	bl	800a82c <__swsetup_r>
 800a198:	b1c0      	cbz	r0, 800a1cc <_vfiprintf_r+0x78>
 800a19a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a19c:	07dc      	lsls	r4, r3, #31
 800a19e:	d50e      	bpl.n	800a1be <_vfiprintf_r+0x6a>
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a4:	b01d      	add	sp, #116	; 0x74
 800a1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1aa:	4b7b      	ldr	r3, [pc, #492]	; (800a398 <_vfiprintf_r+0x244>)
 800a1ac:	429d      	cmp	r5, r3
 800a1ae:	d101      	bne.n	800a1b4 <_vfiprintf_r+0x60>
 800a1b0:	68b5      	ldr	r5, [r6, #8]
 800a1b2:	e7df      	b.n	800a174 <_vfiprintf_r+0x20>
 800a1b4:	4b79      	ldr	r3, [pc, #484]	; (800a39c <_vfiprintf_r+0x248>)
 800a1b6:	429d      	cmp	r5, r3
 800a1b8:	bf08      	it	eq
 800a1ba:	68f5      	ldreq	r5, [r6, #12]
 800a1bc:	e7da      	b.n	800a174 <_vfiprintf_r+0x20>
 800a1be:	89ab      	ldrh	r3, [r5, #12]
 800a1c0:	0598      	lsls	r0, r3, #22
 800a1c2:	d4ed      	bmi.n	800a1a0 <_vfiprintf_r+0x4c>
 800a1c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1c6:	f000 fd60 	bl	800ac8a <__retarget_lock_release_recursive>
 800a1ca:	e7e9      	b.n	800a1a0 <_vfiprintf_r+0x4c>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d0:	2320      	movs	r3, #32
 800a1d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1da:	2330      	movs	r3, #48	; 0x30
 800a1dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a3a0 <_vfiprintf_r+0x24c>
 800a1e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1e4:	f04f 0901 	mov.w	r9, #1
 800a1e8:	4623      	mov	r3, r4
 800a1ea:	469a      	mov	sl, r3
 800a1ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1f0:	b10a      	cbz	r2, 800a1f6 <_vfiprintf_r+0xa2>
 800a1f2:	2a25      	cmp	r2, #37	; 0x25
 800a1f4:	d1f9      	bne.n	800a1ea <_vfiprintf_r+0x96>
 800a1f6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1fa:	d00b      	beq.n	800a214 <_vfiprintf_r+0xc0>
 800a1fc:	465b      	mov	r3, fp
 800a1fe:	4622      	mov	r2, r4
 800a200:	4629      	mov	r1, r5
 800a202:	4630      	mov	r0, r6
 800a204:	f7ff ff93 	bl	800a12e <__sfputs_r>
 800a208:	3001      	adds	r0, #1
 800a20a:	f000 80aa 	beq.w	800a362 <_vfiprintf_r+0x20e>
 800a20e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a210:	445a      	add	r2, fp
 800a212:	9209      	str	r2, [sp, #36]	; 0x24
 800a214:	f89a 3000 	ldrb.w	r3, [sl]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 80a2 	beq.w	800a362 <_vfiprintf_r+0x20e>
 800a21e:	2300      	movs	r3, #0
 800a220:	f04f 32ff 	mov.w	r2, #4294967295
 800a224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a228:	f10a 0a01 	add.w	sl, sl, #1
 800a22c:	9304      	str	r3, [sp, #16]
 800a22e:	9307      	str	r3, [sp, #28]
 800a230:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a234:	931a      	str	r3, [sp, #104]	; 0x68
 800a236:	4654      	mov	r4, sl
 800a238:	2205      	movs	r2, #5
 800a23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a23e:	4858      	ldr	r0, [pc, #352]	; (800a3a0 <_vfiprintf_r+0x24c>)
 800a240:	f7f5 ffde 	bl	8000200 <memchr>
 800a244:	9a04      	ldr	r2, [sp, #16]
 800a246:	b9d8      	cbnz	r0, 800a280 <_vfiprintf_r+0x12c>
 800a248:	06d1      	lsls	r1, r2, #27
 800a24a:	bf44      	itt	mi
 800a24c:	2320      	movmi	r3, #32
 800a24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a252:	0713      	lsls	r3, r2, #28
 800a254:	bf44      	itt	mi
 800a256:	232b      	movmi	r3, #43	; 0x2b
 800a258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a25c:	f89a 3000 	ldrb.w	r3, [sl]
 800a260:	2b2a      	cmp	r3, #42	; 0x2a
 800a262:	d015      	beq.n	800a290 <_vfiprintf_r+0x13c>
 800a264:	9a07      	ldr	r2, [sp, #28]
 800a266:	4654      	mov	r4, sl
 800a268:	2000      	movs	r0, #0
 800a26a:	f04f 0c0a 	mov.w	ip, #10
 800a26e:	4621      	mov	r1, r4
 800a270:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a274:	3b30      	subs	r3, #48	; 0x30
 800a276:	2b09      	cmp	r3, #9
 800a278:	d94e      	bls.n	800a318 <_vfiprintf_r+0x1c4>
 800a27a:	b1b0      	cbz	r0, 800a2aa <_vfiprintf_r+0x156>
 800a27c:	9207      	str	r2, [sp, #28]
 800a27e:	e014      	b.n	800a2aa <_vfiprintf_r+0x156>
 800a280:	eba0 0308 	sub.w	r3, r0, r8
 800a284:	fa09 f303 	lsl.w	r3, r9, r3
 800a288:	4313      	orrs	r3, r2
 800a28a:	9304      	str	r3, [sp, #16]
 800a28c:	46a2      	mov	sl, r4
 800a28e:	e7d2      	b.n	800a236 <_vfiprintf_r+0xe2>
 800a290:	9b03      	ldr	r3, [sp, #12]
 800a292:	1d19      	adds	r1, r3, #4
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	9103      	str	r1, [sp, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	bfbb      	ittet	lt
 800a29c:	425b      	neglt	r3, r3
 800a29e:	f042 0202 	orrlt.w	r2, r2, #2
 800a2a2:	9307      	strge	r3, [sp, #28]
 800a2a4:	9307      	strlt	r3, [sp, #28]
 800a2a6:	bfb8      	it	lt
 800a2a8:	9204      	strlt	r2, [sp, #16]
 800a2aa:	7823      	ldrb	r3, [r4, #0]
 800a2ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a2ae:	d10c      	bne.n	800a2ca <_vfiprintf_r+0x176>
 800a2b0:	7863      	ldrb	r3, [r4, #1]
 800a2b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2b4:	d135      	bne.n	800a322 <_vfiprintf_r+0x1ce>
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	1d1a      	adds	r2, r3, #4
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	9203      	str	r2, [sp, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	bfb8      	it	lt
 800a2c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2c6:	3402      	adds	r4, #2
 800a2c8:	9305      	str	r3, [sp, #20]
 800a2ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3b0 <_vfiprintf_r+0x25c>
 800a2ce:	7821      	ldrb	r1, [r4, #0]
 800a2d0:	2203      	movs	r2, #3
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	f7f5 ff94 	bl	8000200 <memchr>
 800a2d8:	b140      	cbz	r0, 800a2ec <_vfiprintf_r+0x198>
 800a2da:	2340      	movs	r3, #64	; 0x40
 800a2dc:	eba0 000a 	sub.w	r0, r0, sl
 800a2e0:	fa03 f000 	lsl.w	r0, r3, r0
 800a2e4:	9b04      	ldr	r3, [sp, #16]
 800a2e6:	4303      	orrs	r3, r0
 800a2e8:	3401      	adds	r4, #1
 800a2ea:	9304      	str	r3, [sp, #16]
 800a2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f0:	482c      	ldr	r0, [pc, #176]	; (800a3a4 <_vfiprintf_r+0x250>)
 800a2f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2f6:	2206      	movs	r2, #6
 800a2f8:	f7f5 ff82 	bl	8000200 <memchr>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d03f      	beq.n	800a380 <_vfiprintf_r+0x22c>
 800a300:	4b29      	ldr	r3, [pc, #164]	; (800a3a8 <_vfiprintf_r+0x254>)
 800a302:	bb1b      	cbnz	r3, 800a34c <_vfiprintf_r+0x1f8>
 800a304:	9b03      	ldr	r3, [sp, #12]
 800a306:	3307      	adds	r3, #7
 800a308:	f023 0307 	bic.w	r3, r3, #7
 800a30c:	3308      	adds	r3, #8
 800a30e:	9303      	str	r3, [sp, #12]
 800a310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a312:	443b      	add	r3, r7
 800a314:	9309      	str	r3, [sp, #36]	; 0x24
 800a316:	e767      	b.n	800a1e8 <_vfiprintf_r+0x94>
 800a318:	fb0c 3202 	mla	r2, ip, r2, r3
 800a31c:	460c      	mov	r4, r1
 800a31e:	2001      	movs	r0, #1
 800a320:	e7a5      	b.n	800a26e <_vfiprintf_r+0x11a>
 800a322:	2300      	movs	r3, #0
 800a324:	3401      	adds	r4, #1
 800a326:	9305      	str	r3, [sp, #20]
 800a328:	4619      	mov	r1, r3
 800a32a:	f04f 0c0a 	mov.w	ip, #10
 800a32e:	4620      	mov	r0, r4
 800a330:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a334:	3a30      	subs	r2, #48	; 0x30
 800a336:	2a09      	cmp	r2, #9
 800a338:	d903      	bls.n	800a342 <_vfiprintf_r+0x1ee>
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0c5      	beq.n	800a2ca <_vfiprintf_r+0x176>
 800a33e:	9105      	str	r1, [sp, #20]
 800a340:	e7c3      	b.n	800a2ca <_vfiprintf_r+0x176>
 800a342:	fb0c 2101 	mla	r1, ip, r1, r2
 800a346:	4604      	mov	r4, r0
 800a348:	2301      	movs	r3, #1
 800a34a:	e7f0      	b.n	800a32e <_vfiprintf_r+0x1da>
 800a34c:	ab03      	add	r3, sp, #12
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	462a      	mov	r2, r5
 800a352:	4b16      	ldr	r3, [pc, #88]	; (800a3ac <_vfiprintf_r+0x258>)
 800a354:	a904      	add	r1, sp, #16
 800a356:	4630      	mov	r0, r6
 800a358:	f3af 8000 	nop.w
 800a35c:	4607      	mov	r7, r0
 800a35e:	1c78      	adds	r0, r7, #1
 800a360:	d1d6      	bne.n	800a310 <_vfiprintf_r+0x1bc>
 800a362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a364:	07d9      	lsls	r1, r3, #31
 800a366:	d405      	bmi.n	800a374 <_vfiprintf_r+0x220>
 800a368:	89ab      	ldrh	r3, [r5, #12]
 800a36a:	059a      	lsls	r2, r3, #22
 800a36c:	d402      	bmi.n	800a374 <_vfiprintf_r+0x220>
 800a36e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a370:	f000 fc8b 	bl	800ac8a <__retarget_lock_release_recursive>
 800a374:	89ab      	ldrh	r3, [r5, #12]
 800a376:	065b      	lsls	r3, r3, #25
 800a378:	f53f af12 	bmi.w	800a1a0 <_vfiprintf_r+0x4c>
 800a37c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a37e:	e711      	b.n	800a1a4 <_vfiprintf_r+0x50>
 800a380:	ab03      	add	r3, sp, #12
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	462a      	mov	r2, r5
 800a386:	4b09      	ldr	r3, [pc, #36]	; (800a3ac <_vfiprintf_r+0x258>)
 800a388:	a904      	add	r1, sp, #16
 800a38a:	4630      	mov	r0, r6
 800a38c:	f000 f880 	bl	800a490 <_printf_i>
 800a390:	e7e4      	b.n	800a35c <_vfiprintf_r+0x208>
 800a392:	bf00      	nop
 800a394:	0800be5c 	.word	0x0800be5c
 800a398:	0800be7c 	.word	0x0800be7c
 800a39c:	0800be3c 	.word	0x0800be3c
 800a3a0:	0800be08 	.word	0x0800be08
 800a3a4:	0800be12 	.word	0x0800be12
 800a3a8:	00000000 	.word	0x00000000
 800a3ac:	0800a12f 	.word	0x0800a12f
 800a3b0:	0800be0e 	.word	0x0800be0e

0800a3b4 <_printf_common>:
 800a3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b8:	4616      	mov	r6, r2
 800a3ba:	4699      	mov	r9, r3
 800a3bc:	688a      	ldr	r2, [r1, #8]
 800a3be:	690b      	ldr	r3, [r1, #16]
 800a3c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	bfb8      	it	lt
 800a3c8:	4613      	movlt	r3, r2
 800a3ca:	6033      	str	r3, [r6, #0]
 800a3cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	b10a      	cbz	r2, 800a3da <_printf_common+0x26>
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	6033      	str	r3, [r6, #0]
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	0699      	lsls	r1, r3, #26
 800a3de:	bf42      	ittt	mi
 800a3e0:	6833      	ldrmi	r3, [r6, #0]
 800a3e2:	3302      	addmi	r3, #2
 800a3e4:	6033      	strmi	r3, [r6, #0]
 800a3e6:	6825      	ldr	r5, [r4, #0]
 800a3e8:	f015 0506 	ands.w	r5, r5, #6
 800a3ec:	d106      	bne.n	800a3fc <_printf_common+0x48>
 800a3ee:	f104 0a19 	add.w	sl, r4, #25
 800a3f2:	68e3      	ldr	r3, [r4, #12]
 800a3f4:	6832      	ldr	r2, [r6, #0]
 800a3f6:	1a9b      	subs	r3, r3, r2
 800a3f8:	42ab      	cmp	r3, r5
 800a3fa:	dc26      	bgt.n	800a44a <_printf_common+0x96>
 800a3fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a400:	1e13      	subs	r3, r2, #0
 800a402:	6822      	ldr	r2, [r4, #0]
 800a404:	bf18      	it	ne
 800a406:	2301      	movne	r3, #1
 800a408:	0692      	lsls	r2, r2, #26
 800a40a:	d42b      	bmi.n	800a464 <_printf_common+0xb0>
 800a40c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a410:	4649      	mov	r1, r9
 800a412:	4638      	mov	r0, r7
 800a414:	47c0      	blx	r8
 800a416:	3001      	adds	r0, #1
 800a418:	d01e      	beq.n	800a458 <_printf_common+0xa4>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	68e5      	ldr	r5, [r4, #12]
 800a41e:	6832      	ldr	r2, [r6, #0]
 800a420:	f003 0306 	and.w	r3, r3, #6
 800a424:	2b04      	cmp	r3, #4
 800a426:	bf08      	it	eq
 800a428:	1aad      	subeq	r5, r5, r2
 800a42a:	68a3      	ldr	r3, [r4, #8]
 800a42c:	6922      	ldr	r2, [r4, #16]
 800a42e:	bf0c      	ite	eq
 800a430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a434:	2500      	movne	r5, #0
 800a436:	4293      	cmp	r3, r2
 800a438:	bfc4      	itt	gt
 800a43a:	1a9b      	subgt	r3, r3, r2
 800a43c:	18ed      	addgt	r5, r5, r3
 800a43e:	2600      	movs	r6, #0
 800a440:	341a      	adds	r4, #26
 800a442:	42b5      	cmp	r5, r6
 800a444:	d11a      	bne.n	800a47c <_printf_common+0xc8>
 800a446:	2000      	movs	r0, #0
 800a448:	e008      	b.n	800a45c <_printf_common+0xa8>
 800a44a:	2301      	movs	r3, #1
 800a44c:	4652      	mov	r2, sl
 800a44e:	4649      	mov	r1, r9
 800a450:	4638      	mov	r0, r7
 800a452:	47c0      	blx	r8
 800a454:	3001      	adds	r0, #1
 800a456:	d103      	bne.n	800a460 <_printf_common+0xac>
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a460:	3501      	adds	r5, #1
 800a462:	e7c6      	b.n	800a3f2 <_printf_common+0x3e>
 800a464:	18e1      	adds	r1, r4, r3
 800a466:	1c5a      	adds	r2, r3, #1
 800a468:	2030      	movs	r0, #48	; 0x30
 800a46a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a46e:	4422      	add	r2, r4
 800a470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a478:	3302      	adds	r3, #2
 800a47a:	e7c7      	b.n	800a40c <_printf_common+0x58>
 800a47c:	2301      	movs	r3, #1
 800a47e:	4622      	mov	r2, r4
 800a480:	4649      	mov	r1, r9
 800a482:	4638      	mov	r0, r7
 800a484:	47c0      	blx	r8
 800a486:	3001      	adds	r0, #1
 800a488:	d0e6      	beq.n	800a458 <_printf_common+0xa4>
 800a48a:	3601      	adds	r6, #1
 800a48c:	e7d9      	b.n	800a442 <_printf_common+0x8e>
	...

0800a490 <_printf_i>:
 800a490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a494:	460c      	mov	r4, r1
 800a496:	4691      	mov	r9, r2
 800a498:	7e27      	ldrb	r7, [r4, #24]
 800a49a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a49c:	2f78      	cmp	r7, #120	; 0x78
 800a49e:	4680      	mov	r8, r0
 800a4a0:	469a      	mov	sl, r3
 800a4a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4a6:	d807      	bhi.n	800a4b8 <_printf_i+0x28>
 800a4a8:	2f62      	cmp	r7, #98	; 0x62
 800a4aa:	d80a      	bhi.n	800a4c2 <_printf_i+0x32>
 800a4ac:	2f00      	cmp	r7, #0
 800a4ae:	f000 80d8 	beq.w	800a662 <_printf_i+0x1d2>
 800a4b2:	2f58      	cmp	r7, #88	; 0x58
 800a4b4:	f000 80a3 	beq.w	800a5fe <_printf_i+0x16e>
 800a4b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4c0:	e03a      	b.n	800a538 <_printf_i+0xa8>
 800a4c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4c6:	2b15      	cmp	r3, #21
 800a4c8:	d8f6      	bhi.n	800a4b8 <_printf_i+0x28>
 800a4ca:	a001      	add	r0, pc, #4	; (adr r0, 800a4d0 <_printf_i+0x40>)
 800a4cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a4d0:	0800a529 	.word	0x0800a529
 800a4d4:	0800a53d 	.word	0x0800a53d
 800a4d8:	0800a4b9 	.word	0x0800a4b9
 800a4dc:	0800a4b9 	.word	0x0800a4b9
 800a4e0:	0800a4b9 	.word	0x0800a4b9
 800a4e4:	0800a4b9 	.word	0x0800a4b9
 800a4e8:	0800a53d 	.word	0x0800a53d
 800a4ec:	0800a4b9 	.word	0x0800a4b9
 800a4f0:	0800a4b9 	.word	0x0800a4b9
 800a4f4:	0800a4b9 	.word	0x0800a4b9
 800a4f8:	0800a4b9 	.word	0x0800a4b9
 800a4fc:	0800a649 	.word	0x0800a649
 800a500:	0800a56d 	.word	0x0800a56d
 800a504:	0800a62b 	.word	0x0800a62b
 800a508:	0800a4b9 	.word	0x0800a4b9
 800a50c:	0800a4b9 	.word	0x0800a4b9
 800a510:	0800a66b 	.word	0x0800a66b
 800a514:	0800a4b9 	.word	0x0800a4b9
 800a518:	0800a56d 	.word	0x0800a56d
 800a51c:	0800a4b9 	.word	0x0800a4b9
 800a520:	0800a4b9 	.word	0x0800a4b9
 800a524:	0800a633 	.word	0x0800a633
 800a528:	680b      	ldr	r3, [r1, #0]
 800a52a:	1d1a      	adds	r2, r3, #4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	600a      	str	r2, [r1, #0]
 800a530:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a538:	2301      	movs	r3, #1
 800a53a:	e0a3      	b.n	800a684 <_printf_i+0x1f4>
 800a53c:	6825      	ldr	r5, [r4, #0]
 800a53e:	6808      	ldr	r0, [r1, #0]
 800a540:	062e      	lsls	r6, r5, #24
 800a542:	f100 0304 	add.w	r3, r0, #4
 800a546:	d50a      	bpl.n	800a55e <_printf_i+0xce>
 800a548:	6805      	ldr	r5, [r0, #0]
 800a54a:	600b      	str	r3, [r1, #0]
 800a54c:	2d00      	cmp	r5, #0
 800a54e:	da03      	bge.n	800a558 <_printf_i+0xc8>
 800a550:	232d      	movs	r3, #45	; 0x2d
 800a552:	426d      	negs	r5, r5
 800a554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a558:	485e      	ldr	r0, [pc, #376]	; (800a6d4 <_printf_i+0x244>)
 800a55a:	230a      	movs	r3, #10
 800a55c:	e019      	b.n	800a592 <_printf_i+0x102>
 800a55e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a562:	6805      	ldr	r5, [r0, #0]
 800a564:	600b      	str	r3, [r1, #0]
 800a566:	bf18      	it	ne
 800a568:	b22d      	sxthne	r5, r5
 800a56a:	e7ef      	b.n	800a54c <_printf_i+0xbc>
 800a56c:	680b      	ldr	r3, [r1, #0]
 800a56e:	6825      	ldr	r5, [r4, #0]
 800a570:	1d18      	adds	r0, r3, #4
 800a572:	6008      	str	r0, [r1, #0]
 800a574:	0628      	lsls	r0, r5, #24
 800a576:	d501      	bpl.n	800a57c <_printf_i+0xec>
 800a578:	681d      	ldr	r5, [r3, #0]
 800a57a:	e002      	b.n	800a582 <_printf_i+0xf2>
 800a57c:	0669      	lsls	r1, r5, #25
 800a57e:	d5fb      	bpl.n	800a578 <_printf_i+0xe8>
 800a580:	881d      	ldrh	r5, [r3, #0]
 800a582:	4854      	ldr	r0, [pc, #336]	; (800a6d4 <_printf_i+0x244>)
 800a584:	2f6f      	cmp	r7, #111	; 0x6f
 800a586:	bf0c      	ite	eq
 800a588:	2308      	moveq	r3, #8
 800a58a:	230a      	movne	r3, #10
 800a58c:	2100      	movs	r1, #0
 800a58e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a592:	6866      	ldr	r6, [r4, #4]
 800a594:	60a6      	str	r6, [r4, #8]
 800a596:	2e00      	cmp	r6, #0
 800a598:	bfa2      	ittt	ge
 800a59a:	6821      	ldrge	r1, [r4, #0]
 800a59c:	f021 0104 	bicge.w	r1, r1, #4
 800a5a0:	6021      	strge	r1, [r4, #0]
 800a5a2:	b90d      	cbnz	r5, 800a5a8 <_printf_i+0x118>
 800a5a4:	2e00      	cmp	r6, #0
 800a5a6:	d04d      	beq.n	800a644 <_printf_i+0x1b4>
 800a5a8:	4616      	mov	r6, r2
 800a5aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5ae:	fb03 5711 	mls	r7, r3, r1, r5
 800a5b2:	5dc7      	ldrb	r7, [r0, r7]
 800a5b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5b8:	462f      	mov	r7, r5
 800a5ba:	42bb      	cmp	r3, r7
 800a5bc:	460d      	mov	r5, r1
 800a5be:	d9f4      	bls.n	800a5aa <_printf_i+0x11a>
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d10b      	bne.n	800a5dc <_printf_i+0x14c>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	07df      	lsls	r7, r3, #31
 800a5c8:	d508      	bpl.n	800a5dc <_printf_i+0x14c>
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	6861      	ldr	r1, [r4, #4]
 800a5ce:	4299      	cmp	r1, r3
 800a5d0:	bfde      	ittt	le
 800a5d2:	2330      	movle	r3, #48	; 0x30
 800a5d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5dc:	1b92      	subs	r2, r2, r6
 800a5de:	6122      	str	r2, [r4, #16]
 800a5e0:	f8cd a000 	str.w	sl, [sp]
 800a5e4:	464b      	mov	r3, r9
 800a5e6:	aa03      	add	r2, sp, #12
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4640      	mov	r0, r8
 800a5ec:	f7ff fee2 	bl	800a3b4 <_printf_common>
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d14c      	bne.n	800a68e <_printf_i+0x1fe>
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	b004      	add	sp, #16
 800a5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fe:	4835      	ldr	r0, [pc, #212]	; (800a6d4 <_printf_i+0x244>)
 800a600:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	680e      	ldr	r6, [r1, #0]
 800a608:	061f      	lsls	r7, r3, #24
 800a60a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a60e:	600e      	str	r6, [r1, #0]
 800a610:	d514      	bpl.n	800a63c <_printf_i+0x1ac>
 800a612:	07d9      	lsls	r1, r3, #31
 800a614:	bf44      	itt	mi
 800a616:	f043 0320 	orrmi.w	r3, r3, #32
 800a61a:	6023      	strmi	r3, [r4, #0]
 800a61c:	b91d      	cbnz	r5, 800a626 <_printf_i+0x196>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	f023 0320 	bic.w	r3, r3, #32
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	2310      	movs	r3, #16
 800a628:	e7b0      	b.n	800a58c <_printf_i+0xfc>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	f043 0320 	orr.w	r3, r3, #32
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	2378      	movs	r3, #120	; 0x78
 800a634:	4828      	ldr	r0, [pc, #160]	; (800a6d8 <_printf_i+0x248>)
 800a636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a63a:	e7e3      	b.n	800a604 <_printf_i+0x174>
 800a63c:	065e      	lsls	r6, r3, #25
 800a63e:	bf48      	it	mi
 800a640:	b2ad      	uxthmi	r5, r5
 800a642:	e7e6      	b.n	800a612 <_printf_i+0x182>
 800a644:	4616      	mov	r6, r2
 800a646:	e7bb      	b.n	800a5c0 <_printf_i+0x130>
 800a648:	680b      	ldr	r3, [r1, #0]
 800a64a:	6826      	ldr	r6, [r4, #0]
 800a64c:	6960      	ldr	r0, [r4, #20]
 800a64e:	1d1d      	adds	r5, r3, #4
 800a650:	600d      	str	r5, [r1, #0]
 800a652:	0635      	lsls	r5, r6, #24
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	d501      	bpl.n	800a65c <_printf_i+0x1cc>
 800a658:	6018      	str	r0, [r3, #0]
 800a65a:	e002      	b.n	800a662 <_printf_i+0x1d2>
 800a65c:	0671      	lsls	r1, r6, #25
 800a65e:	d5fb      	bpl.n	800a658 <_printf_i+0x1c8>
 800a660:	8018      	strh	r0, [r3, #0]
 800a662:	2300      	movs	r3, #0
 800a664:	6123      	str	r3, [r4, #16]
 800a666:	4616      	mov	r6, r2
 800a668:	e7ba      	b.n	800a5e0 <_printf_i+0x150>
 800a66a:	680b      	ldr	r3, [r1, #0]
 800a66c:	1d1a      	adds	r2, r3, #4
 800a66e:	600a      	str	r2, [r1, #0]
 800a670:	681e      	ldr	r6, [r3, #0]
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	2100      	movs	r1, #0
 800a676:	4630      	mov	r0, r6
 800a678:	f7f5 fdc2 	bl	8000200 <memchr>
 800a67c:	b108      	cbz	r0, 800a682 <_printf_i+0x1f2>
 800a67e:	1b80      	subs	r0, r0, r6
 800a680:	6060      	str	r0, [r4, #4]
 800a682:	6863      	ldr	r3, [r4, #4]
 800a684:	6123      	str	r3, [r4, #16]
 800a686:	2300      	movs	r3, #0
 800a688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a68c:	e7a8      	b.n	800a5e0 <_printf_i+0x150>
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	4632      	mov	r2, r6
 800a692:	4649      	mov	r1, r9
 800a694:	4640      	mov	r0, r8
 800a696:	47d0      	blx	sl
 800a698:	3001      	adds	r0, #1
 800a69a:	d0ab      	beq.n	800a5f4 <_printf_i+0x164>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	079b      	lsls	r3, r3, #30
 800a6a0:	d413      	bmi.n	800a6ca <_printf_i+0x23a>
 800a6a2:	68e0      	ldr	r0, [r4, #12]
 800a6a4:	9b03      	ldr	r3, [sp, #12]
 800a6a6:	4298      	cmp	r0, r3
 800a6a8:	bfb8      	it	lt
 800a6aa:	4618      	movlt	r0, r3
 800a6ac:	e7a4      	b.n	800a5f8 <_printf_i+0x168>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	4632      	mov	r2, r6
 800a6b2:	4649      	mov	r1, r9
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	47d0      	blx	sl
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d09b      	beq.n	800a5f4 <_printf_i+0x164>
 800a6bc:	3501      	adds	r5, #1
 800a6be:	68e3      	ldr	r3, [r4, #12]
 800a6c0:	9903      	ldr	r1, [sp, #12]
 800a6c2:	1a5b      	subs	r3, r3, r1
 800a6c4:	42ab      	cmp	r3, r5
 800a6c6:	dcf2      	bgt.n	800a6ae <_printf_i+0x21e>
 800a6c8:	e7eb      	b.n	800a6a2 <_printf_i+0x212>
 800a6ca:	2500      	movs	r5, #0
 800a6cc:	f104 0619 	add.w	r6, r4, #25
 800a6d0:	e7f5      	b.n	800a6be <_printf_i+0x22e>
 800a6d2:	bf00      	nop
 800a6d4:	0800be19 	.word	0x0800be19
 800a6d8:	0800be2a 	.word	0x0800be2a

0800a6dc <iprintf>:
 800a6dc:	b40f      	push	{r0, r1, r2, r3}
 800a6de:	4b0a      	ldr	r3, [pc, #40]	; (800a708 <iprintf+0x2c>)
 800a6e0:	b513      	push	{r0, r1, r4, lr}
 800a6e2:	681c      	ldr	r4, [r3, #0]
 800a6e4:	b124      	cbz	r4, 800a6f0 <iprintf+0x14>
 800a6e6:	69a3      	ldr	r3, [r4, #24]
 800a6e8:	b913      	cbnz	r3, 800a6f0 <iprintf+0x14>
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f000 fa2e 	bl	800ab4c <__sinit>
 800a6f0:	ab05      	add	r3, sp, #20
 800a6f2:	9a04      	ldr	r2, [sp, #16]
 800a6f4:	68a1      	ldr	r1, [r4, #8]
 800a6f6:	9301      	str	r3, [sp, #4]
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f7ff fd2b 	bl	800a154 <_vfiprintf_r>
 800a6fe:	b002      	add	sp, #8
 800a700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a704:	b004      	add	sp, #16
 800a706:	4770      	bx	lr
 800a708:	2000000c 	.word	0x2000000c

0800a70c <_sbrk_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d06      	ldr	r5, [pc, #24]	; (800a728 <_sbrk_r+0x1c>)
 800a710:	2300      	movs	r3, #0
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	f7fd fbb0 	bl	8007e7c <_sbrk>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_sbrk_r+0x1a>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_sbrk_r+0x1a>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	20000218 	.word	0x20000218

0800a72c <strchr>:
 800a72c:	b2c9      	uxtb	r1, r1
 800a72e:	4603      	mov	r3, r0
 800a730:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a734:	b11a      	cbz	r2, 800a73e <strchr+0x12>
 800a736:	428a      	cmp	r2, r1
 800a738:	d1f9      	bne.n	800a72e <strchr+0x2>
 800a73a:	4618      	mov	r0, r3
 800a73c:	4770      	bx	lr
 800a73e:	2900      	cmp	r1, #0
 800a740:	bf18      	it	ne
 800a742:	2300      	movne	r3, #0
 800a744:	e7f9      	b.n	800a73a <strchr+0xe>

0800a746 <strcspn>:
 800a746:	b570      	push	{r4, r5, r6, lr}
 800a748:	4603      	mov	r3, r0
 800a74a:	461e      	mov	r6, r3
 800a74c:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a750:	b144      	cbz	r4, 800a764 <strcspn+0x1e>
 800a752:	1e4a      	subs	r2, r1, #1
 800a754:	e001      	b.n	800a75a <strcspn+0x14>
 800a756:	42a5      	cmp	r5, r4
 800a758:	d004      	beq.n	800a764 <strcspn+0x1e>
 800a75a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a75e:	2d00      	cmp	r5, #0
 800a760:	d1f9      	bne.n	800a756 <strcspn+0x10>
 800a762:	e7f2      	b.n	800a74a <strcspn+0x4>
 800a764:	1a30      	subs	r0, r6, r0
 800a766:	bd70      	pop	{r4, r5, r6, pc}

0800a768 <strspn>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	4603      	mov	r3, r0
 800a76c:	461e      	mov	r6, r3
 800a76e:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a772:	b13c      	cbz	r4, 800a784 <strspn+0x1c>
 800a774:	1e4a      	subs	r2, r1, #1
 800a776:	e001      	b.n	800a77c <strspn+0x14>
 800a778:	42a5      	cmp	r5, r4
 800a77a:	d0f7      	beq.n	800a76c <strspn+0x4>
 800a77c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a780:	2d00      	cmp	r5, #0
 800a782:	d1f9      	bne.n	800a778 <strspn+0x10>
 800a784:	1a30      	subs	r0, r6, r0
 800a786:	bd70      	pop	{r4, r5, r6, pc}

0800a788 <__swbuf_r>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	460e      	mov	r6, r1
 800a78c:	4614      	mov	r4, r2
 800a78e:	4605      	mov	r5, r0
 800a790:	b118      	cbz	r0, 800a79a <__swbuf_r+0x12>
 800a792:	6983      	ldr	r3, [r0, #24]
 800a794:	b90b      	cbnz	r3, 800a79a <__swbuf_r+0x12>
 800a796:	f000 f9d9 	bl	800ab4c <__sinit>
 800a79a:	4b21      	ldr	r3, [pc, #132]	; (800a820 <__swbuf_r+0x98>)
 800a79c:	429c      	cmp	r4, r3
 800a79e:	d12b      	bne.n	800a7f8 <__swbuf_r+0x70>
 800a7a0:	686c      	ldr	r4, [r5, #4]
 800a7a2:	69a3      	ldr	r3, [r4, #24]
 800a7a4:	60a3      	str	r3, [r4, #8]
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	071a      	lsls	r2, r3, #28
 800a7aa:	d52f      	bpl.n	800a80c <__swbuf_r+0x84>
 800a7ac:	6923      	ldr	r3, [r4, #16]
 800a7ae:	b36b      	cbz	r3, 800a80c <__swbuf_r+0x84>
 800a7b0:	6923      	ldr	r3, [r4, #16]
 800a7b2:	6820      	ldr	r0, [r4, #0]
 800a7b4:	1ac0      	subs	r0, r0, r3
 800a7b6:	6963      	ldr	r3, [r4, #20]
 800a7b8:	b2f6      	uxtb	r6, r6
 800a7ba:	4283      	cmp	r3, r0
 800a7bc:	4637      	mov	r7, r6
 800a7be:	dc04      	bgt.n	800a7ca <__swbuf_r+0x42>
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f000 f92e 	bl	800aa24 <_fflush_r>
 800a7c8:	bb30      	cbnz	r0, 800a818 <__swbuf_r+0x90>
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	60a3      	str	r3, [r4, #8]
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	6022      	str	r2, [r4, #0]
 800a7d6:	701e      	strb	r6, [r3, #0]
 800a7d8:	6963      	ldr	r3, [r4, #20]
 800a7da:	3001      	adds	r0, #1
 800a7dc:	4283      	cmp	r3, r0
 800a7de:	d004      	beq.n	800a7ea <__swbuf_r+0x62>
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	07db      	lsls	r3, r3, #31
 800a7e4:	d506      	bpl.n	800a7f4 <__swbuf_r+0x6c>
 800a7e6:	2e0a      	cmp	r6, #10
 800a7e8:	d104      	bne.n	800a7f4 <__swbuf_r+0x6c>
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f000 f919 	bl	800aa24 <_fflush_r>
 800a7f2:	b988      	cbnz	r0, 800a818 <__swbuf_r+0x90>
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	; (800a824 <__swbuf_r+0x9c>)
 800a7fa:	429c      	cmp	r4, r3
 800a7fc:	d101      	bne.n	800a802 <__swbuf_r+0x7a>
 800a7fe:	68ac      	ldr	r4, [r5, #8]
 800a800:	e7cf      	b.n	800a7a2 <__swbuf_r+0x1a>
 800a802:	4b09      	ldr	r3, [pc, #36]	; (800a828 <__swbuf_r+0xa0>)
 800a804:	429c      	cmp	r4, r3
 800a806:	bf08      	it	eq
 800a808:	68ec      	ldreq	r4, [r5, #12]
 800a80a:	e7ca      	b.n	800a7a2 <__swbuf_r+0x1a>
 800a80c:	4621      	mov	r1, r4
 800a80e:	4628      	mov	r0, r5
 800a810:	f000 f80c 	bl	800a82c <__swsetup_r>
 800a814:	2800      	cmp	r0, #0
 800a816:	d0cb      	beq.n	800a7b0 <__swbuf_r+0x28>
 800a818:	f04f 37ff 	mov.w	r7, #4294967295
 800a81c:	e7ea      	b.n	800a7f4 <__swbuf_r+0x6c>
 800a81e:	bf00      	nop
 800a820:	0800be5c 	.word	0x0800be5c
 800a824:	0800be7c 	.word	0x0800be7c
 800a828:	0800be3c 	.word	0x0800be3c

0800a82c <__swsetup_r>:
 800a82c:	4b32      	ldr	r3, [pc, #200]	; (800a8f8 <__swsetup_r+0xcc>)
 800a82e:	b570      	push	{r4, r5, r6, lr}
 800a830:	681d      	ldr	r5, [r3, #0]
 800a832:	4606      	mov	r6, r0
 800a834:	460c      	mov	r4, r1
 800a836:	b125      	cbz	r5, 800a842 <__swsetup_r+0x16>
 800a838:	69ab      	ldr	r3, [r5, #24]
 800a83a:	b913      	cbnz	r3, 800a842 <__swsetup_r+0x16>
 800a83c:	4628      	mov	r0, r5
 800a83e:	f000 f985 	bl	800ab4c <__sinit>
 800a842:	4b2e      	ldr	r3, [pc, #184]	; (800a8fc <__swsetup_r+0xd0>)
 800a844:	429c      	cmp	r4, r3
 800a846:	d10f      	bne.n	800a868 <__swsetup_r+0x3c>
 800a848:	686c      	ldr	r4, [r5, #4]
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a850:	0719      	lsls	r1, r3, #28
 800a852:	d42c      	bmi.n	800a8ae <__swsetup_r+0x82>
 800a854:	06dd      	lsls	r5, r3, #27
 800a856:	d411      	bmi.n	800a87c <__swsetup_r+0x50>
 800a858:	2309      	movs	r3, #9
 800a85a:	6033      	str	r3, [r6, #0]
 800a85c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	f04f 30ff 	mov.w	r0, #4294967295
 800a866:	e03e      	b.n	800a8e6 <__swsetup_r+0xba>
 800a868:	4b25      	ldr	r3, [pc, #148]	; (800a900 <__swsetup_r+0xd4>)
 800a86a:	429c      	cmp	r4, r3
 800a86c:	d101      	bne.n	800a872 <__swsetup_r+0x46>
 800a86e:	68ac      	ldr	r4, [r5, #8]
 800a870:	e7eb      	b.n	800a84a <__swsetup_r+0x1e>
 800a872:	4b24      	ldr	r3, [pc, #144]	; (800a904 <__swsetup_r+0xd8>)
 800a874:	429c      	cmp	r4, r3
 800a876:	bf08      	it	eq
 800a878:	68ec      	ldreq	r4, [r5, #12]
 800a87a:	e7e6      	b.n	800a84a <__swsetup_r+0x1e>
 800a87c:	0758      	lsls	r0, r3, #29
 800a87e:	d512      	bpl.n	800a8a6 <__swsetup_r+0x7a>
 800a880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a882:	b141      	cbz	r1, 800a896 <__swsetup_r+0x6a>
 800a884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a888:	4299      	cmp	r1, r3
 800a88a:	d002      	beq.n	800a892 <__swsetup_r+0x66>
 800a88c:	4630      	mov	r0, r6
 800a88e:	f7ff fb8d 	bl	8009fac <_free_r>
 800a892:	2300      	movs	r3, #0
 800a894:	6363      	str	r3, [r4, #52]	; 0x34
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a89c:	81a3      	strh	r3, [r4, #12]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	6063      	str	r3, [r4, #4]
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	f043 0308 	orr.w	r3, r3, #8
 800a8ac:	81a3      	strh	r3, [r4, #12]
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	b94b      	cbnz	r3, 800a8c6 <__swsetup_r+0x9a>
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8bc:	d003      	beq.n	800a8c6 <__swsetup_r+0x9a>
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f000 fa07 	bl	800acd4 <__smakebuf_r>
 800a8c6:	89a0      	ldrh	r0, [r4, #12]
 800a8c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8cc:	f010 0301 	ands.w	r3, r0, #1
 800a8d0:	d00a      	beq.n	800a8e8 <__swsetup_r+0xbc>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60a3      	str	r3, [r4, #8]
 800a8d6:	6963      	ldr	r3, [r4, #20]
 800a8d8:	425b      	negs	r3, r3
 800a8da:	61a3      	str	r3, [r4, #24]
 800a8dc:	6923      	ldr	r3, [r4, #16]
 800a8de:	b943      	cbnz	r3, 800a8f2 <__swsetup_r+0xc6>
 800a8e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8e4:	d1ba      	bne.n	800a85c <__swsetup_r+0x30>
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	0781      	lsls	r1, r0, #30
 800a8ea:	bf58      	it	pl
 800a8ec:	6963      	ldrpl	r3, [r4, #20]
 800a8ee:	60a3      	str	r3, [r4, #8]
 800a8f0:	e7f4      	b.n	800a8dc <__swsetup_r+0xb0>
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	e7f7      	b.n	800a8e6 <__swsetup_r+0xba>
 800a8f6:	bf00      	nop
 800a8f8:	2000000c 	.word	0x2000000c
 800a8fc:	0800be5c 	.word	0x0800be5c
 800a900:	0800be7c 	.word	0x0800be7c
 800a904:	0800be3c 	.word	0x0800be3c

0800a908 <abort>:
 800a908:	b508      	push	{r3, lr}
 800a90a:	2006      	movs	r0, #6
 800a90c:	f000 fa56 	bl	800adbc <raise>
 800a910:	2001      	movs	r0, #1
 800a912:	f7fd fa3b 	bl	8007d8c <_exit>
	...

0800a918 <__sflush_r>:
 800a918:	898a      	ldrh	r2, [r1, #12]
 800a91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91e:	4605      	mov	r5, r0
 800a920:	0710      	lsls	r0, r2, #28
 800a922:	460c      	mov	r4, r1
 800a924:	d458      	bmi.n	800a9d8 <__sflush_r+0xc0>
 800a926:	684b      	ldr	r3, [r1, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dc05      	bgt.n	800a938 <__sflush_r+0x20>
 800a92c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dc02      	bgt.n	800a938 <__sflush_r+0x20>
 800a932:	2000      	movs	r0, #0
 800a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a93a:	2e00      	cmp	r6, #0
 800a93c:	d0f9      	beq.n	800a932 <__sflush_r+0x1a>
 800a93e:	2300      	movs	r3, #0
 800a940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a944:	682f      	ldr	r7, [r5, #0]
 800a946:	602b      	str	r3, [r5, #0]
 800a948:	d032      	beq.n	800a9b0 <__sflush_r+0x98>
 800a94a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	075a      	lsls	r2, r3, #29
 800a950:	d505      	bpl.n	800a95e <__sflush_r+0x46>
 800a952:	6863      	ldr	r3, [r4, #4]
 800a954:	1ac0      	subs	r0, r0, r3
 800a956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a958:	b10b      	cbz	r3, 800a95e <__sflush_r+0x46>
 800a95a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a95c:	1ac0      	subs	r0, r0, r3
 800a95e:	2300      	movs	r3, #0
 800a960:	4602      	mov	r2, r0
 800a962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a964:	6a21      	ldr	r1, [r4, #32]
 800a966:	4628      	mov	r0, r5
 800a968:	47b0      	blx	r6
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	d106      	bne.n	800a97e <__sflush_r+0x66>
 800a970:	6829      	ldr	r1, [r5, #0]
 800a972:	291d      	cmp	r1, #29
 800a974:	d82c      	bhi.n	800a9d0 <__sflush_r+0xb8>
 800a976:	4a2a      	ldr	r2, [pc, #168]	; (800aa20 <__sflush_r+0x108>)
 800a978:	40ca      	lsrs	r2, r1
 800a97a:	07d6      	lsls	r6, r2, #31
 800a97c:	d528      	bpl.n	800a9d0 <__sflush_r+0xb8>
 800a97e:	2200      	movs	r2, #0
 800a980:	6062      	str	r2, [r4, #4]
 800a982:	04d9      	lsls	r1, r3, #19
 800a984:	6922      	ldr	r2, [r4, #16]
 800a986:	6022      	str	r2, [r4, #0]
 800a988:	d504      	bpl.n	800a994 <__sflush_r+0x7c>
 800a98a:	1c42      	adds	r2, r0, #1
 800a98c:	d101      	bne.n	800a992 <__sflush_r+0x7a>
 800a98e:	682b      	ldr	r3, [r5, #0]
 800a990:	b903      	cbnz	r3, 800a994 <__sflush_r+0x7c>
 800a992:	6560      	str	r0, [r4, #84]	; 0x54
 800a994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a996:	602f      	str	r7, [r5, #0]
 800a998:	2900      	cmp	r1, #0
 800a99a:	d0ca      	beq.n	800a932 <__sflush_r+0x1a>
 800a99c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9a0:	4299      	cmp	r1, r3
 800a9a2:	d002      	beq.n	800a9aa <__sflush_r+0x92>
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f7ff fb01 	bl	8009fac <_free_r>
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	6360      	str	r0, [r4, #52]	; 0x34
 800a9ae:	e7c1      	b.n	800a934 <__sflush_r+0x1c>
 800a9b0:	6a21      	ldr	r1, [r4, #32]
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b0      	blx	r6
 800a9b8:	1c41      	adds	r1, r0, #1
 800a9ba:	d1c7      	bne.n	800a94c <__sflush_r+0x34>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0c4      	beq.n	800a94c <__sflush_r+0x34>
 800a9c2:	2b1d      	cmp	r3, #29
 800a9c4:	d001      	beq.n	800a9ca <__sflush_r+0xb2>
 800a9c6:	2b16      	cmp	r3, #22
 800a9c8:	d101      	bne.n	800a9ce <__sflush_r+0xb6>
 800a9ca:	602f      	str	r7, [r5, #0]
 800a9cc:	e7b1      	b.n	800a932 <__sflush_r+0x1a>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	e7ad      	b.n	800a934 <__sflush_r+0x1c>
 800a9d8:	690f      	ldr	r7, [r1, #16]
 800a9da:	2f00      	cmp	r7, #0
 800a9dc:	d0a9      	beq.n	800a932 <__sflush_r+0x1a>
 800a9de:	0793      	lsls	r3, r2, #30
 800a9e0:	680e      	ldr	r6, [r1, #0]
 800a9e2:	bf08      	it	eq
 800a9e4:	694b      	ldreq	r3, [r1, #20]
 800a9e6:	600f      	str	r7, [r1, #0]
 800a9e8:	bf18      	it	ne
 800a9ea:	2300      	movne	r3, #0
 800a9ec:	eba6 0807 	sub.w	r8, r6, r7
 800a9f0:	608b      	str	r3, [r1, #8]
 800a9f2:	f1b8 0f00 	cmp.w	r8, #0
 800a9f6:	dd9c      	ble.n	800a932 <__sflush_r+0x1a>
 800a9f8:	6a21      	ldr	r1, [r4, #32]
 800a9fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9fc:	4643      	mov	r3, r8
 800a9fe:	463a      	mov	r2, r7
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b0      	blx	r6
 800aa04:	2800      	cmp	r0, #0
 800aa06:	dc06      	bgt.n	800aa16 <__sflush_r+0xfe>
 800aa08:	89a3      	ldrh	r3, [r4, #12]
 800aa0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa0e:	81a3      	strh	r3, [r4, #12]
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	e78e      	b.n	800a934 <__sflush_r+0x1c>
 800aa16:	4407      	add	r7, r0
 800aa18:	eba8 0800 	sub.w	r8, r8, r0
 800aa1c:	e7e9      	b.n	800a9f2 <__sflush_r+0xda>
 800aa1e:	bf00      	nop
 800aa20:	20400001 	.word	0x20400001

0800aa24 <_fflush_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	690b      	ldr	r3, [r1, #16]
 800aa28:	4605      	mov	r5, r0
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	b913      	cbnz	r3, 800aa34 <_fflush_r+0x10>
 800aa2e:	2500      	movs	r5, #0
 800aa30:	4628      	mov	r0, r5
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	b118      	cbz	r0, 800aa3e <_fflush_r+0x1a>
 800aa36:	6983      	ldr	r3, [r0, #24]
 800aa38:	b90b      	cbnz	r3, 800aa3e <_fflush_r+0x1a>
 800aa3a:	f000 f887 	bl	800ab4c <__sinit>
 800aa3e:	4b14      	ldr	r3, [pc, #80]	; (800aa90 <_fflush_r+0x6c>)
 800aa40:	429c      	cmp	r4, r3
 800aa42:	d11b      	bne.n	800aa7c <_fflush_r+0x58>
 800aa44:	686c      	ldr	r4, [r5, #4]
 800aa46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d0ef      	beq.n	800aa2e <_fflush_r+0xa>
 800aa4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa50:	07d0      	lsls	r0, r2, #31
 800aa52:	d404      	bmi.n	800aa5e <_fflush_r+0x3a>
 800aa54:	0599      	lsls	r1, r3, #22
 800aa56:	d402      	bmi.n	800aa5e <_fflush_r+0x3a>
 800aa58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa5a:	f000 f915 	bl	800ac88 <__retarget_lock_acquire_recursive>
 800aa5e:	4628      	mov	r0, r5
 800aa60:	4621      	mov	r1, r4
 800aa62:	f7ff ff59 	bl	800a918 <__sflush_r>
 800aa66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa68:	07da      	lsls	r2, r3, #31
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	d4e0      	bmi.n	800aa30 <_fflush_r+0xc>
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	059b      	lsls	r3, r3, #22
 800aa72:	d4dd      	bmi.n	800aa30 <_fflush_r+0xc>
 800aa74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa76:	f000 f908 	bl	800ac8a <__retarget_lock_release_recursive>
 800aa7a:	e7d9      	b.n	800aa30 <_fflush_r+0xc>
 800aa7c:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <_fflush_r+0x70>)
 800aa7e:	429c      	cmp	r4, r3
 800aa80:	d101      	bne.n	800aa86 <_fflush_r+0x62>
 800aa82:	68ac      	ldr	r4, [r5, #8]
 800aa84:	e7df      	b.n	800aa46 <_fflush_r+0x22>
 800aa86:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <_fflush_r+0x74>)
 800aa88:	429c      	cmp	r4, r3
 800aa8a:	bf08      	it	eq
 800aa8c:	68ec      	ldreq	r4, [r5, #12]
 800aa8e:	e7da      	b.n	800aa46 <_fflush_r+0x22>
 800aa90:	0800be5c 	.word	0x0800be5c
 800aa94:	0800be7c 	.word	0x0800be7c
 800aa98:	0800be3c 	.word	0x0800be3c

0800aa9c <std>:
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	b510      	push	{r4, lr}
 800aaa0:	4604      	mov	r4, r0
 800aaa2:	e9c0 3300 	strd	r3, r3, [r0]
 800aaa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaaa:	6083      	str	r3, [r0, #8]
 800aaac:	8181      	strh	r1, [r0, #12]
 800aaae:	6643      	str	r3, [r0, #100]	; 0x64
 800aab0:	81c2      	strh	r2, [r0, #14]
 800aab2:	6183      	str	r3, [r0, #24]
 800aab4:	4619      	mov	r1, r3
 800aab6:	2208      	movs	r2, #8
 800aab8:	305c      	adds	r0, #92	; 0x5c
 800aaba:	f7ff fa6f 	bl	8009f9c <memset>
 800aabe:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <std+0x38>)
 800aac0:	6263      	str	r3, [r4, #36]	; 0x24
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <std+0x3c>)
 800aac4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aac6:	4b05      	ldr	r3, [pc, #20]	; (800aadc <std+0x40>)
 800aac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaca:	4b05      	ldr	r3, [pc, #20]	; (800aae0 <std+0x44>)
 800aacc:	6224      	str	r4, [r4, #32]
 800aace:	6323      	str	r3, [r4, #48]	; 0x30
 800aad0:	bd10      	pop	{r4, pc}
 800aad2:	bf00      	nop
 800aad4:	0800adf5 	.word	0x0800adf5
 800aad8:	0800ae17 	.word	0x0800ae17
 800aadc:	0800ae4f 	.word	0x0800ae4f
 800aae0:	0800ae73 	.word	0x0800ae73

0800aae4 <_cleanup_r>:
 800aae4:	4901      	ldr	r1, [pc, #4]	; (800aaec <_cleanup_r+0x8>)
 800aae6:	f000 b8af 	b.w	800ac48 <_fwalk_reent>
 800aaea:	bf00      	nop
 800aaec:	0800aa25 	.word	0x0800aa25

0800aaf0 <__sfmoreglue>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	1e4a      	subs	r2, r1, #1
 800aaf4:	2568      	movs	r5, #104	; 0x68
 800aaf6:	4355      	muls	r5, r2
 800aaf8:	460e      	mov	r6, r1
 800aafa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aafe:	f7ff faa5 	bl	800a04c <_malloc_r>
 800ab02:	4604      	mov	r4, r0
 800ab04:	b140      	cbz	r0, 800ab18 <__sfmoreglue+0x28>
 800ab06:	2100      	movs	r1, #0
 800ab08:	e9c0 1600 	strd	r1, r6, [r0]
 800ab0c:	300c      	adds	r0, #12
 800ab0e:	60a0      	str	r0, [r4, #8]
 800ab10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab14:	f7ff fa42 	bl	8009f9c <memset>
 800ab18:	4620      	mov	r0, r4
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}

0800ab1c <__sfp_lock_acquire>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	; (800ab24 <__sfp_lock_acquire+0x8>)
 800ab1e:	f000 b8b3 	b.w	800ac88 <__retarget_lock_acquire_recursive>
 800ab22:	bf00      	nop
 800ab24:	20000214 	.word	0x20000214

0800ab28 <__sfp_lock_release>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__sfp_lock_release+0x8>)
 800ab2a:	f000 b8ae 	b.w	800ac8a <__retarget_lock_release_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20000214 	.word	0x20000214

0800ab34 <__sinit_lock_acquire>:
 800ab34:	4801      	ldr	r0, [pc, #4]	; (800ab3c <__sinit_lock_acquire+0x8>)
 800ab36:	f000 b8a7 	b.w	800ac88 <__retarget_lock_acquire_recursive>
 800ab3a:	bf00      	nop
 800ab3c:	2000020f 	.word	0x2000020f

0800ab40 <__sinit_lock_release>:
 800ab40:	4801      	ldr	r0, [pc, #4]	; (800ab48 <__sinit_lock_release+0x8>)
 800ab42:	f000 b8a2 	b.w	800ac8a <__retarget_lock_release_recursive>
 800ab46:	bf00      	nop
 800ab48:	2000020f 	.word	0x2000020f

0800ab4c <__sinit>:
 800ab4c:	b510      	push	{r4, lr}
 800ab4e:	4604      	mov	r4, r0
 800ab50:	f7ff fff0 	bl	800ab34 <__sinit_lock_acquire>
 800ab54:	69a3      	ldr	r3, [r4, #24]
 800ab56:	b11b      	cbz	r3, 800ab60 <__sinit+0x14>
 800ab58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab5c:	f7ff bff0 	b.w	800ab40 <__sinit_lock_release>
 800ab60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab64:	6523      	str	r3, [r4, #80]	; 0x50
 800ab66:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <__sinit+0x68>)
 800ab68:	4a13      	ldr	r2, [pc, #76]	; (800abb8 <__sinit+0x6c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab6e:	42a3      	cmp	r3, r4
 800ab70:	bf04      	itt	eq
 800ab72:	2301      	moveq	r3, #1
 800ab74:	61a3      	streq	r3, [r4, #24]
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 f820 	bl	800abbc <__sfp>
 800ab7c:	6060      	str	r0, [r4, #4]
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 f81c 	bl	800abbc <__sfp>
 800ab84:	60a0      	str	r0, [r4, #8]
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 f818 	bl	800abbc <__sfp>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	60e0      	str	r0, [r4, #12]
 800ab90:	2104      	movs	r1, #4
 800ab92:	6860      	ldr	r0, [r4, #4]
 800ab94:	f7ff ff82 	bl	800aa9c <std>
 800ab98:	68a0      	ldr	r0, [r4, #8]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	2109      	movs	r1, #9
 800ab9e:	f7ff ff7d 	bl	800aa9c <std>
 800aba2:	68e0      	ldr	r0, [r4, #12]
 800aba4:	2202      	movs	r2, #2
 800aba6:	2112      	movs	r1, #18
 800aba8:	f7ff ff78 	bl	800aa9c <std>
 800abac:	2301      	movs	r3, #1
 800abae:	61a3      	str	r3, [r4, #24]
 800abb0:	e7d2      	b.n	800ab58 <__sinit+0xc>
 800abb2:	bf00      	nop
 800abb4:	0800be04 	.word	0x0800be04
 800abb8:	0800aae5 	.word	0x0800aae5

0800abbc <__sfp>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	4607      	mov	r7, r0
 800abc0:	f7ff ffac 	bl	800ab1c <__sfp_lock_acquire>
 800abc4:	4b1e      	ldr	r3, [pc, #120]	; (800ac40 <__sfp+0x84>)
 800abc6:	681e      	ldr	r6, [r3, #0]
 800abc8:	69b3      	ldr	r3, [r6, #24]
 800abca:	b913      	cbnz	r3, 800abd2 <__sfp+0x16>
 800abcc:	4630      	mov	r0, r6
 800abce:	f7ff ffbd 	bl	800ab4c <__sinit>
 800abd2:	3648      	adds	r6, #72	; 0x48
 800abd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abd8:	3b01      	subs	r3, #1
 800abda:	d503      	bpl.n	800abe4 <__sfp+0x28>
 800abdc:	6833      	ldr	r3, [r6, #0]
 800abde:	b30b      	cbz	r3, 800ac24 <__sfp+0x68>
 800abe0:	6836      	ldr	r6, [r6, #0]
 800abe2:	e7f7      	b.n	800abd4 <__sfp+0x18>
 800abe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abe8:	b9d5      	cbnz	r5, 800ac20 <__sfp+0x64>
 800abea:	4b16      	ldr	r3, [pc, #88]	; (800ac44 <__sfp+0x88>)
 800abec:	60e3      	str	r3, [r4, #12]
 800abee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abf2:	6665      	str	r5, [r4, #100]	; 0x64
 800abf4:	f000 f847 	bl	800ac86 <__retarget_lock_init_recursive>
 800abf8:	f7ff ff96 	bl	800ab28 <__sfp_lock_release>
 800abfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac04:	6025      	str	r5, [r4, #0]
 800ac06:	61a5      	str	r5, [r4, #24]
 800ac08:	2208      	movs	r2, #8
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac10:	f7ff f9c4 	bl	8009f9c <memset>
 800ac14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac20:	3468      	adds	r4, #104	; 0x68
 800ac22:	e7d9      	b.n	800abd8 <__sfp+0x1c>
 800ac24:	2104      	movs	r1, #4
 800ac26:	4638      	mov	r0, r7
 800ac28:	f7ff ff62 	bl	800aaf0 <__sfmoreglue>
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	6030      	str	r0, [r6, #0]
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d1d5      	bne.n	800abe0 <__sfp+0x24>
 800ac34:	f7ff ff78 	bl	800ab28 <__sfp_lock_release>
 800ac38:	230c      	movs	r3, #12
 800ac3a:	603b      	str	r3, [r7, #0]
 800ac3c:	e7ee      	b.n	800ac1c <__sfp+0x60>
 800ac3e:	bf00      	nop
 800ac40:	0800be04 	.word	0x0800be04
 800ac44:	ffff0001 	.word	0xffff0001

0800ac48 <_fwalk_reent>:
 800ac48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	4688      	mov	r8, r1
 800ac50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac54:	2700      	movs	r7, #0
 800ac56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac5a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac5e:	d505      	bpl.n	800ac6c <_fwalk_reent+0x24>
 800ac60:	6824      	ldr	r4, [r4, #0]
 800ac62:	2c00      	cmp	r4, #0
 800ac64:	d1f7      	bne.n	800ac56 <_fwalk_reent+0xe>
 800ac66:	4638      	mov	r0, r7
 800ac68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6c:	89ab      	ldrh	r3, [r5, #12]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d907      	bls.n	800ac82 <_fwalk_reent+0x3a>
 800ac72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac76:	3301      	adds	r3, #1
 800ac78:	d003      	beq.n	800ac82 <_fwalk_reent+0x3a>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	47c0      	blx	r8
 800ac80:	4307      	orrs	r7, r0
 800ac82:	3568      	adds	r5, #104	; 0x68
 800ac84:	e7e9      	b.n	800ac5a <_fwalk_reent+0x12>

0800ac86 <__retarget_lock_init_recursive>:
 800ac86:	4770      	bx	lr

0800ac88 <__retarget_lock_acquire_recursive>:
 800ac88:	4770      	bx	lr

0800ac8a <__retarget_lock_release_recursive>:
 800ac8a:	4770      	bx	lr

0800ac8c <__swhatbuf_r>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	460e      	mov	r6, r1
 800ac90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac94:	2900      	cmp	r1, #0
 800ac96:	b096      	sub	sp, #88	; 0x58
 800ac98:	4614      	mov	r4, r2
 800ac9a:	461d      	mov	r5, r3
 800ac9c:	da07      	bge.n	800acae <__swhatbuf_r+0x22>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	602b      	str	r3, [r5, #0]
 800aca2:	89b3      	ldrh	r3, [r6, #12]
 800aca4:	061a      	lsls	r2, r3, #24
 800aca6:	d410      	bmi.n	800acca <__swhatbuf_r+0x3e>
 800aca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acac:	e00e      	b.n	800accc <__swhatbuf_r+0x40>
 800acae:	466a      	mov	r2, sp
 800acb0:	f000 f906 	bl	800aec0 <_fstat_r>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	dbf2      	blt.n	800ac9e <__swhatbuf_r+0x12>
 800acb8:	9a01      	ldr	r2, [sp, #4]
 800acba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acc2:	425a      	negs	r2, r3
 800acc4:	415a      	adcs	r2, r3
 800acc6:	602a      	str	r2, [r5, #0]
 800acc8:	e7ee      	b.n	800aca8 <__swhatbuf_r+0x1c>
 800acca:	2340      	movs	r3, #64	; 0x40
 800accc:	2000      	movs	r0, #0
 800acce:	6023      	str	r3, [r4, #0]
 800acd0:	b016      	add	sp, #88	; 0x58
 800acd2:	bd70      	pop	{r4, r5, r6, pc}

0800acd4 <__smakebuf_r>:
 800acd4:	898b      	ldrh	r3, [r1, #12]
 800acd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acd8:	079d      	lsls	r5, r3, #30
 800acda:	4606      	mov	r6, r0
 800acdc:	460c      	mov	r4, r1
 800acde:	d507      	bpl.n	800acf0 <__smakebuf_r+0x1c>
 800ace0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	6123      	str	r3, [r4, #16]
 800ace8:	2301      	movs	r3, #1
 800acea:	6163      	str	r3, [r4, #20]
 800acec:	b002      	add	sp, #8
 800acee:	bd70      	pop	{r4, r5, r6, pc}
 800acf0:	ab01      	add	r3, sp, #4
 800acf2:	466a      	mov	r2, sp
 800acf4:	f7ff ffca 	bl	800ac8c <__swhatbuf_r>
 800acf8:	9900      	ldr	r1, [sp, #0]
 800acfa:	4605      	mov	r5, r0
 800acfc:	4630      	mov	r0, r6
 800acfe:	f7ff f9a5 	bl	800a04c <_malloc_r>
 800ad02:	b948      	cbnz	r0, 800ad18 <__smakebuf_r+0x44>
 800ad04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad08:	059a      	lsls	r2, r3, #22
 800ad0a:	d4ef      	bmi.n	800acec <__smakebuf_r+0x18>
 800ad0c:	f023 0303 	bic.w	r3, r3, #3
 800ad10:	f043 0302 	orr.w	r3, r3, #2
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	e7e3      	b.n	800ace0 <__smakebuf_r+0xc>
 800ad18:	4b0d      	ldr	r3, [pc, #52]	; (800ad50 <__smakebuf_r+0x7c>)
 800ad1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	6020      	str	r0, [r4, #0]
 800ad20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad24:	81a3      	strh	r3, [r4, #12]
 800ad26:	9b00      	ldr	r3, [sp, #0]
 800ad28:	6163      	str	r3, [r4, #20]
 800ad2a:	9b01      	ldr	r3, [sp, #4]
 800ad2c:	6120      	str	r0, [r4, #16]
 800ad2e:	b15b      	cbz	r3, 800ad48 <__smakebuf_r+0x74>
 800ad30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad34:	4630      	mov	r0, r6
 800ad36:	f000 f8d5 	bl	800aee4 <_isatty_r>
 800ad3a:	b128      	cbz	r0, 800ad48 <__smakebuf_r+0x74>
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	f023 0303 	bic.w	r3, r3, #3
 800ad42:	f043 0301 	orr.w	r3, r3, #1
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	89a0      	ldrh	r0, [r4, #12]
 800ad4a:	4305      	orrs	r5, r0
 800ad4c:	81a5      	strh	r5, [r4, #12]
 800ad4e:	e7cd      	b.n	800acec <__smakebuf_r+0x18>
 800ad50:	0800aae5 	.word	0x0800aae5

0800ad54 <__malloc_lock>:
 800ad54:	4801      	ldr	r0, [pc, #4]	; (800ad5c <__malloc_lock+0x8>)
 800ad56:	f7ff bf97 	b.w	800ac88 <__retarget_lock_acquire_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	20000210 	.word	0x20000210

0800ad60 <__malloc_unlock>:
 800ad60:	4801      	ldr	r0, [pc, #4]	; (800ad68 <__malloc_unlock+0x8>)
 800ad62:	f7ff bf92 	b.w	800ac8a <__retarget_lock_release_recursive>
 800ad66:	bf00      	nop
 800ad68:	20000210 	.word	0x20000210

0800ad6c <_raise_r>:
 800ad6c:	291f      	cmp	r1, #31
 800ad6e:	b538      	push	{r3, r4, r5, lr}
 800ad70:	4604      	mov	r4, r0
 800ad72:	460d      	mov	r5, r1
 800ad74:	d904      	bls.n	800ad80 <_raise_r+0x14>
 800ad76:	2316      	movs	r3, #22
 800ad78:	6003      	str	r3, [r0, #0]
 800ad7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad82:	b112      	cbz	r2, 800ad8a <_raise_r+0x1e>
 800ad84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad88:	b94b      	cbnz	r3, 800ad9e <_raise_r+0x32>
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 f830 	bl	800adf0 <_getpid_r>
 800ad90:	462a      	mov	r2, r5
 800ad92:	4601      	mov	r1, r0
 800ad94:	4620      	mov	r0, r4
 800ad96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad9a:	f000 b817 	b.w	800adcc <_kill_r>
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d00a      	beq.n	800adb8 <_raise_r+0x4c>
 800ada2:	1c59      	adds	r1, r3, #1
 800ada4:	d103      	bne.n	800adae <_raise_r+0x42>
 800ada6:	2316      	movs	r3, #22
 800ada8:	6003      	str	r3, [r0, #0]
 800adaa:	2001      	movs	r0, #1
 800adac:	e7e7      	b.n	800ad7e <_raise_r+0x12>
 800adae:	2400      	movs	r4, #0
 800adb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adb4:	4628      	mov	r0, r5
 800adb6:	4798      	blx	r3
 800adb8:	2000      	movs	r0, #0
 800adba:	e7e0      	b.n	800ad7e <_raise_r+0x12>

0800adbc <raise>:
 800adbc:	4b02      	ldr	r3, [pc, #8]	; (800adc8 <raise+0xc>)
 800adbe:	4601      	mov	r1, r0
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	f7ff bfd3 	b.w	800ad6c <_raise_r>
 800adc6:	bf00      	nop
 800adc8:	2000000c 	.word	0x2000000c

0800adcc <_kill_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d07      	ldr	r5, [pc, #28]	; (800adec <_kill_r+0x20>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	4611      	mov	r1, r2
 800add8:	602b      	str	r3, [r5, #0]
 800adda:	f7fc ffc7 	bl	8007d6c <_kill>
 800adde:	1c43      	adds	r3, r0, #1
 800ade0:	d102      	bne.n	800ade8 <_kill_r+0x1c>
 800ade2:	682b      	ldr	r3, [r5, #0]
 800ade4:	b103      	cbz	r3, 800ade8 <_kill_r+0x1c>
 800ade6:	6023      	str	r3, [r4, #0]
 800ade8:	bd38      	pop	{r3, r4, r5, pc}
 800adea:	bf00      	nop
 800adec:	20000218 	.word	0x20000218

0800adf0 <_getpid_r>:
 800adf0:	f7fc bfb4 	b.w	8007d5c <_getpid>

0800adf4 <__sread>:
 800adf4:	b510      	push	{r4, lr}
 800adf6:	460c      	mov	r4, r1
 800adf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adfc:	f000 f894 	bl	800af28 <_read_r>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	bfab      	itete	ge
 800ae04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae06:	89a3      	ldrhlt	r3, [r4, #12]
 800ae08:	181b      	addge	r3, r3, r0
 800ae0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae0e:	bfac      	ite	ge
 800ae10:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae12:	81a3      	strhlt	r3, [r4, #12]
 800ae14:	bd10      	pop	{r4, pc}

0800ae16 <__swrite>:
 800ae16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1a:	461f      	mov	r7, r3
 800ae1c:	898b      	ldrh	r3, [r1, #12]
 800ae1e:	05db      	lsls	r3, r3, #23
 800ae20:	4605      	mov	r5, r0
 800ae22:	460c      	mov	r4, r1
 800ae24:	4616      	mov	r6, r2
 800ae26:	d505      	bpl.n	800ae34 <__swrite+0x1e>
 800ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f000 f868 	bl	800af04 <_lseek_r>
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	4632      	mov	r2, r6
 800ae42:	463b      	mov	r3, r7
 800ae44:	4628      	mov	r0, r5
 800ae46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4a:	f000 b817 	b.w	800ae7c <_write_r>

0800ae4e <__sseek>:
 800ae4e:	b510      	push	{r4, lr}
 800ae50:	460c      	mov	r4, r1
 800ae52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae56:	f000 f855 	bl	800af04 <_lseek_r>
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	bf15      	itete	ne
 800ae60:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae6a:	81a3      	strheq	r3, [r4, #12]
 800ae6c:	bf18      	it	ne
 800ae6e:	81a3      	strhne	r3, [r4, #12]
 800ae70:	bd10      	pop	{r4, pc}

0800ae72 <__sclose>:
 800ae72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae76:	f000 b813 	b.w	800aea0 <_close_r>
	...

0800ae7c <_write_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d07      	ldr	r5, [pc, #28]	; (800ae9c <_write_r+0x20>)
 800ae80:	4604      	mov	r4, r0
 800ae82:	4608      	mov	r0, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	2200      	movs	r2, #0
 800ae88:	602a      	str	r2, [r5, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f7fc ffa5 	bl	8007dda <_write>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_write_r+0x1e>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_write_r+0x1e>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	20000218 	.word	0x20000218

0800aea0 <_close_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d06      	ldr	r5, [pc, #24]	; (800aebc <_close_r+0x1c>)
 800aea4:	2300      	movs	r3, #0
 800aea6:	4604      	mov	r4, r0
 800aea8:	4608      	mov	r0, r1
 800aeaa:	602b      	str	r3, [r5, #0]
 800aeac:	f7fc ffb1 	bl	8007e12 <_close>
 800aeb0:	1c43      	adds	r3, r0, #1
 800aeb2:	d102      	bne.n	800aeba <_close_r+0x1a>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	b103      	cbz	r3, 800aeba <_close_r+0x1a>
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	bd38      	pop	{r3, r4, r5, pc}
 800aebc:	20000218 	.word	0x20000218

0800aec0 <_fstat_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4d07      	ldr	r5, [pc, #28]	; (800aee0 <_fstat_r+0x20>)
 800aec4:	2300      	movs	r3, #0
 800aec6:	4604      	mov	r4, r0
 800aec8:	4608      	mov	r0, r1
 800aeca:	4611      	mov	r1, r2
 800aecc:	602b      	str	r3, [r5, #0]
 800aece:	f7fc ffac 	bl	8007e2a <_fstat>
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	d102      	bne.n	800aedc <_fstat_r+0x1c>
 800aed6:	682b      	ldr	r3, [r5, #0]
 800aed8:	b103      	cbz	r3, 800aedc <_fstat_r+0x1c>
 800aeda:	6023      	str	r3, [r4, #0]
 800aedc:	bd38      	pop	{r3, r4, r5, pc}
 800aede:	bf00      	nop
 800aee0:	20000218 	.word	0x20000218

0800aee4 <_isatty_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	4d06      	ldr	r5, [pc, #24]	; (800af00 <_isatty_r+0x1c>)
 800aee8:	2300      	movs	r3, #0
 800aeea:	4604      	mov	r4, r0
 800aeec:	4608      	mov	r0, r1
 800aeee:	602b      	str	r3, [r5, #0]
 800aef0:	f7fc ffab 	bl	8007e4a <_isatty>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_isatty_r+0x1a>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_isatty_r+0x1a>
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	20000218 	.word	0x20000218

0800af04 <_lseek_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4d07      	ldr	r5, [pc, #28]	; (800af24 <_lseek_r+0x20>)
 800af08:	4604      	mov	r4, r0
 800af0a:	4608      	mov	r0, r1
 800af0c:	4611      	mov	r1, r2
 800af0e:	2200      	movs	r2, #0
 800af10:	602a      	str	r2, [r5, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	f7fc ffa4 	bl	8007e60 <_lseek>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_lseek_r+0x1e>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_lseek_r+0x1e>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	20000218 	.word	0x20000218

0800af28 <_read_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d07      	ldr	r5, [pc, #28]	; (800af48 <_read_r+0x20>)
 800af2c:	4604      	mov	r4, r0
 800af2e:	4608      	mov	r0, r1
 800af30:	4611      	mov	r1, r2
 800af32:	2200      	movs	r2, #0
 800af34:	602a      	str	r2, [r5, #0]
 800af36:	461a      	mov	r2, r3
 800af38:	f7fc ff32 	bl	8007da0 <_read>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	d102      	bne.n	800af46 <_read_r+0x1e>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	b103      	cbz	r3, 800af46 <_read_r+0x1e>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	20000218 	.word	0x20000218

0800af4c <_init>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr

0800af58 <_fini>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	bf00      	nop
 800af5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5e:	bc08      	pop	{r3}
 800af60:	469e      	mov	lr, r3
 800af62:	4770      	bx	lr
