
Littlefs_quad_mag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  08012024  08012024  00022024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fe8  08012fe8  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  08012fe8  08012fe8  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012fe8  08012fe8  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fe8  08012fe8  00022fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fec  08012fec  00022fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08012ff0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000148c  200001e0  080131d0  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  080131d0  0003166c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b60  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004724  00000000  00000000  00054d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00059490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  0005ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cbdd  00000000  00000000  0005c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6cd  00000000  00000000  00079295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff0d  00000000  00000000  00095962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012586f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007174  00000000  00000000  001258c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0801200c 	.word	0x0801200c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	0801200c 	.word	0x0801200c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__popcountsi2>:
 800015c:	0843      	lsrs	r3, r0, #1
 800015e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000162:	1ac0      	subs	r0, r0, r3
 8000164:	0883      	lsrs	r3, r0, #2
 8000166:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800016a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 800016e:	4418      	add	r0, r3
 8000170:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000174:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000178:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800017c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000180:	0e00      	lsrs	r0, r0, #24
 8000182:	4770      	bx	lr

08000184 <Read_ID>:
 * @param	SPI			pointer to the handle of SPI connected to Flash from which to read data
 * @param	*rxData		typedef pointer to the data to be read
 *
 * @retval	20 bytes of specific data can be read
 */
void Read_ID(SPI_HandleTypeDef *SPI, DEVICE_ID *rxData) {
 8000184:	b5b0      	push	{r4, r5, r7, lr}
 8000186:	b08e      	sub	sp, #56	; 0x38
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
	uint8_t cmd = READ_ID;
 800018e:	239e      	movs	r3, #158	; 0x9e
 8000190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	DEVICE_ID buff;
	uint8_t data[20];
	int i;
	FM_Enable(SPI);
 8000194:	6878      	ldr	r0, [r7, #4]
 8000196:	f000 f997 	bl	80004c8 <FM_Enable>
	HAL_Delay(1);
 800019a:	2001      	movs	r0, #1
 800019c:	f007 feda 	bl	8007f54 <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 300);
 80001a0:	f107 0137 	add.w	r1, r7, #55	; 0x37
 80001a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80001a8:	2201      	movs	r2, #1
 80001aa:	6878      	ldr	r0, [r7, #4]
 80001ac:	f00b fab2 	bl	800b714 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, 20, 1000);
 80001b0:	f107 010c 	add.w	r1, r7, #12
 80001b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b8:	2214      	movs	r2, #20
 80001ba:	6878      	ldr	r0, [r7, #4]
 80001bc:	f00b fbed 	bl	800b99a <HAL_SPI_Receive>
	HAL_Delay(1);
 80001c0:	2001      	movs	r0, #1
 80001c2:	f007 fec7 	bl	8007f54 <HAL_Delay>
	FM_Disable(SPI);
 80001c6:	6878      	ldr	r0, [r7, #4]
 80001c8:	f000 f998 	bl	80004fc <FM_Disable>
	HAL_Delay(500);
 80001cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001d0:	f007 fec0 	bl	8007f54 <HAL_Delay>
	buff.MAN_ID = data[0];
 80001d4:	7b3b      	ldrb	r3, [r7, #12]
 80001d6:	f887 3020 	strb.w	r3, [r7, #32]
	buff.M_TYPE = data[1];
 80001da:	7b7b      	ldrb	r3, [r7, #13]
 80001dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buff.M_CAP = data[2];
 80001e0:	7bbb      	ldrb	r3, [r7, #14]
 80001e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buff.REM_BYTES = data[3];
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
 80001e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buff.EXT_ID = data[4];
 80001ec:	7c3b      	ldrb	r3, [r7, #16]
 80001ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buff.DEV_INFO = data[5];
 80001f2:	7c7b      	ldrb	r3, [r7, #17]
 80001f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
//	for (i = 6; i < 20; i++) {
//		buff.UID[i] = data[i];
//	}
	*rxData = buff;
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	461d      	mov	r5, r3
 80001fc:	f107 0420 	add.w	r4, r7, #32
 8000200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000202:	6028      	str	r0, [r5, #0]
 8000204:	6069      	str	r1, [r5, #4]
 8000206:	60aa      	str	r2, [r5, #8]
 8000208:	60eb      	str	r3, [r5, #12]
 800020a:	6820      	ldr	r0, [r4, #0]
 800020c:	6128      	str	r0, [r5, #16]
	return;
 800020e:	bf00      	nop
}
 8000210:	3738      	adds	r7, #56	; 0x38
 8000212:	46bd      	mov	sp, r7
 8000214:	bdb0      	pop	{r4, r5, r7, pc}

08000216 <Bulk_Read_4B>:
 * * @param	address		address from which the data is to be read
 * 			*data		pointer to store the data which is read from the corresponding address
 * 			size		size of the data to be read
 */
void Bulk_Read_4B(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 8000216:	b580      	push	{r7, lr}
 8000218:	b086      	sub	sp, #24
 800021a:	af00      	add	r7, sp, #0
 800021c:	60f8      	str	r0, [r7, #12]
 800021e:	60b9      	str	r1, [r7, #8]
 8000220:	607a      	str	r2, [r7, #4]
 8000222:	807b      	strh	r3, [r7, #2]
	uint8_t cmd[5];
	cmd[0] = BYTE_4_READ;
 8000224:	2313      	movs	r3, #19
 8000226:	743b      	strb	r3, [r7, #16]
	cmd[1] = (uint8_t) (address >> 24 & 0xff);
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	0e1b      	lsrs	r3, r3, #24
 800022c:	b2db      	uxtb	r3, r3
 800022e:	747b      	strb	r3, [r7, #17]
	cmd[2] = (uint8_t) (address >> 16 & 0xff);
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	0c1b      	lsrs	r3, r3, #16
 8000234:	b2db      	uxtb	r3, r3
 8000236:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t) (address >> 8);
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	0a1b      	lsrs	r3, r3, #8
 800023c:	b2db      	uxtb	r3, r3
 800023e:	74fb      	strb	r3, [r7, #19]
	cmd[4] = (uint8_t) (address);
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	b2db      	uxtb	r3, r3
 8000244:	753b      	strb	r3, [r7, #20]
	FM_Enable(SPI);
 8000246:	68f8      	ldr	r0, [r7, #12]
 8000248:	f000 f93e 	bl	80004c8 <FM_Enable>
	HAL_SPI_Transmit(SPI, cmd, 5, 100);
 800024c:	f107 0110 	add.w	r1, r7, #16
 8000250:	2364      	movs	r3, #100	; 0x64
 8000252:	2205      	movs	r2, #5
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f00b fa5d 	bl	800b714 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, size, 200);
 800025a:	887a      	ldrh	r2, [r7, #2]
 800025c:	23c8      	movs	r3, #200	; 0xc8
 800025e:	6879      	ldr	r1, [r7, #4]
 8000260:	68f8      	ldr	r0, [r7, #12]
 8000262:	f00b fb9a 	bl	800b99a <HAL_SPI_Receive>
	FM_Disable(SPI);
 8000266:	68f8      	ldr	r0, [r7, #12]
 8000268:	f000 f948 	bl	80004fc <FM_Disable>
	HAL_Delay(5);
 800026c:	2005      	movs	r0, #5
 800026e:	f007 fe71 	bl	8007f54 <HAL_Delay>
	return;
 8000272:	bf00      	nop
}
 8000274:	3718      	adds	r7, #24
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <Page_Write_4B>:
 * 			size		size of the data
 *@retval	none
 */

void Page_Write_4B(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 800027a:	b580      	push	{r7, lr}
 800027c:	b086      	sub	sp, #24
 800027e:	af00      	add	r7, sp, #0
 8000280:	60f8      	str	r0, [r7, #12]
 8000282:	60b9      	str	r1, [r7, #8]
 8000284:	607a      	str	r2, [r7, #4]
 8000286:	807b      	strh	r3, [r7, #2]
	uint8_t cmd = BYTE_4_PAGE_PROGRAM;
 8000288:	2312      	movs	r3, #18
 800028a:	75fb      	strb	r3, [r7, #23]
	uint8_t command[4];
	while (size > PAGE_SIZE) {
 800028c:	e03e      	b.n	800030c <Page_Write_4B+0x92>
		command[0] = (uint8_t) (address >> 24 & 0xff);
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	0e1b      	lsrs	r3, r3, #24
 8000292:	b2db      	uxtb	r3, r3
 8000294:	743b      	strb	r3, [r7, #16]
		command[1] = (uint8_t) (address >> 16 & 0xff);
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	0c1b      	lsrs	r3, r3, #16
 800029a:	b2db      	uxtb	r3, r3
 800029c:	747b      	strb	r3, [r7, #17]
		command[2] = (uint8_t) (address >> 8 & 0xff);
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	0a1b      	lsrs	r3, r3, #8
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	74bb      	strb	r3, [r7, #18]
		command[3] = (uint8_t) (address & 0xFF);
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	74fb      	strb	r3, [r7, #19]
		Write_Enable(SPI);
 80002ac:	68f8      	ldr	r0, [r7, #12]
 80002ae:	f000 f8ec 	bl	800048a <Write_Enable>
		FM_Enable(SPI);
 80002b2:	68f8      	ldr	r0, [r7, #12]
 80002b4:	f000 f908 	bl	80004c8 <FM_Enable>
		HAL_Delay(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f007 fe4b 	bl	8007f54 <HAL_Delay>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 80002be:	f107 0117 	add.w	r1, r7, #23
 80002c2:	2364      	movs	r3, #100	; 0x64
 80002c4:	2201      	movs	r2, #1
 80002c6:	68f8      	ldr	r0, [r7, #12]
 80002c8:	f00b fa24 	bl	800b714 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, command, 4, 200);
 80002cc:	f107 0110 	add.w	r1, r7, #16
 80002d0:	23c8      	movs	r3, #200	; 0xc8
 80002d2:	2204      	movs	r2, #4
 80002d4:	68f8      	ldr	r0, [r7, #12]
 80002d6:	f00b fa1d 	bl	800b714 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, data, PAGE_SIZE, 200);
 80002da:	23c8      	movs	r3, #200	; 0xc8
 80002dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002e0:	6879      	ldr	r1, [r7, #4]
 80002e2:	68f8      	ldr	r0, [r7, #12]
 80002e4:	f00b fa16 	bl	800b714 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 80002e8:	68f8      	ldr	r0, [r7, #12]
 80002ea:	f000 f907 	bl	80004fc <FM_Disable>
		HAL_Delay(10);
 80002ee:	200a      	movs	r0, #10
 80002f0:	f007 fe30 	bl	8007f54 <HAL_Delay>
		size = size - PAGE_SIZE;
 80002f4:	887b      	ldrh	r3, [r7, #2]
 80002f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80002fa:	807b      	strh	r3, [r7, #2]
		data = data + 256;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000302:	607b      	str	r3, [r7, #4]
		address = address + 256;
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800030a:	60bb      	str	r3, [r7, #8]
	while (size > PAGE_SIZE) {
 800030c:	887b      	ldrh	r3, [r7, #2]
 800030e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000312:	d8bc      	bhi.n	800028e <Page_Write_4B+0x14>
	}
	command[0] = (uint8_t) (address >> 24 & 0xff);
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	0e1b      	lsrs	r3, r3, #24
 8000318:	b2db      	uxtb	r3, r3
 800031a:	743b      	strb	r3, [r7, #16]
	command[1] = (uint8_t) (address >> 16 & 0xff);
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	0c1b      	lsrs	r3, r3, #16
 8000320:	b2db      	uxtb	r3, r3
 8000322:	747b      	strb	r3, [r7, #17]
	command[2] = (uint8_t) (address >> 8 & 0xff);
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	0a1b      	lsrs	r3, r3, #8
 8000328:	b2db      	uxtb	r3, r3
 800032a:	74bb      	strb	r3, [r7, #18]
	command[3] = (uint8_t) (address & 0xFF);
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	74fb      	strb	r3, [r7, #19]
	Write_Enable(SPI);
 8000332:	68f8      	ldr	r0, [r7, #12]
 8000334:	f000 f8a9 	bl	800048a <Write_Enable>
	FM_Enable(SPI);
 8000338:	68f8      	ldr	r0, [r7, #12]
 800033a:	f000 f8c5 	bl	80004c8 <FM_Enable>
	HAL_Delay(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f007 fe08 	bl	8007f54 <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 50);
 8000344:	f107 0117 	add.w	r1, r7, #23
 8000348:	2332      	movs	r3, #50	; 0x32
 800034a:	2201      	movs	r2, #1
 800034c:	68f8      	ldr	r0, [r7, #12]
 800034e:	f00b f9e1 	bl	800b714 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI, command, 4, 100);
 8000352:	f107 0110 	add.w	r1, r7, #16
 8000356:	2364      	movs	r3, #100	; 0x64
 8000358:	2204      	movs	r2, #4
 800035a:	68f8      	ldr	r0, [r7, #12]
 800035c:	f00b f9da 	bl	800b714 <HAL_SPI_Transmit>
	HAL_Delay(1);
 8000360:	2001      	movs	r0, #1
 8000362:	f007 fdf7 	bl	8007f54 <HAL_Delay>
	HAL_SPI_Transmit(SPI, data, size, 200);
 8000366:	887a      	ldrh	r2, [r7, #2]
 8000368:	23c8      	movs	r3, #200	; 0xc8
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	68f8      	ldr	r0, [r7, #12]
 800036e:	f00b f9d1 	bl	800b714 <HAL_SPI_Transmit>
	FM_Disable(SPI);
 8000372:	68f8      	ldr	r0, [r7, #12]
 8000374:	f000 f8c2 	bl	80004fc <FM_Disable>
	HAL_Delay(10);
 8000378:	200a      	movs	r0, #10
 800037a:	f007 fdeb 	bl	8007f54 <HAL_Delay>
	return;
 800037e:	bf00      	nop
}
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <Sector_Erase_4B>:

/*
 * @brief	similar function as Sector_Erase but 4 byte address mode for the FM
 * 			Parameters are same as for Sector_Erase
 */
uint8_t Sector_Erase_4B(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t sector_size) {
 8000386:	b580      	push	{r7, lr}
 8000388:	b086      	sub	sp, #24
 800038a:	af00      	add	r7, sp, #0
 800038c:	60f8      	str	r0, [r7, #12]
 800038e:	60b9      	str	r1, [r7, #8]
 8000390:	4613      	mov	r3, r2
 8000392:	71fb      	strb	r3, [r7, #7]
	uint8_t addr[4];
	uint8_t cmd;
	addr[0] = (uint8_t) (address >> 24);
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	0e1b      	lsrs	r3, r3, #24
 8000398:	b2db      	uxtb	r3, r3
 800039a:	753b      	strb	r3, [r7, #20]
	addr[1] = (uint8_t) (address >> 16);
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	0c1b      	lsrs	r3, r3, #16
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	757b      	strb	r3, [r7, #21]
	addr[2] = (uint8_t) (address >> 8);
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	0a1b      	lsrs	r3, r3, #8
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	75bb      	strb	r3, [r7, #22]
	addr[3] = (uint8_t) (address);
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	75fb      	strb	r3, [r7, #23]
	switch (sector_size) {
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b40      	cmp	r3, #64	; 0x40
 80003b6:	d006      	beq.n	80003c6 <Sector_Erase_4B+0x40>
 80003b8:	2b40      	cmp	r3, #64	; 0x40
 80003ba:	dc61      	bgt.n	8000480 <Sector_Erase_4B+0xfa>
 80003bc:	2b04      	cmp	r3, #4
 80003be:	d040      	beq.n	8000442 <Sector_Erase_4B+0xbc>
 80003c0:	2b20      	cmp	r3, #32
 80003c2:	d01f      	beq.n	8000404 <Sector_Erase_4B+0x7e>
 80003c4:	e05c      	b.n	8000480 <Sector_Erase_4B+0xfa>
	case 64:
		cmd = SECTOR_ERASE_4_BYTE;
 80003c6:	23dc      	movs	r3, #220	; 0xdc
 80003c8:	74fb      	strb	r3, [r7, #19]
		Write_Enable(SPI);
 80003ca:	68f8      	ldr	r0, [r7, #12]
 80003cc:	f000 f85d 	bl	800048a <Write_Enable>
		FM_Enable(SPI);
 80003d0:	68f8      	ldr	r0, [r7, #12]
 80003d2:	f000 f879 	bl	80004c8 <FM_Enable>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 80003d6:	f107 0113 	add.w	r1, r7, #19
 80003da:	2364      	movs	r3, #100	; 0x64
 80003dc:	2201      	movs	r2, #1
 80003de:	68f8      	ldr	r0, [r7, #12]
 80003e0:	f00b f998 	bl	800b714 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, addr, 4, 100);
 80003e4:	f107 0114 	add.w	r1, r7, #20
 80003e8:	2364      	movs	r3, #100	; 0x64
 80003ea:	2204      	movs	r2, #4
 80003ec:	68f8      	ldr	r0, [r7, #12]
 80003ee:	f00b f991 	bl	800b714 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 80003f2:	68f8      	ldr	r0, [r7, #12]
 80003f4:	f000 f882 	bl	80004fc <FM_Disable>
		HAL_Delay(1000);
 80003f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003fc:	f007 fdaa 	bl	8007f54 <HAL_Delay>
		return 1;
 8000400:	2301      	movs	r3, #1
 8000402:	e03e      	b.n	8000482 <Sector_Erase_4B+0xfc>
	case 32:
		cmd = SUBSECTOR_ERASE_32KB_4_BYTE;
 8000404:	235c      	movs	r3, #92	; 0x5c
 8000406:	74fb      	strb	r3, [r7, #19]
		Write_Enable(SPI);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f000 f83e 	bl	800048a <Write_Enable>
		FM_Enable(SPI);
 800040e:	68f8      	ldr	r0, [r7, #12]
 8000410:	f000 f85a 	bl	80004c8 <FM_Enable>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 8000414:	f107 0113 	add.w	r1, r7, #19
 8000418:	2364      	movs	r3, #100	; 0x64
 800041a:	2201      	movs	r2, #1
 800041c:	68f8      	ldr	r0, [r7, #12]
 800041e:	f00b f979 	bl	800b714 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, addr, 4, 100);
 8000422:	f107 0114 	add.w	r1, r7, #20
 8000426:	2364      	movs	r3, #100	; 0x64
 8000428:	2204      	movs	r2, #4
 800042a:	68f8      	ldr	r0, [r7, #12]
 800042c:	f00b f972 	bl	800b714 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 8000430:	68f8      	ldr	r0, [r7, #12]
 8000432:	f000 f863 	bl	80004fc <FM_Disable>
		HAL_Delay(1000);
 8000436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800043a:	f007 fd8b 	bl	8007f54 <HAL_Delay>
		return 2;
 800043e:	2302      	movs	r3, #2
 8000440:	e01f      	b.n	8000482 <Sector_Erase_4B+0xfc>
	case 4:
		cmd = SUBSECTOR_ERASE_4KB_4_BYTE;
 8000442:	2321      	movs	r3, #33	; 0x21
 8000444:	74fb      	strb	r3, [r7, #19]
		Write_Enable(SPI);
 8000446:	68f8      	ldr	r0, [r7, #12]
 8000448:	f000 f81f 	bl	800048a <Write_Enable>
		FM_Enable(SPI);
 800044c:	68f8      	ldr	r0, [r7, #12]
 800044e:	f000 f83b 	bl	80004c8 <FM_Enable>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 8000452:	f107 0113 	add.w	r1, r7, #19
 8000456:	2364      	movs	r3, #100	; 0x64
 8000458:	2201      	movs	r2, #1
 800045a:	68f8      	ldr	r0, [r7, #12]
 800045c:	f00b f95a 	bl	800b714 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, addr, 4, 100);
 8000460:	f107 0114 	add.w	r1, r7, #20
 8000464:	2364      	movs	r3, #100	; 0x64
 8000466:	2204      	movs	r2, #4
 8000468:	68f8      	ldr	r0, [r7, #12]
 800046a:	f00b f953 	bl	800b714 <HAL_SPI_Transmit>
		FM_Disable(SPI);
 800046e:	68f8      	ldr	r0, [r7, #12]
 8000470:	f000 f844 	bl	80004fc <FM_Disable>
		HAL_Delay(1000);
 8000474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000478:	f007 fd6c 	bl	8007f54 <HAL_Delay>
		return 3;
 800047c:	2303      	movs	r3, #3
 800047e:	e000      	b.n	8000482 <Sector_Erase_4B+0xfc>
	default:
		return 0;
 8000480:	2300      	movs	r3, #0
	}
}
 8000482:	4618      	mov	r0, r3
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <Write_Enable>:
	FM_Enable(SPI);
	HAL_SPI_Transmit(SPI, &cmd, 1, 100);
	FM_Disable(SPI);
}

void Write_Enable(SPI_HandleTypeDef *SPI) {
 800048a:	b580      	push	{r7, lr}
 800048c:	b084      	sub	sp, #16
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
	uint8_t cmd = WRITE_ENABLE;
 8000492:	2306      	movs	r3, #6
 8000494:	73fb      	strb	r3, [r7, #15]
	FM_Enable(SPI);
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f000 f816 	bl	80004c8 <FM_Enable>
	HAL_Delay(1);
 800049c:	2001      	movs	r0, #1
 800049e:	f007 fd59 	bl	8007f54 <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 500);
 80004a2:	f107 010f 	add.w	r1, r7, #15
 80004a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004aa:	2201      	movs	r2, #1
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f00b f931 	bl	800b714 <HAL_SPI_Transmit>
	FM_Disable(SPI);
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f000 f822 	bl	80004fc <FM_Disable>
	HAL_Delay(10);
 80004b8:	200a      	movs	r0, #10
 80004ba:	f007 fd4b 	bl	8007f54 <HAL_Delay>
}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <FM_Enable>:
	FM_Enable(SPI);
	HAL_SPI_Transmit(SPI, &cmd, 1, 100);
	FM_Disable(SPI);
}

static void FM_Enable(SPI_HandleTypeDef *SPI) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	if (SPI == &MAIN_FM) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <FM_Enable+0x2c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d108      	bne.n	80004ea <FM_Enable+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <FM_Enable+0x30>)
 80004e0:	f008 fa02 	bl	80088e8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f007 fd35 	bl	8007f54 <HAL_Delay>
	}
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000474 	.word	0x20000474
 80004f8:	40010c00 	.word	0x40010c00

080004fc <FM_Disable>:

static void FM_Disable(SPI_HandleTypeDef *SPI) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	if (SPI == &MAIN_FM) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <FM_Disable+0x2c>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d108      	bne.n	800051e <FM_Disable+0x22>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000512:	4806      	ldr	r0, [pc, #24]	; (800052c <FM_Disable+0x30>)
 8000514:	f008 f9e8 	bl	80088e8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000518:	2001      	movs	r0, #1
 800051a:	f007 fd1b 	bl	8007f54 <HAL_Delay>
	}

}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000474 	.word	0x20000474
 800052c:	40010c00 	.word	0x40010c00

08000530 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800053a:	683a      	ldr	r2, [r7, #0]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4293      	cmp	r3, r2
 8000540:	bf38      	it	cc
 8000542:	4613      	movcc	r3, r2
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4293      	cmp	r3, r2
 800055e:	bf28      	it	cs
 8000560:	4613      	movcs	r3, r2
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	fbb3 f2f2 	udiv	r2, r3, r2
 800057e:	6839      	ldr	r1, [r7, #0]
 8000580:	fb01 f202 	mul.w	r2, r1, r2
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	1ad3      	subs	r3, r2, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	3b01      	subs	r3, #1
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ffdf 	bl	800056c <lfs_aligndown>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	fab3 f383 	clz	r3, r3
 80005c8:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	fa93 f3a3 	rbit	r3, r3
 80005e4:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr

080005f2 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff fdae 	bl	800015c <__popcountsi2>
 8000600:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	1ad3      	subs	r3, r2, r3
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800062c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ffef 	bl	8000624 <lfs_fromle32>
 8000646:	4603      	mov	r3, r0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ffee 	bl	8000650 <lfs_frombe32>
 8000674:	4603      	mov	r3, r0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f010 fcb2 	bl	8010ff0 <malloc>
 800068c:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f010 fcae 	bl	8011000 <free>
#else
    (void)p;
#endif
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	f04f 32ff 	mov.w	r2, #4294967295
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	68d8      	ldr	r0, [r3, #12]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80006da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006dc:	461a      	mov	r2, r3
 80006de:	21ff      	movs	r1, #255	; 0xff
 80006e0:	f010 fcb2 	bl	8011048 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ea:	601a      	str	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80006f4:	b5b0      	push	{r4, r5, r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000704:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8000706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800070a:	441a      	add	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	429a      	cmp	r2, r3
 8000714:	d80a      	bhi.n	800072c <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800071a:	2b00      	cmp	r3, #0
 800071c:	f000 8124 	beq.w	8000968 <lfs_bd_read+0x274>
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000726:	429a      	cmp	r2, r3
 8000728:	f0c0 811e 	bcc.w	8000968 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 800072c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000730:	e11f      	b.n	8000972 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000734:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d03f      	beq.n	80007bc <lfs_bd_read+0xc8>
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000742:	429a      	cmp	r2, r3
 8000744:	d13a      	bne.n	80007bc <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000752:	429a      	cmp	r2, r3
 8000754:	d232      	bcs.n	80007bc <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800075c:	429a      	cmp	r2, r3
 800075e:	d324      	bcc.n	80007aa <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	689a      	ldr	r2, [r3, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	6859      	ldr	r1, [r3, #4]
 8000768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076a:	1acb      	subs	r3, r1, r3
 800076c:	4413      	add	r3, r2
 800076e:	4619      	mov	r1, r3
 8000770:	69b8      	ldr	r0, [r7, #24]
 8000772:	f7ff feec 	bl	800054e <lfs_min>
 8000776:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	68da      	ldr	r2, [r3, #12]
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000782:	1acb      	subs	r3, r1, r3
 8000784:	4413      	add	r3, r2
 8000786:	69ba      	ldr	r2, [r7, #24]
 8000788:	4619      	mov	r1, r3
 800078a:	69f8      	ldr	r0, [r7, #28]
 800078c:	f010 fc4e 	bl	801102c <memcpy>

                data += diff;
 8000790:	69fa      	ldr	r2, [r7, #28]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	4413      	add	r3, r2
 8000796:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	4413      	add	r3, r2
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80007a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80007a8:	e0de      	b.n	8000968 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	69b8      	ldr	r0, [r7, #24]
 80007b6:	f7ff feca 	bl	800054e <lfs_min>
 80007ba:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d13a      	bne.n	800083c <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	4413      	add	r3, r2
        if (block == rcache->block &&
 80007d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d232      	bcs.n	800083c <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007dc:	429a      	cmp	r2, r3
 80007de:	d324      	bcc.n	800082a <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	689a      	ldr	r2, [r3, #8]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6859      	ldr	r1, [r3, #4]
 80007e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ea:	1acb      	subs	r3, r1, r3
 80007ec:	4413      	add	r3, r2
 80007ee:	4619      	mov	r1, r3
 80007f0:	69b8      	ldr	r0, [r7, #24]
 80007f2:	f7ff feac 	bl	800054e <lfs_min>
 80007f6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000802:	1acb      	subs	r3, r1, r3
 8000804:	4413      	add	r3, r2
 8000806:	69ba      	ldr	r2, [r7, #24]
 8000808:	4619      	mov	r1, r3
 800080a:	69f8      	ldr	r0, [r7, #28]
 800080c:	f010 fc0e 	bl	801102c <memcpy>

                data += diff;
 8000810:	69fa      	ldr	r2, [r7, #28]
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	4413      	add	r3, r2
 8000816:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	4413      	add	r3, r2
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000828:	e09e      	b.n	8000968 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	4619      	mov	r1, r3
 8000834:	69b8      	ldr	r0, [r7, #24]
 8000836:	f7ff fe8a 	bl	800054e <lfs_min>
 800083a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800083c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	429a      	cmp	r2, r3
 8000842:	d336      	bcc.n	80008b2 <lfs_bd_read+0x1be>
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000848:	695a      	ldr	r2, [r3, #20]
 800084a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800084c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000850:	fb02 f201 	mul.w	r2, r2, r1
 8000854:	1a9b      	subs	r3, r3, r2
 8000856:	2b00      	cmp	r3, #0
 8000858:	d12b      	bne.n	80008b2 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800085e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000862:	429a      	cmp	r2, r3
 8000864:	d325      	bcc.n	80008b2 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	4619      	mov	r1, r3
 800086e:	69b8      	ldr	r0, [r7, #24]
 8000870:	f7ff fe7c 	bl	800056c <lfs_aligndown>
 8000874:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800087a:	685c      	ldr	r4, [r3, #4]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800088a:	47a0      	blx	r4
 800088c:	6178      	str	r0, [r7, #20]
            if (err) {
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <lfs_bd_read+0x1a4>
                return err;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	e06c      	b.n	8000972 <lfs_bd_read+0x27e>
            }

            data += diff;
 8000898:	69fa      	ldr	r2, [r7, #28]
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	4413      	add	r3, r2
 800089e:	61fb      	str	r3, [r7, #28]
            off += diff;
 80008a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	4413      	add	r3, r2
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 80008a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 80008b0:	e05a      	b.n	8000968 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00a      	beq.n	80008d0 <lfs_bd_read+0x1dc>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80008be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d305      	bcc.n	80008d0 <lfs_bd_read+0x1dc>
 80008c4:	4b2d      	ldr	r3, [pc, #180]	; (800097c <lfs_bd_read+0x288>)
 80008c6:	4a2e      	ldr	r2, [pc, #184]	; (8000980 <lfs_bd_read+0x28c>)
 80008c8:	2174      	movs	r1, #116	; 0x74
 80008ca:	482e      	ldr	r0, [pc, #184]	; (8000984 <lfs_bd_read+0x290>)
 80008cc:	f010 fb36 	bl	8010f3c <__assert_func>
        rcache->block = block;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008d4:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	4619      	mov	r1, r3
 80008de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80008e0:	f7ff fe44 	bl	800056c <lfs_aligndown>
 80008e4:	4602      	mov	r2, r0
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 80008ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4610      	mov	r0, r2
 80008fa:	f7ff fe4b 	bl	8000594 <lfs_alignup>
 80008fe:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4619      	mov	r1, r3
 8000908:	4610      	mov	r0, r2
 800090a:	f7ff fe20 	bl	800054e <lfs_min>
 800090e:	4602      	mov	r2, r0
                - rcache->off,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000914:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	4619      	mov	r1, r3
 800091e:	4610      	mov	r0, r2
 8000920:	f7ff fe15 	bl	800054e <lfs_min>
 8000924:	4602      	mov	r2, r0
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800092e:	685c      	ldr	r4, [r3, #4]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6819      	ldr	r1, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	462b      	mov	r3, r5
 8000948:	47a0      	blx	r4
 800094a:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	2b00      	cmp	r3, #0
 8000950:	dd05      	ble.n	800095e <lfs_bd_read+0x26a>
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <lfs_bd_read+0x294>)
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <lfs_bd_read+0x28c>)
 8000956:	217f      	movs	r1, #127	; 0x7f
 8000958:	480a      	ldr	r0, [pc, #40]	; (8000984 <lfs_bd_read+0x290>)
 800095a:	f010 faef 	bl	8010f3c <__assert_func>
        if (err) {
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <lfs_bd_read+0x274>
            return err;
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	e004      	b.n	8000972 <lfs_bd_read+0x27e>
    while (size > 0) {
 8000968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800096a:	2b00      	cmp	r3, #0
 800096c:	f47f aee1 	bne.w	8000732 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3720      	adds	r7, #32
 8000976:	46bd      	mov	sp, r7
 8000978:	bdb0      	pop	{r4, r5, r7, pc}
 800097a:	bf00      	nop
 800097c:	08012024 	.word	0x08012024
 8000980:	08012cfc 	.word	0x08012cfc
 8000984:	08012054 	.word	0x08012054
 8000988:	08012068 	.word	0x08012068

0800098c <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b090      	sub	sp, #64	; 0x40
 8000990:	af04      	add	r7, sp, #16
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800099a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009a6:	e039      	b.n	8000a1c <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80009a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	2108      	movs	r1, #8
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fdcc 	bl	800054e <lfs_min>
 80009b6:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009bc:	1ad1      	subs	r1, r2, r3
 80009be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80009c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c2:	4413      	add	r3, r2
 80009c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c6:	9203      	str	r2, [sp, #12]
 80009c8:	f107 0214 	add.w	r2, r7, #20
 80009cc:	9202      	str	r2, [sp, #8]
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	460b      	mov	r3, r1
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fe8a 	bl	80006f4 <lfs_bd_read>
 80009e0:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 80009e2:	6a3b      	ldr	r3, [r7, #32]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <lfs_bd_cmp+0x60>
            return err;
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	e01c      	b.n	8000a26 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 80009ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f0:	18d1      	adds	r1, r2, r3
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f8:	4618      	mov	r0, r3
 80009fa:	f010 fb09 	bl	8011010 <memcmp>
 80009fe:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	da01      	bge.n	8000a10 <lfs_bd_cmp+0x84>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e00a      	b.n	8000a26 <lfs_bd_cmp+0x9a>
 8000a10:	2302      	movs	r3, #2
 8000a12:	e008      	b.n	8000a26 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	4413      	add	r3, r2
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d3c1      	bcc.n	80009a8 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b08e      	sub	sp, #56	; 0x38
 8000a32:	af04      	add	r7, sp, #16
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
 8000a44:	e030      	b.n	8000aa8 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8000a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fd7d 	bl	800054e <lfs_min>
 8000a54:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8000a56:	683a      	ldr	r2, [r7, #0]
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	1ad1      	subs	r1, r2, r3
 8000a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	4413      	add	r3, r2
 8000a62:	6a3a      	ldr	r2, [r7, #32]
 8000a64:	9203      	str	r2, [sp, #12]
 8000a66:	f107 0214 	add.w	r2, r7, #20
 8000a6a:	9202      	str	r2, [sp, #8]
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	460b      	mov	r3, r1
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f7ff fe3b 	bl	80006f4 <lfs_bd_read>
 8000a7e:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <lfs_bd_crc+0x5c>
            return err;
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	e013      	b.n	8000ab2 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8000a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f107 0114 	add.w	r1, r7, #20
 8000a92:	6a3a      	ldr	r2, [r7, #32]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f006 fc97 	bl	80073c8 <lfs_crc>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a9e:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa2:	6a3b      	ldr	r3, [r7, #32]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3ca      	bcc.n	8000a46 <lfs_bd_crc+0x18>
    }

    return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad2:	d060      	beq.n	8000b96 <lfs_bd_flush+0xda>
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f113 0f02 	cmn.w	r3, #2
 8000adc:	d05b      	beq.n	8000b96 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d305      	bcc.n	8000af6 <lfs_bd_flush+0x3a>
 8000aea:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <lfs_bd_flush+0xe4>)
 8000aec:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <lfs_bd_flush+0xe8>)
 8000aee:	21bc      	movs	r1, #188	; 0xbc
 8000af0:	482d      	ldr	r0, [pc, #180]	; (8000ba8 <lfs_bd_flush+0xec>)
 8000af2:	f010 fa23 	bl	8010f3c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4610      	mov	r0, r2
 8000b04:	f7ff fd46 	bl	8000594 <lfs_alignup>
 8000b08:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b0e:	689c      	ldr	r4, [r3, #8]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	6819      	ldr	r1, [r3, #0]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	462b      	mov	r3, r5
 8000b26:	47a0      	blx	r4
 8000b28:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	dd05      	ble.n	8000b3c <lfs_bd_flush+0x80>
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <lfs_bd_flush+0xf0>)
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <lfs_bd_flush+0xe8>)
 8000b34:	21c0      	movs	r1, #192	; 0xc0
 8000b36:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <lfs_bd_flush+0xec>)
 8000b38:	f010 fa00 	bl	8010f3c <__assert_func>
        if (err) {
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <lfs_bd_flush+0x8a>
            return err;
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	e028      	b.n	8000b98 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d020      	beq.n	8000b8e <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f7ff fdac 	bl	80006ac <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8000b60:	69f8      	ldr	r0, [r7, #28]
 8000b62:	9003      	str	r0, [sp, #12]
 8000b64:	9102      	str	r1, [sp, #8]
 8000b66:	9201      	str	r2, [sp, #4]
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	2100      	movs	r1, #0
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f7ff ff0b 	bl	800098c <lfs_bd_cmp>
 8000b76:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	da01      	bge.n	8000b82 <lfs_bd_flush+0xc6>
                return res;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d002      	beq.n	8000b8e <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8000b88:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000b8c:	e004      	b.n	8000b98 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000b8e:	68b9      	ldr	r1, [r7, #8]
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff fd99 	bl	80006c8 <lfs_cache_zero>
    }

    return 0;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba0:	08012074 	.word	0x08012074
 8000ba4:	08012d08 	.word	0x08012d08
 8000ba8:	08012054 	.word	0x08012054
 8000bac:	08012068 	.word	0x08012068

08000bb0 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff fd73 	bl	80006ac <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	68b9      	ldr	r1, [r7, #8]
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f7ff ff75 	bl	8000abc <lfs_bd_flush>
 8000bd2:	6178      	str	r0, [r7, #20]
    if (err) {
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <lfs_bd_sync+0x2e>
        return err;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	e011      	b.n	8000c02 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000be8:	4610      	mov	r0, r2
 8000bea:	4798      	blx	r3
 8000bec:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	dd05      	ble.n	8000c00 <lfs_bd_sync+0x50>
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <lfs_bd_sync+0x5c>)
 8000bf6:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <lfs_bd_sync+0x60>)
 8000bf8:	21e6      	movs	r1, #230	; 0xe6
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <lfs_bd_sync+0x64>)
 8000bfc:	f010 f99e 	bl	8010f3c <__assert_func>
    return err;
 8000c00:	697b      	ldr	r3, [r7, #20]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	08012068 	.word	0x08012068
 8000c10:	08012d18 	.word	0x08012d18
 8000c14:	08012054 	.word	0x08012054

08000c18 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8000c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c28:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8000c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2c:	f113 0f02 	cmn.w	r3, #2
 8000c30:	d00a      	beq.n	8000c48 <lfs_bd_prog+0x30>
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d305      	bcc.n	8000c48 <lfs_bd_prog+0x30>
 8000c3c:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <lfs_bd_prog+0x144>)
 8000c3e:	4a48      	ldr	r2, [pc, #288]	; (8000d60 <lfs_bd_prog+0x148>)
 8000c40:	21f1      	movs	r1, #241	; 0xf1
 8000c42:	4848      	ldr	r0, [pc, #288]	; (8000d64 <lfs_bd_prog+0x14c>)
 8000c44:	f010 f97a 	bl	8010f3c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8000c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c4c:	441a      	add	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d978      	bls.n	8000d4a <lfs_bd_prog+0x132>
 8000c58:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <lfs_bd_prog+0x150>)
 8000c5a:	4a41      	ldr	r2, [pc, #260]	; (8000d60 <lfs_bd_prog+0x148>)
 8000c5c:	21f2      	movs	r1, #242	; 0xf2
 8000c5e:	4841      	ldr	r0, [pc, #260]	; (8000d64 <lfs_bd_prog+0x14c>)
 8000c60:	f010 f96c 	bl	8010f3c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d151      	bne.n	8000d12 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8000c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d34c      	bcc.n	8000d12 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	4413      	add	r3, r2
                off >= pcache->off &&
 8000c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d243      	bcs.n	8000d12 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	6859      	ldr	r1, [r3, #4]
 8000c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c96:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8000c98:	4413      	add	r3, r2
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c9e:	f7ff fc56 	bl	800054e <lfs_min>
 8000ca2:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cae:	1acb      	subs	r3, r1, r3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	69f9      	ldr	r1, [r7, #28]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f010 f9b8 	bl	801102c <memcpy>

            data += diff;
 8000cbc:	69fa      	ldr	r2, [r7, #28]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	4413      	add	r3, r2
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8000ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	6898      	ldr	r0, [r3, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f7ff fc25 	bl	8000530 <lfs_max>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d127      	bne.n	8000d4a <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000cfa:	78fb      	ldrb	r3, [r7, #3]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f7ff fedb 	bl	8000abc <lfs_bd_flush>
 8000d06:	6178      	str	r0, [r7, #20]
                if (err) {
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d01d      	beq.n	8000d4a <lfs_bd_prog+0x132>
                    return err;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	e01f      	b.n	8000d52 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1a:	d006      	beq.n	8000d2a <lfs_bd_prog+0x112>
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <lfs_bd_prog+0x154>)
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <lfs_bd_prog+0x148>)
 8000d20:	f240 110f 	movw	r1, #271	; 0x10f
 8000d24:	480f      	ldr	r0, [pc, #60]	; (8000d64 <lfs_bd_prog+0x14c>)
 8000d26:	f010 f909 	bl	8010f3c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d2e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4619      	mov	r1, r3
 8000d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d3a:	f7ff fc17 	bl	800056c <lfs_aligndown>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8000d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d189      	bne.n	8000c64 <lfs_bd_prog+0x4c>
    }

    return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	08012098 	.word	0x08012098
 8000d60:	08012d24 	.word	0x08012d24
 8000d64:	08012054 	.word	0x08012054
 8000d68:	080120d0 	.word	0x080120d0
 8000d6c:	080120f4 	.word	0x080120f4

08000d70 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d306      	bcc.n	8000d92 <lfs_bd_erase+0x22>
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <lfs_bd_erase+0x54>)
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <lfs_bd_erase+0x58>)
 8000d88:	f240 111d 	movw	r1, #285	; 0x11d
 8000d8c:	480f      	ldr	r0, [pc, #60]	; (8000dcc <lfs_bd_erase+0x5c>)
 8000d8e:	f010 f8d5 	bl	8010f3c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000d9c:	6839      	ldr	r1, [r7, #0]
 8000d9e:	4610      	mov	r0, r2
 8000da0:	4798      	blx	r3
 8000da2:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	dd06      	ble.n	8000db8 <lfs_bd_erase+0x48>
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <lfs_bd_erase+0x60>)
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <lfs_bd_erase+0x58>)
 8000dae:	f240 111f 	movw	r1, #287	; 0x11f
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <lfs_bd_erase+0x5c>)
 8000db4:	f010 f8c2 	bl	8010f3c <__assert_func>
    return err;
 8000db8:	68fb      	ldr	r3, [r7, #12]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08012118 	.word	0x08012118
 8000dc8:	08012d30 	.word	0x08012d30
 8000dcc:	08012054 	.word	0x08012054
 8000dd0:	08012068 	.word	0x08012068

08000dd4 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3304      	adds	r3, #4
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	601a      	str	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <lfs_pair_isnull+0x1e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3304      	adds	r3, #4
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d101      	bne.n	8000e1e <lfs_pair_isnull+0x22>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <lfs_pair_isnull+0x24>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	b2db      	uxtb	r3, r3
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d017      	beq.n	8000e76 <lfs_pair_cmp+0x46>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	3304      	adds	r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d00f      	beq.n	8000e76 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d008      	beq.n	8000e76 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3304      	adds	r3, #4
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d001      	beq.n	8000e76 <lfs_pair_cmp+0x46>
 8000e72:	2301      	movs	r3, #1
 8000e74:	e000      	b.n	8000e78 <lfs_pair_cmp+0x48>
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d107      	bne.n	8000ea8 <lfs_pair_issync+0x26>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d00d      	beq.n	8000ec4 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	3304      	adds	r3, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d108      	bne.n	8000ec8 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d101      	bne.n	8000ec8 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <lfs_pair_issync+0x48>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr

08000eda <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8000eda:	b590      	push	{r4, r7, lr}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fb9c 	bl	8000624 <lfs_fromle32>
 8000eec:	4602      	mov	r2, r0
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	1d1c      	adds	r4, r3, #4
 8000efc:	4610      	mov	r0, r2
 8000efe:	f7ff fb91 	bl	8000624 <lfs_fromle32>
 8000f02:	4603      	mov	r3, r0
 8000f04:	6023      	str	r3, [r4, #0]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}

08000f0e <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8000f0e:	b590      	push	{r4, r7, lr}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fb8c 	bl	8000638 <lfs_tole32>
 8000f20:	4602      	mov	r2, r0
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	1d1c      	adds	r4, r3, #4
 8000f30:	4610      	mov	r0, r2
 8000f32:	f7ff fb81 	bl	8000638 <lfs_tole32>
 8000f36:	4603      	mov	r3, r0
 8000f38:	6023      	str	r3, [r4, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd90      	pop	{r4, r7, pc}

08000f42 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	0fdb      	lsrs	r3, r3, #31
 8000f50:	b2db      	uxtb	r3, r3
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	059b      	lsls	r3, r3, #22
 8000f68:	159b      	asrs	r3, r3, #22
 8000f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6e:	bf0c      	ite	eq
 8000f70:	2301      	moveq	r3, #1
 8000f72:	2300      	movne	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	0d1b      	lsrs	r3, r3, #20
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f92:	b29b      	uxth	r3, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0d1b      	lsrs	r3, r3, #20
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8000fb0:	b29b      	uxth	r3, r3
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	0d1b      	lsrs	r3, r3, #20
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fce:	b29b      	uxth	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0d1b      	lsrs	r3, r3, #20
 8000fe6:	b2db      	uxtb	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffed 	bl	8000fda <lfs_tag_chunk>
 8001000:	4603      	mov	r3, r0
 8001002:	b25b      	sxtb	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	0a9b      	lsrs	r3, r3, #10
 8001018:	b29b      	uxth	r3, r3
 800101a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800101e:	b29b      	uxth	r3, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff86 	bl	8000f5c <lfs_tag_isdelete>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffe6 	bl	800102a <lfs_tag_size>
 800105e:	4603      	mov	r3, r0
 8001060:	3304      	adds	r3, #4
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e012      	b.n	80010a0 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	6819      	ldr	r1, [r3, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	4403      	add	r3, r0
 8001096:	404a      	eors	r2, r1
 8001098:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	dde9      	ble.n	800107a <lfs_gstate_xor+0x10>
    }
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	e00b      	b.n	80010d8 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <lfs_gstate_iszero+0x20>
            return false;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e006      	b.n	80010e0 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	ddf0      	ble.n	80010c0 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff97 	bl	800102a <lfs_tag_size>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf14      	ite	ne
 8001102:	2301      	movne	r3, #1
 8001104:	2300      	moveq	r3, #0
 8001106:	b2db      	uxtb	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff84 	bl	800102a <lfs_tag_size>
 8001122:	4603      	mov	r3, r0
 8001124:	b2db      	uxtb	r3, r3
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff20 	bl	8000f80 <lfs_tag_type1>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2db      	uxtb	r3, r3
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff62 	bl	800102a <lfs_tag_size>
 8001166:	4603      	mov	r3, r0
 8001168:	0a5b      	lsrs	r3, r3, #9
 800116a:	2b00      	cmp	r3, #0
 800116c:	bf14      	ite	ne
 800116e:	2301      	movne	r3, #1
 8001170:	2300      	moveq	r3, #0
 8001172:	b2db      	uxtb	r3, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fef8 	bl	8000f80 <lfs_tag_type1>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <lfs_gstate_hasmovehere+0x30>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3304      	adds	r3, #4
 800119a:	6839      	ldr	r1, [r7, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe47 	bl	8000e30 <lfs_pair_cmp>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <lfs_gstate_hasmovehere+0x30>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <lfs_gstate_hasmovehere+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fa2b 	bl	8000624 <lfs_fromle32>
 80011ce:	4602      	mov	r2, r0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fa23 	bl	8000624 <lfs_fromle32>
 80011de:	4602      	mov	r2, r0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fa1b 	bl	8000624 <lfs_fromle32>
 80011ee:	4602      	mov	r2, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	609a      	str	r2, [r3, #8]
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fa15 	bl	8000638 <lfs_tole32>
 800120e:	4602      	mov	r2, r0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fa0d 	bl	8000638 <lfs_tole32>
 800121e:	4602      	mov	r2, r0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fa05 	bl	8000638 <lfs_tole32>
 800122e:	4602      	mov	r2, r0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f9eb 	bl	8000624 <lfs_fromle32>
 800124e:	4602      	mov	r2, r0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f9e3 	bl	8000624 <lfs_fromle32>
 800125e:	4602      	mov	r2, r0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	605a      	str	r2, [r3, #4]
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f9dd 	bl	8000638 <lfs_tole32>
 800127e:	4602      	mov	r2, r0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f9d5 	bl	8000638 <lfs_tole32>
 800128e:	4602      	mov	r2, r0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	605a      	str	r2, [r3, #4]
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f9bb 	bl	8000624 <lfs_fromle32>
 80012ae:	4602      	mov	r2, r0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f9b3 	bl	8000624 <lfs_fromle32>
 80012be:	4602      	mov	r2, r0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	605a      	str	r2, [r3, #4]
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f9ad 	bl	8000638 <lfs_tole32>
 80012de:	4602      	mov	r2, r0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f9a5 	bl	8000638 <lfs_tole32>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	605a      	str	r2, [r3, #4]
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f98b 	bl	8000624 <lfs_fromle32>
 800130e:	4602      	mov	r2, r0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f983 	bl	8000624 <lfs_fromle32>
 800131e:	4602      	mov	r2, r0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f97b 	bl	8000624 <lfs_fromle32>
 800132e:	4602      	mov	r2, r0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f973 	bl	8000624 <lfs_fromle32>
 800133e:	4602      	mov	r2, r0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f96b 	bl	8000624 <lfs_fromle32>
 800134e:	4602      	mov	r2, r0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f963 	bl	8000624 <lfs_fromle32>
 800135e:	4602      	mov	r2, r0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	615a      	str	r2, [r3, #20]
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f95d 	bl	8000638 <lfs_tole32>
 800137e:	4602      	mov	r2, r0
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f955 	bl	8000638 <lfs_tole32>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f94d 	bl	8000638 <lfs_tole32>
 800139e:	4602      	mov	r2, r0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f945 	bl	8000638 <lfs_tole32>
 80013ae:	4602      	mov	r2, r0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f93d 	bl	8000638 <lfs_tole32>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f935 	bl	8000638 <lfs_tole32>
 80013ce:	4602      	mov	r2, r0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	615a      	str	r2, [r3, #20]
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	e009      	b.n	8001400 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d101      	bne.n	80013fa <lfs_mlist_isopen+0x1e>
            return true;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e007      	b.n	800140a <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f1      	bne.n	80013ec <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3328      	adds	r3, #40	; 0x28
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e00d      	b.n	8001442 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d105      	bne.n	800143c <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	601a      	str	r2, [r3, #0]
            break;
 800143a:	e007      	b.n	800144c <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1ed      	bne.n	8001426 <lfs_mlist_remove+0x12>
        }
    }
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001480:	4b02      	ldr	r3, [pc, #8]	; (800148c <lfs_fs_disk_version+0x14>)
    }
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	00020001 	.word	0x00020001

08001490 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ffed 	bl	8001478 <lfs_fs_disk_version>
 800149e:	4603      	mov	r3, r0
 80014a0:	0c1b      	lsrs	r3, r3, #16
 80014a2:	b29b      	uxth	r3, r3

}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffdf 	bl	8001478 <lfs_fs_disk_version>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29b      	uxth	r3, r3
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->lookahead.next = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ckpoint(lfs);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ffe6 	bl	80014c6 <lfs_alloc_ckpoint>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800151c:	4413      	add	r3, r2
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8001522:	fbb3 f1f2 	udiv	r1, r3, r2
 8001526:	fb02 f201 	mul.w	r2, r2, r1
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	429a      	cmp	r2, r3
 8001536:	d212      	bcs.n	800155e <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	08db      	lsrs	r3, r3, #3
 8001540:	441a      	add	r2, r3
 8001542:	7811      	ldrb	r1, [r2, #0]
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	f002 0207 	and.w	r2, r2, #7
 800154a:	2001      	movs	r0, #1
 800154c:	fa00 f202 	lsl.w	r2, r0, r2
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001556:	4403      	add	r3, r0
 8001558:	430a      	orrs	r2, r1
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
	...

0800156c <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157c:	4413      	add	r3, r2
            % lfs->block_count;
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001582:	fbb3 f1f2 	udiv	r1, r3, r2
 8001586:	fb02 f201 	mul.w	r2, r2, r1
 800158a:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->lookahead.next = 0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    lfs->lookahead.size = lfs_min(
 800159c:	00da      	lsls	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a2:	4619      	mov	r1, r3
 80015a4:	4610      	mov	r0, r2
 80015a6:	f7fe ffd2 	bl	800054e <lfs_min>
 80015aa:	4602      	mov	r2, r0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	659a      	str	r2, [r3, #88]	; 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	461a      	mov	r2, r3
 80015bc:	2100      	movs	r1, #0
 80015be:	f00f fd43 	bl	8011048 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 80015c2:	2301      	movs	r3, #1
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4909      	ldr	r1, [pc, #36]	; (80015ec <lfs_alloc_scan+0x80>)
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f004 ffd9 	bl	8006580 <lfs_fs_traverse_>
 80015ce:	60f8      	str	r0, [r7, #12]
    if (err) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d004      	beq.n	80015e0 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff82 	bl	80014e0 <lfs_alloc_drop>
        return err;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	e000      	b.n	80015e2 <lfs_alloc_scan+0x76>
    }

    return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	08001503 	.word	0x08001503

080015f0 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80015fa:	e04d      	b.n	8001698 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001610:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d131      	bne.n	8001684 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	4413      	add	r3, r2
                        % lfs->block_count;
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800162e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001632:	fb02 f201 	mul.w	r2, r2, r1
 8001636:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->lookahead.ckpoint -= 1;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	1e5a      	subs	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	661a      	str	r2, [r3, #96]	; 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	429a      	cmp	r2, r3
 800165a:	d211      	bcs.n	8001680 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	4413      	add	r3, r2
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1dd      	bne.n	800163c <lfs_alloc+0x4c>
                        return 0;
 8001680:	2300      	movs	r3, #0
 8001682:	e032      	b.n	80016ea <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->lookahead.ckpoint -= 1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	1e5a      	subs	r2, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	661a      	str	r2, [r3, #96]	; 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d3ab      	bcc.n	80015fc <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d116      	bne.n	80016da <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b4:	4413      	add	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80016ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80016be:	fb02 f201 	mul.w	r2, r2, r1
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <lfs_alloc+0x104>)
 80016c6:	9200      	str	r2, [sp, #0]
 80016c8:	f240 22ba 	movw	r2, #698	; 0x2ba
 80016cc:	490a      	ldr	r1, [pc, #40]	; (80016f8 <lfs_alloc+0x108>)
 80016ce:	480b      	ldr	r0, [pc, #44]	; (80016fc <lfs_alloc+0x10c>)
 80016d0:	f010 f856 	bl	8011780 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 80016d4:	f06f 031b 	mvn.w	r3, #27
 80016d8:	e007      	b.n	80016ea <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff46 	bl	800156c <lfs_alloc_scan>
 80016e0:	60f8      	str	r0, [r7, #12]
        if(err) {
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d088      	beq.n	80015fa <lfs_alloc+0xa>
            return err;
 80016e8:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	08012160 	.word	0x08012160
 80016f8:	08012054 	.word	0x08012054
 80016fc:	08012134 	.word	0x08012134

08001700 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b08f      	sub	sp, #60	; 0x3c
 8001704:	af04      	add	r7, sp, #16
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	333c      	adds	r3, #60	; 0x3c
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fd28 	bl	800117c <lfs_gstate_hasmovehere>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80c9 	beq.w	80018c6 <lfs_dir_getslice+0x1c6>
            lfs_tag_id(gmask) != 0) {
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fc69 	bl	800100c <lfs_tag_id>
 800173a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80c2 	beq.w	80018c6 <lfs_dir_getslice+0x1c6>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fc60 	bl	800100c <lfs_tag_id>
 800174c:	4603      	mov	r3, r0
 800174e:	461c      	mov	r4, r3
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f7ff fc5b 	bl	800100c <lfs_tag_id>
 8001756:	4603      	mov	r3, r0
 8001758:	429c      	cmp	r4, r3
 800175a:	d102      	bne.n	8001762 <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 800175c:	f06f 0301 	mvn.w	r3, #1
 8001760:	e0bd      	b.n	80018de <lfs_dir_getslice+0x1de>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fc50 	bl	800100c <lfs_tag_id>
 800176c:	4603      	mov	r3, r0
 800176e:	461c      	mov	r4, r3
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f7ff fc4b 	bl	800100c <lfs_tag_id>
 8001776:	4603      	mov	r3, r0
 8001778:	429c      	cmp	r4, r3
 800177a:	f080 80a4 	bcs.w	80018c6 <lfs_dir_getslice+0x1c6>
            gdiff -= LFS_MKTAG(0, 1, 0);
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001784:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001786:	e09e      	b.n	80018c6 <lfs_dir_getslice+0x1c6>
        off -= lfs_tag_dsize(ntag);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fc59 	bl	8001042 <lfs_tag_dsize>
 8001790:	4602      	mov	r2, r0
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2204      	movs	r2, #4
 80017a4:	9203      	str	r2, [sp, #12]
 80017a6:	f107 0210 	add.w	r2, r7, #16
 80017aa:	9202      	str	r2, [sp, #8]
 80017ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ae:	9201      	str	r2, [sp, #4]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2304      	movs	r3, #4
 80017b4:	460a      	mov	r2, r1
 80017b6:	2100      	movs	r1, #0
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7fe ff9b 	bl	80006f4 <lfs_bd_read>
 80017be:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <lfs_dir_getslice+0xca>
            return err;
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	e089      	b.n	80018de <lfs_dir_getslice+0x1de>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe ff3f 	bl	8000650 <lfs_frombe32>
 80017d2:	4602      	mov	r2, r0
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4053      	eors	r3, r2
 80017d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017dc:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fc14 	bl	800100c <lfs_tag_id>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d02b      	beq.n	8001842 <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80017ea:	69f8      	ldr	r0, [r7, #28]
 80017ec:	f7ff fbc8 	bl	8000f80 <lfs_tag_type1>
 80017f0:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 80017f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f6:	d124      	bne.n	8001842 <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80017f8:	69f8      	ldr	r0, [r7, #28]
 80017fa:	f7ff fc07 	bl	800100c <lfs_tag_id>
 80017fe:	4603      	mov	r3, r0
 8001800:	461c      	mov	r4, r3
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fbff 	bl	800100c <lfs_tag_id>
 800180e:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001810:	429c      	cmp	r4, r3
 8001812:	d816      	bhi.n	8001842 <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	1ad2      	subs	r2, r2, r3
 800181a:	4b33      	ldr	r3, [pc, #204]	; (80018e8 <lfs_dir_getslice+0x1e8>)
 800181c:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800181e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	429a      	cmp	r2, r3
 800182a:	d102      	bne.n	8001832 <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 800182c:	f06f 0301 	mvn.w	r3, #1
 8001830:	e055      	b.n	80018de <lfs_dir_getslice+0x1de>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001832:	69f8      	ldr	r0, [r7, #28]
 8001834:	f7ff fbdd 	bl	8000ff2 <lfs_tag_splice>
 8001838:	4603      	mov	r3, r0
 800183a:	029a      	lsls	r2, r3, #10
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	4413      	add	r3, r2
 8001840:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	1ad2      	subs	r2, r2, r3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	405a      	eors	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d138      	bne.n	80018c6 <lfs_dir_getslice+0x1c6>
            if (lfs_tag_isdelete(tag)) {
 8001854:	69f8      	ldr	r0, [r7, #28]
 8001856:	f7ff fb81 	bl	8000f5c <lfs_tag_isdelete>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <lfs_dir_getslice+0x166>
                return LFS_ERR_NOENT;
 8001860:	f06f 0301 	mvn.w	r3, #1
 8001864:	e03b      	b.n	80018de <lfs_dir_getslice+0x1de>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001866:	69f8      	ldr	r0, [r7, #28]
 8001868:	f7ff fbdf 	bl	800102a <lfs_tag_size>
 800186c:	4603      	mov	r3, r0
 800186e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe6c 	bl	800054e <lfs_min>
 8001876:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800187e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001882:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001884:	3204      	adds	r2, #4
 8001886:	6979      	ldr	r1, [r7, #20]
 8001888:	9103      	str	r1, [sp, #12]
 800188a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800188c:	9102      	str	r1, [sp, #8]
 800188e:	9201      	str	r2, [sp, #4]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	4602      	mov	r2, r0
 8001896:	2100      	movs	r1, #0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f7fe ff2b 	bl	80006f4 <lfs_bd_read>
 800189e:	61b8      	str	r0, [r7, #24]
            if (err) {
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <lfs_dir_getslice+0x1aa>
                return err;
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	e019      	b.n	80018de <lfs_dir_getslice+0x1de>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80018aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	18d0      	adds	r0, r2, r3
 80018b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	2100      	movs	r1, #0
 80018ba:	f00f fbc5 	bl	8011048 <memset>

            return tag + gdiff;
 80018be:	6a3a      	ldr	r2, [r7, #32]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	4413      	add	r3, r2
 80018c4:	e00b      	b.n	80018de <lfs_dir_getslice+0x1de>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fbba 	bl	8001042 <lfs_tag_dsize>
 80018ce:	4603      	mov	r3, r0
 80018d0:	3304      	adds	r3, #4
 80018d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f4bf af57 	bcs.w	8001788 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 80018da:	f06f 0301 	mvn.w	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	372c      	adds	r7, #44	; 0x2c
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	000ffc00 	.word	0x000ffc00

080018ec <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af04      	add	r7, sp, #16
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 80018fa:	6838      	ldr	r0, [r7, #0]
 80018fc:	f7ff fb95 	bl	800102a <lfs_tag_size>
 8001900:	4603      	mov	r3, r0
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	2300      	movs	r3, #0
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff fef4 	bl	8001700 <lfs_dir_getslice>
 8001918:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001922:	b580      	push	{r7, lr}
 8001924:	b08c      	sub	sp, #48	; 0x30
 8001926:	af04      	add	r7, sp, #16
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001932:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001938:	441a      	add	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	429a      	cmp	r2, r3
 8001942:	f240 80c0 	bls.w	8001ac6 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001946:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800194a:	e0c1      	b.n	8001ad0 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800194c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800194e:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d03f      	beq.n	80019d6 <lfs_dir_getread+0xb4>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f113 0f02 	cmn.w	r3, #2
 800195e:	d13a      	bne.n	80019d6 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800196a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800196c:	429a      	cmp	r2, r3
 800196e:	d232      	bcs.n	80019d6 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001976:	429a      	cmp	r2, r3
 8001978:	d324      	bcc.n	80019c4 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6859      	ldr	r1, [r3, #4]
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	1acb      	subs	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	4619      	mov	r1, r3
 800198a:	69b8      	ldr	r0, [r7, #24]
 800198c:	f7fe fddf 	bl	800054e <lfs_min>
 8001990:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800199c:	1acb      	subs	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4619      	mov	r1, r3
 80019a4:	69f8      	ldr	r0, [r7, #28]
 80019a6:	f00f fb41 	bl	801102c <memcpy>

                data += diff;
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	4413      	add	r3, r2
 80019b0:	61fb      	str	r3, [r7, #28]
                off += diff;
 80019b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	4413      	add	r3, r2
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80019ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80019c2:	e080      	b.n	8001ac6 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	4619      	mov	r1, r3
 80019ce:	69b8      	ldr	r0, [r7, #24]
 80019d0:	f7fe fdbd 	bl	800054e <lfs_min>
 80019d4:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f113 0f02 	cmn.w	r3, #2
 80019de:	d13a      	bne.n	8001a56 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 80019ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d232      	bcs.n	8001a56 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d324      	bcc.n	8001a44 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6859      	ldr	r1, [r3, #4]
 8001a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a04:	1acb      	subs	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	69b8      	ldr	r0, [r7, #24]
 8001a0c:	f7fe fd9f 	bl	800054e <lfs_min>
 8001a10:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a1c:	1acb      	subs	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4619      	mov	r1, r3
 8001a24:	69f8      	ldr	r0, [r7, #28]
 8001a26:	f00f fb01 	bl	801102c <memcpy>

                data += diff;
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	4413      	add	r3, r2
 8001a30:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	4413      	add	r3, r2
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001a42:	e040      	b.n	8001ac6 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	69b8      	ldr	r0, [r7, #24]
 8001a50:	f7fe fd7d 	bl	800054e <lfs_min>
 8001a54:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f06f 0201 	mvn.w	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	4619      	mov	r1, r3
 8001a66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a68:	f7fe fd80 	bl	800056c <lfs_aligndown>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a76:	441a      	add	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f7fe fd87 	bl	8000594 <lfs_alignup>
 8001a86:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4610      	mov	r0, r2
 8001a92:	f7fe fd5c 	bl	800054e <lfs_min>
 8001a96:	4602      	mov	r2, r0
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	6889      	ldr	r1, [r1, #8]
 8001aa8:	9102      	str	r1, [sp, #8]
 8001aaa:	9201      	str	r2, [sp, #4]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fe23 	bl	8001700 <lfs_dir_getslice>
 8001aba:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da01      	bge.n	8001ac6 <lfs_dir_getread+0x1a4>
            return err;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	e004      	b.n	8001ad0 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f47f af3f 	bne.w	800194c <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001ad8:	b590      	push	{r4, r7, lr}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <lfs_dir_traverse_filter+0x1e>
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <lfs_dir_traverse_filter+0xac>)
 8001af4:	e000      	b.n	8001af8 <lfs_dir_traverse_filter+0x20>
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001af8:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	405a      	eors	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d014      	beq.n	8001b34 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fa24 	bl	8000f5c <lfs_tag_isdelete>
 8001b14:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10c      	bne.n	8001b34 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <lfs_dir_traverse_filter+0xac>)
 8001b1e:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	6819      	ldr	r1, [r3, #0]
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <lfs_dir_traverse_filter+0xb4>)
 8001b26:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001b28:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8001b2c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d104      	bne.n	8001b3e <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
        return true;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e01e      	b.n	8001b7c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001b3e:	68b8      	ldr	r0, [r7, #8]
 8001b40:	f7ff fa1e 	bl	8000f80 <lfs_tag_type1>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4a:	d116      	bne.n	8001b7a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001b4c:	68b8      	ldr	r0, [r7, #8]
 8001b4e:	f7ff fa5d 	bl	800100c <lfs_tag_id>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461c      	mov	r4, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fa56 	bl	800100c <lfs_tag_id>
 8001b60:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001b62:	429c      	cmp	r4, r3
 8001b64:	d809      	bhi.n	8001b7a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001b66:	68b8      	ldr	r0, [r7, #8]
 8001b68:	f7ff fa43 	bl	8000ff2 <lfs_tag_splice>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	029a      	lsls	r2, r3, #10
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	441a      	add	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	7ffffc00 	.word	0x7ffffc00
 8001b88:	700ffc00 	.word	0x700ffc00
 8001b8c:	000ffc00 	.word	0x000ffc00

08001b90 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b0c1      	sub	sp, #260	; 0x104
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8001ba4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001bae:	6838      	ldr	r0, [r7, #0]
 8001bb0:	f7ff fa47 	bl	8001042 <lfs_tag_dsize>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	441a      	add	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d237      	bcs.n	8001c32 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f7ff fa3d 	bl	8001042 <lfs_tag_dsize>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001bd0:	68f9      	ldr	r1, [r7, #12]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	9203      	str	r2, [sp, #12]
 8001bda:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001bde:	9202      	str	r2, [sp, #8]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	9201      	str	r2, [sp, #4]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2304      	movs	r3, #4
 8001be8:	460a      	mov	r2, r1
 8001bea:	2100      	movs	r1, #0
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7fe fd81 	bl	80006f4 <lfs_bd_read>
 8001bf2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8001bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <lfs_dir_traverse+0x74>
                    return err;
 8001bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c02:	e3d0      	b.n	80023a6 <lfs_dir_traverse+0x816>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fd22 	bl	8000650 <lfs_frombe32>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	4053      	eors	r3, r2
 8001c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c16:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8001c24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	e01b      	b.n	8001c6a <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8001c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	dd13      	ble.n	8001c62 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8001c3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8001c42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8001c4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c50:	3308      	adds	r3, #8
 8001c52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8001c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c60:	e003      	b.n	8001c6a <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8001c68:	e2bd      	b.n	80021e6 <lfs_dir_traverse+0x656>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8001c6a:	4b86      	ldr	r3, [pc, #536]	; (8001e84 <lfs_dir_traverse+0x2f4>)
 8001c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8001c70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c76:	405a      	eors	r2, r3
 8001c78:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001c7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c80:	400b      	ands	r3, r1
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 82a1 	bne.w	80021cc <lfs_dir_traverse+0x63c>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8001c8a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001c8e:	f7ff f9bd 	bl	800100c <lfs_tag_id>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80ff 	beq.w	8001e98 <lfs_dir_traverse+0x308>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8001c9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d906      	bls.n	8001cb0 <lfs_dir_traverse+0x120>
 8001ca2:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <lfs_dir_traverse+0x2f8>)
 8001ca4:	4a79      	ldr	r2, [pc, #484]	; (8001e8c <lfs_dir_traverse+0x2fc>)
 8001ca6:	f240 31bf 	movw	r1, #959	; 0x3bf
 8001caa:	4879      	ldr	r0, [pc, #484]	; (8001e90 <lfs_dir_traverse+0x300>)
 8001cac:	f00f f946 	bl	8010f3c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8001cb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cb2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b98      	subs	r3, #152	; 0x98
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001cce:	4613      	mov	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b94      	subs	r3, #148	; 0x94
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b90      	subs	r3, #144	; 0x90
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b8c      	subs	r3, #140	; 0x8c
 8001d0e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d18:	4613      	mov	r3, r2
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d24:	4413      	add	r3, r2
 8001d26:	3b88      	subs	r3, #136	; 0x88
 8001d28:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d32:	4613      	mov	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b84      	subs	r3, #132	; 0x84
 8001d42:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b80      	subs	r3, #128	; 0x80
 8001d5c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d72:	4413      	add	r3, r2
 8001d74:	3b7c      	subs	r3, #124	; 0x7c
 8001d76:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d80:	4613      	mov	r3, r2
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b7a      	subs	r3, #122	; 0x7a
 8001d90:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001d94:	801a      	strh	r2, [r3, #0]
 8001d96:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001da6:	4413      	add	r3, r2
 8001da8:	3b78      	subs	r3, #120	; 0x78
 8001daa:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3b74      	subs	r3, #116	; 0x74
 8001dc4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001dce:	4613      	mov	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b70      	subs	r3, #112	; 0x70
 8001dde:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001de8:	4613      	mov	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001df4:	4413      	add	r3, r2
 8001df6:	3b6c      	subs	r3, #108	; 0x6c
 8001df8:	6019      	str	r1, [r3, #0]
 8001dfa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001dfe:	4613      	mov	r3, r2
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b68      	subs	r3, #104	; 0x68
 8001e0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e24:	4413      	add	r3, r2
 8001e26:	3b68      	subs	r3, #104	; 0x68
 8001e28:	3304      	adds	r3, #4
 8001e2a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e32:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8001e36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <lfs_dir_traverse+0x304>)
 8001e60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8001e64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e68:	1e5a      	subs	r2, r3, #1
 8001e6a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001e6e:	4613      	mov	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	3328      	adds	r3, #40	; 0x28
 8001e78:	440b      	add	r3, r1
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e80:	e695      	b.n	8001bae <lfs_dir_traverse+0x1e>
 8001e82:	bf00      	nop
 8001e84:	7ff00000 	.word	0x7ff00000
 8001e88:	08012164 	.word	0x08012164
 8001e8c:	08012d40 	.word	0x08012d40
 8001e90:	08012054 	.word	0x08012054
 8001e94:	08001ad9 	.word	0x08001ad9
                continue;
            }
        }

popped:
 8001e98:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8001e9a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001e9e:	f7ff f8b5 	bl	800100c <lfs_tag_id>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d015      	beq.n	8001ed4 <lfs_dir_traverse+0x344>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f8ae 	bl	800100c <lfs_tag_id>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8001eb4:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	f200 8189 	bhi.w	80021d0 <lfs_dir_traverse+0x640>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f8a3 	bl	800100c <lfs_tag_id>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	f240 817e 	bls.w	80021d0 <lfs_dir_traverse+0x640>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8001ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f870 	bl	8000fbc <lfs_tag_type3>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f43f ae65 	beq.w	8001bae <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f868 	bl	8000fbc <lfs_tag_type3>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f240 1301 	movw	r3, #257	; 0x101
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 80ed 	bne.w	80020d4 <lfs_dir_traverse+0x544>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8001efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001efe:	4ab7      	ldr	r2, [pc, #732]	; (80021dc <lfs_dir_traverse+0x64c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	f000 8167 	beq.w	80021d4 <lfs_dir_traverse+0x644>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8001f06:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f16:	4413      	add	r3, r2
 8001f18:	3b98      	subs	r3, #152	; 0x98
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	233c      	movs	r3, #60	; 0x3c
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2100      	movs	r1, #0
 8001f22:	f00f f891 	bl	8011048 <memset>
 8001f26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f36:	4413      	add	r3, r2
 8001f38:	3b98      	subs	r3, #152	; 0x98
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b94      	subs	r3, #148	; 0x94
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f66:	4413      	add	r3, r2
 8001f68:	3b90      	subs	r3, #144	; 0x90
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b8c      	subs	r3, #140	; 0x8c
 8001f82:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f98:	4413      	add	r3, r2
 8001f9a:	3b88      	subs	r3, #136	; 0x88
 8001f9c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b84      	subs	r3, #132	; 0x84
 8001fb6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b80      	subs	r3, #128	; 0x80
 8001fd0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fda:	4613      	mov	r3, r2
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b7c      	subs	r3, #124	; 0x7c
 8001fea:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8001fee:	801a      	strh	r2, [r3, #0]
 8001ff0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002000:	4413      	add	r3, r2
 8002002:	3b7a      	subs	r3, #122	; 0x7a
 8002004:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002008:	801a      	strh	r2, [r3, #0]
 800200a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800200e:	4613      	mov	r3, r2
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800201a:	4413      	add	r3, r2
 800201c:	3b78      	subs	r3, #120	; 0x78
 800201e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8002022:	801a      	strh	r2, [r3, #0]
 8002024:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002028:	4613      	mov	r3, r2
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002034:	4413      	add	r3, r2
 8002036:	3b74      	subs	r3, #116	; 0x74
 8002038:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002042:	4613      	mov	r3, r2
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800204e:	4413      	add	r3, r2
 8002050:	3b70      	subs	r3, #112	; 0x70
 8002052:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002056:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8002058:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800205c:	3301      	adds	r3, #1
 800205e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8002062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe ffe0 	bl	800102a <lfs_tag_size>
 800206a:	4603      	mov	r3, r0
 800206c:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8002070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe ffca 	bl	800100c <lfs_tag_id>
 8002078:	4603      	mov	r3, r0
 800207a:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 800207e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002082:	60bb      	str	r3, [r7, #8]
            off = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
 800208c:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800209a:	4b51      	ldr	r3, [pc, #324]	; (80021e0 <lfs_dir_traverse+0x650>)
 800209c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80020a0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80020a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 80020a8:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80020ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 80020b0:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80020b4:	3301      	adds	r3, #1
 80020b6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 80020ba:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 80020be:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80020ca:	4413      	add	r3, r2
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 80020d2:	e56c      	b.n	8001bae <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 80020d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe ff70 	bl	8000fbc <lfs_tag_type3>
 80020dc:	4603      	mov	r3, r0
 80020de:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80020e2:	d159      	bne.n	8002198 <lfs_dir_traverse+0x608>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020ea:	e04b      	b.n	8002184 <lfs_dir_traverse+0x5f4>
                const struct lfs_attr *a = buffer;
 80020ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80020f4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	461a      	mov	r2, r3
 8002102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002106:	4413      	add	r3, r2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800210e:	051c      	lsls	r4, r3, #20
 8002110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe ff7a 	bl	800100c <lfs_tag_id>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002120:	4413      	add	r3, r2
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	ea44 0103 	orr.w	r1, r4, r3
 8002128:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	461a      	mov	r2, r3
 8002136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800213a:	4413      	add	r3, r2
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8002140:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	461a      	mov	r2, r3
 800214e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002152:	4413      	add	r3, r2
 8002154:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8002156:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800215a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800215e:	4798      	blx	r3
 8002160:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8002164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002168:	2b00      	cmp	r3, #0
 800216a:	da02      	bge.n	8002172 <lfs_dir_traverse+0x5e2>
                    return res;
 800216c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002170:	e119      	b.n	80023a6 <lfs_dir_traverse+0x816>
                }

                if (res) {
 8002172:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d12e      	bne.n	80021d8 <lfs_dir_traverse+0x648>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800217a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800217e:	3301      	adds	r3, #1
 8002180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe ff4f 	bl	800102a <lfs_tag_size>
 800218c:	4602      	mov	r2, r0
 800218e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002192:	4293      	cmp	r3, r2
 8002194:	d3aa      	bcc.n	80020ec <lfs_dir_traverse+0x55c>
 8002196:	e50a      	b.n	8001bae <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8002198:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800219c:	029a      	lsls	r2, r3, #10
 800219e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a0:	18d1      	adds	r1, r2, r3
 80021a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80021aa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80021ae:	4798      	blx	r3
 80021b0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 80021b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da02      	bge.n	80021c2 <lfs_dir_traverse+0x632>
                return res;
 80021bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021c0:	e0f1      	b.n	80023a6 <lfs_dir_traverse+0x816>
            }

            if (res) {
 80021c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <lfs_dir_traverse+0x654>
 80021ca:	e4f0      	b.n	8001bae <lfs_dir_traverse+0x1e>
                continue;
 80021cc:	bf00      	nop
 80021ce:	e4ee      	b.n	8001bae <lfs_dir_traverse+0x1e>
            continue;
 80021d0:	bf00      	nop
 80021d2:	e4ec      	b.n	8001bae <lfs_dir_traverse+0x1e>
                continue;
 80021d4:	bf00      	nop
 80021d6:	e4ea      	b.n	8001bae <lfs_dir_traverse+0x1e>
                    break;
 80021d8:	bf00      	nop
        {
 80021da:	e4e8      	b.n	8001bae <lfs_dir_traverse+0x1e>
 80021dc:	08001ad9 	.word	0x08001ad9
 80021e0:	600ffc00 	.word	0x600ffc00
                break;
 80021e4:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 80021e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80d9 	beq.w	80023a2 <lfs_dir_traverse+0x812>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 80021f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021f4:	1e5a      	subs	r2, r3, #1
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002202:	4413      	add	r3, r2
 8002204:	3b98      	subs	r3, #152	; 0x98
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800220a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800220e:	1e5a      	subs	r2, r3, #1
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800221c:	4413      	add	r3, r2
 800221e:	3b94      	subs	r3, #148	; 0x94
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8002224:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002236:	4413      	add	r3, r2
 8002238:	3b90      	subs	r3, #144	; 0x90
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800223e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002242:	1e5a      	subs	r2, r3, #1
 8002244:	4613      	mov	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002250:	4413      	add	r3, r2
 8002252:	3b8c      	subs	r3, #140	; 0x8c
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 800225a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800225e:	1e5a      	subs	r2, r3, #1
 8002260:	4613      	mov	r3, r2
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800226c:	4413      	add	r3, r2
 800226e:	3b88      	subs	r3, #136	; 0x88
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8002276:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800227a:	1e5a      	subs	r2, r3, #1
 800227c:	4613      	mov	r3, r2
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002288:	4413      	add	r3, r2
 800228a:	3b84      	subs	r3, #132	; 0x84
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8002292:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002296:	1e5a      	subs	r2, r3, #1
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022a4:	4413      	add	r3, r2
 80022a6:	3b80      	subs	r3, #128	; 0x80
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 80022ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022b2:	1e5a      	subs	r2, r3, #1
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022c0:	4413      	add	r3, r2
 80022c2:	3b7c      	subs	r3, #124	; 0x7c
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 80022ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	4613      	mov	r3, r2
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022dc:	4413      	add	r3, r2
 80022de:	3b7a      	subs	r3, #122	; 0x7a
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 80022e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	4613      	mov	r3, r2
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80022f8:	4413      	add	r3, r2
 80022fa:	3b78      	subs	r3, #120	; 0x78
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8002302:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002306:	1e5a      	subs	r2, r3, #1
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002314:	4413      	add	r3, r2
 8002316:	3b74      	subs	r3, #116	; 0x74
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 800231e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002322:	1e5a      	subs	r2, r3, #1
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002330:	4413      	add	r3, r2
 8002332:	3b70      	subs	r3, #112	; 0x70
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 800233a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800233e:	1e5a      	subs	r2, r3, #1
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800234c:	4413      	add	r3, r2
 800234e:	3b6c      	subs	r3, #108	; 0x6c
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8002354:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002358:	1e5a      	subs	r2, r3, #1
 800235a:	4613      	mov	r3, r2
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002366:	4413      	add	r3, r2
 8002368:	3b68      	subs	r3, #104	; 0x68
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8002370:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002374:	1e5a      	subs	r2, r3, #1
 8002376:	4613      	mov	r3, r2
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002382:	4413      	add	r3, r2
 8002384:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8002388:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800238c:	3204      	adds	r2, #4
 800238e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002392:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002396:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800239a:	3b01      	subs	r3, #1
 800239c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80023a0:	e57b      	b.n	8001e9a <lfs_dir_traverse+0x30a>
    } else {
        return res;
 80023a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	37f4      	adds	r7, #244	; 0xf4
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd90      	pop	{r4, r7, pc}
 80023ae:	bf00      	nop

080023b0 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	b0a5      	sub	sp, #148	; 0x94
 80023b4:	af04      	add	r7, sp, #16
 80023b6:	6178      	str	r0, [r7, #20]
 80023b8:	6139      	str	r1, [r7, #16]
 80023ba:	60fa      	str	r2, [r7, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00f      	beq.n	80023ec <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d206      	bcs.n	80023e6 <lfs_dir_fetchmatch+0x36>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3304      	adds	r3, #4
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 80023e6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80023ea:	e39d      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 80023ec:	2300      	movs	r3, #0
 80023ee:	647b      	str	r3, [r7, #68]	; 0x44
 80023f0:	2300      	movs	r3, #0
 80023f2:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 80023f8:	2300      	movs	r3, #0
 80023fa:	677b      	str	r3, [r7, #116]	; 0x74
 80023fc:	e056      	b.n	80024ac <lfs_dir_fetchmatch+0xfc>
        int err = lfs_bd_read(lfs,
 80023fe:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8002408:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800240a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800240e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8002414:	2104      	movs	r1, #4
 8002416:	9103      	str	r1, [sp, #12]
 8002418:	9202      	str	r2, [sp, #8]
 800241a:	2200      	movs	r2, #0
 800241c:	9201      	str	r2, [sp, #4]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2304      	movs	r3, #4
 8002422:	4602      	mov	r2, r0
 8002424:	2100      	movs	r1, #0
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f7fe f964 	bl	80006f4 <lfs_bd_read>
 800242c:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800242e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002436:	4413      	add	r3, r2
 8002438:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f8f1 	bl	8000624 <lfs_fromle32>
 8002442:	4602      	mov	r2, r0
 8002444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800244c:	440b      	add	r3, r1
 800244e:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8002452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <lfs_dir_fetchmatch+0xb4>
 8002458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800245e:	d001      	beq.n	8002464 <lfs_dir_fetchmatch+0xb4>
            return err;
 8002460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002462:	e361      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
        }

        if (err != LFS_ERR_CORRUPT &&
 8002464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002466:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800246a:	d01c      	beq.n	80024a6 <lfs_dir_fetchmatch+0xf6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800246c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002474:	4413      	add	r3, r2
 8002476:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800247a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800247c:	3301      	adds	r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	bfb8      	it	lt
 8002486:	425b      	neglt	r3, r3
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800248e:	440b      	add	r3, r1
 8002490:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002494:	4619      	mov	r1, r3
 8002496:	4610      	mov	r0, r2
 8002498:	f7fe f8b7 	bl	800060a <lfs_scmp>
 800249c:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800249e:	2b00      	cmp	r3, #0
 80024a0:	dd01      	ble.n	80024a6 <lfs_dir_fetchmatch+0xf6>
            r = i;
 80024a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a4:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 80024a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a8:	3301      	adds	r3, #1
 80024aa:	677b      	str	r3, [r7, #116]	; 0x74
 80024ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	dda5      	ble.n	80023fe <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80024b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	bfb8      	it	lt
 80024bc:	425b      	neglt	r3, r3
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80024ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024cc:	3301      	adds	r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	bfb8      	it	lt
 80024d6:	425b      	neglt	r3, r3
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4413      	add	r3, r2
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 80024e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	bfb8      	it	lt
 80024ee:	425b      	neglt	r3, r3
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024f6:	4413      	add	r3, r2
 80024f8:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002506:	2300      	movs	r3, #0
 8002508:	673b      	str	r3, [r7, #112]	; 0x70
 800250a:	e2f9      	b.n	8002b00 <lfs_dir_fetchmatch+0x750>
        lfs_off_t off = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
 8002514:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800251c:	4aa8      	ldr	r2, [pc, #672]	; (80027c0 <lfs_dir_fetchmatch+0x410>)
 800251e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002522:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002526:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 8002530:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002532:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe f877 	bl	8000638 <lfs_tole32>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	3308      	adds	r3, #8
 8002554:	2204      	movs	r2, #4
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f004 ff34 	bl	80073c8 <lfs_crc>
 8002560:	4603      	mov	r3, r0
 8002562:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe f85b 	bl	8000624 <lfs_fromle32>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8002574:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002576:	f7fe fd64 	bl	8001042 <lfs_tag_dsize>
 800257a:	4602      	mov	r2, r0
 800257c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257e:	4413      	add	r3, r2
 8002580:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8002582:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002588:	69d8      	ldr	r0, [r3, #28]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2204      	movs	r2, #4
 8002590:	9203      	str	r2, [sp, #12]
 8002592:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002596:	9202      	str	r2, [sp, #8]
 8002598:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800259a:	9201      	str	r2, [sp, #4]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	2100      	movs	r1, #0
 80025a4:	6978      	ldr	r0, [r7, #20]
 80025a6:	f7fe f8a5 	bl	80006f4 <lfs_bd_read>
 80025aa:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80025ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <lfs_dir_fetchmatch+0x210>
                if (err == LFS_ERR_CORRUPT) {
 80025b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80025b8:	f000 81d5 	beq.w	8002966 <lfs_dir_fetchmatch+0x5b6>
                    // can't continue?
                    break;
                }
                return err;
 80025bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025be:	e2b3      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80025c6:	2204      	movs	r2, #4
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 fefd 	bl	80073c8 <lfs_crc>
 80025ce:	4603      	mov	r3, r0
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe f83b 	bl	8000650 <lfs_frombe32>
 80025da:	4602      	mov	r2, r0
 80025dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025de:	4053      	eors	r3, r2
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fcac 	bl	8000f42 <lfs_tag_isvalid>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f083 0301 	eor.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <lfs_dir_fetchmatch+0x25e>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 80025f6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80025f8:	f7fe fcd1 	bl	8000f9e <lfs_tag_type2>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 800260c:	e1ba      	b.n	8002984 <lfs_dir_fetchmatch+0x5d4>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fd16 	bl	8001042 <lfs_tag_dsize>
 8002616:	4602      	mov	r2, r0
 8002618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261a:	441a      	add	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	429a      	cmp	r2, r3
 8002624:	f200 81a1 	bhi.w	800296a <lfs_dir_fetchmatch+0x5ba>
                break;
            }

            ptag = tag;
 8002628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262a:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fcb5 	bl	8000f9e <lfs_tag_type2>
 8002634:	4603      	mov	r3, r0
 8002636:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800263a:	d15e      	bne.n	80026fa <lfs_dir_fetchmatch+0x34a>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800263c:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002642:	69dc      	ldr	r4, [r3, #28]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800264a:	3204      	adds	r2, #4
 800264c:	2104      	movs	r1, #4
 800264e:	9103      	str	r1, [sp, #12]
 8002650:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002654:	9102      	str	r1, [sp, #8]
 8002656:	9201      	str	r2, [sp, #4]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4623      	mov	r3, r4
 800265c:	4602      	mov	r2, r0
 800265e:	2100      	movs	r1, #0
 8002660:	6978      	ldr	r0, [r7, #20]
 8002662:	f7fe f847 	bl	80006f4 <lfs_bd_read>
 8002666:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8002668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <lfs_dir_fetchmatch+0x2cc>
                    if (err == LFS_ERR_CORRUPT) {
 800266e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002670:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002674:	f000 817b 	beq.w	800296e <lfs_dir_fetchmatch+0x5be>
                        break;
                    }
                    return err;
 8002678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 800267a:	e255      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
                }
                dcrc = lfs_fromle32(dcrc);
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd ffd0 	bl	8000624 <lfs_fromle32>
 8002684:	4603      	mov	r3, r0
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8002688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	429a      	cmp	r2, r3
 800268e:	f040 8170 	bne.w	8002972 <lfs_dir_fetchmatch+0x5c2>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fca0 	bl	8000fda <lfs_tag_chunk>
 800269a:	4603      	mov	r3, r0
 800269c:	07db      	lsls	r3, r3, #31
 800269e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80026a0:	4053      	eors	r3, r2
 80026a2:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80026ac:	2204      	movs	r2, #4
 80026ae:	4618      	mov	r0, r3
 80026b0:	f004 fe8a 	bl	80073c8 <lfs_crc>
 80026b4:	4602      	mov	r2, r0
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 80026ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026bc:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fcbe 	bl	8001042 <lfs_tag_dsize>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ca:	441a      	add	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80026d4:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026dc:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 80026de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 80026e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80026f0:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
 80026f8:	e73c      	b.n	8002574 <lfs_dir_fetchmatch+0x1c4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 80026fa:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	681c      	ldr	r4, [r3, #0]
 8002708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270a:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fc97 	bl	8001042 <lfs_tag_dsize>
 8002714:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8002716:	3b04      	subs	r3, #4
 8002718:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800271c:	9203      	str	r2, [sp, #12]
 800271e:	9302      	str	r3, [sp, #8]
 8002720:	9501      	str	r5, [sp, #4]
 8002722:	9400      	str	r4, [sp, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4632      	mov	r2, r6
 8002728:	2100      	movs	r1, #0
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7fe f97f 	bl	8000a2e <lfs_bd_crc>
 8002730:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8002732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <lfs_dir_fetchmatch+0x396>
                if (err == LFS_ERR_CORRUPT) {
 8002738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800273e:	f000 811a 	beq.w	8002976 <lfs_dir_fetchmatch+0x5c6>
                    break;
                }
                return err;
 8002742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002744:	e1f0      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fc19 	bl	8000f80 <lfs_tag_type1>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d113      	bne.n	800277c <lfs_dir_fetchmatch+0x3cc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fc58 	bl	800100c <lfs_tag_id>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002764:	4293      	cmp	r3, r2
 8002766:	f200 80b5 	bhi.w	80028d4 <lfs_dir_fetchmatch+0x524>
                    tempcount = lfs_tag_id(tag) + 1;
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fc4d 	bl	800100c <lfs_tag_id>
 8002772:	4603      	mov	r3, r0
 8002774:	3301      	adds	r3, #1
 8002776:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800277a:	e0ab      	b.n	80028d4 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fbfe 	bl	8000f80 <lfs_tag_type1>
 8002784:	4603      	mov	r3, r0
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278a:	d139      	bne.n	8002800 <lfs_dir_fetchmatch+0x450>
                tempcount += lfs_tag_splice(tag);
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fc2f 	bl	8000ff2 <lfs_tag_splice>
 8002794:	4603      	mov	r3, r0
 8002796:	b29a      	uxth	r2, r3
 8002798:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800279c:	4413      	add	r3, r2
 800279e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80027a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <lfs_dir_fetchmatch+0x414>)
 80027a6:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80027a8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80027ac:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80027b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d108      	bne.n	80027c8 <lfs_dir_fetchmatch+0x418>
                    tempbesttag |= 0x80000000;
 80027b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027bc:	663b      	str	r3, [r7, #96]	; 0x60
 80027be:	e089      	b.n	80028d4 <lfs_dir_fetchmatch+0x524>
 80027c0:	080121a4 	.word	0x080121a4
 80027c4:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 80027c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ce:	f000 8081 	beq.w	80028d4 <lfs_dir_fetchmatch+0x524>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fc19 	bl	800100c <lfs_tag_id>
 80027da:	4603      	mov	r3, r0
 80027dc:	461c      	mov	r4, r3
 80027de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fc13 	bl	800100c <lfs_tag_id>
 80027e6:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80027e8:	429c      	cmp	r4, r3
 80027ea:	d873      	bhi.n	80028d4 <lfs_dir_fetchmatch+0x524>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fbff 	bl	8000ff2 <lfs_tag_splice>
 80027f4:	4603      	mov	r3, r0
 80027f6:	029a      	lsls	r2, r3, #10
 80027f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027fa:	4413      	add	r3, r2
 80027fc:	663b      	str	r3, [r7, #96]	; 0x60
 80027fe:	e069      	b.n	80028d4 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fbbc 	bl	8000f80 <lfs_tag_type1>
 8002808:	4603      	mov	r3, r0
 800280a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800280e:	d132      	bne.n	8002876 <lfs_dir_fetchmatch+0x4c6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fbe1 	bl	8000fda <lfs_tag_chunk>
 8002818:	4603      	mov	r3, r0
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 800282a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002830:	69dc      	ldr	r4, [r3, #28]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002838:	3204      	adds	r2, #4
 800283a:	2108      	movs	r1, #8
 800283c:	9103      	str	r1, [sp, #12]
 800283e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002842:	9102      	str	r1, [sp, #8]
 8002844:	9201      	str	r2, [sp, #4]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	4623      	mov	r3, r4
 800284a:	4602      	mov	r2, r0
 800284c:	2100      	movs	r1, #0
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7fd ff50 	bl	80006f4 <lfs_bd_read>
 8002854:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002858:	2b00      	cmp	r3, #0
 800285a:	d006      	beq.n	800286a <lfs_dir_fetchmatch+0x4ba>
                    if (err == LFS_ERR_CORRUPT) {
 800285c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800285e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002862:	f000 808a 	beq.w	800297a <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 8002866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002868:	e15e      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
                }
                lfs_pair_fromle32(temptail);
 800286a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fb33 	bl	8000eda <lfs_pair_fromle32>
 8002874:	e02e      	b.n	80028d4 <lfs_dir_fetchmatch+0x524>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fb9f 	bl	8000fbc <lfs_tag_type3>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002886:	429a      	cmp	r2, r3
 8002888:	d124      	bne.n	80028d4 <lfs_dir_fetchmatch+0x524>
                err = lfs_bd_read(lfs,
 800288a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002890:	69dc      	ldr	r4, [r3, #28]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002898:	3204      	adds	r2, #4
 800289a:	2108      	movs	r1, #8
 800289c:	9103      	str	r1, [sp, #12]
 800289e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80028a2:	9102      	str	r1, [sp, #8]
 80028a4:	9201      	str	r2, [sp, #4]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	4623      	mov	r3, r4
 80028aa:	4602      	mov	r2, r0
 80028ac:	2100      	movs	r1, #0
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7fd ff20 	bl	80006f4 <lfs_bd_read>
 80028b4:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 80028b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <lfs_dir_fetchmatch+0x514>
                    if (err == LFS_ERR_CORRUPT) {
 80028bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028be:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80028c2:	d05c      	beq.n	800297e <lfs_dir_fetchmatch+0x5ce>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 80028c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fcb7 	bl	800123c <lfs_fcrc_fromle32>
                hasfcrc = true;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80028d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028da:	405a      	eors	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f47f ae47 	bne.w	8002574 <lfs_dir_fetchmatch+0x1c4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 80028e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 80028ec:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	f107 0220 	add.w	r2, r7, #32
 80028f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028fc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002900:	4798      	blx	r3
 8002902:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8002904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002906:	2b00      	cmp	r3, #0
 8002908:	da05      	bge.n	8002916 <lfs_dir_fetchmatch+0x566>
                    if (res == LFS_ERR_CORRUPT) {
 800290a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002910:	d037      	beq.n	8002982 <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return res;
 8002912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8002914:	e108      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
                }

                if (res == LFS_CMP_EQ) {
 8002916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <lfs_dir_fetchmatch+0x572>
                    // found a match
                    tempbesttag = tag;
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	663b      	str	r3, [r7, #96]	; 0x60
 8002920:	e628      	b.n	8002574 <lfs_dir_fetchmatch+0x1c4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002926:	405a      	eors	r2, r3
 8002928:	4b81      	ldr	r3, [pc, #516]	; (8002b30 <lfs_dir_fetchmatch+0x780>)
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <lfs_dir_fetchmatch+0x588>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
 8002934:	663b      	str	r3, [r7, #96]	; 0x60
 8002936:	e61d      	b.n	8002574 <lfs_dir_fetchmatch+0x1c4>
                } else if (res == LFS_CMP_GT &&
 8002938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293a:	2b02      	cmp	r3, #2
 800293c:	f47f ae1a 	bne.w	8002574 <lfs_dir_fetchmatch+0x1c4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fb62 	bl	800100c <lfs_tag_id>
 8002948:	4603      	mov	r3, r0
 800294a:	461c      	mov	r4, r3
 800294c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fb5c 	bl	800100c <lfs_tag_id>
 8002954:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002956:	429c      	cmp	r4, r3
 8002958:	f63f ae0c 	bhi.w	8002574 <lfs_dir_fetchmatch+0x1c4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002962:	663b      	str	r3, [r7, #96]	; 0x60
 8002964:	e606      	b.n	8002574 <lfs_dir_fetchmatch+0x1c4>
                    break;
 8002966:	bf00      	nop
 8002968:	e00c      	b.n	8002984 <lfs_dir_fetchmatch+0x5d4>
                break;
 800296a:	bf00      	nop
 800296c:	e00a      	b.n	8002984 <lfs_dir_fetchmatch+0x5d4>
                        break;
 800296e:	bf00      	nop
 8002970:	e008      	b.n	8002984 <lfs_dir_fetchmatch+0x5d4>
                    break;
 8002972:	bf00      	nop
 8002974:	e006      	b.n	8002984 <lfs_dir_fetchmatch+0x5d4>
                    break;
 8002976:	bf00      	nop
 8002978:	e004      	b.n	8002984 <lfs_dir_fetchmatch+0x5d4>
                        break;
 800297a:	bf00      	nop
 800297c:	e002      	b.n	8002984 <lfs_dir_fetchmatch+0x5d4>
                        break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002982:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d000      	beq.n	800298e <lfs_dir_fetchmatch+0x5de>
 800298c:	e016      	b.n	80029bc <lfs_dir_fetchmatch+0x60c>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fa1f 	bl	8000dd4 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002998:	3301      	adds	r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	bfb8      	it	lt
 80029a2:	425b      	neglt	r3, r3
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029aa:	4413      	add	r3, r2
 80029ac:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 80029b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b6:	3301      	adds	r3, #1
 80029b8:	673b      	str	r3, [r7, #112]	; 0x70
 80029ba:	e0a1      	b.n	8002b00 <lfs_dir_fetchmatch+0x750>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2200      	movs	r2, #0
 80029c0:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 80029c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03a      	beq.n	8002a40 <lfs_dir_fetchmatch+0x690>
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029d2:	6992      	ldr	r2, [r2, #24]
 80029d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80029d8:	fb02 f201 	mul.w	r2, r2, r1
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d12e      	bne.n	8002a40 <lfs_dir_fetchmatch+0x690>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 80029e2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d02a      	beq.n	8002a40 <lfs_dir_fetchmatch+0x690>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
 80029ee:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 80029f0:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 80029f6:	69dd      	ldr	r5, [r3, #28]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	68d2      	ldr	r2, [r2, #12]
 8002a00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a02:	f107 001c 	add.w	r0, r7, #28
 8002a06:	9003      	str	r0, [sp, #12]
 8002a08:	9102      	str	r1, [sp, #8]
 8002a0a:	9201      	str	r2, [sp, #4]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	462b      	mov	r3, r5
 8002a10:	4622      	mov	r2, r4
 8002a12:	2100      	movs	r1, #0
 8002a14:	6978      	ldr	r0, [r7, #20]
 8002a16:	f7fe f80a 	bl	8000a2e <lfs_bd_crc>
 8002a1a:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <lfs_dir_fetchmatch+0x67e>
 8002a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a24:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002a28:	d001      	beq.n	8002a2e <lfs_dir_fetchmatch+0x67e>
                    return err;
 8002a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2c:	e07c      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	333c      	adds	r3, #60	; 0x3c
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe fb97 	bl	800117c <lfs_gstate_hasmovehere>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d028      	beq.n	8002aa6 <lfs_dir_fetchmatch+0x6f6>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fad7 	bl	800100c <lfs_tag_id>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461c      	mov	r4, r3
 8002a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fad1 	bl	800100c <lfs_tag_id>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	429c      	cmp	r4, r3
 8002a6e:	d104      	bne.n	8002a7a <lfs_dir_fetchmatch+0x6ca>
                besttag |= 0x80000000;
 8002a70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a78:	e015      	b.n	8002aa6 <lfs_dir_fetchmatch+0x6f6>
            } else if (besttag != -1 &&
 8002a7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d011      	beq.n	8002aa6 <lfs_dir_fetchmatch+0x6f6>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe fac0 	bl	800100c <lfs_tag_id>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	461c      	mov	r4, r3
 8002a90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe faba 	bl	800100c <lfs_tag_id>
 8002a98:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8002a9a:	429c      	cmp	r4, r3
 8002a9c:	d203      	bcs.n	8002aa6 <lfs_dir_fetchmatch+0x6f6>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aa0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d010      	beq.n	8002ad0 <lfs_dir_fetchmatch+0x720>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe faab 	bl	800100c <lfs_tag_id>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	8a9b      	ldrh	r3, [r3, #20]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f7fd fd44 	bl	800054e <lfs_min>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ace:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fa35 	bl	8000f42 <lfs_tag_isvalid>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <lfs_dir_fetchmatch+0x732>
            return besttag;
 8002ade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ae0:	e022      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002ae2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe fa91 	bl	800100c <lfs_tag_id>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461a      	mov	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	8a9b      	ldrh	r3, [r3, #20]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d202      	bcs.n	8002afc <lfs_dir_fetchmatch+0x74c>
            return LFS_ERR_NOENT;
 8002af6:	f06f 0301 	mvn.w	r3, #1
 8002afa:	e015      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
        } else {
            return 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e013      	b.n	8002b28 <lfs_dir_fetchmatch+0x778>
    for (int i = 0; i < 2; i++) {
 8002b00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	f77f ad02 	ble.w	800250c <lfs_dir_fetchmatch+0x15c>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4908      	ldr	r1, [pc, #32]	; (8002b34 <lfs_dir_fetchmatch+0x784>)
 8002b12:	9101      	str	r1, [sp, #4]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	f240 5262 	movw	r2, #1378	; 0x562
 8002b1c:	4906      	ldr	r1, [pc, #24]	; (8002b38 <lfs_dir_fetchmatch+0x788>)
 8002b1e:	4807      	ldr	r0, [pc, #28]	; (8002b3c <lfs_dir_fetchmatch+0x78c>)
 8002b20:	f00e fe2e 	bl	8011780 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002b24:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3784      	adds	r7, #132	; 0x84
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b30:	7ffffc00 	.word	0x7ffffc00
 8002b34:	08012160 	.word	0x08012160
 8002b38:	08012054 	.word	0x08012054
 8002b3c:	0801216c 	.word	0x0801216c

08002b40 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af04      	add	r7, sp, #16
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9303      	str	r3, [sp, #12]
 8002b50:	2300      	movs	r3, #0
 8002b52:	9302      	str	r3, [sp, #8]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff fc22 	bl	80023b0 <lfs_dir_fetchmatch>
 8002b6c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <lfs_dir_getgstate+0x5c>)
 8002b8c:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <lfs_dir_getgstate+0x60>)
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7fe feab 	bl	80018ec <lfs_dir_get>
 8002b96:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	da05      	bge.n	8002baa <lfs_dir_getgstate+0x32>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f113 0f02 	cmn.w	r3, #2
 8002ba4:	d001      	beq.n	8002baa <lfs_dir_getgstate+0x32>
        return res;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	e00f      	b.n	8002bca <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f113 0f02 	cmn.w	r3, #2
 8002bb0:	d00a      	beq.n	8002bc8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002bb2:	f107 0310 	add.w	r3, r7, #16
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fb00 	bl	80011bc <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002bbc:	f107 0310 	add.w	r3, r7, #16
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe fa51 	bl	800106a <lfs_gstate_xor>
    }

    return 0;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	7ff0000c 	.word	0x7ff0000c
 8002bd8:	7ff00000 	.word	0x7ff00000

08002bdc <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b08f      	sub	sp, #60	; 0x3c
 8002be0:	af04      	add	r7, sp, #16
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	689c      	ldr	r4, [r3, #8]
 8002bfa:	68b8      	ldr	r0, [r7, #8]
 8002bfc:	f7fe fa15 	bl	800102a <lfs_tag_size>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4619      	mov	r1, r3
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7fd fca2 	bl	800054e <lfs_min>
 8002c0a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002c0c:	6a3c      	ldr	r4, [r7, #32]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	6852      	ldr	r2, [r2, #4]
 8002c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c18:	6849      	ldr	r1, [r1, #4]
 8002c1a:	69b8      	ldr	r0, [r7, #24]
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9102      	str	r1, [sp, #8]
 8002c20:	9201      	str	r2, [sp, #4]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	4622      	mov	r2, r4
 8002c28:	2100      	movs	r1, #0
 8002c2a:	6a38      	ldr	r0, [r7, #32]
 8002c2c:	f7fd feae 	bl	800098c <lfs_bd_cmp>
 8002c30:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <lfs_dir_find_match+0x60>
        return res;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	e014      	b.n	8002c66 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	689c      	ldr	r4, [r3, #8]
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	f7fe f9f2 	bl	800102a <lfs_tag_size>
 8002c46:	4603      	mov	r3, r0
 8002c48:	429c      	cmp	r4, r3
 8002c4a:	d00b      	beq.n	8002c64 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	689c      	ldr	r4, [r3, #8]
 8002c50:	68b8      	ldr	r0, [r7, #8]
 8002c52:	f7fe f9ea 	bl	800102a <lfs_tag_size>
 8002c56:	4603      	mov	r3, r0
 8002c58:	429c      	cmp	r4, r3
 8002c5a:	d201      	bcs.n	8002c60 <lfs_dir_find_match+0x84>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e002      	b.n	8002c66 <lfs_dir_find_match+0x8a>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e000      	b.n	8002c66 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	372c      	adds	r7, #44	; 0x2c
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd90      	pop	{r4, r7, pc}
	...

08002c70 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b093      	sub	sp, #76	; 0x4c
 8002c74:	af04      	add	r7, sp, #16
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002c90:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8002c92:	4b6e      	ldr	r3, [pc, #440]	; (8002e4c <lfs_dir_find+0x1dc>)
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a1a      	ldr	r2, [r3, #32]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8002ca6:	496a      	ldr	r1, [pc, #424]	; (8002e50 <lfs_dir_find+0x1e0>)
 8002ca8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002caa:	f00e fdaf 	bl	801180c <strspn>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	4413      	add	r3, r2
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8002cb6:	4966      	ldr	r1, [pc, #408]	; (8002e50 <lfs_dir_find+0x1e0>)
 8002cb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cba:	f00e fd96 	bl	80117ea <strcspn>
 8002cbe:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d105      	bne.n	8002cd2 <lfs_dir_find+0x62>
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	4b62      	ldr	r3, [pc, #392]	; (8002e54 <lfs_dir_find+0x1e4>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d00a      	beq.n	8002ce8 <lfs_dir_find+0x78>
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d10c      	bne.n	8002cf2 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8002cd8:	2202      	movs	r2, #2
 8002cda:	495f      	ldr	r1, [pc, #380]	; (8002e58 <lfs_dir_find+0x1e8>)
 8002cdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cde:	f00e f997 	bl	8011010 <memcmp>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <lfs_dir_find+0x82>
            name += namelen;
 8002ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	4413      	add	r3, r2
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8002cf0:	e7d9      	b.n	8002ca6 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	4413      	add	r3, r2
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8002cfe:	4954      	ldr	r1, [pc, #336]	; (8002e50 <lfs_dir_find+0x1e0>)
 8002d00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d02:	f00e fd83 	bl	801180c <strspn>
 8002d06:	4602      	mov	r2, r0
 8002d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0a:	4413      	add	r3, r2
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8002d0e:	4950      	ldr	r1, [pc, #320]	; (8002e50 <lfs_dir_find+0x1e0>)
 8002d10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d12:	f00e fd6a 	bl	80117ea <strcspn>
 8002d16:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01d      	beq.n	8002d5a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d112      	bne.n	8002d4a <lfs_dir_find+0xda>
 8002d24:	2202      	movs	r2, #2
 8002d26:	494c      	ldr	r1, [pc, #304]	; (8002e58 <lfs_dir_find+0x1e8>)
 8002d28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d2a:	f00e f971 	bl	8011010 <memcmp>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <lfs_dir_find+0xda>
                depth -= 1;
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	3b01      	subs	r3, #1
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8002d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8002d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	4413      	add	r3, r2
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8002d48:	e7ad      	b.n	8002ca6 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8002d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	4413      	add	r3, r2
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8002d58:	e7d1      	b.n	8002cfe <lfs_dir_find+0x8e>
                break;
 8002d5a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <lfs_dir_find+0xf8>
            return tag;
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	e06c      	b.n	8002e42 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d6c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe f923 	bl	8000fbc <lfs_tag_type3>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d002      	beq.n	8002d82 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8002d7c:	f06f 0313 	mvn.w	r3, #19
 8002d80:	e05f      	b.n	8002e42 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe f941 	bl	800100c <lfs_tag_id>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d01c      	beq.n	8002dd0 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe f937 	bl	800100c <lfs_tag_id>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002da2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002da6:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002dae:	9200      	str	r2, [sp, #0]
 8002db0:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <lfs_dir_find+0x1ec>)
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7fe fd99 	bl	80018ec <lfs_dir_get>
 8002dba:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da01      	bge.n	8002dc6 <lfs_dir_find+0x156>
                return res;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	e03d      	b.n	8002e42 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3318      	adds	r3, #24
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe f885 	bl	8000eda <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8002dd6:	212f      	movs	r1, #47	; 0x2f
 8002dd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dda:	f00e fcf9 	bl	80117d0 <strchr>
 8002dde:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <lfs_dir_find+0x178>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	e000      	b.n	8002dea <lfs_dir_find+0x17a>
 8002de8:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	613a      	str	r2, [r7, #16]
 8002dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df0:	617a      	str	r2, [r7, #20]
 8002df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df4:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002df6:	f107 0210 	add.w	r2, r7, #16
 8002dfa:	9203      	str	r2, [sp, #12]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <lfs_dir_find+0x1f0>)
 8002dfe:	9202      	str	r2, [sp, #8]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f7ff face 	bl	80023b0 <lfs_dir_fetchmatch>
 8002e14:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	da01      	bge.n	8002e20 <lfs_dir_find+0x1b0>
                return tag;
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	e010      	b.n	8002e42 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d004      	beq.n	8002e30 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8002e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	4413      	add	r3, r2
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8002e2e:	e73a      	b.n	8002ca6 <lfs_dir_find+0x36>
            if (!dir->split) {
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	7ddb      	ldrb	r3, [r3, #23]
 8002e34:	f083 0301 	eor.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0c8      	beq.n	8002dd0 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8002e3e:	f06f 0301 	mvn.w	r3, #1
    }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	373c      	adds	r7, #60	; 0x3c
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd90      	pop	{r4, r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	002ffc00 	.word	0x002ffc00
 8002e50:	080121ac 	.word	0x080121ac
 8002e54:	080121b0 	.word	0x080121b0
 8002e58:	080121b4 	.word	0x080121b4
 8002e5c:	700ffc00 	.word	0x700ffc00
 8002e60:	08002bdd 	.word	0x08002bdd

08002e64 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b08b      	sub	sp, #44	; 0x2c
 8002e68:	af04      	add	r7, sp, #16
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f103 0010 	add.w	r0, r3, #16
 8002e78:	68fc      	ldr	r4, [r7, #12]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	6852      	ldr	r2, [r2, #4]
 8002e82:	6839      	ldr	r1, [r7, #0]
 8002e84:	9103      	str	r1, [sp, #12]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	9102      	str	r1, [sp, #8]
 8002e8a:	9201      	str	r2, [sp, #4]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	4622      	mov	r2, r4
 8002e92:	4601      	mov	r1, r0
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f7fd febf 	bl	8000c18 <lfs_bd_prog>
 8002e9a:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <lfs_dir_commitprog+0x42>
        return err;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	e010      	b.n	8002ec8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 fa8a 	bl	80073c8 <lfs_crc>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	441a      	add	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	605a      	str	r2, [r3, #4]
    return 0;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}

08002ed0 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b08f      	sub	sp, #60	; 0x3c
 8002ed4:	af04      	add	r7, sp, #16
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fe f8af 	bl	8001042 <lfs_tag_dsize>
 8002ee4:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	441a      	add	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d902      	bls.n	8002efc <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8002ef6:	f06f 031b 	mvn.w	r3, #27
 8002efa:	e065      	b.n	8002fc8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4053      	eors	r3, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fbac 	bl	8000666 <lfs_tobe32>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8002f12:	f107 0214 	add.w	r2, r7, #20
 8002f16:	2304      	movs	r3, #4
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff ffa2 	bl	8002e64 <lfs_dir_commitprog>
 8002f20:	61f8      	str	r0, [r7, #28]
    if (err) {
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <lfs_dir_commitattr+0x5c>
        return err;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	e04d      	b.n	8002fc8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	db0c      	blt.n	8002f4c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	3b04      	subs	r3, #4
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7ff ff92 	bl	8002e64 <lfs_dir_commitprog>
 8002f40:	61f8      	str	r0, [r7, #28]
        if (err) {
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d039      	beq.n	8002fbc <lfs_dir_commitattr+0xec>
            return err;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	e03d      	b.n	8002fc8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	e02d      	b.n	8002fb2 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8002f56:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8002f5e:	1f1c      	subs	r4, r3, #4
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8002f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6a:	440a      	add	r2, r1
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	9103      	str	r1, [sp, #12]
 8002f70:	f107 0113 	add.w	r1, r7, #19
 8002f74:	9102      	str	r1, [sp, #8]
 8002f76:	9201      	str	r2, [sp, #4]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	2100      	movs	r1, #0
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7fd fbb7 	bl	80006f4 <lfs_bd_read>
 8002f86:	61f8      	str	r0, [r7, #28]
            if (err) {
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <lfs_dir_commitattr+0xc2>
                return err;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	e01a      	b.n	8002fc8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8002f92:	f107 0213 	add.w	r2, r7, #19
 8002f96:	2301      	movs	r3, #1
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff ff62 	bl	8002e64 <lfs_dir_commitprog>
 8002fa0:	61f8      	str	r0, [r7, #28]
            if (err) {
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <lfs_dir_commitattr+0xdc>
                return err;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	e00d      	b.n	8002fc8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	3301      	adds	r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	3b04      	subs	r3, #4
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3cc      	bcc.n	8002f56 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	609a      	str	r2, [r3, #8]
    return 0;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	372c      	adds	r7, #44	; 0x2c
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b097      	sub	sp, #92	; 0x5c
 8002fd4:	af04      	add	r7, sp, #16
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8002fde:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f7fd faaf 	bl	800054e <lfs_min>
 8002ff0:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f7fd faca 	bl	8000594 <lfs_alignup>
 8003000:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800300a:	e0fe      	b.n	800320a <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	3b04      	subs	r3, #4
 8003016:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fa97 	bl	800054e <lfs_min>
 8003020:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4413      	add	r3, r2
        lfs_off_t noff = (
 8003028:	3304      	adds	r3, #4
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 800302c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	429a      	cmp	r2, r3
 8003032:	d206      	bcs.n	8003042 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	3b14      	subs	r3, #20
 8003038:	4619      	mov	r1, r3
 800303a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800303c:	f7fd fa87 	bl	800054e <lfs_min>
 8003040:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 8003042:	23ff      	movs	r3, #255	; 0xff
 8003044:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8003046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	429a      	cmp	r2, r3
 800304c:	d35f      	bcc.n	800310e <lfs_dir_commitcrc+0x13e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800305e:	429a      	cmp	r2, r3
 8003060:	d855      	bhi.n	800310e <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8003062:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8003068:	6998      	ldr	r0, [r3, #24]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2201      	movs	r2, #1
 8003070:	9203      	str	r2, [sp, #12]
 8003072:	f107 021b 	add.w	r2, r7, #27
 8003076:	9202      	str	r2, [sp, #8]
 8003078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800307a:	9201      	str	r2, [sp, #4]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	4603      	mov	r3, r0
 8003080:	460a      	mov	r2, r1
 8003082:	2100      	movs	r1, #0
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fd fb35 	bl	80006f4 <lfs_bd_read>
 800308a:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <lfs_dir_commitcrc+0xce>
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003098:	d001      	beq.n	800309e <lfs_dir_commitcrc+0xce>
                return err;
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	e101      	b.n	80032a2 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030a2:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 80030ac:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 80030b2:	699c      	ldr	r4, [r3, #24]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	f107 0108 	add.w	r1, r7, #8
 80030be:	3104      	adds	r1, #4
 80030c0:	9103      	str	r1, [sp, #12]
 80030c2:	9202      	str	r2, [sp, #8]
 80030c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030c6:	9201      	str	r2, [sp, #4]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	4623      	mov	r3, r4
 80030cc:	4602      	mov	r2, r0
 80030ce:	2100      	movs	r1, #0
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7fd fcac 	bl	8000a2e <lfs_bd_crc>
 80030d6:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <lfs_dir_commitcrc+0x11a>
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80030e4:	d001      	beq.n	80030ea <lfs_dir_commitcrc+0x11a>
                    return err;
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	e0db      	b.n	80032a2 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f8bc 	bl	800126c <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 80030f4:	f107 0308 	add.w	r3, r7, #8
 80030f8:	4a6c      	ldr	r2, [pc, #432]	; (80032ac <lfs_dir_commitcrc+0x2dc>)
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fee7 	bl	8002ed0 <lfs_dir_commitattr>
 8003102:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <lfs_dir_commitcrc+0x13e>
                    return err;
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	e0c9      	b.n	80032a2 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800310e:	7efb      	ldrb	r3, [r7, #27]
 8003110:	43db      	mvns	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	09db      	lsrs	r3, r3, #7
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	051a      	lsls	r2, r3, #20
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003124:	1acb      	subs	r3, r1, r3
 8003126:	3b04      	subs	r3, #4
 8003128:	4313      	orrs	r3, r2
 800312a:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800312e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	4053      	eors	r3, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd fa92 	bl	8000666 <lfs_tobe32>
 8003142:	4603      	mov	r3, r0
 8003144:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f107 0110 	add.w	r1, r7, #16
 800314e:	2204      	movs	r2, #4
 8003150:	4618      	mov	r0, r3
 8003152:	f004 f939 	bl	80073c8 <lfs_crc>
 8003156:	4602      	mov	r2, r0
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd fa69 	bl	8000638 <lfs_tole32>
 8003166:	4603      	mov	r3, r0
 8003168:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f103 0010 	add.w	r0, r3, #16
 8003170:	687c      	ldr	r4, [r7, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	6852      	ldr	r2, [r2, #4]
 800317a:	2108      	movs	r1, #8
 800317c:	9103      	str	r1, [sp, #12]
 800317e:	f107 0110 	add.w	r1, r7, #16
 8003182:	9102      	str	r1, [sp, #8]
 8003184:	9201      	str	r2, [sp, #4]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2300      	movs	r3, #0
 800318a:	4622      	mov	r2, r4
 800318c:	4601      	mov	r1, r0
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd fd42 	bl	8000c18 <lfs_bd_prog>
 8003194:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <lfs_dir_commitcrc+0x1d0>
            return err;
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	e080      	b.n	80032a2 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80031a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031b8:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 80031ba:	7efb      	ldrb	r3, [r7, #27]
 80031bc:	43db      	mvns	r3, r3
 80031be:	061b      	lsls	r3, r3, #24
 80031c0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	405a      	eors	r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f04f 32ff 	mov.w	r2, #4294967295
 80031d2:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 80031d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	429a      	cmp	r2, r3
 80031da:	d208      	bcs.n	80031ee <lfs_dir_commitcrc+0x21e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	4413      	add	r3, r2
 80031e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d30d      	bcc.n	800320a <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f103 0110 	add.w	r1, r3, #16
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	2300      	movs	r3, #0
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fd fcd9 	bl	8000bb0 <lfs_bd_sync>
 80031fe:	6238      	str	r0, [r7, #32]
            if (err) {
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <lfs_dir_commitcrc+0x23a>
                return err;
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	e04b      	b.n	80032a2 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003210:	429a      	cmp	r2, r3
 8003212:	f63f aefb 	bhi.w	800300c <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003226:	1d1c      	adds	r4, r3, #4
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800322e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003230:	1a8a      	subs	r2, r1, r2
 8003232:	f107 011c 	add.w	r1, r7, #28
 8003236:	9103      	str	r1, [sp, #12]
 8003238:	9202      	str	r2, [sp, #8]
 800323a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800323c:	9201      	str	r2, [sp, #4]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	4623      	mov	r3, r4
 8003242:	4602      	mov	r2, r0
 8003244:	2100      	movs	r1, #0
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fbf1 	bl	8000a2e <lfs_bd_crc>
 800324c:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <lfs_dir_commitcrc+0x288>
        return err;
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	e024      	b.n	80032a2 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800325c:	429a      	cmp	r2, r3
 800325e:	d002      	beq.n	8003266 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8003260:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003264:	e01d      	b.n	80032a2 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f107 021c 	add.w	r2, r7, #28
 8003270:	9203      	str	r2, [sp, #12]
 8003272:	2204      	movs	r2, #4
 8003274:	9202      	str	r2, [sp, #8]
 8003276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003278:	9201      	str	r2, [sp, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2304      	movs	r3, #4
 800327e:	460a      	mov	r2, r1
 8003280:	2100      	movs	r1, #0
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd fbd3 	bl	8000a2e <lfs_bd_crc>
 8003288:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <lfs_dir_commitcrc+0x2c4>
        return err;
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	e006      	b.n	80032a2 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 800329a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800329e:	e000      	b.n	80032a2 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	374c      	adds	r7, #76	; 0x4c
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd90      	pop	{r4, r7, pc}
 80032aa:	bf00      	nop
 80032ac:	5ffffc08 	.word	0x5ffffc08

080032b0 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af04      	add	r7, sp, #16
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e016      	b.n	80032ee <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3301      	adds	r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	bfb8      	it	lt
 80032cc:	425b      	neglt	r3, r3
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe f98a 	bl	80015f0 <lfs_alloc>
 80032dc:	60f8      	str	r0, [r7, #12]
        if (err) {
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <lfs_dir_alloc+0x38>
            return err;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	e058      	b.n	800339a <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	3301      	adds	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	dde5      	ble.n	80032c0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8003304:	2004      	movs	r0, #4
 8003306:	9003      	str	r0, [sp, #12]
 8003308:	9202      	str	r2, [sp, #8]
 800330a:	2200      	movs	r2, #0
 800330c:	9201      	str	r2, [sp, #4]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2304      	movs	r3, #4
 8003312:	460a      	mov	r2, r1
 8003314:	2100      	movs	r1, #0
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fd f9ec 	bl	80006f4 <lfs_bd_read>
 800331c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f97e 	bl	8000624 <lfs_fromle32>
 8003328:	4602      	mov	r2, r0
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <lfs_dir_alloc+0x90>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800333a:	d001      	beq.n	8003340 <lfs_dir_alloc+0x90>
        return err;
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	e02c      	b.n	800339a <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	dd0e      	ble.n	8003368 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	3301      	adds	r3, #1
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f7fd f919 	bl	8000594 <lfs_alignup>
 8003362:	4602      	mov	r2, r0
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2204      	movs	r2, #4
 800336c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f04f 32ff 	mov.w	r2, #4294967295
 8003382:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f04f 32ff 	mov.w	r2, #4294967295
 800338a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2200      	movs	r2, #0
 8003396:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b092      	sub	sp, #72	; 0x48
 80033a6:	af04      	add	r7, sp, #16
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80033b0:	f107 0310 	add.w	r3, r7, #16
 80033b4:	4619      	mov	r1, r3
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7ff ff7a 	bl	80032b0 <lfs_dir_alloc>
 80033bc:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80033be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <lfs_dir_split+0x26>
        return err;
 80033c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c6:	e03c      	b.n	8003442 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	7ddb      	ldrb	r3, [r3, #23]
 80033cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80033dc:	f107 0110 	add.w	r1, r7, #16
 80033e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033e4:	9302      	str	r3, [sp, #8]
 80033e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f879 	bl	80034ec <lfs_dir_compact>
 80033fa:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da01      	bge.n	8003406 <lfs_dir_split+0x64>
        return res;
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	e01d      	b.n	8003442 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2201      	movs	r2, #1
 8003416:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3320      	adds	r3, #32
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f7fd fd05 	bl	8000e30 <lfs_pair_cmp>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <lfs_dir_split+0x9e>
 800342c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3738      	adds	r7, #56	; 0x38
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800345a:	68b8      	ldr	r0, [r7, #8]
 800345c:	f7fd fdf1 	bl	8001042 <lfs_tag_dsize>
 8003460:	4602      	mov	r2, r0
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	441a      	add	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	601a      	str	r2, [r3, #0]
    return 0;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	f7ff fd1d 	bl	8002ed0 <lfs_dir_commitattr>
 8003496:	4603      	mov	r3, r0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	dd11      	ble.n	80034d8 <lfs_dir_needsrelocation+0x38>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	3301      	adds	r3, #1
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034c0:	3201      	adds	r2, #1
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80034ca:	fb02 f201 	mul.w	r2, r2, r1
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <lfs_dir_needsrelocation+0x38>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <lfs_dir_needsrelocation+0x3a>
 80034d8:	2300      	movs	r3, #0
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
	...

080034ec <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b0a4      	sub	sp, #144	; 0x90
 80034f0:	af0a      	add	r7, sp, #40	; 0x28
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7ff ffcc 	bl	80034a0 <lfs_dir_needsrelocation>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003518:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00e      	beq.n	800353e <lfs_dir_compact+0x52>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2200      	movs	r2, #0
 8003524:	657a      	str	r2, [r7, #84]	; 0x54
 8003526:	2201      	movs	r2, #1
 8003528:	65ba      	str	r2, [r7, #88]	; 0x58
 800352a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd fc7d 	bl	8000e30 <lfs_pair_cmp>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	f040 8155 	bne.w	80037e8 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003544:	2300      	movs	r3, #0
 8003546:	643b      	str	r3, [r7, #64]	; 0x40
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	647b      	str	r3, [r7, #68]	; 0x44
 800354e:	f04f 33ff 	mov.w	r3, #4294967295
 8003552:	64bb      	str	r3, [r7, #72]	; 0x48
 8003554:	2300      	movs	r3, #0
 8003556:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <lfs_dir_compact+0x80>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003568:	3b08      	subs	r3, #8
 800356a:	e003      	b.n	8003574 <lfs_dir_compact+0x88>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003574:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4619      	mov	r1, r3
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f7fd fbf7 	bl	8000d70 <lfs_bd_erase>
 8003582:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800358a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003590:	f000 812c 	beq.w	80037ec <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003596:	e187      	b.n	80038a8 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fd f84b 	bl	8000638 <lfs_tole32>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 80035ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80035b2:	2304      	movs	r3, #4
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff fc55 	bl	8002e64 <lfs_dir_commitprog>
 80035ba:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd f82f 	bl	8000624 <lfs_fromle32>
 80035c6:	4602      	mov	r2, r0
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	609a      	str	r2, [r3, #8]
            if (err) {
 80035cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80035d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80035d8:	f000 810a 	beq.w	80037f0 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80035dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035de:	e163      	b.n	80038a8 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80035e0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80035e4:	425b      	negs	r3, r3
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	637a      	str	r2, [r7, #52]	; 0x34
 80035ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80035f2:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80035f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80035f8:	9208      	str	r2, [sp, #32]
 80035fa:	4aad      	ldr	r2, [pc, #692]	; (80038b0 <lfs_dir_compact+0x3c4>)
 80035fc:	9207      	str	r2, [sp, #28]
 80035fe:	9306      	str	r3, [sp, #24]
 8003600:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003604:	9305      	str	r3, [sp, #20]
 8003606:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800360a:	9304      	str	r3, [sp, #16]
 800360c:	2300      	movs	r3, #0
 800360e:	9303      	str	r3, [sp, #12]
 8003610:	4ba8      	ldr	r3, [pc, #672]	; (80038b4 <lfs_dir_compact+0x3c8>)
 8003612:	9302      	str	r3, [sp, #8]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
 8003620:	2200      	movs	r2, #0
 8003622:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f7fe fab3 	bl	8001b90 <lfs_dir_traverse>
 800362a:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 800362c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d006      	beq.n	8003640 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8003632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003634:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003638:	f000 80dc 	beq.w	80037f4 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 800363c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800363e:	e133      	b.n	80038a8 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3318      	adds	r3, #24
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fbd9 	bl	8000dfc <lfs_pair_isnull>
 800364a:	4603      	mov	r3, r0
 800364c:	f083 0301 	eor.w	r3, r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d022      	beq.n	800369c <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3318      	adds	r3, #24
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fc57 	bl	8000f0e <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	7ddb      	ldrb	r3, [r3, #23]
 8003664:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003668:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800366a:	4a93      	ldr	r2, [pc, #588]	; (80038b8 <lfs_dir_compact+0x3cc>)
 800366c:	431a      	orrs	r2, r3
                        dir->tail);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003672:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff fc2a 	bl	8002ed0 <lfs_dir_commitattr>
 800367c:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	3318      	adds	r3, #24
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fc29 	bl	8000eda <lfs_pair_fromle32>
                if (err) {
 8003688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d006      	beq.n	800369c <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800368e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003690:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003694:	f000 80b0 	beq.w	80037f8 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369a:	e105      	b.n	80038a8 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800369c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80036a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036ac:	f083 0301 	eor.w	r3, r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d011      	beq.n	80036da <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80036bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd fcd1 	bl	800106a <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80036ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd fcc8 	bl	800106a <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80036e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fcbf 	bl	800106a <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036f2:	f023 0303 	bic.w	r3, r3, #3
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80036f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036fc:	461a      	mov	r2, r3
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff fa39 	bl	8002b78 <lfs_dir_getgstate>
 8003706:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <lfs_dir_compact+0x226>
                return err;
 800370e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003710:	e0ca      	b.n	80038a8 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003716:	4618      	mov	r0, r3
 8003718:	f7fd fccb 	bl	80010b2 <lfs_gstate_iszero>
 800371c:	4603      	mov	r3, r0
 800371e:	f083 0301 	eor.w	r3, r3, #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d016      	beq.n	8003756 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8003728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fd65 	bl	80011fc <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003736:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800373a:	4a60      	ldr	r2, [pc, #384]	; (80038bc <lfs_dir_compact+0x3d0>)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff fbc7 	bl	8002ed0 <lfs_dir_commitattr>
 8003742:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800374a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003750:	d054      	beq.n	80037fc <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8003752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003754:	e0a8      	b.n	80038a8 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8003756:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800375a:	4619      	mov	r1, r3
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff fc37 	bl	8002fd0 <lfs_dir_commitcrc>
 8003762:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800376a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003770:	d046      	beq.n	8003800 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003774:	e098      	b.n	80038a8 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800377c:	6992      	ldr	r2, [r2, #24]
 800377e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003782:	fb02 f201 	mul.w	r2, r2, r1
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d006      	beq.n	800379a <lfs_dir_compact+0x2ae>
 800378c:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <lfs_dir_compact+0x3d4>)
 800378e:	4a4d      	ldr	r2, [pc, #308]	; (80038c4 <lfs_dir_compact+0x3d8>)
 8003790:	f640 010f 	movw	r1, #2063	; 0x80f
 8003794:	484c      	ldr	r0, [pc, #304]	; (80038c8 <lfs_dir_compact+0x3dc>)
 8003796:	f00d fbd1 	bl	8010f3c <__assert_func>
            lfs_pair_swap(dir->pair);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4618      	mov	r0, r3
 800379e:	f7fd fb19 	bl	8000dd4 <lfs_pair_swap>
            dir->count = end - begin;
 80037a2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80037a6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80037b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80037b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3348      	adds	r3, #72	; 0x48
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80037ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80037ce:	f083 0301 	eor.w	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d064      	beq.n	80038a2 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	333c      	adds	r3, #60	; 0x3c
 80037de:	3230      	adds	r2, #48	; 0x30
 80037e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80037e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80037e6:	e05c      	b.n	80038a2 <lfs_dir_compact+0x3b6>
        goto relocate;
 80037e8:	bf00      	nop
 80037ea:	e00a      	b.n	8003802 <lfs_dir_compact+0x316>
                    goto relocate;
 80037ec:	bf00      	nop
 80037ee:	e008      	b.n	8003802 <lfs_dir_compact+0x316>
                    goto relocate;
 80037f0:	bf00      	nop
 80037f2:	e006      	b.n	8003802 <lfs_dir_compact+0x316>
                    goto relocate;
 80037f4:	bf00      	nop
 80037f6:	e004      	b.n	8003802 <lfs_dir_compact+0x316>
                        goto relocate;
 80037f8:	bf00      	nop
 80037fa:	e002      	b.n	8003802 <lfs_dir_compact+0x316>
                        goto relocate;
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <lfs_dir_compact+0x316>
                    goto relocate;
 8003800:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3310      	adds	r3, #16
 800380c:	4619      	mov	r1, r3
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f7fc ff4c 	bl	80006ac <lfs_cache_drop>
        if (!tired) {
 8003814:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003818:	f083 0301 	eor.w	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4a29      	ldr	r2, [pc, #164]	; (80038cc <lfs_dir_compact+0x3e0>)
 8003828:	9200      	str	r2, [sp, #0]
 800382a:	f640 0221 	movw	r2, #2081	; 0x821
 800382e:	4926      	ldr	r1, [pc, #152]	; (80038c8 <lfs_dir_compact+0x3dc>)
 8003830:	4827      	ldr	r0, [pc, #156]	; (80038d0 <lfs_dir_compact+0x3e4>)
 8003832:	f00d ffa5 	bl	8011780 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2200      	movs	r2, #0
 800383a:	617a      	str	r2, [r7, #20]
 800383c:	2201      	movs	r2, #1
 800383e:	61ba      	str	r2, [r7, #24]
 8003840:	f107 0214 	add.w	r2, r7, #20
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd faf2 	bl	8000e30 <lfs_pair_cmp>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <lfs_dir_compact+0x3e0>)
 8003858:	9200      	str	r2, [sp, #0]
 800385a:	f640 0226 	movw	r2, #2086	; 0x826
 800385e:	491a      	ldr	r1, [pc, #104]	; (80038c8 <lfs_dir_compact+0x3dc>)
 8003860:	481c      	ldr	r0, [pc, #112]	; (80038d4 <lfs_dir_compact+0x3e8>)
 8003862:	f00d ff8d 	bl	8011780 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003866:	f06f 031b 	mvn.w	r3, #27
 800386a:	e01d      	b.n	80038a8 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	3304      	adds	r3, #4
 8003870:	4619      	mov	r1, r3
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7fd febc 	bl	80015f0 <lfs_alloc>
 8003878:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800387a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00c      	beq.n	800389a <lfs_dir_compact+0x3ae>
 8003880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003882:	f113 0f1c 	cmn.w	r3, #28
 8003886:	d106      	bne.n	8003896 <lfs_dir_compact+0x3aa>
 8003888:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800388c:	f083 0301 	eor.w	r3, r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <lfs_dir_compact+0x3ae>
            return err;
 8003896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003898:	e006      	b.n	80038a8 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 80038a0:	e64d      	b.n	800353e <lfs_dir_compact+0x52>
        break;
 80038a2:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 80038a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3768      	adds	r7, #104	; 0x68
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	08003477 	.word	0x08003477
 80038b4:	400ffc00 	.word	0x400ffc00
 80038b8:	000ffc08 	.word	0x000ffc08
 80038bc:	7ffffc0c 	.word	0x7ffffc0c
 80038c0:	080121b8 	.word	0x080121b8
 80038c4:	08012d54 	.word	0x08012d54
 80038c8:	08012054 	.word	0x08012054
 80038cc:	08012160 	.word	0x08012160
 80038d0:	080121e0 	.word	0x080121e0
 80038d4:	08012204 	.word	0x08012204

080038d8 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b097      	sub	sp, #92	; 0x5c
 80038dc:	af0a      	add	r7, sp, #40	; 0x28
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80038e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80038ec:	e058      	b.n	80039a0 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f8:	b292      	uxth	r2, r2
 80038fa:	4252      	negs	r2, r2
 80038fc:	b292      	uxth	r2, r2
 80038fe:	b212      	sxth	r2, r2
 8003900:	f107 0118 	add.w	r1, r7, #24
 8003904:	9108      	str	r1, [sp, #32]
 8003906:	4979      	ldr	r1, [pc, #484]	; (8003aec <lfs_dir_splittingcompact+0x214>)
 8003908:	9107      	str	r1, [sp, #28]
 800390a:	9206      	str	r2, [sp, #24]
 800390c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003910:	9205      	str	r2, [sp, #20]
 8003912:	9304      	str	r3, [sp, #16]
 8003914:	2300      	movs	r3, #0
 8003916:	9303      	str	r3, [sp, #12]
 8003918:	4b75      	ldr	r3, [pc, #468]	; (8003af0 <lfs_dir_splittingcompact+0x218>)
 800391a:	9302      	str	r3, [sp, #8]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	f04f 33ff 	mov.w	r3, #4294967295
 8003928:	2200      	movs	r2, #0
 800392a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7fe f92f 	bl	8001b90 <lfs_dir_traverse>
 8003932:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <lfs_dir_splittingcompact+0x66>
                return err;
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	e0d2      	b.n	8003ae4 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 800393e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2bfe      	cmp	r3, #254	; 0xfe
 8003948:	d822      	bhi.n	8003990 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800394e:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003950:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    && size <= lfs_min(
 800395a:	2b00      	cmp	r3, #0
 800395c:	d004      	beq.n	8003968 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    && size <= lfs_min(
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	e003      	b.n	8003970 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800396c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 800396e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 8003974:	6992      	ldr	r2, [r2, #24]
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f7fc fe0b 	bl	8000594 <lfs_alignup>
 800397e:	4603      	mov	r3, r0
 8003980:	4619      	mov	r1, r3
 8003982:	4620      	mov	r0, r4
 8003984:	f7fc fde3 	bl	800054e <lfs_min>
 8003988:	4602      	mov	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	429a      	cmp	r2, r3
 800398e:	d20e      	bcs.n	80039ae <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003990:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399c:	4413      	add	r3, r2
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80039a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d8a0      	bhi.n	80038ee <lfs_dir_splittingcompact+0x16>
 80039ac:	e000      	b.n	80039b0 <lfs_dir_splittingcompact+0xd8>
                break;
 80039ae:	bf00      	nop
        }

        if (split == begin) {
 80039b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80039b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d02d      	beq.n	8003a16 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80039c2:	9202      	str	r2, [sp, #8]
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7ff fce6 	bl	80033a2 <lfs_dir_split>
 80039d6:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <lfs_dir_splittingcompact+0x112>
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	f113 0f1c 	cmn.w	r3, #28
 80039e4:	d001      	beq.n	80039ea <lfs_dir_splittingcompact+0x112>
            return err;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	e07c      	b.n	8003ae4 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00e      	beq.n	8003a0e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	493e      	ldr	r1, [pc, #248]	; (8003af4 <lfs_dir_splittingcompact+0x21c>)
 80039fa:	9101      	str	r1, [sp, #4]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	f640 0279 	movw	r2, #2169	; 0x879
 8003a04:	493c      	ldr	r1, [pc, #240]	; (8003af8 <lfs_dir_splittingcompact+0x220>)
 8003a06:	483d      	ldr	r0, [pc, #244]	; (8003afc <lfs_dir_splittingcompact+0x224>)
 8003a08:	f00d feba 	bl	8011780 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003a0c:	e004      	b.n	8003a18 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003a14:	e767      	b.n	80038e6 <lfs_dir_splittingcompact+0xe>
            break;
 8003a16:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff fd40 	bl	80034a0 <lfs_dir_needsrelocation>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04f      	beq.n	8003ac6 <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	613a      	str	r2, [r7, #16]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	617a      	str	r2, [r7, #20]
 8003a30:	f107 0210 	add.w	r2, r7, #16
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd f9fa 	bl	8000e30 <lfs_pair_cmp>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d141      	bne.n	8003ac6 <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f003 fb90 	bl	8007168 <lfs_fs_size_>
 8003a48:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	da01      	bge.n	8003a54 <lfs_dir_splittingcompact+0x17c>
            return size;
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	e047      	b.n	8003ae4 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	1ad2      	subs	r2, r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a60:	08db      	lsrs	r3, r3, #3
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d92f      	bls.n	8003ac6 <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <lfs_dir_splittingcompact+0x21c>)
 8003a6c:	9200      	str	r2, [sp, #0]
 8003a6e:	f640 028f 	movw	r2, #2191	; 0x88f
 8003a72:	4921      	ldr	r1, [pc, #132]	; (8003af8 <lfs_dir_splittingcompact+0x220>)
 8003a74:	4822      	ldr	r0, [pc, #136]	; (8003b00 <lfs_dir_splittingcompact+0x228>)
 8003a76:	f00d fe83 	bl	8011780 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003a7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f7ff fc86 	bl	80033a2 <lfs_dir_split>
 8003a96:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <lfs_dir_splittingcompact+0x1d2>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f113 0f1c 	cmn.w	r3, #28
 8003aa4:	d001      	beq.n	8003aaa <lfs_dir_splittingcompact+0x1d2>
                return err;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	e01c      	b.n	8003ae4 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003ab0:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <lfs_dir_splittingcompact+0x21c>)
 8003ab2:	f640 0299 	movw	r2, #2201	; 0x899
 8003ab6:	4910      	ldr	r1, [pc, #64]	; (8003af8 <lfs_dir_splittingcompact+0x220>)
 8003ab8:	4812      	ldr	r0, [pc, #72]	; (8003b04 <lfs_dir_splittingcompact+0x22c>)
 8003aba:	f00d fe61 	bl	8011780 <iprintf>
 8003abe:	e002      	b.n	8003ac6 <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003ac6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003aca:	9302      	str	r3, [sp, #8]
 8003acc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f7ff fd05 	bl	80034ec <lfs_dir_compact>
 8003ae2:	4603      	mov	r3, r0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3734      	adds	r7, #52	; 0x34
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd90      	pop	{r4, r7, pc}
 8003aec:	0800344b 	.word	0x0800344b
 8003af0:	400ffc00 	.word	0x400ffc00
 8003af4:	08012160 	.word	0x08012160
 8003af8:	08012054 	.word	0x08012054
 8003afc:	0801223c 	.word	0x0801223c
 8003b00:	0801226c 	.word	0x0801226c
 8003b04:	0801229c 	.word	0x0801229c

08003b08 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b0a6      	sub	sp, #152	; 0x98
 8003b0c:	af0a      	add	r7, sp, #40	; 0x28
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003b20:	2300      	movs	r3, #0
 8003b22:	667b      	str	r3, [r7, #100]	; 0x64
 8003b24:	e06d      	b.n	8003c02 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fd fa43 	bl	8000fbc <lfs_tag_type3>
 8003b36:	4603      	mov	r3, r0
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f240 4301 	movw	r3, #1025	; 0x401
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d106      	bne.n	8003b50 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	8a9b      	ldrh	r3, [r3, #20]
 8003b46:	3301      	adds	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	829a      	strh	r2, [r3, #20]
 8003b4e:	e055      	b.n	8003bfc <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd fa2e 	bl	8000fbc <lfs_tag_type3>
 8003b60:	4603      	mov	r3, r0
 8003b62:	461a      	mov	r2, r3
 8003b64:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d114      	bne.n	8003b96 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	8a9b      	ldrh	r3, [r3, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <lfs_dir_relocatingcommit+0x7a>
 8003b74:	4ba4      	ldr	r3, [pc, #656]	; (8003e08 <lfs_dir_relocatingcommit+0x300>)
 8003b76:	4aa5      	ldr	r2, [pc, #660]	; (8003e0c <lfs_dir_relocatingcommit+0x304>)
 8003b78:	f640 01b2 	movw	r1, #2226	; 0x8b2
 8003b7c:	48a4      	ldr	r0, [pc, #656]	; (8003e10 <lfs_dir_relocatingcommit+0x308>)
 8003b7e:	f00d f9dd 	bl	8010f3c <__assert_func>
            dir->count -= 1;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	8a9b      	ldrh	r3, [r3, #20]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003b94:	e032      	b.n	8003bfc <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003b96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fd f9ed 	bl	8000f80 <lfs_tag_type1>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bac:	d126      	bne.n	8003bfc <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003bbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd f9fe 	bl	8000fda <lfs_tag_chunk>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	3318      	adds	r3, #24
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd f96f 	bl	8000eda <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bfe:	3301      	adds	r3, #1
 8003c00:	667b      	str	r3, [r7, #100]	; 0x64
 8003c02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	db8c      	blt.n	8003b26 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003c0c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d02b      	beq.n	8003c6c <lfs_dir_relocatingcommit+0x164>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	8a9b      	ldrh	r3, [r3, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d127      	bne.n	8003c6c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <lfs_dir_relocatingcommit+0x12a>
 8003c24:	4b7b      	ldr	r3, [pc, #492]	; (8003e14 <lfs_dir_relocatingcommit+0x30c>)
 8003c26:	4a79      	ldr	r2, [pc, #484]	; (8003e0c <lfs_dir_relocatingcommit+0x304>)
 8003c28:	f640 01bf 	movw	r1, #2239	; 0x8bf
 8003c2c:	4878      	ldr	r0, [pc, #480]	; (8003e10 <lfs_dir_relocatingcommit+0x308>)
 8003c2e:	f00d f985 	bl	8010f3c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003c38:	4619      	mov	r1, r3
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f002 fdf2 	bl	8006824 <lfs_fs_pred>
 8003c40:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8003c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <lfs_dir_relocatingcommit+0x14c>
 8003c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c4a:	f113 0f02 	cmn.w	r3, #2
 8003c4e:	d001      	beq.n	8003c54 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8003c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c52:	e20f      	b.n	8004074 <lfs_dir_relocatingcommit+0x56c>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8003c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c56:	f113 0f02 	cmn.w	r3, #2
 8003c5a:	d007      	beq.n	8003c6c <lfs_dir_relocatingcommit+0x164>
 8003c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c60:	7ddb      	ldrb	r3, [r3, #23]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8003c66:	2302      	movs	r3, #2
 8003c68:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8003c6a:	e121      	b.n	8003eb0 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	7d9b      	ldrb	r3, [r3, #22]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80fb 	beq.w	8003e6c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8003c7a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003c92:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <lfs_dir_relocatingcommit+0x1a0>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca4:	3b08      	subs	r3, #8
 8003ca6:	e003      	b.n	8003cb0 <lfs_dir_relocatingcommit+0x1a8>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8003cb0:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3318      	adds	r3, #24
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd f929 	bl	8000f0e <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8003cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cd2:	9308      	str	r3, [sp, #32]
 8003cd4:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <lfs_dir_relocatingcommit+0x310>)
 8003cd6:	9307      	str	r3, [sp, #28]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9306      	str	r3, [sp, #24]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9305      	str	r3, [sp, #20]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9304      	str	r3, [sp, #16]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9303      	str	r3, [sp, #12]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	9302      	str	r3, [sp, #8]
 8003cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7fd ff48 	bl	8001b90 <lfs_dir_traverse>
 8003d00:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3318      	adds	r3, #24
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd f8e7 	bl	8000eda <lfs_pair_fromle32>
        if (err) {
 8003d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d14:	f113 0f1c 	cmn.w	r3, #28
 8003d18:	f000 80aa 	beq.w	8003e70 <lfs_dir_relocatingcommit+0x368>
 8003d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003d22:	f000 80a5 	beq.w	8003e70 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8003d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d28:	e1a4      	b.n	8004074 <lfs_dir_relocatingcommit+0x56c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8003d2a:	f107 031c 	add.w	r3, r7, #28
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d3c:	f107 031c 	add.w	r3, r7, #28
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd f991 	bl	800106a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003d4e:	f107 031c 	add.w	r3, r7, #28
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd f988 	bl	800106a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003d60:	f107 031c 	add.w	r3, r7, #28
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd f97f 	bl	800106a <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8003d78:	f107 031c 	add.w	r3, r7, #28
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fd f998 	bl	80010b2 <lfs_gstate_iszero>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f083 0301 	eor.w	r3, r3, #1
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d027      	beq.n	8003dde <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003d8e:	f107 031c 	add.w	r3, r7, #28
 8003d92:	461a      	mov	r2, r3
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7fe feee 	bl	8002b78 <lfs_dir_getgstate>
 8003d9c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8003da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da6:	e165      	b.n	8004074 <lfs_dir_relocatingcommit+0x56c>
            }

            lfs_gstate_tole32(&delta);
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fd fa25 	bl	80011fc <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8003db2:	f107 031c 	add.w	r3, r7, #28
 8003db6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <lfs_dir_relocatingcommit+0x314>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f7ff f887 	bl	8002ed0 <lfs_dir_commitattr>
 8003dc2:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8003dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dcc:	f113 0f1c 	cmn.w	r3, #28
 8003dd0:	d050      	beq.n	8003e74 <lfs_dir_relocatingcommit+0x36c>
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003dd8:	d04c      	beq.n	8003e74 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8003dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ddc:	e14a      	b.n	8004074 <lfs_dir_relocatingcommit+0x56c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8003dde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003de2:	4619      	mov	r1, r3
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff f8f3 	bl	8002fd0 <lfs_dir_commitcrc>
 8003dea:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8003dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df4:	f113 0f1c 	cmn.w	r3, #28
 8003df8:	d03e      	beq.n	8003e78 <lfs_dir_relocatingcommit+0x370>
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003e00:	d03a      	beq.n	8003e78 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8003e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e04:	e136      	b.n	8004074 <lfs_dir_relocatingcommit+0x56c>
 8003e06:	bf00      	nop
 8003e08:	080122c8 	.word	0x080122c8
 8003e0c:	08012d64 	.word	0x08012d64
 8003e10:	08012054 	.word	0x08012054
 8003e14:	080122d8 	.word	0x080122d8
 8003e18:	08003477 	.word	0x08003477
 8003e1c:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e26:	6992      	ldr	r2, [r2, #24]
 8003e28:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e2c:	fb02 f201 	mul.w	r2, r2, r1
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <lfs_dir_relocatingcommit+0x33c>
 8003e36:	4b91      	ldr	r3, [pc, #580]	; (800407c <lfs_dir_relocatingcommit+0x574>)
 8003e38:	4a91      	ldr	r2, [pc, #580]	; (8004080 <lfs_dir_relocatingcommit+0x578>)
 8003e3a:	f640 1109 	movw	r1, #2313	; 0x909
 8003e3e:	4891      	ldr	r0, [pc, #580]	; (8004084 <lfs_dir_relocatingcommit+0x57c>)
 8003e40:	f00d f87c 	bl	8010f3c <__assert_func>
        dir->off = commit.off;
 8003e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8003e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	333c      	adds	r3, #60	; 0x3c
 8003e56:	3230      	adds	r2, #48	; 0x30
 8003e58:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3348      	adds	r3, #72	; 0x48
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	e021      	b.n	8003eb0 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8003e6c:	bf00      	nop
 8003e6e:	e004      	b.n	8003e7a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8003e70:	bf00      	nop
 8003e72:	e002      	b.n	8003e7a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8003e74:	bf00      	nop
 8003e76:	e000      	b.n	8003e7a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8003e78:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3310      	adds	r3, #16
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7fc fc13 	bl	80006ac <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	8a9b      	ldrh	r3, [r3, #20]
 8003e8a:	9302      	str	r3, [sp, #8]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff fd1b 	bl	80038d8 <lfs_dir_splittingcompact>
 8003ea2:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8003ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da01      	bge.n	8003eae <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8003eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eac:	e0e2      	b.n	8004074 <lfs_dir_relocatingcommit+0x56c>
    }

    goto fixmlist;
 8003eae:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ec2:	e0d2      	b.n	800406a <lfs_dir_relocatingcommit+0x562>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8003ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fc ffae 	bl	8000e30 <lfs_pair_cmp>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 80c4 	bne.w	8004064 <lfs_dir_relocatingcommit+0x55c>
            d->m = *dir;
 8003edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	f103 0408 	add.w	r4, r3, #8
 8003ee4:	4615      	mov	r5, r2
 8003ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003eea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003eee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8003ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	f000 80a9 	beq.w	8004050 <lfs_dir_relocatingcommit+0x548>
                for (int i = 0; i < attrcount; i++) {
 8003efe:	2300      	movs	r3, #0
 8003f00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f02:	e07b      	b.n	8003ffc <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fd f854 	bl	8000fbc <lfs_tag_type3>
 8003f14:	4603      	mov	r3, r0
 8003f16:	461a      	mov	r2, r3
 8003f18:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d115      	bne.n	8003f4c <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8003f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f22:	889c      	ldrh	r4, [r3, #4]
 8003f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fd f86c 	bl	800100c <lfs_tag_id>
 8003f34:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003f36:	429c      	cmp	r4, r3
 8003f38:	d108      	bne.n	8003f4c <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8003f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f40:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8003f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	e054      	b.n	8003ff6 <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	4413      	add	r3, r2
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fd f830 	bl	8000fbc <lfs_tag_type3>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d11c      	bne.n	8003fa2 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8003f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f6a:	889c      	ldrh	r4, [r3, #4]
 8003f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fd f848 	bl	800100c <lfs_tag_id>
 8003f7c:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003f7e:	429c      	cmp	r4, r3
 8003f80:	d90f      	bls.n	8003fa2 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8003f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f84:	889b      	ldrh	r3, [r3, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f8c:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8003f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f90:	799b      	ldrb	r3, [r3, #6]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d12f      	bne.n	8003ff6 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8003f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	1e5a      	subs	r2, r3, #1
 8003f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8003fa0:	e029      	b.n	8003ff6 <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8003fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	4413      	add	r3, r2
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fd f805 	bl	8000fbc <lfs_tag_type3>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f240 4301 	movw	r3, #1025	; 0x401
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d11b      	bne.n	8003ff6 <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8003fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc0:	889c      	ldrh	r4, [r3, #4]
 8003fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	4413      	add	r3, r2
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fd f81d 	bl	800100c <lfs_tag_id>
 8003fd2:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8003fd4:	429c      	cmp	r4, r3
 8003fd6:	d30e      	bcc.n	8003ff6 <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8003fd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fda:	889b      	ldrh	r3, [r3, #4]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe2:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8003fe4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fe6:	799b      	ldrb	r3, [r3, #6]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d104      	bne.n	8003ff6 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8003fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff4:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8003ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ffc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004002:	429a      	cmp	r2, r3
 8004004:	f6ff af7e 	blt.w	8003f04 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8004008:	e022      	b.n	8004050 <lfs_dir_relocatingcommit+0x548>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 800400a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400c:	f103 0220 	add.w	r2, r3, #32
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3320      	adds	r3, #32
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f7fc ff0a 	bl	8000e30 <lfs_pair_cmp>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <lfs_dir_relocatingcommit+0x52a>
                    d->id -= d->m.count;
 8004022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004024:	889a      	ldrh	r2, [r3, #4]
 8004026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004028:	8b9b      	ldrh	r3, [r3, #28]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	b29a      	uxth	r2, r3
 800402e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004030:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8004032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004034:	f103 0108 	add.w	r1, r3, #8
 8004038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800403a:	3320      	adds	r3, #32
 800403c:	461a      	mov	r2, r3
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7fe fd7e 	bl	8002b40 <lfs_dir_fetch>
 8004044:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8004046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <lfs_dir_relocatingcommit+0x548>
                    return err;
 800404c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404e:	e011      	b.n	8004074 <lfs_dir_relocatingcommit+0x56c>
            while (d->id >= d->m.count && d->m.split) {
 8004050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004052:	889a      	ldrh	r2, [r3, #4]
 8004054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004056:	8b9b      	ldrh	r3, [r3, #28]
 8004058:	429a      	cmp	r2, r3
 800405a:	d303      	bcc.n	8004064 <lfs_dir_relocatingcommit+0x55c>
 800405c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800405e:	7fdb      	ldrb	r3, [r3, #31]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1d2      	bne.n	800400a <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	663b      	str	r3, [r7, #96]	; 0x60
 800406a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f af29 	bne.w	8003ec4 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 8004072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8004074:	4618      	mov	r0, r3
 8004076:	3770      	adds	r7, #112	; 0x70
 8004078:	46bd      	mov	sp, r7
 800407a:	bdb0      	pop	{r4, r5, r7, pc}
 800407c:	080121b8 	.word	0x080121b8
 8004080:	08012d64 	.word	0x08012d64
 8004084:	08012054 	.word	0x08012054

08004088 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	b0bc      	sub	sp, #240	; 0xf0
 800408c:	af04      	add	r7, sp, #16
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800409e:	e045      	b.n	800412c <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80040a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040a4:	3308      	adds	r3, #8
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d03a      	beq.n	8004122 <lfs_dir_orphaningcommit+0x9a>
 80040ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040b0:	3308      	adds	r3, #8
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	4611      	mov	r1, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc feba 	bl	8000e30 <lfs_pair_cmp>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d12f      	bne.n	8004122 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80040c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c6:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d12a      	bne.n	8004122 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80040cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d023      	beq.n	8004122 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80040da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d91b      	bls.n	8004122 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80040ea:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fff2 	bl	80050d8 <lfs_file_outline>
 80040f4:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80040f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8004100:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004104:	e2ad      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8004106:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f001 f806 	bl	800511c <lfs_file_flush>
 8004110:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <lfs_dir_orphaningcommit+0x9a>
                return err;
 800411c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004120:	e29f      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800412c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1b5      	bne.n	80040a0 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800414a:	461d      	mov	r5, r3
 800414c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800414e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004150:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800415e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff fccc 	bl	8003b08 <lfs_dir_relocatingcommit>
 8004170:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8004174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004178:	2b00      	cmp	r3, #0
 800417a:	da02      	bge.n	8004182 <lfs_dir_orphaningcommit+0xfa>
        return state;
 800417c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004180:	e26f      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc fe50 	bl	8000e30 <lfs_pair_cmp>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	461d      	mov	r5, r3
 800419a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800419e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 80041aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d14a      	bne.n	8004248 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3348      	adds	r3, #72	; 0x48
 80041b6:	461a      	mov	r2, r3
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7fe fcdc 	bl	8002b78 <lfs_dir_getgstate>
 80041c0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80041c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <lfs_dir_orphaningcommit+0x14a>
            return err;
 80041cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041d0:	e247      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80041d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	3318      	adds	r3, #24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc fe93 	bl	8000f0e <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	7ddb      	ldrb	r3, [r3, #23]
 80041ec:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80041f0:	051a      	lsls	r2, r3, #20
 80041f2:	4bc2      	ldr	r3, [pc, #776]	; (80044fc <lfs_dir_orphaningcommit+0x474>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	667b      	str	r3, [r7, #100]	; 0x64
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3318      	adds	r3, #24
 80041fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80041fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004202:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004206:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800420a:	2000      	movs	r0, #0
 800420c:	9001      	str	r0, [sp, #4]
 800420e:	2001      	movs	r0, #1
 8004210:	9000      	str	r0, [sp, #0]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff fc78 	bl	8003b08 <lfs_dir_relocatingcommit>
 8004218:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3318      	adds	r3, #24
 8004220:	4618      	mov	r0, r3
 8004222:	f7fc fe5a 	bl	8000eda <lfs_pair_fromle32>
        if (state < 0) {
 8004226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800422a:	2b00      	cmp	r3, #0
 800422c:	da02      	bge.n	8004234 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800422e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004232:	e216      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8004234:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004238:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800423c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800423e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004240:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8004248:	2300      	movs	r3, #0
 800424a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 800424e:	e1fc      	b.n	800464a <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8004250:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004258:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800425c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004260:	4ca7      	ldr	r4, [pc, #668]	; (8004500 <lfs_dir_orphaningcommit+0x478>)
 8004262:	9403      	str	r4, [sp, #12]
 8004264:	9102      	str	r1, [sp, #8]
 8004266:	9201      	str	r2, [sp, #4]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	4603      	mov	r3, r0
 800426c:	f640 1295 	movw	r2, #2453	; 0x995
 8004270:	49a4      	ldr	r1, [pc, #656]	; (8004504 <lfs_dir_orphaningcommit+0x47c>)
 8004272:	48a5      	ldr	r0, [pc, #660]	; (8004508 <lfs_dir_orphaningcommit+0x480>)
 8004274:	f00d fa84 	bl	8011780 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f103 0220 	add.w	r2, r3, #32
 8004284:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc fdd0 	bl	8000e30 <lfs_pair_cmp>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8004296:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800429e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042ae:	e037      	b.n	8004320 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 80042b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042b4:	f103 0208 	add.w	r2, r3, #8
 80042b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc fdb6 	bl	8000e30 <lfs_pair_cmp>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80042ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80042ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042d2:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80042d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80042d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042dc:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80042de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042e2:	799b      	ldrb	r3, [r3, #6]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d116      	bne.n	8004316 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80042e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042ec:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80042f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042f4:	4611      	mov	r1, r2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fc fd9a 	bl	8000e30 <lfs_pair_cmp>
 80042fc:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8004302:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004306:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800430a:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800430c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004310:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004316:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004320:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1c3      	bne.n	80042b0 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8004328:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800432c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004330:	4619      	mov	r1, r3
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f002 fb28 	bl	8006988 <lfs_fs_parent>
 8004338:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 800433c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004340:	2b00      	cmp	r3, #0
 8004342:	da07      	bge.n	8004354 <lfs_dir_orphaningcommit+0x2cc>
 8004344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004348:	f113 0f02 	cmn.w	r3, #2
 800434c:	d002      	beq.n	8004354 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 800434e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004352:	e186      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8004354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004358:	f113 0f02 	cmn.w	r3, #2
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8004366:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800436a:	f113 0f02 	cmn.w	r3, #2
 800436e:	f000 809e 	beq.w	80044ae <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8004372:	2101      	movs	r1, #1
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f002 fb9d 	bl	8006ab4 <lfs_fs_preporphans>
 800437a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 800437e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <lfs_dir_orphaningcommit+0x304>
                return err;
 8004386:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800438a:	e16a      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800438c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004390:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3330      	adds	r3, #48	; 0x30
 8004398:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc feec 	bl	800117c <lfs_gstate_hasmovehere>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02d      	beq.n	8004406 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc fe2c 	bl	800100c <lfs_tag_id>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 80043ba:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80043bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043be:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80043c2:	484f      	ldr	r0, [pc, #316]	; (8004500 <lfs_dir_orphaningcommit+0x478>)
 80043c4:	9002      	str	r0, [sp, #8]
 80043c6:	9201      	str	r2, [sp, #4]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	460b      	mov	r3, r1
 80043cc:	f640 12c2 	movw	r2, #2498	; 0x9c2
 80043d0:	494c      	ldr	r1, [pc, #304]	; (8004504 <lfs_dir_orphaningcommit+0x47c>)
 80043d2:	484e      	ldr	r0, [pc, #312]	; (800450c <lfs_dir_orphaningcommit+0x484>)
 80043d4:	f00d f9d4 	bl	8011780 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80043d8:	2200      	movs	r2, #0
 80043da:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f002 fbb8 	bl	8006b54 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80043e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fc fe0f 	bl	800100c <lfs_tag_id>
 80043ee:	4603      	mov	r3, r0
 80043f0:	461a      	mov	r2, r3
 80043f2:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d205      	bcs.n	8004406 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80043fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043fe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004402:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8004406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004408:	657b      	str	r3, [r7, #84]	; 0x54
 800440a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800440c:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 800440e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004412:	4618      	mov	r0, r3
 8004414:	f7fc fd7b 	bl	8000f0e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8004418:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800441c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004420:	4293      	cmp	r3, r2
 8004422:	d007      	beq.n	8004434 <lfs_dir_orphaningcommit+0x3ac>
 8004424:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004428:	029b      	lsls	r3, r3, #10
 800442a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800442e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004432:	e000      	b.n	8004436 <lfs_dir_orphaningcommit+0x3ae>
 8004434:	2300      	movs	r3, #0
 8004436:	647b      	str	r3, [r7, #68]	; 0x44
 8004438:	2300      	movs	r3, #0
 800443a:	64bb      	str	r3, [r7, #72]	; 0x48
 800443c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004440:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004442:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004446:	653b      	str	r3, [r7, #80]	; 0x50
 8004448:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800444c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004450:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004454:	2000      	movs	r0, #0
 8004456:	9001      	str	r0, [sp, #4]
 8004458:	2002      	movs	r0, #2
 800445a:	9000      	str	r0, [sp, #0]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff fb53 	bl	8003b08 <lfs_dir_relocatingcommit>
 8004462:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004466:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800446a:	4618      	mov	r0, r3
 800446c:	f7fc fd35 	bl	8000eda <lfs_pair_fromle32>
            if (state < 0) {
 8004470:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004474:	2b00      	cmp	r3, #0
 8004476:	da02      	bge.n	800447e <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8004478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800447c:	e0f1      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 800447e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004482:	2b01      	cmp	r3, #1
 8004484:	d113      	bne.n	80044ae <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8004486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 800448c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800448e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8004492:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004496:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800449a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800449c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800449e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80044a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80044ac:	e0cd      	b.n	800464a <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 80044ae:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80044b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80044b6:	4619      	mov	r1, r3
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f002 f9b3 	bl	8006824 <lfs_fs_pred>
 80044be:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80044c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <lfs_dir_orphaningcommit+0x452>
 80044ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044ce:	f113 0f02 	cmn.w	r3, #2
 80044d2:	d002      	beq.n	80044da <lfs_dir_orphaningcommit+0x452>
            return err;
 80044d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044d8:	e0c3      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80044da:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01a      	beq.n	8004518 <lfs_dir_orphaningcommit+0x490>
 80044e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044e6:	f113 0f02 	cmn.w	r3, #2
 80044ea:	d115      	bne.n	8004518 <lfs_dir_orphaningcommit+0x490>
 80044ec:	4b08      	ldr	r3, [pc, #32]	; (8004510 <lfs_dir_orphaningcommit+0x488>)
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <lfs_dir_orphaningcommit+0x48c>)
 80044f0:	f640 11e5 	movw	r1, #2533	; 0x9e5
 80044f4:	4803      	ldr	r0, [pc, #12]	; (8004504 <lfs_dir_orphaningcommit+0x47c>)
 80044f6:	f00c fd21 	bl	8010f3c <__assert_func>
 80044fa:	bf00      	nop
 80044fc:	000ffc08 	.word	0x000ffc08
 8004500:	08012160 	.word	0x08012160
 8004504:	08012054 	.word	0x08012054
 8004508:	080122e0 	.word	0x080122e0
 800450c:	0801231c 	.word	0x0801231c
 8004510:	08012360 	.word	0x08012360
 8004514:	08012d80 	.word	0x08012d80

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8004518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800451c:	f113 0f02 	cmn.w	r3, #2
 8004520:	f000 8093 	beq.w	800464a <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3330      	adds	r3, #48	; 0x30
 8004528:	4618      	mov	r0, r3
 800452a:	f7fc fdde 	bl	80010ea <lfs_gstate_hasorphans>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d011      	beq.n	8004558 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8004534:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004538:	425b      	negs	r3, r3
 800453a:	b2db      	uxtb	r3, r3
 800453c:	b25b      	sxtb	r3, r3
 800453e:	4619      	mov	r1, r3
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f002 fab7 	bl	8006ab4 <lfs_fs_preporphans>
 8004546:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 800454a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8004552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004556:	e084      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004558:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800455c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3330      	adds	r3, #48	; 0x30
 8004564:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f7fc fe06 	bl	800117c <lfs_gstate_hasmovehere>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01c      	beq.n	80045b0 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	4618      	mov	r0, r3
 800457c:	f7fc fd46 	bl	800100c <lfs_tag_id>
 8004580:	4603      	mov	r3, r0
 8004582:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8004586:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800458a:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800458e:	4837      	ldr	r0, [pc, #220]	; (800466c <lfs_dir_orphaningcommit+0x5e4>)
 8004590:	9002      	str	r0, [sp, #8]
 8004592:	9201      	str	r2, [sp, #4]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	460b      	mov	r3, r1
 8004598:	f640 12f6 	movw	r2, #2550	; 0x9f6
 800459c:	4934      	ldr	r1, [pc, #208]	; (8004670 <lfs_dir_orphaningcommit+0x5e8>)
 800459e:	4835      	ldr	r0, [pc, #212]	; (8004674 <lfs_dir_orphaningcommit+0x5ec>)
 80045a0:	f00d f8ee 	bl	8011780 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80045a4:	2200      	movs	r2, #0
 80045a6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f002 fad2 	bl	8006b54 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 80045b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 80045b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 80045bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fc fca4 	bl	8000f0e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80045c6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80045ca:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <lfs_dir_orphaningcommit+0x55a>
 80045d2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80045d6:	029b      	lsls	r3, r3, #10
 80045d8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80045dc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80045e0:	e000      	b.n	80045e4 <lfs_dir_orphaningcommit+0x55c>
 80045e2:	2300      	movs	r3, #0
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
 80045e6:	2300      	movs	r3, #0
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80045ee:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80045f2:	051a      	lsls	r2, r3, #20
 80045f4:	4b20      	ldr	r3, [pc, #128]	; (8004678 <lfs_dir_orphaningcommit+0x5f0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80045fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004604:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004608:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800460c:	2000      	movs	r0, #0
 800460e:	9001      	str	r0, [sp, #4]
 8004610:	2002      	movs	r0, #2
 8004612:	9000      	str	r0, [sp, #0]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff fa77 	bl	8003b08 <lfs_dir_relocatingcommit>
 800461a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800461e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004622:	4618      	mov	r0, r3
 8004624:	f7fc fc59 	bl	8000eda <lfs_pair_fromle32>
            if (state < 0) {
 8004628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800462c:	2b00      	cmp	r3, #0
 800462e:	da02      	bge.n	8004636 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8004630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004634:	e015      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8004636:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800463a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800463e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004642:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 800464a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800464e:	2b01      	cmp	r3, #1
 8004650:	f43f adfe 	beq.w	8004250 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004654:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <lfs_dir_orphaningcommit+0x5d8>
 800465c:	2303      	movs	r3, #3
 800465e:	e000      	b.n	8004662 <lfs_dir_orphaningcommit+0x5da>
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	37e0      	adds	r7, #224	; 0xe0
 8004666:	46bd      	mov	sp, r7
 8004668:	bdb0      	pop	{r4, r5, r7, pc}
 800466a:	bf00      	nop
 800466c:	08012160 	.word	0x08012160
 8004670:	08012054 	.word	0x08012054
 8004674:	0801231c 	.word	0x0801231c
 8004678:	000ffc08 	.word	0x000ffc08

0800467c <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff fcf9 	bl	8004088 <lfs_dir_orphaningcommit>
 8004696:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	da01      	bge.n	80046a2 <lfs_dir_commit+0x26>
        return orphans;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	e00d      	b.n	80046be <lfs_dir_commit+0x42>
    }

    if (orphans) {
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d009      	beq.n	80046bc <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80046a8:	2100      	movs	r1, #0
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f002 fb74 	bl	8006d98 <lfs_fs_deorphan>
 80046b0:	6138      	str	r0, [r7, #16]
        if (err) {
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <lfs_dir_commit+0x40>
            return err;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	e000      	b.n	80046be <lfs_dir_commit+0x42>
        }
    }

    return 0;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80046c6:	b590      	push	{r4, r7, lr}
 80046c8:	b087      	sub	sp, #28
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	3b08      	subs	r3, #8
 80046de:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <lfs_ctz_index+0x2e>
        return 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e01c      	b.n	800472e <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fb ff7a 	bl	80005f2 <lfs_popc>
 80046fe:	4603      	mov	r3, r0
 8004700:	3302      	adds	r3, #2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	fb02 f303 	mul.w	r3, r2, r3
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	1ad4      	subs	r4, r2, r3
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7fb ff68 	bl	80005f2 <lfs_popc>
 8004722:	4603      	mov	r3, r0
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	1ae2      	subs	r2, r4, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	601a      	str	r2, [r3, #0]
    return i;
 800472c:	68fb      	ldr	r3, [r7, #12]
}
 800472e:	4618      	mov	r0, r3
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	bd90      	pop	{r4, r7, pc}

08004736 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004736:	b590      	push	{r4, r7, lr}
 8004738:	b08f      	sub	sp, #60	; 0x3c
 800473a:	af04      	add	r7, sp, #16
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	2b00      	cmp	r3, #0
 8004748:	d108      	bne.n	800475c <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800474a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474c:	f04f 32ff 	mov.w	r2, #4294967295
 8004750:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
        return 0;
 8004758:	2300      	movs	r3, #0
 800475a:	e053      	b.n	8004804 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475e:	3b01      	subs	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	f107 0314 	add.w	r3, r7, #20
 8004766:	4619      	mov	r1, r3
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff ffac 	bl	80046c6 <lfs_ctz_index>
 800476e:	4603      	mov	r3, r0
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004772:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004776:	4619      	mov	r1, r3
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7ff ffa4 	bl	80046c6 <lfs_ctz_index>
 800477e:	4603      	mov	r3, r0
 8004780:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004782:	e034      	b.n	80047ee <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	3301      	adds	r3, #1
 800478c:	4618      	mov	r0, r3
 800478e:	f7fb ff13 	bl	80005b8 <lfs_npw2>
 8004792:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004794:	1e5c      	subs	r4, r3, #1
 8004796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004798:	f7fb ff1d 	bl	80005d6 <lfs_ctz>
 800479c:	4603      	mov	r3, r0
 800479e:	4619      	mov	r1, r3
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7fb fed4 	bl	800054e <lfs_min>
 80047a6:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	0092      	lsls	r2, r2, #2
 80047ae:	2104      	movs	r1, #4
 80047b0:	9103      	str	r1, [sp, #12]
 80047b2:	4639      	mov	r1, r7
 80047b4:	9102      	str	r1, [sp, #8]
 80047b6:	9201      	str	r2, [sp, #4]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	2304      	movs	r3, #4
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7fb ff97 	bl	80006f4 <lfs_bd_read>
 80047c6:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fb ff2a 	bl	8000624 <lfs_fromle32>
 80047d0:	4603      	mov	r3, r0
 80047d2:	603b      	str	r3, [r7, #0]
        if (err) {
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <lfs_ctz_find+0xa8>
            return err;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	e012      	b.n	8004804 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80047de:	2201      	movs	r2, #1
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d8c6      	bhi.n	8004784 <lfs_ctz_find+0x4e>
    }

    *block = head;
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fa:	601a      	str	r2, [r3, #0]
    *off = pos;
 80047fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004800:	601a      	str	r2, [r3, #0]
    return 0;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	372c      	adds	r7, #44	; 0x2c
 8004808:	46bd      	mov	sp, r7
 800480a:	bd90      	pop	{r4, r7, pc}

0800480c <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b092      	sub	sp, #72	; 0x48
 8004810:	af04      	add	r7, sp, #16
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800481a:	f107 0320 	add.w	r3, r7, #32
 800481e:	4619      	mov	r1, r3
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7fc fee5 	bl	80015f0 <lfs_alloc>
 8004826:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <lfs_ctz_extend+0x26>
            return err;
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	e0e9      	b.n	8004a06 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	4619      	mov	r1, r3
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7fc fa9a 	bl	8000d70 <lfs_bd_erase>
 800483c:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800484a:	f000 80cb 	beq.w	80049e4 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	e0d9      	b.n	8004a06 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8004852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d107      	bne.n	8004868 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485c:	601a      	str	r2, [r3, #0]
                *off = 0;
 800485e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
                return 0;
 8004864:	2300      	movs	r3, #0
 8004866:	e0ce      	b.n	8004a06 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8004868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486a:	3b01      	subs	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800486e:	f107 031c 	add.w	r3, r7, #28
 8004872:	4619      	mov	r1, r3
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff ff26 	bl	80046c6 <lfs_ctz_index>
 800487a:	4603      	mov	r3, r0
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	3301      	adds	r3, #1
 8004882:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	429a      	cmp	r2, r3
 800488e:	d044      	beq.n	800491a <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004890:	2300      	movs	r3, #0
 8004892:	637b      	str	r3, [r7, #52]	; 0x34
 8004894:	e035      	b.n	8004902 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	2301      	movs	r3, #1
 800489e:	9303      	str	r3, [sp, #12]
 80048a0:	f107 0317 	add.w	r3, r7, #23
 80048a4:	9302      	str	r3, [sp, #8]
 80048a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	4613      	mov	r3, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	2100      	movs	r1, #0
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f7fb ff1d 	bl	80006f4 <lfs_bd_read>
 80048ba:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <lfs_ctz_extend+0xba>
                        return err;
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	e09f      	b.n	8004a06 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	2201      	movs	r2, #1
 80048ca:	9203      	str	r2, [sp, #12]
 80048cc:	f107 0217 	add.w	r2, r7, #23
 80048d0:	9202      	str	r2, [sp, #8]
 80048d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048d4:	9201      	str	r2, [sp, #4]
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	2301      	movs	r3, #1
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f7fc f99a 	bl	8000c18 <lfs_bd_prog>
 80048e4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80048f2:	d101      	bne.n	80048f8 <lfs_ctz_extend+0xec>
                            goto relocate;
 80048f4:	bf00      	nop
                    goto relocate;
 80048f6:	e075      	b.n	80049e4 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 80048fa:	e084      	b.n	8004a06 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	3301      	adds	r3, #1
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004906:	429a      	cmp	r2, r3
 8004908:	d3c5      	bcc.n	8004896 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800490a:	6a3a      	ldr	r2, [r7, #32]
 800490c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490e:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004914:	601a      	str	r2, [r3, #0]
                return 0;
 8004916:	2300      	movs	r3, #0
 8004918:	e075      	b.n	8004a06 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	3301      	adds	r3, #1
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004922:	f7fb fe58 	bl	80005d6 <lfs_ctz>
 8004926:	4603      	mov	r3, r0
 8004928:	3301      	adds	r3, #1
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004930:	2300      	movs	r3, #0
 8004932:	633b      	str	r3, [r7, #48]	; 0x30
 8004934:	e049      	b.n	80049ca <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fb fe7d 	bl	8000638 <lfs_tole32>
 800493e:	4603      	mov	r3, r0
 8004940:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004946:	0092      	lsls	r2, r2, #2
 8004948:	2104      	movs	r1, #4
 800494a:	9103      	str	r1, [sp, #12]
 800494c:	f107 0118 	add.w	r1, r7, #24
 8004950:	9102      	str	r1, [sp, #8]
 8004952:	9201      	str	r2, [sp, #4]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2301      	movs	r3, #1
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7fc f95b 	bl	8000c18 <lfs_bd_prog>
 8004962:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fb fe5c 	bl	8000624 <lfs_fromle32>
 800496c:	4603      	mov	r3, r0
 800496e:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800497c:	d034      	beq.n	80049e8 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	e041      	b.n	8004a06 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	3b01      	subs	r3, #1
 8004986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004988:	429a      	cmp	r2, r3
 800498a:	d01b      	beq.n	80049c4 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004990:	0092      	lsls	r2, r2, #2
 8004992:	2104      	movs	r1, #4
 8004994:	9103      	str	r1, [sp, #12]
 8004996:	f107 0118 	add.w	r1, r7, #24
 800499a:	9102      	str	r1, [sp, #8]
 800499c:	9201      	str	r2, [sp, #4]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2304      	movs	r3, #4
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	2100      	movs	r1, #0
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7fb fea4 	bl	80006f4 <lfs_bd_read>
 80049ac:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fb fe37 	bl	8000624 <lfs_fromle32>
 80049b6:	4603      	mov	r3, r0
 80049b8:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <lfs_ctz_extend+0x1b8>
                        return err;
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	e020      	b.n	8004a06 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	3301      	adds	r3, #1
 80049c8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d3b1      	bcc.n	8004936 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80049d2:	6a3a      	ldr	r2, [r7, #32]
 80049d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d6:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	009a      	lsls	r2, r3, #2
 80049dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049de:	601a      	str	r2, [r3, #0]
            return 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	e010      	b.n	8004a06 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 80049e4:	bf00      	nop
 80049e6:	e000      	b.n	80049ea <lfs_ctz_extend+0x1de>
                        goto relocate;
 80049e8:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <lfs_ctz_extend+0x204>)
 80049ee:	9200      	str	r2, [sp, #0]
 80049f0:	f640 32af 	movw	r2, #2991	; 0xbaf
 80049f4:	4907      	ldr	r1, [pc, #28]	; (8004a14 <lfs_ctz_extend+0x208>)
 80049f6:	4808      	ldr	r0, [pc, #32]	; (8004a18 <lfs_ctz_extend+0x20c>)
 80049f8:	f00c fec2 	bl	8011780 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7fb fe54 	bl	80006ac <lfs_cache_drop>
    while (true) {
 8004a04:	e709      	b.n	800481a <lfs_ctz_extend+0xe>
    }
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3738      	adds	r7, #56	; 0x38
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	08012160 	.word	0x08012160
 8004a14:	08012054 	.word	0x08012054
 8004a18:	080121e0 	.word	0x080121e0

08004a1c <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b090      	sub	sp, #64	; 0x40
 8004a20:	af04      	add	r7, sp, #16
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <lfs_ctz_traverse+0x18>
        return 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e06d      	b.n	8004b10 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	3b01      	subs	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	f107 031c 	add.w	r3, r7, #28
 8004a3e:	4619      	mov	r1, r3
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff fe40 	bl	80046c6 <lfs_ctz_index>
 8004a46:	4603      	mov	r3, r0
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8004a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a50:	4798      	blx	r3
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <lfs_ctz_traverse+0x42>
            return err;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	e058      	b.n	8004b10 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <lfs_ctz_traverse+0x4c>
            return 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e053      	b.n	8004b10 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	f1c3 0302 	rsb	r3, r3, #2
 8004a72:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004a74:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004a76:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004a78:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004a7a:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004a7c:	9303      	str	r3, [sp, #12]
 8004a7e:	f107 0314 	add.w	r3, r7, #20
 8004a82:	9302      	str	r3, [sp, #8]
 8004a84:	2300      	movs	r3, #0
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7fb fe2e 	bl	80006f4 <lfs_bd_read>
 8004a98:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fb fdc1 	bl	8000624 <lfs_fromle32>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fdbb 	bl	8000624 <lfs_fromle32>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <lfs_ctz_traverse+0xa0>
            return err;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	e029      	b.n	8004b10 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8004abc:	2300      	movs	r3, #0
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac0:	e013      	b.n	8004aea <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004aca:	4413      	add	r3, r2
 8004acc:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004ad6:	4798      	blx	r3
 8004ad8:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <lfs_ctz_traverse+0xc8>
                return err;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	e015      	b.n	8004b10 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af0:	429a      	cmp	r2, r3
 8004af2:	dbe6      	blt.n	8004ac2 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004afe:	4413      	add	r3, r2
 8004b00:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004b04:	603b      	str	r3, [r7, #0]
        index -= count;
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004b0e:	e79c      	b.n	8004a4a <lfs_ctz_traverse+0x2e>
    }
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3730      	adds	r7, #48	; 0x30
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8004b18:	b5b0      	push	{r4, r5, r7, lr}
 8004b1a:	b09a      	sub	sp, #104	; 0x68
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f002 fae1 	bl	80070f8 <lfs_fs_forceconsistency>
 8004b36:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8004b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <lfs_file_opencfg_+0x2a>
            return err;
 8004b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b40:	e1b0      	b.n	8004ea4 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004b46:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2200      	movs	r2, #0
 8004b52:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f103 0108 	add.w	r1, r3, #8
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	1d3a      	adds	r2, r7, #4
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7fe f87f 	bl	8002c70 <lfs_dir_find>
 8004b72:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8004b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	da0c      	bge.n	8004b94 <lfs_file_opencfg_+0x7c>
 8004b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b7c:	f113 0f02 	cmn.w	r3, #2
 8004b80:	d105      	bne.n	8004b8e <lfs_file_opencfg_+0x76>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	889b      	ldrh	r3, [r3, #4]
 8004b86:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d102      	bne.n	8004b94 <lfs_file_opencfg_+0x7c>
        err = tag;
 8004b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b90:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004b92:	e17c      	b.n	8004e8e <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2201      	movs	r2, #1
 8004b98:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7fc fc5a 	bl	8001456 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba4:	f113 0f02 	cmn.w	r3, #2
 8004ba8:	d14e      	bne.n	8004c48 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d103      	bne.n	8004bbc <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8004bb4:	f06f 0301 	mvn.w	r3, #1
 8004bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004bba:	e168      	b.n	8004e8e <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fb fac4 	bl	800014c <strlen>
 8004bc4:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d903      	bls.n	8004bd8 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004bd0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004bd6:	e15a      	b.n	8004e8e <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f103 0108 	add.w	r1, r3, #8
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	889b      	ldrh	r3, [r3, #4]
 8004be2:	029b      	lsls	r3, r3, #10
 8004be4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bee:	2300      	movs	r3, #0
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	889b      	ldrh	r3, [r3, #4]
 8004bf6:	029a      	lsls	r2, r3, #10
 8004bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	889b      	ldrh	r3, [r3, #4]
 8004c0a:	029b      	lsls	r3, r3, #10
 8004c0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c16:	2300      	movs	r3, #0
 8004c18:	643b      	str	r3, [r7, #64]	; 0x40
 8004c1a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004c1e:	2303      	movs	r3, #3
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff fd2b 	bl	800467c <lfs_dir_commit>
 8004c26:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8004c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2a:	f113 0f1c 	cmn.w	r3, #28
 8004c2e:	d001      	beq.n	8004c34 <lfs_file_opencfg_+0x11c>
 8004c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c32:	e001      	b.n	8004c38 <lfs_file_opencfg_+0x120>
 8004c34:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004c38:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8004c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f040 8125 	bne.w	8004e8c <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8004c42:	4b9a      	ldr	r3, [pc, #616]	; (8004eac <lfs_file_opencfg_+0x394>)
 8004c44:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c46:	e044      	b.n	8004cd2 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 8004c52:	f06f 0310 	mvn.w	r3, #16
 8004c56:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004c58:	e119      	b.n	8004e8e <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8004c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fc f9ad 	bl	8000fbc <lfs_tag_type3>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d003      	beq.n	8004c70 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8004c68:	f06f 0314 	mvn.w	r3, #20
 8004c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8004c6e:	e10e      	b.n	8004e8e <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00e      	beq.n	8004c98 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	889b      	ldrh	r3, [r3, #4]
 8004c7e:	029b      	lsls	r3, r3, #10
 8004c80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c88:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
 8004c96:	e01c      	b.n	8004cd2 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	889b      	ldrh	r3, [r3, #4]
 8004ca2:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004ca4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ca8:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004cb0:	9200      	str	r2, [sp, #0]
 8004cb2:	4a7f      	ldr	r2, [pc, #508]	; (8004eb0 <lfs_file_opencfg_+0x398>)
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7fc fe19 	bl	80018ec <lfs_dir_get>
 8004cba:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8004cbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	da02      	bge.n	8004cc8 <lfs_file_opencfg_+0x1b0>
            err = tag;
 8004cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004cc6:	e0e2      	b.n	8004e8e <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	3328      	adds	r3, #40	; 0x28
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fc fae5 	bl	800129c <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8004cd6:	e063      	b.n	8004da0 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d03c      	beq.n	8004d5e <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004d02:	051a      	lsls	r2, r3, #20
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	889b      	ldrh	r3, [r3, #4]
 8004d08:	029b      	lsls	r3, r3, #10
 8004d0a:	ea42 0103 	orr.w	r1, r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d12:	6858      	ldr	r0, [r3, #4]
 8004d14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d16:	4613      	mov	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4403      	add	r3, r0
 8004d20:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004d22:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2a:	6859      	ldr	r1, [r3, #4]
 8004d2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d2e:	4613      	mov	r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4a5d      	ldr	r2, [pc, #372]	; (8004eb4 <lfs_file_opencfg_+0x39c>)
 8004d40:	4621      	mov	r1, r4
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7fc fdd2 	bl	80018ec <lfs_dir_get>
 8004d48:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8004d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	da06      	bge.n	8004d5e <lfs_file_opencfg_+0x246>
 8004d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d52:	f113 0f02 	cmn.w	r3, #2
 8004d56:	d002      	beq.n	8004d5e <lfs_file_opencfg_+0x246>
                err = res;
 8004d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004d5c:	e097      	b.n	8004e8e <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d017      	beq.n	8004d9a <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6e:	6859      	ldr	r1, [r3, #4]
 8004d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d72:	4613      	mov	r3, r2
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d903      	bls.n	8004d8e <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 8004d86:	f06f 031b 	mvn.w	r3, #27
 8004d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004d8c:	e07f      	b.n	8004e8e <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d395      	bcc.n	8004cd8 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8004dc0:	e010      	b.n	8004de4 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fb fc58 	bl	800067e <lfs_malloc>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d103      	bne.n	8004de4 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8004ddc:	f06f 030b 	mvn.w	r3, #11
 8004de0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004de2:	e054      	b.n	8004e8e <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	3340      	adds	r3, #64	; 0x40
 8004de8:	4619      	mov	r1, r3
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7fb fc6c 	bl	80006c8 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8004df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fc f8e2 	bl	8000fbc <lfs_tag_type3>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f240 2301 	movw	r3, #513	; 0x201
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d141      	bne.n	8004e88 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f06f 0201 	mvn.w	r2, #1
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8004e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fc f90b 	bl	800102a <lfs_tag_size>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2200      	movs	r2, #0
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d020      	beq.n	8004e88 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	889b      	ldrh	r3, [r3, #4]
 8004e50:	029c      	lsls	r4, r3, #10
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e56:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb fb77 	bl	800054e <lfs_min>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004e64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	4a0f      	ldr	r2, [pc, #60]	; (8004eb0 <lfs_file_opencfg_+0x398>)
 8004e72:	4629      	mov	r1, r5
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7fc fd39 	bl	80018ec <lfs_dir_get>
 8004e7a:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8004e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da02      	bge.n	8004e88 <lfs_file_opencfg_+0x370>
                err = res;
 8004e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e84:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004e86:	e002      	b.n	8004e8e <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e00b      	b.n	8004ea4 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 8004e8c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_close_(lfs, file);
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f823 	bl	8004ee8 <lfs_file_close_>
    return err;
 8004ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3760      	adds	r7, #96	; 0x60
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8004eac:	20100000 	.word	0x20100000
 8004eb0:	700ffc00 	.word	0x700ffc00
 8004eb4:	7ffffc00 	.word	0x7ffffc00

08004eb8 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8004ec6:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <lfs_file_open_+0x2c>)
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff fe21 	bl	8004b18 <lfs_file_opencfg_>
 8004ed6:	6178      	str	r0, [r7, #20]
    return err;
 8004ed8:	697b      	ldr	r3, [r7, #20]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	08012d98 	.word	0x08012d98

08004ee8 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f9e5 	bl	80052c4 <lfs_file_sync_>
 8004efa:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc fa88 	bl	8001414 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d104      	bne.n	8004f18 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fb fbbf 	bl	8000696 <lfs_free>
    }

    return err;
 8004f18:	68fb      	ldr	r3, [r7, #12]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8004f24:	b590      	push	{r4, r7, lr}
 8004f26:	b08d      	sub	sp, #52	; 0x34
 8004f28:	af06      	add	r7, sp, #24
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004f2e:	f107 030c 	add.w	r3, r7, #12
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fc fb5b 	bl	80015f0 <lfs_alloc>
 8004f3a:	6138      	str	r0, [r7, #16]
        if (err) {
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <lfs_file_relocate+0x22>
            return err;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	e0bb      	b.n	80050be <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fb ff10 	bl	8000d70 <lfs_bd_erase>
 8004f50:	6138      	str	r0, [r7, #16]
        if (err) {
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d006      	beq.n	8004f66 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004f5e:	f000 809b 	beq.w	8005098 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	e0ab      	b.n	80050be <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	e069      	b.n	8005040 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d027      	beq.n	8004fc8 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f103 0008 	add.w	r0, r3, #8
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	889b      	ldrh	r3, [r3, #4]
 8004f90:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8004f92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	9105      	str	r1, [sp, #20]
 8004f9e:	f107 010b 	add.w	r1, r7, #11
 8004fa2:	9104      	str	r1, [sp, #16]
 8004fa4:	6979      	ldr	r1, [r7, #20]
 8004fa6:	9103      	str	r1, [sp, #12]
 8004fa8:	9302      	str	r3, [sp, #8]
 8004faa:	4b47      	ldr	r3, [pc, #284]	; (80050c8 <lfs_file_relocate+0x1a4>)
 8004fac:	9301      	str	r3, [sp, #4]
 8004fae:	9200      	str	r2, [sp, #0]
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	4601      	mov	r1, r0
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc fcb3 	bl	8001922 <lfs_dir_getread>
 8004fbc:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01e      	beq.n	8005002 <lfs_file_relocate+0xde>
                    return err;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	e07a      	b.n	80050be <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8004fce:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	1ad4      	subs	r4, r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	2201      	movs	r2, #1
 8004fde:	9203      	str	r2, [sp, #12]
 8004fe0:	f107 020b 	add.w	r2, r7, #11
 8004fe4:	9202      	str	r2, [sp, #8]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	9201      	str	r2, [sp, #4]
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	4623      	mov	r3, r4
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fb fb7f 	bl	80006f4 <lfs_bd_read>
 8004ff6:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <lfs_file_relocate+0xde>
                    return err;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	e05d      	b.n	80050be <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f103 0110 	add.w	r1, r3, #16
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	9203      	str	r2, [sp, #12]
 8005010:	f107 020b 	add.w	r2, r7, #11
 8005014:	9202      	str	r2, [sp, #8]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	9201      	str	r2, [sp, #4]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2301      	movs	r3, #1
 800501e:	4602      	mov	r2, r0
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7fb fdf9 	bl	8000c18 <lfs_bd_prog>
 8005026:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005034:	d032      	beq.n	800509c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	e041      	b.n	80050be <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	3301      	adds	r3, #1
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	429a      	cmp	r2, r3
 8005048:	d390      	bcc.n	8004f6c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69d9      	ldr	r1, [r3, #28]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	461a      	mov	r2, r3
 800505a:	f00b ffe7 	bl	801102c <memcpy>
        file->cache.block = lfs->pcache.block;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695a      	ldr	r2, [r3, #20]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3310      	adds	r3, #16
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fb fb23 	bl	80006c8 <lfs_cache_zero>

        file->block = nblock;
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8005094:	2300      	movs	r3, #0
 8005096:	e012      	b.n	80050be <lfs_file_relocate+0x19a>
                goto relocate;
 8005098:	bf00      	nop
 800509a:	e000      	b.n	800509e <lfs_file_relocate+0x17a>
                    goto relocate;
 800509c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <lfs_file_relocate+0x1a8>)
 80050a2:	9200      	str	r2, [sp, #0]
 80050a4:	f640 42e5 	movw	r2, #3301	; 0xce5
 80050a8:	4909      	ldr	r1, [pc, #36]	; (80050d0 <lfs_file_relocate+0x1ac>)
 80050aa:	480a      	ldr	r0, [pc, #40]	; (80050d4 <lfs_file_relocate+0x1b0>)
 80050ac:	f00c fb68 	bl	8011780 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3310      	adds	r3, #16
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fb faf8 	bl	80006ac <lfs_cache_drop>
    while (true) {
 80050bc:	e737      	b.n	8004f2e <lfs_file_relocate+0xa>
    }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd90      	pop	{r4, r7, pc}
 80050c6:	bf00      	nop
 80050c8:	fff7fc00 	.word	0xfff7fc00
 80050cc:	08012160 	.word	0x08012160
 80050d0:	08012054 	.word	0x08012054
 80050d4:	080121e0 	.word	0x080121e0

080050d8 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ckpoint(lfs);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fc f9eb 	bl	80014c6 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ff16 	bl	8004f24 <lfs_file_relocate>
 80050f8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <lfs_file_outline+0x2c>
        return err;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	e006      	b.n	8005112 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b09f      	sub	sp, #124	; 0x7c
 8005120:	af02      	add	r7, sp, #8
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d011      	beq.n	8005156 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d105      	bne.n	800514a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	3340      	adds	r3, #64	; 0x40
 8005142:	4619      	mov	r1, r3
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fb fab1 	bl	80006ac <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80a4 	beq.w	80052ac <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d176      	bne.n	8005264 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8005176:	f107 030c 	add.w	r3, r7, #12
 800517a:	2254      	movs	r2, #84	; 0x54
 800517c:	2100      	movs	r1, #0
 800517e:	4618      	mov	r0, r3
 8005180:	f00b ff62 	bl	8011048 <memset>
                .ctz.head = file->ctz.head,
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8005188:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800518e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005190:	2301      	movs	r3, #1
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8005198:	643b      	str	r3, [r7, #64]	; 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80051a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fb fa7e 	bl	80006ac <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80051b0:	e02b      	b.n	800520a <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80051b2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80051b6:	f107 010c 	add.w	r1, r7, #12
 80051ba:	2301      	movs	r3, #1
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f921 	bl	8005404 <lfs_file_flushedread>
 80051c2:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80051c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da01      	bge.n	80051ce <lfs_file_flush+0xb2>
                    return res;
 80051ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051cc:	e06f      	b.n	80052ae <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80051ce:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80051d2:	2301      	movs	r3, #1
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa1c 	bl	8005614 <lfs_file_flushedwrite>
 80051dc:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80051de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	da01      	bge.n	80051e8 <lfs_file_flush+0xcc>
                    return res;
 80051e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e6:	e062      	b.n	80052ae <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d00b      	beq.n	800520a <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80051f2:	f107 030c 	add.w	r3, r7, #12
 80051f6:	3340      	adds	r3, #64	; 0x40
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fb fa56 	bl	80006ac <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4619      	mov	r1, r3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7fb fa51 	bl	80006ac <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	429a      	cmp	r2, r3
 8005214:	d3cd      	bcc.n	80051b2 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	2301      	movs	r3, #1
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fb fc4b 	bl	8000abc <lfs_bd_flush>
 8005226:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800522a:	2b00      	cmp	r3, #0
 800522c:	d026      	beq.n	800527c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800522e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005230:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005234:	d001      	beq.n	800523a <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8005236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005238:	e039      	b.n	80052ae <lfs_file_flush+0x192>
                        goto relocate;
 800523a:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <lfs_file_flush+0x19c>)
 8005242:	9200      	str	r2, [sp, #0]
 8005244:	f640 5234 	movw	r2, #3380	; 0xd34
 8005248:	491c      	ldr	r1, [pc, #112]	; (80052bc <lfs_file_flush+0x1a0>)
 800524a:	481d      	ldr	r0, [pc, #116]	; (80052c0 <lfs_file_flush+0x1a4>)
 800524c:	f00c fa98 	bl	8011780 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff fe66 	bl	8004f24 <lfs_file_relocate>
 8005258:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800525a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0da      	beq.n	8005216 <lfs_file_flush+0xfa>
                    return err;
 8005260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005262:	e024      	b.n	80052ae <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	4619      	mov	r1, r3
 800526e:	4610      	mov	r0, r2
 8005270:	f7fb f95e 	bl	8000530 <lfs_max>
 8005274:	4602      	mov	r2, r0
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	635a      	str	r2, [r3, #52]	; 0x34
 800527a:	e000      	b.n	800527e <lfs_file_flush+0x162>
                break;
 800527c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052aa:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3774      	adds	r7, #116	; 0x74
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd90      	pop	{r4, r7, pc}
 80052b6:	bf00      	nop
 80052b8:	08012160 	.word	0x08012160
 80052bc:	08012054 	.word	0x08012054
 80052c0:	080121e0 	.word	0x080121e0

080052c4 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b090      	sub	sp, #64	; 0x40
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	e08e      	b.n	80053fc <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ff1b 	bl	800511c <lfs_file_flush>
 80052e6:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	e07e      	b.n	80053fc <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d077      	beq.n	80053fa <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	4618      	mov	r0, r3
 8005310:	f7fb fd74 	bl	8000dfc <lfs_pair_isnull>
 8005314:	4603      	mov	r3, r0
 8005316:	f083 0301 	eor.w	r3, r3, #1
 800531a:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 800531c:	2b00      	cmp	r3, #0
 800531e:	d06c      	beq.n	80053fa <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10d      	bne.n	8005348 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f103 0110 	add.w	r1, r3, #16
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	2300      	movs	r3, #0
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fb fc3a 	bl	8000bb0 <lfs_bd_sync>
 800533c:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <lfs_file_sync_+0x84>
                return err;
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	e059      	b.n	80053fc <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005354:	f240 2301 	movw	r3, #513	; 0x201
 8005358:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535e:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
 8005366:	e014      	b.n	8005392 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8005368:	f240 2302 	movw	r3, #514	; 0x202
 800536c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005374:	3228      	adds	r2, #40	; 0x28
 8005376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800537a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800537e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005382:	4618      	mov	r0, r3
 8005384:	f7fb ffa2 	bl	80012cc <lfs_ctz_tole32>
            buffer = &ctz;
 8005388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800538c:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800538e:	2308      	movs	r3, #8
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f103 0108 	add.w	r1, r3, #8
 8005398:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800539a:	051a      	lsls	r2, r3, #20
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	889b      	ldrh	r3, [r3, #4]
 80053a0:	029b      	lsls	r3, r3, #10
 80053a2:	431a      	orrs	r2, r3
 80053a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	889b      	ldrh	r3, [r3, #4]
 80053b2:	029a      	lsls	r2, r3, #10
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ca:	f107 0218 	add.w	r2, r7, #24
 80053ce:	2302      	movs	r3, #2
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff f953 	bl	800467c <lfs_dir_commit>
 80053d6:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	e006      	b.n	80053fc <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3740      	adds	r7, #64	; 0x40
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005404:	b5b0      	push	{r4, r5, r7, lr}
 8005406:	b090      	sub	sp, #64	; 0x40
 8005408:	af06      	add	r7, sp, #24
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	429a      	cmp	r2, r3
 8005424:	d301      	bcc.n	800542a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005426:	2300      	movs	r3, #0
 8005428:	e0b7      	b.n	800559a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	4619      	mov	r1, r3
 8005436:	6838      	ldr	r0, [r7, #0]
 8005438:	f7fb f889 	bl	800054e <lfs_min>
 800543c:	6038      	str	r0, [r7, #0]
    nsize = size;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8005442:	e0a5      	b.n	8005590 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005458:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 800545a:	429a      	cmp	r2, r3
 800545c:	d130      	bne.n	80054c0 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d11c      	bne.n	80054a4 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	3138      	adds	r1, #56	; 0x38
 8005480:	68b8      	ldr	r0, [r7, #8]
 8005482:	303c      	adds	r0, #60	; 0x3c
 8005484:	9003      	str	r0, [sp, #12]
 8005486:	9102      	str	r1, [sp, #8]
 8005488:	9201      	str	r2, [sp, #4]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	462b      	mov	r3, r5
 800548e:	4622      	mov	r2, r4
 8005490:	2100      	movs	r1, #0
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7ff f94f 	bl	8004736 <lfs_ctz_find>
 8005498:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <lfs_file_flushedread+0xb0>
                    return err;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	e07a      	b.n	800559a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f06f 0201 	mvn.w	r2, #1
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	4619      	mov	r1, r3
 80054ce:	6a38      	ldr	r0, [r7, #32]
 80054d0:	f7fb f83d 	bl	800054e <lfs_min>
 80054d4:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d026      	beq.n	8005530 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f103 0408 	add.w	r4, r3, #8
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 80054f2:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	889b      	ldrh	r3, [r3, #4]
 80054f8:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80054fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005506:	69b8      	ldr	r0, [r7, #24]
 8005508:	9005      	str	r0, [sp, #20]
 800550a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800550c:	9004      	str	r0, [sp, #16]
 800550e:	9103      	str	r1, [sp, #12]
 8005510:	9302      	str	r3, [sp, #8]
 8005512:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <lfs_file_flushedread+0x1a0>)
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	9200      	str	r2, [sp, #0]
 8005518:	462b      	mov	r3, r5
 800551a:	2200      	movs	r2, #0
 800551c:	4621      	mov	r1, r4
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7fc f9ff 	bl	8001922 <lfs_dir_getread>
 8005524:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01d      	beq.n	8005568 <lfs_file_flushedread+0x164>
                return err;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	e034      	b.n	800559a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800553a:	69dc      	ldr	r4, [r3, #28]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	9103      	str	r1, [sp, #12]
 8005548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800554a:	9102      	str	r1, [sp, #8]
 800554c:	9201      	str	r2, [sp, #4]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	4623      	mov	r3, r4
 8005552:	4602      	mov	r2, r0
 8005554:	2100      	movs	r1, #0
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f7fb f8cc 	bl	80006f4 <lfs_bd_read>
 800555c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <lfs_file_flushedread+0x164>
                return err;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	e018      	b.n	800559a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	441a      	add	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	441a      	add	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4413      	add	r3, r2
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f47f af56 	bne.w	8005444 <lfs_file_flushedread+0x40>
    }

    return size;
 8005598:	683b      	ldr	r3, [r7, #0]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3728      	adds	r7, #40	; 0x28
 800559e:	46bd      	mov	sp, r7
 80055a0:	bdb0      	pop	{r4, r5, r7, pc}
 80055a2:	bf00      	nop
 80055a4:	fff7fc00 	.word	0xfff7fc00

080055a8 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <lfs_file_read_+0x28>
 80055c2:	4b11      	ldr	r3, [pc, #68]	; (8005608 <lfs_file_read_+0x60>)
 80055c4:	4a11      	ldr	r2, [pc, #68]	; (800560c <lfs_file_read_+0x64>)
 80055c6:	f640 51c8 	movw	r1, #3528	; 0xdc8
 80055ca:	4811      	ldr	r0, [pc, #68]	; (8005610 <lfs_file_read_+0x68>)
 80055cc:	f00b fcb6 	bl	8010f3c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f7ff fd9c 	bl	800511c <lfs_file_flush>
 80055e4:	6178      	str	r0, [r7, #20]
        if (err) {
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <lfs_file_read_+0x48>
            return err;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	e006      	b.n	80055fe <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff ff04 	bl	8005404 <lfs_file_flushedread>
 80055fc:	4603      	mov	r3, r0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	08012388 	.word	0x08012388
 800560c:	08012da4 	.word	0x08012da4
 8005610:	08012054 	.word	0x08012054

08005614 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005614:	b5b0      	push	{r4, r5, r7, lr}
 8005616:	b090      	sub	sp, #64	; 0x40
 8005618:	af04      	add	r7, sp, #16
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80f4 	beq.w	8005820 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	441a      	add	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f7fa ff72 	bl	8000530 <lfs_max>
 800564c:	4602      	mov	r2, r0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8005652:	429a      	cmp	r2, r3
 8005654:	f240 80e4 	bls.w	8005820 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fd3c 	bl	80050d8 <lfs_file_outline>
 8005660:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80db 	beq.w	8005820 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	e0d7      	b.n	800582a <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d006      	beq.n	8005694 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800568e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005690:	429a      	cmp	r2, r3
 8005692:	d16d      	bne.n	8005770 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d159      	bne.n	8005754 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d12f      	bne.n	800570c <lfs_file_flushedwrite+0xf8>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d02b      	beq.n	800570c <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80056c6:	3a01      	subs	r2, #1
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80056cc:	2000      	movs	r0, #0
 80056ce:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80056d0:	f107 0010 	add.w	r0, r7, #16
 80056d4:	9003      	str	r0, [sp, #12]
 80056d6:	9102      	str	r1, [sp, #8]
 80056d8:	9201      	str	r2, [sp, #4]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	462b      	mov	r3, r5
 80056de:	4622      	mov	r2, r4
 80056e0:	2100      	movs	r1, #0
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff f827 	bl	8004736 <lfs_ctz_find>
 80056e8:	6238      	str	r0, [r7, #32]
                    if (err) {
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	e094      	b.n	800582a <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	3340      	adds	r3, #64	; 0x40
 8005704:	4619      	mov	r1, r3
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7fa ffde 	bl	80006c8 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7fb feda 	bl	80014c6 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005718:	68fc      	ldr	r4, [r7, #12]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	3238      	adds	r2, #56	; 0x38
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	313c      	adds	r1, #60	; 0x3c
 800572a:	9102      	str	r1, [sp, #8]
 800572c:	9201      	str	r2, [sp, #4]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	462b      	mov	r3, r5
 8005732:	4622      	mov	r2, r4
 8005734:	4601      	mov	r1, r0
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff f868 	bl	800480c <lfs_ctz_extend>
 800573c:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00f      	beq.n	8005764 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	e06a      	b.n	800582a <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f06f 0201 	mvn.w	r2, #1
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	4619      	mov	r1, r3
 800577e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005780:	f7fa fee5 	bl	800054e <lfs_min>
 8005784:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800578c:	68fc      	ldr	r4, [r7, #12]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005796:	69b9      	ldr	r1, [r7, #24]
 8005798:	9103      	str	r1, [sp, #12]
 800579a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800579c:	9102      	str	r1, [sp, #8]
 800579e:	9201      	str	r2, [sp, #4]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	2301      	movs	r3, #1
 80057a4:	4622      	mov	r2, r4
 80057a6:	4601      	mov	r1, r0
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7fb fa35 	bl	8000c18 <lfs_bd_prog>
 80057ae:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01c      	beq.n	80057f0 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80057bc:	d007      	beq.n	80057ce <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	e02d      	b.n	800582a <lfs_file_flushedwrite+0x216>
                    goto relocate;
 80057ce:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f7ff fba6 	bl	8004f24 <lfs_file_relocate>
 80057d8:	6178      	str	r0, [r7, #20]
            if (err) {
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0d2      	beq.n	8005786 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	e01c      	b.n	800582a <lfs_file_flushedwrite+0x216>
            break;
 80057f0:	bf00      	nop
            }
        }

        file->pos += diff;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	441a      	add	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	441a      	add	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800580a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	4413      	add	r3, r2
 8005810:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ckpoint(lfs);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7fb fe53 	bl	80014c6 <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	f47f af29 	bne.w	800567a <lfs_file_flushedwrite+0x66>
    }

    return size;
 8005828:	683b      	ldr	r3, [r7, #0]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3730      	adds	r7, #48	; 0x30
 800582e:	46bd      	mov	sp, r7
 8005830:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005834 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b08a      	sub	sp, #40	; 0x28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <lfs_file_write_+0x28>
 800584e:	4b38      	ldr	r3, [pc, #224]	; (8005930 <lfs_file_write_+0xfc>)
 8005850:	4a38      	ldr	r2, [pc, #224]	; (8005934 <lfs_file_write_+0x100>)
 8005852:	f640 612f 	movw	r1, #3631	; 0xe2f
 8005856:	4838      	ldr	r0, [pc, #224]	; (8005938 <lfs_file_write_+0x104>)
 8005858:	f00b fb70 	bl	8010f3c <__assert_func>

    if (file->flags & LFS_F_READING) {
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d009      	beq.n	800587c <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7ff fc56 	bl	800511c <lfs_file_flush>
 8005870:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <lfs_file_write_+0x48>
            return err;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	e055      	b.n	8005928 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <lfs_file_write_+0x68>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	429a      	cmp	r2, r3
 8005892:	d203      	bcs.n	800589c <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	441a      	add	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d902      	bls.n	80058b2 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 80058ac:	f06f 031a 	mvn.w	r3, #26
 80058b0:	e03a      	b.n	8005928 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d121      	bne.n	8005902 <lfs_file_write_+0xce>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d91b      	bls.n	8005902 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 80058d8:	e00e      	b.n	80058f8 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80058da:	2300      	movs	r3, #0
 80058dc:	75fb      	strb	r3, [r7, #23]
 80058de:	f107 0217 	add.w	r2, r7, #23
 80058e2:	2301      	movs	r3, #1
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff fe94 	bl	8005614 <lfs_file_flushedwrite>
 80058ec:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	da01      	bge.n	80058f8 <lfs_file_write_+0xc4>
                return res;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	e017      	b.n	8005928 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d8eb      	bhi.n	80058da <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7ff fe83 	bl	8005614 <lfs_file_flushedwrite>
 800590e:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	da01      	bge.n	800591a <lfs_file_write_+0xe6>
        return nsize;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	e006      	b.n	8005928 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8005926:	69bb      	ldr	r3, [r7, #24]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3728      	adds	r7, #40	; 0x28
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	080123b8 	.word	0x080123b8
 8005934:	08012db4 	.word	0x08012db4
 8005938:	08012054 	.word	0x08012054

0800593c <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b08c      	sub	sp, #48	; 0x30
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <lfs_file_seek_+0x20>
        npos = off;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800595a:	e025      	b.n	80059a8 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d10f      	bne.n	8005982 <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4413      	add	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	da02      	bge.n	8005976 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8005970:	f06f 0315 	mvn.w	r3, #21
 8005974:	e067      	b.n	8005a46 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005980:	e012      	b.n	80059a8 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d10f      	bne.n	80059a8 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f875 	bl	8005a7a <lfs_file_size_>
 8005990:	4602      	mov	r2, r0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4413      	add	r3, r2
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	da02      	bge.n	80059a4 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 800599e:	f06f 0315 	mvn.w	r3, #21
 80059a2:	e050      	b.n	8005a46 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d902      	bls.n	80059b8 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 80059b2:	f06f 0315 	mvn.w	r3, #21
 80059b6:	e046      	b.n	8005a46 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059be:	429a      	cmp	r2, r3
 80059c0:	d101      	bne.n	80059c6 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	e03f      	b.n	8005a46 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d12b      	bne.n	8005a2a <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	f107 0318 	add.w	r3, r7, #24
 80059dc:	4619      	mov	r1, r3
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7fe fe71 	bl	80046c6 <lfs_ctz_index>
 80059e4:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 80059ea:	f107 0314 	add.w	r3, r7, #20
 80059ee:	4619      	mov	r1, r3
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7fe fe68 	bl	80046c6 <lfs_ctz_index>
 80059f6:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 80059f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d114      	bne.n	8005a2a <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d80f      	bhi.n	8005a2a <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a12:	441a      	add	r2, r3
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d907      	bls.n	8005a2a <lfs_file_seek_+0xee>
            file->pos = npos;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a1e:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	e00d      	b.n	8005a46 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff fb75 	bl	800511c <lfs_file_flush>
 8005a32:	61f8      	str	r0, [r7, #28]
    if (err) {
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <lfs_file_seek_+0x102>
        return err;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	e003      	b.n	8005a46 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a42:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3730      	adds	r7, #48	; 0x30
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <lfs_file_rewind_>:
static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}

static int lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file) {
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
    lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ff6c 	bl	800593c <lfs_file_seek_>
 8005a64:	60f8      	str	r0, [r7, #12]
    if (res < 0) {
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	da01      	bge.n	8005a70 <lfs_file_rewind_+0x22>
        return (int)res;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	e000      	b.n	8005a72 <lfs_file_rewind_+0x24>
    }

    return 0;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f7fa fd48 	bl	8000530 <lfs_max>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	e001      	b.n	8005aa8 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b08d      	sub	sp, #52	; 0x34
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6a1a      	ldr	r2, [r3, #32]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <lfs_init+0x34>
 8005ad6:	4b96      	ldr	r3, [pc, #600]	; (8005d30 <lfs_init+0x280>)
 8005ad8:	4a96      	ldr	r2, [pc, #600]	; (8005d34 <lfs_init+0x284>)
 8005ada:	f241 015b 	movw	r1, #4187	; 0x105b
 8005ade:	4896      	ldr	r0, [pc, #600]	; (8005d38 <lfs_init+0x288>)
 8005ae0:	f00b fa2c 	bl	8010f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <lfs_init+0x4c>
 8005aee:	4b93      	ldr	r3, [pc, #588]	; (8005d3c <lfs_init+0x28c>)
 8005af0:	4a90      	ldr	r2, [pc, #576]	; (8005d34 <lfs_init+0x284>)
 8005af2:	f241 015c 	movw	r1, #4188	; 0x105c
 8005af6:	4890      	ldr	r0, [pc, #576]	; (8005d38 <lfs_init+0x288>)
 8005af8:	f00b fa20 	bl	8010f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <lfs_init+0x64>
 8005b06:	4b8e      	ldr	r3, [pc, #568]	; (8005d40 <lfs_init+0x290>)
 8005b08:	4a8a      	ldr	r2, [pc, #552]	; (8005d34 <lfs_init+0x284>)
 8005b0a:	f241 015d 	movw	r1, #4189	; 0x105d
 8005b0e:	488a      	ldr	r0, [pc, #552]	; (8005d38 <lfs_init+0x288>)
 8005b10:	f00b fa14 	bl	8010f3c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b1e:	6952      	ldr	r2, [r2, #20]
 8005b20:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b24:	fb02 f201 	mul.w	r2, r2, r1
 8005b28:	1a9b      	subs	r3, r3, r2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d006      	beq.n	8005b3c <lfs_init+0x8c>
 8005b2e:	4b85      	ldr	r3, [pc, #532]	; (8005d44 <lfs_init+0x294>)
 8005b30:	4a80      	ldr	r2, [pc, #512]	; (8005d34 <lfs_init+0x284>)
 8005b32:	f241 0161 	movw	r1, #4193	; 0x1061
 8005b36:	4880      	ldr	r0, [pc, #512]	; (8005d38 <lfs_init+0x288>)
 8005b38:	f00b fa00 	bl	8010f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b46:	6992      	ldr	r2, [r2, #24]
 8005b48:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b4c:	fb02 f201 	mul.w	r2, r2, r1
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d006      	beq.n	8005b64 <lfs_init+0xb4>
 8005b56:	4b7c      	ldr	r3, [pc, #496]	; (8005d48 <lfs_init+0x298>)
 8005b58:	4a76      	ldr	r2, [pc, #472]	; (8005d34 <lfs_init+0x284>)
 8005b5a:	f241 0162 	movw	r1, #4194	; 0x1062
 8005b5e:	4876      	ldr	r0, [pc, #472]	; (8005d38 <lfs_init+0x288>)
 8005b60:	f00b f9ec 	bl	8010f3c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b74:	fb02 f201 	mul.w	r2, r2, r1
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d006      	beq.n	8005b8c <lfs_init+0xdc>
 8005b7e:	4b73      	ldr	r3, [pc, #460]	; (8005d4c <lfs_init+0x29c>)
 8005b80:	4a6c      	ldr	r2, [pc, #432]	; (8005d34 <lfs_init+0x284>)
 8005b82:	f241 0163 	movw	r1, #4195	; 0x1063
 8005b86:	486c      	ldr	r0, [pc, #432]	; (8005d38 <lfs_init+0x288>)
 8005b88:	f00b f9d8 	bl	8010f3c <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	2b7f      	cmp	r3, #127	; 0x7f
 8005b94:	d806      	bhi.n	8005ba4 <lfs_init+0xf4>
 8005b96:	4b6e      	ldr	r3, [pc, #440]	; (8005d50 <lfs_init+0x2a0>)
 8005b98:	4a66      	ldr	r2, [pc, #408]	; (8005d34 <lfs_init+0x284>)
 8005b9a:	f241 0166 	movw	r1, #4198	; 0x1066
 8005b9e:	4866      	ldr	r0, [pc, #408]	; (8005d38 <lfs_init+0x288>)
 8005ba0:	f00b f9cc 	bl	8010f3c <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	3b08      	subs	r3, #8
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fa fcff 	bl	80005b8 <lfs_npw2>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	009a      	lsls	r2, r3, #2
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d906      	bls.n	8005bd6 <lfs_init+0x126>
 8005bc8:	4b62      	ldr	r3, [pc, #392]	; (8005d54 <lfs_init+0x2a4>)
 8005bca:	4a5a      	ldr	r2, [pc, #360]	; (8005d34 <lfs_init+0x284>)
 8005bcc:	f241 0169 	movw	r1, #4201	; 0x1069
 8005bd0:	4859      	ldr	r0, [pc, #356]	; (8005d38 <lfs_init+0x288>)
 8005bd2:	f00b f9b3 	bl	8010f3c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <lfs_init+0x13e>
 8005be0:	4b5d      	ldr	r3, [pc, #372]	; (8005d58 <lfs_init+0x2a8>)
 8005be2:	4a54      	ldr	r2, [pc, #336]	; (8005d34 <lfs_init+0x284>)
 8005be4:	f241 0172 	movw	r1, #4210	; 0x1072
 8005be8:	4853      	ldr	r0, [pc, #332]	; (8005d38 <lfs_init+0x288>)
 8005bea:	f00b f9a7 	bl	8010f3c <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00f      	beq.n	8005c18 <lfs_init+0x168>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d206      	bcs.n	8005c18 <lfs_init+0x168>
 8005c0a:	4b54      	ldr	r3, [pc, #336]	; (8005d5c <lfs_init+0x2ac>)
 8005c0c:	4a49      	ldr	r2, [pc, #292]	; (8005d34 <lfs_init+0x284>)
 8005c0e:	f241 0178 	movw	r1, #4216	; 0x1078
 8005c12:	4849      	ldr	r0, [pc, #292]	; (8005d38 <lfs_init+0x288>)
 8005c14:	f00b f992 	bl	8010f3c <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c22:	d00e      	beq.n	8005c42 <lfs_init+0x192>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d906      	bls.n	8005c42 <lfs_init+0x192>
 8005c34:	4b4a      	ldr	r3, [pc, #296]	; (8005d60 <lfs_init+0x2b0>)
 8005c36:	4a3f      	ldr	r2, [pc, #252]	; (8005d34 <lfs_init+0x284>)
 8005c38:	f241 017a 	movw	r1, #4218	; 0x107a
 8005c3c:	483e      	ldr	r0, [pc, #248]	; (8005d38 <lfs_init+0x288>)
 8005c3e:	f00b f97d 	bl	8010f3c <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60da      	str	r2, [r3, #12]
 8005c56:	e010      	b.n	8005c7a <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fa fd0d 	bl	800067e <lfs_malloc>
 8005c64:	4602      	mov	r2, r0
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8005c72:	f06f 030b 	mvn.w	r3, #11
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005c78:	e163      	b.n	8005f42 <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	61da      	str	r2, [r3, #28]
 8005c8e:	e010      	b.n	8005cb2 <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fa fcf1 	bl	800067e <lfs_malloc>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8005caa:	f06f 030b 	mvn.w	r3, #11
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005cb0:	e147      	b.n	8005f42 <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fa fd06 	bl	80006c8 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fa fd00 	bl	80006c8 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <lfs_init+0x230>
 8005cd2:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <lfs_init+0x2b4>)
 8005cd4:	4a17      	ldr	r2, [pc, #92]	; (8005d34 <lfs_init+0x284>)
 8005cd6:	f241 0199 	movw	r1, #4249	; 0x1099
 8005cda:	4817      	ldr	r0, [pc, #92]	; (8005d38 <lfs_init+0x288>)
 8005cdc:	f00b f92e 	bl	8010f3c <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	665a      	str	r2, [r3, #100]	; 0x64
 8005cf4:	e010      	b.n	8005d18 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fa fcbe 	bl	800067e <lfs_malloc>
 8005d02:	4602      	mov	r2, r0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->lookahead.buffer) {
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d103      	bne.n	8005d18 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 8005d10:	f06f 030b 	mvn.w	r3, #11
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005d16:	e114      	b.n	8005f42 <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	2bff      	cmp	r3, #255	; 0xff
 8005d20:	d924      	bls.n	8005d6c <lfs_init+0x2bc>
 8005d22:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <lfs_init+0x2b8>)
 8005d24:	4a03      	ldr	r2, [pc, #12]	; (8005d34 <lfs_init+0x284>)
 8005d26:	f241 01a5 	movw	r1, #4261	; 0x10a5
 8005d2a:	4803      	ldr	r0, [pc, #12]	; (8005d38 <lfs_init+0x288>)
 8005d2c:	f00b f906 	bl	8010f3c <__assert_func>
 8005d30:	080123e8 	.word	0x080123e8
 8005d34:	08012dc4 	.word	0x08012dc4
 8005d38:	08012054 	.word	0x08012054
 8005d3c:	08012404 	.word	0x08012404
 8005d40:	08012420 	.word	0x08012420
 8005d44:	0801243c 	.word	0x0801243c
 8005d48:	0801246c 	.word	0x0801246c
 8005d4c:	0801249c 	.word	0x0801249c
 8005d50:	080124d0 	.word	0x080124d0
 8005d54:	080124ec 	.word	0x080124ec
 8005d58:	08012538 	.word	0x08012538
 8005d5c:	08012554 	.word	0x08012554
 8005d60:	080125a8 	.word	0x080125a8
 8005d64:	08012608 	.word	0x08012608
 8005d68:	08012628 	.word	0x08012628
    lfs->name_max = lfs->cfg->name_max;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d102      	bne.n	8005d84 <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	22ff      	movs	r2, #255	; 0xff
 8005d82:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	da06      	bge.n	8005d9c <lfs_init+0x2ec>
 8005d8e:	4b71      	ldr	r3, [pc, #452]	; (8005f54 <lfs_init+0x4a4>)
 8005d90:	4a71      	ldr	r2, [pc, #452]	; (8005f58 <lfs_init+0x4a8>)
 8005d92:	f241 01ab 	movw	r1, #4267	; 0x10ab
 8005d96:	4871      	ldr	r0, [pc, #452]	; (8005f5c <lfs_init+0x4ac>)
 8005d98:	f00b f8d0 	bl	8010f3c <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005db4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dbc:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d906      	bls.n	8005dd2 <lfs_init+0x322>
 8005dc4:	4b66      	ldr	r3, [pc, #408]	; (8005f60 <lfs_init+0x4b0>)
 8005dc6:	4a64      	ldr	r2, [pc, #400]	; (8005f58 <lfs_init+0x4a8>)
 8005dc8:	f241 01b1 	movw	r1, #4273	; 0x10b1
 8005dcc:	4863      	ldr	r0, [pc, #396]	; (8005f5c <lfs_init+0x4ac>)
 8005dce:	f00b f8b5 	bl	8010f3c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005dea:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d906      	bls.n	8005e0a <lfs_init+0x35a>
 8005dfc:	4b59      	ldr	r3, [pc, #356]	; (8005f64 <lfs_init+0x4b4>)
 8005dfe:	4a56      	ldr	r2, [pc, #344]	; (8005f58 <lfs_init+0x4a8>)
 8005e00:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8005e04:	4855      	ldr	r0, [pc, #340]	; (8005f5c <lfs_init+0x4ac>)
 8005e06:	f00b f899 	bl	8010f3c <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d00e      	beq.n	8005e34 <lfs_init+0x384>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d906      	bls.n	8005e34 <lfs_init+0x384>
 8005e26:	4b50      	ldr	r3, [pc, #320]	; (8005f68 <lfs_init+0x4b8>)
 8005e28:	4a4b      	ldr	r2, [pc, #300]	; (8005f58 <lfs_init+0x4a8>)
 8005e2a:	f241 01b9 	movw	r1, #4281	; 0x10b9
 8005e2e:	484b      	ldr	r0, [pc, #300]	; (8005f5c <lfs_init+0x4ac>)
 8005e30:	f00b f884 	bl	8010f3c <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3e:	d00d      	beq.n	8005e5c <lfs_init+0x3ac>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d906      	bls.n	8005e5c <lfs_init+0x3ac>
 8005e4e:	4b47      	ldr	r3, [pc, #284]	; (8005f6c <lfs_init+0x4bc>)
 8005e50:	4a41      	ldr	r2, [pc, #260]	; (8005f58 <lfs_init+0x4a8>)
 8005e52:	f241 01bb 	movw	r1, #4283	; 0x10bb
 8005e56:	4841      	ldr	r0, [pc, #260]	; (8005f5c <lfs_init+0x4ac>)
 8005e58:	f00b f870 	bl	8010f3c <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d019      	beq.n	8005e9c <lfs_init+0x3ec>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <lfs_init+0x3d2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7e:	08db      	lsrs	r3, r3, #3
 8005e80:	e003      	b.n	8005e8a <lfs_init+0x3da>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	08db      	lsrs	r3, r3, #3
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d206      	bcs.n	8005e9c <lfs_init+0x3ec>
 8005e8e:	4b38      	ldr	r3, [pc, #224]	; (8005f70 <lfs_init+0x4c0>)
 8005e90:	4a31      	ldr	r2, [pc, #196]	; (8005f58 <lfs_init+0x4a8>)
 8005e92:	f241 01bd 	movw	r1, #4285	; 0x10bd
 8005e96:	4831      	ldr	r0, [pc, #196]	; (8005f5c <lfs_init+0x4ac>)
 8005e98:	f00b f850 	bl	8010f3c <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	67da      	str	r2, [r3, #124]	; 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d103      	bne.n	8005eb8 <lfs_init+0x408>
        lfs->inline_max = 0;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	67da      	str	r2, [r3, #124]	; 0x7c
 8005eb6:	e022      	b.n	8005efe <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d11e      	bne.n	8005efe <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->inline_max = lfs_min(
 8005ec4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 8005eda:	08db      	lsrs	r3, r3, #3
 8005edc:	e003      	b.n	8005ee6 <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee2:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 8005ee4:	08db      	lsrs	r3, r3, #3
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f7fa fb30 	bl	800054e <lfs_min>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f7fa fb2b 	bl	800054e <lfs_min>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f04f 32ff 	mov.w	r2, #4294967295
 8005f04:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	333c      	adds	r3, #60	; 0x3c
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	605a      	str	r2, [r3, #4]
 8005f24:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3330      	adds	r3, #48	; 0x30
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	605a      	str	r2, [r3, #4]
 8005f30:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3348      	adds	r3, #72	; 0x48
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e003      	b.n	8005f4a <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f816 	bl	8005f74 <lfs_deinit>
    return err;
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3734      	adds	r7, #52	; 0x34
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}
 8005f52:	bf00      	nop
 8005f54:	08012644 	.word	0x08012644
 8005f58:	08012dc4 	.word	0x08012dc4
 8005f5c:	08012054 	.word	0x08012054
 8005f60:	08012668 	.word	0x08012668
 8005f64:	08012684 	.word	0x08012684
 8005f68:	080126b4 	.word	0x080126b4
 8005f6c:	0801270c 	.word	0x0801270c
 8005f70:	0801275c 	.word	0x0801275c

08005f74 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fa fb83 	bl	8000696 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d104      	bne.n	8005fa4 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fa fb79 	bl	8000696 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa fb6f 	bl	8000696 <lfs_free>
    }

    return 0;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b0a0      	sub	sp, #128	; 0x80
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
    int err = 0;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff fd6b 	bl	8005ab0 <lfs_init>
 8005fda:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <lfs_format_+0x22>
            return err;
 8005fe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fe4:	e08d      	b.n	8006102 <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <lfs_format_+0x38>
 8005fee:	4b47      	ldr	r3, [pc, #284]	; (800610c <lfs_format_+0x148>)
 8005ff0:	4a47      	ldr	r2, [pc, #284]	; (8006110 <lfs_format_+0x14c>)
 8005ff2:	f241 01fd 	movw	r1, #4349	; 0x10fd
 8005ff6:	4847      	ldr	r0, [pc, #284]	; (8006114 <lfs_format_+0x150>)
 8005ff8:	f00a ffa0 	bl	8010f3c <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	461a      	mov	r2, r3
 8006008:	2100      	movs	r1, #0
 800600a:	f00b f81d 	bl	8011048 <memset>
        lfs->lookahead.start = 0;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	00da      	lsls	r2, r3, #3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f7fa fa93 	bl	800054e <lfs_min>
 8006028:	4602      	mov	r2, r0
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ckpoint(lfs);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fb fa46 	bl	80014c6 <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800603a:	f107 030c 	add.w	r3, r7, #12
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fd f935 	bl	80032b0 <lfs_dir_alloc>
 8006046:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006048:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800604a:	2b00      	cmp	r3, #0
 800604c:	d150      	bne.n	80060f0 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fb fa12 	bl	8001478 <lfs_fs_disk_version>
 8006054:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8006056:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800605c:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 800605e:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8006064:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800606a:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8006070:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 8006076:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8006078:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800607c:	4618      	mov	r0, r3
 800607e:	f7fb f975 	bl	800136c <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006082:	4b25      	ldr	r3, [pc, #148]	; (8006118 <lfs_format_+0x154>)
 8006084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006086:	2300      	movs	r3, #0
 8006088:	653b      	str	r3, [r7, #80]	; 0x50
 800608a:	4b24      	ldr	r3, [pc, #144]	; (800611c <lfs_format_+0x158>)
 800608c:	657b      	str	r3, [r7, #84]	; 0x54
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <lfs_format_+0x15c>)
 8006090:	65bb      	str	r3, [r7, #88]	; 0x58
 8006092:	4b24      	ldr	r3, [pc, #144]	; (8006124 <lfs_format_+0x160>)
 8006094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006096:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800609a:	663b      	str	r3, [r7, #96]	; 0x60
 800609c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80060a0:	f107 010c 	add.w	r1, r7, #12
 80060a4:	2303      	movs	r3, #3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fe fae8 	bl	800467c <lfs_dir_commit>
 80060ac:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80060ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d11f      	bne.n	80060f4 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80060b4:	2300      	movs	r3, #0
 80060b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80060ba:	f107 010c 	add.w	r1, r7, #12
 80060be:	2300      	movs	r3, #0
 80060c0:	2200      	movs	r2, #0
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fe fada 	bl	800467c <lfs_dir_commit>
 80060c8:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80060ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d113      	bne.n	80060f8 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80060d0:	2300      	movs	r3, #0
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d4:	2301      	movs	r3, #1
 80060d6:	633b      	str	r3, [r7, #48]	; 0x30
 80060d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80060dc:	f107 030c 	add.w	r3, r7, #12
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc fd2c 	bl	8002b40 <lfs_dir_fetch>
 80060e8:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80060ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	e004      	b.n	80060fa <lfs_format_+0x136>
            goto cleanup;
 80060f0:	bf00      	nop
 80060f2:	e002      	b.n	80060fa <lfs_format_+0x136>
            goto cleanup;
 80060f4:	bf00      	nop
 80060f6:	e000      	b.n	80060fa <lfs_format_+0x136>
            goto cleanup;
 80060f8:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff ff3a 	bl	8005f74 <lfs_deinit>
    return err;
 8006100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8006102:	4618      	mov	r0, r3
 8006104:	3780      	adds	r7, #128	; 0x80
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	080127ec 	.word	0x080127ec
 8006110:	08012dd0 	.word	0x08012dd0
 8006114:	08012054 	.word	0x08012054
 8006118:	40100000 	.word	0x40100000
 800611c:	0ff00008 	.word	0x0ff00008
 8006120:	08012804 	.word	0x08012804
 8006124:	20100018 	.word	0x20100018

08006128 <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8006128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800612a:	b0a1      	sub	sp, #132	; 0x84
 800612c:	af04      	add	r7, sp, #16
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff fcbb 	bl	8005ab0 <lfs_init>
 800613a:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err) {
 800613c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <lfs_mount_+0x1e>
        return err;
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	e202      	b.n	800654c <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006146:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800614a:	2220      	movs	r2, #32
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f00a ff7a 	bl	8011048 <memset>
 8006154:	2301      	movs	r3, #1
 8006156:	657b      	str	r3, [r7, #84]	; 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006158:	4a9a      	ldr	r2, [pc, #616]	; (80063c4 <lfs_mount_+0x29c>)
 800615a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800615e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006162:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006166:	2301      	movs	r3, #1
 8006168:	66bb      	str	r3, [r7, #104]	; 0x68
    lfs_size_t tortoise_period = 1;
 800616a:	2301      	movs	r3, #1
 800616c:	667b      	str	r3, [r7, #100]	; 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 800616e:	e199      	b.n	80064a4 <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8006170:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006174:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006178:	3318      	adds	r3, #24
 800617a:	4611      	mov	r1, r2
 800617c:	4618      	mov	r0, r3
 800617e:	f7fa fe80 	bl	8000e82 <lfs_pair_issync>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 8006188:	4b8f      	ldr	r3, [pc, #572]	; (80063c8 <lfs_mount_+0x2a0>)
 800618a:	f241 1246 	movw	r2, #4422	; 0x1146
 800618e:	498f      	ldr	r1, [pc, #572]	; (80063cc <lfs_mount_+0x2a4>)
 8006190:	488f      	ldr	r0, [pc, #572]	; (80063d0 <lfs_mount_+0x2a8>)
 8006192:	f00b faf5 	bl	8011780 <iprintf>
            err = LFS_ERR_CORRUPT;
 8006196:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800619a:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto cleanup;
 800619c:	e1d2      	b.n	8006544 <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 800619e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d108      	bne.n	80061b8 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 80061a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a8:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise[1] = dir.tail[1];
 80061aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
            tortoise_i = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	66bb      	str	r3, [r7, #104]	; 0x68
            tortoise_period *= 2;
 80061b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	667b      	str	r3, [r7, #100]	; 0x64
        }
        tortoise_i += 1;
 80061b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ba:	3301      	adds	r3, #1
 80061bc:	66bb      	str	r3, [r7, #104]	; 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
 80061c2:	4b84      	ldr	r3, [pc, #528]	; (80063d4 <lfs_mount_+0x2ac>)
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c6:	2308      	movs	r3, #8
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80061ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80061ce:	f103 0218 	add.w	r2, r3, #24
 80061d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80061d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061da:	9303      	str	r3, [sp, #12]
 80061dc:	4b7e      	ldr	r3, [pc, #504]	; (80063d8 <lfs_mount_+0x2b0>)
 80061de:	9302      	str	r3, [sp, #8]
 80061e0:	2300      	movs	r3, #0
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	4b7d      	ldr	r3, [pc, #500]	; (80063dc <lfs_mount_+0x2b4>)
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	4b7d      	ldr	r3, [pc, #500]	; (80063e0 <lfs_mount_+0x2b8>)
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fc f8e0 	bl	80023b0 <lfs_dir_fetchmatch>
 80061f0:	65f8      	str	r0, [r7, #92]	; 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80061f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	da02      	bge.n	80061fe <lfs_mount_+0xd6>
            err = tag;
 80061f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061fa:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto cleanup;
 80061fc:	e1a2      	b.n	8006544 <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80061fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8142 	beq.w	800648a <lfs_mount_+0x362>
 8006206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006208:	4618      	mov	r0, r3
 800620a:	f7fa fea7 	bl	8000f5c <lfs_tag_isdelete>
 800620e:	4603      	mov	r3, r0
 8006210:	f083 0301 	eor.w	r3, r3, #1
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 8137 	beq.w	800648a <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 800621c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8006222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8006228:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800622c:	f107 030c 	add.w	r3, r7, #12
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	4b6c      	ldr	r3, [pc, #432]	; (80063e4 <lfs_mount_+0x2bc>)
 8006234:	4a6a      	ldr	r2, [pc, #424]	; (80063e0 <lfs_mount_+0x2b8>)
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fb fb58 	bl	80018ec <lfs_dir_get>
 800623c:	65f8      	str	r0, [r7, #92]	; 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800623e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006240:	2b00      	cmp	r3, #0
 8006242:	da02      	bge.n	800624a <lfs_mount_+0x122>
                err = tag;
 8006244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006246:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 8006248:	e17c      	b.n	8006544 <lfs_mount_+0x41c>
            }
            lfs_superblock_fromle32(&superblock);
 800624a:	f107 030c 	add.w	r3, r7, #12
 800624e:	4618      	mov	r0, r3
 8006250:	f7fb f854 	bl	80012fc <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	0c1b      	lsrs	r3, r3, #16
 8006258:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fb f914 	bl	8001490 <lfs_fs_disk_version_major>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006270:	4293      	cmp	r3, r2
 8006272:	d108      	bne.n	8006286 <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7fb f919 	bl	80014ac <lfs_fs_disk_version_minor>
 800627a:	4603      	mov	r3, r0
 800627c:	461a      	mov	r2, r3
 800627e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8006282:	4293      	cmp	r3, r2
 8006284:	d91d      	bls.n	80062c2 <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 8006286:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
 800628a:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fb f8fe 	bl	8001490 <lfs_fs_disk_version_major>
 8006294:	4603      	mov	r3, r0
 8006296:	461e      	mov	r6, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7fb f907 	bl	80014ac <lfs_fs_disk_version_minor>
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	4b49      	ldr	r3, [pc, #292]	; (80063c8 <lfs_mount_+0x2a0>)
 80062a4:	9303      	str	r3, [sp, #12]
 80062a6:	9202      	str	r2, [sp, #8]
 80062a8:	9601      	str	r6, [sp, #4]
 80062aa:	9400      	str	r4, [sp, #0]
 80062ac:	462b      	mov	r3, r5
 80062ae:	f241 1274 	movw	r2, #4468	; 0x1174
 80062b2:	4946      	ldr	r1, [pc, #280]	; (80063cc <lfs_mount_+0x2a4>)
 80062b4:	484c      	ldr	r0, [pc, #304]	; (80063e8 <lfs_mount_+0x2c0>)
 80062b6:	f00b fa63 	bl	8011780 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80062ba:	f06f 0315 	mvn.w	r3, #21
 80062be:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 80062c0:	e0e2      	b.n	8006488 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 80062c2:	2300      	movs	r3, #0
 80062c4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fb f8ef 	bl	80014ac <lfs_fs_disk_version_minor>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d21c      	bcs.n	8006314 <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 80062da:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
 80062de:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb f8d4 	bl	8001490 <lfs_fs_disk_version_major>
 80062e8:	4603      	mov	r3, r0
 80062ea:	461e      	mov	r6, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7fb f8dd 	bl	80014ac <lfs_fs_disk_version_minor>
 80062f2:	4603      	mov	r3, r0
 80062f4:	461a      	mov	r2, r3
 80062f6:	4b34      	ldr	r3, [pc, #208]	; (80063c8 <lfs_mount_+0x2a0>)
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	9202      	str	r2, [sp, #8]
 80062fc:	9601      	str	r6, [sp, #4]
 80062fe:	9400      	str	r4, [sp, #0]
 8006300:	462b      	mov	r3, r5
 8006302:	f241 1283 	movw	r2, #4483	; 0x1183
 8006306:	4931      	ldr	r1, [pc, #196]	; (80063cc <lfs_mount_+0x2a4>)
 8006308:	4838      	ldr	r0, [pc, #224]	; (80063ec <lfs_mount_+0x2c4>)
 800630a:	f00b fa39 	bl	8011780 <iprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 800630e:	2301      	movs	r3, #1
 8006310:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8006314:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fbb6 	bl	8006a8c <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d018      	beq.n	8006358 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632c:	429a      	cmp	r2, r3
 800632e:	d910      	bls.n	8006352 <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	4924      	ldr	r1, [pc, #144]	; (80063c8 <lfs_mount_+0x2a0>)
 8006338:	9101      	str	r1, [sp, #4]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	f241 1292 	movw	r2, #4498	; 0x1192
 8006342:	4922      	ldr	r1, [pc, #136]	; (80063cc <lfs_mount_+0x2a4>)
 8006344:	482a      	ldr	r0, [pc, #168]	; (80063f0 <lfs_mount_+0x2c8>)
 8006346:	f00b fa1b 	bl	8011780 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800634a:	f06f 0315 	mvn.w	r3, #21
 800634e:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 8006350:	e09a      	b.n	8006488 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d018      	beq.n	8006390 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006364:	429a      	cmp	r2, r3
 8006366:	d910      	bls.n	800638a <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636e:	4916      	ldr	r1, [pc, #88]	; (80063c8 <lfs_mount_+0x2a0>)
 8006370:	9101      	str	r1, [sp, #4]
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	f241 129d 	movw	r2, #4509	; 0x119d
 800637a:	4914      	ldr	r1, [pc, #80]	; (80063cc <lfs_mount_+0x2a4>)
 800637c:	481d      	ldr	r0, [pc, #116]	; (80063f4 <lfs_mount_+0x2cc>)
 800637e:	f00b f9ff 	bl	8011780 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8006382:	f06f 0315 	mvn.w	r3, #21
 8006386:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 8006388:	e07e      	b.n	8006488 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d040      	beq.n	8006418 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800639c:	429a      	cmp	r2, r3
 800639e:	d92d      	bls.n	80063fc <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a6:	4908      	ldr	r1, [pc, #32]	; (80063c8 <lfs_mount_+0x2a0>)
 80063a8:	9101      	str	r1, [sp, #4]
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	f241 12a8 	movw	r2, #4520	; 0x11a8
 80063b2:	4906      	ldr	r1, [pc, #24]	; (80063cc <lfs_mount_+0x2a4>)
 80063b4:	4810      	ldr	r0, [pc, #64]	; (80063f8 <lfs_mount_+0x2d0>)
 80063b6:	f00b f9e3 	bl	8011780 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80063ba:	f06f 0315 	mvn.w	r3, #21
 80063be:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 80063c0:	e062      	b.n	8006488 <lfs_mount_+0x360>
 80063c2:	bf00      	nop
 80063c4:	080121a4 	.word	0x080121a4
 80063c8:	08012160 	.word	0x08012160
 80063cc:	08012054 	.word	0x08012054
 80063d0:	08012810 	.word	0x08012810
 80063d4:	08012804 	.word	0x08012804
 80063d8:	08002bdd 	.word	0x08002bdd
 80063dc:	0ff00008 	.word	0x0ff00008
 80063e0:	7ffffc00 	.word	0x7ffffc00
 80063e4:	20100018 	.word	0x20100018
 80063e8:	0801283c 	.word	0x0801283c
 80063ec:	08012874 	.word	0x08012874
 80063f0:	080128b4 	.word	0x080128b4
 80063f4:	080128e8 	.word	0x080128e8
 80063f8:	0801291c 	.word	0x0801291c
                }

                lfs->attr_max = superblock.attr_max;
 80063fc:	6a3a      	ldr	r2, [r7, #32]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	679a      	str	r2, [r3, #120]	; 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7fa f89e 	bl	800054e <lfs_min>
 8006412:	4602      	mov	r2, r0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	67da      	str	r2, [r3, #124]	; 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d017      	beq.n	8006452 <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	429a      	cmp	r2, r3
 800642c:	d011      	beq.n	8006452 <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	4947      	ldr	r1, [pc, #284]	; (8006554 <lfs_mount_+0x42c>)
 8006438:	9101      	str	r1, [sp, #4]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	f241 12b7 	movw	r2, #4535	; 0x11b7
 8006442:	4945      	ldr	r1, [pc, #276]	; (8006558 <lfs_mount_+0x430>)
 8006444:	4845      	ldr	r0, [pc, #276]	; (800655c <lfs_mount_+0x434>)
 8006446:	f00b f99b 	bl	8011780 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800644a:	f06f 0315 	mvn.w	r3, #21
 800644e:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 8006450:	e01a      	b.n	8006488 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	429a      	cmp	r2, r3
 8006462:	d012      	beq.n	800648a <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	4939      	ldr	r1, [pc, #228]	; (8006554 <lfs_mount_+0x42c>)
 800646e:	9101      	str	r1, [sp, #4]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	4613      	mov	r3, r2
 8006474:	f44f 528e 	mov.w	r2, #4544	; 0x11c0
 8006478:	4937      	ldr	r1, [pc, #220]	; (8006558 <lfs_mount_+0x430>)
 800647a:	4839      	ldr	r0, [pc, #228]	; (8006560 <lfs_mount_+0x438>)
 800647c:	f00b f980 	bl	8011780 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8006480:	f06f 0315 	mvn.w	r3, #21
 8006484:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 8006486:	bf00      	nop
            goto cleanup;
 8006488:	e05c      	b.n	8006544 <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006490:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fc fb6e 	bl	8002b78 <lfs_dir_getgstate>
 800649c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800649e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d14e      	bne.n	8006542 <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 80064a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064a8:	3318      	adds	r3, #24
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fa fca6 	bl	8000dfc <lfs_pair_isnull>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f083 0301 	eor.w	r3, r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f47f ae59 	bne.w	8006170 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3330      	adds	r3, #48	; 0x30
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fa fdf5 	bl	80010b2 <lfs_gstate_iszero>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f083 0301 	eor.w	r3, r3, #1
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d010      	beq.n	80064f6 <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064e0:	481c      	ldr	r0, [pc, #112]	; (8006554 <lfs_mount_+0x42c>)
 80064e2:	9002      	str	r0, [sp, #8]
 80064e4:	9201      	str	r2, [sp, #4]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	460b      	mov	r3, r1
 80064ea:	f241 12d0 	movw	r2, #4560	; 0x11d0
 80064ee:	491a      	ldr	r1, [pc, #104]	; (8006558 <lfs_mount_+0x430>)
 80064f0:	481c      	ldr	r0, [pc, #112]	; (8006564 <lfs_mount_+0x43c>)
 80064f2:	f00b f945 	bl	8011780 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fa fd21 	bl	8000f42 <lfs_tag_isvalid>
 8006500:	4603      	mov	r3, r0
 8006502:	f083 0301 	eor.w	r3, r3, #1
 8006506:	b2db      	uxtb	r3, r3
 8006508:	461a      	mov	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	441a      	add	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	333c      	adds	r3, #60	; 0x3c
 800651a:	3230      	adds	r2, #48	; 0x30
 800651c:	ca07      	ldmia	r2, {r0, r1, r2}
 800651e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800652a:	fbb3 f1f2 	udiv	r1, r3, r2
 800652e:	fb02 f201 	mul.w	r2, r2, r1
 8006532:	1a9a      	subs	r2, r3, r2
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7fa ffd1 	bl	80014e0 <lfs_alloc_drop>

    return 0;
 800653e:	2300      	movs	r3, #0
 8006540:	e004      	b.n	800654c <lfs_mount_+0x424>
            goto cleanup;
 8006542:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f80f 	bl	8006568 <lfs_unmount_>
    return err;
 800654a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800654c:	4618      	mov	r0, r3
 800654e:	3774      	adds	r7, #116	; 0x74
 8006550:	46bd      	mov	sp, r7
 8006552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006554:	08012160 	.word	0x08012160
 8006558:	08012054 	.word	0x08012054
 800655c:	08012950 	.word	0x08012950
 8006560:	08012984 	.word	0x08012984
 8006564:	080129b4 	.word	0x080129b4

08006568 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fcff 	bl	8005f74 <lfs_deinit>
 8006576:	4603      	mov	r3, r0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b0a1      	sub	sp, #132	; 0x84
 8006584:	af04      	add	r7, sp, #16
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800658e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006592:	2220      	movs	r2, #32
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f00a fd56 	bl	8011048 <memset>
 800659c:	2301      	movs	r3, #1
 800659e:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80065a0:	4a9b      	ldr	r2, [pc, #620]	; (8006810 <lfs_fs_traverse_+0x290>)
 80065a2:	f107 031c 	add.w	r3, r7, #28
 80065a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065aa:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80065ae:	2301      	movs	r3, #1
 80065b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 80065b2:	2301      	movs	r3, #1
 80065b4:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 80065b6:	e0c1      	b.n	800673c <lfs_fs_traverse_+0x1bc>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80065b8:	f107 021c 	add.w	r2, r7, #28
 80065bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c0:	3318      	adds	r3, #24
 80065c2:	4611      	mov	r1, r2
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fa fc5c 	bl	8000e82 <lfs_pair_issync>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 80065d0:	4b90      	ldr	r3, [pc, #576]	; (8006814 <lfs_fs_traverse_+0x294>)
 80065d2:	f241 222b 	movw	r2, #4651	; 0x122b
 80065d6:	4990      	ldr	r1, [pc, #576]	; (8006818 <lfs_fs_traverse_+0x298>)
 80065d8:	4890      	ldr	r0, [pc, #576]	; (800681c <lfs_fs_traverse_+0x29c>)
 80065da:	f00b f8d1 	bl	8011780 <iprintf>
            return LFS_ERR_CORRUPT;
 80065de:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80065e2:	e110      	b.n	8006806 <lfs_fs_traverse_+0x286>
        }
        if (tortoise_i == tortoise_period) {
 80065e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d108      	bne.n	80065fe <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 80065ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ee:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 80065f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f2:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 80065f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 80065fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006600:	3301      	adds	r3, #1
 8006602:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 8006604:	2300      	movs	r3, #0
 8006606:	667b      	str	r3, [r7, #100]	; 0x64
 8006608:	e014      	b.n	8006634 <lfs_fs_traverse_+0xb4>
            int err = cb(data, dir.tail[i]);
 800660a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800660c:	3306      	adds	r3, #6
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006614:	4413      	add	r3, r2
 8006616:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4611      	mov	r1, r2
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
 8006622:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8006624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <lfs_fs_traverse_+0xae>
                return err;
 800662a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662c:	e0eb      	b.n	8006806 <lfs_fs_traverse_+0x286>
        for (int i = 0; i < 2; i++) {
 800662e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006630:	3301      	adds	r3, #1
 8006632:	667b      	str	r3, [r7, #100]	; 0x64
 8006634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006636:	2b01      	cmp	r3, #1
 8006638:	dde7      	ble.n	800660a <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800663a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800663e:	f103 0218 	add.w	r2, r3, #24
 8006642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006646:	4619      	mov	r1, r3
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f7fc fa79 	bl	8002b40 <lfs_dir_fetch>
 800664e:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8006650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <lfs_fs_traverse_+0xda>
            return err;
 8006656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006658:	e0d5      	b.n	8006806 <lfs_fs_traverse_+0x286>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800665a:	2300      	movs	r3, #0
 800665c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006660:	e067      	b.n	8006732 <lfs_fs_traverse_+0x1b2>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006662:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006666:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800666c:	f043 0308 	orr.w	r3, r3, #8
 8006670:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006674:	f107 0214 	add.w	r2, r7, #20
 8006678:	9200      	str	r2, [sp, #0]
 800667a:	4a69      	ldr	r2, [pc, #420]	; (8006820 <lfs_fs_traverse_+0x2a0>)
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7fb f935 	bl	80018ec <lfs_dir_get>
 8006682:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 8006684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006686:	2b00      	cmp	r3, #0
 8006688:	da05      	bge.n	8006696 <lfs_fs_traverse_+0x116>
                if (tag == LFS_ERR_NOENT) {
 800668a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800668c:	f113 0f02 	cmn.w	r3, #2
 8006690:	d049      	beq.n	8006726 <lfs_fs_traverse_+0x1a6>
                    continue;
                }
                return tag;
 8006692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006694:	e0b7      	b.n	8006806 <lfs_fs_traverse_+0x286>
            }
            lfs_ctz_fromle32(&ctz);
 8006696:	f107 0314 	add.w	r3, r7, #20
 800669a:	4618      	mov	r0, r3
 800669c:	f7fa fdfe 	bl	800129c <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80066a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fa fc8a 	bl	8000fbc <lfs_tag_type3>
 80066a8:	4603      	mov	r3, r0
 80066aa:	461a      	mov	r2, r3
 80066ac:	f240 2302 	movw	r3, #514	; 0x202
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d113      	bne.n	80066dc <lfs_fs_traverse_+0x15c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80066b4:	68f9      	ldr	r1, [r7, #12]
 80066b6:	6978      	ldr	r0, [r7, #20]
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	9202      	str	r2, [sp, #8]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	9201      	str	r2, [sp, #4]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	4603      	mov	r3, r0
 80066c6:	460a      	mov	r2, r1
 80066c8:	2100      	movs	r1, #0
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7fe f9a6 	bl	8004a1c <lfs_ctz_traverse>
 80066d0:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80066d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d027      	beq.n	8006728 <lfs_fs_traverse_+0x1a8>
                    return err;
 80066d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066da:	e094      	b.n	8006806 <lfs_fs_traverse_+0x286>
                }
            } else if (includeorphans &&
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d022      	beq.n	8006728 <lfs_fs_traverse_+0x1a8>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80066e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fa fc69 	bl	8000fbc <lfs_tag_type3>
 80066ea:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80066ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066f0:	d11a      	bne.n	8006728 <lfs_fs_traverse_+0x1a8>
                for (int i = 0; i < 2; i++) {
 80066f2:	2300      	movs	r3, #0
 80066f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066f6:	e012      	b.n	800671e <lfs_fs_traverse_+0x19e>
                    err = cb(data, (&ctz.head)[i]);
 80066f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	f107 0214 	add.w	r2, r7, #20
 8006700:	4413      	add	r3, r2
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4611      	mov	r1, r2
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
 800670c:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 800670e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <lfs_fs_traverse_+0x198>
                        return err;
 8006714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006716:	e076      	b.n	8006806 <lfs_fs_traverse_+0x286>
                for (int i = 0; i < 2; i++) {
 8006718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800671a:	3301      	adds	r3, #1
 800671c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800671e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006720:	2b01      	cmp	r3, #1
 8006722:	dde9      	ble.n	80066f8 <lfs_fs_traverse_+0x178>
 8006724:	e000      	b.n	8006728 <lfs_fs_traverse_+0x1a8>
                    continue;
 8006726:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006728:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800672c:	3301      	adds	r3, #1
 800672e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006732:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006734:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8006738:	429a      	cmp	r2, r3
 800673a:	d392      	bcc.n	8006662 <lfs_fs_traverse_+0xe2>
    while (!lfs_pair_isnull(dir.tail)) {
 800673c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006740:	3318      	adds	r3, #24
 8006742:	4618      	mov	r0, r3
 8006744:	f7fa fb5a 	bl	8000dfc <lfs_pair_isnull>
 8006748:	4603      	mov	r3, r0
 800674a:	f083 0301 	eor.w	r3, r3, #1
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	f47f af31 	bne.w	80065b8 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675a:	65bb      	str	r3, [r7, #88]	; 0x58
 800675c:	e04f      	b.n	80067fe <lfs_fs_traverse_+0x27e>
        if (f->type != LFS_TYPE_REG) {
 800675e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006760:	799b      	ldrb	r3, [r3, #6]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d147      	bne.n	80067f6 <lfs_fs_traverse_+0x276>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006766:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01d      	beq.n	80067ae <lfs_fs_traverse_+0x22e>
 8006772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d117      	bne.n	80067ae <lfs_fs_traverse_+0x22e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800677e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006780:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006788:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800678a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	9202      	str	r2, [sp, #8]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	9201      	str	r2, [sp, #4]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4623      	mov	r3, r4
 800679a:	4602      	mov	r2, r0
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7fe f93d 	bl	8004a1c <lfs_ctz_traverse>
 80067a2:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80067a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <lfs_fs_traverse_+0x22e>
                return err;
 80067aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ac:	e02b      	b.n	8006806 <lfs_fs_traverse_+0x286>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80067ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d01e      	beq.n	80067f8 <lfs_fs_traverse_+0x278>
 80067ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d118      	bne.n	80067f8 <lfs_fs_traverse_+0x278>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80067c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067c8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067d0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80067d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	9202      	str	r2, [sp, #8]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	9201      	str	r2, [sp, #4]
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	4623      	mov	r3, r4
 80067e2:	4602      	mov	r2, r0
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7fe f919 	bl	8004a1c <lfs_ctz_traverse>
 80067ea:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 80067ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <lfs_fs_traverse_+0x278>
                return err;
 80067f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f4:	e007      	b.n	8006806 <lfs_fs_traverse_+0x286>
            continue;
 80067f6:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80067f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80067fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1ac      	bne.n	800675e <lfs_fs_traverse_+0x1de>
            }
        }
    }
#endif

    return 0;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3774      	adds	r7, #116	; 0x74
 800680a:	46bd      	mov	sp, r7
 800680c:	bd90      	pop	{r4, r7, pc}
 800680e:	bf00      	nop
 8006810:	080121a4 	.word	0x080121a4
 8006814:	08012160 	.word	0x08012160
 8006818:	08012054 	.word	0x08012054
 800681c:	08012810 	.word	0x08012810
 8006820:	700ffc00 	.word	0x700ffc00

08006824 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	; 0x28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800683c:	4a2d      	ldr	r2, [pc, #180]	; (80068f4 <lfs_fs_pred+0xd0>)
 800683e:	f107 0314 	add.w	r3, r7, #20
 8006842:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006846:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800684a:	2301      	movs	r3, #1
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 800684e:	2301      	movs	r3, #1
 8006850:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8006852:	e03e      	b.n	80068d2 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3318      	adds	r3, #24
 8006858:	f107 0214 	add.w	r2, r7, #20
 800685c:	4611      	mov	r1, r2
 800685e:	4618      	mov	r0, r3
 8006860:	f7fa fb0f 	bl	8000e82 <lfs_pair_issync>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800686a:	4b23      	ldr	r3, [pc, #140]	; (80068f8 <lfs_fs_pred+0xd4>)
 800686c:	f241 2289 	movw	r2, #4745	; 0x1289
 8006870:	4922      	ldr	r1, [pc, #136]	; (80068fc <lfs_fs_pred+0xd8>)
 8006872:	4823      	ldr	r0, [pc, #140]	; (8006900 <lfs_fs_pred+0xdc>)
 8006874:	f00a ff84 	bl	8011780 <iprintf>
            return LFS_ERR_CORRUPT;
 8006878:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800687c:	e036      	b.n	80068ec <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 800687e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	429a      	cmp	r2, r3
 8006884:	d10a      	bne.n	800689c <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	3301      	adds	r3, #1
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3318      	adds	r3, #24
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fa fac1 	bl	8000e30 <lfs_pair_cmp>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <lfs_fs_pred+0x94>
            return 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e019      	b.n	80068ec <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3318      	adds	r3, #24
 80068bc:	461a      	mov	r2, r3
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7fc f93d 	bl	8002b40 <lfs_dir_fetch>
 80068c6:	61f8      	str	r0, [r7, #28]
        if (err) {
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <lfs_fs_pred+0xae>
            return err;
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	e00c      	b.n	80068ec <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3318      	adds	r3, #24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fa fa90 	bl	8000dfc <lfs_pair_isnull>
 80068dc:	4603      	mov	r3, r0
 80068de:	f083 0301 	eor.w	r3, r3, #1
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1b5      	bne.n	8006854 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 80068e8:	f06f 0301 	mvn.w	r3, #1
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3728      	adds	r7, #40	; 0x28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	080121a4 	.word	0x080121a4
 80068f8:	08012160 	.word	0x08012160
 80068fc:	08012054 	.word	0x08012054
 8006900:	08012810 	.word	0x08012810

08006904 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006904:	b5b0      	push	{r4, r5, r7, lr}
 8006906:	b08e      	sub	sp, #56	; 0x38
 8006908:	af04      	add	r7, sp, #16
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006924:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 800692a:	69dd      	ldr	r5, [r3, #28]
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	6852      	ldr	r2, [r2, #4]
 8006934:	2108      	movs	r1, #8
 8006936:	9103      	str	r1, [sp, #12]
 8006938:	f107 0110 	add.w	r1, r7, #16
 800693c:	9102      	str	r1, [sp, #8]
 800693e:	9201      	str	r2, [sp, #4]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	462b      	mov	r3, r5
 8006944:	4622      	mov	r2, r4
 8006946:	4601      	mov	r1, r0
 8006948:	6a38      	ldr	r0, [r7, #32]
 800694a:	f7f9 fed3 	bl	80006f4 <lfs_bd_read>
 800694e:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <lfs_fs_parent_match+0x56>
        return err;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	e012      	b.n	8006980 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800695a:	f107 0310 	add.w	r3, r7, #16
 800695e:	4618      	mov	r0, r3
 8006960:	f7fa fabb 	bl	8000eda <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	1d1a      	adds	r2, r3, #4
 8006968:	f107 0310 	add.w	r3, r7, #16
 800696c:	4611      	mov	r1, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f7fa fa5e 	bl	8000e30 <lfs_pair_cmp>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	bf14      	ite	ne
 800697a:	2301      	movne	r3, #1
 800697c:	2300      	moveq	r3, #0
 800697e:	b2db      	uxtb	r3, r3
}
 8006980:	4618      	mov	r0, r3
 8006982:	3728      	adds	r7, #40	; 0x28
 8006984:	46bd      	mov	sp, r7
 8006986:	bdb0      	pop	{r4, r5, r7, pc}

08006988 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006988:	b580      	push	{r7, lr}
 800698a:	b090      	sub	sp, #64	; 0x40
 800698c:	af04      	add	r7, sp, #16
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80069a0:	4a33      	ldr	r2, [pc, #204]	; (8006a70 <lfs_fs_parent+0xe8>)
 80069a2:	f107 031c 	add.w	r3, r7, #28
 80069a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069aa:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80069ae:	2301      	movs	r3, #1
 80069b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 80069b2:	2301      	movs	r3, #1
 80069b4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 80069b6:	e049      	b.n	8006a4c <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3318      	adds	r3, #24
 80069bc:	f107 021c 	add.w	r2, r7, #28
 80069c0:	4611      	mov	r1, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fa fa5d 	bl	8000e82 <lfs_pair_issync>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 80069ce:	4b29      	ldr	r3, [pc, #164]	; (8006a74 <lfs_fs_parent+0xec>)
 80069d0:	f241 22ca 	movw	r2, #4810	; 0x12ca
 80069d4:	4928      	ldr	r1, [pc, #160]	; (8006a78 <lfs_fs_parent+0xf0>)
 80069d6:	4829      	ldr	r0, [pc, #164]	; (8006a7c <lfs_fs_parent+0xf4>)
 80069d8:	f00a fed2 	bl	8011780 <iprintf>
            return LFS_ERR_CORRUPT;
 80069dc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80069e0:	e041      	b.n	8006a66 <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 80069e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d10a      	bne.n	8006a00 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	3301      	adds	r3, #1
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006a1c:	f107 0310 	add.w	r3, r7, #16
 8006a20:	9303      	str	r3, [sp, #12]
 8006a22:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <lfs_fs_parent+0xf8>)
 8006a24:	9302      	str	r3, [sp, #8]
 8006a26:	2300      	movs	r3, #0
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <lfs_fs_parent+0xfc>)
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	4b16      	ldr	r3, [pc, #88]	; (8006a88 <lfs_fs_parent+0x100>)
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7fb fcbc 	bl	80023b0 <lfs_dir_fetchmatch>
 8006a38:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <lfs_fs_parent+0xc4>
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	f113 0f02 	cmn.w	r3, #2
 8006a46:	d001      	beq.n	8006a4c <lfs_fs_parent+0xc4>
            return tag;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	e00c      	b.n	8006a66 <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3318      	adds	r3, #24
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fa f9d3 	bl	8000dfc <lfs_pair_isnull>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f083 0301 	eor.w	r3, r3, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1aa      	bne.n	80069b8 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006a62:	f06f 0301 	mvn.w	r3, #1
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3730      	adds	r7, #48	; 0x30
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	080121a4 	.word	0x080121a4
 8006a74:	08012160 	.word	0x08012160
 8006a78:	08012054 	.word	0x08012054
 8006a7c:	08012810 	.word	0x08012810
 8006a80:	08006905 	.word	0x08006905
 8006a84:	20000008 	.word	0x20000008
 8006a88:	7ff003ff 	.word	0x7ff003ff

08006a8c <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	025b      	lsls	r3, r3, #9
 8006aa4:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006ab4:	b590      	push	{r4, r7, lr}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fa fab0 	bl	800102a <lfs_tag_size>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <lfs_fs_preporphans+0x32>
 8006ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	da06      	bge.n	8006ae6 <lfs_fs_preporphans+0x32>
 8006ad8:	4b1a      	ldr	r3, [pc, #104]	; (8006b44 <lfs_fs_preporphans+0x90>)
 8006ada:	4a1b      	ldr	r2, [pc, #108]	; (8006b48 <lfs_fs_preporphans+0x94>)
 8006adc:	f241 21eb 	movw	r1, #4843	; 0x12eb
 8006ae0:	481a      	ldr	r0, [pc, #104]	; (8006b4c <lfs_fs_preporphans+0x98>)
 8006ae2:	f00a fa2b 	bl	8010f3c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fa fa9d 	bl	800102a <lfs_tag_size>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8006af6:	d90a      	bls.n	8006b0e <lfs_fs_preporphans+0x5a>
 8006af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dd06      	ble.n	8006b0e <lfs_fs_preporphans+0x5a>
 8006b00:	4b13      	ldr	r3, [pc, #76]	; (8006b50 <lfs_fs_preporphans+0x9c>)
 8006b02:	4a11      	ldr	r2, [pc, #68]	; (8006b48 <lfs_fs_preporphans+0x94>)
 8006b04:	f241 21ec 	movw	r1, #4844	; 0x12ec
 8006b08:	4810      	ldr	r0, [pc, #64]	; (8006b4c <lfs_fs_preporphans+0x98>)
 8006b0a:	f00a fa17 	bl	8010f3c <__assert_func>
    lfs->gstate.tag += orphans;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b16:	441a      	add	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b20:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3330      	adds	r3, #48	; 0x30
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7fa fade 	bl	80010ea <lfs_gstate_hasorphans>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006b32:	ea44 0203 	orr.w	r2, r4, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd90      	pop	{r4, r7, pc}
 8006b44:	080129ec 	.word	0x080129ec
 8006b48:	08012ddc 	.word	0x08012ddc
 8006b4c:	08012054 	.word	0x08012054
 8006b50:	08012a24 	.word	0x08012a24

08006b54 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b66:	4a17      	ldr	r2, [pc, #92]	; (8006bc4 <lfs_fs_prepmove+0x70>)
 8006b68:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006b6a:	897b      	ldrh	r3, [r7, #10]
 8006b6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006b70:	428b      	cmp	r3, r1
 8006b72:	d006      	beq.n	8006b82 <lfs_fs_prepmove+0x2e>
 8006b74:	897b      	ldrh	r3, [r7, #10]
 8006b76:	029b      	lsls	r3, r3, #10
 8006b78:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006b7c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006b80:	e000      	b.n	8006b84 <lfs_fs_prepmove+0x30>
 8006b82:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006b84:	431a      	orrs	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006b8a:	897b      	ldrh	r3, [r7, #10]
 8006b8c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d002      	beq.n	8006b9a <lfs_fs_prepmove+0x46>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	e000      	b.n	8006b9c <lfs_fs_prepmove+0x48>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006ba0:	897b      	ldrh	r3, [r7, #10]
 8006ba2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d003      	beq.n	8006bb2 <lfs_fs_prepmove+0x5e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3304      	adds	r3, #4
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	e000      	b.n	8006bb4 <lfs_fs_prepmove+0x60>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006bb8:	bf00      	nop
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	800003ff 	.word	0x800003ff

08006bc8 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b098      	sub	sp, #96	; 0x60
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3330      	adds	r3, #48	; 0x30
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fa fabd 	bl	8001154 <lfs_gstate_needssuperblock>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f083 0301 	eor.w	r3, r3, #1
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <lfs_fs_desuperblock+0x22>
        return 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	e04e      	b.n	8006c88 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1a      	ldr	r2, [r3, #32]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	4927      	ldr	r1, [pc, #156]	; (8006c90 <lfs_fs_desuperblock+0xc8>)
 8006bf4:	9101      	str	r1, [sp, #4]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	f241 3205 	movw	r2, #4869	; 0x1305
 8006bfe:	4925      	ldr	r1, [pc, #148]	; (8006c94 <lfs_fs_desuperblock+0xcc>)
 8006c00:	4825      	ldr	r0, [pc, #148]	; (8006c98 <lfs_fs_desuperblock+0xd0>)
 8006c02:	f00a fdbd 	bl	8011780 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f103 0220 	add.w	r2, r3, #32
 8006c0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fb ff94 	bl	8002b40 <lfs_dir_fetch>
 8006c18:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8006c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <lfs_fs_desuperblock+0x5c>
        return err;
 8006c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c22:	e031      	b.n	8006c88 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7fa fc27 	bl	8001478 <lfs_fs_disk_version>
 8006c2a:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8006c2c:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c32:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8006c34:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 8006c40:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 8006c4c:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 8006c4e:	f107 031c 	add.w	r3, r7, #28
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fa fb8a 	bl	800136c <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006c58:	4b10      	ldr	r3, [pc, #64]	; (8006c9c <lfs_fs_desuperblock+0xd4>)
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	f107 031c 	add.w	r3, r7, #28
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	f107 0214 	add.w	r2, r7, #20
 8006c66:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7fd fd05 	bl	800467c <lfs_dir_commit>
 8006c72:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8006c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <lfs_fs_desuperblock+0xb6>
        return err;
 8006c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7c:	e004      	b.n	8006c88 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8006c7e:	2100      	movs	r1, #0
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff ff03 	bl	8006a8c <lfs_fs_prepsuperblock>
    return 0;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3758      	adds	r7, #88	; 0x58
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	08012160 	.word	0x08012160
 8006c94:	08012054 	.word	0x08012054
 8006c98:	08012a5c 	.word	0x08012a5c
 8006c9c:	20100018 	.word	0x20100018

08006ca0 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006ca0:	b5b0      	push	{r4, r5, r7, lr}
 8006ca2:	b094      	sub	sp, #80	; 0x50
 8006ca4:	af04      	add	r7, sp, #16
 8006ca6:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	333c      	adds	r3, #60	; 0x3c
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fa fa3e 	bl	800112e <lfs_gstate_hasmove>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f083 0301 	eor.w	r3, r3, #1
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <lfs_fs_demove+0x22>
        return 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e05b      	b.n	8006d7a <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fa f99c 	bl	800100c <lfs_tag_id>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4b2a      	ldr	r3, [pc, #168]	; (8006d84 <lfs_fs_demove+0xe4>)
 8006cda:	9302      	str	r3, [sp, #8]
 8006cdc:	9201      	str	r2, [sp, #4]
 8006cde:	9400      	str	r4, [sp, #0]
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	f241 322d 	movw	r2, #4909	; 0x132d
 8006ce6:	4928      	ldr	r1, [pc, #160]	; (8006d88 <lfs_fs_demove+0xe8>)
 8006ce8:	4828      	ldr	r0, [pc, #160]	; (8006d8c <lfs_fs_demove+0xec>)
 8006cea:	f00a fd49 	bl	8011780 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fa f962 	bl	8000fbc <lfs_tag_type3>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d006      	beq.n	8006d12 <lfs_fs_demove+0x72>
 8006d04:	4b22      	ldr	r3, [pc, #136]	; (8006d90 <lfs_fs_demove+0xf0>)
 8006d06:	4a23      	ldr	r2, [pc, #140]	; (8006d94 <lfs_fs_demove+0xf4>)
 8006d08:	f241 3134 	movw	r1, #4916	; 0x1334
 8006d0c:	481e      	ldr	r0, [pc, #120]	; (8006d88 <lfs_fs_demove+0xe8>)
 8006d0e:	f00a f915 	bl	8010f3c <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8006d18:	f107 0318 	add.w	r3, r7, #24
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fb ff0e 	bl	8002b40 <lfs_dir_fetch>
 8006d24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8006d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <lfs_fs_demove+0x90>
        return err;
 8006d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2e:	e024      	b.n	8006d7a <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fa f969 	bl	800100c <lfs_tag_id>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff ff05 	bl	8006b54 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8006d4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d4c:	029b      	lsls	r3, r3, #10
 8006d4e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006d52:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006d56:	613b      	str	r3, [r7, #16]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	f107 0210 	add.w	r2, r7, #16
 8006d60:	f107 0118 	add.w	r1, r7, #24
 8006d64:	2301      	movs	r3, #1
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7fd fc88 	bl	800467c <lfs_dir_commit>
 8006d6c:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <lfs_fs_demove+0xd8>
        return err;
 8006d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d76:	e000      	b.n	8006d7a <lfs_fs_demove+0xda>
    }

    return 0;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3740      	adds	r7, #64	; 0x40
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bdb0      	pop	{r4, r5, r7, pc}
 8006d82:	bf00      	nop
 8006d84:	08012160 	.word	0x08012160
 8006d88:	08012054 	.word	0x08012054
 8006d8c:	08012a90 	.word	0x08012a90
 8006d90:	08012ac4 	.word	0x08012ac4
 8006d94:	08012df0 	.word	0x08012df0

08006d98 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006d98:	b5b0      	push	{r4, r5, r7, lr}
 8006d9a:	b0b2      	sub	sp, #200	; 0xc8
 8006d9c:	af04      	add	r7, sp, #16
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3330      	adds	r3, #48	; 0x30
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fa f99e 	bl	80010ea <lfs_gstate_hasorphans>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f083 0301 	eor.w	r3, r3, #1
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <lfs_fs_deorphan+0x26>
        return 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e187      	b.n	80070ce <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8006dc4:	e170      	b.n	80070a8 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8006dc6:	f107 0308 	add.w	r3, r7, #8
 8006dca:	2220      	movs	r2, #32
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f00a f93a 	bl	8011048 <memset>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	2301      	movs	r3, #1
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8006de2:	e149      	b.n	8007078 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8006de4:	f107 0308 	add.w	r3, r7, #8
 8006de8:	f103 0218 	add.w	r2, r3, #24
 8006dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fb fea4 	bl	8002b40 <lfs_dir_fetch>
 8006df8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 8006dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <lfs_fs_deorphan+0x72>
                return err;
 8006e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e08:	e161      	b.n	80070ce <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8006e0a:	7ffb      	ldrb	r3, [r7, #31]
 8006e0c:	f083 0301 	eor.w	r3, r3, #1
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 8126 	beq.w	8007064 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8006e18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e1c:	f107 0308 	add.w	r3, r7, #8
 8006e20:	3318      	adds	r3, #24
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7ff fdaf 	bl	8006988 <lfs_fs_parent>
 8006e2a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8006e2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	da07      	bge.n	8006e46 <lfs_fs_deorphan+0xae>
 8006e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e3a:	f113 0f02 	cmn.w	r3, #2
 8006e3e:	d002      	beq.n	8006e46 <lfs_fs_deorphan+0xae>
                    return tag;
 8006e40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e44:	e143      	b.n	80070ce <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8006e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 80ac 	bne.w	8006fa8 <lfs_fs_deorphan+0x210>
 8006e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e54:	f113 0f02 	cmn.w	r3, #2
 8006e58:	f000 80a6 	beq.w	8006fa8 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8006e5c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e60:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006e64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	4a9a      	ldr	r2, [pc, #616]	; (80070d8 <lfs_fs_deorphan+0x340>)
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fa fd3c 	bl	80018ec <lfs_dir_get>
 8006e74:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8006e78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	da02      	bge.n	8006e86 <lfs_fs_deorphan+0xee>
                        return state;
 8006e80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e84:	e0eb      	b.n	800705e <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8006e86:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fa f825 	bl	8000eda <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8006e90:	f107 0308 	add.w	r3, r7, #8
 8006e94:	f103 0218 	add.w	r2, r3, #24
 8006e98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7f9 ffef 	bl	8000e82 <lfs_pair_issync>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f083 0301 	eor.w	r3, r3, #1
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d07b      	beq.n	8006fa8 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8006eb0:	6a38      	ldr	r0, [r7, #32]
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006eb8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006ebc:	4c87      	ldr	r4, [pc, #540]	; (80070dc <lfs_fs_deorphan+0x344>)
 8006ebe:	9403      	str	r4, [sp, #12]
 8006ec0:	9102      	str	r1, [sp, #8]
 8006ec2:	9201      	str	r2, [sp, #4]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f241 327a 	movw	r2, #4986	; 0x137a
 8006ecc:	4984      	ldr	r1, [pc, #528]	; (80070e0 <lfs_fs_deorphan+0x348>)
 8006ece:	4885      	ldr	r0, [pc, #532]	; (80070e4 <lfs_fs_deorphan+0x34c>)
 8006ed0:	f00a fc56 	bl	8011780 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8006ed4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006ed8:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3330      	adds	r3, #48	; 0x30
 8006ee0:	f107 0208 	add.w	r2, r7, #8
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fa f948 	bl	800117c <lfs_gstate_hasmovehere>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d01c      	beq.n	8006f2c <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fa f888 	bl	800100c <lfs_tag_id>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006f0a:	4874      	ldr	r0, [pc, #464]	; (80070dc <lfs_fs_deorphan+0x344>)
 8006f0c:	9002      	str	r0, [sp, #8]
 8006f0e:	9201      	str	r2, [sp, #4]
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	460b      	mov	r3, r1
 8006f14:	f241 3285 	movw	r2, #4997	; 0x1385
 8006f18:	4971      	ldr	r1, [pc, #452]	; (80070e0 <lfs_fs_deorphan+0x348>)
 8006f1a:	4873      	ldr	r0, [pc, #460]	; (80070e8 <lfs_fs_deorphan+0x350>)
 8006f1c:	f00a fc30 	bl	8011780 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006f20:	2200      	movs	r2, #0
 8006f22:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fe14 	bl	8006b54 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8006f2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7f9 ffec 	bl	8000f0e <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006f36:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006f3a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d007      	beq.n	8006f52 <lfs_fs_deorphan+0x1ba>
 8006f42:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006f46:	029b      	lsls	r3, r3, #10
 8006f48:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006f4c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006f50:	e000      	b.n	8006f54 <lfs_fs_deorphan+0x1bc>
 8006f52:	2300      	movs	r3, #0
 8006f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f5e:	4b63      	ldr	r3, [pc, #396]	; (80070ec <lfs_fs_deorphan+0x354>)
 8006f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006f68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f6c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006f70:	f107 0108 	add.w	r1, r7, #8
 8006f74:	2302      	movs	r3, #2
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fd f886 	bl	8004088 <lfs_dir_orphaningcommit>
 8006f7c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8006f80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7f9 ffa8 	bl	8000eda <lfs_pair_fromle32>
                        if (state < 0) {
 8006f8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	da02      	bge.n	8006f98 <lfs_fs_deorphan+0x200>
                            return state;
 8006f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8006f96:	e062      	b.n	800705e <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8006f98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d16b      	bne.n	8007078 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006fa6:	e067      	b.n	8007078 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8006fa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d159      	bne.n	8007064 <lfs_fs_deorphan+0x2cc>
 8006fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006fb4:	f113 0f02 	cmn.w	r3, #2
 8006fb8:	d154      	bne.n	8007064 <lfs_fs_deorphan+0x2cc>
 8006fba:	78fb      	ldrb	r3, [r7, #3]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d051      	beq.n	8007064 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8006fc0:	6a3a      	ldr	r2, [r7, #32]
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	4945      	ldr	r1, [pc, #276]	; (80070dc <lfs_fs_deorphan+0x344>)
 8006fc6:	9101      	str	r1, [sp, #4]
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	f241 32a5 	movw	r2, #5029	; 0x13a5
 8006fd0:	4943      	ldr	r1, [pc, #268]	; (80070e0 <lfs_fs_deorphan+0x348>)
 8006fd2:	4847      	ldr	r0, [pc, #284]	; (80070f0 <lfs_fs_deorphan+0x358>)
 8006fd4:	f00a fbd4 	bl	8011780 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7fb fdc7 	bl	8002b78 <lfs_dir_getgstate>
 8006fea:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 8006fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <lfs_fs_deorphan+0x264>
                        return err;
 8006ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ffa:	e030      	b.n	800705e <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006ffc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007000:	3318      	adds	r3, #24
 8007002:	4618      	mov	r0, r3
 8007004:	f7f9 ff83 	bl	8000f0e <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8007008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800700c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007010:	051a      	lsls	r2, r3, #20
 8007012:	4b38      	ldr	r3, [pc, #224]	; (80070f4 <lfs_fs_deorphan+0x35c>)
 8007014:	4313      	orrs	r3, r2
 8007016:	673b      	str	r3, [r7, #112]	; 0x70
 8007018:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800701c:	3318      	adds	r3, #24
 800701e:	677b      	str	r3, [r7, #116]	; 0x74
 8007020:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007024:	f107 0108 	add.w	r1, r7, #8
 8007028:	2301      	movs	r3, #1
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fd f82c 	bl	8004088 <lfs_dir_orphaningcommit>
 8007030:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8007034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007038:	3318      	adds	r3, #24
 800703a:	4618      	mov	r0, r3
 800703c:	f7f9 ff4d 	bl	8000eda <lfs_pair_fromle32>
                    if (state < 0) {
 8007040:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007044:	2b00      	cmp	r3, #0
 8007046:	da02      	bge.n	800704e <lfs_fs_deorphan+0x2b6>
                        return state;
 8007048:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 800704c:	e03f      	b.n	80070ce <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800704e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007052:	2b03      	cmp	r3, #3
 8007054:	d104      	bne.n	8007060 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8007056:	2301      	movs	r3, #1
 8007058:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800705c:	e00c      	b.n	8007078 <lfs_fs_deorphan+0x2e0>
                return err;
 800705e:	e036      	b.n	80070ce <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 8007060:	bf00      	nop
 8007062:	e009      	b.n	8007078 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 8007064:	f107 0408 	add.w	r4, r7, #8
 8007068:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800706c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800706e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007070:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8007078:	f107 0308 	add.w	r3, r7, #8
 800707c:	3318      	adds	r3, #24
 800707e:	4618      	mov	r0, r3
 8007080:	f7f9 febc 	bl	8000dfc <lfs_pair_isnull>
 8007084:	4603      	mov	r3, r0
 8007086:	f083 0301 	eor.w	r3, r3, #1
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	f47f aea9 	bne.w	8006de4 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8007092:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <lfs_fs_deorphan+0x306>
 800709a:	2300      	movs	r3, #0
 800709c:	e002      	b.n	80070a4 <lfs_fs_deorphan+0x30c>
 800709e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070a2:	3301      	adds	r3, #1
 80070a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 80070a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	f77f ae8a 	ble.w	8006dc6 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3330      	adds	r3, #48	; 0x30
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fa f82a 	bl	8001110 <lfs_gstate_getorphans>
 80070bc:	4603      	mov	r3, r0
 80070be:	425b      	negs	r3, r3
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	b25b      	sxtb	r3, r3
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fcf4 	bl	8006ab4 <lfs_fs_preporphans>
 80070cc:	4603      	mov	r3, r0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	37b8      	adds	r7, #184	; 0xb8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bdb0      	pop	{r4, r5, r7, pc}
 80070d6:	bf00      	nop
 80070d8:	7ffffc00 	.word	0x7ffffc00
 80070dc:	08012160 	.word	0x08012160
 80070e0:	08012054 	.word	0x08012054
 80070e4:	08012af8 	.word	0x08012af8
 80070e8:	08012b3c 	.word	0x08012b3c
 80070ec:	600ffc08 	.word	0x600ffc08
 80070f0:	08012b84 	.word	0x08012b84
 80070f4:	000ffc08 	.word	0x000ffc08

080070f8 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff fd61 	bl	8006bc8 <lfs_fs_desuperblock>
 8007106:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <lfs_fs_forceconsistency+0x1a>
        return err;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	e013      	b.n	800713a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff fdc4 	bl	8006ca0 <lfs_fs_demove>
 8007118:	60f8      	str	r0, [r7, #12]
    if (err) {
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <lfs_fs_forceconsistency+0x2c>
        return err;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	e00a      	b.n	800713a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8007124:	2101      	movs	r1, #1
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fe36 	bl	8006d98 <lfs_fs_deorphan>
 800712c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <lfs_fs_forceconsistency+0x40>
        return err;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	e000      	b.n	800713a <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8007142:	b480      	push	{r7}
 8007144:	b085      	sub	sp, #20
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	601a      	str	r2, [r3, #0]
    return 0;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr
	...

08007168 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8007174:	f107 0208 	add.w	r2, r7, #8
 8007178:	2300      	movs	r3, #0
 800717a:	4907      	ldr	r1, [pc, #28]	; (8007198 <lfs_fs_size_+0x30>)
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7ff f9ff 	bl	8006580 <lfs_fs_traverse_>
 8007182:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <lfs_fs_size_+0x26>
        return err;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	e000      	b.n	8007190 <lfs_fs_size_+0x28>
    }

    return size;
 800718e:	68bb      	ldr	r3, [r7, #8]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	08007143 	.word	0x08007143

0800719c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
    if (err) {
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <lfs_format+0x18>
        return err;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	e005      	b.n	80071c0 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fe ff04 	bl	8005fc4 <lfs_format_>
 80071bc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80071be:	68fb      	ldr	r3, [r7, #12]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
    if (err) {
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <lfs_mount+0x18>
        return err;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	e005      	b.n	80071ec <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fe ffa0 	bl	8006128 <lfs_mount_>
 80071e8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80071ea:	68fb      	ldr	r3, [r7, #12]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <lfs_unmount+0x16>
        return err;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	e004      	b.n	8007214 <lfs_unmount+0x20>
    }
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);

    err = lfs_unmount_(lfs);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff f9ac 	bl	8006568 <lfs_unmount_>
 8007210:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_unmount -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007212:	68fb      	ldr	r3, [r7, #12]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]
    if (err) {
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <lfs_file_open+0x1c>
        return err;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	e01a      	b.n	800726e <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	4618      	mov	r0, r3
 8007240:	f7fa f8cc 	bl	80013dc <lfs_mlist_isopen>
 8007244:	4603      	mov	r3, r0
 8007246:	f083 0301 	eor.w	r3, r3, #1
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d106      	bne.n	800725e <lfs_file_open+0x42>
 8007250:	4b09      	ldr	r3, [pc, #36]	; (8007278 <lfs_file_open+0x5c>)
 8007252:	4a0a      	ldr	r2, [pc, #40]	; (800727c <lfs_file_open+0x60>)
 8007254:	f241 71b6 	movw	r1, #6070	; 0x17b6
 8007258:	4809      	ldr	r0, [pc, #36]	; (8007280 <lfs_file_open+0x64>)
 800725a:	f009 fe6f 	bl	8010f3c <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7fd fe27 	bl	8004eb8 <lfs_file_open_>
 800726a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800726c:	697b      	ldr	r3, [r7, #20]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	08012bd4 	.word	0x08012bd4
 800727c:	08012e00 	.word	0x08012e00
 8007280:	08012054 	.word	0x08012054

08007284 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <lfs_file_close+0x18>
        return err;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	e015      	b.n	80072c8 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fa f89a 	bl	80013dc <lfs_mlist_isopen>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d106      	bne.n	80072bc <lfs_file_close+0x38>
 80072ae:	4b08      	ldr	r3, [pc, #32]	; (80072d0 <lfs_file_close+0x4c>)
 80072b0:	4a08      	ldr	r2, [pc, #32]	; (80072d4 <lfs_file_close+0x50>)
 80072b2:	f241 71da 	movw	r1, #6106	; 0x17da
 80072b6:	4808      	ldr	r0, [pc, #32]	; (80072d8 <lfs_file_close+0x54>)
 80072b8:	f009 fe40 	bl	8010f3c <__assert_func>

    err = lfs_file_close_(lfs, file);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fd fe12 	bl	8004ee8 <lfs_file_close_>
 80072c4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80072c6:	68fb      	ldr	r3, [r7, #12]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	08012c0c 	.word	0x08012c0c
 80072d4:	08012e10 	.word	0x08012e10
 80072d8:	08012054 	.word	0x08012054

080072dc <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]
    if (err) {
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <lfs_file_read+0x1c>
        return err;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	e017      	b.n	8007328 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fa f86c 	bl	80013dc <lfs_mlist_isopen>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <lfs_file_read+0x3c>
 800730a:	4b09      	ldr	r3, [pc, #36]	; (8007330 <lfs_file_read+0x54>)
 800730c:	4a09      	ldr	r2, [pc, #36]	; (8007334 <lfs_file_read+0x58>)
 800730e:	f241 71fc 	movw	r1, #6140	; 0x17fc
 8007312:	4809      	ldr	r0, [pc, #36]	; (8007338 <lfs_file_read+0x5c>)
 8007314:	f009 fe12 	bl	8010f3c <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7fe f942 	bl	80055a8 <lfs_file_read_>
 8007324:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007326:	693b      	ldr	r3, [r7, #16]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	08012c0c 	.word	0x08012c0c
 8007334:	08012e20 	.word	0x08012e20
 8007338:	08012054 	.word	0x08012054

0800733c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
    if (err) {
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <lfs_file_write+0x1c>
        return err;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	e017      	b.n	8007388 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	4618      	mov	r0, r3
 8007360:	f7fa f83c 	bl	80013dc <lfs_mlist_isopen>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <lfs_file_write+0x3c>
 800736a:	4b09      	ldr	r3, [pc, #36]	; (8007390 <lfs_file_write+0x54>)
 800736c:	4a09      	ldr	r2, [pc, #36]	; (8007394 <lfs_file_write+0x58>)
 800736e:	f641 010e 	movw	r1, #6158	; 0x180e
 8007372:	4809      	ldr	r0, [pc, #36]	; (8007398 <lfs_file_write+0x5c>)
 8007374:	f009 fde2 	bl	8010f3c <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f7fe fa58 	bl	8005834 <lfs_file_write_>
 8007384:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007386:	693b      	ldr	r3, [r7, #16]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	08012c0c 	.word	0x08012c0c
 8007394:	08012e30 	.word	0x08012e30
 8007398:	08012054 	.word	0x08012054

0800739c <lfs_file_rewind>:
    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}

int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
    if (err) {
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <lfs_file_rewind+0x18>
        return err;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	e005      	b.n	80073c0 <lfs_file_rewind+0x24>
    }
    LFS_TRACE("lfs_file_rewind(%p, %p)", (void*)lfs, (void*)file);

    err = lfs_file_rewind_(lfs, file);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fe fb49 	bl	8005a4e <lfs_file_rewind_>
 80073bc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_rewind -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80073be:	68fb      	ldr	r3, [r7, #12]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80073d8:	2300      	movs	r3, #0
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	e024      	b.n	8007428 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	091a      	lsrs	r2, r3, #4
 80073e2:	6939      	ldr	r1, [r7, #16]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	440b      	add	r3, r1
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	4619      	mov	r1, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	404b      	eors	r3, r1
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	4911      	ldr	r1, [pc, #68]	; (800743c <lfs_crc+0x74>)
 80073f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80073fa:	4053      	eors	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	091a      	lsrs	r2, r3, #4
 8007402:	6939      	ldr	r1, [r7, #16]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	440b      	add	r3, r1
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	091b      	lsrs	r3, r3, #4
 800740c:	b2db      	uxtb	r3, r3
 800740e:	4619      	mov	r1, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	404b      	eors	r3, r1
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	4908      	ldr	r1, [pc, #32]	; (800743c <lfs_crc+0x74>)
 800741a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800741e:	4053      	eors	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	3301      	adds	r3, #1
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	d3d6      	bcc.n	80073de <lfs_crc+0x16>
    }

    return crc;
 8007430:	68fb      	ldr	r3, [r7, #12]
}
 8007432:	4618      	mov	r0, r3
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr
 800743c:	08012e40 	.word	0x08012e40

08007440 <block_device_read>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int block_device_read(const struct lfs_config *c, lfs_block_t block,
	lfs_off_t off, void *buffer, lfs_size_t size)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
	Bulk_Read_4B(&hspi2, (block * c->block_size + off), (uint8_t *)buffer,size);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	fb02 f203 	mul.w	r2, r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	18d1      	adds	r1, r2, r3
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	b29b      	uxth	r3, r3
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	4804      	ldr	r0, [pc, #16]	; (8007474 <block_device_read+0x34>)
 8007464:	f7f8 fed7 	bl	8000216 <Bulk_Read_4B>
	return 0;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000474 	.word	0x20000474

08007478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// mount the filesystem
	HAL_UART_Transmit(&huart2, "Starting Chip Erase.....\n", sizeof("Starting Chip Erase....."), 1000);
 800747e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007482:	2219      	movs	r2, #25
 8007484:	4931      	ldr	r1, [pc, #196]	; (800754c <main+0xd4>)
 8007486:	4832      	ldr	r0, [pc, #200]	; (8007550 <main+0xd8>)
 8007488:	f004 fe98 	bl	800c1bc <HAL_UART_Transmit>
		Sector_Erase_4B(&hspi2, address, sector_size);
 800748c:	4b31      	ldr	r3, [pc, #196]	; (8007554 <main+0xdc>)
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	2240      	movs	r2, #64	; 0x40
 8007492:	4619      	mov	r1, r3
 8007494:	4830      	ldr	r0, [pc, #192]	; (8007558 <main+0xe0>)
 8007496:	f7f8 ff76 	bl	8000386 <Sector_Erase_4B>
		HAL_UART_Transmit(&huart2, "Starting Chip Erase.....\n", sizeof("Starting Chip Erase....."), 1000);
 800749a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800749e:	2219      	movs	r2, #25
 80074a0:	492a      	ldr	r1, [pc, #168]	; (800754c <main+0xd4>)
 80074a2:	482b      	ldr	r0, [pc, #172]	; (8007550 <main+0xd8>)
 80074a4:	f004 fe8a 	bl	800c1bc <HAL_UART_Transmit>

  	//id read
		Read_ID(&hspi2, &dev_id);
 80074a8:	492c      	ldr	r1, [pc, #176]	; (800755c <main+0xe4>)
 80074aa:	482b      	ldr	r0, [pc, #172]	; (8007558 <main+0xe0>)
 80074ac:	f7f8 fe6a 	bl	8000184 <Read_ID>

		HAL_Delay(100);
 80074b0:	2064      	movs	r0, #100	; 0x64
 80074b2:	f000 fd4f 	bl	8007f54 <HAL_Delay>

	    int err = lfs_mount(&lfs, &cfg);
 80074b6:	492a      	ldr	r1, [pc, #168]	; (8007560 <main+0xe8>)
 80074b8:	482a      	ldr	r0, [pc, #168]	; (8007564 <main+0xec>)
 80074ba:	f7ff fe85 	bl	80071c8 <lfs_mount>
 80074be:	6078      	str	r0, [r7, #4]

	    // reformat if we can't mount the filesystem
	    // this should only happen on the first boot
	    if (err) {
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <main+0x5e>
	        lfs_format(&lfs, &cfg);
 80074c6:	4926      	ldr	r1, [pc, #152]	; (8007560 <main+0xe8>)
 80074c8:	4826      	ldr	r0, [pc, #152]	; (8007564 <main+0xec>)
 80074ca:	f7ff fe67 	bl	800719c <lfs_format>
	        lfs_mount(&lfs, &cfg);
 80074ce:	4924      	ldr	r1, [pc, #144]	; (8007560 <main+0xe8>)
 80074d0:	4824      	ldr	r0, [pc, #144]	; (8007564 <main+0xec>)
 80074d2:	f7ff fe79 	bl	80071c8 <lfs_mount>
	    }

	    // read current count
	    uint32_t boot_count = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	603b      	str	r3, [r7, #0]
	    lfs_file_open(&lfs, &file, "boot_count", LFS_O_RDWR | LFS_O_CREAT);
 80074da:	f240 1303 	movw	r3, #259	; 0x103
 80074de:	4a22      	ldr	r2, [pc, #136]	; (8007568 <main+0xf0>)
 80074e0:	4922      	ldr	r1, [pc, #136]	; (800756c <main+0xf4>)
 80074e2:	4820      	ldr	r0, [pc, #128]	; (8007564 <main+0xec>)
 80074e4:	f7ff fe9a 	bl	800721c <lfs_file_open>
	    lfs_file_read(&lfs, &file, &boot_count, sizeof(boot_count));
 80074e8:	463a      	mov	r2, r7
 80074ea:	2304      	movs	r3, #4
 80074ec:	491f      	ldr	r1, [pc, #124]	; (800756c <main+0xf4>)
 80074ee:	481d      	ldr	r0, [pc, #116]	; (8007564 <main+0xec>)
 80074f0:	f7ff fef4 	bl	80072dc <lfs_file_read>

	    // update boot count
	    boot_count += 1;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	3301      	adds	r3, #1
 80074f8:	603b      	str	r3, [r7, #0]
	    lfs_file_rewind(&lfs, &file);
 80074fa:	491c      	ldr	r1, [pc, #112]	; (800756c <main+0xf4>)
 80074fc:	4819      	ldr	r0, [pc, #100]	; (8007564 <main+0xec>)
 80074fe:	f7ff ff4d 	bl	800739c <lfs_file_rewind>
	    lfs_file_write(&lfs, &file, &boot_count, sizeof(boot_count));
 8007502:	463a      	mov	r2, r7
 8007504:	2304      	movs	r3, #4
 8007506:	4919      	ldr	r1, [pc, #100]	; (800756c <main+0xf4>)
 8007508:	4816      	ldr	r0, [pc, #88]	; (8007564 <main+0xec>)
 800750a:	f7ff ff17 	bl	800733c <lfs_file_write>

	    // remember the storage is not updated until the file is closed successfully
	    lfs_file_close(&lfs, &file);
 800750e:	4917      	ldr	r1, [pc, #92]	; (800756c <main+0xf4>)
 8007510:	4814      	ldr	r0, [pc, #80]	; (8007564 <main+0xec>)
 8007512:	f7ff feb7 	bl	8007284 <lfs_file_close>

	    // release any resources we were using
	    lfs_unmount(&lfs);
 8007516:	4813      	ldr	r0, [pc, #76]	; (8007564 <main+0xec>)
 8007518:	f7ff fe6c 	bl	80071f4 <lfs_unmount>

	    // print the boot count
	    printf("boot_count: %d\n", boot_count);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	4619      	mov	r1, r3
 8007520:	4813      	ldr	r0, [pc, #76]	; (8007570 <main+0xf8>)
 8007522:	f00a f92d 	bl	8011780 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007526:	f000 fcb3 	bl	8007e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800752a:	f000 f823 	bl	8007574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800752e:	f000 f987 	bl	8007840 <MX_GPIO_Init>
  MX_RTC_Init();
 8007532:	f000 f87f 	bl	8007634 <MX_RTC_Init>
  MX_SPI1_Init();
 8007536:	f000 f8c7 	bl	80076c8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800753a:	f000 f931 	bl	80077a0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800753e:	f000 f959 	bl	80077f4 <MX_DMA_Init>
  MX_SPI2_Init();
 8007542:	f000 f8f7 	bl	8007734 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8007546:	f009 f883 	bl	8010650 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800754a:	e7fe      	b.n	800754a <main+0xd2>
 800754c:	08012c7c 	.word	0x08012c7c
 8007550:	2000066c 	.word	0x2000066c
 8007554:	200001fc 	.word	0x200001fc
 8007558:	20000474 	.word	0x20000474
 800755c:	200006c0 	.word	0x200006c0
 8007560:	08012e80 	.word	0x08012e80
 8007564:	2000052c 	.word	0x2000052c
 8007568:	08012c98 	.word	0x08012c98
 800756c:	200004d8 	.word	0x200004d8
 8007570:	08012ca4 	.word	0x08012ca4

08007574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b094      	sub	sp, #80	; 0x50
 8007578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800757a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800757e:	2228      	movs	r2, #40	; 0x28
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f009 fd60 	bl	8011048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007598:	1d3b      	adds	r3, r7, #4
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	605a      	str	r2, [r3, #4]
 80075a0:	609a      	str	r2, [r3, #8]
 80075a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80075a4:	2309      	movs	r3, #9
 80075a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80075a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80075ae:	2300      	movs	r3, #0
 80075b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80075b2:	2301      	movs	r3, #1
 80075b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80075b6:	2301      	movs	r3, #1
 80075b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075ba:	2302      	movs	r3, #2
 80075bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80075be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80075c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80075c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075ce:	4618      	mov	r0, r3
 80075d0:	f002 ff1e 	bl	800a410 <HAL_RCC_OscConfig>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80075da:	f000 f993 	bl	8007904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075de:	230f      	movs	r3, #15
 80075e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075e2:	2302      	movs	r3, #2
 80075e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80075ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80075f0:	2300      	movs	r3, #0
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80075f4:	f107 0314 	add.w	r3, r7, #20
 80075f8:	2101      	movs	r1, #1
 80075fa:	4618      	mov	r0, r3
 80075fc:	f003 f988 	bl	800a910 <HAL_RCC_ClockConfig>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8007606:	f000 f97d 	bl	8007904 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800760a:	2311      	movs	r3, #17
 800760c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800760e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007612:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8007614:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007618:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800761a:	1d3b      	adds	r3, r7, #4
 800761c:	4618      	mov	r0, r3
 800761e:	f003 fb05 	bl	800ac2c <HAL_RCCEx_PeriphCLKConfig>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8007628:	f000 f96c 	bl	8007904 <Error_Handler>
  }
}
 800762c:	bf00      	nop
 800762e:	3750      	adds	r7, #80	; 0x50
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800763a:	1d3b      	adds	r3, r7, #4
 800763c:	2100      	movs	r1, #0
 800763e:	460a      	mov	r2, r1
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	460a      	mov	r2, r1
 8007644:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8007646:	2300      	movs	r3, #0
 8007648:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800764a:	4b1d      	ldr	r3, [pc, #116]	; (80076c0 <MX_RTC_Init+0x8c>)
 800764c:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <MX_RTC_Init+0x90>)
 800764e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8007650:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <MX_RTC_Init+0x8c>)
 8007652:	f04f 32ff 	mov.w	r2, #4294967295
 8007656:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8007658:	4b19      	ldr	r3, [pc, #100]	; (80076c0 <MX_RTC_Init+0x8c>)
 800765a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800765e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007660:	4817      	ldr	r0, [pc, #92]	; (80076c0 <MX_RTC_Init+0x8c>)
 8007662:	f003 fc4f 	bl	800af04 <HAL_RTC_Init>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800766c:	f000 f94a 	bl	8007904 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8007670:	2300      	movs	r3, #0
 8007672:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8007674:	2300      	movs	r3, #0
 8007676:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8007678:	2300      	movs	r3, #0
 800767a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800767c:	1d3b      	adds	r3, r7, #4
 800767e:	2201      	movs	r2, #1
 8007680:	4619      	mov	r1, r3
 8007682:	480f      	ldr	r0, [pc, #60]	; (80076c0 <MX_RTC_Init+0x8c>)
 8007684:	f003 fcca 	bl	800b01c <HAL_RTC_SetTime>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800768e:	f000 f939 	bl	8007904 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007692:	2301      	movs	r3, #1
 8007694:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8007696:	2305      	movs	r3, #5
 8007698:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x20;
 800769a:	2320      	movs	r3, #32
 800769c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 800769e:	2324      	movs	r3, #36	; 0x24
 80076a0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80076a2:	463b      	mov	r3, r7
 80076a4:	2201      	movs	r2, #1
 80076a6:	4619      	mov	r1, r3
 80076a8:	4805      	ldr	r0, [pc, #20]	; (80076c0 <MX_RTC_Init+0x8c>)
 80076aa:	f003 fd4f 	bl	800b14c <HAL_RTC_SetDate>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80076b4:	f000 f926 	bl	8007904 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	200005fc 	.word	0x200005fc
 80076c4:	40002800 	.word	0x40002800

080076c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80076cc:	4b17      	ldr	r3, [pc, #92]	; (800772c <MX_SPI1_Init+0x64>)
 80076ce:	4a18      	ldr	r2, [pc, #96]	; (8007730 <MX_SPI1_Init+0x68>)
 80076d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80076d2:	4b16      	ldr	r3, [pc, #88]	; (800772c <MX_SPI1_Init+0x64>)
 80076d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80076d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80076da:	4b14      	ldr	r3, [pc, #80]	; (800772c <MX_SPI1_Init+0x64>)
 80076dc:	2200      	movs	r2, #0
 80076de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80076e0:	4b12      	ldr	r3, [pc, #72]	; (800772c <MX_SPI1_Init+0x64>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80076e6:	4b11      	ldr	r3, [pc, #68]	; (800772c <MX_SPI1_Init+0x64>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <MX_SPI1_Init+0x64>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80076f2:	4b0e      	ldr	r3, [pc, #56]	; (800772c <MX_SPI1_Init+0x64>)
 80076f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80076fa:	4b0c      	ldr	r3, [pc, #48]	; (800772c <MX_SPI1_Init+0x64>)
 80076fc:	2228      	movs	r2, #40	; 0x28
 80076fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007700:	4b0a      	ldr	r3, [pc, #40]	; (800772c <MX_SPI1_Init+0x64>)
 8007702:	2200      	movs	r2, #0
 8007704:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007706:	4b09      	ldr	r3, [pc, #36]	; (800772c <MX_SPI1_Init+0x64>)
 8007708:	2200      	movs	r2, #0
 800770a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800770c:	4b07      	ldr	r3, [pc, #28]	; (800772c <MX_SPI1_Init+0x64>)
 800770e:	2200      	movs	r2, #0
 8007710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007712:	4b06      	ldr	r3, [pc, #24]	; (800772c <MX_SPI1_Init+0x64>)
 8007714:	220a      	movs	r2, #10
 8007716:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007718:	4804      	ldr	r0, [pc, #16]	; (800772c <MX_SPI1_Init+0x64>)
 800771a:	f003 ff77 	bl	800b60c <HAL_SPI_Init>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007724:	f000 f8ee 	bl	8007904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007728:	bf00      	nop
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20000614 	.word	0x20000614
 8007730:	40013000 	.word	0x40013000

08007734 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007738:	4b17      	ldr	r3, [pc, #92]	; (8007798 <MX_SPI2_Init+0x64>)
 800773a:	4a18      	ldr	r2, [pc, #96]	; (800779c <MX_SPI2_Init+0x68>)
 800773c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800773e:	4b16      	ldr	r3, [pc, #88]	; (8007798 <MX_SPI2_Init+0x64>)
 8007740:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007744:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007746:	4b14      	ldr	r3, [pc, #80]	; (8007798 <MX_SPI2_Init+0x64>)
 8007748:	2200      	movs	r2, #0
 800774a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800774c:	4b12      	ldr	r3, [pc, #72]	; (8007798 <MX_SPI2_Init+0x64>)
 800774e:	2200      	movs	r2, #0
 8007750:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007752:	4b11      	ldr	r3, [pc, #68]	; (8007798 <MX_SPI2_Init+0x64>)
 8007754:	2200      	movs	r2, #0
 8007756:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007758:	4b0f      	ldr	r3, [pc, #60]	; (8007798 <MX_SPI2_Init+0x64>)
 800775a:	2200      	movs	r2, #0
 800775c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800775e:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <MX_SPI2_Init+0x64>)
 8007760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007764:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007766:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <MX_SPI2_Init+0x64>)
 8007768:	2200      	movs	r2, #0
 800776a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800776c:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <MX_SPI2_Init+0x64>)
 800776e:	2200      	movs	r2, #0
 8007770:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <MX_SPI2_Init+0x64>)
 8007774:	2200      	movs	r2, #0
 8007776:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007778:	4b07      	ldr	r3, [pc, #28]	; (8007798 <MX_SPI2_Init+0x64>)
 800777a:	2200      	movs	r2, #0
 800777c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <MX_SPI2_Init+0x64>)
 8007780:	220a      	movs	r2, #10
 8007782:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007784:	4804      	ldr	r0, [pc, #16]	; (8007798 <MX_SPI2_Init+0x64>)
 8007786:	f003 ff41 	bl	800b60c <HAL_SPI_Init>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007790:	f000 f8b8 	bl	8007904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007794:	bf00      	nop
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20000474 	.word	0x20000474
 800779c:	40003800 	.word	0x40003800

080077a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80077a4:	4b11      	ldr	r3, [pc, #68]	; (80077ec <MX_USART2_UART_Init+0x4c>)
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <MX_USART2_UART_Init+0x50>)
 80077a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80077aa:	4b10      	ldr	r3, [pc, #64]	; (80077ec <MX_USART2_UART_Init+0x4c>)
 80077ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80077b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80077b2:	4b0e      	ldr	r3, [pc, #56]	; (80077ec <MX_USART2_UART_Init+0x4c>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80077b8:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <MX_USART2_UART_Init+0x4c>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80077be:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <MX_USART2_UART_Init+0x4c>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80077c4:	4b09      	ldr	r3, [pc, #36]	; (80077ec <MX_USART2_UART_Init+0x4c>)
 80077c6:	220c      	movs	r2, #12
 80077c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80077ca:	4b08      	ldr	r3, [pc, #32]	; (80077ec <MX_USART2_UART_Init+0x4c>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <MX_USART2_UART_Init+0x4c>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80077d6:	4805      	ldr	r0, [pc, #20]	; (80077ec <MX_USART2_UART_Init+0x4c>)
 80077d8:	f004 fca0 	bl	800c11c <HAL_UART_Init>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80077e2:	f000 f88f 	bl	8007904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80077e6:	bf00      	nop
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	2000066c 	.word	0x2000066c
 80077f0:	40004400 	.word	0x40004400

080077f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80077fa:	4b10      	ldr	r3, [pc, #64]	; (800783c <MX_DMA_Init+0x48>)
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	4a0f      	ldr	r2, [pc, #60]	; (800783c <MX_DMA_Init+0x48>)
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	6153      	str	r3, [r2, #20]
 8007806:	4b0d      	ldr	r3, [pc, #52]	; (800783c <MX_DMA_Init+0x48>)
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	607b      	str	r3, [r7, #4]
 8007810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8007812:	2200      	movs	r2, #0
 8007814:	2100      	movs	r1, #0
 8007816:	2010      	movs	r0, #16
 8007818:	f000 fc97 	bl	800814a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800781c:	2010      	movs	r0, #16
 800781e:	f000 fcb0 	bl	8008182 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	2011      	movs	r0, #17
 8007828:	f000 fc8f 	bl	800814a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800782c:	2011      	movs	r0, #17
 800782e:	f000 fca8 	bl	8008182 <HAL_NVIC_EnableIRQ>

}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	40021000 	.word	0x40021000

08007840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007846:	f107 0310 	add.w	r3, r7, #16
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	605a      	str	r2, [r3, #4]
 8007850:	609a      	str	r2, [r3, #8]
 8007852:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007854:	4b28      	ldr	r3, [pc, #160]	; (80078f8 <MX_GPIO_Init+0xb8>)
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	4a27      	ldr	r2, [pc, #156]	; (80078f8 <MX_GPIO_Init+0xb8>)
 800785a:	f043 0320 	orr.w	r3, r3, #32
 800785e:	6193      	str	r3, [r2, #24]
 8007860:	4b25      	ldr	r3, [pc, #148]	; (80078f8 <MX_GPIO_Init+0xb8>)
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	f003 0320 	and.w	r3, r3, #32
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800786c:	4b22      	ldr	r3, [pc, #136]	; (80078f8 <MX_GPIO_Init+0xb8>)
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	4a21      	ldr	r2, [pc, #132]	; (80078f8 <MX_GPIO_Init+0xb8>)
 8007872:	f043 0304 	orr.w	r3, r3, #4
 8007876:	6193      	str	r3, [r2, #24]
 8007878:	4b1f      	ldr	r3, [pc, #124]	; (80078f8 <MX_GPIO_Init+0xb8>)
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	60bb      	str	r3, [r7, #8]
 8007882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007884:	4b1c      	ldr	r3, [pc, #112]	; (80078f8 <MX_GPIO_Init+0xb8>)
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	4a1b      	ldr	r2, [pc, #108]	; (80078f8 <MX_GPIO_Init+0xb8>)
 800788a:	f043 0308 	orr.w	r3, r3, #8
 800788e:	6193      	str	r3, [r2, #24]
 8007890:	4b19      	ldr	r3, [pc, #100]	; (80078f8 <MX_GPIO_Init+0xb8>)
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	f003 0308 	and.w	r3, r3, #8
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 800789c:	2200      	movs	r2, #0
 800789e:	f241 617f 	movw	r1, #5759	; 0x167f
 80078a2:	4816      	ldr	r0, [pc, #88]	; (80078fc <MX_GPIO_Init+0xbc>)
 80078a4:	f001 f820 	bl	80088e8 <HAL_GPIO_WritePin>
                          |CS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80078a8:	2200      	movs	r2, #0
 80078aa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80078ae:	4814      	ldr	r0, [pc, #80]	; (8007900 <MX_GPIO_Init+0xc0>)
 80078b0:	f001 f81a 	bl	80088e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin SS2_Pin SS3_Pin SS4_Pin
                           CS_FM_Pin DRDY4_Pin DRDY3_Pin DRDY2_Pin
                           DRDY1_Pin PB9 */
  GPIO_InitStruct.Pin = SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 80078b4:	f241 637f 	movw	r3, #5759	; 0x167f
 80078b8:	613b      	str	r3, [r7, #16]
                          |CS_FM_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078ba:	2301      	movs	r3, #1
 80078bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078c2:	2302      	movs	r3, #2
 80078c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c6:	f107 0310 	add.w	r3, r7, #16
 80078ca:	4619      	mov	r1, r3
 80078cc:	480b      	ldr	r0, [pc, #44]	; (80078fc <MX_GPIO_Init+0xbc>)
 80078ce:	f000 fe87 	bl	80085e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80078d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80078d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078d8:	2301      	movs	r3, #1
 80078da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078dc:	2301      	movs	r3, #1
 80078de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078e0:	2302      	movs	r3, #2
 80078e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078e4:	f107 0310 	add.w	r3, r7, #16
 80078e8:	4619      	mov	r1, r3
 80078ea:	4805      	ldr	r0, [pc, #20]	; (8007900 <MX_GPIO_Init+0xc0>)
 80078ec:	f000 fe78 	bl	80085e0 <HAL_GPIO_Init>

}
 80078f0:	bf00      	nop
 80078f2:	3720      	adds	r7, #32
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	40021000 	.word	0x40021000
 80078fc:	40010c00 	.word	0x40010c00
 8007900:	40010800 	.word	0x40010800

08007904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007908:	b672      	cpsid	i
}
 800790a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800790c:	e7fe      	b.n	800790c <Error_Handler+0x8>
	...

08007910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007916:	4b15      	ldr	r3, [pc, #84]	; (800796c <HAL_MspInit+0x5c>)
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	4a14      	ldr	r2, [pc, #80]	; (800796c <HAL_MspInit+0x5c>)
 800791c:	f043 0301 	orr.w	r3, r3, #1
 8007920:	6193      	str	r3, [r2, #24]
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <HAL_MspInit+0x5c>)
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	60bb      	str	r3, [r7, #8]
 800792c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800792e:	4b0f      	ldr	r3, [pc, #60]	; (800796c <HAL_MspInit+0x5c>)
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	4a0e      	ldr	r2, [pc, #56]	; (800796c <HAL_MspInit+0x5c>)
 8007934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007938:	61d3      	str	r3, [r2, #28]
 800793a:	4b0c      	ldr	r3, [pc, #48]	; (800796c <HAL_MspInit+0x5c>)
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007946:	4b0a      	ldr	r3, [pc, #40]	; (8007970 <HAL_MspInit+0x60>)
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	4a04      	ldr	r2, [pc, #16]	; (8007970 <HAL_MspInit+0x60>)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr
 800796c:	40021000 	.word	0x40021000
 8007970:	40010000 	.word	0x40010000

08007974 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a0b      	ldr	r2, [pc, #44]	; (80079b0 <HAL_RTC_MspInit+0x3c>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d110      	bne.n	80079a8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8007986:	f002 fd37 	bl	800a3f8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800798a:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <HAL_RTC_MspInit+0x40>)
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	4a09      	ldr	r2, [pc, #36]	; (80079b4 <HAL_RTC_MspInit+0x40>)
 8007990:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007994:	61d3      	str	r3, [r2, #28]
 8007996:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <HAL_RTC_MspInit+0x40>)
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80079a2:	4b05      	ldr	r3, [pc, #20]	; (80079b8 <HAL_RTC_MspInit+0x44>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80079a8:	bf00      	nop
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40002800 	.word	0x40002800
 80079b4:	40021000 	.word	0x40021000
 80079b8:	4242043c 	.word	0x4242043c

080079bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	; 0x28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c4:	f107 0318 	add.w	r3, r7, #24
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	605a      	str	r2, [r3, #4]
 80079ce:	609a      	str	r2, [r3, #8]
 80079d0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a37      	ldr	r2, [pc, #220]	; (8007ab4 <HAL_SPI_MspInit+0xf8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d130      	bne.n	8007a3e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80079dc:	4b36      	ldr	r3, [pc, #216]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	4a35      	ldr	r2, [pc, #212]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 80079e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079e6:	6193      	str	r3, [r2, #24]
 80079e8:	4b33      	ldr	r3, [pc, #204]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079f4:	4b30      	ldr	r3, [pc, #192]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	4a2f      	ldr	r2, [pc, #188]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 80079fa:	f043 0304 	orr.w	r3, r3, #4
 80079fe:	6193      	str	r3, [r2, #24]
 8007a00:	4b2d      	ldr	r3, [pc, #180]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	613b      	str	r3, [r7, #16]
 8007a0a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007a0c:	23a0      	movs	r3, #160	; 0xa0
 8007a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a10:	2302      	movs	r3, #2
 8007a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a14:	2303      	movs	r3, #3
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a18:	f107 0318 	add.w	r3, r7, #24
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4827      	ldr	r0, [pc, #156]	; (8007abc <HAL_SPI_MspInit+0x100>)
 8007a20:	f000 fdde 	bl	80085e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007a24:	2340      	movs	r3, #64	; 0x40
 8007a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a30:	f107 0318 	add.w	r3, r7, #24
 8007a34:	4619      	mov	r1, r3
 8007a36:	4821      	ldr	r0, [pc, #132]	; (8007abc <HAL_SPI_MspInit+0x100>)
 8007a38:	f000 fdd2 	bl	80085e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007a3c:	e036      	b.n	8007aac <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <HAL_SPI_MspInit+0x104>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d131      	bne.n	8007aac <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007a48:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	4a1a      	ldr	r2, [pc, #104]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 8007a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a52:	61d3      	str	r3, [r2, #28]
 8007a54:	4b18      	ldr	r3, [pc, #96]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a60:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	4a14      	ldr	r2, [pc, #80]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 8007a66:	f043 0308 	orr.w	r3, r3, #8
 8007a6a:	6193      	str	r3, [r2, #24]
 8007a6c:	4b12      	ldr	r3, [pc, #72]	; (8007ab8 <HAL_SPI_MspInit+0xfc>)
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	60bb      	str	r3, [r7, #8]
 8007a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007a78:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a82:	2303      	movs	r3, #3
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a86:	f107 0318 	add.w	r3, r7, #24
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	480d      	ldr	r0, [pc, #52]	; (8007ac4 <HAL_SPI_MspInit+0x108>)
 8007a8e:	f000 fda7 	bl	80085e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007a92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aa0:	f107 0318 	add.w	r3, r7, #24
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4807      	ldr	r0, [pc, #28]	; (8007ac4 <HAL_SPI_MspInit+0x108>)
 8007aa8:	f000 fd9a 	bl	80085e0 <HAL_GPIO_Init>
}
 8007aac:	bf00      	nop
 8007aae:	3728      	adds	r7, #40	; 0x28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40013000 	.word	0x40013000
 8007ab8:	40021000 	.word	0x40021000
 8007abc:	40010800 	.word	0x40010800
 8007ac0:	40003800 	.word	0x40003800
 8007ac4:	40010c00 	.word	0x40010c00

08007ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ad0:	f107 0310 	add.w	r3, r7, #16
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	605a      	str	r2, [r3, #4]
 8007ada:	609a      	str	r2, [r3, #8]
 8007adc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a46      	ldr	r2, [pc, #280]	; (8007bfc <HAL_UART_MspInit+0x134>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	f040 8084 	bne.w	8007bf2 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007aea:	4b45      	ldr	r3, [pc, #276]	; (8007c00 <HAL_UART_MspInit+0x138>)
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	4a44      	ldr	r2, [pc, #272]	; (8007c00 <HAL_UART_MspInit+0x138>)
 8007af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007af4:	61d3      	str	r3, [r2, #28]
 8007af6:	4b42      	ldr	r3, [pc, #264]	; (8007c00 <HAL_UART_MspInit+0x138>)
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b02:	4b3f      	ldr	r3, [pc, #252]	; (8007c00 <HAL_UART_MspInit+0x138>)
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	4a3e      	ldr	r2, [pc, #248]	; (8007c00 <HAL_UART_MspInit+0x138>)
 8007b08:	f043 0304 	orr.w	r3, r3, #4
 8007b0c:	6193      	str	r3, [r2, #24]
 8007b0e:	4b3c      	ldr	r3, [pc, #240]	; (8007c00 <HAL_UART_MspInit+0x138>)
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	60bb      	str	r3, [r7, #8]
 8007b18:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007b1a:	2304      	movs	r3, #4
 8007b1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007b22:	2303      	movs	r3, #3
 8007b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b26:	f107 0310 	add.w	r3, r7, #16
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4835      	ldr	r0, [pc, #212]	; (8007c04 <HAL_UART_MspInit+0x13c>)
 8007b2e:	f000 fd57 	bl	80085e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007b32:	2308      	movs	r3, #8
 8007b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b36:	2300      	movs	r3, #0
 8007b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b3e:	f107 0310 	add.w	r3, r7, #16
 8007b42:	4619      	mov	r1, r3
 8007b44:	482f      	ldr	r0, [pc, #188]	; (8007c04 <HAL_UART_MspInit+0x13c>)
 8007b46:	f000 fd4b 	bl	80085e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8007b4a:	4b2f      	ldr	r3, [pc, #188]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b4c:	4a2f      	ldr	r2, [pc, #188]	; (8007c0c <HAL_UART_MspInit+0x144>)
 8007b4e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b50:	4b2d      	ldr	r3, [pc, #180]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b56:	4b2c      	ldr	r3, [pc, #176]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007b5c:	4b2a      	ldr	r3, [pc, #168]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b5e:	2280      	movs	r2, #128	; 0x80
 8007b60:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007b62:	4b29      	ldr	r3, [pc, #164]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007b68:	4b27      	ldr	r3, [pc, #156]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007b6e:	4b26      	ldr	r3, [pc, #152]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007b74:	4b24      	ldr	r3, [pc, #144]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007b7a:	4823      	ldr	r0, [pc, #140]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b7c:	f000 fb1c 	bl	80081b8 <HAL_DMA_Init>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8007b86:	f7ff febd 	bl	8007904 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a1e      	ldr	r2, [pc, #120]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007b90:	4a1d      	ldr	r2, [pc, #116]	; (8007c08 <HAL_UART_MspInit+0x140>)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8007b96:	4b1e      	ldr	r3, [pc, #120]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007b98:	4a1e      	ldr	r2, [pc, #120]	; (8007c14 <HAL_UART_MspInit+0x14c>)
 8007b9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b9c:	4b1c      	ldr	r3, [pc, #112]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007b9e:	2210      	movs	r2, #16
 8007ba0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ba2:	4b1b      	ldr	r3, [pc, #108]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007ba8:	4b19      	ldr	r3, [pc, #100]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007baa:	2280      	movs	r2, #128	; 0x80
 8007bac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007bae:	4b18      	ldr	r3, [pc, #96]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bb4:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007bba:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007bc0:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007bc6:	4812      	ldr	r0, [pc, #72]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007bc8:	f000 faf6 	bl	80081b8 <HAL_DMA_Init>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8007bd2:	f7ff fe97 	bl	8007904 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a0d      	ldr	r2, [pc, #52]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
 8007bdc:	4a0c      	ldr	r2, [pc, #48]	; (8007c10 <HAL_UART_MspInit+0x148>)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007be2:	2200      	movs	r2, #0
 8007be4:	2100      	movs	r1, #0
 8007be6:	2026      	movs	r0, #38	; 0x26
 8007be8:	f000 faaf 	bl	800814a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007bec:	2026      	movs	r0, #38	; 0x26
 8007bee:	f000 fac8 	bl	8008182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007bf2:	bf00      	nop
 8007bf4:	3720      	adds	r7, #32
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	40004400 	.word	0x40004400
 8007c00:	40021000 	.word	0x40021000
 8007c04:	40010800 	.word	0x40010800
 8007c08:	20000430 	.word	0x20000430
 8007c0c:	4002006c 	.word	0x4002006c
 8007c10:	200005ac 	.word	0x200005ac
 8007c14:	40020080 	.word	0x40020080

08007c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007c1c:	e7fe      	b.n	8007c1c <NMI_Handler+0x4>

08007c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c22:	e7fe      	b.n	8007c22 <HardFault_Handler+0x4>

08007c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c28:	e7fe      	b.n	8007c28 <MemManage_Handler+0x4>

08007c2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c2e:	e7fe      	b.n	8007c2e <BusFault_Handler+0x4>

08007c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c34:	e7fe      	b.n	8007c34 <UsageFault_Handler+0x4>

08007c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c36:	b480      	push	{r7}
 8007c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c3a:	bf00      	nop
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bc80      	pop	{r7}
 8007c40:	4770      	bx	lr

08007c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c42:	b480      	push	{r7}
 8007c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c46:	bf00      	nop
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr

08007c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c52:	bf00      	nop
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr

08007c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c5e:	f000 f95d 	bl	8007f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c62:	bf00      	nop
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007c6c:	4802      	ldr	r0, [pc, #8]	; (8007c78 <DMA1_Channel6_IRQHandler+0x10>)
 8007c6e:	f000 fbb1 	bl	80083d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8007c72:	bf00      	nop
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000430 	.word	0x20000430

08007c7c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007c80:	4802      	ldr	r0, [pc, #8]	; (8007c8c <DMA1_Channel7_IRQHandler+0x10>)
 8007c82:	f000 fba7 	bl	80083d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8007c86:	bf00      	nop
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200005ac 	.word	0x200005ac

08007c90 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007c94:	4802      	ldr	r0, [pc, #8]	; (8007ca0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8007c96:	f000 ff64 	bl	8008b62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8007c9a:	bf00      	nop
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	2000136c 	.word	0x2000136c

08007ca4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007ca8:	4802      	ldr	r0, [pc, #8]	; (8007cb4 <USART2_IRQHandler+0x10>)
 8007caa:	f004 fb0b 	bl	800c2c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007cae:	bf00      	nop
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	2000066c 	.word	0x2000066c

08007cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	af00      	add	r7, sp, #0
	return 1;
 8007cbc:	2301      	movs	r3, #1
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr

08007cc6 <_kill>:

int _kill(int pid, int sig)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007cd0:	f009 f952 	bl	8010f78 <__errno>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2216      	movs	r2, #22
 8007cd8:	601a      	str	r2, [r3, #0]
	return -1;
 8007cda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <_exit>:

void _exit (int status)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007cee:	f04f 31ff 	mov.w	r1, #4294967295
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7ff ffe7 	bl	8007cc6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007cf8:	e7fe      	b.n	8007cf8 <_exit+0x12>

08007cfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b086      	sub	sp, #24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d06:	2300      	movs	r3, #0
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	e00a      	b.n	8007d22 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007d0c:	f3af 8000 	nop.w
 8007d10:	4601      	mov	r1, r0
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	60ba      	str	r2, [r7, #8]
 8007d18:	b2ca      	uxtb	r2, r1
 8007d1a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	dbf0      	blt.n	8007d0c <_read+0x12>
	}

return len;
 8007d2a:	687b      	ldr	r3, [r7, #4]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	e009      	b.n	8007d5a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	60ba      	str	r2, [r7, #8]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	3301      	adds	r3, #1
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	dbf1      	blt.n	8007d46 <_write+0x12>
	}
	return len;
 8007d62:	687b      	ldr	r3, [r7, #4]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <_close>:

int _close(int file)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	return -1;
 8007d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bc80      	pop	{r7}
 8007d80:	4770      	bx	lr

08007d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007d92:	605a      	str	r2, [r3, #4]
	return 0;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr

08007da0 <_isatty>:

int _isatty(int file)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
	return 1;
 8007da8:	2301      	movs	r3, #1
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bc80      	pop	{r7}
 8007dca:	4770      	bx	lr

08007dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007dd4:	4a14      	ldr	r2, [pc, #80]	; (8007e28 <_sbrk+0x5c>)
 8007dd6:	4b15      	ldr	r3, [pc, #84]	; (8007e2c <_sbrk+0x60>)
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007de0:	4b13      	ldr	r3, [pc, #76]	; (8007e30 <_sbrk+0x64>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007de8:	4b11      	ldr	r3, [pc, #68]	; (8007e30 <_sbrk+0x64>)
 8007dea:	4a12      	ldr	r2, [pc, #72]	; (8007e34 <_sbrk+0x68>)
 8007dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007dee:	4b10      	ldr	r3, [pc, #64]	; (8007e30 <_sbrk+0x64>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4413      	add	r3, r2
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d207      	bcs.n	8007e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007dfc:	f009 f8bc 	bl	8010f78 <__errno>
 8007e00:	4603      	mov	r3, r0
 8007e02:	220c      	movs	r2, #12
 8007e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007e06:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0a:	e009      	b.n	8007e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007e0c:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <_sbrk+0x64>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007e12:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <_sbrk+0x64>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4413      	add	r3, r2
 8007e1a:	4a05      	ldr	r2, [pc, #20]	; (8007e30 <_sbrk+0x64>)
 8007e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20005000 	.word	0x20005000
 8007e2c:	00000400 	.word	0x00000400
 8007e30:	20000200 	.word	0x20000200
 8007e34:	20001670 	.word	0x20001670

08007e38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007e3c:	bf00      	nop
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007e44:	f7ff fff8 	bl	8007e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007e48:	480b      	ldr	r0, [pc, #44]	; (8007e78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007e4a:	490c      	ldr	r1, [pc, #48]	; (8007e7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007e4c:	4a0c      	ldr	r2, [pc, #48]	; (8007e80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007e50:	e002      	b.n	8007e58 <LoopCopyDataInit>

08007e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007e56:	3304      	adds	r3, #4

08007e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007e5c:	d3f9      	bcc.n	8007e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007e5e:	4a09      	ldr	r2, [pc, #36]	; (8007e84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007e60:	4c09      	ldr	r4, [pc, #36]	; (8007e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007e64:	e001      	b.n	8007e6a <LoopFillZerobss>

08007e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007e68:	3204      	adds	r2, #4

08007e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007e6c:	d3fb      	bcc.n	8007e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007e6e:	f009 f89b 	bl	8010fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007e72:	f7ff fb01 	bl	8007478 <main>
  bx lr
 8007e76:	4770      	bx	lr
  ldr r0, =_sdata
 8007e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007e7c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8007e80:	08012ff0 	.word	0x08012ff0
  ldr r2, =_sbss
 8007e84:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8007e88:	2000166c 	.word	0x2000166c

08007e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007e8c:	e7fe      	b.n	8007e8c <ADC1_2_IRQHandler>
	...

08007e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e94:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <HAL_Init+0x28>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a07      	ldr	r2, [pc, #28]	; (8007eb8 <HAL_Init+0x28>)
 8007e9a:	f043 0310 	orr.w	r3, r3, #16
 8007e9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ea0:	2003      	movs	r0, #3
 8007ea2:	f000 f947 	bl	8008134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007ea6:	200f      	movs	r0, #15
 8007ea8:	f000 f808 	bl	8007ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007eac:	f7ff fd30 	bl	8007910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	40022000 	.word	0x40022000

08007ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ec4:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <HAL_InitTick+0x54>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	4b12      	ldr	r3, [pc, #72]	; (8007f14 <HAL_InitTick+0x58>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	4619      	mov	r1, r3
 8007ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 f95f 	bl	800819e <HAL_SYSTICK_Config>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e00e      	b.n	8007f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b0f      	cmp	r3, #15
 8007eee:	d80a      	bhi.n	8007f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	f000 f927 	bl	800814a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007efc:	4a06      	ldr	r2, [pc, #24]	; (8007f18 <HAL_InitTick+0x5c>)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e000      	b.n	8007f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	20000000 	.word	0x20000000
 8007f14:	20000008 	.word	0x20000008
 8007f18:	20000004 	.word	0x20000004

08007f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <HAL_IncTick+0x1c>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <HAL_IncTick+0x20>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	4a03      	ldr	r2, [pc, #12]	; (8007f3c <HAL_IncTick+0x20>)
 8007f2e:	6013      	str	r3, [r2, #0]
}
 8007f30:	bf00      	nop
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr
 8007f38:	20000008 	.word	0x20000008
 8007f3c:	200006d4 	.word	0x200006d4

08007f40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  return uwTick;
 8007f44:	4b02      	ldr	r3, [pc, #8]	; (8007f50 <HAL_GetTick+0x10>)
 8007f46:	681b      	ldr	r3, [r3, #0]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr
 8007f50:	200006d4 	.word	0x200006d4

08007f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007f5c:	f7ff fff0 	bl	8007f40 <HAL_GetTick>
 8007f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6c:	d005      	beq.n	8007f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007f6e:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <HAL_Delay+0x44>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007f7a:	bf00      	nop
 8007f7c:	f7ff ffe0 	bl	8007f40 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d8f7      	bhi.n	8007f7c <HAL_Delay+0x28>
  {
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000008 	.word	0x20000008

08007f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007fac:	4b0c      	ldr	r3, [pc, #48]	; (8007fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007fb8:	4013      	ands	r3, r2
 8007fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fce:	4a04      	ldr	r2, [pc, #16]	; (8007fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	60d3      	str	r3, [r2, #12]
}
 8007fd4:	bf00      	nop
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bc80      	pop	{r7}
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	e000ed00 	.word	0xe000ed00

08007fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fe8:	4b04      	ldr	r3, [pc, #16]	; (8007ffc <__NVIC_GetPriorityGrouping+0x18>)
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	0a1b      	lsrs	r3, r3, #8
 8007fee:	f003 0307 	and.w	r3, r3, #7
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bc80      	pop	{r7}
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	e000ed00 	.word	0xe000ed00

08008000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800800a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800800e:	2b00      	cmp	r3, #0
 8008010:	db0b      	blt.n	800802a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	f003 021f 	and.w	r2, r3, #31
 8008018:	4906      	ldr	r1, [pc, #24]	; (8008034 <__NVIC_EnableIRQ+0x34>)
 800801a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	2001      	movs	r0, #1
 8008022:	fa00 f202 	lsl.w	r2, r0, r2
 8008026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr
 8008034:	e000e100 	.word	0xe000e100

08008038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	6039      	str	r1, [r7, #0]
 8008042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008048:	2b00      	cmp	r3, #0
 800804a:	db0a      	blt.n	8008062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	b2da      	uxtb	r2, r3
 8008050:	490c      	ldr	r1, [pc, #48]	; (8008084 <__NVIC_SetPriority+0x4c>)
 8008052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008056:	0112      	lsls	r2, r2, #4
 8008058:	b2d2      	uxtb	r2, r2
 800805a:	440b      	add	r3, r1
 800805c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008060:	e00a      	b.n	8008078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	b2da      	uxtb	r2, r3
 8008066:	4908      	ldr	r1, [pc, #32]	; (8008088 <__NVIC_SetPriority+0x50>)
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	3b04      	subs	r3, #4
 8008070:	0112      	lsls	r2, r2, #4
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	440b      	add	r3, r1
 8008076:	761a      	strb	r2, [r3, #24]
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	e000e100 	.word	0xe000e100
 8008088:	e000ed00 	.word	0xe000ed00

0800808c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800808c:	b480      	push	{r7}
 800808e:	b089      	sub	sp, #36	; 0x24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	f1c3 0307 	rsb	r3, r3, #7
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	bf28      	it	cs
 80080aa:	2304      	movcs	r3, #4
 80080ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	3304      	adds	r3, #4
 80080b2:	2b06      	cmp	r3, #6
 80080b4:	d902      	bls.n	80080bc <NVIC_EncodePriority+0x30>
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	3b03      	subs	r3, #3
 80080ba:	e000      	b.n	80080be <NVIC_EncodePriority+0x32>
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080c0:	f04f 32ff 	mov.w	r2, #4294967295
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ca:	43da      	mvns	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	401a      	ands	r2, r3
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080d4:	f04f 31ff 	mov.w	r1, #4294967295
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	fa01 f303 	lsl.w	r3, r1, r3
 80080de:	43d9      	mvns	r1, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080e4:	4313      	orrs	r3, r2
         );
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3724      	adds	r7, #36	; 0x24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bc80      	pop	{r7}
 80080ee:	4770      	bx	lr

080080f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008100:	d301      	bcc.n	8008106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008102:	2301      	movs	r3, #1
 8008104:	e00f      	b.n	8008126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008106:	4a0a      	ldr	r2, [pc, #40]	; (8008130 <SysTick_Config+0x40>)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3b01      	subs	r3, #1
 800810c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800810e:	210f      	movs	r1, #15
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	f7ff ff90 	bl	8008038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008118:	4b05      	ldr	r3, [pc, #20]	; (8008130 <SysTick_Config+0x40>)
 800811a:	2200      	movs	r2, #0
 800811c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800811e:	4b04      	ldr	r3, [pc, #16]	; (8008130 <SysTick_Config+0x40>)
 8008120:	2207      	movs	r2, #7
 8008122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	e000e010 	.word	0xe000e010

08008134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff ff2d 	bl	8007f9c <__NVIC_SetPriorityGrouping>
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800814a:	b580      	push	{r7, lr}
 800814c:	b086      	sub	sp, #24
 800814e:	af00      	add	r7, sp, #0
 8008150:	4603      	mov	r3, r0
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]
 8008156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800815c:	f7ff ff42 	bl	8007fe4 <__NVIC_GetPriorityGrouping>
 8008160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	68b9      	ldr	r1, [r7, #8]
 8008166:	6978      	ldr	r0, [r7, #20]
 8008168:	f7ff ff90 	bl	800808c <NVIC_EncodePriority>
 800816c:	4602      	mov	r2, r0
 800816e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008172:	4611      	mov	r1, r2
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff ff5f 	bl	8008038 <__NVIC_SetPriority>
}
 800817a:	bf00      	nop
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	4603      	mov	r3, r0
 800818a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800818c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff ff35 	bl	8008000 <__NVIC_EnableIRQ>
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff ffa2 	bl	80080f0 <SysTick_Config>
 80081ac:	4603      	mov	r3, r0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e043      	b.n	8008256 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	4b22      	ldr	r3, [pc, #136]	; (8008260 <HAL_DMA_Init+0xa8>)
 80081d6:	4413      	add	r3, r2
 80081d8:	4a22      	ldr	r2, [pc, #136]	; (8008264 <HAL_DMA_Init+0xac>)
 80081da:	fba2 2303 	umull	r2, r3, r2, r3
 80081de:	091b      	lsrs	r3, r3, #4
 80081e0:	009a      	lsls	r2, r3, #2
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a1f      	ldr	r2, [pc, #124]	; (8008268 <HAL_DMA_Init+0xb0>)
 80081ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008202:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008206:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008210:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800821c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008228:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr
 8008260:	bffdfff8 	.word	0xbffdfff8
 8008264:	cccccccd 	.word	0xcccccccd
 8008268:	40020000 	.word	0x40020000

0800826c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d008      	beq.n	8008296 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2204      	movs	r2, #4
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e020      	b.n	80082d8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 020e 	bic.w	r2, r2, #14
 80082a4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0201 	bic.w	r2, r2, #1
 80082b4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	2101      	movs	r1, #1
 80082c0:	fa01 f202 	lsl.w	r2, r1, r2
 80082c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr
	...

080082e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d005      	beq.n	8008308 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2204      	movs	r2, #4
 8008300:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	73fb      	strb	r3, [r7, #15]
 8008306:	e051      	b.n	80083ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 020e 	bic.w	r2, r2, #14
 8008316:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0201 	bic.w	r2, r2, #1
 8008326:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a22      	ldr	r2, [pc, #136]	; (80083b8 <HAL_DMA_Abort_IT+0xd4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d029      	beq.n	8008386 <HAL_DMA_Abort_IT+0xa2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a21      	ldr	r2, [pc, #132]	; (80083bc <HAL_DMA_Abort_IT+0xd8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d022      	beq.n	8008382 <HAL_DMA_Abort_IT+0x9e>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a1f      	ldr	r2, [pc, #124]	; (80083c0 <HAL_DMA_Abort_IT+0xdc>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01a      	beq.n	800837c <HAL_DMA_Abort_IT+0x98>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1e      	ldr	r2, [pc, #120]	; (80083c4 <HAL_DMA_Abort_IT+0xe0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d012      	beq.n	8008376 <HAL_DMA_Abort_IT+0x92>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1c      	ldr	r2, [pc, #112]	; (80083c8 <HAL_DMA_Abort_IT+0xe4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00a      	beq.n	8008370 <HAL_DMA_Abort_IT+0x8c>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1b      	ldr	r2, [pc, #108]	; (80083cc <HAL_DMA_Abort_IT+0xe8>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d102      	bne.n	800836a <HAL_DMA_Abort_IT+0x86>
 8008364:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008368:	e00e      	b.n	8008388 <HAL_DMA_Abort_IT+0xa4>
 800836a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800836e:	e00b      	b.n	8008388 <HAL_DMA_Abort_IT+0xa4>
 8008370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008374:	e008      	b.n	8008388 <HAL_DMA_Abort_IT+0xa4>
 8008376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800837a:	e005      	b.n	8008388 <HAL_DMA_Abort_IT+0xa4>
 800837c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008380:	e002      	b.n	8008388 <HAL_DMA_Abort_IT+0xa4>
 8008382:	2310      	movs	r3, #16
 8008384:	e000      	b.n	8008388 <HAL_DMA_Abort_IT+0xa4>
 8008386:	2301      	movs	r3, #1
 8008388:	4a11      	ldr	r2, [pc, #68]	; (80083d0 <HAL_DMA_Abort_IT+0xec>)
 800838a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	4798      	blx	r3
    } 
  }
  return status;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40020008 	.word	0x40020008
 80083bc:	4002001c 	.word	0x4002001c
 80083c0:	40020030 	.word	0x40020030
 80083c4:	40020044 	.word	0x40020044
 80083c8:	40020058 	.word	0x40020058
 80083cc:	4002006c 	.word	0x4002006c
 80083d0:	40020000 	.word	0x40020000

080083d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f0:	2204      	movs	r2, #4
 80083f2:	409a      	lsls	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4013      	ands	r3, r2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d04f      	beq.n	800849c <HAL_DMA_IRQHandler+0xc8>
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f003 0304 	and.w	r3, r3, #4
 8008402:	2b00      	cmp	r3, #0
 8008404:	d04a      	beq.n	800849c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b00      	cmp	r3, #0
 8008412:	d107      	bne.n	8008424 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0204 	bic.w	r2, r2, #4
 8008422:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a66      	ldr	r2, [pc, #408]	; (80085c4 <HAL_DMA_IRQHandler+0x1f0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d029      	beq.n	8008482 <HAL_DMA_IRQHandler+0xae>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a65      	ldr	r2, [pc, #404]	; (80085c8 <HAL_DMA_IRQHandler+0x1f4>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d022      	beq.n	800847e <HAL_DMA_IRQHandler+0xaa>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a63      	ldr	r2, [pc, #396]	; (80085cc <HAL_DMA_IRQHandler+0x1f8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d01a      	beq.n	8008478 <HAL_DMA_IRQHandler+0xa4>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a62      	ldr	r2, [pc, #392]	; (80085d0 <HAL_DMA_IRQHandler+0x1fc>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d012      	beq.n	8008472 <HAL_DMA_IRQHandler+0x9e>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a60      	ldr	r2, [pc, #384]	; (80085d4 <HAL_DMA_IRQHandler+0x200>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d00a      	beq.n	800846c <HAL_DMA_IRQHandler+0x98>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a5f      	ldr	r2, [pc, #380]	; (80085d8 <HAL_DMA_IRQHandler+0x204>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d102      	bne.n	8008466 <HAL_DMA_IRQHandler+0x92>
 8008460:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008464:	e00e      	b.n	8008484 <HAL_DMA_IRQHandler+0xb0>
 8008466:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800846a:	e00b      	b.n	8008484 <HAL_DMA_IRQHandler+0xb0>
 800846c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008470:	e008      	b.n	8008484 <HAL_DMA_IRQHandler+0xb0>
 8008472:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008476:	e005      	b.n	8008484 <HAL_DMA_IRQHandler+0xb0>
 8008478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800847c:	e002      	b.n	8008484 <HAL_DMA_IRQHandler+0xb0>
 800847e:	2340      	movs	r3, #64	; 0x40
 8008480:	e000      	b.n	8008484 <HAL_DMA_IRQHandler+0xb0>
 8008482:	2304      	movs	r3, #4
 8008484:	4a55      	ldr	r2, [pc, #340]	; (80085dc <HAL_DMA_IRQHandler+0x208>)
 8008486:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 8094 	beq.w	80085ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800849a:	e08e      	b.n	80085ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a0:	2202      	movs	r2, #2
 80084a2:	409a      	lsls	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4013      	ands	r3, r2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d056      	beq.n	800855a <HAL_DMA_IRQHandler+0x186>
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d051      	beq.n	800855a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0320 	and.w	r3, r3, #32
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10b      	bne.n	80084dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 020a 	bic.w	r2, r2, #10
 80084d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a38      	ldr	r2, [pc, #224]	; (80085c4 <HAL_DMA_IRQHandler+0x1f0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d029      	beq.n	800853a <HAL_DMA_IRQHandler+0x166>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a37      	ldr	r2, [pc, #220]	; (80085c8 <HAL_DMA_IRQHandler+0x1f4>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d022      	beq.n	8008536 <HAL_DMA_IRQHandler+0x162>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a35      	ldr	r2, [pc, #212]	; (80085cc <HAL_DMA_IRQHandler+0x1f8>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d01a      	beq.n	8008530 <HAL_DMA_IRQHandler+0x15c>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a34      	ldr	r2, [pc, #208]	; (80085d0 <HAL_DMA_IRQHandler+0x1fc>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d012      	beq.n	800852a <HAL_DMA_IRQHandler+0x156>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a32      	ldr	r2, [pc, #200]	; (80085d4 <HAL_DMA_IRQHandler+0x200>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00a      	beq.n	8008524 <HAL_DMA_IRQHandler+0x150>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a31      	ldr	r2, [pc, #196]	; (80085d8 <HAL_DMA_IRQHandler+0x204>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d102      	bne.n	800851e <HAL_DMA_IRQHandler+0x14a>
 8008518:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800851c:	e00e      	b.n	800853c <HAL_DMA_IRQHandler+0x168>
 800851e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008522:	e00b      	b.n	800853c <HAL_DMA_IRQHandler+0x168>
 8008524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008528:	e008      	b.n	800853c <HAL_DMA_IRQHandler+0x168>
 800852a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800852e:	e005      	b.n	800853c <HAL_DMA_IRQHandler+0x168>
 8008530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008534:	e002      	b.n	800853c <HAL_DMA_IRQHandler+0x168>
 8008536:	2320      	movs	r3, #32
 8008538:	e000      	b.n	800853c <HAL_DMA_IRQHandler+0x168>
 800853a:	2302      	movs	r3, #2
 800853c:	4a27      	ldr	r2, [pc, #156]	; (80085dc <HAL_DMA_IRQHandler+0x208>)
 800853e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	2b00      	cmp	r3, #0
 800854e:	d034      	beq.n	80085ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008558:	e02f      	b.n	80085ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855e:	2208      	movs	r2, #8
 8008560:	409a      	lsls	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4013      	ands	r3, r2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d028      	beq.n	80085bc <HAL_DMA_IRQHandler+0x1e8>
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d023      	beq.n	80085bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 020e 	bic.w	r2, r2, #14
 8008582:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858c:	2101      	movs	r1, #1
 800858e:	fa01 f202 	lsl.w	r2, r1, r2
 8008592:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d004      	beq.n	80085bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	4798      	blx	r3
    }
  }
  return;
 80085ba:	bf00      	nop
 80085bc:	bf00      	nop
}
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	40020008 	.word	0x40020008
 80085c8:	4002001c 	.word	0x4002001c
 80085cc:	40020030 	.word	0x40020030
 80085d0:	40020044 	.word	0x40020044
 80085d4:	40020058 	.word	0x40020058
 80085d8:	4002006c 	.word	0x4002006c
 80085dc:	40020000 	.word	0x40020000

080085e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b08b      	sub	sp, #44	; 0x2c
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80085ea:	2300      	movs	r3, #0
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80085ee:	2300      	movs	r3, #0
 80085f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085f2:	e169      	b.n	80088c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80085f4:	2201      	movs	r2, #1
 80085f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	4013      	ands	r3, r2
 8008606:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	429a      	cmp	r2, r3
 800860e:	f040 8158 	bne.w	80088c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	4a9a      	ldr	r2, [pc, #616]	; (8008880 <HAL_GPIO_Init+0x2a0>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d05e      	beq.n	80086da <HAL_GPIO_Init+0xfa>
 800861c:	4a98      	ldr	r2, [pc, #608]	; (8008880 <HAL_GPIO_Init+0x2a0>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d875      	bhi.n	800870e <HAL_GPIO_Init+0x12e>
 8008622:	4a98      	ldr	r2, [pc, #608]	; (8008884 <HAL_GPIO_Init+0x2a4>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d058      	beq.n	80086da <HAL_GPIO_Init+0xfa>
 8008628:	4a96      	ldr	r2, [pc, #600]	; (8008884 <HAL_GPIO_Init+0x2a4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d86f      	bhi.n	800870e <HAL_GPIO_Init+0x12e>
 800862e:	4a96      	ldr	r2, [pc, #600]	; (8008888 <HAL_GPIO_Init+0x2a8>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d052      	beq.n	80086da <HAL_GPIO_Init+0xfa>
 8008634:	4a94      	ldr	r2, [pc, #592]	; (8008888 <HAL_GPIO_Init+0x2a8>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d869      	bhi.n	800870e <HAL_GPIO_Init+0x12e>
 800863a:	4a94      	ldr	r2, [pc, #592]	; (800888c <HAL_GPIO_Init+0x2ac>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d04c      	beq.n	80086da <HAL_GPIO_Init+0xfa>
 8008640:	4a92      	ldr	r2, [pc, #584]	; (800888c <HAL_GPIO_Init+0x2ac>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d863      	bhi.n	800870e <HAL_GPIO_Init+0x12e>
 8008646:	4a92      	ldr	r2, [pc, #584]	; (8008890 <HAL_GPIO_Init+0x2b0>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d046      	beq.n	80086da <HAL_GPIO_Init+0xfa>
 800864c:	4a90      	ldr	r2, [pc, #576]	; (8008890 <HAL_GPIO_Init+0x2b0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d85d      	bhi.n	800870e <HAL_GPIO_Init+0x12e>
 8008652:	2b12      	cmp	r3, #18
 8008654:	d82a      	bhi.n	80086ac <HAL_GPIO_Init+0xcc>
 8008656:	2b12      	cmp	r3, #18
 8008658:	d859      	bhi.n	800870e <HAL_GPIO_Init+0x12e>
 800865a:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <HAL_GPIO_Init+0x80>)
 800865c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008660:	080086db 	.word	0x080086db
 8008664:	080086b5 	.word	0x080086b5
 8008668:	080086c7 	.word	0x080086c7
 800866c:	08008709 	.word	0x08008709
 8008670:	0800870f 	.word	0x0800870f
 8008674:	0800870f 	.word	0x0800870f
 8008678:	0800870f 	.word	0x0800870f
 800867c:	0800870f 	.word	0x0800870f
 8008680:	0800870f 	.word	0x0800870f
 8008684:	0800870f 	.word	0x0800870f
 8008688:	0800870f 	.word	0x0800870f
 800868c:	0800870f 	.word	0x0800870f
 8008690:	0800870f 	.word	0x0800870f
 8008694:	0800870f 	.word	0x0800870f
 8008698:	0800870f 	.word	0x0800870f
 800869c:	0800870f 	.word	0x0800870f
 80086a0:	0800870f 	.word	0x0800870f
 80086a4:	080086bd 	.word	0x080086bd
 80086a8:	080086d1 	.word	0x080086d1
 80086ac:	4a79      	ldr	r2, [pc, #484]	; (8008894 <HAL_GPIO_Init+0x2b4>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d013      	beq.n	80086da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80086b2:	e02c      	b.n	800870e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	623b      	str	r3, [r7, #32]
          break;
 80086ba:	e029      	b.n	8008710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	3304      	adds	r3, #4
 80086c2:	623b      	str	r3, [r7, #32]
          break;
 80086c4:	e024      	b.n	8008710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	3308      	adds	r3, #8
 80086cc:	623b      	str	r3, [r7, #32]
          break;
 80086ce:	e01f      	b.n	8008710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	330c      	adds	r3, #12
 80086d6:	623b      	str	r3, [r7, #32]
          break;
 80086d8:	e01a      	b.n	8008710 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d102      	bne.n	80086e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80086e2:	2304      	movs	r3, #4
 80086e4:	623b      	str	r3, [r7, #32]
          break;
 80086e6:	e013      	b.n	8008710 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d105      	bne.n	80086fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80086f0:	2308      	movs	r3, #8
 80086f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	611a      	str	r2, [r3, #16]
          break;
 80086fa:	e009      	b.n	8008710 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80086fc:	2308      	movs	r3, #8
 80086fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	615a      	str	r2, [r3, #20]
          break;
 8008706:	e003      	b.n	8008710 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008708:	2300      	movs	r3, #0
 800870a:	623b      	str	r3, [r7, #32]
          break;
 800870c:	e000      	b.n	8008710 <HAL_GPIO_Init+0x130>
          break;
 800870e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	2bff      	cmp	r3, #255	; 0xff
 8008714:	d801      	bhi.n	800871a <HAL_GPIO_Init+0x13a>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	e001      	b.n	800871e <HAL_GPIO_Init+0x13e>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3304      	adds	r3, #4
 800871e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	2bff      	cmp	r3, #255	; 0xff
 8008724:	d802      	bhi.n	800872c <HAL_GPIO_Init+0x14c>
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	e002      	b.n	8008732 <HAL_GPIO_Init+0x152>
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	3b08      	subs	r3, #8
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	210f      	movs	r1, #15
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	fa01 f303 	lsl.w	r3, r1, r3
 8008740:	43db      	mvns	r3, r3
 8008742:	401a      	ands	r2, r3
 8008744:	6a39      	ldr	r1, [r7, #32]
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	fa01 f303 	lsl.w	r3, r1, r3
 800874c:	431a      	orrs	r2, r3
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 80b1 	beq.w	80088c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008760:	4b4d      	ldr	r3, [pc, #308]	; (8008898 <HAL_GPIO_Init+0x2b8>)
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	4a4c      	ldr	r2, [pc, #304]	; (8008898 <HAL_GPIO_Init+0x2b8>)
 8008766:	f043 0301 	orr.w	r3, r3, #1
 800876a:	6193      	str	r3, [r2, #24]
 800876c:	4b4a      	ldr	r3, [pc, #296]	; (8008898 <HAL_GPIO_Init+0x2b8>)
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	60bb      	str	r3, [r7, #8]
 8008776:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008778:	4a48      	ldr	r2, [pc, #288]	; (800889c <HAL_GPIO_Init+0x2bc>)
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	089b      	lsrs	r3, r3, #2
 800877e:	3302      	adds	r3, #2
 8008780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008784:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	220f      	movs	r2, #15
 8008790:	fa02 f303 	lsl.w	r3, r2, r3
 8008794:	43db      	mvns	r3, r3
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4013      	ands	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a40      	ldr	r2, [pc, #256]	; (80088a0 <HAL_GPIO_Init+0x2c0>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d013      	beq.n	80087cc <HAL_GPIO_Init+0x1ec>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a3f      	ldr	r2, [pc, #252]	; (80088a4 <HAL_GPIO_Init+0x2c4>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00d      	beq.n	80087c8 <HAL_GPIO_Init+0x1e8>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a3e      	ldr	r2, [pc, #248]	; (80088a8 <HAL_GPIO_Init+0x2c8>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d007      	beq.n	80087c4 <HAL_GPIO_Init+0x1e4>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a3d      	ldr	r2, [pc, #244]	; (80088ac <HAL_GPIO_Init+0x2cc>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d101      	bne.n	80087c0 <HAL_GPIO_Init+0x1e0>
 80087bc:	2303      	movs	r3, #3
 80087be:	e006      	b.n	80087ce <HAL_GPIO_Init+0x1ee>
 80087c0:	2304      	movs	r3, #4
 80087c2:	e004      	b.n	80087ce <HAL_GPIO_Init+0x1ee>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e002      	b.n	80087ce <HAL_GPIO_Init+0x1ee>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e000      	b.n	80087ce <HAL_GPIO_Init+0x1ee>
 80087cc:	2300      	movs	r3, #0
 80087ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d0:	f002 0203 	and.w	r2, r2, #3
 80087d4:	0092      	lsls	r2, r2, #2
 80087d6:	4093      	lsls	r3, r2
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80087de:	492f      	ldr	r1, [pc, #188]	; (800889c <HAL_GPIO_Init+0x2bc>)
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	089b      	lsrs	r3, r3, #2
 80087e4:	3302      	adds	r3, #2
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d006      	beq.n	8008806 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80087f8:	4b2d      	ldr	r3, [pc, #180]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	492c      	ldr	r1, [pc, #176]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	4313      	orrs	r3, r2
 8008802:	608b      	str	r3, [r1, #8]
 8008804:	e006      	b.n	8008814 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008806:	4b2a      	ldr	r3, [pc, #168]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	43db      	mvns	r3, r3
 800880e:	4928      	ldr	r1, [pc, #160]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 8008810:	4013      	ands	r3, r2
 8008812:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d006      	beq.n	800882e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008820:	4b23      	ldr	r3, [pc, #140]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	4922      	ldr	r1, [pc, #136]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	4313      	orrs	r3, r2
 800882a:	60cb      	str	r3, [r1, #12]
 800882c:	e006      	b.n	800883c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800882e:	4b20      	ldr	r3, [pc, #128]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	43db      	mvns	r3, r3
 8008836:	491e      	ldr	r1, [pc, #120]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 8008838:	4013      	ands	r3, r2
 800883a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d006      	beq.n	8008856 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008848:	4b19      	ldr	r3, [pc, #100]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	4918      	ldr	r1, [pc, #96]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	4313      	orrs	r3, r2
 8008852:	604b      	str	r3, [r1, #4]
 8008854:	e006      	b.n	8008864 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008856:	4b16      	ldr	r3, [pc, #88]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	43db      	mvns	r3, r3
 800885e:	4914      	ldr	r1, [pc, #80]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 8008860:	4013      	ands	r3, r2
 8008862:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d021      	beq.n	80088b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008870:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	490e      	ldr	r1, [pc, #56]	; (80088b0 <HAL_GPIO_Init+0x2d0>)
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	4313      	orrs	r3, r2
 800887a:	600b      	str	r3, [r1, #0]
 800887c:	e021      	b.n	80088c2 <HAL_GPIO_Init+0x2e2>
 800887e:	bf00      	nop
 8008880:	10320000 	.word	0x10320000
 8008884:	10310000 	.word	0x10310000
 8008888:	10220000 	.word	0x10220000
 800888c:	10210000 	.word	0x10210000
 8008890:	10120000 	.word	0x10120000
 8008894:	10110000 	.word	0x10110000
 8008898:	40021000 	.word	0x40021000
 800889c:	40010000 	.word	0x40010000
 80088a0:	40010800 	.word	0x40010800
 80088a4:	40010c00 	.word	0x40010c00
 80088a8:	40011000 	.word	0x40011000
 80088ac:	40011400 	.word	0x40011400
 80088b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80088b4:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <HAL_GPIO_Init+0x304>)
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	43db      	mvns	r3, r3
 80088bc:	4909      	ldr	r1, [pc, #36]	; (80088e4 <HAL_GPIO_Init+0x304>)
 80088be:	4013      	ands	r3, r2
 80088c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	3301      	adds	r3, #1
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	fa22 f303 	lsr.w	r3, r2, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f47f ae8e 	bne.w	80085f4 <HAL_GPIO_Init+0x14>
  }
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	372c      	adds	r7, #44	; 0x2c
 80088de:	46bd      	mov	sp, r7
 80088e0:	bc80      	pop	{r7}
 80088e2:	4770      	bx	lr
 80088e4:	40010400 	.word	0x40010400

080088e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	807b      	strh	r3, [r7, #2]
 80088f4:	4613      	mov	r3, r2
 80088f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80088f8:	787b      	ldrb	r3, [r7, #1]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d003      	beq.n	8008906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088fe:	887a      	ldrh	r2, [r7, #2]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008904:	e003      	b.n	800890e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008906:	887b      	ldrh	r3, [r7, #2]
 8008908:	041a      	lsls	r2, r3, #16
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	611a      	str	r2, [r3, #16]
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	bc80      	pop	{r7}
 8008916:	4770      	bx	lr

08008918 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800891a:	b08b      	sub	sp, #44	; 0x2c
 800891c:	af06      	add	r7, sp, #24
 800891e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e0f1      	b.n	8008b0e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f008 f852 	bl	80109e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2203      	movs	r2, #3
 8008948:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4618      	mov	r0, r3
 8008952:	f004 fa2d 	bl	800cdb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	687e      	ldr	r6, [r7, #4]
 800895e:	466d      	mov	r5, sp
 8008960:	f106 0410 	add.w	r4, r6, #16
 8008964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	1d33      	adds	r3, r6, #4
 800896e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008970:	6838      	ldr	r0, [r7, #0]
 8008972:	f004 f9f7 	bl	800cd64 <USB_CoreInit>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2202      	movs	r2, #2
 8008980:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e0c2      	b.n	8008b0e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2100      	movs	r1, #0
 800898e:	4618      	mov	r0, r3
 8008990:	f004 fa28 	bl	800cde4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008994:	2300      	movs	r3, #0
 8008996:	73fb      	strb	r3, [r7, #15]
 8008998:	e040      	b.n	8008a1c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	440b      	add	r3, r1
 80089aa:	3301      	adds	r3, #1
 80089ac:	2201      	movs	r2, #1
 80089ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	1c5a      	adds	r2, r3, #1
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	00db      	lsls	r3, r3, #3
 80089be:	440b      	add	r3, r1
 80089c0:	7bfa      	ldrb	r2, [r7, #15]
 80089c2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	440b      	add	r3, r1
 80089d4:	3303      	adds	r3, #3
 80089d6:	2200      	movs	r2, #0
 80089d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80089da:	7bfa      	ldrb	r2, [r7, #15]
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	440b      	add	r3, r1
 80089e8:	3338      	adds	r3, #56	; 0x38
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80089ee:	7bfa      	ldrb	r2, [r7, #15]
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	440b      	add	r3, r1
 80089fc:	333c      	adds	r3, #60	; 0x3c
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008a02:	7bfa      	ldrb	r2, [r7, #15]
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	440b      	add	r3, r1
 8008a10:	3340      	adds	r3, #64	; 0x40
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	73fb      	strb	r3, [r7, #15]
 8008a1c:	7bfa      	ldrb	r2, [r7, #15]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d3b9      	bcc.n	800899a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
 8008a2a:	e044      	b.n	8008ab6 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008a2c:	7bfa      	ldrb	r2, [r7, #15]
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	440b      	add	r3, r1
 8008a3a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008a3e:	2200      	movs	r2, #0
 8008a40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008a42:	7bfa      	ldrb	r2, [r7, #15]
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	440b      	add	r3, r1
 8008a50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008a54:	7bfa      	ldrb	r2, [r7, #15]
 8008a56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008a58:	7bfa      	ldrb	r2, [r7, #15]
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	440b      	add	r3, r1
 8008a66:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008a6e:	7bfa      	ldrb	r2, [r7, #15]
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	440b      	add	r3, r1
 8008a7c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008a84:	7bfa      	ldrb	r2, [r7, #15]
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	440b      	add	r3, r1
 8008a92:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008a9a:	7bfa      	ldrb	r2, [r7, #15]
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	00db      	lsls	r3, r3, #3
 8008aa6:	440b      	add	r3, r1
 8008aa8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	73fb      	strb	r3, [r7, #15]
 8008ab6:	7bfa      	ldrb	r2, [r7, #15]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d3b5      	bcc.n	8008a2c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	603b      	str	r3, [r7, #0]
 8008ac6:	687e      	ldr	r6, [r7, #4]
 8008ac8:	466d      	mov	r5, sp
 8008aca:	f106 0410 	add.w	r4, r6, #16
 8008ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	602b      	str	r3, [r5, #0]
 8008ad6:	1d33      	adds	r3, r6, #4
 8008ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ada:	6838      	ldr	r0, [r7, #0]
 8008adc:	f004 f98e 	bl	800cdfc <USB_DevInit>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d005      	beq.n	8008af2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e00d      	b.n	8008b0e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f006 f9aa 	bl	800ee60 <USB_DevDisconnect>

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <HAL_PCD_Start+0x16>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	e016      	b.n	8008b5a <HAL_PCD_Start+0x44>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f004 f923 	bl	800cd84 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8008b3e:	2101      	movs	r1, #1
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f008 f9c4 	bl	8010ece <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f006 f97e 	bl	800ee4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b088      	sub	sp, #32
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f006 f980 	bl	800ee74 <USB_ReadInterrupts>
 8008b74:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fb1d 	bl	80091c0 <PCD_EP_ISR_Handler>

    return;
 8008b86:	e11b      	b.n	8008dc0 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d013      	beq.n	8008bba <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ba4:	b292      	uxth	r2, r2
 8008ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f007 ff97 	bl	8010ade <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f907 	bl	8008dc6 <HAL_PCD_SetAddress>

    return;
 8008bb8:	e102      	b.n	8008dc0 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00c      	beq.n	8008bde <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bd6:	b292      	uxth	r2, r2
 8008bd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008bdc:	e0f0      	b.n	8008dc0 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00c      	beq.n	8008c02 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bfa:	b292      	uxth	r2, r2
 8008bfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008c00:	e0de      	b.n	8008dc0 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d027      	beq.n	8008c5c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0204 	bic.w	r2, r2, #4
 8008c1e:	b292      	uxth	r2, r2
 8008c20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 0208 	bic.w	r2, r2, #8
 8008c36:	b292      	uxth	r2, r2
 8008c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f007 ff87 	bl	8010b50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c54:	b292      	uxth	r2, r2
 8008c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008c5a:	e0b1      	b.n	8008dc0 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 8085 	beq.w	8008d72 <HAL_PCD_IRQHandler+0x210>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	77fb      	strb	r3, [r7, #31]
 8008c6c:	e011      	b.n	8008c92 <HAL_PCD_IRQHandler+0x130>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	7ffb      	ldrb	r3, [r7, #31]
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	441a      	add	r2, r3
 8008c7a:	7ffb      	ldrb	r3, [r7, #31]
 8008c7c:	8812      	ldrh	r2, [r2, #0]
 8008c7e:	b292      	uxth	r2, r2
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	f107 0120 	add.w	r1, r7, #32
 8008c86:	440b      	add	r3, r1
 8008c88:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8008c8c:	7ffb      	ldrb	r3, [r7, #31]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	77fb      	strb	r3, [r7, #31]
 8008c92:	7ffb      	ldrb	r3, [r7, #31]
 8008c94:	2b07      	cmp	r3, #7
 8008c96:	d9ea      	bls.n	8008c6e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f042 0201 	orr.w	r2, r2, #1
 8008caa:	b292      	uxth	r2, r2
 8008cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0201 	bic.w	r2, r2, #1
 8008cc2:	b292      	uxth	r2, r2
 8008cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8008cc8:	bf00      	nop
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0f6      	beq.n	8008cca <HAL_PCD_IRQHandler+0x168>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cee:	b292      	uxth	r2, r2
 8008cf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	77fb      	strb	r3, [r7, #31]
 8008cf8:	e010      	b.n	8008d1c <HAL_PCD_IRQHandler+0x1ba>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8008cfa:	7ffb      	ldrb	r3, [r7, #31]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6812      	ldr	r2, [r2, #0]
 8008d00:	4611      	mov	r1, r2
 8008d02:	7ffa      	ldrb	r2, [r7, #31]
 8008d04:	0092      	lsls	r2, r2, #2
 8008d06:	440a      	add	r2, r1
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	f107 0120 	add.w	r1, r7, #32
 8008d0e:	440b      	add	r3, r1
 8008d10:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008d14:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8008d16:	7ffb      	ldrb	r3, [r7, #31]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	77fb      	strb	r3, [r7, #31]
 8008d1c:	7ffb      	ldrb	r3, [r7, #31]
 8008d1e:	2b07      	cmp	r3, #7
 8008d20:	d9eb      	bls.n	8008cfa <HAL_PCD_IRQHandler+0x198>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f042 0208 	orr.w	r2, r2, #8
 8008d34:	b292      	uxth	r2, r2
 8008d36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d4c:	b292      	uxth	r2, r2
 8008d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f042 0204 	orr.w	r2, r2, #4
 8008d64:	b292      	uxth	r2, r2
 8008d66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f007 fed6 	bl	8010b1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008d70:	e026      	b.n	8008dc0 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00f      	beq.n	8008d9c <HAL_PCD_IRQHandler+0x23a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008d8e:	b292      	uxth	r2, r2
 8008d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f007 fe94 	bl	8010ac2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008d9a:	e011      	b.n	8008dc0 <HAL_PCD_IRQHandler+0x25e>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00c      	beq.n	8008dc0 <HAL_PCD_IRQHandler+0x25e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008db8:	b292      	uxth	r2, r2
 8008dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008dbe:	bf00      	nop
  }
}
 8008dc0:	3720      	adds	r7, #32
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d101      	bne.n	8008de0 <HAL_PCD_SetAddress+0x1a>
 8008ddc:	2302      	movs	r3, #2
 8008dde:	e013      	b.n	8008e08 <HAL_PCD_SetAddress+0x42>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	78fa      	ldrb	r2, [r7, #3]
 8008dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	78fa      	ldrb	r2, [r7, #3]
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f006 f814 	bl	800ee26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	4608      	mov	r0, r1
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	4603      	mov	r3, r0
 8008e20:	70fb      	strb	r3, [r7, #3]
 8008e22:	460b      	mov	r3, r1
 8008e24:	803b      	strh	r3, [r7, #0]
 8008e26:	4613      	mov	r3, r2
 8008e28:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	da0e      	bge.n	8008e54 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e36:	78fb      	ldrb	r3, [r7, #3]
 8008e38:	f003 0307 	and.w	r3, r3, #7
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	4613      	mov	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	00db      	lsls	r3, r3, #3
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	4413      	add	r3, r2
 8008e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	705a      	strb	r2, [r3, #1]
 8008e52:	e00e      	b.n	8008e72 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	f003 0207 	and.w	r2, r3, #7
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	4413      	add	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008e7e:	883a      	ldrh	r2, [r7, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	78ba      	ldrb	r2, [r7, #2]
 8008e88:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008e8a:	78bb      	ldrb	r3, [r7, #2]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d102      	bne.n	8008e96 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2200      	movs	r2, #0
 8008e94:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d101      	bne.n	8008ea4 <HAL_PCD_EP_Open+0x94>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e00e      	b.n	8008ec2 <HAL_PCD_EP_Open+0xb2>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68f9      	ldr	r1, [r7, #12]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f003 ffc2 	bl	800ce3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	da0e      	bge.n	8008efc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ede:	78fb      	ldrb	r3, [r7, #3]
 8008ee0:	f003 0307 	and.w	r3, r3, #7
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	705a      	strb	r2, [r3, #1]
 8008efa:	e00e      	b.n	8008f1a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	f003 0207 	and.w	r2, r3, #7
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	4413      	add	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	f003 0307 	and.w	r3, r3, #7
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d101      	bne.n	8008f34 <HAL_PCD_EP_Close+0x6a>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e00e      	b.n	8008f52 <HAL_PCD_EP_Close+0x88>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68f9      	ldr	r1, [r7, #12]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f004 fb3a 	bl	800d5bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b086      	sub	sp, #24
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
 8008f66:	460b      	mov	r3, r1
 8008f68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f6a:	7afb      	ldrb	r3, [r7, #11]
 8008f6c:	f003 0207 	and.w	r2, r3, #7
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	2200      	movs	r2, #0
 8008f92:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2200      	movs	r2, #0
 8008f98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f9a:	7afb      	ldrb	r3, [r7, #11]
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6979      	ldr	r1, [r7, #20]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f004 fcf1 	bl	800d994 <USB_EPStartXfer>

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	f003 0207 	and.w	r2, r3, #7
 8008fce:	6879      	ldr	r1, [r7, #4]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	440b      	add	r3, r1
 8008fda:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8008fde:	681b      	ldr	r3, [r3, #0]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr

08008fea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b086      	sub	sp, #24
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ffa:	7afb      	ldrb	r3, [r7, #11]
 8008ffc:	f003 0307 	and.w	r3, r3, #7
 8009000:	1c5a      	adds	r2, r3, #1
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	4413      	add	r3, r2
 800900e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2200      	movs	r2, #0
 800902e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2201      	movs	r2, #1
 8009034:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	b2da      	uxtb	r2, r3
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6979      	ldr	r1, [r7, #20]
 8009048:	4618      	mov	r0, r3
 800904a:	f004 fca3 	bl	800d994 <USB_EPStartXfer>

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	f003 0207 	and.w	r2, r3, #7
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	429a      	cmp	r2, r3
 8009070:	d901      	bls.n	8009076 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e04c      	b.n	8009110 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800907a:	2b00      	cmp	r3, #0
 800907c:	da0e      	bge.n	800909c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	f003 0307 	and.w	r3, r3, #7
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	4413      	add	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	705a      	strb	r2, [r3, #1]
 800909a:	e00c      	b.n	80090b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	00db      	lsls	r3, r3, #3
 80090a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	4413      	add	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2201      	movs	r2, #1
 80090ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	f003 0307 	and.w	r3, r3, #7
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_PCD_EP_SetStall+0x7e>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e01c      	b.n	8009110 <HAL_PCD_EP_SetStall+0xb8>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f005 fda1 	bl	800ec2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	f003 0307 	and.w	r3, r3, #7
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d108      	bne.n	8009106 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80090fe:	4619      	mov	r1, r3
 8009100:	4610      	mov	r0, r2
 8009102:	f005 fec6 	bl	800ee92 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009124:	78fb      	ldrb	r3, [r7, #3]
 8009126:	f003 020f 	and.w	r2, r3, #15
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	429a      	cmp	r2, r3
 8009130:	d901      	bls.n	8009136 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e040      	b.n	80091b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800913a:	2b00      	cmp	r3, #0
 800913c:	da0e      	bge.n	800915c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800913e:	78fb      	ldrb	r3, [r7, #3]
 8009140:	f003 0307 	and.w	r3, r3, #7
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	4613      	mov	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	4413      	add	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2201      	movs	r2, #1
 8009158:	705a      	strb	r2, [r3, #1]
 800915a:	e00e      	b.n	800917a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	f003 0207 	and.w	r2, r3, #7
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	00db      	lsls	r3, r3, #3
 800916a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	4413      	add	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	f003 0307 	and.w	r3, r3, #7
 8009186:	b2da      	uxtb	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009192:	2b01      	cmp	r3, #1
 8009194:	d101      	bne.n	800919a <HAL_PCD_EP_ClrStall+0x82>
 8009196:	2302      	movs	r3, #2
 8009198:	e00e      	b.n	80091b8 <HAL_PCD_EP_ClrStall+0xa0>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68f9      	ldr	r1, [r7, #12]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f005 fd8f 	bl	800eccc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b096      	sub	sp, #88	; 0x58
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80091c8:	e3bf      	b.n	800994a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80091d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80091d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80091e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 8179 	bne.w	80094e0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80091ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d152      	bne.n	80092a0 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	b29b      	uxth	r3, r3
 8009202:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920a:	81fb      	strh	r3, [r7, #14]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	89fb      	ldrh	r3, [r7, #14]
 8009212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800921a:	b29b      	uxth	r3, r3
 800921c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3328      	adds	r3, #40	; 0x28
 8009222:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800922c:	b29b      	uxth	r3, r3
 800922e:	461a      	mov	r2, r3
 8009230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	4413      	add	r3, r2
 8009238:	3302      	adds	r3, #2
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6812      	ldr	r2, [r2, #0]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800924c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800924e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009252:	695a      	ldr	r2, [r3, #20]
 8009254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	441a      	add	r2, r3
 800925a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800925c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800925e:	2100      	movs	r1, #0
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f007 fc14 	bl	8010a8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 836b 	beq.w	800994a <PCD_EP_ISR_Handler+0x78a>
 8009274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f040 8366 	bne.w	800994a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009284:	b2db      	uxtb	r3, r3
 8009286:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800928a:	b2da      	uxtb	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	b292      	uxth	r2, r2
 8009292:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800929e:	e354      	b.n	800994a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80092a6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80092b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80092b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d034      	beq.n	8009328 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	461a      	mov	r2, r3
 80092ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	00db      	lsls	r3, r3, #3
 80092d0:	4413      	add	r3, r2
 80092d2:	3306      	adds	r3, #6
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	6812      	ldr	r2, [r2, #0]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80092e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6818      	ldr	r0, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80092f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80092f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	f005 fe18 	bl	800ef32 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	b29a      	uxth	r2, r3
 800930a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800930e:	4013      	ands	r3, r2
 8009310:	823b      	strh	r3, [r7, #16]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	8a3a      	ldrh	r2, [r7, #16]
 8009318:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800931c:	b292      	uxth	r2, r2
 800931e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f007 fb87 	bl	8010a34 <HAL_PCD_SetupStageCallback>
 8009326:	e310      	b.n	800994a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009328:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800932c:	2b00      	cmp	r3, #0
 800932e:	f280 830c 	bge.w	800994a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29a      	uxth	r2, r3
 800933a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800933e:	4013      	ands	r3, r2
 8009340:	83fb      	strh	r3, [r7, #30]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	8bfa      	ldrh	r2, [r7, #30]
 8009348:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800934c:	b292      	uxth	r2, r2
 800934e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009358:	b29b      	uxth	r3, r3
 800935a:	461a      	mov	r2, r3
 800935c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	4413      	add	r3, r2
 8009364:	3306      	adds	r3, #6
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6812      	ldr	r2, [r2, #0]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800937a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800937c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d019      	beq.n	80093b8 <PCD_EP_ISR_Handler+0x1f8>
 8009384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d015      	beq.n	80093b8 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6818      	ldr	r0, [r3, #0]
 8009390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009392:	6959      	ldr	r1, [r3, #20]
 8009394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009396:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800939a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800939c:	b29b      	uxth	r3, r3
 800939e:	f005 fdc8 	bl	800ef32 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80093a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093a4:	695a      	ldr	r2, [r3, #20]
 80093a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	441a      	add	r2, r3
 80093ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80093b0:	2100      	movs	r1, #0
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f007 fb50 	bl	8010a58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80093c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80093c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f040 82bd 	bne.w	800994a <PCD_EP_ISR_Handler+0x78a>
 80093d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80093d4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80093d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093dc:	f000 82b5 	beq.w	800994a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	61bb      	str	r3, [r7, #24]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	461a      	mov	r2, r3
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	4413      	add	r3, r2
 80093f6:	61bb      	str	r3, [r7, #24]
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	b29b      	uxth	r3, r3
 8009406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800940a:	b29a      	uxth	r2, r3
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	2b3e      	cmp	r3, #62	; 0x3e
 8009416:	d91d      	bls.n	8009454 <PCD_EP_ISR_Handler+0x294>
 8009418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	095b      	lsrs	r3, r3, #5
 800941e:	647b      	str	r3, [r7, #68]	; 0x44
 8009420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	f003 031f 	and.w	r3, r3, #31
 8009428:	2b00      	cmp	r3, #0
 800942a:	d102      	bne.n	8009432 <PCD_EP_ISR_Handler+0x272>
 800942c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800942e:	3b01      	subs	r3, #1
 8009430:	647b      	str	r3, [r7, #68]	; 0x44
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	b29a      	uxth	r2, r3
 8009438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800943a:	b29b      	uxth	r3, r3
 800943c:	029b      	lsls	r3, r3, #10
 800943e:	b29b      	uxth	r3, r3
 8009440:	4313      	orrs	r3, r2
 8009442:	b29b      	uxth	r3, r3
 8009444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800944c:	b29a      	uxth	r2, r3
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	e026      	b.n	80094a2 <PCD_EP_ISR_Handler+0x2e2>
 8009454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10a      	bne.n	8009472 <PCD_EP_ISR_Handler+0x2b2>
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	b29b      	uxth	r3, r3
 8009462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800946a:	b29a      	uxth	r2, r3
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	801a      	strh	r2, [r3, #0]
 8009470:	e017      	b.n	80094a2 <PCD_EP_ISR_Handler+0x2e2>
 8009472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	085b      	lsrs	r3, r3, #1
 8009478:	647b      	str	r3, [r7, #68]	; 0x44
 800947a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <PCD_EP_ISR_Handler+0x2cc>
 8009486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009488:	3301      	adds	r3, #1
 800948a:	647b      	str	r3, [r7, #68]	; 0x44
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	b29a      	uxth	r2, r3
 8009492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009494:	b29b      	uxth	r3, r3
 8009496:	029b      	lsls	r3, r3, #10
 8009498:	b29b      	uxth	r3, r3
 800949a:	4313      	orrs	r3, r2
 800949c:	b29a      	uxth	r2, r3
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b2:	827b      	strh	r3, [r7, #18]
 80094b4:	8a7b      	ldrh	r3, [r7, #18]
 80094b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80094ba:	827b      	strh	r3, [r7, #18]
 80094bc:	8a7b      	ldrh	r3, [r7, #18]
 80094be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80094c2:	827b      	strh	r3, [r7, #18]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	8a7b      	ldrh	r3, [r7, #18]
 80094ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094da:	b29b      	uxth	r3, r3
 80094dc:	8013      	strh	r3, [r2, #0]
 80094de:	e234      	b.n	800994a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	461a      	mov	r2, r3
 80094e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80094f4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f280 80fc 	bge.w	80096f6 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	881b      	ldrh	r3, [r3, #0]
 800950e:	b29a      	uxth	r2, r3
 8009510:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009514:	4013      	ands	r3, r2
 8009516:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800952c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009530:	b292      	uxth	r2, r2
 8009532:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009534:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8009538:	4613      	mov	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	4413      	add	r3, r2
 8009548:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800954a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800954c:	7b1b      	ldrb	r3, [r3, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d125      	bne.n	800959e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800955a:	b29b      	uxth	r3, r3
 800955c:	461a      	mov	r2, r3
 800955e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	4413      	add	r3, r2
 8009566:	3306      	adds	r3, #6
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	6812      	ldr	r2, [r2, #0]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800957a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800957e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 8092 	beq.w	80096ac <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800958e:	6959      	ldr	r1, [r3, #20]
 8009590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009592:	88da      	ldrh	r2, [r3, #6]
 8009594:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009598:	f005 fccb 	bl	800ef32 <USB_ReadPMA>
 800959c:	e086      	b.n	80096ac <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800959e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095a0:	78db      	ldrb	r3, [r3, #3]
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d10a      	bne.n	80095bc <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80095a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80095aa:	461a      	mov	r2, r3
 80095ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f9d9 	bl	8009966 <HAL_PCD_EP_DB_Receive>
 80095b4:	4603      	mov	r3, r0
 80095b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80095ba:	e077      	b.n	80096ac <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	461a      	mov	r2, r3
 80095c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	441a      	add	r2, r3
 80095e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80095ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	461a      	mov	r2, r3
 8009606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	b29b      	uxth	r3, r3
 8009612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d024      	beq.n	8009664 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009622:	b29b      	uxth	r3, r3
 8009624:	461a      	mov	r2, r3
 8009626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	4413      	add	r3, r2
 800962e:	3302      	adds	r3, #2
 8009630:	005b      	lsls	r3, r3, #1
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6812      	ldr	r2, [r2, #0]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009642:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009646:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800964a:	2b00      	cmp	r3, #0
 800964c:	d02e      	beq.n	80096ac <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009654:	6959      	ldr	r1, [r3, #20]
 8009656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009658:	891a      	ldrh	r2, [r3, #8]
 800965a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800965e:	f005 fc68 	bl	800ef32 <USB_ReadPMA>
 8009662:	e023      	b.n	80096ac <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800966c:	b29b      	uxth	r3, r3
 800966e:	461a      	mov	r2, r3
 8009670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	00db      	lsls	r3, r3, #3
 8009676:	4413      	add	r3, r2
 8009678:	3306      	adds	r3, #6
 800967a:	005b      	lsls	r3, r3, #1
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	6812      	ldr	r2, [r2, #0]
 8009680:	4413      	add	r3, r2
 8009682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800968c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009690:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009694:	2b00      	cmp	r3, #0
 8009696:	d009      	beq.n	80096ac <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6818      	ldr	r0, [r3, #0]
 800969c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800969e:	6959      	ldr	r1, [r3, #20]
 80096a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096a2:	895a      	ldrh	r2, [r3, #10]
 80096a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80096a8:	f005 fc43 	bl	800ef32 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80096ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ae:	69da      	ldr	r2, [r3, #28]
 80096b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80096b4:	441a      	add	r2, r3
 80096b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80096ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096bc:	695a      	ldr	r2, [r3, #20]
 80096be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80096c2:	441a      	add	r2, r3
 80096c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80096c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d005      	beq.n	80096dc <PCD_EP_ISR_Handler+0x51c>
 80096d0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80096d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d206      	bcs.n	80096ea <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80096dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f007 f9b8 	bl	8010a58 <HAL_PCD_DataOutStageCallback>
 80096e8:	e005      	b.n	80096f6 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096f0:	4618      	mov	r0, r3
 80096f2:	f004 f94f 	bl	800d994 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80096f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80096fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 8123 	beq.w	800994a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8009704:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	4413      	add	r3, r2
 8009716:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	461a      	mov	r2, r3
 800971e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	b29b      	uxth	r3, r3
 800972a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800972e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009732:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	441a      	add	r2, r3
 8009744:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800974c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009750:	b29b      	uxth	r3, r3
 8009752:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009756:	78db      	ldrb	r3, [r3, #3]
 8009758:	2b01      	cmp	r3, #1
 800975a:	f040 80a2 	bne.w	80098a2 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800975e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009760:	2200      	movs	r2, #0
 8009762:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009766:	7b1b      	ldrb	r3, [r3, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 8093 	beq.w	8009894 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800976e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	d046      	beq.n	8009808 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800977a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977c:	785b      	ldrb	r3, [r3, #1]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d126      	bne.n	80097d0 <PCD_EP_ISR_Handler+0x610>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	627b      	str	r3, [r7, #36]	; 0x24
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009790:	b29b      	uxth	r3, r3
 8009792:	461a      	mov	r2, r3
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	4413      	add	r3, r2
 8009798:	627b      	str	r3, [r7, #36]	; 0x24
 800979a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	011a      	lsls	r2, r3, #4
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	4413      	add	r3, r2
 80097a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097a8:	623b      	str	r3, [r7, #32]
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	801a      	strh	r2, [r3, #0]
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	b29b      	uxth	r3, r3
 80097c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	801a      	strh	r2, [r3, #0]
 80097ce:	e061      	b.n	8009894 <PCD_EP_ISR_Handler+0x6d4>
 80097d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097d2:	785b      	ldrb	r3, [r3, #1]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d15d      	bne.n	8009894 <PCD_EP_ISR_Handler+0x6d4>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	461a      	mov	r2, r3
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	4413      	add	r3, r2
 80097ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	011a      	lsls	r2, r3, #4
 80097f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f8:	4413      	add	r3, r2
 80097fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	2200      	movs	r2, #0
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	e045      	b.n	8009894 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800980e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009810:	785b      	ldrb	r3, [r3, #1]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d126      	bne.n	8009864 <PCD_EP_ISR_Handler+0x6a4>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	637b      	str	r3, [r7, #52]	; 0x34
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009824:	b29b      	uxth	r3, r3
 8009826:	461a      	mov	r2, r3
 8009828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982a:	4413      	add	r3, r2
 800982c:	637b      	str	r3, [r7, #52]	; 0x34
 800982e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	011a      	lsls	r2, r3, #4
 8009834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009836:	4413      	add	r3, r2
 8009838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800983c:	633b      	str	r3, [r7, #48]	; 0x30
 800983e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	b29b      	uxth	r3, r3
 8009844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009848:	b29a      	uxth	r2, r3
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	801a      	strh	r2, [r3, #0]
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b29b      	uxth	r3, r3
 8009854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800985c:	b29a      	uxth	r2, r3
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	e017      	b.n	8009894 <PCD_EP_ISR_Handler+0x6d4>
 8009864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009866:	785b      	ldrb	r3, [r3, #1]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d113      	bne.n	8009894 <PCD_EP_ISR_Handler+0x6d4>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009874:	b29b      	uxth	r3, r3
 8009876:	461a      	mov	r2, r3
 8009878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800987a:	4413      	add	r3, r2
 800987c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800987e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	011a      	lsls	r2, r3, #4
 8009884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009886:	4413      	add	r3, r2
 8009888:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800988c:	63bb      	str	r3, [r7, #56]	; 0x38
 800988e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009890:	2200      	movs	r2, #0
 8009892:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f007 f8f7 	bl	8010a8e <HAL_PCD_DataInStageCallback>
 80098a0:	e053      	b.n	800994a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80098a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80098a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d146      	bne.n	800993c <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	461a      	mov	r2, r3
 80098ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	4413      	add	r3, r2
 80098c2:	3302      	adds	r3, #2
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	6812      	ldr	r2, [r2, #0]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80098da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098dc:	699a      	ldr	r2, [r3, #24]
 80098de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d907      	bls.n	80098f6 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80098e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e8:	699a      	ldr	r2, [r3, #24]
 80098ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80098ee:	1ad2      	subs	r2, r2, r3
 80098f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098f2:	619a      	str	r2, [r3, #24]
 80098f4:	e002      	b.n	80098fc <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80098f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098f8:	2200      	movs	r2, #0
 80098fa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80098fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d106      	bne.n	8009912 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f007 f8bf 	bl	8010a8e <HAL_PCD_DataInStageCallback>
 8009910:	e01b      	b.n	800994a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009914:	695a      	ldr	r2, [r3, #20]
 8009916:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800991a:	441a      	add	r2, r3
 800991c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800991e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009922:	69da      	ldr	r2, [r3, #28]
 8009924:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009928:	441a      	add	r2, r3
 800992a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800992c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009934:	4618      	mov	r0, r3
 8009936:	f004 f82d 	bl	800d994 <USB_EPStartXfer>
 800993a:	e006      	b.n	800994a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800993c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009940:	461a      	mov	r2, r3
 8009942:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f91b 	bl	8009b80 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009952:	b29b      	uxth	r3, r3
 8009954:	b21b      	sxth	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	f6ff ac37 	blt.w	80091ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3758      	adds	r7, #88	; 0x58
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b088      	sub	sp, #32
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	4613      	mov	r3, r2
 8009972:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009974:	88fb      	ldrh	r3, [r7, #6]
 8009976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d07e      	beq.n	8009a7c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009986:	b29b      	uxth	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	4413      	add	r3, r2
 8009992:	3302      	adds	r3, #2
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	6812      	ldr	r2, [r2, #0]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	699a      	ldr	r2, [r3, #24]
 80099ac:	8b7b      	ldrh	r3, [r7, #26]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d306      	bcc.n	80099c0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	699a      	ldr	r2, [r3, #24]
 80099b6:	8b7b      	ldrh	r3, [r7, #26]
 80099b8:	1ad2      	subs	r2, r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	619a      	str	r2, [r3, #24]
 80099be:	e002      	b.n	80099c6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	2200      	movs	r2, #0
 80099c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d123      	bne.n	8009a16 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	b29b      	uxth	r3, r3
 80099e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e8:	833b      	strh	r3, [r7, #24]
 80099ea:	8b3b      	ldrh	r3, [r7, #24]
 80099ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099f0:	833b      	strh	r3, [r7, #24]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	441a      	add	r2, r3
 8009a00:	8b3b      	ldrh	r3, [r7, #24]
 8009a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d01f      	beq.n	8009a60 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3a:	82fb      	strh	r3, [r7, #22]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	441a      	add	r2, r3
 8009a4a:	8afb      	ldrh	r3, [r7, #22]
 8009a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009a60:	8b7b      	ldrh	r3, [r7, #26]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 8087 	beq.w	8009b76 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6818      	ldr	r0, [r3, #0]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	6959      	ldr	r1, [r3, #20]
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	891a      	ldrh	r2, [r3, #8]
 8009a74:	8b7b      	ldrh	r3, [r7, #26]
 8009a76:	f005 fa5c 	bl	800ef32 <USB_ReadPMA>
 8009a7a:	e07c      	b.n	8009b76 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	461a      	mov	r2, r3
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	00db      	lsls	r3, r3, #3
 8009a8e:	4413      	add	r3, r2
 8009a90:	3306      	adds	r3, #6
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	6812      	ldr	r2, [r2, #0]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a9e:	881b      	ldrh	r3, [r3, #0]
 8009aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aa4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	8b7b      	ldrh	r3, [r7, #26]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d306      	bcc.n	8009abe <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	699a      	ldr	r2, [r3, #24]
 8009ab4:	8b7b      	ldrh	r3, [r7, #26]
 8009ab6:	1ad2      	subs	r2, r2, r3
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	619a      	str	r2, [r3, #24]
 8009abc:	e002      	b.n	8009ac4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d123      	bne.n	8009b14 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae6:	83fb      	strh	r3, [r7, #30]
 8009ae8:	8bfb      	ldrh	r3, [r7, #30]
 8009aea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009aee:	83fb      	strh	r3, [r7, #30]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	461a      	mov	r2, r3
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	441a      	add	r2, r3
 8009afe:	8bfb      	ldrh	r3, [r7, #30]
 8009b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009b14:	88fb      	ldrh	r3, [r7, #6]
 8009b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d11f      	bne.n	8009b5e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b38:	83bb      	strh	r3, [r7, #28]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	441a      	add	r2, r3
 8009b48:	8bbb      	ldrh	r3, [r7, #28]
 8009b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009b5e:	8b7b      	ldrh	r3, [r7, #26]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d008      	beq.n	8009b76 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6818      	ldr	r0, [r3, #0]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	6959      	ldr	r1, [r3, #20]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	895a      	ldrh	r2, [r3, #10]
 8009b70:	8b7b      	ldrh	r3, [r7, #26]
 8009b72:	f005 f9de 	bl	800ef32 <USB_ReadPMA>
    }
  }

  return count;
 8009b76:	8b7b      	ldrh	r3, [r7, #26]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3720      	adds	r7, #32
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b0a4      	sub	sp, #144	; 0x90
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009b8e:	88fb      	ldrh	r3, [r7, #6]
 8009b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 81dd 	beq.w	8009f54 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	4413      	add	r3, r2
 8009bae:	3302      	adds	r3, #2
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	6812      	ldr	r2, [r2, #0]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bc2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d907      	bls.n	8009be2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	699a      	ldr	r2, [r3, #24]
 8009bd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009bda:	1ad2      	subs	r2, r2, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	619a      	str	r2, [r3, #24]
 8009be0:	e002      	b.n	8009be8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2200      	movs	r2, #0
 8009be6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f040 80b9 	bne.w	8009d64 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	785b      	ldrb	r3, [r3, #1]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d126      	bne.n	8009c48 <HAL_PCD_EP_DB_Transmit+0xc8>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	4413      	add	r3, r2
 8009c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	011a      	lsls	r2, r3, #4
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	801a      	strh	r2, [r3, #0]
 8009c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	801a      	strh	r2, [r3, #0]
 8009c46:	e01a      	b.n	8009c7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d116      	bne.n	8009c7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	637b      	str	r3, [r7, #52]	; 0x34
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	461a      	mov	r2, r3
 8009c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c64:	4413      	add	r3, r2
 8009c66:	637b      	str	r3, [r7, #52]	; 0x34
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	011a      	lsls	r2, r3, #4
 8009c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c70:	4413      	add	r3, r2
 8009c72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c76:	633b      	str	r3, [r7, #48]	; 0x30
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	627b      	str	r3, [r7, #36]	; 0x24
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	785b      	ldrb	r3, [r3, #1]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d126      	bne.n	8009cda <HAL_PCD_EP_DB_Transmit+0x15a>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	61fb      	str	r3, [r7, #28]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	61fb      	str	r3, [r7, #28]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	011a      	lsls	r2, r3, #4
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	4413      	add	r3, r2
 8009cae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cb2:	61bb      	str	r3, [r7, #24]
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	801a      	strh	r2, [r3, #0]
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	801a      	strh	r2, [r3, #0]
 8009cd8:	e017      	b.n	8009d0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d113      	bne.n	8009d0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	461a      	mov	r2, r3
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	4413      	add	r3, r2
 8009cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	011a      	lsls	r2, r3, #4
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d02:	623b      	str	r3, [r7, #32]
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	2200      	movs	r2, #0
 8009d08:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f006 febc 	bl	8010a8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009d16:	88fb      	ldrh	r3, [r7, #6]
 8009d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 82fc 	beq.w	800a31a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d3c:	82fb      	strh	r3, [r7, #22]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	441a      	add	r2, r3
 8009d4c:	8afb      	ldrh	r3, [r7, #22]
 8009d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	8013      	strh	r3, [r2, #0]
 8009d62:	e2da      	b.n	800a31a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009d64:	88fb      	ldrh	r3, [r7, #6]
 8009d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d021      	beq.n	8009db2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d88:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	441a      	add	r2, r3
 8009d9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	f040 82ae 	bne.w	800a31a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	695a      	ldr	r2, [r3, #20]
 8009dc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009dc6:	441a      	add	r2, r3
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	69da      	ldr	r2, [r3, #28]
 8009dd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009dd4:	441a      	add	r2, r3
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	6a1a      	ldr	r2, [r3, #32]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d30b      	bcc.n	8009dfe <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	6a1a      	ldr	r2, [r3, #32]
 8009df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009df6:	1ad2      	subs	r2, r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	621a      	str	r2, [r3, #32]
 8009dfc:	e017      	b.n	8009e2e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d108      	bne.n	8009e18 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8009e06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009e16:	e00a      	b.n	8009e2e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	6a1b      	ldr	r3, [r3, #32]
 8009e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	785b      	ldrb	r3, [r3, #1]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d165      	bne.n	8009f02 <HAL_PCD_EP_DB_Transmit+0x382>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	461a      	mov	r2, r3
 8009e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4a:	4413      	add	r3, r2
 8009e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	011a      	lsls	r2, r3, #4
 8009e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e56:	4413      	add	r3, r2
 8009e58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6c:	801a      	strh	r2, [r3, #0]
 8009e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e72:	2b3e      	cmp	r3, #62	; 0x3e
 8009e74:	d91d      	bls.n	8009eb2 <HAL_PCD_EP_DB_Transmit+0x332>
 8009e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e7a:	095b      	lsrs	r3, r3, #5
 8009e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e82:	f003 031f 	and.w	r3, r3, #31
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d102      	bne.n	8009e90 <HAL_PCD_EP_DB_Transmit+0x310>
 8009e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	029b      	lsls	r3, r3, #10
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	801a      	strh	r2, [r3, #0]
 8009eb0:	e044      	b.n	8009f3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8009eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10a      	bne.n	8009ed0 <HAL_PCD_EP_DB_Transmit+0x350>
 8009eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ecc:	801a      	strh	r2, [r3, #0]
 8009ece:	e035      	b.n	8009f3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8009ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ed4:	085b      	lsrs	r3, r3, #1
 8009ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d002      	beq.n	8009eea <HAL_PCD_EP_DB_Transmit+0x36a>
 8009ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	029b      	lsls	r3, r3, #10
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efe:	801a      	strh	r2, [r3, #0]
 8009f00:	e01c      	b.n	8009f3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	785b      	ldrb	r3, [r3, #1]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d118      	bne.n	8009f3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	647b      	str	r3, [r7, #68]	; 0x44
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f1e:	4413      	add	r3, r2
 8009f20:	647b      	str	r3, [r7, #68]	; 0x44
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	011a      	lsls	r2, r3, #4
 8009f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f30:	643b      	str	r3, [r7, #64]	; 0x40
 8009f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	6959      	ldr	r1, [r3, #20]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	891a      	ldrh	r2, [r3, #8]
 8009f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	f004 ffab 	bl	800eea8 <USB_WritePMA>
 8009f52:	e1e2      	b.n	800a31a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	461a      	mov	r2, r3
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	4413      	add	r3, r2
 8009f68:	3306      	adds	r3, #6
 8009f6a:	005b      	lsls	r3, r3, #1
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	6812      	ldr	r2, [r2, #0]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f7c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	699a      	ldr	r2, [r3, #24]
 8009f84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d307      	bcc.n	8009f9c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	699a      	ldr	r2, [r3, #24]
 8009f90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f94:	1ad2      	subs	r2, r2, r3
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	619a      	str	r2, [r3, #24]
 8009f9a:	e002      	b.n	8009fa2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f040 80c0 	bne.w	800a12c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	785b      	ldrb	r3, [r3, #1]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d126      	bne.n	800a002 <HAL_PCD_EP_DB_Transmit+0x482>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fc8:	4413      	add	r3, r2
 8009fca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	011a      	lsls	r2, r3, #4
 8009fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009fda:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fde:	881b      	ldrh	r3, [r3, #0]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fea:	801a      	strh	r2, [r3, #0]
 8009fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ffe:	801a      	strh	r2, [r3, #0]
 800a000:	e01a      	b.n	800a038 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	785b      	ldrb	r3, [r3, #1]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d116      	bne.n	800a038 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	667b      	str	r3, [r7, #100]	; 0x64
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a018:	b29b      	uxth	r3, r3
 800a01a:	461a      	mov	r2, r3
 800a01c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a01e:	4413      	add	r3, r2
 800a020:	667b      	str	r3, [r7, #100]	; 0x64
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	011a      	lsls	r2, r3, #4
 800a028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a02a:	4413      	add	r3, r2
 800a02c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a030:	663b      	str	r3, [r7, #96]	; 0x60
 800a032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a034:	2200      	movs	r2, #0
 800a036:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	677b      	str	r3, [r7, #116]	; 0x74
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	785b      	ldrb	r3, [r3, #1]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d12b      	bne.n	800a09e <HAL_PCD_EP_DB_Transmit+0x51e>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a054:	b29b      	uxth	r3, r3
 800a056:	461a      	mov	r2, r3
 800a058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a05a:	4413      	add	r3, r2
 800a05c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	011a      	lsls	r2, r3, #4
 800a064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a066:	4413      	add	r3, r2
 800a068:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a06c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	b29b      	uxth	r3, r3
 800a078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a082:	801a      	strh	r2, [r3, #0]
 800a084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a094:	b29a      	uxth	r2, r3
 800a096:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a09a:	801a      	strh	r2, [r3, #0]
 800a09c:	e017      	b.n	800a0ce <HAL_PCD_EP_DB_Transmit+0x54e>
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	785b      	ldrb	r3, [r3, #1]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d113      	bne.n	800a0ce <HAL_PCD_EP_DB_Transmit+0x54e>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0b4:	4413      	add	r3, r2
 800a0b6:	677b      	str	r3, [r7, #116]	; 0x74
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	011a      	lsls	r2, r3, #4
 800a0be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0c6:	673b      	str	r3, [r7, #112]	; 0x70
 800a0c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f006 fcda 	bl	8010a8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a0da:	88fb      	ldrh	r3, [r7, #6]
 800a0dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f040 811a 	bne.w	800a31a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a100:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	461a      	mov	r2, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	441a      	add	r2, r3
 800a112:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800a116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a11a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a11e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a126:	b29b      	uxth	r3, r3
 800a128:	8013      	strh	r3, [r2, #0]
 800a12a:	e0f6      	b.n	800a31a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d121      	bne.n	800a17a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	4413      	add	r3, r2
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	b29b      	uxth	r3, r3
 800a148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a14c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a150:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	461a      	mov	r2, r3
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	441a      	add	r2, r3
 800a162:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a16a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a16e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a176:	b29b      	uxth	r3, r3
 800a178:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a180:	2b01      	cmp	r3, #1
 800a182:	f040 80ca 	bne.w	800a31a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	695a      	ldr	r2, [r3, #20]
 800a18a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a18e:	441a      	add	r2, r3
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	69da      	ldr	r2, [r3, #28]
 800a198:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a19c:	441a      	add	r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6a1a      	ldr	r2, [r3, #32]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d30b      	bcc.n	800a1c6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	6a1a      	ldr	r2, [r3, #32]
 800a1ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1be:	1ad2      	subs	r2, r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	621a      	str	r2, [r3, #32]
 800a1c4:	e017      	b.n	800a1f6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d108      	bne.n	800a1e0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800a1ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a1d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a1de:	e00a      	b.n	800a1f6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	657b      	str	r3, [r7, #84]	; 0x54
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	785b      	ldrb	r3, [r3, #1]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d165      	bne.n	800a2d0 <HAL_PCD_EP_DB_Transmit+0x750>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a212:	b29b      	uxth	r3, r3
 800a214:	461a      	mov	r2, r3
 800a216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a218:	4413      	add	r3, r2
 800a21a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	011a      	lsls	r2, r3, #4
 800a222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a224:	4413      	add	r3, r2
 800a226:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a22a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a22c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	b29b      	uxth	r3, r3
 800a232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a236:	b29a      	uxth	r2, r3
 800a238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a23a:	801a      	strh	r2, [r3, #0]
 800a23c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a240:	2b3e      	cmp	r3, #62	; 0x3e
 800a242:	d91d      	bls.n	800a280 <HAL_PCD_EP_DB_Transmit+0x700>
 800a244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a248:	095b      	lsrs	r3, r3, #5
 800a24a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a24c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a250:	f003 031f 	and.w	r3, r3, #31
 800a254:	2b00      	cmp	r3, #0
 800a256:	d102      	bne.n	800a25e <HAL_PCD_EP_DB_Transmit+0x6de>
 800a258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a25a:	3b01      	subs	r3, #1
 800a25c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a25e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a260:	881b      	ldrh	r3, [r3, #0]
 800a262:	b29a      	uxth	r2, r3
 800a264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a266:	b29b      	uxth	r3, r3
 800a268:	029b      	lsls	r3, r3, #10
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	4313      	orrs	r3, r2
 800a26e:	b29b      	uxth	r3, r3
 800a270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a278:	b29a      	uxth	r2, r3
 800a27a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a27c:	801a      	strh	r2, [r3, #0]
 800a27e:	e041      	b.n	800a304 <HAL_PCD_EP_DB_Transmit+0x784>
 800a280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10a      	bne.n	800a29e <HAL_PCD_EP_DB_Transmit+0x71e>
 800a288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a296:	b29a      	uxth	r2, r3
 800a298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a29a:	801a      	strh	r2, [r3, #0]
 800a29c:	e032      	b.n	800a304 <HAL_PCD_EP_DB_Transmit+0x784>
 800a29e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2a2:	085b      	lsrs	r3, r3, #1
 800a2a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_PCD_EP_DB_Transmit+0x738>
 800a2b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	029b      	lsls	r3, r3, #10
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2cc:	801a      	strh	r2, [r3, #0]
 800a2ce:	e019      	b.n	800a304 <HAL_PCD_EP_DB_Transmit+0x784>
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	785b      	ldrb	r3, [r3, #1]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d115      	bne.n	800a304 <HAL_PCD_EP_DB_Transmit+0x784>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2e6:	4413      	add	r3, r2
 800a2e8:	657b      	str	r3, [r7, #84]	; 0x54
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	011a      	lsls	r2, r3, #4
 800a2f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a2f8:	653b      	str	r3, [r7, #80]	; 0x50
 800a2fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a302:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	6959      	ldr	r1, [r3, #20]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	895a      	ldrh	r2, [r3, #10]
 800a310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a314:	b29b      	uxth	r3, r3
 800a316:	f004 fdc7 	bl	800eea8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a334:	82bb      	strh	r3, [r7, #20]
 800a336:	8abb      	ldrh	r3, [r7, #20]
 800a338:	f083 0310 	eor.w	r3, r3, #16
 800a33c:	82bb      	strh	r3, [r7, #20]
 800a33e:	8abb      	ldrh	r3, [r7, #20]
 800a340:	f083 0320 	eor.w	r3, r3, #32
 800a344:	82bb      	strh	r3, [r7, #20]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	441a      	add	r2, r3
 800a354:	8abb      	ldrh	r3, [r7, #20]
 800a356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a35a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a35e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a366:	b29b      	uxth	r3, r3
 800a368:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3790      	adds	r7, #144	; 0x90
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	607b      	str	r3, [r7, #4]
 800a37e:	460b      	mov	r3, r1
 800a380:	817b      	strh	r3, [r7, #10]
 800a382:	4613      	mov	r3, r2
 800a384:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a386:	897b      	ldrh	r3, [r7, #10]
 800a388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00b      	beq.n	800a3aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a392:	897b      	ldrh	r3, [r7, #10]
 800a394:	f003 0307 	and.w	r3, r3, #7
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	4613      	mov	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	00db      	lsls	r3, r3, #3
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	e009      	b.n	800a3be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a3aa:	897a      	ldrh	r2, [r7, #10]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	00db      	lsls	r3, r3, #3
 800a3b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a3be:	893b      	ldrh	r3, [r7, #8]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d107      	bne.n	800a3d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	80da      	strh	r2, [r3, #6]
 800a3d2:	e00b      	b.n	800a3ec <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	0c1b      	lsrs	r3, r3, #16
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bc80      	pop	{r7}
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800a3fc:	4b03      	ldr	r3, [pc, #12]	; (800a40c <HAL_PWR_EnableBkUpAccess+0x14>)
 800a3fe:	2201      	movs	r2, #1
 800a400:	601a      	str	r2, [r3, #0]
}
 800a402:	bf00      	nop
 800a404:	46bd      	mov	sp, r7
 800a406:	bc80      	pop	{r7}
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	420e0020 	.word	0x420e0020

0800a410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e26c      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 8087 	beq.w	800a53e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a430:	4b92      	ldr	r3, [pc, #584]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	f003 030c 	and.w	r3, r3, #12
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d00c      	beq.n	800a456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a43c:	4b8f      	ldr	r3, [pc, #572]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	f003 030c 	and.w	r3, r3, #12
 800a444:	2b08      	cmp	r3, #8
 800a446:	d112      	bne.n	800a46e <HAL_RCC_OscConfig+0x5e>
 800a448:	4b8c      	ldr	r3, [pc, #560]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a454:	d10b      	bne.n	800a46e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a456:	4b89      	ldr	r3, [pc, #548]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d06c      	beq.n	800a53c <HAL_RCC_OscConfig+0x12c>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d168      	bne.n	800a53c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e246      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a476:	d106      	bne.n	800a486 <HAL_RCC_OscConfig+0x76>
 800a478:	4b80      	ldr	r3, [pc, #512]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a7f      	ldr	r2, [pc, #508]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a47e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	e02e      	b.n	800a4e4 <HAL_RCC_OscConfig+0xd4>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10c      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x98>
 800a48e:	4b7b      	ldr	r3, [pc, #492]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a7a      	ldr	r2, [pc, #488]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a498:	6013      	str	r3, [r2, #0]
 800a49a:	4b78      	ldr	r3, [pc, #480]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a77      	ldr	r2, [pc, #476]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a4a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4a4:	6013      	str	r3, [r2, #0]
 800a4a6:	e01d      	b.n	800a4e4 <HAL_RCC_OscConfig+0xd4>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4b0:	d10c      	bne.n	800a4cc <HAL_RCC_OscConfig+0xbc>
 800a4b2:	4b72      	ldr	r3, [pc, #456]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a71      	ldr	r2, [pc, #452]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a4b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	4b6f      	ldr	r3, [pc, #444]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a6e      	ldr	r2, [pc, #440]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a4c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	e00b      	b.n	800a4e4 <HAL_RCC_OscConfig+0xd4>
 800a4cc:	4b6b      	ldr	r3, [pc, #428]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a6a      	ldr	r2, [pc, #424]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a4d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4d6:	6013      	str	r3, [r2, #0]
 800a4d8:	4b68      	ldr	r3, [pc, #416]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a67      	ldr	r2, [pc, #412]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a4de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d013      	beq.n	800a514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4ec:	f7fd fd28 	bl	8007f40 <HAL_GetTick>
 800a4f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4f2:	e008      	b.n	800a506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4f4:	f7fd fd24 	bl	8007f40 <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	2b64      	cmp	r3, #100	; 0x64
 800a500:	d901      	bls.n	800a506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e1fa      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a506:	4b5d      	ldr	r3, [pc, #372]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0f0      	beq.n	800a4f4 <HAL_RCC_OscConfig+0xe4>
 800a512:	e014      	b.n	800a53e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a514:	f7fd fd14 	bl	8007f40 <HAL_GetTick>
 800a518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a51a:	e008      	b.n	800a52e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a51c:	f7fd fd10 	bl	8007f40 <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	2b64      	cmp	r3, #100	; 0x64
 800a528:	d901      	bls.n	800a52e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e1e6      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a52e:	4b53      	ldr	r3, [pc, #332]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1f0      	bne.n	800a51c <HAL_RCC_OscConfig+0x10c>
 800a53a:	e000      	b.n	800a53e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a53c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0302 	and.w	r3, r3, #2
 800a546:	2b00      	cmp	r3, #0
 800a548:	d063      	beq.n	800a612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a54a:	4b4c      	ldr	r3, [pc, #304]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f003 030c 	and.w	r3, r3, #12
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00b      	beq.n	800a56e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a556:	4b49      	ldr	r3, [pc, #292]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f003 030c 	and.w	r3, r3, #12
 800a55e:	2b08      	cmp	r3, #8
 800a560:	d11c      	bne.n	800a59c <HAL_RCC_OscConfig+0x18c>
 800a562:	4b46      	ldr	r3, [pc, #280]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d116      	bne.n	800a59c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a56e:	4b43      	ldr	r3, [pc, #268]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d005      	beq.n	800a586 <HAL_RCC_OscConfig+0x176>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d001      	beq.n	800a586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e1ba      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a586:	4b3d      	ldr	r3, [pc, #244]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	4939      	ldr	r1, [pc, #228]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a596:	4313      	orrs	r3, r2
 800a598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a59a:	e03a      	b.n	800a612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d020      	beq.n	800a5e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a5a4:	4b36      	ldr	r3, [pc, #216]	; (800a680 <HAL_RCC_OscConfig+0x270>)
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5aa:	f7fd fcc9 	bl	8007f40 <HAL_GetTick>
 800a5ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5b0:	e008      	b.n	800a5c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5b2:	f7fd fcc5 	bl	8007f40 <HAL_GetTick>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d901      	bls.n	800a5c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e19b      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5c4:	4b2d      	ldr	r3, [pc, #180]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 0302 	and.w	r3, r3, #2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d0f0      	beq.n	800a5b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5d0:	4b2a      	ldr	r3, [pc, #168]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	4927      	ldr	r1, [pc, #156]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	600b      	str	r3, [r1, #0]
 800a5e4:	e015      	b.n	800a612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5e6:	4b26      	ldr	r3, [pc, #152]	; (800a680 <HAL_RCC_OscConfig+0x270>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5ec:	f7fd fca8 	bl	8007f40 <HAL_GetTick>
 800a5f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5f2:	e008      	b.n	800a606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5f4:	f7fd fca4 	bl	8007f40 <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d901      	bls.n	800a606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e17a      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a606:	4b1d      	ldr	r3, [pc, #116]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f003 0302 	and.w	r3, r3, #2
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1f0      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0308 	and.w	r3, r3, #8
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d03a      	beq.n	800a694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d019      	beq.n	800a65a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a626:	4b17      	ldr	r3, [pc, #92]	; (800a684 <HAL_RCC_OscConfig+0x274>)
 800a628:	2201      	movs	r2, #1
 800a62a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a62c:	f7fd fc88 	bl	8007f40 <HAL_GetTick>
 800a630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a632:	e008      	b.n	800a646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a634:	f7fd fc84 	bl	8007f40 <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d901      	bls.n	800a646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e15a      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a646:	4b0d      	ldr	r3, [pc, #52]	; (800a67c <HAL_RCC_OscConfig+0x26c>)
 800a648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64a:	f003 0302 	and.w	r3, r3, #2
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d0f0      	beq.n	800a634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a652:	2001      	movs	r0, #1
 800a654:	f000 facc 	bl	800abf0 <RCC_Delay>
 800a658:	e01c      	b.n	800a694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a65a:	4b0a      	ldr	r3, [pc, #40]	; (800a684 <HAL_RCC_OscConfig+0x274>)
 800a65c:	2200      	movs	r2, #0
 800a65e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a660:	f7fd fc6e 	bl	8007f40 <HAL_GetTick>
 800a664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a666:	e00f      	b.n	800a688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a668:	f7fd fc6a 	bl	8007f40 <HAL_GetTick>
 800a66c:	4602      	mov	r2, r0
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	2b02      	cmp	r3, #2
 800a674:	d908      	bls.n	800a688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e140      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
 800a67a:	bf00      	nop
 800a67c:	40021000 	.word	0x40021000
 800a680:	42420000 	.word	0x42420000
 800a684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a688:	4b9e      	ldr	r3, [pc, #632]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	f003 0302 	and.w	r3, r3, #2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1e9      	bne.n	800a668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f000 80a6 	beq.w	800a7ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a6a6:	4b97      	ldr	r3, [pc, #604]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10d      	bne.n	800a6ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6b2:	4b94      	ldr	r3, [pc, #592]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	4a93      	ldr	r2, [pc, #588]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a6b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6bc:	61d3      	str	r3, [r2, #28]
 800a6be:	4b91      	ldr	r3, [pc, #580]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6c6:	60bb      	str	r3, [r7, #8]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6ce:	4b8e      	ldr	r3, [pc, #568]	; (800a908 <HAL_RCC_OscConfig+0x4f8>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d118      	bne.n	800a70c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a6da:	4b8b      	ldr	r3, [pc, #556]	; (800a908 <HAL_RCC_OscConfig+0x4f8>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a8a      	ldr	r2, [pc, #552]	; (800a908 <HAL_RCC_OscConfig+0x4f8>)
 800a6e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6e6:	f7fd fc2b 	bl	8007f40 <HAL_GetTick>
 800a6ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6ec:	e008      	b.n	800a700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6ee:	f7fd fc27 	bl	8007f40 <HAL_GetTick>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	2b64      	cmp	r3, #100	; 0x64
 800a6fa:	d901      	bls.n	800a700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e0fd      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a700:	4b81      	ldr	r3, [pc, #516]	; (800a908 <HAL_RCC_OscConfig+0x4f8>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d0f0      	beq.n	800a6ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d106      	bne.n	800a722 <HAL_RCC_OscConfig+0x312>
 800a714:	4b7b      	ldr	r3, [pc, #492]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	4a7a      	ldr	r2, [pc, #488]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a71a:	f043 0301 	orr.w	r3, r3, #1
 800a71e:	6213      	str	r3, [r2, #32]
 800a720:	e02d      	b.n	800a77e <HAL_RCC_OscConfig+0x36e>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10c      	bne.n	800a744 <HAL_RCC_OscConfig+0x334>
 800a72a:	4b76      	ldr	r3, [pc, #472]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	4a75      	ldr	r2, [pc, #468]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a730:	f023 0301 	bic.w	r3, r3, #1
 800a734:	6213      	str	r3, [r2, #32]
 800a736:	4b73      	ldr	r3, [pc, #460]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	4a72      	ldr	r2, [pc, #456]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a73c:	f023 0304 	bic.w	r3, r3, #4
 800a740:	6213      	str	r3, [r2, #32]
 800a742:	e01c      	b.n	800a77e <HAL_RCC_OscConfig+0x36e>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	2b05      	cmp	r3, #5
 800a74a:	d10c      	bne.n	800a766 <HAL_RCC_OscConfig+0x356>
 800a74c:	4b6d      	ldr	r3, [pc, #436]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a74e:	6a1b      	ldr	r3, [r3, #32]
 800a750:	4a6c      	ldr	r2, [pc, #432]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a752:	f043 0304 	orr.w	r3, r3, #4
 800a756:	6213      	str	r3, [r2, #32]
 800a758:	4b6a      	ldr	r3, [pc, #424]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	4a69      	ldr	r2, [pc, #420]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a75e:	f043 0301 	orr.w	r3, r3, #1
 800a762:	6213      	str	r3, [r2, #32]
 800a764:	e00b      	b.n	800a77e <HAL_RCC_OscConfig+0x36e>
 800a766:	4b67      	ldr	r3, [pc, #412]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	4a66      	ldr	r2, [pc, #408]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a76c:	f023 0301 	bic.w	r3, r3, #1
 800a770:	6213      	str	r3, [r2, #32]
 800a772:	4b64      	ldr	r3, [pc, #400]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	4a63      	ldr	r2, [pc, #396]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a778:	f023 0304 	bic.w	r3, r3, #4
 800a77c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d015      	beq.n	800a7b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a786:	f7fd fbdb 	bl	8007f40 <HAL_GetTick>
 800a78a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a78c:	e00a      	b.n	800a7a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a78e:	f7fd fbd7 	bl	8007f40 <HAL_GetTick>
 800a792:	4602      	mov	r2, r0
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	f241 3288 	movw	r2, #5000	; 0x1388
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d901      	bls.n	800a7a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e0ab      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7a4:	4b57      	ldr	r3, [pc, #348]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a7a6:	6a1b      	ldr	r3, [r3, #32]
 800a7a8:	f003 0302 	and.w	r3, r3, #2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d0ee      	beq.n	800a78e <HAL_RCC_OscConfig+0x37e>
 800a7b0:	e014      	b.n	800a7dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7b2:	f7fd fbc5 	bl	8007f40 <HAL_GetTick>
 800a7b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a7b8:	e00a      	b.n	800a7d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7ba:	f7fd fbc1 	bl	8007f40 <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d901      	bls.n	800a7d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e095      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a7d0:	4b4c      	ldr	r3, [pc, #304]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a7d2:	6a1b      	ldr	r3, [r3, #32]
 800a7d4:	f003 0302 	and.w	r3, r3, #2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1ee      	bne.n	800a7ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d105      	bne.n	800a7ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7e2:	4b48      	ldr	r3, [pc, #288]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a7e4:	69db      	ldr	r3, [r3, #28]
 800a7e6:	4a47      	ldr	r2, [pc, #284]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a7e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f000 8081 	beq.w	800a8fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a7f8:	4b42      	ldr	r3, [pc, #264]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	f003 030c 	and.w	r3, r3, #12
 800a800:	2b08      	cmp	r3, #8
 800a802:	d061      	beq.n	800a8c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d146      	bne.n	800a89a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a80c:	4b3f      	ldr	r3, [pc, #252]	; (800a90c <HAL_RCC_OscConfig+0x4fc>)
 800a80e:	2200      	movs	r2, #0
 800a810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a812:	f7fd fb95 	bl	8007f40 <HAL_GetTick>
 800a816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a818:	e008      	b.n	800a82c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a81a:	f7fd fb91 	bl	8007f40 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	2b02      	cmp	r3, #2
 800a826:	d901      	bls.n	800a82c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e067      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a82c:	4b35      	ldr	r3, [pc, #212]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1f0      	bne.n	800a81a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a840:	d108      	bne.n	800a854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a842:	4b30      	ldr	r3, [pc, #192]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	492d      	ldr	r1, [pc, #180]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a850:	4313      	orrs	r3, r2
 800a852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a854:	4b2b      	ldr	r3, [pc, #172]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a19      	ldr	r1, [r3, #32]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	430b      	orrs	r3, r1
 800a866:	4927      	ldr	r1, [pc, #156]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a868:	4313      	orrs	r3, r2
 800a86a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a86c:	4b27      	ldr	r3, [pc, #156]	; (800a90c <HAL_RCC_OscConfig+0x4fc>)
 800a86e:	2201      	movs	r2, #1
 800a870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a872:	f7fd fb65 	bl	8007f40 <HAL_GetTick>
 800a876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a878:	e008      	b.n	800a88c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a87a:	f7fd fb61 	bl	8007f40 <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	2b02      	cmp	r3, #2
 800a886:	d901      	bls.n	800a88c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e037      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a88c:	4b1d      	ldr	r3, [pc, #116]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0f0      	beq.n	800a87a <HAL_RCC_OscConfig+0x46a>
 800a898:	e02f      	b.n	800a8fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a89a:	4b1c      	ldr	r3, [pc, #112]	; (800a90c <HAL_RCC_OscConfig+0x4fc>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8a0:	f7fd fb4e 	bl	8007f40 <HAL_GetTick>
 800a8a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a8a6:	e008      	b.n	800a8ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8a8:	f7fd fb4a 	bl	8007f40 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d901      	bls.n	800a8ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e020      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a8ba:	4b12      	ldr	r3, [pc, #72]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1f0      	bne.n	800a8a8 <HAL_RCC_OscConfig+0x498>
 800a8c6:	e018      	b.n	800a8fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e013      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a8d4:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <HAL_RCC_OscConfig+0x4f4>)
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d106      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d001      	beq.n	800a8fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e000      	b.n	800a8fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	40021000 	.word	0x40021000
 800a908:	40007000 	.word	0x40007000
 800a90c:	42420060 	.word	0x42420060

0800a910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	e0d0      	b.n	800aac6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a924:	4b6a      	ldr	r3, [pc, #424]	; (800aad0 <HAL_RCC_ClockConfig+0x1c0>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0307 	and.w	r3, r3, #7
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d910      	bls.n	800a954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a932:	4b67      	ldr	r3, [pc, #412]	; (800aad0 <HAL_RCC_ClockConfig+0x1c0>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f023 0207 	bic.w	r2, r3, #7
 800a93a:	4965      	ldr	r1, [pc, #404]	; (800aad0 <HAL_RCC_ClockConfig+0x1c0>)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	4313      	orrs	r3, r2
 800a940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a942:	4b63      	ldr	r3, [pc, #396]	; (800aad0 <HAL_RCC_ClockConfig+0x1c0>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0307 	and.w	r3, r3, #7
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d001      	beq.n	800a954 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e0b8      	b.n	800aac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0302 	and.w	r3, r3, #2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d020      	beq.n	800a9a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d005      	beq.n	800a978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a96c:	4b59      	ldr	r3, [pc, #356]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	4a58      	ldr	r2, [pc, #352]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a976:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 0308 	and.w	r3, r3, #8
 800a980:	2b00      	cmp	r3, #0
 800a982:	d005      	beq.n	800a990 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a984:	4b53      	ldr	r3, [pc, #332]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	4a52      	ldr	r2, [pc, #328]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a98a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a98e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a990:	4b50      	ldr	r3, [pc, #320]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	494d      	ldr	r1, [pc, #308]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d040      	beq.n	800aa30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d107      	bne.n	800a9c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9b6:	4b47      	ldr	r3, [pc, #284]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d115      	bne.n	800a9ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e07f      	b.n	800aac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d107      	bne.n	800a9de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9ce:	4b41      	ldr	r3, [pc, #260]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d109      	bne.n	800a9ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e073      	b.n	800aac6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9de:	4b3d      	ldr	r3, [pc, #244]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e06b      	b.n	800aac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9ee:	4b39      	ldr	r3, [pc, #228]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f023 0203 	bic.w	r2, r3, #3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	4936      	ldr	r1, [pc, #216]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aa00:	f7fd fa9e 	bl	8007f40 <HAL_GetTick>
 800aa04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa06:	e00a      	b.n	800aa1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa08:	f7fd fa9a 	bl	8007f40 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d901      	bls.n	800aa1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e053      	b.n	800aac6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa1e:	4b2d      	ldr	r3, [pc, #180]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f003 020c 	and.w	r2, r3, #12
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d1eb      	bne.n	800aa08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa30:	4b27      	ldr	r3, [pc, #156]	; (800aad0 <HAL_RCC_ClockConfig+0x1c0>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0307 	and.w	r3, r3, #7
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d210      	bcs.n	800aa60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa3e:	4b24      	ldr	r3, [pc, #144]	; (800aad0 <HAL_RCC_ClockConfig+0x1c0>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f023 0207 	bic.w	r2, r3, #7
 800aa46:	4922      	ldr	r1, [pc, #136]	; (800aad0 <HAL_RCC_ClockConfig+0x1c0>)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa4e:	4b20      	ldr	r3, [pc, #128]	; (800aad0 <HAL_RCC_ClockConfig+0x1c0>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0307 	and.w	r3, r3, #7
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d001      	beq.n	800aa60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e032      	b.n	800aac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d008      	beq.n	800aa7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa6c:	4b19      	ldr	r3, [pc, #100]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	4916      	ldr	r1, [pc, #88]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 0308 	and.w	r3, r3, #8
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d009      	beq.n	800aa9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aa8a:	4b12      	ldr	r3, [pc, #72]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	490e      	ldr	r1, [pc, #56]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aa9e:	f000 f821 	bl	800aae4 <HAL_RCC_GetSysClockFreq>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	091b      	lsrs	r3, r3, #4
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	490a      	ldr	r1, [pc, #40]	; (800aad8 <HAL_RCC_ClockConfig+0x1c8>)
 800aab0:	5ccb      	ldrb	r3, [r1, r3]
 800aab2:	fa22 f303 	lsr.w	r3, r2, r3
 800aab6:	4a09      	ldr	r2, [pc, #36]	; (800aadc <HAL_RCC_ClockConfig+0x1cc>)
 800aab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aaba:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <HAL_RCC_ClockConfig+0x1d0>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fd f9fc 	bl	8007ebc <HAL_InitTick>

  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	40022000 	.word	0x40022000
 800aad4:	40021000 	.word	0x40021000
 800aad8:	08012ed4 	.word	0x08012ed4
 800aadc:	20000000 	.word	0x20000000
 800aae0:	20000004 	.word	0x20000004

0800aae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b087      	sub	sp, #28
 800aae8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	60fb      	str	r3, [r7, #12]
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60bb      	str	r3, [r7, #8]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	617b      	str	r3, [r7, #20]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aafa:	2300      	movs	r3, #0
 800aafc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aafe:	4b1e      	ldr	r3, [pc, #120]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x94>)
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f003 030c 	and.w	r3, r3, #12
 800ab0a:	2b04      	cmp	r3, #4
 800ab0c:	d002      	beq.n	800ab14 <HAL_RCC_GetSysClockFreq+0x30>
 800ab0e:	2b08      	cmp	r3, #8
 800ab10:	d003      	beq.n	800ab1a <HAL_RCC_GetSysClockFreq+0x36>
 800ab12:	e027      	b.n	800ab64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ab14:	4b19      	ldr	r3, [pc, #100]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x98>)
 800ab16:	613b      	str	r3, [r7, #16]
      break;
 800ab18:	e027      	b.n	800ab6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	0c9b      	lsrs	r3, r3, #18
 800ab1e:	f003 030f 	and.w	r3, r3, #15
 800ab22:	4a17      	ldr	r2, [pc, #92]	; (800ab80 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ab24:	5cd3      	ldrb	r3, [r2, r3]
 800ab26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d010      	beq.n	800ab54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ab32:	4b11      	ldr	r3, [pc, #68]	; (800ab78 <HAL_RCC_GetSysClockFreq+0x94>)
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	0c5b      	lsrs	r3, r3, #17
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	4a11      	ldr	r2, [pc, #68]	; (800ab84 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ab3e:	5cd3      	ldrb	r3, [r2, r3]
 800ab40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a0d      	ldr	r2, [pc, #52]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x98>)
 800ab46:	fb02 f203 	mul.w	r2, r2, r3
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab50:	617b      	str	r3, [r7, #20]
 800ab52:	e004      	b.n	800ab5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a0c      	ldr	r2, [pc, #48]	; (800ab88 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ab58:	fb02 f303 	mul.w	r3, r2, r3
 800ab5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	613b      	str	r3, [r7, #16]
      break;
 800ab62:	e002      	b.n	800ab6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ab64:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x98>)
 800ab66:	613b      	str	r3, [r7, #16]
      break;
 800ab68:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab6a:	693b      	ldr	r3, [r7, #16]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	371c      	adds	r7, #28
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bc80      	pop	{r7}
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	40021000 	.word	0x40021000
 800ab7c:	007a1200 	.word	0x007a1200
 800ab80:	08012eec 	.word	0x08012eec
 800ab84:	08012efc 	.word	0x08012efc
 800ab88:	003d0900 	.word	0x003d0900

0800ab8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab90:	4b02      	ldr	r3, [pc, #8]	; (800ab9c <HAL_RCC_GetHCLKFreq+0x10>)
 800ab92:	681b      	ldr	r3, [r3, #0]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bc80      	pop	{r7}
 800ab9a:	4770      	bx	lr
 800ab9c:	20000000 	.word	0x20000000

0800aba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aba4:	f7ff fff2 	bl	800ab8c <HAL_RCC_GetHCLKFreq>
 800aba8:	4602      	mov	r2, r0
 800abaa:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	0a1b      	lsrs	r3, r3, #8
 800abb0:	f003 0307 	and.w	r3, r3, #7
 800abb4:	4903      	ldr	r1, [pc, #12]	; (800abc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800abb6:	5ccb      	ldrb	r3, [r1, r3]
 800abb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	40021000 	.word	0x40021000
 800abc4:	08012ee4 	.word	0x08012ee4

0800abc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800abcc:	f7ff ffde 	bl	800ab8c <HAL_RCC_GetHCLKFreq>
 800abd0:	4602      	mov	r2, r0
 800abd2:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	0adb      	lsrs	r3, r3, #11
 800abd8:	f003 0307 	and.w	r3, r3, #7
 800abdc:	4903      	ldr	r1, [pc, #12]	; (800abec <HAL_RCC_GetPCLK2Freq+0x24>)
 800abde:	5ccb      	ldrb	r3, [r1, r3]
 800abe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	40021000 	.word	0x40021000
 800abec:	08012ee4 	.word	0x08012ee4

0800abf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800abf8:	4b0a      	ldr	r3, [pc, #40]	; (800ac24 <RCC_Delay+0x34>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a0a      	ldr	r2, [pc, #40]	; (800ac28 <RCC_Delay+0x38>)
 800abfe:	fba2 2303 	umull	r2, r3, r2, r3
 800ac02:	0a5b      	lsrs	r3, r3, #9
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	fb02 f303 	mul.w	r3, r2, r3
 800ac0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ac0c:	bf00      	nop
  }
  while (Delay --);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	1e5a      	subs	r2, r3, #1
 800ac12:	60fa      	str	r2, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1f9      	bne.n	800ac0c <RCC_Delay+0x1c>
}
 800ac18:	bf00      	nop
 800ac1a:	bf00      	nop
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bc80      	pop	{r7}
 800ac22:	4770      	bx	lr
 800ac24:	20000000 	.word	0x20000000
 800ac28:	10624dd3 	.word	0x10624dd3

0800ac2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800ac34:	2300      	movs	r3, #0
 800ac36:	613b      	str	r3, [r7, #16]
 800ac38:	2300      	movs	r3, #0
 800ac3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d07d      	beq.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac4c:	4b4f      	ldr	r3, [pc, #316]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac4e:	69db      	ldr	r3, [r3, #28]
 800ac50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10d      	bne.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac58:	4b4c      	ldr	r3, [pc, #304]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac5a:	69db      	ldr	r3, [r3, #28]
 800ac5c:	4a4b      	ldr	r2, [pc, #300]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac62:	61d3      	str	r3, [r2, #28]
 800ac64:	4b49      	ldr	r3, [pc, #292]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ac66:	69db      	ldr	r3, [r3, #28]
 800ac68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac6c:	60bb      	str	r3, [r7, #8]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac70:	2301      	movs	r3, #1
 800ac72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac74:	4b46      	ldr	r3, [pc, #280]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d118      	bne.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ac80:	4b43      	ldr	r3, [pc, #268]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a42      	ldr	r2, [pc, #264]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800ac86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac8c:	f7fd f958 	bl	8007f40 <HAL_GetTick>
 800ac90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac92:	e008      	b.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac94:	f7fd f954 	bl	8007f40 <HAL_GetTick>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	2b64      	cmp	r3, #100	; 0x64
 800aca0:	d901      	bls.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e06d      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aca6:	4b3a      	ldr	r3, [pc, #232]	; (800ad90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0f0      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800acb2:	4b36      	ldr	r3, [pc, #216]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d02e      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	429a      	cmp	r2, r3
 800acce:	d027      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acd0:	4b2e      	ldr	r3, [pc, #184]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800acd2:	6a1b      	ldr	r3, [r3, #32]
 800acd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acd8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800acda:	4b2e      	ldr	r3, [pc, #184]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800acdc:	2201      	movs	r2, #1
 800acde:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ace0:	4b2c      	ldr	r3, [pc, #176]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800ace6:	4a29      	ldr	r2, [pc, #164]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f003 0301 	and.w	r3, r3, #1
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d014      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acf6:	f7fd f923 	bl	8007f40 <HAL_GetTick>
 800acfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acfc:	e00a      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acfe:	f7fd f91f 	bl	8007f40 <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d901      	bls.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e036      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad14:	4b1d      	ldr	r3, [pc, #116]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad16:	6a1b      	ldr	r3, [r3, #32]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0ee      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad20:	4b1a      	ldr	r3, [pc, #104]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	4917      	ldr	r1, [pc, #92]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d105      	bne.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad38:	4b14      	ldr	r3, [pc, #80]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad3a:	69db      	ldr	r3, [r3, #28]
 800ad3c:	4a13      	ldr	r2, [pc, #76]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0302 	and.w	r3, r3, #2
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d008      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad50:	4b0e      	ldr	r3, [pc, #56]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	490b      	ldr	r1, [pc, #44]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 0310 	and.w	r3, r3, #16
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d008      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad6e:	4b07      	ldr	r3, [pc, #28]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	4904      	ldr	r1, [pc, #16]	; (800ad8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	40021000 	.word	0x40021000
 800ad90:	40007000 	.word	0x40007000
 800ad94:	42420440 	.word	0x42420440

0800ad98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	2300      	movs	r3, #0
 800ada6:	61fb      	str	r3, [r7, #28]
 800ada8:	2300      	movs	r3, #0
 800adaa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	60fb      	str	r3, [r7, #12]
 800adb0:	2300      	movs	r3, #0
 800adb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b10      	cmp	r3, #16
 800adb8:	d00a      	beq.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b10      	cmp	r3, #16
 800adbe:	f200 808a 	bhi.w	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d045      	beq.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d075      	beq.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800adce:	e082      	b.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800add0:	4b46      	ldr	r3, [pc, #280]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800add6:	4b45      	ldr	r3, [pc, #276]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d07b      	beq.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	0c9b      	lsrs	r3, r3, #18
 800ade6:	f003 030f 	and.w	r3, r3, #15
 800adea:	4a41      	ldr	r2, [pc, #260]	; (800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800adec:	5cd3      	ldrb	r3, [r2, r3]
 800adee:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d015      	beq.n	800ae26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800adfa:	4b3c      	ldr	r3, [pc, #240]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	0c5b      	lsrs	r3, r3, #17
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	4a3b      	ldr	r2, [pc, #236]	; (800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800ae06:	5cd3      	ldrb	r3, [r2, r3]
 800ae08:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00d      	beq.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800ae14:	4a38      	ldr	r2, [pc, #224]	; (800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	fbb2 f2f3 	udiv	r2, r2, r3
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	fb02 f303 	mul.w	r3, r2, r3
 800ae22:	61fb      	str	r3, [r7, #28]
 800ae24:	e004      	b.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	4a34      	ldr	r2, [pc, #208]	; (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800ae2a:	fb02 f303 	mul.w	r3, r2, r3
 800ae2e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800ae30:	4b2e      	ldr	r3, [pc, #184]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae3c:	d102      	bne.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	61bb      	str	r3, [r7, #24]
      break;
 800ae42:	e04a      	b.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	005b      	lsls	r3, r3, #1
 800ae48:	4a2d      	ldr	r2, [pc, #180]	; (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800ae4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4e:	085b      	lsrs	r3, r3, #1
 800ae50:	61bb      	str	r3, [r7, #24]
      break;
 800ae52:	e042      	b.n	800aeda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800ae54:	4b25      	ldr	r3, [pc, #148]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae64:	d108      	bne.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f003 0302 	and.w	r3, r3, #2
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d003      	beq.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800ae70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae74:	61bb      	str	r3, [r7, #24]
 800ae76:	e01f      	b.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae82:	d109      	bne.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800ae84:	4b19      	ldr	r3, [pc, #100]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800ae86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d003      	beq.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800ae90:	f649 4340 	movw	r3, #40000	; 0x9c40
 800ae94:	61bb      	str	r3, [r7, #24]
 800ae96:	e00f      	b.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aea2:	d11c      	bne.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800aea4:	4b11      	ldr	r3, [pc, #68]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d016      	beq.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800aeb0:	f24f 4324 	movw	r3, #62500	; 0xf424
 800aeb4:	61bb      	str	r3, [r7, #24]
      break;
 800aeb6:	e012      	b.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800aeb8:	e011      	b.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800aeba:	f7ff fe85 	bl	800abc8 <HAL_RCC_GetPCLK2Freq>
 800aebe:	4602      	mov	r2, r0
 800aec0:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	0b9b      	lsrs	r3, r3, #14
 800aec6:	f003 0303 	and.w	r3, r3, #3
 800aeca:	3301      	adds	r3, #1
 800aecc:	005b      	lsls	r3, r3, #1
 800aece:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed2:	61bb      	str	r3, [r7, #24]
      break;
 800aed4:	e004      	b.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800aed6:	bf00      	nop
 800aed8:	e002      	b.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800aeda:	bf00      	nop
 800aedc:	e000      	b.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800aede:	bf00      	nop
    }
  }
  return (frequency);
 800aee0:	69bb      	ldr	r3, [r7, #24]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3720      	adds	r7, #32
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	40021000 	.word	0x40021000
 800aef0:	08012f00 	.word	0x08012f00
 800aef4:	08012f10 	.word	0x08012f10
 800aef8:	007a1200 	.word	0x007a1200
 800aefc:	003d0900 	.word	0x003d0900
 800af00:	aaaaaaab 	.word	0xaaaaaaab

0800af04 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d101      	bne.n	800af1a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	e07a      	b.n	800b010 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	7c5b      	ldrb	r3, [r3, #17]
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	2b00      	cmp	r3, #0
 800af22:	d105      	bne.n	800af30 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7fc fd22 	bl	8007974 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2202      	movs	r2, #2
 800af34:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f9be 	bl	800b2b8 <HAL_RTC_WaitForSynchro>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d004      	beq.n	800af4c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2204      	movs	r2, #4
 800af46:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e061      	b.n	800b010 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fa77 	bl	800b440 <RTC_EnterInitMode>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d004      	beq.n	800af62 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2204      	movs	r2, #4
 800af5c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e056      	b.n	800b010 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f022 0207 	bic.w	r2, r2, #7
 800af70:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d005      	beq.n	800af86 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800af7a:	4b27      	ldr	r3, [pc, #156]	; (800b018 <HAL_RTC_Init+0x114>)
 800af7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7e:	4a26      	ldr	r2, [pc, #152]	; (800b018 <HAL_RTC_Init+0x114>)
 800af80:	f023 0301 	bic.w	r3, r3, #1
 800af84:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800af86:	4b24      	ldr	r3, [pc, #144]	; (800b018 <HAL_RTC_Init+0x114>)
 800af88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	4921      	ldr	r1, [pc, #132]	; (800b018 <HAL_RTC_Init+0x114>)
 800af94:	4313      	orrs	r3, r2
 800af96:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa0:	d003      	beq.n	800afaa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	e00e      	b.n	800afc8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800afaa:	2001      	movs	r0, #1
 800afac:	f7ff fef4 	bl	800ad98 <HAL_RCCEx_GetPeriphCLKFreq>
 800afb0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d104      	bne.n	800afc2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2204      	movs	r2, #4
 800afbc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	e026      	b.n	800b010 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3b01      	subs	r3, #1
 800afc6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	0c1a      	lsrs	r2, r3, #16
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f002 020f 	and.w	r2, r2, #15
 800afd4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	b292      	uxth	r2, r2
 800afde:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fa55 	bl	800b490 <RTC_ExitInitMode>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d004      	beq.n	800aff6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2204      	movs	r2, #4
 800aff0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e00c      	b.n	800b010 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2201      	movs	r2, #1
 800b006:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800b00e:	2300      	movs	r3, #0
  }
}
 800b010:	4618      	mov	r0, r3
 800b012:	3710      	adds	r7, #16
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	40006c00 	.word	0x40006c00

0800b01c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b01c:	b590      	push	{r4, r7, lr}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	2300      	movs	r3, #0
 800b02e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <HAL_RTC_SetTime+0x20>
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e080      	b.n	800b142 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	7c1b      	ldrb	r3, [r3, #16]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d101      	bne.n	800b04c <HAL_RTC_SetTime+0x30>
 800b048:	2302      	movs	r3, #2
 800b04a:	e07a      	b.n	800b142 <HAL_RTC_SetTime+0x126>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2201      	movs	r2, #1
 800b050:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2202      	movs	r2, #2
 800b056:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d113      	bne.n	800b086 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	461a      	mov	r2, r3
 800b064:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b068:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	785b      	ldrb	r3, [r3, #1]
 800b070:	4619      	mov	r1, r3
 800b072:	460b      	mov	r3, r1
 800b074:	011b      	lsls	r3, r3, #4
 800b076:	1a5b      	subs	r3, r3, r1
 800b078:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800b07a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800b080:	4413      	add	r3, r2
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	e01e      	b.n	800b0c4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 fa28 	bl	800b4e0 <RTC_Bcd2ToByte>
 800b090:	4603      	mov	r3, r0
 800b092:	461a      	mov	r2, r3
 800b094:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b098:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	785b      	ldrb	r3, [r3, #1]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 fa1d 	bl	800b4e0 <RTC_Bcd2ToByte>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	1a9b      	subs	r3, r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800b0b2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	789b      	ldrb	r3, [r3, #2]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 fa11 	bl	800b4e0 <RTC_Bcd2ToByte>
 800b0be:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800b0c0:	4423      	add	r3, r4
 800b0c2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800b0c4:	6979      	ldr	r1, [r7, #20]
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 f953 	bl	800b372 <RTC_WriteTimeCounter>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d007      	beq.n	800b0e2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2204      	movs	r2, #4
 800b0d6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e02f      	b.n	800b142 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	685a      	ldr	r2, [r3, #4]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 0205 	bic.w	r2, r2, #5
 800b0f0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 f964 	bl	800b3c0 <RTC_ReadAlarmCounter>
 800b0f8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b100:	d018      	beq.n	800b134 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	429a      	cmp	r2, r3
 800b108:	d214      	bcs.n	800b134 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800b110:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b114:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800b116:	6939      	ldr	r1, [r7, #16]
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 f96a 	bl	800b3f2 <RTC_WriteAlarmCounter>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d007      	beq.n	800b134 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2204      	movs	r2, #4
 800b128:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e006      	b.n	800b142 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2201      	movs	r2, #1
 800b138:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2200      	movs	r2, #0
 800b13e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800b140:	2300      	movs	r3, #0
  }
}
 800b142:	4618      	mov	r0, r3
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	bd90      	pop	{r4, r7, pc}
	...

0800b14c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800b158:	2300      	movs	r3, #0
 800b15a:	61fb      	str	r3, [r7, #28]
 800b15c:	2300      	movs	r3, #0
 800b15e:	61bb      	str	r3, [r7, #24]
 800b160:	2300      	movs	r3, #0
 800b162:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d002      	beq.n	800b170 <HAL_RTC_SetDate+0x24>
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e097      	b.n	800b2a4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	7c1b      	ldrb	r3, [r3, #16]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d101      	bne.n	800b180 <HAL_RTC_SetDate+0x34>
 800b17c:	2302      	movs	r3, #2
 800b17e:	e091      	b.n	800b2a4 <HAL_RTC_SetDate+0x158>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2201      	movs	r2, #1
 800b184:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2202      	movs	r2, #2
 800b18a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10c      	bne.n	800b1ac <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	78da      	ldrb	r2, [r3, #3]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	785a      	ldrb	r2, [r3, #1]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	789a      	ldrb	r2, [r3, #2]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	739a      	strb	r2, [r3, #14]
 800b1aa:	e01a      	b.n	800b1e2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	78db      	ldrb	r3, [r3, #3]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 f995 	bl	800b4e0 <RTC_Bcd2ToByte>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	785b      	ldrb	r3, [r3, #1]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 f98c 	bl	800b4e0 <RTC_Bcd2ToByte>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	789b      	ldrb	r3, [r3, #2]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 f983 	bl	800b4e0 <RTC_Bcd2ToByte>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	461a      	mov	r2, r3
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	7bdb      	ldrb	r3, [r3, #15]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	7b59      	ldrb	r1, [r3, #13]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	7b9b      	ldrb	r3, [r3, #14]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	f000 f993 	bl	800b51c <RTC_WeekDayNum>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	7b1a      	ldrb	r2, [r3, #12]
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f000 f883 	bl	800b312 <RTC_ReadTimeCounter>
 800b20c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	4a26      	ldr	r2, [pc, #152]	; (800b2ac <HAL_RTC_SetDate+0x160>)
 800b212:	fba2 2303 	umull	r2, r3, r2, r3
 800b216:	0adb      	lsrs	r3, r3, #11
 800b218:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b18      	cmp	r3, #24
 800b21e:	d93a      	bls.n	800b296 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	4a23      	ldr	r2, [pc, #140]	; (800b2b0 <HAL_RTC_SetDate+0x164>)
 800b224:	fba2 2303 	umull	r2, r3, r2, r3
 800b228:	091b      	lsrs	r3, r3, #4
 800b22a:	4a22      	ldr	r2, [pc, #136]	; (800b2b4 <HAL_RTC_SetDate+0x168>)
 800b22c:	fb02 f303 	mul.w	r3, r2, r3
 800b230:	69fa      	ldr	r2, [r7, #28]
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800b236:	69f9      	ldr	r1, [r7, #28]
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 f89a 	bl	800b372 <RTC_WriteTimeCounter>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d007      	beq.n	800b254 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2204      	movs	r2, #4
 800b248:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	e027      	b.n	800b2a4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 f8b3 	bl	800b3c0 <RTC_ReadAlarmCounter>
 800b25a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b262:	d018      	beq.n	800b296 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800b264:	69ba      	ldr	r2, [r7, #24]
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d214      	bcs.n	800b296 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800b272:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b276:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800b278:	69b9      	ldr	r1, [r7, #24]
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f000 f8b9 	bl	800b3f2 <RTC_WriteAlarmCounter>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d007      	beq.n	800b296 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2204      	movs	r2, #4
 800b28a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e006      	b.n	800b2a4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2201      	movs	r2, #1
 800b29a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3720      	adds	r7, #32
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	91a2b3c5 	.word	0x91a2b3c5
 800b2b0:	aaaaaaab 	.word	0xaaaaaaab
 800b2b4:	00015180 	.word	0x00015180

0800b2b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e01d      	b.n	800b30a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	685a      	ldr	r2, [r3, #4]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f022 0208 	bic.w	r2, r2, #8
 800b2dc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800b2de:	f7fc fe2f 	bl	8007f40 <HAL_GetTick>
 800b2e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800b2e4:	e009      	b.n	800b2fa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b2e6:	f7fc fe2b 	bl	8007f40 <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2f4:	d901      	bls.n	800b2fa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e007      	b.n	800b30a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	f003 0308 	and.w	r3, r3, #8
 800b304:	2b00      	cmp	r3, #0
 800b306:	d0ee      	beq.n	800b2e6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800b312:	b480      	push	{r7}
 800b314:	b087      	sub	sp, #28
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	827b      	strh	r3, [r7, #18]
 800b31e:	2300      	movs	r3, #0
 800b320:	823b      	strh	r3, [r7, #16]
 800b322:	2300      	movs	r3, #0
 800b324:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800b342:	8a7a      	ldrh	r2, [r7, #18]
 800b344:	8a3b      	ldrh	r3, [r7, #16]
 800b346:	429a      	cmp	r2, r3
 800b348:	d008      	beq.n	800b35c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800b34a:	8a3b      	ldrh	r3, [r7, #16]
 800b34c:	041a      	lsls	r2, r3, #16
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	b29b      	uxth	r3, r3
 800b356:	4313      	orrs	r3, r2
 800b358:	617b      	str	r3, [r7, #20]
 800b35a:	e004      	b.n	800b366 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800b35c:	8a7b      	ldrh	r3, [r7, #18]
 800b35e:	041a      	lsls	r2, r3, #16
 800b360:	89fb      	ldrh	r3, [r7, #14]
 800b362:	4313      	orrs	r3, r2
 800b364:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800b366:	697b      	ldr	r3, [r7, #20]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	371c      	adds	r7, #28
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bc80      	pop	{r7}
 800b370:	4770      	bx	lr

0800b372 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f85d 	bl	800b440 <RTC_EnterInitMode>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800b38c:	2301      	movs	r3, #1
 800b38e:	73fb      	strb	r3, [r7, #15]
 800b390:	e011      	b.n	800b3b6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	0c12      	lsrs	r2, r2, #16
 800b39a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	b292      	uxth	r2, r2
 800b3a4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 f872 	bl	800b490 <RTC_ExitInitMode>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	81fb      	strh	r3, [r7, #14]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800b3e0:	89fb      	ldrh	r3, [r7, #14]
 800b3e2:	041a      	lsls	r2, r3, #16
 800b3e4:	89bb      	ldrh	r3, [r7, #12]
 800b3e6:	4313      	orrs	r3, r2
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bc80      	pop	{r7}
 800b3f0:	4770      	bx	lr

0800b3f2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b084      	sub	sp, #16
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f81d 	bl	800b440 <RTC_EnterInitMode>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	73fb      	strb	r3, [r7, #15]
 800b410:	e011      	b.n	800b436 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	0c12      	lsrs	r2, r2, #16
 800b41a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	b292      	uxth	r2, r2
 800b424:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f832 	bl	800b490 <RTC_ExitInitMode>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b436:	7bfb      	ldrb	r3, [r7, #15]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800b44c:	f7fc fd78 	bl	8007f40 <HAL_GetTick>
 800b450:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b452:	e009      	b.n	800b468 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b454:	f7fc fd74 	bl	8007f40 <HAL_GetTick>
 800b458:	4602      	mov	r2, r0
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b462:	d901      	bls.n	800b468 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800b464:	2303      	movs	r3, #3
 800b466:	e00f      	b.n	800b488 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	f003 0320 	and.w	r3, r3, #32
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0ee      	beq.n	800b454 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f042 0210 	orr.w	r2, r2, #16
 800b484:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b498:	2300      	movs	r3, #0
 800b49a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685a      	ldr	r2, [r3, #4]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0210 	bic.w	r2, r2, #16
 800b4aa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800b4ac:	f7fc fd48 	bl	8007f40 <HAL_GetTick>
 800b4b0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b4b2:	e009      	b.n	800b4c8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800b4b4:	f7fc fd44 	bl	8007f40 <HAL_GetTick>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b4c2:	d901      	bls.n	800b4c8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e007      	b.n	800b4d8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f003 0320 	and.w	r3, r3, #32
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d0ee      	beq.n	800b4b4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	091b      	lsrs	r3, r3, #4
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	005b      	lsls	r3, r3, #1
 800b4fe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800b500:	79fb      	ldrb	r3, [r7, #7]
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	b2da      	uxtb	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	4413      	add	r3, r2
 800b50e:	b2db      	uxtb	r3, r3
}
 800b510:	4618      	mov	r0, r3
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	bc80      	pop	{r7}
 800b518:	4770      	bx	lr
	...

0800b51c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	70fb      	strb	r3, [r7, #3]
 800b528:	4613      	mov	r3, r2
 800b52a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800b52c:	2300      	movs	r3, #0
 800b52e:	60bb      	str	r3, [r7, #8]
 800b530:	2300      	movs	r3, #0
 800b532:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b53a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800b53c:	78fb      	ldrb	r3, [r7, #3]
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d82d      	bhi.n	800b59e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800b542:	78fa      	ldrb	r2, [r7, #3]
 800b544:	4613      	mov	r3, r2
 800b546:	005b      	lsls	r3, r3, #1
 800b548:	4413      	add	r3, r2
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	1a9b      	subs	r3, r3, r2
 800b54e:	4a2c      	ldr	r2, [pc, #176]	; (800b600 <RTC_WeekDayNum+0xe4>)
 800b550:	fba2 2303 	umull	r2, r3, r2, r3
 800b554:	085a      	lsrs	r2, r3, #1
 800b556:	78bb      	ldrb	r3, [r7, #2]
 800b558:	441a      	add	r2, r3
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	441a      	add	r2, r3
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	3b01      	subs	r3, #1
 800b562:	089b      	lsrs	r3, r3, #2
 800b564:	441a      	add	r2, r3
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	3b01      	subs	r3, #1
 800b56a:	4926      	ldr	r1, [pc, #152]	; (800b604 <RTC_WeekDayNum+0xe8>)
 800b56c:	fba1 1303 	umull	r1, r3, r1, r3
 800b570:	095b      	lsrs	r3, r3, #5
 800b572:	1ad2      	subs	r2, r2, r3
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	3b01      	subs	r3, #1
 800b578:	4922      	ldr	r1, [pc, #136]	; (800b604 <RTC_WeekDayNum+0xe8>)
 800b57a:	fba1 1303 	umull	r1, r3, r1, r3
 800b57e:	09db      	lsrs	r3, r3, #7
 800b580:	4413      	add	r3, r2
 800b582:	1d1a      	adds	r2, r3, #4
 800b584:	4b20      	ldr	r3, [pc, #128]	; (800b608 <RTC_WeekDayNum+0xec>)
 800b586:	fba3 1302 	umull	r1, r3, r3, r2
 800b58a:	1ad1      	subs	r1, r2, r3
 800b58c:	0849      	lsrs	r1, r1, #1
 800b58e:	440b      	add	r3, r1
 800b590:	0899      	lsrs	r1, r3, #2
 800b592:	460b      	mov	r3, r1
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	1a5b      	subs	r3, r3, r1
 800b598:	1ad3      	subs	r3, r2, r3
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	e029      	b.n	800b5f2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800b59e:	78fa      	ldrb	r2, [r7, #3]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	005b      	lsls	r3, r3, #1
 800b5a4:	4413      	add	r3, r2
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	1a9b      	subs	r3, r3, r2
 800b5aa:	4a15      	ldr	r2, [pc, #84]	; (800b600 <RTC_WeekDayNum+0xe4>)
 800b5ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b0:	085a      	lsrs	r2, r3, #1
 800b5b2:	78bb      	ldrb	r3, [r7, #2]
 800b5b4:	441a      	add	r2, r3
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	441a      	add	r2, r3
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	089b      	lsrs	r3, r3, #2
 800b5be:	441a      	add	r2, r3
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	4910      	ldr	r1, [pc, #64]	; (800b604 <RTC_WeekDayNum+0xe8>)
 800b5c4:	fba1 1303 	umull	r1, r3, r1, r3
 800b5c8:	095b      	lsrs	r3, r3, #5
 800b5ca:	1ad2      	subs	r2, r2, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	490d      	ldr	r1, [pc, #52]	; (800b604 <RTC_WeekDayNum+0xe8>)
 800b5d0:	fba1 1303 	umull	r1, r3, r1, r3
 800b5d4:	09db      	lsrs	r3, r3, #7
 800b5d6:	4413      	add	r3, r2
 800b5d8:	1c9a      	adds	r2, r3, #2
 800b5da:	4b0b      	ldr	r3, [pc, #44]	; (800b608 <RTC_WeekDayNum+0xec>)
 800b5dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b5e0:	1ad1      	subs	r1, r2, r3
 800b5e2:	0849      	lsrs	r1, r1, #1
 800b5e4:	440b      	add	r3, r1
 800b5e6:	0899      	lsrs	r1, r3, #2
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	1a5b      	subs	r3, r3, r1
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	b2db      	uxtb	r3, r3
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bc80      	pop	{r7}
 800b5fe:	4770      	bx	lr
 800b600:	38e38e39 	.word	0x38e38e39
 800b604:	51eb851f 	.word	0x51eb851f
 800b608:	24924925 	.word	0x24924925

0800b60c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e076      	b.n	800b70c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b622:	2b00      	cmp	r3, #0
 800b624:	d108      	bne.n	800b638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b62e:	d009      	beq.n	800b644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	61da      	str	r2, [r3, #28]
 800b636:	e005      	b.n	800b644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b00      	cmp	r3, #0
 800b654:	d106      	bne.n	800b664 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7fc f9ac 	bl	80079bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b67a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b68c:	431a      	orrs	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b696:	431a      	orrs	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	f003 0302 	and.w	r3, r3, #2
 800b6a0:	431a      	orrs	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	695b      	ldr	r3, [r3, #20]
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6b4:	431a      	orrs	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6be:	431a      	orrs	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c8:	ea42 0103 	orr.w	r1, r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	430a      	orrs	r2, r1
 800b6da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	0c1a      	lsrs	r2, r3, #16
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f002 0204 	and.w	r2, r2, #4
 800b6ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	69da      	ldr	r2, [r3, #28]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b6fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	603b      	str	r3, [r7, #0]
 800b720:	4613      	mov	r3, r2
 800b722:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b724:	2300      	movs	r3, #0
 800b726:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d101      	bne.n	800b736 <HAL_SPI_Transmit+0x22>
 800b732:	2302      	movs	r3, #2
 800b734:	e12d      	b.n	800b992 <HAL_SPI_Transmit+0x27e>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b73e:	f7fc fbff 	bl	8007f40 <HAL_GetTick>
 800b742:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b744:	88fb      	ldrh	r3, [r7, #6]
 800b746:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	2b01      	cmp	r3, #1
 800b752:	d002      	beq.n	800b75a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b754:	2302      	movs	r3, #2
 800b756:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b758:	e116      	b.n	800b988 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <HAL_SPI_Transmit+0x52>
 800b760:	88fb      	ldrh	r3, [r7, #6]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d102      	bne.n	800b76c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b76a:	e10d      	b.n	800b988 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2203      	movs	r2, #3
 800b770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	68ba      	ldr	r2, [r7, #8]
 800b77e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	88fa      	ldrh	r2, [r7, #6]
 800b784:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	88fa      	ldrh	r2, [r7, #6]
 800b78a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2200      	movs	r2, #0
 800b790:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2200      	movs	r2, #0
 800b796:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7b2:	d10f      	bne.n	800b7d4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7de:	2b40      	cmp	r3, #64	; 0x40
 800b7e0:	d007      	beq.n	800b7f2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7fa:	d14f      	bne.n	800b89c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <HAL_SPI_Transmit+0xf6>
 800b804:	8afb      	ldrh	r3, [r7, #22]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d142      	bne.n	800b890 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80e:	881a      	ldrh	r2, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b81a:	1c9a      	adds	r2, r3, #2
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b824:	b29b      	uxth	r3, r3
 800b826:	3b01      	subs	r3, #1
 800b828:	b29a      	uxth	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b82e:	e02f      	b.n	800b890 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d112      	bne.n	800b864 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b842:	881a      	ldrh	r2, [r3, #0]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b84e:	1c9a      	adds	r2, r3, #2
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b858:	b29b      	uxth	r3, r3
 800b85a:	3b01      	subs	r3, #1
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	86da      	strh	r2, [r3, #54]	; 0x36
 800b862:	e015      	b.n	800b890 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b864:	f7fc fb6c 	bl	8007f40 <HAL_GetTick>
 800b868:	4602      	mov	r2, r0
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	429a      	cmp	r2, r3
 800b872:	d803      	bhi.n	800b87c <HAL_SPI_Transmit+0x168>
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87a:	d102      	bne.n	800b882 <HAL_SPI_Transmit+0x16e>
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d106      	bne.n	800b890 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800b882:	2303      	movs	r3, #3
 800b884:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800b88e:	e07b      	b.n	800b988 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b894:	b29b      	uxth	r3, r3
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1ca      	bne.n	800b830 <HAL_SPI_Transmit+0x11c>
 800b89a:	e050      	b.n	800b93e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <HAL_SPI_Transmit+0x196>
 800b8a4:	8afb      	ldrh	r3, [r7, #22]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d144      	bne.n	800b934 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	330c      	adds	r3, #12
 800b8b4:	7812      	ldrb	r2, [r2, #0]
 800b8b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b8d0:	e030      	b.n	800b934 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	f003 0302 	and.w	r3, r3, #2
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d113      	bne.n	800b908 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	330c      	adds	r3, #12
 800b8ea:	7812      	ldrb	r2, [r2, #0]
 800b8ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f2:	1c5a      	adds	r2, r3, #1
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	3b01      	subs	r3, #1
 800b900:	b29a      	uxth	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	86da      	strh	r2, [r3, #54]	; 0x36
 800b906:	e015      	b.n	800b934 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b908:	f7fc fb1a 	bl	8007f40 <HAL_GetTick>
 800b90c:	4602      	mov	r2, r0
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	683a      	ldr	r2, [r7, #0]
 800b914:	429a      	cmp	r2, r3
 800b916:	d803      	bhi.n	800b920 <HAL_SPI_Transmit+0x20c>
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91e:	d102      	bne.n	800b926 <HAL_SPI_Transmit+0x212>
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d106      	bne.n	800b934 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800b926:	2303      	movs	r3, #3
 800b928:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800b932:	e029      	b.n	800b988 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b938:	b29b      	uxth	r3, r3
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1c9      	bne.n	800b8d2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	6839      	ldr	r1, [r7, #0]
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f000 fbcc 	bl	800c0e0 <SPI_EndRxTxTransaction>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d002      	beq.n	800b954 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2220      	movs	r2, #32
 800b952:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b95c:	2300      	movs	r3, #0
 800b95e:	613b      	str	r3, [r7, #16]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	613b      	str	r3, [r7, #16]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	613b      	str	r3, [r7, #16]
 800b970:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	77fb      	strb	r3, [r7, #31]
 800b97e:	e003      	b.n	800b988 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b990:	7ffb      	ldrb	r3, [r7, #31]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3720      	adds	r7, #32
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b088      	sub	sp, #32
 800b99e:	af02      	add	r7, sp, #8
 800b9a0:	60f8      	str	r0, [r7, #12]
 800b9a2:	60b9      	str	r1, [r7, #8]
 800b9a4:	603b      	str	r3, [r7, #0]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d002      	beq.n	800b9c0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800b9ba:	2302      	movs	r3, #2
 800b9bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b9be:	e0fb      	b.n	800bbb8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9c8:	d112      	bne.n	800b9f0 <HAL_SPI_Receive+0x56>
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10e      	bne.n	800b9f0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2204      	movs	r2, #4
 800b9d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b9da:	88fa      	ldrh	r2, [r7, #6]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	68b9      	ldr	r1, [r7, #8]
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f000 f8ef 	bl	800bbca <HAL_SPI_TransmitReceive>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	e0e8      	b.n	800bbc2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d101      	bne.n	800b9fe <HAL_SPI_Receive+0x64>
 800b9fa:	2302      	movs	r3, #2
 800b9fc:	e0e1      	b.n	800bbc2 <HAL_SPI_Receive+0x228>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba06:	f7fc fa9b 	bl	8007f40 <HAL_GetTick>
 800ba0a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d002      	beq.n	800ba18 <HAL_SPI_Receive+0x7e>
 800ba12:	88fb      	ldrh	r3, [r7, #6]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ba1c:	e0cc      	b.n	800bbb8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2204      	movs	r2, #4
 800ba22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	88fa      	ldrh	r2, [r7, #6]
 800ba36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	88fa      	ldrh	r2, [r7, #6]
 800ba3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2200      	movs	r2, #0
 800ba54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba64:	d10f      	bne.n	800ba86 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ba84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba90:	2b40      	cmp	r3, #64	; 0x40
 800ba92:	d007      	beq.n	800baa4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800baa2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d16a      	bne.n	800bb82 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800baac:	e032      	b.n	800bb14 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f003 0301 	and.w	r3, r3, #1
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d115      	bne.n	800bae8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f103 020c 	add.w	r2, r3, #12
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac8:	7812      	ldrb	r2, [r2, #0]
 800baca:	b2d2      	uxtb	r2, r2
 800bacc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad2:	1c5a      	adds	r2, r3, #1
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800badc:	b29b      	uxth	r3, r3
 800bade:	3b01      	subs	r3, #1
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bae6:	e015      	b.n	800bb14 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bae8:	f7fc fa2a 	bl	8007f40 <HAL_GetTick>
 800baec:	4602      	mov	r2, r0
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	683a      	ldr	r2, [r7, #0]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d803      	bhi.n	800bb00 <HAL_SPI_Receive+0x166>
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafe:	d102      	bne.n	800bb06 <HAL_SPI_Receive+0x16c>
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d106      	bne.n	800bb14 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800bb06:	2303      	movs	r3, #3
 800bb08:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800bb12:	e051      	b.n	800bbb8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1c7      	bne.n	800baae <HAL_SPI_Receive+0x114>
 800bb1e:	e035      	b.n	800bb8c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d113      	bne.n	800bb56 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68da      	ldr	r2, [r3, #12]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb38:	b292      	uxth	r2, r2
 800bb3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb40:	1c9a      	adds	r2, r3, #2
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb54:	e015      	b.n	800bb82 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb56:	f7fc f9f3 	bl	8007f40 <HAL_GetTick>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d803      	bhi.n	800bb6e <HAL_SPI_Receive+0x1d4>
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6c:	d102      	bne.n	800bb74 <HAL_SPI_Receive+0x1da>
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d106      	bne.n	800bb82 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800bb74:	2303      	movs	r3, #3
 800bb76:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800bb80:	e01a      	b.n	800bbb8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1c9      	bne.n	800bb20 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f000 fa53 	bl	800c03c <SPI_EndRxTransaction>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d002      	beq.n	800bbb0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	75fb      	strb	r3, [r7, #23]
 800bbae:	e003      	b.n	800bbb8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bbc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b08c      	sub	sp, #48	; 0x30
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	60f8      	str	r0, [r7, #12]
 800bbd2:	60b9      	str	r1, [r7, #8]
 800bbd4:	607a      	str	r2, [r7, #4]
 800bbd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d101      	bne.n	800bbf0 <HAL_SPI_TransmitReceive+0x26>
 800bbec:	2302      	movs	r3, #2
 800bbee:	e198      	b.n	800bf22 <HAL_SPI_TransmitReceive+0x358>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbf8:	f7fc f9a2 	bl	8007f40 <HAL_GetTick>
 800bbfc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bc0e:	887b      	ldrh	r3, [r7, #2]
 800bc10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bc12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d00f      	beq.n	800bc3a <HAL_SPI_TransmitReceive+0x70>
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc20:	d107      	bne.n	800bc32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d103      	bne.n	800bc32 <HAL_SPI_TransmitReceive+0x68>
 800bc2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc2e:	2b04      	cmp	r3, #4
 800bc30:	d003      	beq.n	800bc3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bc32:	2302      	movs	r3, #2
 800bc34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bc38:	e16d      	b.n	800bf16 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d005      	beq.n	800bc4c <HAL_SPI_TransmitReceive+0x82>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d002      	beq.n	800bc4c <HAL_SPI_TransmitReceive+0x82>
 800bc46:	887b      	ldrh	r3, [r7, #2]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d103      	bne.n	800bc54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bc52:	e160      	b.n	800bf16 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b04      	cmp	r3, #4
 800bc5e:	d003      	beq.n	800bc68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2205      	movs	r2, #5
 800bc64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	887a      	ldrh	r2, [r7, #2]
 800bc78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	887a      	ldrh	r2, [r7, #2]
 800bc7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	887a      	ldrh	r2, [r7, #2]
 800bc8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	887a      	ldrh	r2, [r7, #2]
 800bc90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca8:	2b40      	cmp	r3, #64	; 0x40
 800bcaa:	d007      	beq.n	800bcbc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcc4:	d17c      	bne.n	800bdc0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d002      	beq.n	800bcd4 <HAL_SPI_TransmitReceive+0x10a>
 800bcce:	8b7b      	ldrh	r3, [r7, #26]
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d16a      	bne.n	800bdaa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd8:	881a      	ldrh	r2, [r3, #0]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce4:	1c9a      	adds	r2, r3, #2
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bcf8:	e057      	b.n	800bdaa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f003 0302 	and.w	r3, r3, #2
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d11b      	bne.n	800bd40 <HAL_SPI_TransmitReceive+0x176>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d016      	beq.n	800bd40 <HAL_SPI_TransmitReceive+0x176>
 800bd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d113      	bne.n	800bd40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1c:	881a      	ldrh	r2, [r3, #0]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd28:	1c9a      	adds	r2, r3, #2
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	3b01      	subs	r3, #1
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d119      	bne.n	800bd82 <HAL_SPI_TransmitReceive+0x1b8>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d014      	beq.n	800bd82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68da      	ldr	r2, [r3, #12]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd62:	b292      	uxth	r2, r2
 800bd64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6a:	1c9a      	adds	r2, r3, #2
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	3b01      	subs	r3, #1
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bd82:	f7fc f8dd 	bl	8007f40 <HAL_GetTick>
 800bd86:	4602      	mov	r2, r0
 800bd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8a:	1ad3      	subs	r3, r2, r3
 800bd8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d80b      	bhi.n	800bdaa <HAL_SPI_TransmitReceive+0x1e0>
 800bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd98:	d007      	beq.n	800bdaa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800bda8:	e0b5      	b.n	800bf16 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1a2      	bne.n	800bcfa <HAL_SPI_TransmitReceive+0x130>
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d19d      	bne.n	800bcfa <HAL_SPI_TransmitReceive+0x130>
 800bdbe:	e080      	b.n	800bec2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <HAL_SPI_TransmitReceive+0x204>
 800bdc8:	8b7b      	ldrh	r3, [r7, #26]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d16f      	bne.n	800beae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	330c      	adds	r3, #12
 800bdd8:	7812      	ldrb	r2, [r2, #0]
 800bdda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde0:	1c5a      	adds	r2, r3, #1
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	3b01      	subs	r3, #1
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bdf4:	e05b      	b.n	800beae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f003 0302 	and.w	r3, r3, #2
 800be00:	2b02      	cmp	r3, #2
 800be02:	d11c      	bne.n	800be3e <HAL_SPI_TransmitReceive+0x274>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be08:	b29b      	uxth	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d017      	beq.n	800be3e <HAL_SPI_TransmitReceive+0x274>
 800be0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be10:	2b01      	cmp	r3, #1
 800be12:	d114      	bne.n	800be3e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	330c      	adds	r3, #12
 800be1e:	7812      	ldrb	r2, [r2, #0]
 800be20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be26:	1c5a      	adds	r2, r3, #1
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be30:	b29b      	uxth	r3, r3
 800be32:	3b01      	subs	r3, #1
 800be34:	b29a      	uxth	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800be3a:	2300      	movs	r3, #0
 800be3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	f003 0301 	and.w	r3, r3, #1
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d119      	bne.n	800be80 <HAL_SPI_TransmitReceive+0x2b6>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be50:	b29b      	uxth	r3, r3
 800be52:	2b00      	cmp	r3, #0
 800be54:	d014      	beq.n	800be80 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68da      	ldr	r2, [r3, #12]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be60:	b2d2      	uxtb	r2, r2
 800be62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be68:	1c5a      	adds	r2, r3, #1
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be72:	b29b      	uxth	r3, r3
 800be74:	3b01      	subs	r3, #1
 800be76:	b29a      	uxth	r2, r3
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800be7c:	2301      	movs	r3, #1
 800be7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800be80:	f7fc f85e 	bl	8007f40 <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d803      	bhi.n	800be98 <HAL_SPI_TransmitReceive+0x2ce>
 800be90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be96:	d102      	bne.n	800be9e <HAL_SPI_TransmitReceive+0x2d4>
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d107      	bne.n	800beae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800beac:	e033      	b.n	800bf16 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d19e      	bne.n	800bdf6 <HAL_SPI_TransmitReceive+0x22c>
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d199      	bne.n	800bdf6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f000 f90a 	bl	800c0e0 <SPI_EndRxTxTransaction>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d006      	beq.n	800bee0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2220      	movs	r2, #32
 800bedc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bede:	e01a      	b.n	800bf16 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10a      	bne.n	800befe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bee8:	2300      	movs	r3, #0
 800beea:	617b      	str	r3, [r7, #20]
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d003      	beq.n	800bf0e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf0c:	e003      	b.n	800bf16 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2201      	movs	r2, #1
 800bf12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bf1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3730      	adds	r7, #48	; 0x30
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
	...

0800bf2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	603b      	str	r3, [r7, #0]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bf3c:	f7fc f800 	bl	8007f40 <HAL_GetTick>
 800bf40:	4602      	mov	r2, r0
 800bf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf44:	1a9b      	subs	r3, r3, r2
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	4413      	add	r3, r2
 800bf4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bf4c:	f7fb fff8 	bl	8007f40 <HAL_GetTick>
 800bf50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bf52:	4b39      	ldr	r3, [pc, #228]	; (800c038 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	015b      	lsls	r3, r3, #5
 800bf58:	0d1b      	lsrs	r3, r3, #20
 800bf5a:	69fa      	ldr	r2, [r7, #28]
 800bf5c:	fb02 f303 	mul.w	r3, r2, r3
 800bf60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf62:	e054      	b.n	800c00e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6a:	d050      	beq.n	800c00e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bf6c:	f7fb ffe8 	bl	8007f40 <HAL_GetTick>
 800bf70:	4602      	mov	r2, r0
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	69fa      	ldr	r2, [r7, #28]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d902      	bls.n	800bf82 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d13d      	bne.n	800bffe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	685a      	ldr	r2, [r3, #4]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf9a:	d111      	bne.n	800bfc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfa4:	d004      	beq.n	800bfb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfae:	d107      	bne.n	800bfc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfc8:	d10f      	bne.n	800bfea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfd8:	601a      	str	r2, [r3, #0]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681a      	ldr	r2, [r3, #0]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e017      	b.n	800c02e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d101      	bne.n	800c008 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c004:	2300      	movs	r3, #0
 800c006:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	689a      	ldr	r2, [r3, #8]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	4013      	ands	r3, r2
 800c018:	68ba      	ldr	r2, [r7, #8]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	bf0c      	ite	eq
 800c01e:	2301      	moveq	r3, #1
 800c020:	2300      	movne	r3, #0
 800c022:	b2db      	uxtb	r3, r3
 800c024:	461a      	mov	r2, r3
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d19b      	bne.n	800bf64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3720      	adds	r7, #32
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20000000 	.word	0x20000000

0800c03c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af02      	add	r7, sp, #8
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c050:	d111      	bne.n	800c076 <SPI_EndRxTransaction+0x3a>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c05a:	d004      	beq.n	800c066 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c064:	d107      	bne.n	800c076 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c074:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c07e:	d117      	bne.n	800c0b0 <SPI_EndRxTransaction+0x74>
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c088:	d112      	bne.n	800c0b0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2200      	movs	r2, #0
 800c092:	2101      	movs	r1, #1
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f7ff ff49 	bl	800bf2c <SPI_WaitFlagStateUntilTimeout>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d01a      	beq.n	800c0d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a4:	f043 0220 	orr.w	r2, r3, #32
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	e013      	b.n	800c0d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2180      	movs	r1, #128	; 0x80
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f7ff ff36 	bl	800bf2c <SPI_WaitFlagStateUntilTimeout>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d007      	beq.n	800c0d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ca:	f043 0220 	orr.w	r2, r3, #32
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	e000      	b.n	800c0d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af02      	add	r7, sp, #8
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	2180      	movs	r1, #128	; 0x80
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f7ff ff18 	bl	800bf2c <SPI_WaitFlagStateUntilTimeout>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d007      	beq.n	800c112 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c106:	f043 0220 	orr.w	r2, r3, #32
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800c10e:	2303      	movs	r3, #3
 800c110:	e000      	b.n	800c114 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e042      	b.n	800c1b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c134:	b2db      	uxtb	r3, r3
 800c136:	2b00      	cmp	r3, #0
 800c138:	d106      	bne.n	800c148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7fb fcc0 	bl	8007ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2224      	movs	r2, #36	; 0x24
 800c14c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68da      	ldr	r2, [r3, #12]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c15e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fd71 	bl	800cc48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	691a      	ldr	r2, [r3, #16]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	695a      	ldr	r2, [r3, #20]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68da      	ldr	r2, [r3, #12]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2200      	movs	r2, #0
 800c19a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2220      	movs	r2, #32
 800c1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08a      	sub	sp, #40	; 0x28
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	603b      	str	r3, [r7, #0]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b20      	cmp	r3, #32
 800c1da:	d16d      	bne.n	800c2b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <HAL_UART_Transmit+0x2c>
 800c1e2:	88fb      	ldrh	r3, [r7, #6]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e066      	b.n	800c2ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2221      	movs	r2, #33	; 0x21
 800c1f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c1fa:	f7fb fea1 	bl	8007f40 <HAL_GetTick>
 800c1fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	88fa      	ldrh	r2, [r7, #6]
 800c204:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	88fa      	ldrh	r2, [r7, #6]
 800c20a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c214:	d108      	bne.n	800c228 <HAL_UART_Transmit+0x6c>
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d104      	bne.n	800c228 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c21e:	2300      	movs	r3, #0
 800c220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	61bb      	str	r3, [r7, #24]
 800c226:	e003      	b.n	800c230 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c22c:	2300      	movs	r3, #0
 800c22e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c230:	e02a      	b.n	800c288 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	9300      	str	r3, [sp, #0]
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2200      	movs	r2, #0
 800c23a:	2180      	movs	r1, #128	; 0x80
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f000 faf9 	bl	800c834 <UART_WaitOnFlagUntilTimeout>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d001      	beq.n	800c24c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800c248:	2303      	movs	r3, #3
 800c24a:	e036      	b.n	800c2ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10b      	bne.n	800c26a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	3302      	adds	r3, #2
 800c266:	61bb      	str	r3, [r7, #24]
 800c268:	e007      	b.n	800c27a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	781a      	ldrb	r2, [r3, #0]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	3301      	adds	r3, #1
 800c278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c27e:	b29b      	uxth	r3, r3
 800c280:	3b01      	subs	r3, #1
 800c282:	b29a      	uxth	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1cf      	bne.n	800c232 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	2200      	movs	r2, #0
 800c29a:	2140      	movs	r1, #64	; 0x40
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f000 fac9 	bl	800c834 <UART_WaitOnFlagUntilTimeout>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e006      	b.n	800c2ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2220      	movs	r2, #32
 800c2b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	e000      	b.n	800c2ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800c2b8:	2302      	movs	r3, #2
  }
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3720      	adds	r7, #32
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b0ba      	sub	sp, #232	; 0xe8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2fa:	f003 030f 	and.w	r3, r3, #15
 800c2fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10f      	bne.n	800c32a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c30e:	f003 0320 	and.w	r3, r3, #32
 800c312:	2b00      	cmp	r3, #0
 800c314:	d009      	beq.n	800c32a <HAL_UART_IRQHandler+0x66>
 800c316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c31a:	f003 0320 	and.w	r3, r3, #32
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fbd1 	bl	800caca <UART_Receive_IT>
      return;
 800c328:	e25b      	b.n	800c7e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c32a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f000 80de 	beq.w	800c4f0 <HAL_UART_IRQHandler+0x22c>
 800c334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c338:	f003 0301 	and.w	r3, r3, #1
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d106      	bne.n	800c34e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c344:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f000 80d1 	beq.w	800c4f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c352:	f003 0301 	and.w	r3, r3, #1
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00b      	beq.n	800c372 <HAL_UART_IRQHandler+0xae>
 800c35a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c35e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c362:	2b00      	cmp	r3, #0
 800c364:	d005      	beq.n	800c372 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c36a:	f043 0201 	orr.w	r2, r3, #1
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c376:	f003 0304 	and.w	r3, r3, #4
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00b      	beq.n	800c396 <HAL_UART_IRQHandler+0xd2>
 800c37e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c382:	f003 0301 	and.w	r3, r3, #1
 800c386:	2b00      	cmp	r3, #0
 800c388:	d005      	beq.n	800c396 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c38e:	f043 0202 	orr.w	r2, r3, #2
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c39a:	f003 0302 	and.w	r3, r3, #2
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00b      	beq.n	800c3ba <HAL_UART_IRQHandler+0xf6>
 800c3a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d005      	beq.n	800c3ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3b2:	f043 0204 	orr.w	r2, r3, #4
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3be:	f003 0308 	and.w	r3, r3, #8
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d011      	beq.n	800c3ea <HAL_UART_IRQHandler+0x126>
 800c3c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3ca:	f003 0320 	and.w	r3, r3, #32
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d105      	bne.n	800c3de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d005      	beq.n	800c3ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3e2:	f043 0208 	orr.w	r2, r3, #8
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f000 81f2 	beq.w	800c7d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3f8:	f003 0320 	and.w	r3, r3, #32
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d008      	beq.n	800c412 <HAL_UART_IRQHandler+0x14e>
 800c400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c404:	f003 0320 	and.w	r3, r3, #32
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d002      	beq.n	800c412 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fb5c 	bl	800caca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	695b      	ldr	r3, [r3, #20]
 800c418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	bf14      	ite	ne
 800c420:	2301      	movne	r3, #1
 800c422:	2300      	moveq	r3, #0
 800c424:	b2db      	uxtb	r3, r3
 800c426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c42e:	f003 0308 	and.w	r3, r3, #8
 800c432:	2b00      	cmp	r3, #0
 800c434:	d103      	bne.n	800c43e <HAL_UART_IRQHandler+0x17a>
 800c436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d04f      	beq.n	800c4de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fa66 	bl	800c910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d041      	beq.n	800c4d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3314      	adds	r3, #20
 800c458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c46c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	3314      	adds	r3, #20
 800c47a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c47e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c48a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c48e:	e841 2300 	strex	r3, r2, [r1]
 800c492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1d9      	bne.n	800c452 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d013      	beq.n	800c4ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4aa:	4a7e      	ldr	r2, [pc, #504]	; (800c6a4 <HAL_UART_IRQHandler+0x3e0>)
 800c4ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fb ff16 	bl	80082e4 <HAL_DMA_Abort_IT>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d016      	beq.n	800c4ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4cc:	e00e      	b.n	800c4ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f99c 	bl	800c80c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4d4:	e00a      	b.n	800c4ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f998 	bl	800c80c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4dc:	e006      	b.n	800c4ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f994 	bl	800c80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c4ea:	e175      	b.n	800c7d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4ec:	bf00      	nop
    return;
 800c4ee:	e173      	b.n	800c7d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	f040 814f 	bne.w	800c798 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4fe:	f003 0310 	and.w	r3, r3, #16
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 8148 	beq.w	800c798 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c50c:	f003 0310 	and.w	r3, r3, #16
 800c510:	2b00      	cmp	r3, #0
 800c512:	f000 8141 	beq.w	800c798 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c516:	2300      	movs	r3, #0
 800c518:	60bb      	str	r3, [r7, #8]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	60bb      	str	r3, [r7, #8]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	60bb      	str	r3, [r7, #8]
 800c52a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	695b      	ldr	r3, [r3, #20]
 800c532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 80b6 	beq.w	800c6a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f000 8145 	beq.w	800c7dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c55a:	429a      	cmp	r2, r3
 800c55c:	f080 813e 	bcs.w	800c7dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c566:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56c:	699b      	ldr	r3, [r3, #24]
 800c56e:	2b20      	cmp	r3, #32
 800c570:	f000 8088 	beq.w	800c684 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	330c      	adds	r3, #12
 800c57a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c582:	e853 3f00 	ldrex	r3, [r3]
 800c586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c58a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c58e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	330c      	adds	r3, #12
 800c59c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c5a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c5a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c5ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5b0:	e841 2300 	strex	r3, r2, [r1]
 800c5b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c5b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1d9      	bne.n	800c574 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3314      	adds	r3, #20
 800c5c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5ca:	e853 3f00 	ldrex	r3, [r3]
 800c5ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c5d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5d2:	f023 0301 	bic.w	r3, r3, #1
 800c5d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	3314      	adds	r3, #20
 800c5e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c5e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c5e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5f0:	e841 2300 	strex	r3, r2, [r1]
 800c5f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1e1      	bne.n	800c5c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3314      	adds	r3, #20
 800c602:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c606:	e853 3f00 	ldrex	r3, [r3]
 800c60a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c60c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c60e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	3314      	adds	r3, #20
 800c61c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c620:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c622:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c624:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c626:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c628:	e841 2300 	strex	r3, r2, [r1]
 800c62c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c62e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e3      	bne.n	800c5fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2220      	movs	r2, #32
 800c638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	330c      	adds	r3, #12
 800c648:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c654:	f023 0310 	bic.w	r3, r3, #16
 800c658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	330c      	adds	r3, #12
 800c662:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c666:	65ba      	str	r2, [r7, #88]	; 0x58
 800c668:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c66c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c66e:	e841 2300 	strex	r3, r2, [r1]
 800c672:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1e3      	bne.n	800c642 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fb fdf4 	bl	800826c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2202      	movs	r2, #2
 800c688:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c692:	b29b      	uxth	r3, r3
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	b29b      	uxth	r3, r3
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f8bf 	bl	800c81e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c6a0:	e09c      	b.n	800c7dc <HAL_UART_IRQHandler+0x518>
 800c6a2:	bf00      	nop
 800c6a4:	0800c9d5 	.word	0x0800c9d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 808e 	beq.w	800c7e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c6c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 8089 	beq.w	800c7e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	330c      	adds	r3, #12
 800c6d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d8:	e853 3f00 	ldrex	r3, [r3]
 800c6dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	330c      	adds	r3, #12
 800c6ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c6f2:	647a      	str	r2, [r7, #68]	; 0x44
 800c6f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6fa:	e841 2300 	strex	r3, r2, [r1]
 800c6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1e3      	bne.n	800c6ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	3314      	adds	r3, #20
 800c70c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c710:	e853 3f00 	ldrex	r3, [r3]
 800c714:	623b      	str	r3, [r7, #32]
   return(result);
 800c716:	6a3b      	ldr	r3, [r7, #32]
 800c718:	f023 0301 	bic.w	r3, r3, #1
 800c71c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	3314      	adds	r3, #20
 800c726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c72a:	633a      	str	r2, [r7, #48]	; 0x30
 800c72c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c732:	e841 2300 	strex	r3, r2, [r1]
 800c736:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1e3      	bne.n	800c706 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2220      	movs	r2, #32
 800c742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	330c      	adds	r3, #12
 800c752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	e853 3f00 	ldrex	r3, [r3]
 800c75a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f023 0310 	bic.w	r3, r3, #16
 800c762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	330c      	adds	r3, #12
 800c76c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c770:	61fa      	str	r2, [r7, #28]
 800c772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c774:	69b9      	ldr	r1, [r7, #24]
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	e841 2300 	strex	r3, r2, [r1]
 800c77c:	617b      	str	r3, [r7, #20]
   return(result);
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1e3      	bne.n	800c74c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2202      	movs	r2, #2
 800c788:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c78a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c78e:	4619      	mov	r1, r3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f844 	bl	800c81e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c796:	e023      	b.n	800c7e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c79c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d009      	beq.n	800c7b8 <HAL_UART_IRQHandler+0x4f4>
 800c7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d003      	beq.n	800c7b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f923 	bl	800c9fc <UART_Transmit_IT>
    return;
 800c7b6:	e014      	b.n	800c7e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00e      	beq.n	800c7e2 <HAL_UART_IRQHandler+0x51e>
 800c7c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d008      	beq.n	800c7e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f962 	bl	800ca9a <UART_EndTransmit_IT>
    return;
 800c7d6:	e004      	b.n	800c7e2 <HAL_UART_IRQHandler+0x51e>
    return;
 800c7d8:	bf00      	nop
 800c7da:	e002      	b.n	800c7e2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c7dc:	bf00      	nop
 800c7de:	e000      	b.n	800c7e2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c7e0:	bf00      	nop
  }
}
 800c7e2:	37e8      	adds	r7, #232	; 0xe8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bc80      	pop	{r7}
 800c7f8:	4770      	bx	lr

0800c7fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7fa:	b480      	push	{r7}
 800c7fc:	b083      	sub	sp, #12
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c802:	bf00      	nop
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	bc80      	pop	{r7}
 800c80a:	4770      	bx	lr

0800c80c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	bc80      	pop	{r7}
 800c81c:	4770      	bx	lr

0800c81e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c81e:	b480      	push	{r7}
 800c820:	b083      	sub	sp, #12
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	460b      	mov	r3, r1
 800c828:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c82a:	bf00      	nop
 800c82c:	370c      	adds	r7, #12
 800c82e:	46bd      	mov	sp, r7
 800c830:	bc80      	pop	{r7}
 800c832:	4770      	bx	lr

0800c834 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b090      	sub	sp, #64	; 0x40
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	603b      	str	r3, [r7, #0]
 800c840:	4613      	mov	r3, r2
 800c842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c844:	e050      	b.n	800c8e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c84c:	d04c      	beq.n	800c8e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c84e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c850:	2b00      	cmp	r3, #0
 800c852:	d007      	beq.n	800c864 <UART_WaitOnFlagUntilTimeout+0x30>
 800c854:	f7fb fb74 	bl	8007f40 <HAL_GetTick>
 800c858:	4602      	mov	r2, r0
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	1ad3      	subs	r3, r2, r3
 800c85e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c860:	429a      	cmp	r2, r3
 800c862:	d241      	bcs.n	800c8e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	330c      	adds	r3, #12
 800c86a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86e:	e853 3f00 	ldrex	r3, [r3]
 800c872:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c876:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	330c      	adds	r3, #12
 800c882:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c884:	637a      	str	r2, [r7, #52]	; 0x34
 800c886:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c888:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c88a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c88c:	e841 2300 	strex	r3, r2, [r1]
 800c890:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1e5      	bne.n	800c864 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3314      	adds	r3, #20
 800c89e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	e853 3f00 	ldrex	r3, [r3]
 800c8a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	f023 0301 	bic.w	r3, r3, #1
 800c8ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3314      	adds	r3, #20
 800c8b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8b8:	623a      	str	r2, [r7, #32]
 800c8ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8bc:	69f9      	ldr	r1, [r7, #28]
 800c8be:	6a3a      	ldr	r2, [r7, #32]
 800c8c0:	e841 2300 	strex	r3, r2, [r1]
 800c8c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1e5      	bne.n	800c898 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2220      	movs	r2, #32
 800c8d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2220      	movs	r2, #32
 800c8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	e00f      	b.n	800c908 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	bf0c      	ite	eq
 800c8f8:	2301      	moveq	r3, #1
 800c8fa:	2300      	movne	r3, #0
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	461a      	mov	r2, r3
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	429a      	cmp	r2, r3
 800c904:	d09f      	beq.n	800c846 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3740      	adds	r7, #64	; 0x40
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c910:	b480      	push	{r7}
 800c912:	b095      	sub	sp, #84	; 0x54
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	330c      	adds	r3, #12
 800c91e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c922:	e853 3f00 	ldrex	r3, [r3]
 800c926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c92e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	330c      	adds	r3, #12
 800c936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c938:	643a      	str	r2, [r7, #64]	; 0x40
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c93e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c940:	e841 2300 	strex	r3, r2, [r1]
 800c944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1e5      	bne.n	800c918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	3314      	adds	r3, #20
 800c952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	e853 3f00 	ldrex	r3, [r3]
 800c95a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	f023 0301 	bic.w	r3, r3, #1
 800c962:	64bb      	str	r3, [r7, #72]	; 0x48
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3314      	adds	r3, #20
 800c96a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c96c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c96e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c974:	e841 2300 	strex	r3, r2, [r1]
 800c978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1e5      	bne.n	800c94c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c984:	2b01      	cmp	r3, #1
 800c986:	d119      	bne.n	800c9bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	330c      	adds	r3, #12
 800c98e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	e853 3f00 	ldrex	r3, [r3]
 800c996:	60bb      	str	r3, [r7, #8]
   return(result);
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	f023 0310 	bic.w	r3, r3, #16
 800c99e:	647b      	str	r3, [r7, #68]	; 0x44
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	330c      	adds	r3, #12
 800c9a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9a8:	61ba      	str	r2, [r7, #24]
 800c9aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ac:	6979      	ldr	r1, [r7, #20]
 800c9ae:	69ba      	ldr	r2, [r7, #24]
 800c9b0:	e841 2300 	strex	r3, r2, [r1]
 800c9b4:	613b      	str	r3, [r7, #16]
   return(result);
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1e5      	bne.n	800c988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2220      	movs	r2, #32
 800c9c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c9ca:	bf00      	nop
 800c9cc:	3754      	adds	r7, #84	; 0x54
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bc80      	pop	{r7}
 800c9d2:	4770      	bx	lr

0800c9d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f7ff ff0c 	bl	800c80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9f4:	bf00      	nop
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b085      	sub	sp, #20
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b21      	cmp	r3, #33	; 0x21
 800ca0e:	d13e      	bne.n	800ca8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca18:	d114      	bne.n	800ca44 <UART_Transmit_IT+0x48>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	691b      	ldr	r3, [r3, #16]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d110      	bne.n	800ca44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a1b      	ldr	r3, [r3, #32]
 800ca3c:	1c9a      	adds	r2, r3, #2
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	621a      	str	r2, [r3, #32]
 800ca42:	e008      	b.n	800ca56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a1b      	ldr	r3, [r3, #32]
 800ca48:	1c59      	adds	r1, r3, #1
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	6211      	str	r1, [r2, #32]
 800ca4e:	781a      	ldrb	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	4619      	mov	r1, r3
 800ca64:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d10f      	bne.n	800ca8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68da      	ldr	r2, [r3, #12]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ca78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68da      	ldr	r2, [r3, #12]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	e000      	b.n	800ca90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ca8e:	2302      	movs	r3, #2
  }
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bc80      	pop	{r7}
 800ca98:	4770      	bx	lr

0800ca9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b082      	sub	sp, #8
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	68da      	ldr	r2, [r3, #12]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cab0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2220      	movs	r2, #32
 800cab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7ff fe94 	bl	800c7e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b08c      	sub	sp, #48	; 0x30
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	2b22      	cmp	r3, #34	; 0x22
 800cadc:	f040 80ae 	bne.w	800cc3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cae8:	d117      	bne.n	800cb1a <UART_Receive_IT+0x50>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d113      	bne.n	800cb1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cafa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb12:	1c9a      	adds	r2, r3, #2
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	629a      	str	r2, [r3, #40]	; 0x28
 800cb18:	e026      	b.n	800cb68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cb20:	2300      	movs	r3, #0
 800cb22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb2c:	d007      	beq.n	800cb3e <UART_Receive_IT+0x74>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10a      	bne.n	800cb4c <UART_Receive_IT+0x82>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d106      	bne.n	800cb4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	b2da      	uxtb	r2, r3
 800cb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb48:	701a      	strb	r2, [r3, #0]
 800cb4a:	e008      	b.n	800cb5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb58:	b2da      	uxtb	r2, r3
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb62:	1c5a      	adds	r2, r3, #1
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	4619      	mov	r1, r3
 800cb76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d15d      	bne.n	800cc38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	68da      	ldr	r2, [r3, #12]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f022 0220 	bic.w	r2, r2, #32
 800cb8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68da      	ldr	r2, [r3, #12]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	695a      	ldr	r2, [r3, #20]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f022 0201 	bic.w	r2, r2, #1
 800cbaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2220      	movs	r2, #32
 800cbb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d135      	bne.n	800cc2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	330c      	adds	r3, #12
 800cbce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	e853 3f00 	ldrex	r3, [r3]
 800cbd6:	613b      	str	r3, [r7, #16]
   return(result);
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	f023 0310 	bic.w	r3, r3, #16
 800cbde:	627b      	str	r3, [r7, #36]	; 0x24
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	330c      	adds	r3, #12
 800cbe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbe8:	623a      	str	r2, [r7, #32]
 800cbea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbec:	69f9      	ldr	r1, [r7, #28]
 800cbee:	6a3a      	ldr	r2, [r7, #32]
 800cbf0:	e841 2300 	strex	r3, r2, [r1]
 800cbf4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1e5      	bne.n	800cbc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f003 0310 	and.w	r3, r3, #16
 800cc06:	2b10      	cmp	r3, #16
 800cc08:	d10a      	bne.n	800cc20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	60fb      	str	r3, [r7, #12]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	60fb      	str	r3, [r7, #12]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cc24:	4619      	mov	r1, r3
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7ff fdf9 	bl	800c81e <HAL_UARTEx_RxEventCallback>
 800cc2c:	e002      	b.n	800cc34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7ff fde3 	bl	800c7fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	e002      	b.n	800cc3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	e000      	b.n	800cc3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cc3c:	2302      	movs	r3, #2
  }
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3730      	adds	r7, #48	; 0x30
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
	...

0800cc48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	691b      	ldr	r3, [r3, #16]
 800cc56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	68da      	ldr	r2, [r3, #12]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	430a      	orrs	r2, r1
 800cc64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	689a      	ldr	r2, [r3, #8]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	431a      	orrs	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cc82:	f023 030c 	bic.w	r3, r3, #12
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	6812      	ldr	r2, [r2, #0]
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	430b      	orrs	r3, r1
 800cc8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	699a      	ldr	r2, [r3, #24]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	430a      	orrs	r2, r1
 800cca4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a2c      	ldr	r2, [pc, #176]	; (800cd5c <UART_SetConfig+0x114>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d103      	bne.n	800ccb8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ccb0:	f7fd ff8a 	bl	800abc8 <HAL_RCC_GetPCLK2Freq>
 800ccb4:	60f8      	str	r0, [r7, #12]
 800ccb6:	e002      	b.n	800ccbe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ccb8:	f7fd ff72 	bl	800aba0 <HAL_RCC_GetPCLK1Freq>
 800ccbc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	4413      	add	r3, r2
 800ccc6:	009a      	lsls	r2, r3, #2
 800ccc8:	441a      	add	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccd4:	4a22      	ldr	r2, [pc, #136]	; (800cd60 <UART_SetConfig+0x118>)
 800ccd6:	fba2 2303 	umull	r2, r3, r2, r3
 800ccda:	095b      	lsrs	r3, r3, #5
 800ccdc:	0119      	lsls	r1, r3, #4
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	4613      	mov	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4413      	add	r3, r2
 800cce6:	009a      	lsls	r2, r3, #2
 800cce8:	441a      	add	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	fbb2 f2f3 	udiv	r2, r2, r3
 800ccf4:	4b1a      	ldr	r3, [pc, #104]	; (800cd60 <UART_SetConfig+0x118>)
 800ccf6:	fba3 0302 	umull	r0, r3, r3, r2
 800ccfa:	095b      	lsrs	r3, r3, #5
 800ccfc:	2064      	movs	r0, #100	; 0x64
 800ccfe:	fb00 f303 	mul.w	r3, r0, r3
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	011b      	lsls	r3, r3, #4
 800cd06:	3332      	adds	r3, #50	; 0x32
 800cd08:	4a15      	ldr	r2, [pc, #84]	; (800cd60 <UART_SetConfig+0x118>)
 800cd0a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd0e:	095b      	lsrs	r3, r3, #5
 800cd10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd14:	4419      	add	r1, r3
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4413      	add	r3, r2
 800cd1e:	009a      	lsls	r2, r3, #2
 800cd20:	441a      	add	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	fbb2 f2f3 	udiv	r2, r2, r3
 800cd2c:	4b0c      	ldr	r3, [pc, #48]	; (800cd60 <UART_SetConfig+0x118>)
 800cd2e:	fba3 0302 	umull	r0, r3, r3, r2
 800cd32:	095b      	lsrs	r3, r3, #5
 800cd34:	2064      	movs	r0, #100	; 0x64
 800cd36:	fb00 f303 	mul.w	r3, r0, r3
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	011b      	lsls	r3, r3, #4
 800cd3e:	3332      	adds	r3, #50	; 0x32
 800cd40:	4a07      	ldr	r2, [pc, #28]	; (800cd60 <UART_SetConfig+0x118>)
 800cd42:	fba2 2303 	umull	r2, r3, r2, r3
 800cd46:	095b      	lsrs	r3, r3, #5
 800cd48:	f003 020f 	and.w	r2, r3, #15
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	440a      	add	r2, r1
 800cd52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cd54:	bf00      	nop
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	40013800 	.word	0x40013800
 800cd60:	51eb851f 	.word	0x51eb851f

0800cd64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cd64:	b084      	sub	sp, #16
 800cd66:	b480      	push	{r7}
 800cd68:	b083      	sub	sp, #12
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	f107 0014 	add.w	r0, r7, #20
 800cd72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bc80      	pop	{r7}
 800cd80:	b004      	add	sp, #16
 800cd82:	4770      	bx	lr

0800cd84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cd94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800cd98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bc80      	pop	{r7}
 800cdae:	4770      	bx	lr

0800cdb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cdb8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800cdbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	43db      	mvns	r3, r3
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	4013      	ands	r3, r2
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3714      	adds	r7, #20
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bc80      	pop	{r7}
 800cde2:	4770      	bx	lr

0800cde4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bc80      	pop	{r7}
 800cdfa:	4770      	bx	lr

0800cdfc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cdfc:	b084      	sub	sp, #16
 800cdfe:	b480      	push	{r7}
 800ce00:	b083      	sub	sp, #12
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
 800ce06:	f107 0014 	add.w	r0, r7, #20
 800ce0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bc80      	pop	{r7}
 800ce38:	b004      	add	sp, #16
 800ce3a:	4770      	bx	lr

0800ce3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b09d      	sub	sp, #116	; 0x74
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ce46:	2300      	movs	r3, #0
 800ce48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4413      	add	r3, r2
 800ce56:	881b      	ldrh	r3, [r3, #0]
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ce5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce62:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	78db      	ldrb	r3, [r3, #3]
 800ce6a:	2b03      	cmp	r3, #3
 800ce6c:	d81f      	bhi.n	800ceae <USB_ActivateEndpoint+0x72>
 800ce6e:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <USB_ActivateEndpoint+0x38>)
 800ce70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce74:	0800ce85 	.word	0x0800ce85
 800ce78:	0800cea1 	.word	0x0800cea1
 800ce7c:	0800ceb7 	.word	0x0800ceb7
 800ce80:	0800ce93 	.word	0x0800ce93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ce84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ce88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ce8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ce90:	e012      	b.n	800ceb8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ce92:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ce96:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ce9a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ce9e:	e00b      	b.n	800ceb8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cea0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cea4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cea8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ceac:	e004      	b.n	800ceb8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ceb4:	e000      	b.n	800ceb8 <USB_ActivateEndpoint+0x7c>
      break;
 800ceb6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	441a      	add	r2, r3
 800cec2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ceca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ced2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ceec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	4313      	orrs	r3, r2
 800cefa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	441a      	add	r2, r3
 800cf08:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800cf0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	7b1b      	ldrb	r3, [r3, #12]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f040 8178 	bne.w	800d21a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	785b      	ldrb	r3, [r3, #1]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 8084 	beq.w	800d03c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	61bb      	str	r3, [r7, #24]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	461a      	mov	r2, r3
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	4413      	add	r3, r2
 800cf46:	61bb      	str	r3, [r7, #24]
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	011a      	lsls	r2, r3, #4
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	4413      	add	r3, r2
 800cf52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf56:	617b      	str	r3, [r7, #20]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	88db      	ldrh	r3, [r3, #6]
 800cf5c:	085b      	lsrs	r3, r3, #1
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	005b      	lsls	r3, r3, #1
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	4413      	add	r3, r2
 800cf72:	881b      	ldrh	r3, [r3, #0]
 800cf74:	827b      	strh	r3, [r7, #18]
 800cf76:	8a7b      	ldrh	r3, [r7, #18]
 800cf78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d01b      	beq.n	800cfb8 <USB_ActivateEndpoint+0x17c>
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	4413      	add	r3, r2
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf96:	823b      	strh	r3, [r7, #16]
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	441a      	add	r2, r3
 800cfa2:	8a3b      	ldrh	r3, [r7, #16]
 800cfa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	78db      	ldrb	r3, [r3, #3]
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d020      	beq.n	800d002 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfd6:	81bb      	strh	r3, [r7, #12]
 800cfd8:	89bb      	ldrh	r3, [r7, #12]
 800cfda:	f083 0320 	eor.w	r3, r3, #32
 800cfde:	81bb      	strh	r3, [r7, #12]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	441a      	add	r2, r3
 800cfea:	89bb      	ldrh	r3, [r7, #12]
 800cfec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	8013      	strh	r3, [r2, #0]
 800d000:	e2d5      	b.n	800d5ae <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	4413      	add	r3, r2
 800d00c:	881b      	ldrh	r3, [r3, #0]
 800d00e:	b29b      	uxth	r3, r3
 800d010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d018:	81fb      	strh	r3, [r7, #14]
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	441a      	add	r2, r3
 800d024:	89fb      	ldrh	r3, [r7, #14]
 800d026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d02a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d02e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d036:	b29b      	uxth	r3, r3
 800d038:	8013      	strh	r3, [r2, #0]
 800d03a:	e2b8      	b.n	800d5ae <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	633b      	str	r3, [r7, #48]	; 0x30
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d046:	b29b      	uxth	r3, r3
 800d048:	461a      	mov	r2, r3
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	4413      	add	r3, r2
 800d04e:	633b      	str	r3, [r7, #48]	; 0x30
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	011a      	lsls	r2, r3, #4
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	4413      	add	r3, r2
 800d05a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800d05e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	88db      	ldrh	r3, [r3, #6]
 800d064:	085b      	lsrs	r3, r3, #1
 800d066:	b29b      	uxth	r3, r3
 800d068:	005b      	lsls	r3, r3, #1
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	62bb      	str	r3, [r7, #40]	; 0x28
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	461a      	mov	r2, r3
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	4413      	add	r3, r2
 800d082:	62bb      	str	r3, [r7, #40]	; 0x28
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	011a      	lsls	r2, r3, #4
 800d08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08c:	4413      	add	r3, r2
 800d08e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d092:	627b      	str	r3, [r7, #36]	; 0x24
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	881b      	ldrh	r3, [r3, #0]
 800d098:	b29b      	uxth	r3, r3
 800d09a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	801a      	strh	r2, [r3, #0]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	2b3e      	cmp	r3, #62	; 0x3e
 800d0aa:	d91d      	bls.n	800d0e8 <USB_ActivateEndpoint+0x2ac>
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	691b      	ldr	r3, [r3, #16]
 800d0b0:	095b      	lsrs	r3, r3, #5
 800d0b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	f003 031f 	and.w	r3, r3, #31
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d102      	bne.n	800d0c6 <USB_ActivateEndpoint+0x28a>
 800d0c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c8:	881b      	ldrh	r3, [r3, #0]
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	029b      	lsls	r3, r3, #10
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	801a      	strh	r2, [r3, #0]
 800d0e6:	e026      	b.n	800d136 <USB_ActivateEndpoint+0x2fa>
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10a      	bne.n	800d106 <USB_ActivateEndpoint+0x2ca>
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f2:	881b      	ldrh	r3, [r3, #0]
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	801a      	strh	r2, [r3, #0]
 800d104:	e017      	b.n	800d136 <USB_ActivateEndpoint+0x2fa>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	691b      	ldr	r3, [r3, #16]
 800d10a:	085b      	lsrs	r3, r3, #1
 800d10c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	691b      	ldr	r3, [r3, #16]
 800d112:	f003 0301 	and.w	r3, r3, #1
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <USB_ActivateEndpoint+0x2e4>
 800d11a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d11c:	3301      	adds	r3, #1
 800d11e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	b29a      	uxth	r2, r3
 800d126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d128:	b29b      	uxth	r3, r3
 800d12a:	029b      	lsls	r3, r3, #10
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	4313      	orrs	r3, r2
 800d130:	b29a      	uxth	r2, r3
 800d132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d134:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	4413      	add	r3, r2
 800d140:	881b      	ldrh	r3, [r3, #0]
 800d142:	847b      	strh	r3, [r7, #34]	; 0x22
 800d144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d01b      	beq.n	800d186 <USB_ActivateEndpoint+0x34a>
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	881b      	ldrh	r3, [r3, #0]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d164:	843b      	strh	r3, [r7, #32]
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	441a      	add	r2, r3
 800d170:	8c3b      	ldrh	r3, [r7, #32]
 800d172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d17a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d17e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d182:	b29b      	uxth	r3, r3
 800d184:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d124      	bne.n	800d1d8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4413      	add	r3, r2
 800d198:	881b      	ldrh	r3, [r3, #0]
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d1a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1a4:	83bb      	strh	r3, [r7, #28]
 800d1a6:	8bbb      	ldrh	r3, [r7, #28]
 800d1a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d1ac:	83bb      	strh	r3, [r7, #28]
 800d1ae:	8bbb      	ldrh	r3, [r7, #28]
 800d1b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d1b4:	83bb      	strh	r3, [r7, #28]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	441a      	add	r2, r3
 800d1c0:	8bbb      	ldrh	r3, [r7, #28]
 800d1c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	8013      	strh	r3, [r2, #0]
 800d1d6:	e1ea      	b.n	800d5ae <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	881b      	ldrh	r3, [r3, #0]
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d1ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1ee:	83fb      	strh	r3, [r7, #30]
 800d1f0:	8bfb      	ldrh	r3, [r7, #30]
 800d1f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d1f6:	83fb      	strh	r3, [r7, #30]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	441a      	add	r2, r3
 800d202:	8bfb      	ldrh	r3, [r7, #30]
 800d204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d20c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d214:	b29b      	uxth	r3, r3
 800d216:	8013      	strh	r3, [r2, #0]
 800d218:	e1c9      	b.n	800d5ae <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	78db      	ldrb	r3, [r3, #3]
 800d21e:	2b02      	cmp	r3, #2
 800d220:	d11e      	bne.n	800d260 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4413      	add	r3, r2
 800d22c:	881b      	ldrh	r3, [r3, #0]
 800d22e:	b29b      	uxth	r3, r3
 800d230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d238:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	441a      	add	r2, r3
 800d246:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d24a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d24e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d252:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	8013      	strh	r3, [r2, #0]
 800d25e:	e01d      	b.n	800d29c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	881b      	ldrh	r3, [r3, #0]
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d276:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	441a      	add	r2, r3
 800d284:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d28c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d298:	b29b      	uxth	r3, r3
 800d29a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2ac:	4413      	add	r3, r2
 800d2ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	011a      	lsls	r2, r3, #4
 800d2b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2b8:	4413      	add	r3, r2
 800d2ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2be:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	891b      	ldrh	r3, [r3, #8]
 800d2c4:	085b      	lsrs	r3, r3, #1
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	005b      	lsls	r3, r3, #1
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2ce:	801a      	strh	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	657b      	str	r3, [r7, #84]	; 0x54
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	461a      	mov	r2, r3
 800d2de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2e0:	4413      	add	r3, r2
 800d2e2:	657b      	str	r3, [r7, #84]	; 0x54
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	011a      	lsls	r2, r3, #4
 800d2ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2ec:	4413      	add	r3, r2
 800d2ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800d2f2:	653b      	str	r3, [r7, #80]	; 0x50
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	895b      	ldrh	r3, [r3, #10]
 800d2f8:	085b      	lsrs	r3, r3, #1
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	005b      	lsls	r3, r3, #1
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d302:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	785b      	ldrb	r3, [r3, #1]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f040 8093 	bne.w	800d434 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	4413      	add	r3, r2
 800d318:	881b      	ldrh	r3, [r3, #0]
 800d31a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d31e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d326:	2b00      	cmp	r3, #0
 800d328:	d01b      	beq.n	800d362 <USB_ActivateEndpoint+0x526>
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	b29b      	uxth	r3, r3
 800d338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d33c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d340:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	441a      	add	r2, r3
 800d34c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d34e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d35a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d35e:	b29b      	uxth	r3, r3
 800d360:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	881b      	ldrh	r3, [r3, #0]
 800d36e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d370:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d376:	2b00      	cmp	r3, #0
 800d378:	d01b      	beq.n	800d3b2 <USB_ActivateEndpoint+0x576>
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	4413      	add	r3, r2
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	b29b      	uxth	r3, r3
 800d388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d38c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d390:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	441a      	add	r2, r3
 800d39c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d39e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	4413      	add	r3, r2
 800d3bc:	881b      	ldrh	r3, [r3, #0]
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3c8:	873b      	strh	r3, [r7, #56]	; 0x38
 800d3ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d3cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d3d0:	873b      	strh	r3, [r7, #56]	; 0x38
 800d3d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d3d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d3d8:	873b      	strh	r3, [r7, #56]	; 0x38
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	441a      	add	r2, r3
 800d3e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d3e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	b29b      	uxth	r3, r3
 800d408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d40c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d410:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	441a      	add	r2, r3
 800d41c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d41e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d42e:	b29b      	uxth	r3, r3
 800d430:	8013      	strh	r3, [r2, #0]
 800d432:	e0bc      	b.n	800d5ae <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d444:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01d      	beq.n	800d48c <USB_ActivateEndpoint+0x650>
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4413      	add	r3, r2
 800d45a:	881b      	ldrh	r3, [r3, #0]
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d466:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	441a      	add	r2, r3
 800d474:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d47c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d488:	b29b      	uxth	r3, r3
 800d48a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4413      	add	r3, r2
 800d496:	881b      	ldrh	r3, [r3, #0]
 800d498:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d49c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d01d      	beq.n	800d4e4 <USB_ActivateEndpoint+0x6a8>
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	4413      	add	r3, r2
 800d4b2:	881b      	ldrh	r3, [r3, #0]
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	441a      	add	r2, r3
 800d4cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d4d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	78db      	ldrb	r3, [r3, #3]
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d024      	beq.n	800d536 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4413      	add	r3, r2
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d502:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d506:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d50a:	f083 0320 	eor.w	r3, r3, #32
 800d50e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	441a      	add	r2, r3
 800d51c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d530:	b29b      	uxth	r3, r3
 800d532:	8013      	strh	r3, [r2, #0]
 800d534:	e01d      	b.n	800d572 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	4413      	add	r3, r2
 800d540:	881b      	ldrh	r3, [r3, #0]
 800d542:	b29b      	uxth	r3, r3
 800d544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d54c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	441a      	add	r2, r3
 800d55a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d55e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d56e:	b29b      	uxth	r3, r3
 800d570:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	b29b      	uxth	r3, r3
 800d580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d588:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	441a      	add	r2, r3
 800d596:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d59a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d59e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d5ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3774      	adds	r7, #116	; 0x74
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bc80      	pop	{r7}
 800d5ba:	4770      	bx	lr

0800d5bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b08d      	sub	sp, #52	; 0x34
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	7b1b      	ldrb	r3, [r3, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f040 808e 	bne.w	800d6ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	785b      	ldrb	r3, [r3, #1]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d044      	beq.n	800d662 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	4413      	add	r3, r2
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	81bb      	strh	r3, [r7, #12]
 800d5e6:	89bb      	ldrh	r3, [r7, #12]
 800d5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d01b      	beq.n	800d628 <USB_DeactivateEndpoint+0x6c>
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d606:	817b      	strh	r3, [r7, #10]
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	441a      	add	r2, r3
 800d612:	897b      	ldrh	r3, [r7, #10]
 800d614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d61c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d620:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d624:	b29b      	uxth	r3, r3
 800d626:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	881b      	ldrh	r3, [r3, #0]
 800d634:	b29b      	uxth	r3, r3
 800d636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d63a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d63e:	813b      	strh	r3, [r7, #8]
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	441a      	add	r2, r3
 800d64a:	893b      	ldrh	r3, [r7, #8]
 800d64c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	8013      	strh	r3, [r2, #0]
 800d660:	e192      	b.n	800d988 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	4413      	add	r3, r2
 800d66c:	881b      	ldrh	r3, [r3, #0]
 800d66e:	827b      	strh	r3, [r7, #18]
 800d670:	8a7b      	ldrh	r3, [r7, #18]
 800d672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d676:	2b00      	cmp	r3, #0
 800d678:	d01b      	beq.n	800d6b2 <USB_DeactivateEndpoint+0xf6>
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4413      	add	r3, r2
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	b29b      	uxth	r3, r3
 800d688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d68c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d690:	823b      	strh	r3, [r7, #16]
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	441a      	add	r2, r3
 800d69c:	8a3b      	ldrh	r3, [r7, #16]
 800d69e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d6aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6c8:	81fb      	strh	r3, [r7, #14]
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	441a      	add	r2, r3
 800d6d4:	89fb      	ldrh	r3, [r7, #14]
 800d6d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	8013      	strh	r3, [r2, #0]
 800d6ea:	e14d      	b.n	800d988 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	785b      	ldrb	r3, [r3, #1]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f040 80a5 	bne.w	800d840 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	4413      	add	r3, r2
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	843b      	strh	r3, [r7, #32]
 800d704:	8c3b      	ldrh	r3, [r7, #32]
 800d706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d01b      	beq.n	800d746 <USB_DeactivateEndpoint+0x18a>
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	881b      	ldrh	r3, [r3, #0]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d724:	83fb      	strh	r3, [r7, #30]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	441a      	add	r2, r3
 800d730:	8bfb      	ldrh	r3, [r7, #30]
 800d732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d73a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d73e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d742:	b29b      	uxth	r3, r3
 800d744:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	4413      	add	r3, r2
 800d750:	881b      	ldrh	r3, [r3, #0]
 800d752:	83bb      	strh	r3, [r7, #28]
 800d754:	8bbb      	ldrh	r3, [r7, #28]
 800d756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d01b      	beq.n	800d796 <USB_DeactivateEndpoint+0x1da>
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	4413      	add	r3, r2
 800d768:	881b      	ldrh	r3, [r3, #0]
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d774:	837b      	strh	r3, [r7, #26]
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	441a      	add	r2, r3
 800d780:	8b7b      	ldrh	r3, [r7, #26]
 800d782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d78a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d78e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d792:	b29b      	uxth	r3, r3
 800d794:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	4413      	add	r3, r2
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7ac:	833b      	strh	r3, [r7, #24]
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	441a      	add	r2, r3
 800d7b8:	8b3b      	ldrh	r3, [r7, #24]
 800d7ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	4413      	add	r3, r2
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7e4:	82fb      	strh	r3, [r7, #22]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	441a      	add	r2, r3
 800d7f0:	8afb      	ldrh	r3, [r7, #22]
 800d7f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d802:	b29b      	uxth	r3, r3
 800d804:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	4413      	add	r3, r2
 800d810:	881b      	ldrh	r3, [r3, #0]
 800d812:	b29b      	uxth	r3, r3
 800d814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d81c:	82bb      	strh	r3, [r7, #20]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	441a      	add	r2, r3
 800d828:	8abb      	ldrh	r3, [r7, #20]
 800d82a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d82e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	8013      	strh	r3, [r2, #0]
 800d83e:	e0a3      	b.n	800d988 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4413      	add	r3, r2
 800d84a:	881b      	ldrh	r3, [r3, #0]
 800d84c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d84e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d01b      	beq.n	800d890 <USB_DeactivateEndpoint+0x2d4>
 800d858:	687a      	ldr	r2, [r7, #4]
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	4413      	add	r3, r2
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	b29b      	uxth	r3, r3
 800d866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d86e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	441a      	add	r2, r3
 800d87a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d87c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	4413      	add	r3, r2
 800d89a:	881b      	ldrh	r3, [r3, #0]
 800d89c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d89e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d01b      	beq.n	800d8e0 <USB_DeactivateEndpoint+0x324>
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8be:	853b      	strh	r3, [r7, #40]	; 0x28
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	441a      	add	r2, r3
 800d8ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d8cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d8d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	4413      	add	r3, r2
 800d8ea:	881b      	ldrh	r3, [r3, #0]
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	009b      	lsls	r3, r3, #2
 800d900:	441a      	add	r2, r3
 800d902:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d90c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d914:	b29b      	uxth	r3, r3
 800d916:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	4413      	add	r3, r2
 800d922:	881b      	ldrh	r3, [r3, #0]
 800d924:	b29b      	uxth	r3, r3
 800d926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d92a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d92e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	441a      	add	r2, r3
 800d93a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d93c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	4413      	add	r3, r2
 800d95a:	881b      	ldrh	r3, [r3, #0]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d966:	847b      	strh	r3, [r7, #34]	; 0x22
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	441a      	add	r2, r3
 800d972:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d97c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d984:	b29b      	uxth	r3, r3
 800d986:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3734      	adds	r7, #52	; 0x34
 800d98e:	46bd      	mov	sp, r7
 800d990:	bc80      	pop	{r7}
 800d992:	4770      	bx	lr

0800d994 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b0c2      	sub	sp, #264	; 0x108
 800d998:	af00      	add	r7, sp, #0
 800d99a:	1d3b      	adds	r3, r7, #4
 800d99c:	6018      	str	r0, [r3, #0]
 800d99e:	463b      	mov	r3, r7
 800d9a0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d9a2:	463b      	mov	r3, r7
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	785b      	ldrb	r3, [r3, #1]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	f040 8545 	bne.w	800e438 <USB_EPStartXfer+0xaa4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d9ae:	463b      	mov	r3, r7
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	699a      	ldr	r2, [r3, #24]
 800d9b4:	463b      	mov	r3, r7
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d905      	bls.n	800d9ca <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800d9be:	463b      	mov	r3, r7
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	691b      	ldr	r3, [r3, #16]
 800d9c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d9c8:	e004      	b.n	800d9d4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800d9ca:	463b      	mov	r3, r7
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d9d4:	463b      	mov	r3, r7
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	7b1b      	ldrb	r3, [r3, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d128      	bne.n	800da30 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d9de:	463b      	mov	r3, r7
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6959      	ldr	r1, [r3, #20]
 800d9e4:	463b      	mov	r3, r7
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	88da      	ldrh	r2, [r3, #6]
 800d9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	1d38      	adds	r0, r7, #4
 800d9f2:	6800      	ldr	r0, [r0, #0]
 800d9f4:	f001 fa58 	bl	800eea8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d9f8:	1d3b      	adds	r3, r7, #4
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	613b      	str	r3, [r7, #16]
 800d9fe:	1d3b      	adds	r3, r7, #4
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da06:	b29b      	uxth	r3, r3
 800da08:	461a      	mov	r2, r3
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	4413      	add	r3, r2
 800da0e:	613b      	str	r3, [r7, #16]
 800da10:	463b      	mov	r3, r7
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	011a      	lsls	r2, r3, #4
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	4413      	add	r3, r2
 800da1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800da20:	60fb      	str	r3, [r7, #12]
 800da22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da26:	b29a      	uxth	r2, r3
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	801a      	strh	r2, [r3, #0]
 800da2c:	f000 bcdb 	b.w	800e3e6 <USB_EPStartXfer+0xa52>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800da30:	463b      	mov	r3, r7
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	78db      	ldrb	r3, [r3, #3]
 800da36:	2b02      	cmp	r3, #2
 800da38:	f040 836f 	bne.w	800e11a <USB_EPStartXfer+0x786>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800da3c:	463b      	mov	r3, r7
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6a1a      	ldr	r2, [r3, #32]
 800da42:	463b      	mov	r3, r7
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	429a      	cmp	r2, r3
 800da4a:	f240 8313 	bls.w	800e074 <USB_EPStartXfer+0x6e0>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800da4e:	1d3b      	adds	r3, r7, #4
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	463b      	mov	r3, r7
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	4413      	add	r3, r2
 800da5c:	881b      	ldrh	r3, [r3, #0]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800da6c:	1d3b      	adds	r3, r7, #4
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	463b      	mov	r3, r7
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	441a      	add	r2, r3
 800da7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800da7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800da8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da8e:	b29b      	uxth	r3, r3
 800da90:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800da92:	463b      	mov	r3, r7
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6a1a      	ldr	r2, [r3, #32]
 800da98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da9c:	1ad2      	subs	r2, r2, r3
 800da9e:	463b      	mov	r3, r7
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800daa4:	1d3b      	adds	r3, r7, #4
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	463b      	mov	r3, r7
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	4413      	add	r3, r2
 800dab2:	881b      	ldrh	r3, [r3, #0]
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f000 816d 	beq.w	800dd9a <USB_EPStartXfer+0x406>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dac0:	1d3b      	adds	r3, r7, #4
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	633b      	str	r3, [r7, #48]	; 0x30
 800dac6:	463b      	mov	r3, r7
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	785b      	ldrb	r3, [r3, #1]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d16e      	bne.n	800dbae <USB_EPStartXfer+0x21a>
 800dad0:	1d3b      	adds	r3, r7, #4
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	62bb      	str	r3, [r7, #40]	; 0x28
 800dad6:	1d3b      	adds	r3, r7, #4
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dade:	b29b      	uxth	r3, r3
 800dae0:	461a      	mov	r2, r3
 800dae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae4:	4413      	add	r3, r2
 800dae6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dae8:	463b      	mov	r3, r7
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	011a      	lsls	r2, r3, #4
 800daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf2:	4413      	add	r3, r2
 800daf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800daf8:	627b      	str	r3, [r7, #36]	; 0x24
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	881b      	ldrh	r3, [r3, #0]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db04:	b29a      	uxth	r2, r3
 800db06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db08:	801a      	strh	r2, [r3, #0]
 800db0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db0e:	2b3e      	cmp	r3, #62	; 0x3e
 800db10:	d921      	bls.n	800db56 <USB_EPStartXfer+0x1c2>
 800db12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db16:	095b      	lsrs	r3, r3, #5
 800db18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800db1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db20:	f003 031f 	and.w	r3, r3, #31
 800db24:	2b00      	cmp	r3, #0
 800db26:	d104      	bne.n	800db32 <USB_EPStartXfer+0x19e>
 800db28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db2c:	3b01      	subs	r3, #1
 800db2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db34:	881b      	ldrh	r3, [r3, #0]
 800db36:	b29a      	uxth	r2, r3
 800db38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	029b      	lsls	r3, r3, #10
 800db40:	b29b      	uxth	r3, r3
 800db42:	4313      	orrs	r3, r2
 800db44:	b29b      	uxth	r3, r3
 800db46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db4e:	b29a      	uxth	r2, r3
 800db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db52:	801a      	strh	r2, [r3, #0]
 800db54:	e047      	b.n	800dbe6 <USB_EPStartXfer+0x252>
 800db56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10a      	bne.n	800db74 <USB_EPStartXfer+0x1e0>
 800db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db60:	881b      	ldrh	r3, [r3, #0]
 800db62:	b29b      	uxth	r3, r3
 800db64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db70:	801a      	strh	r2, [r3, #0]
 800db72:	e038      	b.n	800dbe6 <USB_EPStartXfer+0x252>
 800db74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db78:	085b      	lsrs	r3, r3, #1
 800db7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800db7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	2b00      	cmp	r3, #0
 800db88:	d004      	beq.n	800db94 <USB_EPStartXfer+0x200>
 800db8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db8e:	3301      	adds	r3, #1
 800db90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db96:	881b      	ldrh	r3, [r3, #0]
 800db98:	b29a      	uxth	r2, r3
 800db9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	029b      	lsls	r3, r3, #10
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	4313      	orrs	r3, r2
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	801a      	strh	r2, [r3, #0]
 800dbac:	e01b      	b.n	800dbe6 <USB_EPStartXfer+0x252>
 800dbae:	463b      	mov	r3, r7
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	785b      	ldrb	r3, [r3, #1]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d116      	bne.n	800dbe6 <USB_EPStartXfer+0x252>
 800dbb8:	1d3b      	adds	r3, r7, #4
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc6:	4413      	add	r3, r2
 800dbc8:	633b      	str	r3, [r7, #48]	; 0x30
 800dbca:	463b      	mov	r3, r7
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	011a      	lsls	r2, r3, #4
 800dbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd4:	4413      	add	r3, r2
 800dbd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dbda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbe0:	b29a      	uxth	r2, r3
 800dbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800dbe6:	463b      	mov	r3, r7
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	895b      	ldrh	r3, [r3, #10]
 800dbec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dbf0:	463b      	mov	r3, r7
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	6959      	ldr	r1, [r3, #20]
 800dbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dc00:	1d38      	adds	r0, r7, #4
 800dc02:	6800      	ldr	r0, [r0, #0]
 800dc04:	f001 f950 	bl	800eea8 <USB_WritePMA>
            ep->xfer_buff += len;
 800dc08:	463b      	mov	r3, r7
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	695a      	ldr	r2, [r3, #20]
 800dc0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc12:	441a      	add	r2, r3
 800dc14:	463b      	mov	r3, r7
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800dc1a:	463b      	mov	r3, r7
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	6a1a      	ldr	r2, [r3, #32]
 800dc20:	463b      	mov	r3, r7
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	691b      	ldr	r3, [r3, #16]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d909      	bls.n	800dc3e <USB_EPStartXfer+0x2aa>
            {
              ep->xfer_len_db -= len;
 800dc2a:	463b      	mov	r3, r7
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	6a1a      	ldr	r2, [r3, #32]
 800dc30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc34:	1ad2      	subs	r2, r2, r3
 800dc36:	463b      	mov	r3, r7
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	621a      	str	r2, [r3, #32]
 800dc3c:	e008      	b.n	800dc50 <USB_EPStartXfer+0x2bc>
            }
            else
            {
              len = ep->xfer_len_db;
 800dc3e:	463b      	mov	r3, r7
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6a1b      	ldr	r3, [r3, #32]
 800dc44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800dc48:	463b      	mov	r3, r7
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dc50:	463b      	mov	r3, r7
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	785b      	ldrb	r3, [r3, #1]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d16e      	bne.n	800dd38 <USB_EPStartXfer+0x3a4>
 800dc5a:	1d3b      	adds	r3, r7, #4
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	61bb      	str	r3, [r7, #24]
 800dc60:	1d3b      	adds	r3, r7, #4
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	4413      	add	r3, r2
 800dc70:	61bb      	str	r3, [r7, #24]
 800dc72:	463b      	mov	r3, r7
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	011a      	lsls	r2, r3, #4
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dc82:	617b      	str	r3, [r7, #20]
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	881b      	ldrh	r3, [r3, #0]
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	801a      	strh	r2, [r3, #0]
 800dc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc98:	2b3e      	cmp	r3, #62	; 0x3e
 800dc9a:	d921      	bls.n	800dce0 <USB_EPStartXfer+0x34c>
 800dc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dca0:	095b      	lsrs	r3, r3, #5
 800dca2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcaa:	f003 031f 	and.w	r3, r3, #31
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d104      	bne.n	800dcbc <USB_EPStartXfer+0x328>
 800dcb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	029b      	lsls	r3, r3, #10
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	4313      	orrs	r3, r2
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	801a      	strh	r2, [r3, #0]
 800dcde:	e04a      	b.n	800dd76 <USB_EPStartXfer+0x3e2>
 800dce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d10a      	bne.n	800dcfe <USB_EPStartXfer+0x36a>
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	881b      	ldrh	r3, [r3, #0]
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	801a      	strh	r2, [r3, #0]
 800dcfc:	e03b      	b.n	800dd76 <USB_EPStartXfer+0x3e2>
 800dcfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd02:	085b      	lsrs	r3, r3, #1
 800dd04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd0c:	f003 0301 	and.w	r3, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d004      	beq.n	800dd1e <USB_EPStartXfer+0x38a>
 800dd14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd18:	3301      	adds	r3, #1
 800dd1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	881b      	ldrh	r3, [r3, #0]
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	029b      	lsls	r3, r3, #10
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	801a      	strh	r2, [r3, #0]
 800dd36:	e01e      	b.n	800dd76 <USB_EPStartXfer+0x3e2>
 800dd38:	463b      	mov	r3, r7
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	785b      	ldrb	r3, [r3, #1]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d119      	bne.n	800dd76 <USB_EPStartXfer+0x3e2>
 800dd42:	1d3b      	adds	r3, r7, #4
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	623b      	str	r3, [r7, #32]
 800dd48:	1d3b      	adds	r3, r7, #4
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	461a      	mov	r2, r3
 800dd54:	6a3b      	ldr	r3, [r7, #32]
 800dd56:	4413      	add	r3, r2
 800dd58:	623b      	str	r3, [r7, #32]
 800dd5a:	463b      	mov	r3, r7
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	011a      	lsls	r2, r3, #4
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	4413      	add	r3, r2
 800dd66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dd6a:	61fb      	str	r3, [r7, #28]
 800dd6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd70:	b29a      	uxth	r2, r3
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800dd76:	463b      	mov	r3, r7
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	891b      	ldrh	r3, [r3, #8]
 800dd7c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd80:	463b      	mov	r3, r7
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6959      	ldr	r1, [r3, #20]
 800dd86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dd90:	1d38      	adds	r0, r7, #4
 800dd92:	6800      	ldr	r0, [r0, #0]
 800dd94:	f001 f888 	bl	800eea8 <USB_WritePMA>
 800dd98:	e325      	b.n	800e3e6 <USB_EPStartXfer+0xa52>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dd9a:	463b      	mov	r3, r7
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	785b      	ldrb	r3, [r3, #1]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d16e      	bne.n	800de82 <USB_EPStartXfer+0x4ee>
 800dda4:	1d3b      	adds	r3, r7, #4
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ddaa:	1d3b      	adds	r3, r7, #4
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddb8:	4413      	add	r3, r2
 800ddba:	64bb      	str	r3, [r7, #72]	; 0x48
 800ddbc:	463b      	mov	r3, r7
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	011a      	lsls	r2, r3, #4
 800ddc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddc6:	4413      	add	r3, r2
 800ddc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ddcc:	647b      	str	r3, [r7, #68]	; 0x44
 800ddce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dddc:	801a      	strh	r2, [r3, #0]
 800ddde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dde2:	2b3e      	cmp	r3, #62	; 0x3e
 800dde4:	d921      	bls.n	800de2a <USB_EPStartXfer+0x496>
 800dde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddea:	095b      	lsrs	r3, r3, #5
 800ddec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ddf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddf4:	f003 031f 	and.w	r3, r3, #31
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d104      	bne.n	800de06 <USB_EPStartXfer+0x472>
 800ddfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800de00:	3b01      	subs	r3, #1
 800de02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800de06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de08:	881b      	ldrh	r3, [r3, #0]
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800de10:	b29b      	uxth	r3, r3
 800de12:	029b      	lsls	r3, r3, #10
 800de14:	b29b      	uxth	r3, r3
 800de16:	4313      	orrs	r3, r2
 800de18:	b29b      	uxth	r3, r3
 800de1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de22:	b29a      	uxth	r2, r3
 800de24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de26:	801a      	strh	r2, [r3, #0]
 800de28:	e04a      	b.n	800dec0 <USB_EPStartXfer+0x52c>
 800de2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d10a      	bne.n	800de48 <USB_EPStartXfer+0x4b4>
 800de32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de34:	881b      	ldrh	r3, [r3, #0]
 800de36:	b29b      	uxth	r3, r3
 800de38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de40:	b29a      	uxth	r2, r3
 800de42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de44:	801a      	strh	r2, [r3, #0]
 800de46:	e03b      	b.n	800dec0 <USB_EPStartXfer+0x52c>
 800de48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de4c:	085b      	lsrs	r3, r3, #1
 800de4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800de52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de56:	f003 0301 	and.w	r3, r3, #1
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d004      	beq.n	800de68 <USB_EPStartXfer+0x4d4>
 800de5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800de62:	3301      	adds	r3, #1
 800de64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800de68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de6a:	881b      	ldrh	r3, [r3, #0]
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800de72:	b29b      	uxth	r3, r3
 800de74:	029b      	lsls	r3, r3, #10
 800de76:	b29b      	uxth	r3, r3
 800de78:	4313      	orrs	r3, r2
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de7e:	801a      	strh	r2, [r3, #0]
 800de80:	e01e      	b.n	800dec0 <USB_EPStartXfer+0x52c>
 800de82:	463b      	mov	r3, r7
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	785b      	ldrb	r3, [r3, #1]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d119      	bne.n	800dec0 <USB_EPStartXfer+0x52c>
 800de8c:	1d3b      	adds	r3, r7, #4
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	653b      	str	r3, [r7, #80]	; 0x50
 800de92:	1d3b      	adds	r3, r7, #4
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	461a      	mov	r2, r3
 800de9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dea0:	4413      	add	r3, r2
 800dea2:	653b      	str	r3, [r7, #80]	; 0x50
 800dea4:	463b      	mov	r3, r7
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	011a      	lsls	r2, r3, #4
 800deac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deae:	4413      	add	r3, r2
 800deb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800deb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800deb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deba:	b29a      	uxth	r2, r3
 800debc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800debe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800dec0:	463b      	mov	r3, r7
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	891b      	ldrh	r3, [r3, #8]
 800dec6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800deca:	463b      	mov	r3, r7
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	6959      	ldr	r1, [r3, #20]
 800ded0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800deda:	1d38      	adds	r0, r7, #4
 800dedc:	6800      	ldr	r0, [r0, #0]
 800dede:	f000 ffe3 	bl	800eea8 <USB_WritePMA>
            ep->xfer_buff += len;
 800dee2:	463b      	mov	r3, r7
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	695a      	ldr	r2, [r3, #20]
 800dee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deec:	441a      	add	r2, r3
 800deee:	463b      	mov	r3, r7
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800def4:	463b      	mov	r3, r7
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	6a1a      	ldr	r2, [r3, #32]
 800defa:	463b      	mov	r3, r7
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	429a      	cmp	r2, r3
 800df02:	d909      	bls.n	800df18 <USB_EPStartXfer+0x584>
            {
              ep->xfer_len_db -= len;
 800df04:	463b      	mov	r3, r7
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6a1a      	ldr	r2, [r3, #32]
 800df0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df0e:	1ad2      	subs	r2, r2, r3
 800df10:	463b      	mov	r3, r7
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	621a      	str	r2, [r3, #32]
 800df16:	e008      	b.n	800df2a <USB_EPStartXfer+0x596>
            }
            else
            {
              len = ep->xfer_len_db;
 800df18:	463b      	mov	r3, r7
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	6a1b      	ldr	r3, [r3, #32]
 800df1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800df22:	463b      	mov	r3, r7
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2200      	movs	r2, #0
 800df28:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800df2a:	1d3b      	adds	r3, r7, #4
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	643b      	str	r3, [r7, #64]	; 0x40
 800df30:	463b      	mov	r3, r7
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	785b      	ldrb	r3, [r3, #1]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d16e      	bne.n	800e018 <USB_EPStartXfer+0x684>
 800df3a:	1d3b      	adds	r3, r7, #4
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	63bb      	str	r3, [r7, #56]	; 0x38
 800df40:	1d3b      	adds	r3, r7, #4
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df48:	b29b      	uxth	r3, r3
 800df4a:	461a      	mov	r2, r3
 800df4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4e:	4413      	add	r3, r2
 800df50:	63bb      	str	r3, [r7, #56]	; 0x38
 800df52:	463b      	mov	r3, r7
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	011a      	lsls	r2, r3, #4
 800df5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5c:	4413      	add	r3, r2
 800df5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800df62:	637b      	str	r3, [r7, #52]	; 0x34
 800df64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df66:	881b      	ldrh	r3, [r3, #0]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df6e:	b29a      	uxth	r2, r3
 800df70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df72:	801a      	strh	r2, [r3, #0]
 800df74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df78:	2b3e      	cmp	r3, #62	; 0x3e
 800df7a:	d921      	bls.n	800dfc0 <USB_EPStartXfer+0x62c>
 800df7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df80:	095b      	lsrs	r3, r3, #5
 800df82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800df86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df8a:	f003 031f 	and.w	r3, r3, #31
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d104      	bne.n	800df9c <USB_EPStartXfer+0x608>
 800df92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df96:	3b01      	subs	r3, #1
 800df98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800df9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	029b      	lsls	r3, r3, #10
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	4313      	orrs	r3, r2
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfbc:	801a      	strh	r2, [r3, #0]
 800dfbe:	e047      	b.n	800e050 <USB_EPStartXfer+0x6bc>
 800dfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d10a      	bne.n	800dfde <USB_EPStartXfer+0x64a>
 800dfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfca:	881b      	ldrh	r3, [r3, #0]
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfda:	801a      	strh	r2, [r3, #0]
 800dfdc:	e038      	b.n	800e050 <USB_EPStartXfer+0x6bc>
 800dfde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfe2:	085b      	lsrs	r3, r3, #1
 800dfe4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfec:	f003 0301 	and.w	r3, r3, #1
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d004      	beq.n	800dffe <USB_EPStartXfer+0x66a>
 800dff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dff8:	3301      	adds	r3, #1
 800dffa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	b29a      	uxth	r2, r3
 800e004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e008:	b29b      	uxth	r3, r3
 800e00a:	029b      	lsls	r3, r3, #10
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	4313      	orrs	r3, r2
 800e010:	b29a      	uxth	r2, r3
 800e012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e014:	801a      	strh	r2, [r3, #0]
 800e016:	e01b      	b.n	800e050 <USB_EPStartXfer+0x6bc>
 800e018:	463b      	mov	r3, r7
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	785b      	ldrb	r3, [r3, #1]
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d116      	bne.n	800e050 <USB_EPStartXfer+0x6bc>
 800e022:	1d3b      	adds	r3, r7, #4
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	461a      	mov	r2, r3
 800e02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e030:	4413      	add	r3, r2
 800e032:	643b      	str	r3, [r7, #64]	; 0x40
 800e034:	463b      	mov	r3, r7
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	011a      	lsls	r2, r3, #4
 800e03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e03e:	4413      	add	r3, r2
 800e040:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e044:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e050:	463b      	mov	r3, r7
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	895b      	ldrh	r3, [r3, #10]
 800e056:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e05a:	463b      	mov	r3, r7
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	6959      	ldr	r1, [r3, #20]
 800e060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e064:	b29b      	uxth	r3, r3
 800e066:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e06a:	1d38      	adds	r0, r7, #4
 800e06c:	6800      	ldr	r0, [r0, #0]
 800e06e:	f000 ff1b 	bl	800eea8 <USB_WritePMA>
 800e072:	e1b8      	b.n	800e3e6 <USB_EPStartXfer+0xa52>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e074:	463b      	mov	r3, r7
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	6a1b      	ldr	r3, [r3, #32]
 800e07a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e07e:	1d3b      	adds	r3, r7, #4
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	463b      	mov	r3, r7
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	881b      	ldrh	r3, [r3, #0]
 800e08e:	b29b      	uxth	r3, r3
 800e090:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e098:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e09c:	1d3b      	adds	r3, r7, #4
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	463b      	mov	r3, r7
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	441a      	add	r2, r3
 800e0aa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e0ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e0c2:	1d3b      	adds	r3, r7, #4
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0c8:	1d3b      	adds	r3, r7, #4
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0d6:	4413      	add	r3, r2
 800e0d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0da:	463b      	mov	r3, r7
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	011a      	lsls	r2, r3, #4
 800e0e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0e4:	4413      	add	r3, r2
 800e0e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e0ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e0f6:	463b      	mov	r3, r7
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	891b      	ldrh	r3, [r3, #8]
 800e0fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e100:	463b      	mov	r3, r7
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6959      	ldr	r1, [r3, #20]
 800e106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e110:	1d38      	adds	r0, r7, #4
 800e112:	6800      	ldr	r0, [r0, #0]
 800e114:	f000 fec8 	bl	800eea8 <USB_WritePMA>
 800e118:	e165      	b.n	800e3e6 <USB_EPStartXfer+0xa52>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e11a:	463b      	mov	r3, r7
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	6a1a      	ldr	r2, [r3, #32]
 800e120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e124:	1ad2      	subs	r2, r2, r3
 800e126:	463b      	mov	r3, r7
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e12c:	1d3b      	adds	r3, r7, #4
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	463b      	mov	r3, r7
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	881b      	ldrh	r3, [r3, #0]
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e142:	2b00      	cmp	r3, #0
 800e144:	f000 80a5 	beq.w	800e292 <USB_EPStartXfer+0x8fe>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e148:	1d3b      	adds	r3, r7, #4
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	673b      	str	r3, [r7, #112]	; 0x70
 800e14e:	463b      	mov	r3, r7
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	785b      	ldrb	r3, [r3, #1]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d16e      	bne.n	800e236 <USB_EPStartXfer+0x8a2>
 800e158:	1d3b      	adds	r3, r7, #4
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e15e:	1d3b      	adds	r3, r7, #4
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e166:	b29b      	uxth	r3, r3
 800e168:	461a      	mov	r2, r3
 800e16a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e16c:	4413      	add	r3, r2
 800e16e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e170:	463b      	mov	r3, r7
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	011a      	lsls	r2, r3, #4
 800e178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e17a:	4413      	add	r3, r2
 800e17c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e180:	667b      	str	r3, [r7, #100]	; 0x64
 800e182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e184:	881b      	ldrh	r3, [r3, #0]
 800e186:	b29b      	uxth	r3, r3
 800e188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e190:	801a      	strh	r2, [r3, #0]
 800e192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e196:	2b3e      	cmp	r3, #62	; 0x3e
 800e198:	d921      	bls.n	800e1de <USB_EPStartXfer+0x84a>
 800e19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e19e:	095b      	lsrs	r3, r3, #5
 800e1a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1a8:	f003 031f 	and.w	r3, r3, #31
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d104      	bne.n	800e1ba <USB_EPStartXfer+0x826>
 800e1b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e1ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	029b      	lsls	r3, r3, #10
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1da:	801a      	strh	r2, [r3, #0]
 800e1dc:	e047      	b.n	800e26e <USB_EPStartXfer+0x8da>
 800e1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d10a      	bne.n	800e1fc <USB_EPStartXfer+0x868>
 800e1e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1f4:	b29a      	uxth	r2, r3
 800e1f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1f8:	801a      	strh	r2, [r3, #0]
 800e1fa:	e038      	b.n	800e26e <USB_EPStartXfer+0x8da>
 800e1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e200:	085b      	lsrs	r3, r3, #1
 800e202:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e20a:	f003 0301 	and.w	r3, r3, #1
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d004      	beq.n	800e21c <USB_EPStartXfer+0x888>
 800e212:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e216:	3301      	adds	r3, #1
 800e218:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e21c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	b29a      	uxth	r2, r3
 800e222:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e226:	b29b      	uxth	r3, r3
 800e228:	029b      	lsls	r3, r3, #10
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	4313      	orrs	r3, r2
 800e22e:	b29a      	uxth	r2, r3
 800e230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e232:	801a      	strh	r2, [r3, #0]
 800e234:	e01b      	b.n	800e26e <USB_EPStartXfer+0x8da>
 800e236:	463b      	mov	r3, r7
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	785b      	ldrb	r3, [r3, #1]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d116      	bne.n	800e26e <USB_EPStartXfer+0x8da>
 800e240:	1d3b      	adds	r3, r7, #4
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e248:	b29b      	uxth	r3, r3
 800e24a:	461a      	mov	r2, r3
 800e24c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e24e:	4413      	add	r3, r2
 800e250:	673b      	str	r3, [r7, #112]	; 0x70
 800e252:	463b      	mov	r3, r7
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	011a      	lsls	r2, r3, #4
 800e25a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e25c:	4413      	add	r3, r2
 800e25e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e262:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e268:	b29a      	uxth	r2, r3
 800e26a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e26c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e26e:	463b      	mov	r3, r7
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	895b      	ldrh	r3, [r3, #10]
 800e274:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e278:	463b      	mov	r3, r7
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	6959      	ldr	r1, [r3, #20]
 800e27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e282:	b29b      	uxth	r3, r3
 800e284:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e288:	1d38      	adds	r0, r7, #4
 800e28a:	6800      	ldr	r0, [r0, #0]
 800e28c:	f000 fe0c 	bl	800eea8 <USB_WritePMA>
 800e290:	e0a9      	b.n	800e3e6 <USB_EPStartXfer+0xa52>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e292:	463b      	mov	r3, r7
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	785b      	ldrb	r3, [r3, #1]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d16e      	bne.n	800e37a <USB_EPStartXfer+0x9e6>
 800e29c:	1d3b      	adds	r3, r7, #4
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e2a2:	1d3b      	adds	r3, r7, #4
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e2b0:	4413      	add	r3, r2
 800e2b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e2b4:	463b      	mov	r3, r7
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	011a      	lsls	r2, r3, #4
 800e2bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e2be:	4413      	add	r3, r2
 800e2c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e2c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800e2c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2d4:	801a      	strh	r2, [r3, #0]
 800e2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2da:	2b3e      	cmp	r3, #62	; 0x3e
 800e2dc:	d921      	bls.n	800e322 <USB_EPStartXfer+0x98e>
 800e2de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2e2:	095b      	lsrs	r3, r3, #5
 800e2e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2ec:	f003 031f 	and.w	r3, r3, #31
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d104      	bne.n	800e2fe <USB_EPStartXfer+0x96a>
 800e2f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e2fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e300:	881b      	ldrh	r3, [r3, #0]
 800e302:	b29a      	uxth	r2, r3
 800e304:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e308:	b29b      	uxth	r3, r3
 800e30a:	029b      	lsls	r3, r3, #10
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	4313      	orrs	r3, r2
 800e310:	b29b      	uxth	r3, r3
 800e312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e31a:	b29a      	uxth	r2, r3
 800e31c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e31e:	801a      	strh	r2, [r3, #0]
 800e320:	e050      	b.n	800e3c4 <USB_EPStartXfer+0xa30>
 800e322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e326:	2b00      	cmp	r3, #0
 800e328:	d10a      	bne.n	800e340 <USB_EPStartXfer+0x9ac>
 800e32a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e32c:	881b      	ldrh	r3, [r3, #0]
 800e32e:	b29b      	uxth	r3, r3
 800e330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e338:	b29a      	uxth	r2, r3
 800e33a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e33c:	801a      	strh	r2, [r3, #0]
 800e33e:	e041      	b.n	800e3c4 <USB_EPStartXfer+0xa30>
 800e340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e344:	085b      	lsrs	r3, r3, #1
 800e346:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e34e:	f003 0301 	and.w	r3, r3, #1
 800e352:	2b00      	cmp	r3, #0
 800e354:	d004      	beq.n	800e360 <USB_EPStartXfer+0x9cc>
 800e356:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e35a:	3301      	adds	r3, #1
 800e35c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e362:	881b      	ldrh	r3, [r3, #0]
 800e364:	b29a      	uxth	r2, r3
 800e366:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	029b      	lsls	r3, r3, #10
 800e36e:	b29b      	uxth	r3, r3
 800e370:	4313      	orrs	r3, r2
 800e372:	b29a      	uxth	r2, r3
 800e374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e376:	801a      	strh	r2, [r3, #0]
 800e378:	e024      	b.n	800e3c4 <USB_EPStartXfer+0xa30>
 800e37a:	463b      	mov	r3, r7
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	785b      	ldrb	r3, [r3, #1]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d11f      	bne.n	800e3c4 <USB_EPStartXfer+0xa30>
 800e384:	1d3b      	adds	r3, r7, #4
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e38c:	1d3b      	adds	r3, r7, #4
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e394:	b29b      	uxth	r3, r3
 800e396:	461a      	mov	r2, r3
 800e398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e39c:	4413      	add	r3, r2
 800e39e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e3a2:	463b      	mov	r3, r7
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	011a      	lsls	r2, r3, #4
 800e3aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3ae:	4413      	add	r3, r2
 800e3b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e3b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e3c4:	463b      	mov	r3, r7
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	891b      	ldrh	r3, [r3, #8]
 800e3ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e3ce:	463b      	mov	r3, r7
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	6959      	ldr	r1, [r3, #20]
 800e3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e3de:	1d38      	adds	r0, r7, #4
 800e3e0:	6800      	ldr	r0, [r0, #0]
 800e3e2:	f000 fd61 	bl	800eea8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e3e6:	1d3b      	adds	r3, r7, #4
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	463b      	mov	r3, r7
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4413      	add	r3, r2
 800e3f4:	881b      	ldrh	r3, [r3, #0]
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e3fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e400:	817b      	strh	r3, [r7, #10]
 800e402:	897b      	ldrh	r3, [r7, #10]
 800e404:	f083 0310 	eor.w	r3, r3, #16
 800e408:	817b      	strh	r3, [r7, #10]
 800e40a:	897b      	ldrh	r3, [r7, #10]
 800e40c:	f083 0320 	eor.w	r3, r3, #32
 800e410:	817b      	strh	r3, [r7, #10]
 800e412:	1d3b      	adds	r3, r7, #4
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	463b      	mov	r3, r7
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	441a      	add	r2, r3
 800e420:	897b      	ldrh	r3, [r7, #10]
 800e422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e42a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e432:	b29b      	uxth	r3, r3
 800e434:	8013      	strh	r3, [r2, #0]
 800e436:	e3f3      	b.n	800ec20 <USB_EPStartXfer+0x128c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e438:	463b      	mov	r3, r7
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	7b1b      	ldrb	r3, [r3, #12]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f040 809c 	bne.w	800e57c <USB_EPStartXfer+0xbe8>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e444:	463b      	mov	r3, r7
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	699a      	ldr	r2, [r3, #24]
 800e44a:	463b      	mov	r3, r7
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	691b      	ldr	r3, [r3, #16]
 800e450:	429a      	cmp	r2, r3
 800e452:	d90e      	bls.n	800e472 <USB_EPStartXfer+0xade>
      {
        len = ep->maxpacket;
 800e454:	463b      	mov	r3, r7
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	691b      	ldr	r3, [r3, #16]
 800e45a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800e45e:	463b      	mov	r3, r7
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	699a      	ldr	r2, [r3, #24]
 800e464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e468:	1ad2      	subs	r2, r2, r3
 800e46a:	463b      	mov	r3, r7
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	619a      	str	r2, [r3, #24]
 800e470:	e008      	b.n	800e484 <USB_EPStartXfer+0xaf0>
      }
      else
      {
        len = ep->xfer_len;
 800e472:	463b      	mov	r3, r7
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800e47c:	463b      	mov	r3, r7
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2200      	movs	r2, #0
 800e482:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e484:	1d3b      	adds	r3, r7, #4
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e48c:	1d3b      	adds	r3, r7, #4
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e494:	b29b      	uxth	r3, r3
 800e496:	461a      	mov	r2, r3
 800e498:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e49c:	4413      	add	r3, r2
 800e49e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e4a2:	463b      	mov	r3, r7
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	011a      	lsls	r2, r3, #4
 800e4aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e4ae:	4413      	add	r3, r2
 800e4b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e4b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e4b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4bc:	881b      	ldrh	r3, [r3, #0]
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4ca:	801a      	strh	r2, [r3, #0]
 800e4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4d0:	2b3e      	cmp	r3, #62	; 0x3e
 800e4d2:	d923      	bls.n	800e51c <USB_EPStartXfer+0xb88>
 800e4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4d8:	095b      	lsrs	r3, r3, #5
 800e4da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4e2:	f003 031f 	and.w	r3, r3, #31
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d104      	bne.n	800e4f4 <USB_EPStartXfer+0xb60>
 800e4ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e4ee:	3b01      	subs	r3, #1
 800e4f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e4f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4f8:	881b      	ldrh	r3, [r3, #0]
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e500:	b29b      	uxth	r3, r3
 800e502:	029b      	lsls	r3, r3, #10
 800e504:	b29b      	uxth	r3, r3
 800e506:	4313      	orrs	r3, r2
 800e508:	b29b      	uxth	r3, r3
 800e50a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e50e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e512:	b29a      	uxth	r2, r3
 800e514:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e518:	801a      	strh	r2, [r3, #0]
 800e51a:	e353      	b.n	800ebc4 <USB_EPStartXfer+0x1230>
 800e51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e520:	2b00      	cmp	r3, #0
 800e522:	d10c      	bne.n	800e53e <USB_EPStartXfer+0xbaa>
 800e524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e534:	b29a      	uxth	r2, r3
 800e536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e53a:	801a      	strh	r2, [r3, #0]
 800e53c:	e342      	b.n	800ebc4 <USB_EPStartXfer+0x1230>
 800e53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e542:	085b      	lsrs	r3, r3, #1
 800e544:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e54c:	f003 0301 	and.w	r3, r3, #1
 800e550:	2b00      	cmp	r3, #0
 800e552:	d004      	beq.n	800e55e <USB_EPStartXfer+0xbca>
 800e554:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e558:	3301      	adds	r3, #1
 800e55a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e55e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e562:	881b      	ldrh	r3, [r3, #0]
 800e564:	b29a      	uxth	r2, r3
 800e566:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	029b      	lsls	r3, r3, #10
 800e56e:	b29b      	uxth	r3, r3
 800e570:	4313      	orrs	r3, r2
 800e572:	b29a      	uxth	r2, r3
 800e574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e578:	801a      	strh	r2, [r3, #0]
 800e57a:	e323      	b.n	800ebc4 <USB_EPStartXfer+0x1230>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e57c:	463b      	mov	r3, r7
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	78db      	ldrb	r3, [r3, #3]
 800e582:	2b02      	cmp	r3, #2
 800e584:	f040 81a9 	bne.w	800e8da <USB_EPStartXfer+0xf46>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e588:	463b      	mov	r3, r7
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	785b      	ldrb	r3, [r3, #1]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	f040 8082 	bne.w	800e698 <USB_EPStartXfer+0xd04>
 800e594:	1d3b      	adds	r3, r7, #4
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e59c:	1d3b      	adds	r3, r7, #4
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5ac:	4413      	add	r3, r2
 800e5ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e5b2:	463b      	mov	r3, r7
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	011a      	lsls	r2, r3, #4
 800e5ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5be:	4413      	add	r3, r2
 800e5c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e5c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e5c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e5da:	801a      	strh	r2, [r3, #0]
 800e5dc:	463b      	mov	r3, r7
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	691b      	ldr	r3, [r3, #16]
 800e5e2:	2b3e      	cmp	r3, #62	; 0x3e
 800e5e4:	d925      	bls.n	800e632 <USB_EPStartXfer+0xc9e>
 800e5e6:	463b      	mov	r3, r7
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	691b      	ldr	r3, [r3, #16]
 800e5ec:	095b      	lsrs	r3, r3, #5
 800e5ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e5f2:	463b      	mov	r3, r7
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	f003 031f 	and.w	r3, r3, #31
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d104      	bne.n	800e60a <USB_EPStartXfer+0xc76>
 800e600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e604:	3b01      	subs	r3, #1
 800e606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e60a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e60e:	881b      	ldrh	r3, [r3, #0]
 800e610:	b29a      	uxth	r2, r3
 800e612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e616:	b29b      	uxth	r3, r3
 800e618:	029b      	lsls	r3, r3, #10
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	4313      	orrs	r3, r2
 800e61e:	b29b      	uxth	r3, r3
 800e620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e628:	b29a      	uxth	r2, r3
 800e62a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e62e:	801a      	strh	r2, [r3, #0]
 800e630:	e058      	b.n	800e6e4 <USB_EPStartXfer+0xd50>
 800e632:	463b      	mov	r3, r7
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	691b      	ldr	r3, [r3, #16]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10c      	bne.n	800e656 <USB_EPStartXfer+0xcc2>
 800e63c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e640:	881b      	ldrh	r3, [r3, #0]
 800e642:	b29b      	uxth	r3, r3
 800e644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e64c:	b29a      	uxth	r2, r3
 800e64e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e652:	801a      	strh	r2, [r3, #0]
 800e654:	e046      	b.n	800e6e4 <USB_EPStartXfer+0xd50>
 800e656:	463b      	mov	r3, r7
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	691b      	ldr	r3, [r3, #16]
 800e65c:	085b      	lsrs	r3, r3, #1
 800e65e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e662:	463b      	mov	r3, r7
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	f003 0301 	and.w	r3, r3, #1
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d004      	beq.n	800e67a <USB_EPStartXfer+0xce6>
 800e670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e674:	3301      	adds	r3, #1
 800e676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e67a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e67e:	881b      	ldrh	r3, [r3, #0]
 800e680:	b29a      	uxth	r2, r3
 800e682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e686:	b29b      	uxth	r3, r3
 800e688:	029b      	lsls	r3, r3, #10
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	4313      	orrs	r3, r2
 800e68e:	b29a      	uxth	r2, r3
 800e690:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e694:	801a      	strh	r2, [r3, #0]
 800e696:	e025      	b.n	800e6e4 <USB_EPStartXfer+0xd50>
 800e698:	463b      	mov	r3, r7
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	785b      	ldrb	r3, [r3, #1]
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d120      	bne.n	800e6e4 <USB_EPStartXfer+0xd50>
 800e6a2:	1d3b      	adds	r3, r7, #4
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e6aa:	1d3b      	adds	r3, r7, #4
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6ba:	4413      	add	r3, r2
 800e6bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e6c0:	463b      	mov	r3, r7
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	011a      	lsls	r2, r3, #4
 800e6c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e6cc:	4413      	add	r3, r2
 800e6ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e6d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e6d6:	463b      	mov	r3, r7
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e6e2:	801a      	strh	r2, [r3, #0]
 800e6e4:	1d3b      	adds	r3, r7, #4
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e6ec:	463b      	mov	r3, r7
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	785b      	ldrb	r3, [r3, #1]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f040 8082 	bne.w	800e7fc <USB_EPStartXfer+0xe68>
 800e6f8:	1d3b      	adds	r3, r7, #4
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e700:	1d3b      	adds	r3, r7, #4
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e708:	b29b      	uxth	r3, r3
 800e70a:	461a      	mov	r2, r3
 800e70c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e710:	4413      	add	r3, r2
 800e712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e716:	463b      	mov	r3, r7
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	011a      	lsls	r2, r3, #4
 800e71e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e722:	4413      	add	r3, r2
 800e724:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e72c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e730:	881b      	ldrh	r3, [r3, #0]
 800e732:	b29b      	uxth	r3, r3
 800e734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e738:	b29a      	uxth	r2, r3
 800e73a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e73e:	801a      	strh	r2, [r3, #0]
 800e740:	463b      	mov	r3, r7
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	691b      	ldr	r3, [r3, #16]
 800e746:	2b3e      	cmp	r3, #62	; 0x3e
 800e748:	d925      	bls.n	800e796 <USB_EPStartXfer+0xe02>
 800e74a:	463b      	mov	r3, r7
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	691b      	ldr	r3, [r3, #16]
 800e750:	095b      	lsrs	r3, r3, #5
 800e752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e756:	463b      	mov	r3, r7
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	691b      	ldr	r3, [r3, #16]
 800e75c:	f003 031f 	and.w	r3, r3, #31
 800e760:	2b00      	cmp	r3, #0
 800e762:	d104      	bne.n	800e76e <USB_EPStartXfer+0xdda>
 800e764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e768:	3b01      	subs	r3, #1
 800e76a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e76e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e772:	881b      	ldrh	r3, [r3, #0]
 800e774:	b29a      	uxth	r2, r3
 800e776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	029b      	lsls	r3, r3, #10
 800e77e:	b29b      	uxth	r3, r3
 800e780:	4313      	orrs	r3, r2
 800e782:	b29b      	uxth	r3, r3
 800e784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e792:	801a      	strh	r2, [r3, #0]
 800e794:	e054      	b.n	800e840 <USB_EPStartXfer+0xeac>
 800e796:	463b      	mov	r3, r7
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	691b      	ldr	r3, [r3, #16]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10c      	bne.n	800e7ba <USB_EPStartXfer+0xe26>
 800e7a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e7a4:	881b      	ldrh	r3, [r3, #0]
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e7b6:	801a      	strh	r2, [r3, #0]
 800e7b8:	e042      	b.n	800e840 <USB_EPStartXfer+0xeac>
 800e7ba:	463b      	mov	r3, r7
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	691b      	ldr	r3, [r3, #16]
 800e7c0:	085b      	lsrs	r3, r3, #1
 800e7c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e7c6:	463b      	mov	r3, r7
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	691b      	ldr	r3, [r3, #16]
 800e7cc:	f003 0301 	and.w	r3, r3, #1
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d004      	beq.n	800e7de <USB_EPStartXfer+0xe4a>
 800e7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7d8:	3301      	adds	r3, #1
 800e7da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e7de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e7e2:	881b      	ldrh	r3, [r3, #0]
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	029b      	lsls	r3, r3, #10
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e7f8:	801a      	strh	r2, [r3, #0]
 800e7fa:	e021      	b.n	800e840 <USB_EPStartXfer+0xeac>
 800e7fc:	463b      	mov	r3, r7
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	785b      	ldrb	r3, [r3, #1]
 800e802:	2b01      	cmp	r3, #1
 800e804:	d11c      	bne.n	800e840 <USB_EPStartXfer+0xeac>
 800e806:	1d3b      	adds	r3, r7, #4
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e80e:	b29b      	uxth	r3, r3
 800e810:	461a      	mov	r2, r3
 800e812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e816:	4413      	add	r3, r2
 800e818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e81c:	463b      	mov	r3, r7
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	011a      	lsls	r2, r3, #4
 800e824:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e828:	4413      	add	r3, r2
 800e82a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e82e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e832:	463b      	mov	r3, r7
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	691b      	ldr	r3, [r3, #16]
 800e838:	b29a      	uxth	r2, r3
 800e83a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e83e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e840:	463b      	mov	r3, r7
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	69db      	ldr	r3, [r3, #28]
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 81bc 	beq.w	800ebc4 <USB_EPStartXfer+0x1230>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e84c:	1d3b      	adds	r3, r7, #4
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	463b      	mov	r3, r7
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	881b      	ldrh	r3, [r3, #0]
 800e85c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e860:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d005      	beq.n	800e878 <USB_EPStartXfer+0xee4>
 800e86c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e874:	2b00      	cmp	r3, #0
 800e876:	d10d      	bne.n	800e894 <USB_EPStartXfer+0xf00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e878:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e87c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e880:	2b00      	cmp	r3, #0
 800e882:	f040 819f 	bne.w	800ebc4 <USB_EPStartXfer+0x1230>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e886:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e88e:	2b00      	cmp	r3, #0
 800e890:	f040 8198 	bne.w	800ebc4 <USB_EPStartXfer+0x1230>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e894:	1d3b      	adds	r3, r7, #4
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	463b      	mov	r3, r7
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	881b      	ldrh	r3, [r3, #0]
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e8aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8ae:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800e8b2:	1d3b      	adds	r3, r7, #4
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	463b      	mov	r3, r7
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	009b      	lsls	r3, r3, #2
 800e8be:	441a      	add	r2, r3
 800e8c0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e8c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	8013      	strh	r3, [r2, #0]
 800e8d8:	e174      	b.n	800ebc4 <USB_EPStartXfer+0x1230>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e8da:	463b      	mov	r3, r7
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	78db      	ldrb	r3, [r3, #3]
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	f040 816d 	bne.w	800ebc0 <USB_EPStartXfer+0x122c>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e8e6:	463b      	mov	r3, r7
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	699a      	ldr	r2, [r3, #24]
 800e8ec:	463b      	mov	r3, r7
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	691b      	ldr	r3, [r3, #16]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d90e      	bls.n	800e914 <USB_EPStartXfer+0xf80>
        {
          len = ep->maxpacket;
 800e8f6:	463b      	mov	r3, r7
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	691b      	ldr	r3, [r3, #16]
 800e8fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800e900:	463b      	mov	r3, r7
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	699a      	ldr	r2, [r3, #24]
 800e906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e90a:	1ad2      	subs	r2, r2, r3
 800e90c:	463b      	mov	r3, r7
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	619a      	str	r2, [r3, #24]
 800e912:	e008      	b.n	800e926 <USB_EPStartXfer+0xf92>
        }
        else
        {
          len = ep->xfer_len;
 800e914:	463b      	mov	r3, r7
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	699b      	ldr	r3, [r3, #24]
 800e91a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800e91e:	463b      	mov	r3, r7
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2200      	movs	r2, #0
 800e924:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e926:	463b      	mov	r3, r7
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	785b      	ldrb	r3, [r3, #1]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d17b      	bne.n	800ea28 <USB_EPStartXfer+0x1094>
 800e930:	1d3b      	adds	r3, r7, #4
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e938:	1d3b      	adds	r3, r7, #4
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e940:	b29b      	uxth	r3, r3
 800e942:	461a      	mov	r2, r3
 800e944:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e948:	4413      	add	r3, r2
 800e94a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e94e:	463b      	mov	r3, r7
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	011a      	lsls	r2, r3, #4
 800e956:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e95a:	4413      	add	r3, r2
 800e95c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e964:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e968:	881b      	ldrh	r3, [r3, #0]
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e970:	b29a      	uxth	r2, r3
 800e972:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e976:	801a      	strh	r2, [r3, #0]
 800e978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e97c:	2b3e      	cmp	r3, #62	; 0x3e
 800e97e:	d923      	bls.n	800e9c8 <USB_EPStartXfer+0x1034>
 800e980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e984:	095b      	lsrs	r3, r3, #5
 800e986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e98e:	f003 031f 	and.w	r3, r3, #31
 800e992:	2b00      	cmp	r3, #0
 800e994:	d104      	bne.n	800e9a0 <USB_EPStartXfer+0x100c>
 800e996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e99a:	3b01      	subs	r3, #1
 800e99c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e9a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	b29a      	uxth	r2, r3
 800e9a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	029b      	lsls	r3, r3, #10
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e9c4:	801a      	strh	r2, [r3, #0]
 800e9c6:	e054      	b.n	800ea72 <USB_EPStartXfer+0x10de>
 800e9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d10c      	bne.n	800e9ea <USB_EPStartXfer+0x1056>
 800e9d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e9d4:	881b      	ldrh	r3, [r3, #0]
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e9e6:	801a      	strh	r2, [r3, #0]
 800e9e8:	e043      	b.n	800ea72 <USB_EPStartXfer+0x10de>
 800e9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9ee:	085b      	lsrs	r3, r3, #1
 800e9f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9f8:	f003 0301 	and.w	r3, r3, #1
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d004      	beq.n	800ea0a <USB_EPStartXfer+0x1076>
 800ea00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea04:	3301      	adds	r3, #1
 800ea06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ea0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea0e:	881b      	ldrh	r3, [r3, #0]
 800ea10:	b29a      	uxth	r2, r3
 800ea12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	029b      	lsls	r3, r3, #10
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	b29a      	uxth	r2, r3
 800ea20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea24:	801a      	strh	r2, [r3, #0]
 800ea26:	e024      	b.n	800ea72 <USB_EPStartXfer+0x10de>
 800ea28:	463b      	mov	r3, r7
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	785b      	ldrb	r3, [r3, #1]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d11f      	bne.n	800ea72 <USB_EPStartXfer+0x10de>
 800ea32:	1d3b      	adds	r3, r7, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ea3a:	1d3b      	adds	r3, r7, #4
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	461a      	mov	r2, r3
 800ea46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea4a:	4413      	add	r3, r2
 800ea4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ea50:	463b      	mov	r3, r7
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	011a      	lsls	r2, r3, #4
 800ea58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea5c:	4413      	add	r3, r2
 800ea5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ea62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ea66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ea70:	801a      	strh	r2, [r3, #0]
 800ea72:	1d3b      	adds	r3, r7, #4
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ea7a:	463b      	mov	r3, r7
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	785b      	ldrb	r3, [r3, #1]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d17b      	bne.n	800eb7c <USB_EPStartXfer+0x11e8>
 800ea84:	1d3b      	adds	r3, r7, #4
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ea8c:	1d3b      	adds	r3, r7, #4
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	461a      	mov	r2, r3
 800ea98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ea9c:	4413      	add	r3, r2
 800ea9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800eaa2:	463b      	mov	r3, r7
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	011a      	lsls	r2, r3, #4
 800eaaa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800eaae:	4413      	add	r3, r2
 800eab0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800eab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800eab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eaca:	801a      	strh	r2, [r3, #0]
 800eacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ead0:	2b3e      	cmp	r3, #62	; 0x3e
 800ead2:	d923      	bls.n	800eb1c <USB_EPStartXfer+0x1188>
 800ead4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ead8:	095b      	lsrs	r3, r3, #5
 800eada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eae2:	f003 031f 	and.w	r3, r3, #31
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d104      	bne.n	800eaf4 <USB_EPStartXfer+0x1160>
 800eaea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eaf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eaf8:	881b      	ldrh	r3, [r3, #0]
 800eafa:	b29a      	uxth	r2, r3
 800eafc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	029b      	lsls	r3, r3, #10
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	4313      	orrs	r3, r2
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eb18:	801a      	strh	r2, [r3, #0]
 800eb1a:	e053      	b.n	800ebc4 <USB_EPStartXfer+0x1230>
 800eb1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10c      	bne.n	800eb3e <USB_EPStartXfer+0x11aa>
 800eb24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eb28:	881b      	ldrh	r3, [r3, #0]
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb34:	b29a      	uxth	r2, r3
 800eb36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eb3a:	801a      	strh	r2, [r3, #0]
 800eb3c:	e042      	b.n	800ebc4 <USB_EPStartXfer+0x1230>
 800eb3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb42:	085b      	lsrs	r3, r3, #1
 800eb44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb4c:	f003 0301 	and.w	r3, r3, #1
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d004      	beq.n	800eb5e <USB_EPStartXfer+0x11ca>
 800eb54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eb58:	3301      	adds	r3, #1
 800eb5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eb5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eb62:	881b      	ldrh	r3, [r3, #0]
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	029b      	lsls	r3, r3, #10
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	4313      	orrs	r3, r2
 800eb72:	b29a      	uxth	r2, r3
 800eb74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eb78:	801a      	strh	r2, [r3, #0]
 800eb7a:	e023      	b.n	800ebc4 <USB_EPStartXfer+0x1230>
 800eb7c:	463b      	mov	r3, r7
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	785b      	ldrb	r3, [r3, #1]
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d11e      	bne.n	800ebc4 <USB_EPStartXfer+0x1230>
 800eb86:	1d3b      	adds	r3, r7, #4
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	461a      	mov	r2, r3
 800eb92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800eb96:	4413      	add	r3, r2
 800eb98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800eb9c:	463b      	mov	r3, r7
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	011a      	lsls	r2, r3, #4
 800eba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800eba8:	4413      	add	r3, r2
 800ebaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ebae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ebb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ebbc:	801a      	strh	r2, [r3, #0]
 800ebbe:	e001      	b.n	800ebc4 <USB_EPStartXfer+0x1230>
      }
      else
      {
        return HAL_ERROR;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	e02e      	b.n	800ec22 <USB_EPStartXfer+0x128e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ebc4:	1d3b      	adds	r3, r7, #4
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	463b      	mov	r3, r7
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	009b      	lsls	r3, r3, #2
 800ebd0:	4413      	add	r3, r2
 800ebd2:	881b      	ldrh	r3, [r3, #0]
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ebda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebde:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ebe2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ebe6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ebea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ebee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ebf2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ebf6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ebfa:	1d3b      	adds	r3, r7, #4
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	463b      	mov	r3, r7
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	441a      	add	r2, r3
 800ec08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ec0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ec20:	2300      	movs	r3, #0
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	785b      	ldrb	r3, [r3, #1]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d020      	beq.n	800ec80 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	4413      	add	r3, r2
 800ec48:	881b      	ldrh	r3, [r3, #0]
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec54:	81bb      	strh	r3, [r7, #12]
 800ec56:	89bb      	ldrh	r3, [r7, #12]
 800ec58:	f083 0310 	eor.w	r3, r3, #16
 800ec5c:	81bb      	strh	r3, [r7, #12]
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	781b      	ldrb	r3, [r3, #0]
 800ec64:	009b      	lsls	r3, r3, #2
 800ec66:	441a      	add	r2, r3
 800ec68:	89bb      	ldrh	r3, [r7, #12]
 800ec6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	8013      	strh	r3, [r2, #0]
 800ec7e:	e01f      	b.n	800ecc0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	009b      	lsls	r3, r3, #2
 800ec88:	4413      	add	r3, r2
 800ec8a:	881b      	ldrh	r3, [r3, #0]
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec96:	81fb      	strh	r3, [r7, #14]
 800ec98:	89fb      	ldrh	r3, [r7, #14]
 800ec9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ec9e:	81fb      	strh	r3, [r7, #14]
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	009b      	lsls	r3, r3, #2
 800eca8:	441a      	add	r2, r3
 800ecaa:	89fb      	ldrh	r3, [r7, #14]
 800ecac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ecb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ecb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ecc0:	2300      	movs	r3, #0
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3714      	adds	r7, #20
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bc80      	pop	{r7}
 800ecca:	4770      	bx	lr

0800eccc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b087      	sub	sp, #28
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	7b1b      	ldrb	r3, [r3, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f040 809d 	bne.w	800ee1a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	785b      	ldrb	r3, [r3, #1]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d04c      	beq.n	800ed82 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	4413      	add	r3, r2
 800ecf2:	881b      	ldrh	r3, [r3, #0]
 800ecf4:	823b      	strh	r3, [r7, #16]
 800ecf6:	8a3b      	ldrh	r3, [r7, #16]
 800ecf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d01b      	beq.n	800ed38 <USB_EPClearStall+0x6c>
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	4413      	add	r3, r2
 800ed0a:	881b      	ldrh	r3, [r3, #0]
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed16:	81fb      	strh	r3, [r7, #14]
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	441a      	add	r2, r3
 800ed22:	89fb      	ldrh	r3, [r7, #14]
 800ed24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	78db      	ldrb	r3, [r3, #3]
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d06c      	beq.n	800ee1a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	4413      	add	r3, r2
 800ed4a:	881b      	ldrh	r3, [r3, #0]
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed56:	81bb      	strh	r3, [r7, #12]
 800ed58:	89bb      	ldrh	r3, [r7, #12]
 800ed5a:	f083 0320 	eor.w	r3, r3, #32
 800ed5e:	81bb      	strh	r3, [r7, #12]
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	441a      	add	r2, r3
 800ed6a:	89bb      	ldrh	r3, [r7, #12]
 800ed6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	8013      	strh	r3, [r2, #0]
 800ed80:	e04b      	b.n	800ee1a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4413      	add	r3, r2
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	82fb      	strh	r3, [r7, #22]
 800ed90:	8afb      	ldrh	r3, [r7, #22]
 800ed92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d01b      	beq.n	800edd2 <USB_EPClearStall+0x106>
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	4413      	add	r3, r2
 800eda4:	881b      	ldrh	r3, [r3, #0]
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800edac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800edb0:	82bb      	strh	r3, [r7, #20]
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	441a      	add	r2, r3
 800edbc:	8abb      	ldrh	r3, [r7, #20]
 800edbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800edca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edce:	b29b      	uxth	r3, r3
 800edd0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	4413      	add	r3, r2
 800eddc:	881b      	ldrh	r3, [r3, #0]
 800edde:	b29b      	uxth	r3, r3
 800ede0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ede4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ede8:	827b      	strh	r3, [r7, #18]
 800edea:	8a7b      	ldrh	r3, [r7, #18]
 800edec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800edf0:	827b      	strh	r3, [r7, #18]
 800edf2:	8a7b      	ldrh	r3, [r7, #18]
 800edf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800edf8:	827b      	strh	r3, [r7, #18]
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	009b      	lsls	r3, r3, #2
 800ee02:	441a      	add	r2, r3
 800ee04:	8a7b      	ldrh	r3, [r7, #18]
 800ee06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ee1a:	2300      	movs	r3, #0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	371c      	adds	r7, #28
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bc80      	pop	{r7}
 800ee24:	4770      	bx	lr

0800ee26 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ee26:	b480      	push	{r7}
 800ee28:	b083      	sub	sp, #12
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
 800ee2e:	460b      	mov	r3, r1
 800ee30:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ee32:	78fb      	ldrb	r3, [r7, #3]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d103      	bne.n	800ee40 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2280      	movs	r2, #128	; 0x80
 800ee3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	370c      	adds	r7, #12
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bc80      	pop	{r7}
 800ee4a:	4770      	bx	lr

0800ee4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bc80      	pop	{r7}
 800ee5e:	4770      	bx	lr

0800ee60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	370c      	adds	r7, #12
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bc80      	pop	{r7}
 800ee72:	4770      	bx	lr

0800ee74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ee86:	68fb      	ldr	r3, [r7, #12]
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3714      	adds	r7, #20
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bc80      	pop	{r7}
 800ee90:	4770      	bx	lr

0800ee92 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ee92:	b480      	push	{r7}
 800ee94:	b083      	sub	sp, #12
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
 800ee9a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ee9c:	2300      	movs	r3, #0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	370c      	adds	r7, #12
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bc80      	pop	{r7}
 800eea6:	4770      	bx	lr

0800eea8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b08b      	sub	sp, #44	; 0x2c
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	4611      	mov	r1, r2
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	460b      	mov	r3, r1
 800eeb8:	80fb      	strh	r3, [r7, #6]
 800eeba:	4613      	mov	r3, r2
 800eebc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800eebe:	88bb      	ldrh	r3, [r7, #4]
 800eec0:	3301      	adds	r3, #1
 800eec2:	085b      	lsrs	r3, r3, #1
 800eec4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800eece:	88fb      	ldrh	r3, [r7, #6]
 800eed0:	005a      	lsls	r2, r3, #1
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	4413      	add	r3, r2
 800eed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eeda:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800eedc:	69bb      	ldr	r3, [r7, #24]
 800eede:	627b      	str	r3, [r7, #36]	; 0x24
 800eee0:	e01e      	b.n	800ef20 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800eee2:	69fb      	ldr	r3, [r7, #28]
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	3301      	adds	r3, #1
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	021b      	lsls	r3, r3, #8
 800eef0:	b21a      	sxth	r2, r3
 800eef2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eef6:	4313      	orrs	r3, r2
 800eef8:	b21b      	sxth	r3, r3
 800eefa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800eefc:	6a3b      	ldr	r3, [r7, #32]
 800eefe:	8a7a      	ldrh	r2, [r7, #18]
 800ef00:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ef02:	6a3b      	ldr	r3, [r7, #32]
 800ef04:	3302      	adds	r3, #2
 800ef06:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ef08:	6a3b      	ldr	r3, [r7, #32]
 800ef0a:	3302      	adds	r3, #2
 800ef0c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800ef0e:	69fb      	ldr	r3, [r7, #28]
 800ef10:	3301      	adds	r3, #1
 800ef12:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ef14:	69fb      	ldr	r3, [r7, #28]
 800ef16:	3301      	adds	r3, #1
 800ef18:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ef1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1dd      	bne.n	800eee2 <USB_WritePMA+0x3a>
  }
}
 800ef26:	bf00      	nop
 800ef28:	bf00      	nop
 800ef2a:	372c      	adds	r7, #44	; 0x2c
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bc80      	pop	{r7}
 800ef30:	4770      	bx	lr

0800ef32 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ef32:	b480      	push	{r7}
 800ef34:	b08b      	sub	sp, #44	; 0x2c
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	60f8      	str	r0, [r7, #12]
 800ef3a:	60b9      	str	r1, [r7, #8]
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	461a      	mov	r2, r3
 800ef40:	460b      	mov	r3, r1
 800ef42:	80fb      	strh	r3, [r7, #6]
 800ef44:	4613      	mov	r3, r2
 800ef46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ef48:	88bb      	ldrh	r3, [r7, #4]
 800ef4a:	085b      	lsrs	r3, r3, #1
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ef58:	88fb      	ldrh	r3, [r7, #6]
 800ef5a:	005a      	lsls	r2, r3, #1
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	4413      	add	r3, r2
 800ef60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef64:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	627b      	str	r3, [r7, #36]	; 0x24
 800ef6a:	e01b      	b.n	800efa4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ef6c:	6a3b      	ldr	r3, [r7, #32]
 800ef6e:	881b      	ldrh	r3, [r3, #0]
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ef74:	6a3b      	ldr	r3, [r7, #32]
 800ef76:	3302      	adds	r3, #2
 800ef78:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	3301      	adds	r3, #1
 800ef86:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	0a1b      	lsrs	r3, r3, #8
 800ef8c:	b2da      	uxtb	r2, r3
 800ef8e:	69fb      	ldr	r3, [r7, #28]
 800ef90:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	3301      	adds	r3, #1
 800ef96:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ef98:	6a3b      	ldr	r3, [r7, #32]
 800ef9a:	3302      	adds	r3, #2
 800ef9c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800ef9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa0:	3b01      	subs	r3, #1
 800efa2:	627b      	str	r3, [r7, #36]	; 0x24
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d1e0      	bne.n	800ef6c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800efaa:	88bb      	ldrh	r3, [r7, #4]
 800efac:	f003 0301 	and.w	r3, r3, #1
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d007      	beq.n	800efc6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800efb6:	6a3b      	ldr	r3, [r7, #32]
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	b29b      	uxth	r3, r3
 800efbc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	b2da      	uxtb	r2, r3
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	701a      	strb	r2, [r3, #0]
  }
}
 800efc6:	bf00      	nop
 800efc8:	372c      	adds	r7, #44	; 0x2c
 800efca:	46bd      	mov	sp, r7
 800efcc:	bc80      	pop	{r7}
 800efce:	4770      	bx	lr

0800efd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	460b      	mov	r3, r1
 800efda:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800efdc:	2300      	movs	r3, #0
 800efde:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	7c1b      	ldrb	r3, [r3, #16]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d115      	bne.n	800f014 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800efe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800efec:	2202      	movs	r2, #2
 800efee:	2181      	movs	r1, #129	; 0x81
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f001 fe30 	bl	8010c56 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2201      	movs	r2, #1
 800effa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800effc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f000:	2202      	movs	r2, #2
 800f002:	2101      	movs	r1, #1
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f001 fe26 	bl	8010c56 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2201      	movs	r2, #1
 800f00e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800f012:	e012      	b.n	800f03a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f014:	2340      	movs	r3, #64	; 0x40
 800f016:	2202      	movs	r2, #2
 800f018:	2181      	movs	r1, #129	; 0x81
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f001 fe1b 	bl	8010c56 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f026:	2340      	movs	r3, #64	; 0x40
 800f028:	2202      	movs	r2, #2
 800f02a:	2101      	movs	r1, #1
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f001 fe12 	bl	8010c56 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2201      	movs	r2, #1
 800f036:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f03a:	2308      	movs	r3, #8
 800f03c:	2203      	movs	r2, #3
 800f03e:	2182      	movs	r1, #130	; 0x82
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f001 fe08 	bl	8010c56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2201      	movs	r2, #1
 800f04a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f04c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f050:	f001 ff28 	bl	8010ea4 <USBD_static_malloc>
 800f054:	4602      	mov	r2, r0
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f062:	2b00      	cmp	r3, #0
 800f064:	d102      	bne.n	800f06c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800f066:	2301      	movs	r3, #1
 800f068:	73fb      	strb	r3, [r7, #15]
 800f06a:	e026      	b.n	800f0ba <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f072:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	2200      	movs	r2, #0
 800f082:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	2200      	movs	r2, #0
 800f08a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	7c1b      	ldrb	r3, [r3, #16]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d109      	bne.n	800f0aa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f09c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0a0:	2101      	movs	r1, #1
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f001 fec8 	bl	8010e38 <USBD_LL_PrepareReceive>
 800f0a8:	e007      	b.n	800f0ba <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f0b0:	2340      	movs	r3, #64	; 0x40
 800f0b2:	2101      	movs	r1, #1
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f001 febf 	bl	8010e38 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800f0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f0d4:	2181      	movs	r1, #129	; 0x81
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f001 fde3 	bl	8010ca2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f0e2:	2101      	movs	r1, #1
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f001 fddc 	bl	8010ca2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f0f2:	2182      	movs	r1, #130	; 0x82
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f001 fdd4 	bl	8010ca2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00e      	beq.n	800f128 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f11a:	4618      	mov	r0, r3
 800f11c:	f001 fece 	bl	8010ebc <USBD_static_free>
    pdev->pClassData = NULL;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800f128:	7bfb      	ldrb	r3, [r7, #15]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3710      	adds	r7, #16
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}

0800f132 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f132:	b580      	push	{r7, lr}
 800f134:	b086      	sub	sp, #24
 800f136:	af00      	add	r7, sp, #0
 800f138:	6078      	str	r0, [r7, #4]
 800f13a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f142:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800f144:	2300      	movs	r3, #0
 800f146:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800f148:	2300      	movs	r3, #0
 800f14a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d039      	beq.n	800f1d0 <USBD_CDC_Setup+0x9e>
 800f15c:	2b20      	cmp	r3, #32
 800f15e:	d17f      	bne.n	800f260 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	88db      	ldrh	r3, [r3, #6]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d029      	beq.n	800f1bc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	b25b      	sxtb	r3, r3
 800f16e:	2b00      	cmp	r3, #0
 800f170:	da11      	bge.n	800f196 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800f17e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f180:	683a      	ldr	r2, [r7, #0]
 800f182:	88d2      	ldrh	r2, [r2, #6]
 800f184:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f186:	6939      	ldr	r1, [r7, #16]
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	88db      	ldrh	r3, [r3, #6]
 800f18c:	461a      	mov	r2, r3
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f001 f9d9 	bl	8010546 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800f194:	e06b      	b.n	800f26e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	785a      	ldrb	r2, [r3, #1]
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	88db      	ldrh	r3, [r3, #6]
 800f1a4:	b2da      	uxtb	r2, r3
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800f1ac:	6939      	ldr	r1, [r7, #16]
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	88db      	ldrh	r3, [r3, #6]
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f001 f9f4 	bl	80105a2 <USBD_CtlPrepareRx>
      break;
 800f1ba:	e058      	b.n	800f26e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	683a      	ldr	r2, [r7, #0]
 800f1c6:	7850      	ldrb	r0, [r2, #1]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	6839      	ldr	r1, [r7, #0]
 800f1cc:	4798      	blx	r3
      break;
 800f1ce:	e04e      	b.n	800f26e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	785b      	ldrb	r3, [r3, #1]
 800f1d4:	2b0b      	cmp	r3, #11
 800f1d6:	d02e      	beq.n	800f236 <USBD_CDC_Setup+0x104>
 800f1d8:	2b0b      	cmp	r3, #11
 800f1da:	dc38      	bgt.n	800f24e <USBD_CDC_Setup+0x11c>
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d002      	beq.n	800f1e6 <USBD_CDC_Setup+0xb4>
 800f1e0:	2b0a      	cmp	r3, #10
 800f1e2:	d014      	beq.n	800f20e <USBD_CDC_Setup+0xdc>
 800f1e4:	e033      	b.n	800f24e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1ec:	2b03      	cmp	r3, #3
 800f1ee:	d107      	bne.n	800f200 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800f1f0:	f107 030c 	add.w	r3, r7, #12
 800f1f4:	2202      	movs	r2, #2
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f001 f9a4 	bl	8010546 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f1fe:	e02e      	b.n	800f25e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800f200:	6839      	ldr	r1, [r7, #0]
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f001 f935 	bl	8010472 <USBD_CtlError>
            ret = USBD_FAIL;
 800f208:	2302      	movs	r3, #2
 800f20a:	75fb      	strb	r3, [r7, #23]
          break;
 800f20c:	e027      	b.n	800f25e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f214:	2b03      	cmp	r3, #3
 800f216:	d107      	bne.n	800f228 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800f218:	f107 030f 	add.w	r3, r7, #15
 800f21c:	2201      	movs	r2, #1
 800f21e:	4619      	mov	r1, r3
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f001 f990 	bl	8010546 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f226:	e01a      	b.n	800f25e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800f228:	6839      	ldr	r1, [r7, #0]
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f001 f921 	bl	8010472 <USBD_CtlError>
            ret = USBD_FAIL;
 800f230:	2302      	movs	r3, #2
 800f232:	75fb      	strb	r3, [r7, #23]
          break;
 800f234:	e013      	b.n	800f25e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d00d      	beq.n	800f25c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800f240:	6839      	ldr	r1, [r7, #0]
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f001 f915 	bl	8010472 <USBD_CtlError>
            ret = USBD_FAIL;
 800f248:	2302      	movs	r3, #2
 800f24a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f24c:	e006      	b.n	800f25c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f001 f90e 	bl	8010472 <USBD_CtlError>
          ret = USBD_FAIL;
 800f256:	2302      	movs	r3, #2
 800f258:	75fb      	strb	r3, [r7, #23]
          break;
 800f25a:	e000      	b.n	800f25e <USBD_CDC_Setup+0x12c>
          break;
 800f25c:	bf00      	nop
      }
      break;
 800f25e:	e006      	b.n	800f26e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f260:	6839      	ldr	r1, [r7, #0]
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f001 f905 	bl	8010472 <USBD_CtlError>
      ret = USBD_FAIL;
 800f268:	2302      	movs	r3, #2
 800f26a:	75fb      	strb	r3, [r7, #23]
      break;
 800f26c:	bf00      	nop
  }

  return ret;
 800f26e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3718      	adds	r7, #24
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b084      	sub	sp, #16
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	460b      	mov	r3, r1
 800f282:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f28a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f292:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d03a      	beq.n	800f314 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f29e:	78fa      	ldrb	r2, [r7, #3]
 800f2a0:	6879      	ldr	r1, [r7, #4]
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4413      	add	r3, r2
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	440b      	add	r3, r1
 800f2ac:	331c      	adds	r3, #28
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d029      	beq.n	800f308 <USBD_CDC_DataIn+0x90>
 800f2b4:	78fa      	ldrb	r2, [r7, #3]
 800f2b6:	6879      	ldr	r1, [r7, #4]
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	4413      	add	r3, r2
 800f2be:	009b      	lsls	r3, r3, #2
 800f2c0:	440b      	add	r3, r1
 800f2c2:	331c      	adds	r3, #28
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	78f9      	ldrb	r1, [r7, #3]
 800f2c8:	68b8      	ldr	r0, [r7, #8]
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	440b      	add	r3, r1
 800f2d0:	00db      	lsls	r3, r3, #3
 800f2d2:	4403      	add	r3, r0
 800f2d4:	3338      	adds	r3, #56	; 0x38
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800f2dc:	fb03 f301 	mul.w	r3, r3, r1
 800f2e0:	1ad3      	subs	r3, r2, r3
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d110      	bne.n	800f308 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800f2e6:	78fa      	ldrb	r2, [r7, #3]
 800f2e8:	6879      	ldr	r1, [r7, #4]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	4413      	add	r3, r2
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	440b      	add	r3, r1
 800f2f4:	331c      	adds	r3, #28
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f2fa:	78f9      	ldrb	r1, [r7, #3]
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	2200      	movs	r2, #0
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f001 fd76 	bl	8010df2 <USBD_LL_Transmit>
 800f306:	e003      	b.n	800f310 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800f310:	2300      	movs	r3, #0
 800f312:	e000      	b.n	800f316 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800f314:	2302      	movs	r3, #2
  }
}
 800f316:	4618      	mov	r0, r3
 800f318:	3710      	adds	r7, #16
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f31e:	b580      	push	{r7, lr}
 800f320:	b084      	sub	sp, #16
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	460b      	mov	r3, r1
 800f328:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f330:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f332:	78fb      	ldrb	r3, [r7, #3]
 800f334:	4619      	mov	r1, r3
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f001 fda1 	bl	8010e7e <USBD_LL_GetRxDataSize>
 800f33c:	4602      	mov	r2, r0
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00d      	beq.n	800f36a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f362:	4611      	mov	r1, r2
 800f364:	4798      	blx	r3

    return USBD_OK;
 800f366:	2300      	movs	r3, #0
 800f368:	e000      	b.n	800f36c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800f36a:	2302      	movs	r3, #2
  }
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f382:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d015      	beq.n	800f3ba <USBD_CDC_EP0_RxReady+0x46>
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f394:	2bff      	cmp	r3, #255	; 0xff
 800f396:	d010      	beq.n	800f3ba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f39e:	689b      	ldr	r3, [r3, #8]
 800f3a0:	68fa      	ldr	r2, [r7, #12]
 800f3a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800f3a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f3ae:	b292      	uxth	r2, r2
 800f3b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	22ff      	movs	r2, #255	; 0xff
 800f3b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800f3ba:	2300      	movs	r3, #0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2243      	movs	r2, #67	; 0x43
 800f3d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800f3d2:	4b03      	ldr	r3, [pc, #12]	; (800f3e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bc80      	pop	{r7}
 800f3dc:	4770      	bx	lr
 800f3de:	bf00      	nop
 800f3e0:	20000094 	.word	0x20000094

0800f3e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b083      	sub	sp, #12
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2243      	movs	r2, #67	; 0x43
 800f3f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800f3f2:	4b03      	ldr	r3, [pc, #12]	; (800f400 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bc80      	pop	{r7}
 800f3fc:	4770      	bx	lr
 800f3fe:	bf00      	nop
 800f400:	20000050 	.word	0x20000050

0800f404 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2243      	movs	r2, #67	; 0x43
 800f410:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800f412:	4b03      	ldr	r3, [pc, #12]	; (800f420 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f414:	4618      	mov	r0, r3
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	bc80      	pop	{r7}
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	200000d8 	.word	0x200000d8

0800f424 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	220a      	movs	r2, #10
 800f430:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800f432:	4b03      	ldr	r3, [pc, #12]	; (800f440 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f434:	4618      	mov	r0, r3
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	bc80      	pop	{r7}
 800f43c:	4770      	bx	lr
 800f43e:	bf00      	nop
 800f440:	2000000c 	.word	0x2000000c

0800f444 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800f444:	b480      	push	{r7}
 800f446:	b085      	sub	sp, #20
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800f44e:	2302      	movs	r3, #2
 800f450:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d005      	beq.n	800f464 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f464:	7bfb      	ldrb	r3, [r7, #15]
}
 800f466:	4618      	mov	r0, r3
 800f468:	3714      	adds	r7, #20
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bc80      	pop	{r7}
 800f46e:	4770      	bx	lr

0800f470 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800f470:	b480      	push	{r7}
 800f472:	b087      	sub	sp, #28
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	4613      	mov	r3, r2
 800f47c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f484:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	68ba      	ldr	r2, [r7, #8]
 800f48a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f48e:	88fa      	ldrh	r2, [r7, #6]
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	371c      	adds	r7, #28
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bc80      	pop	{r7}
 800f4a0:	4770      	bx	lr

0800f4a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800f4a2:	b480      	push	{r7}
 800f4a4:	b085      	sub	sp, #20
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
 800f4aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4b2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	683a      	ldr	r2, [r7, #0]
 800f4b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3714      	adds	r7, #20
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bc80      	pop	{r7}
 800f4c6:	4770      	bx	lr

0800f4c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4d6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d017      	beq.n	800f512 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	7c1b      	ldrb	r3, [r3, #16]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d109      	bne.n	800f4fe <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f4f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f4f4:	2101      	movs	r1, #1
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f001 fc9e 	bl	8010e38 <USBD_LL_PrepareReceive>
 800f4fc:	e007      	b.n	800f50e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f504:	2340      	movs	r3, #64	; 0x40
 800f506:	2101      	movs	r1, #1
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f001 fc95 	bl	8010e38 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800f50e:	2300      	movs	r3, #0
 800f510:	e000      	b.n	800f514 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800f512:	2302      	movs	r3, #2
  }
}
 800f514:	4618      	mov	r0, r3
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	4613      	mov	r3, r2
 800f528:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d101      	bne.n	800f534 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f530:	2302      	movs	r3, #2
 800f532:	e01a      	b.n	800f56a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d003      	beq.n	800f546 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2200      	movs	r2, #0
 800f542:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d003      	beq.n	800f554 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2201      	movs	r2, #1
 800f558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	79fa      	ldrb	r2, [r7, #7]
 800f560:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f001 fb02 	bl	8010b6c <USBD_LL_Init>

  return USBD_OK;
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}

0800f572 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f572:	b480      	push	{r7}
 800f574:	b085      	sub	sp, #20
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
 800f57a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800f57c:	2300      	movs	r3, #0
 800f57e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d006      	beq.n	800f594 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	683a      	ldr	r2, [r7, #0]
 800f58a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800f58e:	2300      	movs	r3, #0
 800f590:	73fb      	strb	r3, [r7, #15]
 800f592:	e001      	b.n	800f598 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800f594:	2302      	movs	r3, #2
 800f596:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f598:	7bfb      	ldrb	r3, [r7, #15]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3714      	adds	r7, #20
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bc80      	pop	{r7}
 800f5a2:	4770      	bx	lr

0800f5a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f001 fb37 	bl	8010c20 <USBD_LL_Start>

  return USBD_OK;
 800f5b2:	2300      	movs	r3, #0
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f5c4:	2300      	movs	r3, #0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	370c      	adds	r7, #12
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bc80      	pop	{r7}
 800f5ce:	4770      	bx	lr

0800f5d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	460b      	mov	r3, r1
 800f5da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f5dc:	2302      	movs	r3, #2
 800f5de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00c      	beq.n	800f604 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	78fa      	ldrb	r2, [r7, #3]
 800f5f4:	4611      	mov	r1, r2
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	4798      	blx	r3
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d101      	bne.n	800f604 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800f600:	2300      	movs	r3, #0
 800f602:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f604:	7bfb      	ldrb	r3, [r7, #15]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3710      	adds	r7, #16
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}

0800f60e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f60e:	b580      	push	{r7, lr}
 800f610:	b082      	sub	sp, #8
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
 800f616:	460b      	mov	r3, r1
 800f618:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	78fa      	ldrb	r2, [r7, #3]
 800f624:	4611      	mov	r1, r2
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	4798      	blx	r3

  return USBD_OK;
 800f62a:	2300      	movs	r3, #0
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3708      	adds	r7, #8
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f644:	6839      	ldr	r1, [r7, #0]
 800f646:	4618      	mov	r0, r3
 800f648:	f000 fed7 	bl	80103fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2201      	movs	r2, #1
 800f650:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f65a:	461a      	mov	r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f668:	f003 031f 	and.w	r3, r3, #31
 800f66c:	2b02      	cmp	r3, #2
 800f66e:	d016      	beq.n	800f69e <USBD_LL_SetupStage+0x6a>
 800f670:	2b02      	cmp	r3, #2
 800f672:	d81c      	bhi.n	800f6ae <USBD_LL_SetupStage+0x7a>
 800f674:	2b00      	cmp	r3, #0
 800f676:	d002      	beq.n	800f67e <USBD_LL_SetupStage+0x4a>
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d008      	beq.n	800f68e <USBD_LL_SetupStage+0x5a>
 800f67c:	e017      	b.n	800f6ae <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f684:	4619      	mov	r1, r3
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 f9ca 	bl	800fa20 <USBD_StdDevReq>
      break;
 800f68c:	e01a      	b.n	800f6c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f694:	4619      	mov	r1, r3
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 fa2c 	bl	800faf4 <USBD_StdItfReq>
      break;
 800f69c:	e012      	b.n	800f6c4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 fa6c 	bl	800fb84 <USBD_StdEPReq>
      break;
 800f6ac:	e00a      	b.n	800f6c4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f6b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f001 fb0f 	bl	8010ce0 <USBD_LL_StallEP>
      break;
 800f6c2:	bf00      	nop
  }

  return USBD_OK;
 800f6c4:	2300      	movs	r3, #0
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3708      	adds	r7, #8
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f6ce:	b580      	push	{r7, lr}
 800f6d0:	b086      	sub	sp, #24
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	60f8      	str	r0, [r7, #12]
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	607a      	str	r2, [r7, #4]
 800f6da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f6dc:	7afb      	ldrb	r3, [r7, #11]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d14b      	bne.n	800f77a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f6e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6f0:	2b03      	cmp	r3, #3
 800f6f2:	d134      	bne.n	800f75e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	68da      	ldr	r2, [r3, #12]
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	691b      	ldr	r3, [r3, #16]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d919      	bls.n	800f734 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	68da      	ldr	r2, [r3, #12]
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	691b      	ldr	r3, [r3, #16]
 800f708:	1ad2      	subs	r2, r2, r3
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	68da      	ldr	r2, [r3, #12]
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f716:	429a      	cmp	r2, r3
 800f718:	d203      	bcs.n	800f722 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800f71e:	b29b      	uxth	r3, r3
 800f720:	e002      	b.n	800f728 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f726:	b29b      	uxth	r3, r3
 800f728:	461a      	mov	r2, r3
 800f72a:	6879      	ldr	r1, [r7, #4]
 800f72c:	68f8      	ldr	r0, [r7, #12]
 800f72e:	f000 ff56 	bl	80105de <USBD_CtlContinueRx>
 800f732:	e038      	b.n	800f7a6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f73a:	691b      	ldr	r3, [r3, #16]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d00a      	beq.n	800f756 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f746:	2b03      	cmp	r3, #3
 800f748:	d105      	bne.n	800f756 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f750:	691b      	ldr	r3, [r3, #16]
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f000 ff53 	bl	8010602 <USBD_CtlSendStatus>
 800f75c:	e023      	b.n	800f7a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f764:	2b05      	cmp	r3, #5
 800f766:	d11e      	bne.n	800f7a6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2200      	movs	r2, #0
 800f76c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800f770:	2100      	movs	r1, #0
 800f772:	68f8      	ldr	r0, [r7, #12]
 800f774:	f001 fab4 	bl	8010ce0 <USBD_LL_StallEP>
 800f778:	e015      	b.n	800f7a6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f780:	699b      	ldr	r3, [r3, #24]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d00d      	beq.n	800f7a2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f78c:	2b03      	cmp	r3, #3
 800f78e:	d108      	bne.n	800f7a2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f796:	699b      	ldr	r3, [r3, #24]
 800f798:	7afa      	ldrb	r2, [r7, #11]
 800f79a:	4611      	mov	r1, r2
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	4798      	blx	r3
 800f7a0:	e001      	b.n	800f7a6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f7a2:	2302      	movs	r3, #2
 800f7a4:	e000      	b.n	800f7a8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800f7a6:	2300      	movs	r3, #0
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3718      	adds	r7, #24
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	607a      	str	r2, [r7, #4]
 800f7bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f7be:	7afb      	ldrb	r3, [r7, #11]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d17f      	bne.n	800f8c4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	3314      	adds	r3, #20
 800f7c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f7d0:	2b02      	cmp	r3, #2
 800f7d2:	d15c      	bne.n	800f88e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	68da      	ldr	r2, [r3, #12]
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	691b      	ldr	r3, [r3, #16]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d915      	bls.n	800f80c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	68da      	ldr	r2, [r3, #12]
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	691b      	ldr	r3, [r3, #16]
 800f7e8:	1ad2      	subs	r2, r2, r3
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	6879      	ldr	r1, [r7, #4]
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f000 fec0 	bl	801057e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7fe:	2300      	movs	r3, #0
 800f800:	2200      	movs	r2, #0
 800f802:	2100      	movs	r1, #0
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f001 fb17 	bl	8010e38 <USBD_LL_PrepareReceive>
 800f80a:	e04e      	b.n	800f8aa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	689b      	ldr	r3, [r3, #8]
 800f810:	697a      	ldr	r2, [r7, #20]
 800f812:	6912      	ldr	r2, [r2, #16]
 800f814:	fbb3 f1f2 	udiv	r1, r3, r2
 800f818:	fb02 f201 	mul.w	r2, r2, r1
 800f81c:	1a9b      	subs	r3, r3, r2
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d11c      	bne.n	800f85c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	689a      	ldr	r2, [r3, #8]
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d316      	bcc.n	800f85c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	689a      	ldr	r2, [r3, #8]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f838:	429a      	cmp	r2, r3
 800f83a:	d20f      	bcs.n	800f85c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f83c:	2200      	movs	r2, #0
 800f83e:	2100      	movs	r1, #0
 800f840:	68f8      	ldr	r0, [r7, #12]
 800f842:	f000 fe9c 	bl	801057e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2200      	movs	r2, #0
 800f84a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f84e:	2300      	movs	r3, #0
 800f850:	2200      	movs	r2, #0
 800f852:	2100      	movs	r1, #0
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f001 faef 	bl	8010e38 <USBD_LL_PrepareReceive>
 800f85a:	e026      	b.n	800f8aa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d00a      	beq.n	800f87e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f86e:	2b03      	cmp	r3, #3
 800f870:	d105      	bne.n	800f87e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800f87e:	2180      	movs	r1, #128	; 0x80
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f001 fa2d 	bl	8010ce0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800f886:	68f8      	ldr	r0, [r7, #12]
 800f888:	f000 fece 	bl	8010628 <USBD_CtlReceiveStatus>
 800f88c:	e00d      	b.n	800f8aa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f894:	2b04      	cmp	r3, #4
 800f896:	d004      	beq.n	800f8a2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d103      	bne.n	800f8aa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800f8a2:	2180      	movs	r1, #128	; 0x80
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f001 fa1b 	bl	8010ce0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d11d      	bne.n	800f8f0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f7ff fe81 	bl	800f5bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f8c2:	e015      	b.n	800f8f0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ca:	695b      	ldr	r3, [r3, #20]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00d      	beq.n	800f8ec <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f8d6:	2b03      	cmp	r3, #3
 800f8d8:	d108      	bne.n	800f8ec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8e0:	695b      	ldr	r3, [r3, #20]
 800f8e2:	7afa      	ldrb	r2, [r7, #11]
 800f8e4:	4611      	mov	r1, r2
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	4798      	blx	r3
 800f8ea:	e001      	b.n	800f8f0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f8ec:	2302      	movs	r3, #2
 800f8ee:	e000      	b.n	800f8f2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800f8f0:	2300      	movs	r3, #0
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3718      	adds	r7, #24
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b082      	sub	sp, #8
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f902:	2340      	movs	r3, #64	; 0x40
 800f904:	2200      	movs	r2, #0
 800f906:	2100      	movs	r1, #0
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f001 f9a4 	bl	8010c56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2201      	movs	r2, #1
 800f912:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2240      	movs	r2, #64	; 0x40
 800f91a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f91e:	2340      	movs	r3, #64	; 0x40
 800f920:	2200      	movs	r2, #0
 800f922:	2180      	movs	r1, #128	; 0x80
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f001 f996 	bl	8010c56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2201      	movs	r2, #1
 800f92e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2240      	movs	r2, #64	; 0x40
 800f934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2201      	movs	r2, #1
 800f93a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2200      	movs	r2, #0
 800f942:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2200      	movs	r2, #0
 800f950:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d009      	beq.n	800f972 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	6852      	ldr	r2, [r2, #4]
 800f96a:	b2d2      	uxtb	r2, r2
 800f96c:	4611      	mov	r1, r2
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	4798      	blx	r3
  }

  return USBD_OK;
 800f972:	2300      	movs	r3, #0
}
 800f974:	4618      	mov	r0, r3
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	460b      	mov	r3, r1
 800f986:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	78fa      	ldrb	r2, [r7, #3]
 800f98c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f98e:	2300      	movs	r3, #0
}
 800f990:	4618      	mov	r0, r3
 800f992:	370c      	adds	r7, #12
 800f994:	46bd      	mov	sp, r7
 800f996:	bc80      	pop	{r7}
 800f998:	4770      	bx	lr

0800f99a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f99a:	b480      	push	{r7}
 800f99c:	b083      	sub	sp, #12
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2204      	movs	r2, #4
 800f9b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f9b6:	2300      	movs	r3, #0
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bc80      	pop	{r7}
 800f9c0:	4770      	bx	lr

0800f9c2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f9c2:	b480      	push	{r7}
 800f9c4:	b083      	sub	sp, #12
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9d0:	2b04      	cmp	r3, #4
 800f9d2:	d105      	bne.n	800f9e0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	370c      	adds	r7, #12
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bc80      	pop	{r7}
 800f9ea:	4770      	bx	lr

0800f9ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9fa:	2b03      	cmp	r3, #3
 800f9fc:	d10b      	bne.n	800fa16 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa04:	69db      	ldr	r3, [r3, #28]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d005      	beq.n	800fa16 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa10:	69db      	ldr	r3, [r3, #28]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3708      	adds	r7, #8
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b084      	sub	sp, #16
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa36:	2b40      	cmp	r3, #64	; 0x40
 800fa38:	d005      	beq.n	800fa46 <USBD_StdDevReq+0x26>
 800fa3a:	2b40      	cmp	r3, #64	; 0x40
 800fa3c:	d84f      	bhi.n	800fade <USBD_StdDevReq+0xbe>
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d009      	beq.n	800fa56 <USBD_StdDevReq+0x36>
 800fa42:	2b20      	cmp	r3, #32
 800fa44:	d14b      	bne.n	800fade <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa4c:	689b      	ldr	r3, [r3, #8]
 800fa4e:	6839      	ldr	r1, [r7, #0]
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	4798      	blx	r3
      break;
 800fa54:	e048      	b.n	800fae8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	785b      	ldrb	r3, [r3, #1]
 800fa5a:	2b09      	cmp	r3, #9
 800fa5c:	d839      	bhi.n	800fad2 <USBD_StdDevReq+0xb2>
 800fa5e:	a201      	add	r2, pc, #4	; (adr r2, 800fa64 <USBD_StdDevReq+0x44>)
 800fa60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa64:	0800fab5 	.word	0x0800fab5
 800fa68:	0800fac9 	.word	0x0800fac9
 800fa6c:	0800fad3 	.word	0x0800fad3
 800fa70:	0800fabf 	.word	0x0800fabf
 800fa74:	0800fad3 	.word	0x0800fad3
 800fa78:	0800fa97 	.word	0x0800fa97
 800fa7c:	0800fa8d 	.word	0x0800fa8d
 800fa80:	0800fad3 	.word	0x0800fad3
 800fa84:	0800faab 	.word	0x0800faab
 800fa88:	0800faa1 	.word	0x0800faa1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 f9dc 	bl	800fe4c <USBD_GetDescriptor>
          break;
 800fa94:	e022      	b.n	800fadc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fa96:	6839      	ldr	r1, [r7, #0]
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 fb3f 	bl	801011c <USBD_SetAddress>
          break;
 800fa9e:	e01d      	b.n	800fadc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800faa0:	6839      	ldr	r1, [r7, #0]
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fb7e 	bl	80101a4 <USBD_SetConfig>
          break;
 800faa8:	e018      	b.n	800fadc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800faaa:	6839      	ldr	r1, [r7, #0]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 fc07 	bl	80102c0 <USBD_GetConfig>
          break;
 800fab2:	e013      	b.n	800fadc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fab4:	6839      	ldr	r1, [r7, #0]
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 fc37 	bl	801032a <USBD_GetStatus>
          break;
 800fabc:	e00e      	b.n	800fadc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fabe:	6839      	ldr	r1, [r7, #0]
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f000 fc65 	bl	8010390 <USBD_SetFeature>
          break;
 800fac6:	e009      	b.n	800fadc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fac8:	6839      	ldr	r1, [r7, #0]
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f000 fc74 	bl	80103b8 <USBD_ClrFeature>
          break;
 800fad0:	e004      	b.n	800fadc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800fad2:	6839      	ldr	r1, [r7, #0]
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 fccc 	bl	8010472 <USBD_CtlError>
          break;
 800fada:	bf00      	nop
      }
      break;
 800fadc:	e004      	b.n	800fae8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800fade:	6839      	ldr	r1, [r7, #0]
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 fcc6 	bl	8010472 <USBD_CtlError>
      break;
 800fae6:	bf00      	nop
  }

  return ret;
 800fae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop

0800faf4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fafe:	2300      	movs	r3, #0
 800fb00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	781b      	ldrb	r3, [r3, #0]
 800fb06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb0a:	2b40      	cmp	r3, #64	; 0x40
 800fb0c:	d005      	beq.n	800fb1a <USBD_StdItfReq+0x26>
 800fb0e:	2b40      	cmp	r3, #64	; 0x40
 800fb10:	d82e      	bhi.n	800fb70 <USBD_StdItfReq+0x7c>
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d001      	beq.n	800fb1a <USBD_StdItfReq+0x26>
 800fb16:	2b20      	cmp	r3, #32
 800fb18:	d12a      	bne.n	800fb70 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb20:	3b01      	subs	r3, #1
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	d81d      	bhi.n	800fb62 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	889b      	ldrh	r3, [r3, #4]
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d813      	bhi.n	800fb58 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	6839      	ldr	r1, [r7, #0]
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	4798      	blx	r3
 800fb3e:	4603      	mov	r3, r0
 800fb40:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	88db      	ldrh	r3, [r3, #6]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d110      	bne.n	800fb6c <USBD_StdItfReq+0x78>
 800fb4a:	7bfb      	ldrb	r3, [r7, #15]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d10d      	bne.n	800fb6c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 fd56 	bl	8010602 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fb56:	e009      	b.n	800fb6c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800fb58:	6839      	ldr	r1, [r7, #0]
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 fc89 	bl	8010472 <USBD_CtlError>
          break;
 800fb60:	e004      	b.n	800fb6c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800fb62:	6839      	ldr	r1, [r7, #0]
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 fc84 	bl	8010472 <USBD_CtlError>
          break;
 800fb6a:	e000      	b.n	800fb6e <USBD_StdItfReq+0x7a>
          break;
 800fb6c:	bf00      	nop
      }
      break;
 800fb6e:	e004      	b.n	800fb7a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800fb70:	6839      	ldr	r1, [r7, #0]
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 fc7d 	bl	8010472 <USBD_CtlError>
      break;
 800fb78:	bf00      	nop
  }

  return USBD_OK;
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3710      	adds	r7, #16
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	889b      	ldrh	r3, [r3, #4]
 800fb96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fba0:	2b40      	cmp	r3, #64	; 0x40
 800fba2:	d007      	beq.n	800fbb4 <USBD_StdEPReq+0x30>
 800fba4:	2b40      	cmp	r3, #64	; 0x40
 800fba6:	f200 8146 	bhi.w	800fe36 <USBD_StdEPReq+0x2b2>
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d00a      	beq.n	800fbc4 <USBD_StdEPReq+0x40>
 800fbae:	2b20      	cmp	r3, #32
 800fbb0:	f040 8141 	bne.w	800fe36 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	6839      	ldr	r1, [r7, #0]
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	4798      	blx	r3
      break;
 800fbc2:	e13d      	b.n	800fe40 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fbcc:	2b20      	cmp	r3, #32
 800fbce:	d10a      	bne.n	800fbe6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbd6:	689b      	ldr	r3, [r3, #8]
 800fbd8:	6839      	ldr	r1, [r7, #0]
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	4798      	blx	r3
 800fbde:	4603      	mov	r3, r0
 800fbe0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800fbe2:	7bfb      	ldrb	r3, [r7, #15]
 800fbe4:	e12d      	b.n	800fe42 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	785b      	ldrb	r3, [r3, #1]
 800fbea:	2b03      	cmp	r3, #3
 800fbec:	d007      	beq.n	800fbfe <USBD_StdEPReq+0x7a>
 800fbee:	2b03      	cmp	r3, #3
 800fbf0:	f300 811b 	bgt.w	800fe2a <USBD_StdEPReq+0x2a6>
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d072      	beq.n	800fcde <USBD_StdEPReq+0x15a>
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d03a      	beq.n	800fc72 <USBD_StdEPReq+0xee>
 800fbfc:	e115      	b.n	800fe2a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc04:	2b02      	cmp	r3, #2
 800fc06:	d002      	beq.n	800fc0e <USBD_StdEPReq+0x8a>
 800fc08:	2b03      	cmp	r3, #3
 800fc0a:	d015      	beq.n	800fc38 <USBD_StdEPReq+0xb4>
 800fc0c:	e02b      	b.n	800fc66 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc0e:	7bbb      	ldrb	r3, [r7, #14]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00c      	beq.n	800fc2e <USBD_StdEPReq+0xaa>
 800fc14:	7bbb      	ldrb	r3, [r7, #14]
 800fc16:	2b80      	cmp	r3, #128	; 0x80
 800fc18:	d009      	beq.n	800fc2e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800fc1a:	7bbb      	ldrb	r3, [r7, #14]
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f001 f85e 	bl	8010ce0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800fc24:	2180      	movs	r1, #128	; 0x80
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f001 f85a 	bl	8010ce0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fc2c:	e020      	b.n	800fc70 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800fc2e:	6839      	ldr	r1, [r7, #0]
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fc1e 	bl	8010472 <USBD_CtlError>
              break;
 800fc36:	e01b      	b.n	800fc70 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	885b      	ldrh	r3, [r3, #2]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d10e      	bne.n	800fc5e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800fc40:	7bbb      	ldrb	r3, [r7, #14]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d00b      	beq.n	800fc5e <USBD_StdEPReq+0xda>
 800fc46:	7bbb      	ldrb	r3, [r7, #14]
 800fc48:	2b80      	cmp	r3, #128	; 0x80
 800fc4a:	d008      	beq.n	800fc5e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	88db      	ldrh	r3, [r3, #6]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d104      	bne.n	800fc5e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800fc54:	7bbb      	ldrb	r3, [r7, #14]
 800fc56:	4619      	mov	r1, r3
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f001 f841 	bl	8010ce0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fccf 	bl	8010602 <USBD_CtlSendStatus>

              break;
 800fc64:	e004      	b.n	800fc70 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800fc66:	6839      	ldr	r1, [r7, #0]
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 fc02 	bl	8010472 <USBD_CtlError>
              break;
 800fc6e:	bf00      	nop
          }
          break;
 800fc70:	e0e0      	b.n	800fe34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc78:	2b02      	cmp	r3, #2
 800fc7a:	d002      	beq.n	800fc82 <USBD_StdEPReq+0xfe>
 800fc7c:	2b03      	cmp	r3, #3
 800fc7e:	d015      	beq.n	800fcac <USBD_StdEPReq+0x128>
 800fc80:	e026      	b.n	800fcd0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc82:	7bbb      	ldrb	r3, [r7, #14]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d00c      	beq.n	800fca2 <USBD_StdEPReq+0x11e>
 800fc88:	7bbb      	ldrb	r3, [r7, #14]
 800fc8a:	2b80      	cmp	r3, #128	; 0x80
 800fc8c:	d009      	beq.n	800fca2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800fc8e:	7bbb      	ldrb	r3, [r7, #14]
 800fc90:	4619      	mov	r1, r3
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f001 f824 	bl	8010ce0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800fc98:	2180      	movs	r1, #128	; 0x80
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f001 f820 	bl	8010ce0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fca0:	e01c      	b.n	800fcdc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800fca2:	6839      	ldr	r1, [r7, #0]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f000 fbe4 	bl	8010472 <USBD_CtlError>
              break;
 800fcaa:	e017      	b.n	800fcdc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	885b      	ldrh	r3, [r3, #2]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d112      	bne.n	800fcda <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fcb4:	7bbb      	ldrb	r3, [r7, #14]
 800fcb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d004      	beq.n	800fcc8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800fcbe:	7bbb      	ldrb	r3, [r7, #14]
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f001 f82b 	bl	8010d1e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f000 fc9a 	bl	8010602 <USBD_CtlSendStatus>
              }
              break;
 800fcce:	e004      	b.n	800fcda <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800fcd0:	6839      	ldr	r1, [r7, #0]
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 fbcd 	bl	8010472 <USBD_CtlError>
              break;
 800fcd8:	e000      	b.n	800fcdc <USBD_StdEPReq+0x158>
              break;
 800fcda:	bf00      	nop
          }
          break;
 800fcdc:	e0aa      	b.n	800fe34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fce4:	2b02      	cmp	r3, #2
 800fce6:	d002      	beq.n	800fcee <USBD_StdEPReq+0x16a>
 800fce8:	2b03      	cmp	r3, #3
 800fcea:	d032      	beq.n	800fd52 <USBD_StdEPReq+0x1ce>
 800fcec:	e097      	b.n	800fe1e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fcee:	7bbb      	ldrb	r3, [r7, #14]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d007      	beq.n	800fd04 <USBD_StdEPReq+0x180>
 800fcf4:	7bbb      	ldrb	r3, [r7, #14]
 800fcf6:	2b80      	cmp	r3, #128	; 0x80
 800fcf8:	d004      	beq.n	800fd04 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800fcfa:	6839      	ldr	r1, [r7, #0]
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 fbb8 	bl	8010472 <USBD_CtlError>
                break;
 800fd02:	e091      	b.n	800fe28 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	da0b      	bge.n	800fd24 <USBD_StdEPReq+0x1a0>
 800fd0c:	7bbb      	ldrb	r3, [r7, #14]
 800fd0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd12:	4613      	mov	r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	4413      	add	r3, r2
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	3310      	adds	r3, #16
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	4413      	add	r3, r2
 800fd20:	3304      	adds	r3, #4
 800fd22:	e00b      	b.n	800fd3c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fd24:	7bbb      	ldrb	r3, [r7, #14]
 800fd26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd2a:	4613      	mov	r3, r2
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	4413      	add	r3, r2
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	4413      	add	r3, r2
 800fd3a:	3304      	adds	r3, #4
 800fd3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	2200      	movs	r2, #0
 800fd42:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2202      	movs	r2, #2
 800fd48:	4619      	mov	r1, r3
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 fbfb 	bl	8010546 <USBD_CtlSendData>
              break;
 800fd50:	e06a      	b.n	800fe28 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fd52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	da11      	bge.n	800fd7e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fd5a:	7bbb      	ldrb	r3, [r7, #14]
 800fd5c:	f003 020f 	and.w	r2, r3, #15
 800fd60:	6879      	ldr	r1, [r7, #4]
 800fd62:	4613      	mov	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	4413      	add	r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	440b      	add	r3, r1
 800fd6c:	3318      	adds	r3, #24
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d117      	bne.n	800fda4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800fd74:	6839      	ldr	r1, [r7, #0]
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 fb7b 	bl	8010472 <USBD_CtlError>
                  break;
 800fd7c:	e054      	b.n	800fe28 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fd7e:	7bbb      	ldrb	r3, [r7, #14]
 800fd80:	f003 020f 	and.w	r2, r3, #15
 800fd84:	6879      	ldr	r1, [r7, #4]
 800fd86:	4613      	mov	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4413      	add	r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	440b      	add	r3, r1
 800fd90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d104      	bne.n	800fda4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800fd9a:	6839      	ldr	r1, [r7, #0]
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 fb68 	bl	8010472 <USBD_CtlError>
                  break;
 800fda2:	e041      	b.n	800fe28 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fda4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	da0b      	bge.n	800fdc4 <USBD_StdEPReq+0x240>
 800fdac:	7bbb      	ldrb	r3, [r7, #14]
 800fdae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fdb2:	4613      	mov	r3, r2
 800fdb4:	009b      	lsls	r3, r3, #2
 800fdb6:	4413      	add	r3, r2
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	3310      	adds	r3, #16
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	4413      	add	r3, r2
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	e00b      	b.n	800fddc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fdc4:	7bbb      	ldrb	r3, [r7, #14]
 800fdc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fdca:	4613      	mov	r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	4413      	add	r3, r2
 800fdd0:	009b      	lsls	r3, r3, #2
 800fdd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fdd6:	687a      	ldr	r2, [r7, #4]
 800fdd8:	4413      	add	r3, r2
 800fdda:	3304      	adds	r3, #4
 800fddc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fdde:	7bbb      	ldrb	r3, [r7, #14]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d002      	beq.n	800fdea <USBD_StdEPReq+0x266>
 800fde4:	7bbb      	ldrb	r3, [r7, #14]
 800fde6:	2b80      	cmp	r3, #128	; 0x80
 800fde8:	d103      	bne.n	800fdf2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	2200      	movs	r2, #0
 800fdee:	601a      	str	r2, [r3, #0]
 800fdf0:	e00e      	b.n	800fe10 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800fdf2:	7bbb      	ldrb	r3, [r7, #14]
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 ffb0 	bl	8010d5c <USBD_LL_IsStallEP>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d003      	beq.n	800fe0a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	2201      	movs	r2, #1
 800fe06:	601a      	str	r2, [r3, #0]
 800fe08:	e002      	b.n	800fe10 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	2202      	movs	r2, #2
 800fe14:	4619      	mov	r1, r3
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 fb95 	bl	8010546 <USBD_CtlSendData>
              break;
 800fe1c:	e004      	b.n	800fe28 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800fe1e:	6839      	ldr	r1, [r7, #0]
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f000 fb26 	bl	8010472 <USBD_CtlError>
              break;
 800fe26:	bf00      	nop
          }
          break;
 800fe28:	e004      	b.n	800fe34 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800fe2a:	6839      	ldr	r1, [r7, #0]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 fb20 	bl	8010472 <USBD_CtlError>
          break;
 800fe32:	bf00      	nop
      }
      break;
 800fe34:	e004      	b.n	800fe40 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800fe36:	6839      	ldr	r1, [r7, #0]
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 fb1a 	bl	8010472 <USBD_CtlError>
      break;
 800fe3e:	bf00      	nop
  }

  return ret;
 800fe40:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3710      	adds	r7, #16
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
	...

0800fe4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fe56:	2300      	movs	r3, #0
 800fe58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	885b      	ldrh	r3, [r3, #2]
 800fe66:	0a1b      	lsrs	r3, r3, #8
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	3b01      	subs	r3, #1
 800fe6c:	2b06      	cmp	r3, #6
 800fe6e:	f200 8128 	bhi.w	80100c2 <USBD_GetDescriptor+0x276>
 800fe72:	a201      	add	r2, pc, #4	; (adr r2, 800fe78 <USBD_GetDescriptor+0x2c>)
 800fe74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe78:	0800fe95 	.word	0x0800fe95
 800fe7c:	0800fead 	.word	0x0800fead
 800fe80:	0800feed 	.word	0x0800feed
 800fe84:	080100c3 	.word	0x080100c3
 800fe88:	080100c3 	.word	0x080100c3
 800fe8c:	08010063 	.word	0x08010063
 800fe90:	0801008f 	.word	0x0801008f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	7c12      	ldrb	r2, [r2, #16]
 800fea0:	f107 0108 	add.w	r1, r7, #8
 800fea4:	4610      	mov	r0, r2
 800fea6:	4798      	blx	r3
 800fea8:	60f8      	str	r0, [r7, #12]
      break;
 800feaa:	e112      	b.n	80100d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	7c1b      	ldrb	r3, [r3, #16]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10d      	bne.n	800fed0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800feba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800febc:	f107 0208 	add.w	r2, r7, #8
 800fec0:	4610      	mov	r0, r2
 800fec2:	4798      	blx	r3
 800fec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	3301      	adds	r3, #1
 800feca:	2202      	movs	r2, #2
 800fecc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fece:	e100      	b.n	80100d2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed8:	f107 0208 	add.w	r2, r7, #8
 800fedc:	4610      	mov	r0, r2
 800fede:	4798      	blx	r3
 800fee0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	3301      	adds	r3, #1
 800fee6:	2202      	movs	r2, #2
 800fee8:	701a      	strb	r2, [r3, #0]
      break;
 800feea:	e0f2      	b.n	80100d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	885b      	ldrh	r3, [r3, #2]
 800fef0:	b2db      	uxtb	r3, r3
 800fef2:	2b05      	cmp	r3, #5
 800fef4:	f200 80ac 	bhi.w	8010050 <USBD_GetDescriptor+0x204>
 800fef8:	a201      	add	r2, pc, #4	; (adr r2, 800ff00 <USBD_GetDescriptor+0xb4>)
 800fefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fefe:	bf00      	nop
 800ff00:	0800ff19 	.word	0x0800ff19
 800ff04:	0800ff4d 	.word	0x0800ff4d
 800ff08:	0800ff81 	.word	0x0800ff81
 800ff0c:	0800ffb5 	.word	0x0800ffb5
 800ff10:	0800ffe9 	.word	0x0800ffe9
 800ff14:	0801001d 	.word	0x0801001d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d00b      	beq.n	800ff3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	687a      	ldr	r2, [r7, #4]
 800ff2e:	7c12      	ldrb	r2, [r2, #16]
 800ff30:	f107 0108 	add.w	r1, r7, #8
 800ff34:	4610      	mov	r0, r2
 800ff36:	4798      	blx	r3
 800ff38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff3a:	e091      	b.n	8010060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ff3c:	6839      	ldr	r1, [r7, #0]
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f000 fa97 	bl	8010472 <USBD_CtlError>
            err++;
 800ff44:	7afb      	ldrb	r3, [r7, #11]
 800ff46:	3301      	adds	r3, #1
 800ff48:	72fb      	strb	r3, [r7, #11]
          break;
 800ff4a:	e089      	b.n	8010060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ff52:	689b      	ldr	r3, [r3, #8]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00b      	beq.n	800ff70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ff5e:	689b      	ldr	r3, [r3, #8]
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	7c12      	ldrb	r2, [r2, #16]
 800ff64:	f107 0108 	add.w	r1, r7, #8
 800ff68:	4610      	mov	r0, r2
 800ff6a:	4798      	blx	r3
 800ff6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff6e:	e077      	b.n	8010060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ff70:	6839      	ldr	r1, [r7, #0]
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 fa7d 	bl	8010472 <USBD_CtlError>
            err++;
 800ff78:	7afb      	ldrb	r3, [r7, #11]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ff7e:	e06f      	b.n	8010060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d00b      	beq.n	800ffa4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	7c12      	ldrb	r2, [r2, #16]
 800ff98:	f107 0108 	add.w	r1, r7, #8
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	4798      	blx	r3
 800ffa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ffa2:	e05d      	b.n	8010060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ffa4:	6839      	ldr	r1, [r7, #0]
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fa63 	bl	8010472 <USBD_CtlError>
            err++;
 800ffac:	7afb      	ldrb	r3, [r7, #11]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	72fb      	strb	r3, [r7, #11]
          break;
 800ffb2:	e055      	b.n	8010060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ffba:	691b      	ldr	r3, [r3, #16]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d00b      	beq.n	800ffd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ffc6:	691b      	ldr	r3, [r3, #16]
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	7c12      	ldrb	r2, [r2, #16]
 800ffcc:	f107 0108 	add.w	r1, r7, #8
 800ffd0:	4610      	mov	r0, r2
 800ffd2:	4798      	blx	r3
 800ffd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ffd6:	e043      	b.n	8010060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ffd8:	6839      	ldr	r1, [r7, #0]
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f000 fa49 	bl	8010472 <USBD_CtlError>
            err++;
 800ffe0:	7afb      	ldrb	r3, [r7, #11]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	72fb      	strb	r3, [r7, #11]
          break;
 800ffe6:	e03b      	b.n	8010060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ffee:	695b      	ldr	r3, [r3, #20]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d00b      	beq.n	801000c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fffa:	695b      	ldr	r3, [r3, #20]
 800fffc:	687a      	ldr	r2, [r7, #4]
 800fffe:	7c12      	ldrb	r2, [r2, #16]
 8010000:	f107 0108 	add.w	r1, r7, #8
 8010004:	4610      	mov	r0, r2
 8010006:	4798      	blx	r3
 8010008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801000a:	e029      	b.n	8010060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801000c:	6839      	ldr	r1, [r7, #0]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 fa2f 	bl	8010472 <USBD_CtlError>
            err++;
 8010014:	7afb      	ldrb	r3, [r7, #11]
 8010016:	3301      	adds	r3, #1
 8010018:	72fb      	strb	r3, [r7, #11]
          break;
 801001a:	e021      	b.n	8010060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8010022:	699b      	ldr	r3, [r3, #24]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d00b      	beq.n	8010040 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801002e:	699b      	ldr	r3, [r3, #24]
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	7c12      	ldrb	r2, [r2, #16]
 8010034:	f107 0108 	add.w	r1, r7, #8
 8010038:	4610      	mov	r0, r2
 801003a:	4798      	blx	r3
 801003c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801003e:	e00f      	b.n	8010060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010040:	6839      	ldr	r1, [r7, #0]
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f000 fa15 	bl	8010472 <USBD_CtlError>
            err++;
 8010048:	7afb      	ldrb	r3, [r7, #11]
 801004a:	3301      	adds	r3, #1
 801004c:	72fb      	strb	r3, [r7, #11]
          break;
 801004e:	e007      	b.n	8010060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8010050:	6839      	ldr	r1, [r7, #0]
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 fa0d 	bl	8010472 <USBD_CtlError>
          err++;
 8010058:	7afb      	ldrb	r3, [r7, #11]
 801005a:	3301      	adds	r3, #1
 801005c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801005e:	e038      	b.n	80100d2 <USBD_GetDescriptor+0x286>
 8010060:	e037      	b.n	80100d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	7c1b      	ldrb	r3, [r3, #16]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d109      	bne.n	801007e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010072:	f107 0208 	add.w	r2, r7, #8
 8010076:	4610      	mov	r0, r2
 8010078:	4798      	blx	r3
 801007a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801007c:	e029      	b.n	80100d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801007e:	6839      	ldr	r1, [r7, #0]
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 f9f6 	bl	8010472 <USBD_CtlError>
        err++;
 8010086:	7afb      	ldrb	r3, [r7, #11]
 8010088:	3301      	adds	r3, #1
 801008a:	72fb      	strb	r3, [r7, #11]
      break;
 801008c:	e021      	b.n	80100d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	7c1b      	ldrb	r3, [r3, #16]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10d      	bne.n	80100b2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801009c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801009e:	f107 0208 	add.w	r2, r7, #8
 80100a2:	4610      	mov	r0, r2
 80100a4:	4798      	blx	r3
 80100a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	3301      	adds	r3, #1
 80100ac:	2207      	movs	r2, #7
 80100ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80100b0:	e00f      	b.n	80100d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80100b2:	6839      	ldr	r1, [r7, #0]
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f000 f9dc 	bl	8010472 <USBD_CtlError>
        err++;
 80100ba:	7afb      	ldrb	r3, [r7, #11]
 80100bc:	3301      	adds	r3, #1
 80100be:	72fb      	strb	r3, [r7, #11]
      break;
 80100c0:	e007      	b.n	80100d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80100c2:	6839      	ldr	r1, [r7, #0]
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 f9d4 	bl	8010472 <USBD_CtlError>
      err++;
 80100ca:	7afb      	ldrb	r3, [r7, #11]
 80100cc:	3301      	adds	r3, #1
 80100ce:	72fb      	strb	r3, [r7, #11]
      break;
 80100d0:	bf00      	nop
  }

  if (err != 0U)
 80100d2:	7afb      	ldrb	r3, [r7, #11]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d11c      	bne.n	8010112 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80100d8:	893b      	ldrh	r3, [r7, #8]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d011      	beq.n	8010102 <USBD_GetDescriptor+0x2b6>
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	88db      	ldrh	r3, [r3, #6]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d00d      	beq.n	8010102 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	88da      	ldrh	r2, [r3, #6]
 80100ea:	893b      	ldrh	r3, [r7, #8]
 80100ec:	4293      	cmp	r3, r2
 80100ee:	bf28      	it	cs
 80100f0:	4613      	movcs	r3, r2
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80100f6:	893b      	ldrh	r3, [r7, #8]
 80100f8:	461a      	mov	r2, r3
 80100fa:	68f9      	ldr	r1, [r7, #12]
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f000 fa22 	bl	8010546 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	88db      	ldrh	r3, [r3, #6]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d104      	bne.n	8010114 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 fa79 	bl	8010602 <USBD_CtlSendStatus>
 8010110:	e000      	b.n	8010114 <USBD_GetDescriptor+0x2c8>
    return;
 8010112:	bf00      	nop
    }
  }
}
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop

0801011c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	889b      	ldrh	r3, [r3, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d130      	bne.n	8010190 <USBD_SetAddress+0x74>
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	88db      	ldrh	r3, [r3, #6]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d12c      	bne.n	8010190 <USBD_SetAddress+0x74>
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	885b      	ldrh	r3, [r3, #2]
 801013a:	2b7f      	cmp	r3, #127	; 0x7f
 801013c:	d828      	bhi.n	8010190 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	885b      	ldrh	r3, [r3, #2]
 8010142:	b2db      	uxtb	r3, r3
 8010144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010148:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010150:	2b03      	cmp	r3, #3
 8010152:	d104      	bne.n	801015e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8010154:	6839      	ldr	r1, [r7, #0]
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 f98b 	bl	8010472 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801015c:	e01d      	b.n	801019a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	7bfa      	ldrb	r2, [r7, #15]
 8010162:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010166:	7bfb      	ldrb	r3, [r7, #15]
 8010168:	4619      	mov	r1, r3
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 fe22 	bl	8010db4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 fa46 	bl	8010602 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010176:	7bfb      	ldrb	r3, [r7, #15]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d004      	beq.n	8010186 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2202      	movs	r2, #2
 8010180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010184:	e009      	b.n	801019a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2201      	movs	r2, #1
 801018a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801018e:	e004      	b.n	801019a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010190:	6839      	ldr	r1, [r7, #0]
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f000 f96d 	bl	8010472 <USBD_CtlError>
  }
}
 8010198:	bf00      	nop
 801019a:	bf00      	nop
 801019c:	3710      	adds	r7, #16
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
	...

080101a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	885b      	ldrh	r3, [r3, #2]
 80101b2:	b2da      	uxtb	r2, r3
 80101b4:	4b41      	ldr	r3, [pc, #260]	; (80102bc <USBD_SetConfig+0x118>)
 80101b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80101b8:	4b40      	ldr	r3, [pc, #256]	; (80102bc <USBD_SetConfig+0x118>)
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d904      	bls.n	80101ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80101c0:	6839      	ldr	r1, [r7, #0]
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f000 f955 	bl	8010472 <USBD_CtlError>
 80101c8:	e075      	b.n	80102b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101d0:	2b02      	cmp	r3, #2
 80101d2:	d002      	beq.n	80101da <USBD_SetConfig+0x36>
 80101d4:	2b03      	cmp	r3, #3
 80101d6:	d023      	beq.n	8010220 <USBD_SetConfig+0x7c>
 80101d8:	e062      	b.n	80102a0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80101da:	4b38      	ldr	r3, [pc, #224]	; (80102bc <USBD_SetConfig+0x118>)
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d01a      	beq.n	8010218 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80101e2:	4b36      	ldr	r3, [pc, #216]	; (80102bc <USBD_SetConfig+0x118>)
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	461a      	mov	r2, r3
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2203      	movs	r2, #3
 80101f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80101f4:	4b31      	ldr	r3, [pc, #196]	; (80102bc <USBD_SetConfig+0x118>)
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	4619      	mov	r1, r3
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7ff f9e8 	bl	800f5d0 <USBD_SetClassConfig>
 8010200:	4603      	mov	r3, r0
 8010202:	2b02      	cmp	r3, #2
 8010204:	d104      	bne.n	8010210 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8010206:	6839      	ldr	r1, [r7, #0]
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f000 f932 	bl	8010472 <USBD_CtlError>
            return;
 801020e:	e052      	b.n	80102b6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 f9f6 	bl	8010602 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8010216:	e04e      	b.n	80102b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f000 f9f2 	bl	8010602 <USBD_CtlSendStatus>
        break;
 801021e:	e04a      	b.n	80102b6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8010220:	4b26      	ldr	r3, [pc, #152]	; (80102bc <USBD_SetConfig+0x118>)
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d112      	bne.n	801024e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2202      	movs	r2, #2
 801022c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8010230:	4b22      	ldr	r3, [pc, #136]	; (80102bc <USBD_SetConfig+0x118>)
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	461a      	mov	r2, r3
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801023a:	4b20      	ldr	r3, [pc, #128]	; (80102bc <USBD_SetConfig+0x118>)
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	4619      	mov	r1, r3
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f7ff f9e4 	bl	800f60e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 f9db 	bl	8010602 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801024c:	e033      	b.n	80102b6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801024e:	4b1b      	ldr	r3, [pc, #108]	; (80102bc <USBD_SetConfig+0x118>)
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	461a      	mov	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	429a      	cmp	r2, r3
 801025a:	d01d      	beq.n	8010298 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	b2db      	uxtb	r3, r3
 8010262:	4619      	mov	r1, r3
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f7ff f9d2 	bl	800f60e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801026a:	4b14      	ldr	r3, [pc, #80]	; (80102bc <USBD_SetConfig+0x118>)
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	461a      	mov	r2, r3
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010274:	4b11      	ldr	r3, [pc, #68]	; (80102bc <USBD_SetConfig+0x118>)
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	4619      	mov	r1, r3
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff f9a8 	bl	800f5d0 <USBD_SetClassConfig>
 8010280:	4603      	mov	r3, r0
 8010282:	2b02      	cmp	r3, #2
 8010284:	d104      	bne.n	8010290 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8010286:	6839      	ldr	r1, [r7, #0]
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f000 f8f2 	bl	8010472 <USBD_CtlError>
            return;
 801028e:	e012      	b.n	80102b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f000 f9b6 	bl	8010602 <USBD_CtlSendStatus>
        break;
 8010296:	e00e      	b.n	80102b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 f9b2 	bl	8010602 <USBD_CtlSendStatus>
        break;
 801029e:	e00a      	b.n	80102b6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80102a0:	6839      	ldr	r1, [r7, #0]
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 f8e5 	bl	8010472 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80102a8:	4b04      	ldr	r3, [pc, #16]	; (80102bc <USBD_SetConfig+0x118>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	4619      	mov	r1, r3
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f7ff f9ad 	bl	800f60e <USBD_ClrClassConfig>
        break;
 80102b4:	bf00      	nop
    }
  }
}
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	20000204 	.word	0x20000204

080102c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	88db      	ldrh	r3, [r3, #6]
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d004      	beq.n	80102dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80102d2:	6839      	ldr	r1, [r7, #0]
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f000 f8cc 	bl	8010472 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80102da:	e022      	b.n	8010322 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	dc02      	bgt.n	80102ec <USBD_GetConfig+0x2c>
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	dc03      	bgt.n	80102f2 <USBD_GetConfig+0x32>
 80102ea:	e015      	b.n	8010318 <USBD_GetConfig+0x58>
 80102ec:	2b03      	cmp	r3, #3
 80102ee:	d00b      	beq.n	8010308 <USBD_GetConfig+0x48>
 80102f0:	e012      	b.n	8010318 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2200      	movs	r2, #0
 80102f6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	3308      	adds	r3, #8
 80102fc:	2201      	movs	r2, #1
 80102fe:	4619      	mov	r1, r3
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 f920 	bl	8010546 <USBD_CtlSendData>
        break;
 8010306:	e00c      	b.n	8010322 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	3304      	adds	r3, #4
 801030c:	2201      	movs	r2, #1
 801030e:	4619      	mov	r1, r3
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 f918 	bl	8010546 <USBD_CtlSendData>
        break;
 8010316:	e004      	b.n	8010322 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8010318:	6839      	ldr	r1, [r7, #0]
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f000 f8a9 	bl	8010472 <USBD_CtlError>
        break;
 8010320:	bf00      	nop
}
 8010322:	bf00      	nop
 8010324:	3708      	adds	r7, #8
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}

0801032a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b082      	sub	sp, #8
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
 8010332:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801033a:	3b01      	subs	r3, #1
 801033c:	2b02      	cmp	r3, #2
 801033e:	d81e      	bhi.n	801037e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	88db      	ldrh	r3, [r3, #6]
 8010344:	2b02      	cmp	r3, #2
 8010346:	d004      	beq.n	8010352 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8010348:	6839      	ldr	r1, [r7, #0]
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f000 f891 	bl	8010472 <USBD_CtlError>
        break;
 8010350:	e01a      	b.n	8010388 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2201      	movs	r2, #1
 8010356:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801035e:	2b00      	cmp	r3, #0
 8010360:	d005      	beq.n	801036e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	f043 0202 	orr.w	r2, r3, #2
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	330c      	adds	r3, #12
 8010372:	2202      	movs	r2, #2
 8010374:	4619      	mov	r1, r3
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 f8e5 	bl	8010546 <USBD_CtlSendData>
      break;
 801037c:	e004      	b.n	8010388 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801037e:	6839      	ldr	r1, [r7, #0]
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 f876 	bl	8010472 <USBD_CtlError>
      break;
 8010386:	bf00      	nop
  }
}
 8010388:	bf00      	nop
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	885b      	ldrh	r3, [r3, #2]
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d106      	bne.n	80103b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2201      	movs	r2, #1
 80103a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 f929 	bl	8010602 <USBD_CtlSendStatus>
  }
}
 80103b0:	bf00      	nop
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103c8:	3b01      	subs	r3, #1
 80103ca:	2b02      	cmp	r3, #2
 80103cc:	d80b      	bhi.n	80103e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	885b      	ldrh	r3, [r3, #2]
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d10c      	bne.n	80103f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2200      	movs	r2, #0
 80103da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80103de:	6878      	ldr	r0, [r7, #4]
 80103e0:	f000 f90f 	bl	8010602 <USBD_CtlSendStatus>
      }
      break;
 80103e4:	e004      	b.n	80103f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80103e6:	6839      	ldr	r1, [r7, #0]
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f000 f842 	bl	8010472 <USBD_CtlError>
      break;
 80103ee:	e000      	b.n	80103f2 <USBD_ClrFeature+0x3a>
      break;
 80103f0:	bf00      	nop
  }
}
 80103f2:	bf00      	nop
 80103f4:	3708      	adds	r7, #8
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80103fa:	b480      	push	{r7}
 80103fc:	b083      	sub	sp, #12
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
 8010402:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	781a      	ldrb	r2, [r3, #0]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	785a      	ldrb	r2, [r3, #1]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	3302      	adds	r3, #2
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	b29a      	uxth	r2, r3
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	3303      	adds	r3, #3
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	b29b      	uxth	r3, r3
 8010424:	021b      	lsls	r3, r3, #8
 8010426:	b29b      	uxth	r3, r3
 8010428:	4413      	add	r3, r2
 801042a:	b29a      	uxth	r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	3304      	adds	r3, #4
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	b29a      	uxth	r2, r3
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	3305      	adds	r3, #5
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	b29b      	uxth	r3, r3
 8010440:	021b      	lsls	r3, r3, #8
 8010442:	b29b      	uxth	r3, r3
 8010444:	4413      	add	r3, r2
 8010446:	b29a      	uxth	r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	3306      	adds	r3, #6
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	b29a      	uxth	r2, r3
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	3307      	adds	r3, #7
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	b29b      	uxth	r3, r3
 801045c:	021b      	lsls	r3, r3, #8
 801045e:	b29b      	uxth	r3, r3
 8010460:	4413      	add	r3, r2
 8010462:	b29a      	uxth	r2, r3
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	80da      	strh	r2, [r3, #6]

}
 8010468:	bf00      	nop
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	bc80      	pop	{r7}
 8010470:	4770      	bx	lr

08010472 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8010472:	b580      	push	{r7, lr}
 8010474:	b082      	sub	sp, #8
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
 801047a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801047c:	2180      	movs	r1, #128	; 0x80
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 fc2e 	bl	8010ce0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8010484:	2100      	movs	r1, #0
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f000 fc2a 	bl	8010ce0 <USBD_LL_StallEP>
}
 801048c:	bf00      	nop
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b086      	sub	sp, #24
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80104a0:	2300      	movs	r3, #0
 80104a2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d032      	beq.n	8010510 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	f000 f834 	bl	8010518 <USBD_GetLen>
 80104b0:	4603      	mov	r3, r0
 80104b2:	3301      	adds	r3, #1
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	005b      	lsls	r3, r3, #1
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80104be:	7dfb      	ldrb	r3, [r7, #23]
 80104c0:	1c5a      	adds	r2, r3, #1
 80104c2:	75fa      	strb	r2, [r7, #23]
 80104c4:	461a      	mov	r2, r3
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	4413      	add	r3, r2
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	7812      	ldrb	r2, [r2, #0]
 80104ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80104d0:	7dfb      	ldrb	r3, [r7, #23]
 80104d2:	1c5a      	adds	r2, r3, #1
 80104d4:	75fa      	strb	r2, [r7, #23]
 80104d6:	461a      	mov	r2, r3
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	4413      	add	r3, r2
 80104dc:	2203      	movs	r2, #3
 80104de:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80104e0:	e012      	b.n	8010508 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	1c5a      	adds	r2, r3, #1
 80104e6:	60fa      	str	r2, [r7, #12]
 80104e8:	7dfa      	ldrb	r2, [r7, #23]
 80104ea:	1c51      	adds	r1, r2, #1
 80104ec:	75f9      	strb	r1, [r7, #23]
 80104ee:	4611      	mov	r1, r2
 80104f0:	68ba      	ldr	r2, [r7, #8]
 80104f2:	440a      	add	r2, r1
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80104f8:	7dfb      	ldrb	r3, [r7, #23]
 80104fa:	1c5a      	adds	r2, r3, #1
 80104fc:	75fa      	strb	r2, [r7, #23]
 80104fe:	461a      	mov	r2, r3
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	4413      	add	r3, r2
 8010504:	2200      	movs	r2, #0
 8010506:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d1e8      	bne.n	80104e2 <USBD_GetString+0x4e>
    }
  }
}
 8010510:	bf00      	nop
 8010512:	3718      	adds	r7, #24
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010518:	b480      	push	{r7}
 801051a:	b085      	sub	sp, #20
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010520:	2300      	movs	r3, #0
 8010522:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8010524:	e005      	b.n	8010532 <USBD_GetLen+0x1a>
  {
    len++;
 8010526:	7bfb      	ldrb	r3, [r7, #15]
 8010528:	3301      	adds	r3, #1
 801052a:	73fb      	strb	r3, [r7, #15]
    buf++;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	3301      	adds	r3, #1
 8010530:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d1f5      	bne.n	8010526 <USBD_GetLen+0xe>
  }

  return len;
 801053a:	7bfb      	ldrb	r3, [r7, #15]
}
 801053c:	4618      	mov	r0, r3
 801053e:	3714      	adds	r7, #20
 8010540:	46bd      	mov	sp, r7
 8010542:	bc80      	pop	{r7}
 8010544:	4770      	bx	lr

08010546 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8010546:	b580      	push	{r7, lr}
 8010548:	b084      	sub	sp, #16
 801054a:	af00      	add	r7, sp, #0
 801054c:	60f8      	str	r0, [r7, #12]
 801054e:	60b9      	str	r1, [r7, #8]
 8010550:	4613      	mov	r3, r2
 8010552:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2202      	movs	r2, #2
 8010558:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801055c:	88fa      	ldrh	r2, [r7, #6]
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010562:	88fa      	ldrh	r2, [r7, #6]
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010568:	88fb      	ldrh	r3, [r7, #6]
 801056a:	68ba      	ldr	r2, [r7, #8]
 801056c:	2100      	movs	r1, #0
 801056e:	68f8      	ldr	r0, [r7, #12]
 8010570:	f000 fc3f 	bl	8010df2 <USBD_LL_Transmit>

  return USBD_OK;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3710      	adds	r7, #16
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}

0801057e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801057e:	b580      	push	{r7, lr}
 8010580:	b084      	sub	sp, #16
 8010582:	af00      	add	r7, sp, #0
 8010584:	60f8      	str	r0, [r7, #12]
 8010586:	60b9      	str	r1, [r7, #8]
 8010588:	4613      	mov	r3, r2
 801058a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801058c:	88fb      	ldrh	r3, [r7, #6]
 801058e:	68ba      	ldr	r2, [r7, #8]
 8010590:	2100      	movs	r1, #0
 8010592:	68f8      	ldr	r0, [r7, #12]
 8010594:	f000 fc2d 	bl	8010df2 <USBD_LL_Transmit>

  return USBD_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b084      	sub	sp, #16
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	60f8      	str	r0, [r7, #12]
 80105aa:	60b9      	str	r1, [r7, #8]
 80105ac:	4613      	mov	r3, r2
 80105ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	2203      	movs	r2, #3
 80105b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80105b8:	88fa      	ldrh	r2, [r7, #6]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80105c0:	88fa      	ldrh	r2, [r7, #6]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80105c8:	88fb      	ldrh	r3, [r7, #6]
 80105ca:	68ba      	ldr	r2, [r7, #8]
 80105cc:	2100      	movs	r1, #0
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	f000 fc32 	bl	8010e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80105d4:	2300      	movs	r3, #0
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3710      	adds	r7, #16
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}

080105de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80105de:	b580      	push	{r7, lr}
 80105e0:	b084      	sub	sp, #16
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	60f8      	str	r0, [r7, #12]
 80105e6:	60b9      	str	r1, [r7, #8]
 80105e8:	4613      	mov	r3, r2
 80105ea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80105ec:	88fb      	ldrh	r3, [r7, #6]
 80105ee:	68ba      	ldr	r2, [r7, #8]
 80105f0:	2100      	movs	r1, #0
 80105f2:	68f8      	ldr	r0, [r7, #12]
 80105f4:	f000 fc20 	bl	8010e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80105f8:	2300      	movs	r3, #0
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3710      	adds	r7, #16
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010602:	b580      	push	{r7, lr}
 8010604:	b082      	sub	sp, #8
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2204      	movs	r2, #4
 801060e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010612:	2300      	movs	r3, #0
 8010614:	2200      	movs	r2, #0
 8010616:	2100      	movs	r1, #0
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f000 fbea 	bl	8010df2 <USBD_LL_Transmit>

  return USBD_OK;
 801061e:	2300      	movs	r3, #0
}
 8010620:	4618      	mov	r0, r3
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2205      	movs	r2, #5
 8010634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010638:	2300      	movs	r3, #0
 801063a:	2200      	movs	r2, #0
 801063c:	2100      	movs	r1, #0
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 fbfa 	bl	8010e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010644:	2300      	movs	r3, #0
}
 8010646:	4618      	mov	r0, r3
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
	...

08010650 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010654:	2200      	movs	r2, #0
 8010656:	4912      	ldr	r1, [pc, #72]	; (80106a0 <MX_USB_DEVICE_Init+0x50>)
 8010658:	4812      	ldr	r0, [pc, #72]	; (80106a4 <MX_USB_DEVICE_Init+0x54>)
 801065a:	f7fe ff5f 	bl	800f51c <USBD_Init>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d001      	beq.n	8010668 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010664:	f7f7 f94e 	bl	8007904 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010668:	490f      	ldr	r1, [pc, #60]	; (80106a8 <MX_USB_DEVICE_Init+0x58>)
 801066a:	480e      	ldr	r0, [pc, #56]	; (80106a4 <MX_USB_DEVICE_Init+0x54>)
 801066c:	f7fe ff81 	bl	800f572 <USBD_RegisterClass>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d001      	beq.n	801067a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010676:	f7f7 f945 	bl	8007904 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801067a:	490c      	ldr	r1, [pc, #48]	; (80106ac <MX_USB_DEVICE_Init+0x5c>)
 801067c:	4809      	ldr	r0, [pc, #36]	; (80106a4 <MX_USB_DEVICE_Init+0x54>)
 801067e:	f7fe fee1 	bl	800f444 <USBD_CDC_RegisterInterface>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	d001      	beq.n	801068c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010688:	f7f7 f93c 	bl	8007904 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801068c:	4805      	ldr	r0, [pc, #20]	; (80106a4 <MX_USB_DEVICE_Init+0x54>)
 801068e:	f7fe ff89 	bl	800f5a4 <USBD_Start>
 8010692:	4603      	mov	r3, r0
 8010694:	2b00      	cmp	r3, #0
 8010696:	d001      	beq.n	801069c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010698:	f7f7 f934 	bl	8007904 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801069c:	bf00      	nop
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	2000012c 	.word	0x2000012c
 80106a4:	200006d8 	.word	0x200006d8
 80106a8:	20000018 	.word	0x20000018
 80106ac:	2000011c 	.word	0x2000011c

080106b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80106b4:	2200      	movs	r2, #0
 80106b6:	4905      	ldr	r1, [pc, #20]	; (80106cc <CDC_Init_FS+0x1c>)
 80106b8:	4805      	ldr	r0, [pc, #20]	; (80106d0 <CDC_Init_FS+0x20>)
 80106ba:	f7fe fed9 	bl	800f470 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80106be:	4905      	ldr	r1, [pc, #20]	; (80106d4 <CDC_Init_FS+0x24>)
 80106c0:	4803      	ldr	r0, [pc, #12]	; (80106d0 <CDC_Init_FS+0x20>)
 80106c2:	f7fe feee 	bl	800f4a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80106c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	20000d84 	.word	0x20000d84
 80106d0:	200006d8 	.word	0x200006d8
 80106d4:	2000099c 	.word	0x2000099c

080106d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80106d8:	b480      	push	{r7}
 80106da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80106dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80106de:	4618      	mov	r0, r3
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bc80      	pop	{r7}
 80106e4:	4770      	bx	lr
	...

080106e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b083      	sub	sp, #12
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	4603      	mov	r3, r0
 80106f0:	6039      	str	r1, [r7, #0]
 80106f2:	71fb      	strb	r3, [r7, #7]
 80106f4:	4613      	mov	r3, r2
 80106f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80106f8:	79fb      	ldrb	r3, [r7, #7]
 80106fa:	2b23      	cmp	r3, #35	; 0x23
 80106fc:	d84a      	bhi.n	8010794 <CDC_Control_FS+0xac>
 80106fe:	a201      	add	r2, pc, #4	; (adr r2, 8010704 <CDC_Control_FS+0x1c>)
 8010700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010704:	08010795 	.word	0x08010795
 8010708:	08010795 	.word	0x08010795
 801070c:	08010795 	.word	0x08010795
 8010710:	08010795 	.word	0x08010795
 8010714:	08010795 	.word	0x08010795
 8010718:	08010795 	.word	0x08010795
 801071c:	08010795 	.word	0x08010795
 8010720:	08010795 	.word	0x08010795
 8010724:	08010795 	.word	0x08010795
 8010728:	08010795 	.word	0x08010795
 801072c:	08010795 	.word	0x08010795
 8010730:	08010795 	.word	0x08010795
 8010734:	08010795 	.word	0x08010795
 8010738:	08010795 	.word	0x08010795
 801073c:	08010795 	.word	0x08010795
 8010740:	08010795 	.word	0x08010795
 8010744:	08010795 	.word	0x08010795
 8010748:	08010795 	.word	0x08010795
 801074c:	08010795 	.word	0x08010795
 8010750:	08010795 	.word	0x08010795
 8010754:	08010795 	.word	0x08010795
 8010758:	08010795 	.word	0x08010795
 801075c:	08010795 	.word	0x08010795
 8010760:	08010795 	.word	0x08010795
 8010764:	08010795 	.word	0x08010795
 8010768:	08010795 	.word	0x08010795
 801076c:	08010795 	.word	0x08010795
 8010770:	08010795 	.word	0x08010795
 8010774:	08010795 	.word	0x08010795
 8010778:	08010795 	.word	0x08010795
 801077c:	08010795 	.word	0x08010795
 8010780:	08010795 	.word	0x08010795
 8010784:	08010795 	.word	0x08010795
 8010788:	08010795 	.word	0x08010795
 801078c:	08010795 	.word	0x08010795
 8010790:	08010795 	.word	0x08010795
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010794:	bf00      	nop
  }

  return (USBD_OK);
 8010796:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010798:	4618      	mov	r0, r3
 801079a:	370c      	adds	r7, #12
 801079c:	46bd      	mov	sp, r7
 801079e:	bc80      	pop	{r7}
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop

080107a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80107ae:	6879      	ldr	r1, [r7, #4]
 80107b0:	4805      	ldr	r0, [pc, #20]	; (80107c8 <CDC_Receive_FS+0x24>)
 80107b2:	f7fe fe76 	bl	800f4a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80107b6:	4804      	ldr	r0, [pc, #16]	; (80107c8 <CDC_Receive_FS+0x24>)
 80107b8:	f7fe fe86 	bl	800f4c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80107bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	200006d8 	.word	0x200006d8

080107cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	4603      	mov	r3, r0
 80107d4:	6039      	str	r1, [r7, #0]
 80107d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	2212      	movs	r2, #18
 80107dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80107de:	4b03      	ldr	r3, [pc, #12]	; (80107ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	370c      	adds	r7, #12
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bc80      	pop	{r7}
 80107e8:	4770      	bx	lr
 80107ea:	bf00      	nop
 80107ec:	20000148 	.word	0x20000148

080107f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	4603      	mov	r3, r0
 80107f8:	6039      	str	r1, [r7, #0]
 80107fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	2204      	movs	r2, #4
 8010800:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010802:	4b03      	ldr	r3, [pc, #12]	; (8010810 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010804:	4618      	mov	r0, r3
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	bc80      	pop	{r7}
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop
 8010810:	2000015c 	.word	0x2000015c

08010814 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	4603      	mov	r3, r0
 801081c:	6039      	str	r1, [r7, #0]
 801081e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010820:	79fb      	ldrb	r3, [r7, #7]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d105      	bne.n	8010832 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010826:	683a      	ldr	r2, [r7, #0]
 8010828:	4907      	ldr	r1, [pc, #28]	; (8010848 <USBD_FS_ProductStrDescriptor+0x34>)
 801082a:	4808      	ldr	r0, [pc, #32]	; (801084c <USBD_FS_ProductStrDescriptor+0x38>)
 801082c:	f7ff fe32 	bl	8010494 <USBD_GetString>
 8010830:	e004      	b.n	801083c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010832:	683a      	ldr	r2, [r7, #0]
 8010834:	4904      	ldr	r1, [pc, #16]	; (8010848 <USBD_FS_ProductStrDescriptor+0x34>)
 8010836:	4805      	ldr	r0, [pc, #20]	; (801084c <USBD_FS_ProductStrDescriptor+0x38>)
 8010838:	f7ff fe2c 	bl	8010494 <USBD_GetString>
  }
  return USBD_StrDesc;
 801083c:	4b02      	ldr	r3, [pc, #8]	; (8010848 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801083e:	4618      	mov	r0, r3
 8010840:	3708      	adds	r7, #8
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	2000116c 	.word	0x2000116c
 801084c:	08012cb4 	.word	0x08012cb4

08010850 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	4603      	mov	r3, r0
 8010858:	6039      	str	r1, [r7, #0]
 801085a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801085c:	683a      	ldr	r2, [r7, #0]
 801085e:	4904      	ldr	r1, [pc, #16]	; (8010870 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010860:	4804      	ldr	r0, [pc, #16]	; (8010874 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010862:	f7ff fe17 	bl	8010494 <USBD_GetString>
  return USBD_StrDesc;
 8010866:	4b02      	ldr	r3, [pc, #8]	; (8010870 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010868:	4618      	mov	r0, r3
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}
 8010870:	2000116c 	.word	0x2000116c
 8010874:	08012ccc 	.word	0x08012ccc

08010878 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	4603      	mov	r3, r0
 8010880:	6039      	str	r1, [r7, #0]
 8010882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	221a      	movs	r2, #26
 8010888:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801088a:	f000 f843 	bl	8010914 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801088e:	4b02      	ldr	r3, [pc, #8]	; (8010898 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	20000160 	.word	0x20000160

0801089c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	4603      	mov	r3, r0
 80108a4:	6039      	str	r1, [r7, #0]
 80108a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80108a8:	79fb      	ldrb	r3, [r7, #7]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d105      	bne.n	80108ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80108ae:	683a      	ldr	r2, [r7, #0]
 80108b0:	4907      	ldr	r1, [pc, #28]	; (80108d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80108b2:	4808      	ldr	r0, [pc, #32]	; (80108d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80108b4:	f7ff fdee 	bl	8010494 <USBD_GetString>
 80108b8:	e004      	b.n	80108c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80108ba:	683a      	ldr	r2, [r7, #0]
 80108bc:	4904      	ldr	r1, [pc, #16]	; (80108d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80108be:	4805      	ldr	r0, [pc, #20]	; (80108d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80108c0:	f7ff fde8 	bl	8010494 <USBD_GetString>
  }
  return USBD_StrDesc;
 80108c4:	4b02      	ldr	r3, [pc, #8]	; (80108d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3708      	adds	r7, #8
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	2000116c 	.word	0x2000116c
 80108d4:	08012ce0 	.word	0x08012ce0

080108d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	4603      	mov	r3, r0
 80108e0:	6039      	str	r1, [r7, #0]
 80108e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80108e4:	79fb      	ldrb	r3, [r7, #7]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d105      	bne.n	80108f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80108ea:	683a      	ldr	r2, [r7, #0]
 80108ec:	4907      	ldr	r1, [pc, #28]	; (801090c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80108ee:	4808      	ldr	r0, [pc, #32]	; (8010910 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80108f0:	f7ff fdd0 	bl	8010494 <USBD_GetString>
 80108f4:	e004      	b.n	8010900 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80108f6:	683a      	ldr	r2, [r7, #0]
 80108f8:	4904      	ldr	r1, [pc, #16]	; (801090c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80108fa:	4805      	ldr	r0, [pc, #20]	; (8010910 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80108fc:	f7ff fdca 	bl	8010494 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010900:	4b02      	ldr	r3, [pc, #8]	; (801090c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010902:	4618      	mov	r0, r3
 8010904:	3708      	adds	r7, #8
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	2000116c 	.word	0x2000116c
 8010910:	08012cec 	.word	0x08012cec

08010914 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801091a:	4b0f      	ldr	r3, [pc, #60]	; (8010958 <Get_SerialNum+0x44>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010920:	4b0e      	ldr	r3, [pc, #56]	; (801095c <Get_SerialNum+0x48>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010926:	4b0e      	ldr	r3, [pc, #56]	; (8010960 <Get_SerialNum+0x4c>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	4413      	add	r3, r2
 8010932:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d009      	beq.n	801094e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801093a:	2208      	movs	r2, #8
 801093c:	4909      	ldr	r1, [pc, #36]	; (8010964 <Get_SerialNum+0x50>)
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f000 f814 	bl	801096c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010944:	2204      	movs	r2, #4
 8010946:	4908      	ldr	r1, [pc, #32]	; (8010968 <Get_SerialNum+0x54>)
 8010948:	68b8      	ldr	r0, [r7, #8]
 801094a:	f000 f80f 	bl	801096c <IntToUnicode>
  }
}
 801094e:	bf00      	nop
 8010950:	3710      	adds	r7, #16
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	1ffff7e8 	.word	0x1ffff7e8
 801095c:	1ffff7ec 	.word	0x1ffff7ec
 8010960:	1ffff7f0 	.word	0x1ffff7f0
 8010964:	20000162 	.word	0x20000162
 8010968:	20000172 	.word	0x20000172

0801096c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801096c:	b480      	push	{r7}
 801096e:	b087      	sub	sp, #28
 8010970:	af00      	add	r7, sp, #0
 8010972:	60f8      	str	r0, [r7, #12]
 8010974:	60b9      	str	r1, [r7, #8]
 8010976:	4613      	mov	r3, r2
 8010978:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801097a:	2300      	movs	r3, #0
 801097c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801097e:	2300      	movs	r3, #0
 8010980:	75fb      	strb	r3, [r7, #23]
 8010982:	e027      	b.n	80109d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	0f1b      	lsrs	r3, r3, #28
 8010988:	2b09      	cmp	r3, #9
 801098a:	d80b      	bhi.n	80109a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	0f1b      	lsrs	r3, r3, #28
 8010990:	b2da      	uxtb	r2, r3
 8010992:	7dfb      	ldrb	r3, [r7, #23]
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	4619      	mov	r1, r3
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	440b      	add	r3, r1
 801099c:	3230      	adds	r2, #48	; 0x30
 801099e:	b2d2      	uxtb	r2, r2
 80109a0:	701a      	strb	r2, [r3, #0]
 80109a2:	e00a      	b.n	80109ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	0f1b      	lsrs	r3, r3, #28
 80109a8:	b2da      	uxtb	r2, r3
 80109aa:	7dfb      	ldrb	r3, [r7, #23]
 80109ac:	005b      	lsls	r3, r3, #1
 80109ae:	4619      	mov	r1, r3
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	440b      	add	r3, r1
 80109b4:	3237      	adds	r2, #55	; 0x37
 80109b6:	b2d2      	uxtb	r2, r2
 80109b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	011b      	lsls	r3, r3, #4
 80109be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80109c0:	7dfb      	ldrb	r3, [r7, #23]
 80109c2:	005b      	lsls	r3, r3, #1
 80109c4:	3301      	adds	r3, #1
 80109c6:	68ba      	ldr	r2, [r7, #8]
 80109c8:	4413      	add	r3, r2
 80109ca:	2200      	movs	r2, #0
 80109cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80109ce:	7dfb      	ldrb	r3, [r7, #23]
 80109d0:	3301      	adds	r3, #1
 80109d2:	75fb      	strb	r3, [r7, #23]
 80109d4:	7dfa      	ldrb	r2, [r7, #23]
 80109d6:	79fb      	ldrb	r3, [r7, #7]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d3d3      	bcc.n	8010984 <IntToUnicode+0x18>
  }
}
 80109dc:	bf00      	nop
 80109de:	bf00      	nop
 80109e0:	371c      	adds	r7, #28
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bc80      	pop	{r7}
 80109e6:	4770      	bx	lr

080109e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b084      	sub	sp, #16
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4a0d      	ldr	r2, [pc, #52]	; (8010a2c <HAL_PCD_MspInit+0x44>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d113      	bne.n	8010a22 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80109fa:	4b0d      	ldr	r3, [pc, #52]	; (8010a30 <HAL_PCD_MspInit+0x48>)
 80109fc:	69db      	ldr	r3, [r3, #28]
 80109fe:	4a0c      	ldr	r2, [pc, #48]	; (8010a30 <HAL_PCD_MspInit+0x48>)
 8010a00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010a04:	61d3      	str	r3, [r2, #28]
 8010a06:	4b0a      	ldr	r3, [pc, #40]	; (8010a30 <HAL_PCD_MspInit+0x48>)
 8010a08:	69db      	ldr	r3, [r3, #28]
 8010a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010a0e:	60fb      	str	r3, [r7, #12]
 8010a10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8010a12:	2200      	movs	r2, #0
 8010a14:	2100      	movs	r1, #0
 8010a16:	2014      	movs	r0, #20
 8010a18:	f7f7 fb97 	bl	800814a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8010a1c:	2014      	movs	r0, #20
 8010a1e:	f7f7 fbb0 	bl	8008182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010a22:	bf00      	nop
 8010a24:	3710      	adds	r7, #16
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	bf00      	nop
 8010a2c:	40005c00 	.word	0x40005c00
 8010a30:	40021000 	.word	0x40021000

08010a34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010a48:	4619      	mov	r1, r3
 8010a4a:	4610      	mov	r0, r2
 8010a4c:	f7fe fdf2 	bl	800f634 <USBD_LL_SetupStage>
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	460b      	mov	r3, r1
 8010a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8010a6a:	78fa      	ldrb	r2, [r7, #3]
 8010a6c:	6879      	ldr	r1, [r7, #4]
 8010a6e:	4613      	mov	r3, r2
 8010a70:	009b      	lsls	r3, r3, #2
 8010a72:	4413      	add	r3, r2
 8010a74:	00db      	lsls	r3, r3, #3
 8010a76:	440b      	add	r3, r1
 8010a78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	78fb      	ldrb	r3, [r7, #3]
 8010a80:	4619      	mov	r1, r3
 8010a82:	f7fe fe24 	bl	800f6ce <USBD_LL_DataOutStage>
}
 8010a86:	bf00      	nop
 8010a88:	3708      	adds	r7, #8
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b082      	sub	sp, #8
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	6078      	str	r0, [r7, #4]
 8010a96:	460b      	mov	r3, r1
 8010a98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8010aa0:	78fa      	ldrb	r2, [r7, #3]
 8010aa2:	6879      	ldr	r1, [r7, #4]
 8010aa4:	4613      	mov	r3, r2
 8010aa6:	009b      	lsls	r3, r3, #2
 8010aa8:	4413      	add	r3, r2
 8010aaa:	00db      	lsls	r3, r3, #3
 8010aac:	440b      	add	r3, r1
 8010aae:	333c      	adds	r3, #60	; 0x3c
 8010ab0:	681a      	ldr	r2, [r3, #0]
 8010ab2:	78fb      	ldrb	r3, [r7, #3]
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	f7fe fe7b 	bl	800f7b0 <USBD_LL_DataInStage>
}
 8010aba:	bf00      	nop
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b082      	sub	sp, #8
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7fe ff8b 	bl	800f9ec <USBD_LL_SOF>
}
 8010ad6:	bf00      	nop
 8010ad8:	3708      	adds	r7, #8
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b084      	sub	sp, #16
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	2b02      	cmp	r3, #2
 8010af0:	d001      	beq.n	8010af6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010af2:	f7f6 ff07 	bl	8007904 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010afc:	7bfa      	ldrb	r2, [r7, #15]
 8010afe:	4611      	mov	r1, r2
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7fe ff3b 	bl	800f97c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7fe fef4 	bl	800f8fa <USBD_LL_Reset>
}
 8010b12:	bf00      	nop
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
	...

08010b1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7fe ff35 	bl	800f99a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	699b      	ldr	r3, [r3, #24]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d005      	beq.n	8010b44 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b38:	4b04      	ldr	r3, [pc, #16]	; (8010b4c <HAL_PCD_SuspendCallback+0x30>)
 8010b3a:	691b      	ldr	r3, [r3, #16]
 8010b3c:	4a03      	ldr	r2, [pc, #12]	; (8010b4c <HAL_PCD_SuspendCallback+0x30>)
 8010b3e:	f043 0306 	orr.w	r3, r3, #6
 8010b42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010b44:	bf00      	nop
 8010b46:	3708      	adds	r7, #8
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}
 8010b4c:	e000ed00 	.word	0xe000ed00

08010b50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fe ff2f 	bl	800f9c2 <USBD_LL_Resume>
}
 8010b64:	bf00      	nop
 8010b66:	3708      	adds	r7, #8
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8010b74:	4a28      	ldr	r2, [pc, #160]	; (8010c18 <USBD_LL_Init+0xac>)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	4a26      	ldr	r2, [pc, #152]	; (8010c18 <USBD_LL_Init+0xac>)
 8010b80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8010b84:	4b24      	ldr	r3, [pc, #144]	; (8010c18 <USBD_LL_Init+0xac>)
 8010b86:	4a25      	ldr	r2, [pc, #148]	; (8010c1c <USBD_LL_Init+0xb0>)
 8010b88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010b8a:	4b23      	ldr	r3, [pc, #140]	; (8010c18 <USBD_LL_Init+0xac>)
 8010b8c:	2208      	movs	r2, #8
 8010b8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010b90:	4b21      	ldr	r3, [pc, #132]	; (8010c18 <USBD_LL_Init+0xac>)
 8010b92:	2202      	movs	r2, #2
 8010b94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010b96:	4b20      	ldr	r3, [pc, #128]	; (8010c18 <USBD_LL_Init+0xac>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010b9c:	4b1e      	ldr	r3, [pc, #120]	; (8010c18 <USBD_LL_Init+0xac>)
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010ba2:	4b1d      	ldr	r3, [pc, #116]	; (8010c18 <USBD_LL_Init+0xac>)
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010ba8:	481b      	ldr	r0, [pc, #108]	; (8010c18 <USBD_LL_Init+0xac>)
 8010baa:	f7f7 feb5 	bl	8008918 <HAL_PCD_Init>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d001      	beq.n	8010bb8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8010bb4:	f7f6 fea6 	bl	8007904 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010bbe:	2318      	movs	r3, #24
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	f7f9 fbd6 	bl	800a374 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010bce:	2358      	movs	r3, #88	; 0x58
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	2180      	movs	r1, #128	; 0x80
 8010bd4:	f7f9 fbce 	bl	800a374 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010bde:	23c0      	movs	r3, #192	; 0xc0
 8010be0:	2200      	movs	r2, #0
 8010be2:	2181      	movs	r1, #129	; 0x81
 8010be4:	f7f9 fbc6 	bl	800a374 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010bee:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	2101      	movs	r1, #1
 8010bf6:	f7f9 fbbd 	bl	800a374 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c04:	2200      	movs	r2, #0
 8010c06:	2182      	movs	r1, #130	; 0x82
 8010c08:	f7f9 fbb4 	bl	800a374 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010c0c:	2300      	movs	r3, #0
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3708      	adds	r7, #8
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	2000136c 	.word	0x2000136c
 8010c1c:	40005c00 	.word	0x40005c00

08010c20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7f7 ff6d 	bl	8008b16 <HAL_PCD_Start>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c40:	7bfb      	ldrb	r3, [r7, #15]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f000 f94e 	bl	8010ee4 <USBD_Get_USB_Status>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3710      	adds	r7, #16
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b084      	sub	sp, #16
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
 8010c5e:	4608      	mov	r0, r1
 8010c60:	4611      	mov	r1, r2
 8010c62:	461a      	mov	r2, r3
 8010c64:	4603      	mov	r3, r0
 8010c66:	70fb      	strb	r3, [r7, #3]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	70bb      	strb	r3, [r7, #2]
 8010c6c:	4613      	mov	r3, r2
 8010c6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c70:	2300      	movs	r3, #0
 8010c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c74:	2300      	movs	r3, #0
 8010c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010c7e:	78bb      	ldrb	r3, [r7, #2]
 8010c80:	883a      	ldrh	r2, [r7, #0]
 8010c82:	78f9      	ldrb	r1, [r7, #3]
 8010c84:	f7f8 f8c4 	bl	8008e10 <HAL_PCD_EP_Open>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c8c:	7bfb      	ldrb	r3, [r7, #15]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f000 f928 	bl	8010ee4 <USBD_Get_USB_Status>
 8010c94:	4603      	mov	r3, r0
 8010c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3710      	adds	r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b084      	sub	sp, #16
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
 8010caa:	460b      	mov	r3, r1
 8010cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010cbc:	78fa      	ldrb	r2, [r7, #3]
 8010cbe:	4611      	mov	r1, r2
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7f8 f902 	bl	8008eca <HAL_PCD_EP_Close>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cca:	7bfb      	ldrb	r3, [r7, #15]
 8010ccc:	4618      	mov	r0, r3
 8010cce:	f000 f909 	bl	8010ee4 <USBD_Get_USB_Status>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cec:	2300      	movs	r3, #0
 8010cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010cfa:	78fa      	ldrb	r2, [r7, #3]
 8010cfc:	4611      	mov	r1, r2
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7f8 f9aa 	bl	8009058 <HAL_PCD_EP_SetStall>
 8010d04:	4603      	mov	r3, r0
 8010d06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d08:	7bfb      	ldrb	r3, [r7, #15]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f000 f8ea 	bl	8010ee4 <USBD_Get_USB_Status>
 8010d10:	4603      	mov	r3, r0
 8010d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3710      	adds	r7, #16
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d1e:	b580      	push	{r7, lr}
 8010d20:	b084      	sub	sp, #16
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	6078      	str	r0, [r7, #4]
 8010d26:	460b      	mov	r3, r1
 8010d28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d38:	78fa      	ldrb	r2, [r7, #3]
 8010d3a:	4611      	mov	r1, r2
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7f8 f9eb 	bl	8009118 <HAL_PCD_EP_ClrStall>
 8010d42:	4603      	mov	r3, r0
 8010d44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d46:	7bfb      	ldrb	r3, [r7, #15]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f000 f8cb 	bl	8010ee4 <USBD_Get_USB_Status>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3710      	adds	r7, #16
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d5c:	b480      	push	{r7}
 8010d5e:	b085      	sub	sp, #20
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	460b      	mov	r3, r1
 8010d66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	da0c      	bge.n	8010d92 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010d78:	78fb      	ldrb	r3, [r7, #3]
 8010d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d7e:	68f9      	ldr	r1, [r7, #12]
 8010d80:	1c5a      	adds	r2, r3, #1
 8010d82:	4613      	mov	r3, r2
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	4413      	add	r3, r2
 8010d88:	00db      	lsls	r3, r3, #3
 8010d8a:	440b      	add	r3, r1
 8010d8c:	3302      	adds	r3, #2
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	e00b      	b.n	8010daa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010d92:	78fb      	ldrb	r3, [r7, #3]
 8010d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010d98:	68f9      	ldr	r1, [r7, #12]
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	4413      	add	r3, r2
 8010da0:	00db      	lsls	r3, r3, #3
 8010da2:	440b      	add	r3, r1
 8010da4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8010da8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3714      	adds	r7, #20
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bc80      	pop	{r7}
 8010db2:	4770      	bx	lr

08010db4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010dce:	78fa      	ldrb	r2, [r7, #3]
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7f7 fff7 	bl	8008dc6 <HAL_PCD_SetAddress>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ddc:	7bfb      	ldrb	r3, [r7, #15]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f000 f880 	bl	8010ee4 <USBD_Get_USB_Status>
 8010de4:	4603      	mov	r3, r0
 8010de6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3710      	adds	r7, #16
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}

08010df2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010df2:	b580      	push	{r7, lr}
 8010df4:	b086      	sub	sp, #24
 8010df6:	af00      	add	r7, sp, #0
 8010df8:	60f8      	str	r0, [r7, #12]
 8010dfa:	607a      	str	r2, [r7, #4]
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	460b      	mov	r3, r1
 8010e00:	72fb      	strb	r3, [r7, #11]
 8010e02:	4613      	mov	r3, r2
 8010e04:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e06:	2300      	movs	r3, #0
 8010e08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010e14:	893b      	ldrh	r3, [r7, #8]
 8010e16:	7af9      	ldrb	r1, [r7, #11]
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	f7f8 f8e6 	bl	8008fea <HAL_PCD_EP_Transmit>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e22:	7dfb      	ldrb	r3, [r7, #23]
 8010e24:	4618      	mov	r0, r3
 8010e26:	f000 f85d 	bl	8010ee4 <USBD_Get_USB_Status>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010e2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3718      	adds	r7, #24
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}

08010e38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b086      	sub	sp, #24
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	60f8      	str	r0, [r7, #12]
 8010e40:	607a      	str	r2, [r7, #4]
 8010e42:	461a      	mov	r2, r3
 8010e44:	460b      	mov	r3, r1
 8010e46:	72fb      	strb	r3, [r7, #11]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e50:	2300      	movs	r3, #0
 8010e52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010e5a:	893b      	ldrh	r3, [r7, #8]
 8010e5c:	7af9      	ldrb	r1, [r7, #11]
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	f7f8 f87b 	bl	8008f5a <HAL_PCD_EP_Receive>
 8010e64:	4603      	mov	r3, r0
 8010e66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e68:	7dfb      	ldrb	r3, [r7, #23]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f000 f83a 	bl	8010ee4 <USBD_Get_USB_Status>
 8010e70:	4603      	mov	r3, r0
 8010e72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010e74:	7dbb      	ldrb	r3, [r7, #22]
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3718      	adds	r7, #24
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}

08010e7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e7e:	b580      	push	{r7, lr}
 8010e80:	b082      	sub	sp, #8
 8010e82:	af00      	add	r7, sp, #0
 8010e84:	6078      	str	r0, [r7, #4]
 8010e86:	460b      	mov	r3, r1
 8010e88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010e90:	78fa      	ldrb	r2, [r7, #3]
 8010e92:	4611      	mov	r1, r2
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7f8 f891 	bl	8008fbc <HAL_PCD_EP_GetRxCount>
 8010e9a:	4603      	mov	r3, r0
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3708      	adds	r7, #8
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010eac:	4b02      	ldr	r3, [pc, #8]	; (8010eb8 <USBD_static_malloc+0x14>)
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	370c      	adds	r7, #12
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bc80      	pop	{r7}
 8010eb6:	4770      	bx	lr
 8010eb8:	20000208 	.word	0x20000208

08010ebc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b083      	sub	sp, #12
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]

}
 8010ec4:	bf00      	nop
 8010ec6:	370c      	adds	r7, #12
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bc80      	pop	{r7}
 8010ecc:	4770      	bx	lr

08010ece <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ece:	b480      	push	{r7}
 8010ed0:	b083      	sub	sp, #12
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	6078      	str	r0, [r7, #4]
 8010ed6:	460b      	mov	r3, r1
 8010ed8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8010eda:	bf00      	nop
 8010edc:	370c      	adds	r7, #12
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bc80      	pop	{r7}
 8010ee2:	4770      	bx	lr

08010ee4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b085      	sub	sp, #20
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	4603      	mov	r3, r0
 8010eec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010ef2:	79fb      	ldrb	r3, [r7, #7]
 8010ef4:	2b03      	cmp	r3, #3
 8010ef6:	d817      	bhi.n	8010f28 <USBD_Get_USB_Status+0x44>
 8010ef8:	a201      	add	r2, pc, #4	; (adr r2, 8010f00 <USBD_Get_USB_Status+0x1c>)
 8010efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010efe:	bf00      	nop
 8010f00:	08010f11 	.word	0x08010f11
 8010f04:	08010f17 	.word	0x08010f17
 8010f08:	08010f1d 	.word	0x08010f1d
 8010f0c:	08010f23 	.word	0x08010f23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010f10:	2300      	movs	r3, #0
 8010f12:	73fb      	strb	r3, [r7, #15]
    break;
 8010f14:	e00b      	b.n	8010f2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010f16:	2302      	movs	r3, #2
 8010f18:	73fb      	strb	r3, [r7, #15]
    break;
 8010f1a:	e008      	b.n	8010f2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8010f20:	e005      	b.n	8010f2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010f22:	2302      	movs	r3, #2
 8010f24:	73fb      	strb	r3, [r7, #15]
    break;
 8010f26:	e002      	b.n	8010f2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010f28:	2302      	movs	r3, #2
 8010f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8010f2c:	bf00      	nop
  }
  return usb_status;
 8010f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3714      	adds	r7, #20
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bc80      	pop	{r7}
 8010f38:	4770      	bx	lr
 8010f3a:	bf00      	nop

08010f3c <__assert_func>:
 8010f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f3e:	4614      	mov	r4, r2
 8010f40:	461a      	mov	r2, r3
 8010f42:	4b09      	ldr	r3, [pc, #36]	; (8010f68 <__assert_func+0x2c>)
 8010f44:	4605      	mov	r5, r0
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	68d8      	ldr	r0, [r3, #12]
 8010f4a:	b14c      	cbz	r4, 8010f60 <__assert_func+0x24>
 8010f4c:	4b07      	ldr	r3, [pc, #28]	; (8010f6c <__assert_func+0x30>)
 8010f4e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f52:	9100      	str	r1, [sp, #0]
 8010f54:	462b      	mov	r3, r5
 8010f56:	4906      	ldr	r1, [pc, #24]	; (8010f70 <__assert_func+0x34>)
 8010f58:	f000 f814 	bl	8010f84 <fiprintf>
 8010f5c:	f000 fd26 	bl	80119ac <abort>
 8010f60:	4b04      	ldr	r3, [pc, #16]	; (8010f74 <__assert_func+0x38>)
 8010f62:	461c      	mov	r4, r3
 8010f64:	e7f3      	b.n	8010f4e <__assert_func+0x12>
 8010f66:	bf00      	nop
 8010f68:	2000017c 	.word	0x2000017c
 8010f6c:	08012f12 	.word	0x08012f12
 8010f70:	08012f1f 	.word	0x08012f1f
 8010f74:	08012f4d 	.word	0x08012f4d

08010f78 <__errno>:
 8010f78:	4b01      	ldr	r3, [pc, #4]	; (8010f80 <__errno+0x8>)
 8010f7a:	6818      	ldr	r0, [r3, #0]
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop
 8010f80:	2000017c 	.word	0x2000017c

08010f84 <fiprintf>:
 8010f84:	b40e      	push	{r1, r2, r3}
 8010f86:	b503      	push	{r0, r1, lr}
 8010f88:	4601      	mov	r1, r0
 8010f8a:	ab03      	add	r3, sp, #12
 8010f8c:	4805      	ldr	r0, [pc, #20]	; (8010fa4 <fiprintf+0x20>)
 8010f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f92:	6800      	ldr	r0, [r0, #0]
 8010f94:	9301      	str	r3, [sp, #4]
 8010f96:	f000 f92d 	bl	80111f4 <_vfiprintf_r>
 8010f9a:	b002      	add	sp, #8
 8010f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fa0:	b003      	add	sp, #12
 8010fa2:	4770      	bx	lr
 8010fa4:	2000017c 	.word	0x2000017c

08010fa8 <__libc_init_array>:
 8010fa8:	b570      	push	{r4, r5, r6, lr}
 8010faa:	2600      	movs	r6, #0
 8010fac:	4d0c      	ldr	r5, [pc, #48]	; (8010fe0 <__libc_init_array+0x38>)
 8010fae:	4c0d      	ldr	r4, [pc, #52]	; (8010fe4 <__libc_init_array+0x3c>)
 8010fb0:	1b64      	subs	r4, r4, r5
 8010fb2:	10a4      	asrs	r4, r4, #2
 8010fb4:	42a6      	cmp	r6, r4
 8010fb6:	d109      	bne.n	8010fcc <__libc_init_array+0x24>
 8010fb8:	f001 f828 	bl	801200c <_init>
 8010fbc:	2600      	movs	r6, #0
 8010fbe:	4d0a      	ldr	r5, [pc, #40]	; (8010fe8 <__libc_init_array+0x40>)
 8010fc0:	4c0a      	ldr	r4, [pc, #40]	; (8010fec <__libc_init_array+0x44>)
 8010fc2:	1b64      	subs	r4, r4, r5
 8010fc4:	10a4      	asrs	r4, r4, #2
 8010fc6:	42a6      	cmp	r6, r4
 8010fc8:	d105      	bne.n	8010fd6 <__libc_init_array+0x2e>
 8010fca:	bd70      	pop	{r4, r5, r6, pc}
 8010fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fd0:	4798      	blx	r3
 8010fd2:	3601      	adds	r6, #1
 8010fd4:	e7ee      	b.n	8010fb4 <__libc_init_array+0xc>
 8010fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fda:	4798      	blx	r3
 8010fdc:	3601      	adds	r6, #1
 8010fde:	e7f2      	b.n	8010fc6 <__libc_init_array+0x1e>
 8010fe0:	08012fe8 	.word	0x08012fe8
 8010fe4:	08012fe8 	.word	0x08012fe8
 8010fe8:	08012fe8 	.word	0x08012fe8
 8010fec:	08012fec 	.word	0x08012fec

08010ff0 <malloc>:
 8010ff0:	4b02      	ldr	r3, [pc, #8]	; (8010ffc <malloc+0xc>)
 8010ff2:	4601      	mov	r1, r0
 8010ff4:	6818      	ldr	r0, [r3, #0]
 8010ff6:	f000 b87b 	b.w	80110f0 <_malloc_r>
 8010ffa:	bf00      	nop
 8010ffc:	2000017c 	.word	0x2000017c

08011000 <free>:
 8011000:	4b02      	ldr	r3, [pc, #8]	; (801100c <free+0xc>)
 8011002:	4601      	mov	r1, r0
 8011004:	6818      	ldr	r0, [r3, #0]
 8011006:	f000 b827 	b.w	8011058 <_free_r>
 801100a:	bf00      	nop
 801100c:	2000017c 	.word	0x2000017c

08011010 <memcmp>:
 8011010:	b530      	push	{r4, r5, lr}
 8011012:	2400      	movs	r4, #0
 8011014:	3901      	subs	r1, #1
 8011016:	42a2      	cmp	r2, r4
 8011018:	d101      	bne.n	801101e <memcmp+0xe>
 801101a:	2000      	movs	r0, #0
 801101c:	e005      	b.n	801102a <memcmp+0x1a>
 801101e:	5d03      	ldrb	r3, [r0, r4]
 8011020:	3401      	adds	r4, #1
 8011022:	5d0d      	ldrb	r5, [r1, r4]
 8011024:	42ab      	cmp	r3, r5
 8011026:	d0f6      	beq.n	8011016 <memcmp+0x6>
 8011028:	1b58      	subs	r0, r3, r5
 801102a:	bd30      	pop	{r4, r5, pc}

0801102c <memcpy>:
 801102c:	440a      	add	r2, r1
 801102e:	4291      	cmp	r1, r2
 8011030:	f100 33ff 	add.w	r3, r0, #4294967295
 8011034:	d100      	bne.n	8011038 <memcpy+0xc>
 8011036:	4770      	bx	lr
 8011038:	b510      	push	{r4, lr}
 801103a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801103e:	4291      	cmp	r1, r2
 8011040:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011044:	d1f9      	bne.n	801103a <memcpy+0xe>
 8011046:	bd10      	pop	{r4, pc}

08011048 <memset>:
 8011048:	4603      	mov	r3, r0
 801104a:	4402      	add	r2, r0
 801104c:	4293      	cmp	r3, r2
 801104e:	d100      	bne.n	8011052 <memset+0xa>
 8011050:	4770      	bx	lr
 8011052:	f803 1b01 	strb.w	r1, [r3], #1
 8011056:	e7f9      	b.n	801104c <memset+0x4>

08011058 <_free_r>:
 8011058:	b538      	push	{r3, r4, r5, lr}
 801105a:	4605      	mov	r5, r0
 801105c:	2900      	cmp	r1, #0
 801105e:	d043      	beq.n	80110e8 <_free_r+0x90>
 8011060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011064:	1f0c      	subs	r4, r1, #4
 8011066:	2b00      	cmp	r3, #0
 8011068:	bfb8      	it	lt
 801106a:	18e4      	addlt	r4, r4, r3
 801106c:	f000 fed2 	bl	8011e14 <__malloc_lock>
 8011070:	4a1e      	ldr	r2, [pc, #120]	; (80110ec <_free_r+0x94>)
 8011072:	6813      	ldr	r3, [r2, #0]
 8011074:	4610      	mov	r0, r2
 8011076:	b933      	cbnz	r3, 8011086 <_free_r+0x2e>
 8011078:	6063      	str	r3, [r4, #4]
 801107a:	6014      	str	r4, [r2, #0]
 801107c:	4628      	mov	r0, r5
 801107e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011082:	f000 becd 	b.w	8011e20 <__malloc_unlock>
 8011086:	42a3      	cmp	r3, r4
 8011088:	d90a      	bls.n	80110a0 <_free_r+0x48>
 801108a:	6821      	ldr	r1, [r4, #0]
 801108c:	1862      	adds	r2, r4, r1
 801108e:	4293      	cmp	r3, r2
 8011090:	bf01      	itttt	eq
 8011092:	681a      	ldreq	r2, [r3, #0]
 8011094:	685b      	ldreq	r3, [r3, #4]
 8011096:	1852      	addeq	r2, r2, r1
 8011098:	6022      	streq	r2, [r4, #0]
 801109a:	6063      	str	r3, [r4, #4]
 801109c:	6004      	str	r4, [r0, #0]
 801109e:	e7ed      	b.n	801107c <_free_r+0x24>
 80110a0:	461a      	mov	r2, r3
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	b10b      	cbz	r3, 80110aa <_free_r+0x52>
 80110a6:	42a3      	cmp	r3, r4
 80110a8:	d9fa      	bls.n	80110a0 <_free_r+0x48>
 80110aa:	6811      	ldr	r1, [r2, #0]
 80110ac:	1850      	adds	r0, r2, r1
 80110ae:	42a0      	cmp	r0, r4
 80110b0:	d10b      	bne.n	80110ca <_free_r+0x72>
 80110b2:	6820      	ldr	r0, [r4, #0]
 80110b4:	4401      	add	r1, r0
 80110b6:	1850      	adds	r0, r2, r1
 80110b8:	4283      	cmp	r3, r0
 80110ba:	6011      	str	r1, [r2, #0]
 80110bc:	d1de      	bne.n	801107c <_free_r+0x24>
 80110be:	6818      	ldr	r0, [r3, #0]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	4401      	add	r1, r0
 80110c4:	6011      	str	r1, [r2, #0]
 80110c6:	6053      	str	r3, [r2, #4]
 80110c8:	e7d8      	b.n	801107c <_free_r+0x24>
 80110ca:	d902      	bls.n	80110d2 <_free_r+0x7a>
 80110cc:	230c      	movs	r3, #12
 80110ce:	602b      	str	r3, [r5, #0]
 80110d0:	e7d4      	b.n	801107c <_free_r+0x24>
 80110d2:	6820      	ldr	r0, [r4, #0]
 80110d4:	1821      	adds	r1, r4, r0
 80110d6:	428b      	cmp	r3, r1
 80110d8:	bf01      	itttt	eq
 80110da:	6819      	ldreq	r1, [r3, #0]
 80110dc:	685b      	ldreq	r3, [r3, #4]
 80110de:	1809      	addeq	r1, r1, r0
 80110e0:	6021      	streq	r1, [r4, #0]
 80110e2:	6063      	str	r3, [r4, #4]
 80110e4:	6054      	str	r4, [r2, #4]
 80110e6:	e7c9      	b.n	801107c <_free_r+0x24>
 80110e8:	bd38      	pop	{r3, r4, r5, pc}
 80110ea:	bf00      	nop
 80110ec:	20000428 	.word	0x20000428

080110f0 <_malloc_r>:
 80110f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110f2:	1ccd      	adds	r5, r1, #3
 80110f4:	f025 0503 	bic.w	r5, r5, #3
 80110f8:	3508      	adds	r5, #8
 80110fa:	2d0c      	cmp	r5, #12
 80110fc:	bf38      	it	cc
 80110fe:	250c      	movcc	r5, #12
 8011100:	2d00      	cmp	r5, #0
 8011102:	4606      	mov	r6, r0
 8011104:	db01      	blt.n	801110a <_malloc_r+0x1a>
 8011106:	42a9      	cmp	r1, r5
 8011108:	d903      	bls.n	8011112 <_malloc_r+0x22>
 801110a:	230c      	movs	r3, #12
 801110c:	6033      	str	r3, [r6, #0]
 801110e:	2000      	movs	r0, #0
 8011110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011112:	f000 fe7f 	bl	8011e14 <__malloc_lock>
 8011116:	4921      	ldr	r1, [pc, #132]	; (801119c <_malloc_r+0xac>)
 8011118:	680a      	ldr	r2, [r1, #0]
 801111a:	4614      	mov	r4, r2
 801111c:	b99c      	cbnz	r4, 8011146 <_malloc_r+0x56>
 801111e:	4f20      	ldr	r7, [pc, #128]	; (80111a0 <_malloc_r+0xb0>)
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	b923      	cbnz	r3, 801112e <_malloc_r+0x3e>
 8011124:	4621      	mov	r1, r4
 8011126:	4630      	mov	r0, r6
 8011128:	f000 fb42 	bl	80117b0 <_sbrk_r>
 801112c:	6038      	str	r0, [r7, #0]
 801112e:	4629      	mov	r1, r5
 8011130:	4630      	mov	r0, r6
 8011132:	f000 fb3d 	bl	80117b0 <_sbrk_r>
 8011136:	1c43      	adds	r3, r0, #1
 8011138:	d123      	bne.n	8011182 <_malloc_r+0x92>
 801113a:	230c      	movs	r3, #12
 801113c:	4630      	mov	r0, r6
 801113e:	6033      	str	r3, [r6, #0]
 8011140:	f000 fe6e 	bl	8011e20 <__malloc_unlock>
 8011144:	e7e3      	b.n	801110e <_malloc_r+0x1e>
 8011146:	6823      	ldr	r3, [r4, #0]
 8011148:	1b5b      	subs	r3, r3, r5
 801114a:	d417      	bmi.n	801117c <_malloc_r+0x8c>
 801114c:	2b0b      	cmp	r3, #11
 801114e:	d903      	bls.n	8011158 <_malloc_r+0x68>
 8011150:	6023      	str	r3, [r4, #0]
 8011152:	441c      	add	r4, r3
 8011154:	6025      	str	r5, [r4, #0]
 8011156:	e004      	b.n	8011162 <_malloc_r+0x72>
 8011158:	6863      	ldr	r3, [r4, #4]
 801115a:	42a2      	cmp	r2, r4
 801115c:	bf0c      	ite	eq
 801115e:	600b      	streq	r3, [r1, #0]
 8011160:	6053      	strne	r3, [r2, #4]
 8011162:	4630      	mov	r0, r6
 8011164:	f000 fe5c 	bl	8011e20 <__malloc_unlock>
 8011168:	f104 000b 	add.w	r0, r4, #11
 801116c:	1d23      	adds	r3, r4, #4
 801116e:	f020 0007 	bic.w	r0, r0, #7
 8011172:	1ac2      	subs	r2, r0, r3
 8011174:	d0cc      	beq.n	8011110 <_malloc_r+0x20>
 8011176:	1a1b      	subs	r3, r3, r0
 8011178:	50a3      	str	r3, [r4, r2]
 801117a:	e7c9      	b.n	8011110 <_malloc_r+0x20>
 801117c:	4622      	mov	r2, r4
 801117e:	6864      	ldr	r4, [r4, #4]
 8011180:	e7cc      	b.n	801111c <_malloc_r+0x2c>
 8011182:	1cc4      	adds	r4, r0, #3
 8011184:	f024 0403 	bic.w	r4, r4, #3
 8011188:	42a0      	cmp	r0, r4
 801118a:	d0e3      	beq.n	8011154 <_malloc_r+0x64>
 801118c:	1a21      	subs	r1, r4, r0
 801118e:	4630      	mov	r0, r6
 8011190:	f000 fb0e 	bl	80117b0 <_sbrk_r>
 8011194:	3001      	adds	r0, #1
 8011196:	d1dd      	bne.n	8011154 <_malloc_r+0x64>
 8011198:	e7cf      	b.n	801113a <_malloc_r+0x4a>
 801119a:	bf00      	nop
 801119c:	20000428 	.word	0x20000428
 80111a0:	2000042c 	.word	0x2000042c

080111a4 <__sfputc_r>:
 80111a4:	6893      	ldr	r3, [r2, #8]
 80111a6:	b410      	push	{r4}
 80111a8:	3b01      	subs	r3, #1
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	6093      	str	r3, [r2, #8]
 80111ae:	da07      	bge.n	80111c0 <__sfputc_r+0x1c>
 80111b0:	6994      	ldr	r4, [r2, #24]
 80111b2:	42a3      	cmp	r3, r4
 80111b4:	db01      	blt.n	80111ba <__sfputc_r+0x16>
 80111b6:	290a      	cmp	r1, #10
 80111b8:	d102      	bne.n	80111c0 <__sfputc_r+0x1c>
 80111ba:	bc10      	pop	{r4}
 80111bc:	f000 bb36 	b.w	801182c <__swbuf_r>
 80111c0:	6813      	ldr	r3, [r2, #0]
 80111c2:	1c58      	adds	r0, r3, #1
 80111c4:	6010      	str	r0, [r2, #0]
 80111c6:	7019      	strb	r1, [r3, #0]
 80111c8:	4608      	mov	r0, r1
 80111ca:	bc10      	pop	{r4}
 80111cc:	4770      	bx	lr

080111ce <__sfputs_r>:
 80111ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111d0:	4606      	mov	r6, r0
 80111d2:	460f      	mov	r7, r1
 80111d4:	4614      	mov	r4, r2
 80111d6:	18d5      	adds	r5, r2, r3
 80111d8:	42ac      	cmp	r4, r5
 80111da:	d101      	bne.n	80111e0 <__sfputs_r+0x12>
 80111dc:	2000      	movs	r0, #0
 80111de:	e007      	b.n	80111f0 <__sfputs_r+0x22>
 80111e0:	463a      	mov	r2, r7
 80111e2:	4630      	mov	r0, r6
 80111e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111e8:	f7ff ffdc 	bl	80111a4 <__sfputc_r>
 80111ec:	1c43      	adds	r3, r0, #1
 80111ee:	d1f3      	bne.n	80111d8 <__sfputs_r+0xa>
 80111f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111f4 <_vfiprintf_r>:
 80111f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f8:	460d      	mov	r5, r1
 80111fa:	4614      	mov	r4, r2
 80111fc:	4698      	mov	r8, r3
 80111fe:	4606      	mov	r6, r0
 8011200:	b09d      	sub	sp, #116	; 0x74
 8011202:	b118      	cbz	r0, 801120c <_vfiprintf_r+0x18>
 8011204:	6983      	ldr	r3, [r0, #24]
 8011206:	b90b      	cbnz	r3, 801120c <_vfiprintf_r+0x18>
 8011208:	f000 fcf2 	bl	8011bf0 <__sinit>
 801120c:	4b89      	ldr	r3, [pc, #548]	; (8011434 <_vfiprintf_r+0x240>)
 801120e:	429d      	cmp	r5, r3
 8011210:	d11b      	bne.n	801124a <_vfiprintf_r+0x56>
 8011212:	6875      	ldr	r5, [r6, #4]
 8011214:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011216:	07d9      	lsls	r1, r3, #31
 8011218:	d405      	bmi.n	8011226 <_vfiprintf_r+0x32>
 801121a:	89ab      	ldrh	r3, [r5, #12]
 801121c:	059a      	lsls	r2, r3, #22
 801121e:	d402      	bmi.n	8011226 <_vfiprintf_r+0x32>
 8011220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011222:	f000 fd83 	bl	8011d2c <__retarget_lock_acquire_recursive>
 8011226:	89ab      	ldrh	r3, [r5, #12]
 8011228:	071b      	lsls	r3, r3, #28
 801122a:	d501      	bpl.n	8011230 <_vfiprintf_r+0x3c>
 801122c:	692b      	ldr	r3, [r5, #16]
 801122e:	b9eb      	cbnz	r3, 801126c <_vfiprintf_r+0x78>
 8011230:	4629      	mov	r1, r5
 8011232:	4630      	mov	r0, r6
 8011234:	f000 fb4c 	bl	80118d0 <__swsetup_r>
 8011238:	b1c0      	cbz	r0, 801126c <_vfiprintf_r+0x78>
 801123a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801123c:	07dc      	lsls	r4, r3, #31
 801123e:	d50e      	bpl.n	801125e <_vfiprintf_r+0x6a>
 8011240:	f04f 30ff 	mov.w	r0, #4294967295
 8011244:	b01d      	add	sp, #116	; 0x74
 8011246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124a:	4b7b      	ldr	r3, [pc, #492]	; (8011438 <_vfiprintf_r+0x244>)
 801124c:	429d      	cmp	r5, r3
 801124e:	d101      	bne.n	8011254 <_vfiprintf_r+0x60>
 8011250:	68b5      	ldr	r5, [r6, #8]
 8011252:	e7df      	b.n	8011214 <_vfiprintf_r+0x20>
 8011254:	4b79      	ldr	r3, [pc, #484]	; (801143c <_vfiprintf_r+0x248>)
 8011256:	429d      	cmp	r5, r3
 8011258:	bf08      	it	eq
 801125a:	68f5      	ldreq	r5, [r6, #12]
 801125c:	e7da      	b.n	8011214 <_vfiprintf_r+0x20>
 801125e:	89ab      	ldrh	r3, [r5, #12]
 8011260:	0598      	lsls	r0, r3, #22
 8011262:	d4ed      	bmi.n	8011240 <_vfiprintf_r+0x4c>
 8011264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011266:	f000 fd62 	bl	8011d2e <__retarget_lock_release_recursive>
 801126a:	e7e9      	b.n	8011240 <_vfiprintf_r+0x4c>
 801126c:	2300      	movs	r3, #0
 801126e:	9309      	str	r3, [sp, #36]	; 0x24
 8011270:	2320      	movs	r3, #32
 8011272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011276:	2330      	movs	r3, #48	; 0x30
 8011278:	f04f 0901 	mov.w	r9, #1
 801127c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011280:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8011440 <_vfiprintf_r+0x24c>
 8011284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011288:	4623      	mov	r3, r4
 801128a:	469a      	mov	sl, r3
 801128c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011290:	b10a      	cbz	r2, 8011296 <_vfiprintf_r+0xa2>
 8011292:	2a25      	cmp	r2, #37	; 0x25
 8011294:	d1f9      	bne.n	801128a <_vfiprintf_r+0x96>
 8011296:	ebba 0b04 	subs.w	fp, sl, r4
 801129a:	d00b      	beq.n	80112b4 <_vfiprintf_r+0xc0>
 801129c:	465b      	mov	r3, fp
 801129e:	4622      	mov	r2, r4
 80112a0:	4629      	mov	r1, r5
 80112a2:	4630      	mov	r0, r6
 80112a4:	f7ff ff93 	bl	80111ce <__sfputs_r>
 80112a8:	3001      	adds	r0, #1
 80112aa:	f000 80aa 	beq.w	8011402 <_vfiprintf_r+0x20e>
 80112ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112b0:	445a      	add	r2, fp
 80112b2:	9209      	str	r2, [sp, #36]	; 0x24
 80112b4:	f89a 3000 	ldrb.w	r3, [sl]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	f000 80a2 	beq.w	8011402 <_vfiprintf_r+0x20e>
 80112be:	2300      	movs	r3, #0
 80112c0:	f04f 32ff 	mov.w	r2, #4294967295
 80112c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112c8:	f10a 0a01 	add.w	sl, sl, #1
 80112cc:	9304      	str	r3, [sp, #16]
 80112ce:	9307      	str	r3, [sp, #28]
 80112d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112d4:	931a      	str	r3, [sp, #104]	; 0x68
 80112d6:	4654      	mov	r4, sl
 80112d8:	2205      	movs	r2, #5
 80112da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112de:	4858      	ldr	r0, [pc, #352]	; (8011440 <_vfiprintf_r+0x24c>)
 80112e0:	f000 fd8a 	bl	8011df8 <memchr>
 80112e4:	9a04      	ldr	r2, [sp, #16]
 80112e6:	b9d8      	cbnz	r0, 8011320 <_vfiprintf_r+0x12c>
 80112e8:	06d1      	lsls	r1, r2, #27
 80112ea:	bf44      	itt	mi
 80112ec:	2320      	movmi	r3, #32
 80112ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112f2:	0713      	lsls	r3, r2, #28
 80112f4:	bf44      	itt	mi
 80112f6:	232b      	movmi	r3, #43	; 0x2b
 80112f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112fc:	f89a 3000 	ldrb.w	r3, [sl]
 8011300:	2b2a      	cmp	r3, #42	; 0x2a
 8011302:	d015      	beq.n	8011330 <_vfiprintf_r+0x13c>
 8011304:	4654      	mov	r4, sl
 8011306:	2000      	movs	r0, #0
 8011308:	f04f 0c0a 	mov.w	ip, #10
 801130c:	9a07      	ldr	r2, [sp, #28]
 801130e:	4621      	mov	r1, r4
 8011310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011314:	3b30      	subs	r3, #48	; 0x30
 8011316:	2b09      	cmp	r3, #9
 8011318:	d94e      	bls.n	80113b8 <_vfiprintf_r+0x1c4>
 801131a:	b1b0      	cbz	r0, 801134a <_vfiprintf_r+0x156>
 801131c:	9207      	str	r2, [sp, #28]
 801131e:	e014      	b.n	801134a <_vfiprintf_r+0x156>
 8011320:	eba0 0308 	sub.w	r3, r0, r8
 8011324:	fa09 f303 	lsl.w	r3, r9, r3
 8011328:	4313      	orrs	r3, r2
 801132a:	46a2      	mov	sl, r4
 801132c:	9304      	str	r3, [sp, #16]
 801132e:	e7d2      	b.n	80112d6 <_vfiprintf_r+0xe2>
 8011330:	9b03      	ldr	r3, [sp, #12]
 8011332:	1d19      	adds	r1, r3, #4
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	9103      	str	r1, [sp, #12]
 8011338:	2b00      	cmp	r3, #0
 801133a:	bfbb      	ittet	lt
 801133c:	425b      	neglt	r3, r3
 801133e:	f042 0202 	orrlt.w	r2, r2, #2
 8011342:	9307      	strge	r3, [sp, #28]
 8011344:	9307      	strlt	r3, [sp, #28]
 8011346:	bfb8      	it	lt
 8011348:	9204      	strlt	r2, [sp, #16]
 801134a:	7823      	ldrb	r3, [r4, #0]
 801134c:	2b2e      	cmp	r3, #46	; 0x2e
 801134e:	d10c      	bne.n	801136a <_vfiprintf_r+0x176>
 8011350:	7863      	ldrb	r3, [r4, #1]
 8011352:	2b2a      	cmp	r3, #42	; 0x2a
 8011354:	d135      	bne.n	80113c2 <_vfiprintf_r+0x1ce>
 8011356:	9b03      	ldr	r3, [sp, #12]
 8011358:	3402      	adds	r4, #2
 801135a:	1d1a      	adds	r2, r3, #4
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	9203      	str	r2, [sp, #12]
 8011360:	2b00      	cmp	r3, #0
 8011362:	bfb8      	it	lt
 8011364:	f04f 33ff 	movlt.w	r3, #4294967295
 8011368:	9305      	str	r3, [sp, #20]
 801136a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011450 <_vfiprintf_r+0x25c>
 801136e:	2203      	movs	r2, #3
 8011370:	4650      	mov	r0, sl
 8011372:	7821      	ldrb	r1, [r4, #0]
 8011374:	f000 fd40 	bl	8011df8 <memchr>
 8011378:	b140      	cbz	r0, 801138c <_vfiprintf_r+0x198>
 801137a:	2340      	movs	r3, #64	; 0x40
 801137c:	eba0 000a 	sub.w	r0, r0, sl
 8011380:	fa03 f000 	lsl.w	r0, r3, r0
 8011384:	9b04      	ldr	r3, [sp, #16]
 8011386:	3401      	adds	r4, #1
 8011388:	4303      	orrs	r3, r0
 801138a:	9304      	str	r3, [sp, #16]
 801138c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011390:	2206      	movs	r2, #6
 8011392:	482c      	ldr	r0, [pc, #176]	; (8011444 <_vfiprintf_r+0x250>)
 8011394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011398:	f000 fd2e 	bl	8011df8 <memchr>
 801139c:	2800      	cmp	r0, #0
 801139e:	d03f      	beq.n	8011420 <_vfiprintf_r+0x22c>
 80113a0:	4b29      	ldr	r3, [pc, #164]	; (8011448 <_vfiprintf_r+0x254>)
 80113a2:	bb1b      	cbnz	r3, 80113ec <_vfiprintf_r+0x1f8>
 80113a4:	9b03      	ldr	r3, [sp, #12]
 80113a6:	3307      	adds	r3, #7
 80113a8:	f023 0307 	bic.w	r3, r3, #7
 80113ac:	3308      	adds	r3, #8
 80113ae:	9303      	str	r3, [sp, #12]
 80113b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113b2:	443b      	add	r3, r7
 80113b4:	9309      	str	r3, [sp, #36]	; 0x24
 80113b6:	e767      	b.n	8011288 <_vfiprintf_r+0x94>
 80113b8:	460c      	mov	r4, r1
 80113ba:	2001      	movs	r0, #1
 80113bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80113c0:	e7a5      	b.n	801130e <_vfiprintf_r+0x11a>
 80113c2:	2300      	movs	r3, #0
 80113c4:	f04f 0c0a 	mov.w	ip, #10
 80113c8:	4619      	mov	r1, r3
 80113ca:	3401      	adds	r4, #1
 80113cc:	9305      	str	r3, [sp, #20]
 80113ce:	4620      	mov	r0, r4
 80113d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113d4:	3a30      	subs	r2, #48	; 0x30
 80113d6:	2a09      	cmp	r2, #9
 80113d8:	d903      	bls.n	80113e2 <_vfiprintf_r+0x1ee>
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d0c5      	beq.n	801136a <_vfiprintf_r+0x176>
 80113de:	9105      	str	r1, [sp, #20]
 80113e0:	e7c3      	b.n	801136a <_vfiprintf_r+0x176>
 80113e2:	4604      	mov	r4, r0
 80113e4:	2301      	movs	r3, #1
 80113e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80113ea:	e7f0      	b.n	80113ce <_vfiprintf_r+0x1da>
 80113ec:	ab03      	add	r3, sp, #12
 80113ee:	9300      	str	r3, [sp, #0]
 80113f0:	462a      	mov	r2, r5
 80113f2:	4630      	mov	r0, r6
 80113f4:	4b15      	ldr	r3, [pc, #84]	; (801144c <_vfiprintf_r+0x258>)
 80113f6:	a904      	add	r1, sp, #16
 80113f8:	f3af 8000 	nop.w
 80113fc:	4607      	mov	r7, r0
 80113fe:	1c78      	adds	r0, r7, #1
 8011400:	d1d6      	bne.n	80113b0 <_vfiprintf_r+0x1bc>
 8011402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011404:	07d9      	lsls	r1, r3, #31
 8011406:	d405      	bmi.n	8011414 <_vfiprintf_r+0x220>
 8011408:	89ab      	ldrh	r3, [r5, #12]
 801140a:	059a      	lsls	r2, r3, #22
 801140c:	d402      	bmi.n	8011414 <_vfiprintf_r+0x220>
 801140e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011410:	f000 fc8d 	bl	8011d2e <__retarget_lock_release_recursive>
 8011414:	89ab      	ldrh	r3, [r5, #12]
 8011416:	065b      	lsls	r3, r3, #25
 8011418:	f53f af12 	bmi.w	8011240 <_vfiprintf_r+0x4c>
 801141c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801141e:	e711      	b.n	8011244 <_vfiprintf_r+0x50>
 8011420:	ab03      	add	r3, sp, #12
 8011422:	9300      	str	r3, [sp, #0]
 8011424:	462a      	mov	r2, r5
 8011426:	4630      	mov	r0, r6
 8011428:	4b08      	ldr	r3, [pc, #32]	; (801144c <_vfiprintf_r+0x258>)
 801142a:	a904      	add	r1, sp, #16
 801142c:	f000 f882 	bl	8011534 <_printf_i>
 8011430:	e7e4      	b.n	80113fc <_vfiprintf_r+0x208>
 8011432:	bf00      	nop
 8011434:	08012fa8 	.word	0x08012fa8
 8011438:	08012fc8 	.word	0x08012fc8
 801143c:	08012f88 	.word	0x08012f88
 8011440:	08012f54 	.word	0x08012f54
 8011444:	08012f5e 	.word	0x08012f5e
 8011448:	00000000 	.word	0x00000000
 801144c:	080111cf 	.word	0x080111cf
 8011450:	08012f5a 	.word	0x08012f5a

08011454 <_printf_common>:
 8011454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011458:	4616      	mov	r6, r2
 801145a:	4699      	mov	r9, r3
 801145c:	688a      	ldr	r2, [r1, #8]
 801145e:	690b      	ldr	r3, [r1, #16]
 8011460:	4607      	mov	r7, r0
 8011462:	4293      	cmp	r3, r2
 8011464:	bfb8      	it	lt
 8011466:	4613      	movlt	r3, r2
 8011468:	6033      	str	r3, [r6, #0]
 801146a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801146e:	460c      	mov	r4, r1
 8011470:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011474:	b10a      	cbz	r2, 801147a <_printf_common+0x26>
 8011476:	3301      	adds	r3, #1
 8011478:	6033      	str	r3, [r6, #0]
 801147a:	6823      	ldr	r3, [r4, #0]
 801147c:	0699      	lsls	r1, r3, #26
 801147e:	bf42      	ittt	mi
 8011480:	6833      	ldrmi	r3, [r6, #0]
 8011482:	3302      	addmi	r3, #2
 8011484:	6033      	strmi	r3, [r6, #0]
 8011486:	6825      	ldr	r5, [r4, #0]
 8011488:	f015 0506 	ands.w	r5, r5, #6
 801148c:	d106      	bne.n	801149c <_printf_common+0x48>
 801148e:	f104 0a19 	add.w	sl, r4, #25
 8011492:	68e3      	ldr	r3, [r4, #12]
 8011494:	6832      	ldr	r2, [r6, #0]
 8011496:	1a9b      	subs	r3, r3, r2
 8011498:	42ab      	cmp	r3, r5
 801149a:	dc28      	bgt.n	80114ee <_printf_common+0x9a>
 801149c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80114a0:	1e13      	subs	r3, r2, #0
 80114a2:	6822      	ldr	r2, [r4, #0]
 80114a4:	bf18      	it	ne
 80114a6:	2301      	movne	r3, #1
 80114a8:	0692      	lsls	r2, r2, #26
 80114aa:	d42d      	bmi.n	8011508 <_printf_common+0xb4>
 80114ac:	4649      	mov	r1, r9
 80114ae:	4638      	mov	r0, r7
 80114b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80114b4:	47c0      	blx	r8
 80114b6:	3001      	adds	r0, #1
 80114b8:	d020      	beq.n	80114fc <_printf_common+0xa8>
 80114ba:	6823      	ldr	r3, [r4, #0]
 80114bc:	68e5      	ldr	r5, [r4, #12]
 80114be:	f003 0306 	and.w	r3, r3, #6
 80114c2:	2b04      	cmp	r3, #4
 80114c4:	bf18      	it	ne
 80114c6:	2500      	movne	r5, #0
 80114c8:	6832      	ldr	r2, [r6, #0]
 80114ca:	f04f 0600 	mov.w	r6, #0
 80114ce:	68a3      	ldr	r3, [r4, #8]
 80114d0:	bf08      	it	eq
 80114d2:	1aad      	subeq	r5, r5, r2
 80114d4:	6922      	ldr	r2, [r4, #16]
 80114d6:	bf08      	it	eq
 80114d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114dc:	4293      	cmp	r3, r2
 80114de:	bfc4      	itt	gt
 80114e0:	1a9b      	subgt	r3, r3, r2
 80114e2:	18ed      	addgt	r5, r5, r3
 80114e4:	341a      	adds	r4, #26
 80114e6:	42b5      	cmp	r5, r6
 80114e8:	d11a      	bne.n	8011520 <_printf_common+0xcc>
 80114ea:	2000      	movs	r0, #0
 80114ec:	e008      	b.n	8011500 <_printf_common+0xac>
 80114ee:	2301      	movs	r3, #1
 80114f0:	4652      	mov	r2, sl
 80114f2:	4649      	mov	r1, r9
 80114f4:	4638      	mov	r0, r7
 80114f6:	47c0      	blx	r8
 80114f8:	3001      	adds	r0, #1
 80114fa:	d103      	bne.n	8011504 <_printf_common+0xb0>
 80114fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011504:	3501      	adds	r5, #1
 8011506:	e7c4      	b.n	8011492 <_printf_common+0x3e>
 8011508:	2030      	movs	r0, #48	; 0x30
 801150a:	18e1      	adds	r1, r4, r3
 801150c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011510:	1c5a      	adds	r2, r3, #1
 8011512:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011516:	4422      	add	r2, r4
 8011518:	3302      	adds	r3, #2
 801151a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801151e:	e7c5      	b.n	80114ac <_printf_common+0x58>
 8011520:	2301      	movs	r3, #1
 8011522:	4622      	mov	r2, r4
 8011524:	4649      	mov	r1, r9
 8011526:	4638      	mov	r0, r7
 8011528:	47c0      	blx	r8
 801152a:	3001      	adds	r0, #1
 801152c:	d0e6      	beq.n	80114fc <_printf_common+0xa8>
 801152e:	3601      	adds	r6, #1
 8011530:	e7d9      	b.n	80114e6 <_printf_common+0x92>
	...

08011534 <_printf_i>:
 8011534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011538:	460c      	mov	r4, r1
 801153a:	7e27      	ldrb	r7, [r4, #24]
 801153c:	4691      	mov	r9, r2
 801153e:	2f78      	cmp	r7, #120	; 0x78
 8011540:	4680      	mov	r8, r0
 8011542:	469a      	mov	sl, r3
 8011544:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011546:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801154a:	d807      	bhi.n	801155c <_printf_i+0x28>
 801154c:	2f62      	cmp	r7, #98	; 0x62
 801154e:	d80a      	bhi.n	8011566 <_printf_i+0x32>
 8011550:	2f00      	cmp	r7, #0
 8011552:	f000 80d9 	beq.w	8011708 <_printf_i+0x1d4>
 8011556:	2f58      	cmp	r7, #88	; 0x58
 8011558:	f000 80a4 	beq.w	80116a4 <_printf_i+0x170>
 801155c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011564:	e03a      	b.n	80115dc <_printf_i+0xa8>
 8011566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801156a:	2b15      	cmp	r3, #21
 801156c:	d8f6      	bhi.n	801155c <_printf_i+0x28>
 801156e:	a001      	add	r0, pc, #4	; (adr r0, 8011574 <_printf_i+0x40>)
 8011570:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011574:	080115cd 	.word	0x080115cd
 8011578:	080115e1 	.word	0x080115e1
 801157c:	0801155d 	.word	0x0801155d
 8011580:	0801155d 	.word	0x0801155d
 8011584:	0801155d 	.word	0x0801155d
 8011588:	0801155d 	.word	0x0801155d
 801158c:	080115e1 	.word	0x080115e1
 8011590:	0801155d 	.word	0x0801155d
 8011594:	0801155d 	.word	0x0801155d
 8011598:	0801155d 	.word	0x0801155d
 801159c:	0801155d 	.word	0x0801155d
 80115a0:	080116ef 	.word	0x080116ef
 80115a4:	08011611 	.word	0x08011611
 80115a8:	080116d1 	.word	0x080116d1
 80115ac:	0801155d 	.word	0x0801155d
 80115b0:	0801155d 	.word	0x0801155d
 80115b4:	08011711 	.word	0x08011711
 80115b8:	0801155d 	.word	0x0801155d
 80115bc:	08011611 	.word	0x08011611
 80115c0:	0801155d 	.word	0x0801155d
 80115c4:	0801155d 	.word	0x0801155d
 80115c8:	080116d9 	.word	0x080116d9
 80115cc:	680b      	ldr	r3, [r1, #0]
 80115ce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80115d2:	1d1a      	adds	r2, r3, #4
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	600a      	str	r2, [r1, #0]
 80115d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115dc:	2301      	movs	r3, #1
 80115de:	e0a4      	b.n	801172a <_printf_i+0x1f6>
 80115e0:	6825      	ldr	r5, [r4, #0]
 80115e2:	6808      	ldr	r0, [r1, #0]
 80115e4:	062e      	lsls	r6, r5, #24
 80115e6:	f100 0304 	add.w	r3, r0, #4
 80115ea:	d50a      	bpl.n	8011602 <_printf_i+0xce>
 80115ec:	6805      	ldr	r5, [r0, #0]
 80115ee:	600b      	str	r3, [r1, #0]
 80115f0:	2d00      	cmp	r5, #0
 80115f2:	da03      	bge.n	80115fc <_printf_i+0xc8>
 80115f4:	232d      	movs	r3, #45	; 0x2d
 80115f6:	426d      	negs	r5, r5
 80115f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115fc:	230a      	movs	r3, #10
 80115fe:	485e      	ldr	r0, [pc, #376]	; (8011778 <_printf_i+0x244>)
 8011600:	e019      	b.n	8011636 <_printf_i+0x102>
 8011602:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011606:	6805      	ldr	r5, [r0, #0]
 8011608:	600b      	str	r3, [r1, #0]
 801160a:	bf18      	it	ne
 801160c:	b22d      	sxthne	r5, r5
 801160e:	e7ef      	b.n	80115f0 <_printf_i+0xbc>
 8011610:	680b      	ldr	r3, [r1, #0]
 8011612:	6825      	ldr	r5, [r4, #0]
 8011614:	1d18      	adds	r0, r3, #4
 8011616:	6008      	str	r0, [r1, #0]
 8011618:	0628      	lsls	r0, r5, #24
 801161a:	d501      	bpl.n	8011620 <_printf_i+0xec>
 801161c:	681d      	ldr	r5, [r3, #0]
 801161e:	e002      	b.n	8011626 <_printf_i+0xf2>
 8011620:	0669      	lsls	r1, r5, #25
 8011622:	d5fb      	bpl.n	801161c <_printf_i+0xe8>
 8011624:	881d      	ldrh	r5, [r3, #0]
 8011626:	2f6f      	cmp	r7, #111	; 0x6f
 8011628:	bf0c      	ite	eq
 801162a:	2308      	moveq	r3, #8
 801162c:	230a      	movne	r3, #10
 801162e:	4852      	ldr	r0, [pc, #328]	; (8011778 <_printf_i+0x244>)
 8011630:	2100      	movs	r1, #0
 8011632:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011636:	6866      	ldr	r6, [r4, #4]
 8011638:	2e00      	cmp	r6, #0
 801163a:	bfa8      	it	ge
 801163c:	6821      	ldrge	r1, [r4, #0]
 801163e:	60a6      	str	r6, [r4, #8]
 8011640:	bfa4      	itt	ge
 8011642:	f021 0104 	bicge.w	r1, r1, #4
 8011646:	6021      	strge	r1, [r4, #0]
 8011648:	b90d      	cbnz	r5, 801164e <_printf_i+0x11a>
 801164a:	2e00      	cmp	r6, #0
 801164c:	d04d      	beq.n	80116ea <_printf_i+0x1b6>
 801164e:	4616      	mov	r6, r2
 8011650:	fbb5 f1f3 	udiv	r1, r5, r3
 8011654:	fb03 5711 	mls	r7, r3, r1, r5
 8011658:	5dc7      	ldrb	r7, [r0, r7]
 801165a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801165e:	462f      	mov	r7, r5
 8011660:	42bb      	cmp	r3, r7
 8011662:	460d      	mov	r5, r1
 8011664:	d9f4      	bls.n	8011650 <_printf_i+0x11c>
 8011666:	2b08      	cmp	r3, #8
 8011668:	d10b      	bne.n	8011682 <_printf_i+0x14e>
 801166a:	6823      	ldr	r3, [r4, #0]
 801166c:	07df      	lsls	r7, r3, #31
 801166e:	d508      	bpl.n	8011682 <_printf_i+0x14e>
 8011670:	6923      	ldr	r3, [r4, #16]
 8011672:	6861      	ldr	r1, [r4, #4]
 8011674:	4299      	cmp	r1, r3
 8011676:	bfde      	ittt	le
 8011678:	2330      	movle	r3, #48	; 0x30
 801167a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801167e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011682:	1b92      	subs	r2, r2, r6
 8011684:	6122      	str	r2, [r4, #16]
 8011686:	464b      	mov	r3, r9
 8011688:	4621      	mov	r1, r4
 801168a:	4640      	mov	r0, r8
 801168c:	f8cd a000 	str.w	sl, [sp]
 8011690:	aa03      	add	r2, sp, #12
 8011692:	f7ff fedf 	bl	8011454 <_printf_common>
 8011696:	3001      	adds	r0, #1
 8011698:	d14c      	bne.n	8011734 <_printf_i+0x200>
 801169a:	f04f 30ff 	mov.w	r0, #4294967295
 801169e:	b004      	add	sp, #16
 80116a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a4:	4834      	ldr	r0, [pc, #208]	; (8011778 <_printf_i+0x244>)
 80116a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80116aa:	680e      	ldr	r6, [r1, #0]
 80116ac:	6823      	ldr	r3, [r4, #0]
 80116ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80116b2:	061f      	lsls	r7, r3, #24
 80116b4:	600e      	str	r6, [r1, #0]
 80116b6:	d514      	bpl.n	80116e2 <_printf_i+0x1ae>
 80116b8:	07d9      	lsls	r1, r3, #31
 80116ba:	bf44      	itt	mi
 80116bc:	f043 0320 	orrmi.w	r3, r3, #32
 80116c0:	6023      	strmi	r3, [r4, #0]
 80116c2:	b91d      	cbnz	r5, 80116cc <_printf_i+0x198>
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	f023 0320 	bic.w	r3, r3, #32
 80116ca:	6023      	str	r3, [r4, #0]
 80116cc:	2310      	movs	r3, #16
 80116ce:	e7af      	b.n	8011630 <_printf_i+0xfc>
 80116d0:	6823      	ldr	r3, [r4, #0]
 80116d2:	f043 0320 	orr.w	r3, r3, #32
 80116d6:	6023      	str	r3, [r4, #0]
 80116d8:	2378      	movs	r3, #120	; 0x78
 80116da:	4828      	ldr	r0, [pc, #160]	; (801177c <_printf_i+0x248>)
 80116dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80116e0:	e7e3      	b.n	80116aa <_printf_i+0x176>
 80116e2:	065e      	lsls	r6, r3, #25
 80116e4:	bf48      	it	mi
 80116e6:	b2ad      	uxthmi	r5, r5
 80116e8:	e7e6      	b.n	80116b8 <_printf_i+0x184>
 80116ea:	4616      	mov	r6, r2
 80116ec:	e7bb      	b.n	8011666 <_printf_i+0x132>
 80116ee:	680b      	ldr	r3, [r1, #0]
 80116f0:	6826      	ldr	r6, [r4, #0]
 80116f2:	1d1d      	adds	r5, r3, #4
 80116f4:	6960      	ldr	r0, [r4, #20]
 80116f6:	600d      	str	r5, [r1, #0]
 80116f8:	0635      	lsls	r5, r6, #24
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	d501      	bpl.n	8011702 <_printf_i+0x1ce>
 80116fe:	6018      	str	r0, [r3, #0]
 8011700:	e002      	b.n	8011708 <_printf_i+0x1d4>
 8011702:	0671      	lsls	r1, r6, #25
 8011704:	d5fb      	bpl.n	80116fe <_printf_i+0x1ca>
 8011706:	8018      	strh	r0, [r3, #0]
 8011708:	2300      	movs	r3, #0
 801170a:	4616      	mov	r6, r2
 801170c:	6123      	str	r3, [r4, #16]
 801170e:	e7ba      	b.n	8011686 <_printf_i+0x152>
 8011710:	680b      	ldr	r3, [r1, #0]
 8011712:	1d1a      	adds	r2, r3, #4
 8011714:	600a      	str	r2, [r1, #0]
 8011716:	681e      	ldr	r6, [r3, #0]
 8011718:	2100      	movs	r1, #0
 801171a:	4630      	mov	r0, r6
 801171c:	6862      	ldr	r2, [r4, #4]
 801171e:	f000 fb6b 	bl	8011df8 <memchr>
 8011722:	b108      	cbz	r0, 8011728 <_printf_i+0x1f4>
 8011724:	1b80      	subs	r0, r0, r6
 8011726:	6060      	str	r0, [r4, #4]
 8011728:	6863      	ldr	r3, [r4, #4]
 801172a:	6123      	str	r3, [r4, #16]
 801172c:	2300      	movs	r3, #0
 801172e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011732:	e7a8      	b.n	8011686 <_printf_i+0x152>
 8011734:	4632      	mov	r2, r6
 8011736:	4649      	mov	r1, r9
 8011738:	4640      	mov	r0, r8
 801173a:	6923      	ldr	r3, [r4, #16]
 801173c:	47d0      	blx	sl
 801173e:	3001      	adds	r0, #1
 8011740:	d0ab      	beq.n	801169a <_printf_i+0x166>
 8011742:	6823      	ldr	r3, [r4, #0]
 8011744:	079b      	lsls	r3, r3, #30
 8011746:	d413      	bmi.n	8011770 <_printf_i+0x23c>
 8011748:	68e0      	ldr	r0, [r4, #12]
 801174a:	9b03      	ldr	r3, [sp, #12]
 801174c:	4298      	cmp	r0, r3
 801174e:	bfb8      	it	lt
 8011750:	4618      	movlt	r0, r3
 8011752:	e7a4      	b.n	801169e <_printf_i+0x16a>
 8011754:	2301      	movs	r3, #1
 8011756:	4632      	mov	r2, r6
 8011758:	4649      	mov	r1, r9
 801175a:	4640      	mov	r0, r8
 801175c:	47d0      	blx	sl
 801175e:	3001      	adds	r0, #1
 8011760:	d09b      	beq.n	801169a <_printf_i+0x166>
 8011762:	3501      	adds	r5, #1
 8011764:	68e3      	ldr	r3, [r4, #12]
 8011766:	9903      	ldr	r1, [sp, #12]
 8011768:	1a5b      	subs	r3, r3, r1
 801176a:	42ab      	cmp	r3, r5
 801176c:	dcf2      	bgt.n	8011754 <_printf_i+0x220>
 801176e:	e7eb      	b.n	8011748 <_printf_i+0x214>
 8011770:	2500      	movs	r5, #0
 8011772:	f104 0619 	add.w	r6, r4, #25
 8011776:	e7f5      	b.n	8011764 <_printf_i+0x230>
 8011778:	08012f65 	.word	0x08012f65
 801177c:	08012f76 	.word	0x08012f76

08011780 <iprintf>:
 8011780:	b40f      	push	{r0, r1, r2, r3}
 8011782:	4b0a      	ldr	r3, [pc, #40]	; (80117ac <iprintf+0x2c>)
 8011784:	b513      	push	{r0, r1, r4, lr}
 8011786:	681c      	ldr	r4, [r3, #0]
 8011788:	b124      	cbz	r4, 8011794 <iprintf+0x14>
 801178a:	69a3      	ldr	r3, [r4, #24]
 801178c:	b913      	cbnz	r3, 8011794 <iprintf+0x14>
 801178e:	4620      	mov	r0, r4
 8011790:	f000 fa2e 	bl	8011bf0 <__sinit>
 8011794:	ab05      	add	r3, sp, #20
 8011796:	4620      	mov	r0, r4
 8011798:	9a04      	ldr	r2, [sp, #16]
 801179a:	68a1      	ldr	r1, [r4, #8]
 801179c:	9301      	str	r3, [sp, #4]
 801179e:	f7ff fd29 	bl	80111f4 <_vfiprintf_r>
 80117a2:	b002      	add	sp, #8
 80117a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117a8:	b004      	add	sp, #16
 80117aa:	4770      	bx	lr
 80117ac:	2000017c 	.word	0x2000017c

080117b0 <_sbrk_r>:
 80117b0:	b538      	push	{r3, r4, r5, lr}
 80117b2:	2300      	movs	r3, #0
 80117b4:	4d05      	ldr	r5, [pc, #20]	; (80117cc <_sbrk_r+0x1c>)
 80117b6:	4604      	mov	r4, r0
 80117b8:	4608      	mov	r0, r1
 80117ba:	602b      	str	r3, [r5, #0]
 80117bc:	f7f6 fb06 	bl	8007dcc <_sbrk>
 80117c0:	1c43      	adds	r3, r0, #1
 80117c2:	d102      	bne.n	80117ca <_sbrk_r+0x1a>
 80117c4:	682b      	ldr	r3, [r5, #0]
 80117c6:	b103      	cbz	r3, 80117ca <_sbrk_r+0x1a>
 80117c8:	6023      	str	r3, [r4, #0]
 80117ca:	bd38      	pop	{r3, r4, r5, pc}
 80117cc:	20001668 	.word	0x20001668

080117d0 <strchr>:
 80117d0:	4603      	mov	r3, r0
 80117d2:	b2c9      	uxtb	r1, r1
 80117d4:	4618      	mov	r0, r3
 80117d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117da:	b112      	cbz	r2, 80117e2 <strchr+0x12>
 80117dc:	428a      	cmp	r2, r1
 80117de:	d1f9      	bne.n	80117d4 <strchr+0x4>
 80117e0:	4770      	bx	lr
 80117e2:	2900      	cmp	r1, #0
 80117e4:	bf18      	it	ne
 80117e6:	2000      	movne	r0, #0
 80117e8:	4770      	bx	lr

080117ea <strcspn>:
 80117ea:	4603      	mov	r3, r0
 80117ec:	b570      	push	{r4, r5, r6, lr}
 80117ee:	461e      	mov	r6, r3
 80117f0:	f813 4b01 	ldrb.w	r4, [r3], #1
 80117f4:	b144      	cbz	r4, 8011808 <strcspn+0x1e>
 80117f6:	1e4a      	subs	r2, r1, #1
 80117f8:	e001      	b.n	80117fe <strcspn+0x14>
 80117fa:	42a5      	cmp	r5, r4
 80117fc:	d004      	beq.n	8011808 <strcspn+0x1e>
 80117fe:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8011802:	2d00      	cmp	r5, #0
 8011804:	d1f9      	bne.n	80117fa <strcspn+0x10>
 8011806:	e7f2      	b.n	80117ee <strcspn+0x4>
 8011808:	1a30      	subs	r0, r6, r0
 801180a:	bd70      	pop	{r4, r5, r6, pc}

0801180c <strspn>:
 801180c:	4603      	mov	r3, r0
 801180e:	b570      	push	{r4, r5, r6, lr}
 8011810:	461e      	mov	r6, r3
 8011812:	f813 4b01 	ldrb.w	r4, [r3], #1
 8011816:	b13c      	cbz	r4, 8011828 <strspn+0x1c>
 8011818:	1e4a      	subs	r2, r1, #1
 801181a:	e001      	b.n	8011820 <strspn+0x14>
 801181c:	42a5      	cmp	r5, r4
 801181e:	d0f7      	beq.n	8011810 <strspn+0x4>
 8011820:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8011824:	2d00      	cmp	r5, #0
 8011826:	d1f9      	bne.n	801181c <strspn+0x10>
 8011828:	1a30      	subs	r0, r6, r0
 801182a:	bd70      	pop	{r4, r5, r6, pc}

0801182c <__swbuf_r>:
 801182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801182e:	460e      	mov	r6, r1
 8011830:	4614      	mov	r4, r2
 8011832:	4605      	mov	r5, r0
 8011834:	b118      	cbz	r0, 801183e <__swbuf_r+0x12>
 8011836:	6983      	ldr	r3, [r0, #24]
 8011838:	b90b      	cbnz	r3, 801183e <__swbuf_r+0x12>
 801183a:	f000 f9d9 	bl	8011bf0 <__sinit>
 801183e:	4b21      	ldr	r3, [pc, #132]	; (80118c4 <__swbuf_r+0x98>)
 8011840:	429c      	cmp	r4, r3
 8011842:	d12b      	bne.n	801189c <__swbuf_r+0x70>
 8011844:	686c      	ldr	r4, [r5, #4]
 8011846:	69a3      	ldr	r3, [r4, #24]
 8011848:	60a3      	str	r3, [r4, #8]
 801184a:	89a3      	ldrh	r3, [r4, #12]
 801184c:	071a      	lsls	r2, r3, #28
 801184e:	d52f      	bpl.n	80118b0 <__swbuf_r+0x84>
 8011850:	6923      	ldr	r3, [r4, #16]
 8011852:	b36b      	cbz	r3, 80118b0 <__swbuf_r+0x84>
 8011854:	6923      	ldr	r3, [r4, #16]
 8011856:	6820      	ldr	r0, [r4, #0]
 8011858:	b2f6      	uxtb	r6, r6
 801185a:	1ac0      	subs	r0, r0, r3
 801185c:	6963      	ldr	r3, [r4, #20]
 801185e:	4637      	mov	r7, r6
 8011860:	4283      	cmp	r3, r0
 8011862:	dc04      	bgt.n	801186e <__swbuf_r+0x42>
 8011864:	4621      	mov	r1, r4
 8011866:	4628      	mov	r0, r5
 8011868:	f000 f92e 	bl	8011ac8 <_fflush_r>
 801186c:	bb30      	cbnz	r0, 80118bc <__swbuf_r+0x90>
 801186e:	68a3      	ldr	r3, [r4, #8]
 8011870:	3001      	adds	r0, #1
 8011872:	3b01      	subs	r3, #1
 8011874:	60a3      	str	r3, [r4, #8]
 8011876:	6823      	ldr	r3, [r4, #0]
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	6022      	str	r2, [r4, #0]
 801187c:	701e      	strb	r6, [r3, #0]
 801187e:	6963      	ldr	r3, [r4, #20]
 8011880:	4283      	cmp	r3, r0
 8011882:	d004      	beq.n	801188e <__swbuf_r+0x62>
 8011884:	89a3      	ldrh	r3, [r4, #12]
 8011886:	07db      	lsls	r3, r3, #31
 8011888:	d506      	bpl.n	8011898 <__swbuf_r+0x6c>
 801188a:	2e0a      	cmp	r6, #10
 801188c:	d104      	bne.n	8011898 <__swbuf_r+0x6c>
 801188e:	4621      	mov	r1, r4
 8011890:	4628      	mov	r0, r5
 8011892:	f000 f919 	bl	8011ac8 <_fflush_r>
 8011896:	b988      	cbnz	r0, 80118bc <__swbuf_r+0x90>
 8011898:	4638      	mov	r0, r7
 801189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801189c:	4b0a      	ldr	r3, [pc, #40]	; (80118c8 <__swbuf_r+0x9c>)
 801189e:	429c      	cmp	r4, r3
 80118a0:	d101      	bne.n	80118a6 <__swbuf_r+0x7a>
 80118a2:	68ac      	ldr	r4, [r5, #8]
 80118a4:	e7cf      	b.n	8011846 <__swbuf_r+0x1a>
 80118a6:	4b09      	ldr	r3, [pc, #36]	; (80118cc <__swbuf_r+0xa0>)
 80118a8:	429c      	cmp	r4, r3
 80118aa:	bf08      	it	eq
 80118ac:	68ec      	ldreq	r4, [r5, #12]
 80118ae:	e7ca      	b.n	8011846 <__swbuf_r+0x1a>
 80118b0:	4621      	mov	r1, r4
 80118b2:	4628      	mov	r0, r5
 80118b4:	f000 f80c 	bl	80118d0 <__swsetup_r>
 80118b8:	2800      	cmp	r0, #0
 80118ba:	d0cb      	beq.n	8011854 <__swbuf_r+0x28>
 80118bc:	f04f 37ff 	mov.w	r7, #4294967295
 80118c0:	e7ea      	b.n	8011898 <__swbuf_r+0x6c>
 80118c2:	bf00      	nop
 80118c4:	08012fa8 	.word	0x08012fa8
 80118c8:	08012fc8 	.word	0x08012fc8
 80118cc:	08012f88 	.word	0x08012f88

080118d0 <__swsetup_r>:
 80118d0:	4b32      	ldr	r3, [pc, #200]	; (801199c <__swsetup_r+0xcc>)
 80118d2:	b570      	push	{r4, r5, r6, lr}
 80118d4:	681d      	ldr	r5, [r3, #0]
 80118d6:	4606      	mov	r6, r0
 80118d8:	460c      	mov	r4, r1
 80118da:	b125      	cbz	r5, 80118e6 <__swsetup_r+0x16>
 80118dc:	69ab      	ldr	r3, [r5, #24]
 80118de:	b913      	cbnz	r3, 80118e6 <__swsetup_r+0x16>
 80118e0:	4628      	mov	r0, r5
 80118e2:	f000 f985 	bl	8011bf0 <__sinit>
 80118e6:	4b2e      	ldr	r3, [pc, #184]	; (80119a0 <__swsetup_r+0xd0>)
 80118e8:	429c      	cmp	r4, r3
 80118ea:	d10f      	bne.n	801190c <__swsetup_r+0x3c>
 80118ec:	686c      	ldr	r4, [r5, #4]
 80118ee:	89a3      	ldrh	r3, [r4, #12]
 80118f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118f4:	0719      	lsls	r1, r3, #28
 80118f6:	d42c      	bmi.n	8011952 <__swsetup_r+0x82>
 80118f8:	06dd      	lsls	r5, r3, #27
 80118fa:	d411      	bmi.n	8011920 <__swsetup_r+0x50>
 80118fc:	2309      	movs	r3, #9
 80118fe:	6033      	str	r3, [r6, #0]
 8011900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011904:	f04f 30ff 	mov.w	r0, #4294967295
 8011908:	81a3      	strh	r3, [r4, #12]
 801190a:	e03e      	b.n	801198a <__swsetup_r+0xba>
 801190c:	4b25      	ldr	r3, [pc, #148]	; (80119a4 <__swsetup_r+0xd4>)
 801190e:	429c      	cmp	r4, r3
 8011910:	d101      	bne.n	8011916 <__swsetup_r+0x46>
 8011912:	68ac      	ldr	r4, [r5, #8]
 8011914:	e7eb      	b.n	80118ee <__swsetup_r+0x1e>
 8011916:	4b24      	ldr	r3, [pc, #144]	; (80119a8 <__swsetup_r+0xd8>)
 8011918:	429c      	cmp	r4, r3
 801191a:	bf08      	it	eq
 801191c:	68ec      	ldreq	r4, [r5, #12]
 801191e:	e7e6      	b.n	80118ee <__swsetup_r+0x1e>
 8011920:	0758      	lsls	r0, r3, #29
 8011922:	d512      	bpl.n	801194a <__swsetup_r+0x7a>
 8011924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011926:	b141      	cbz	r1, 801193a <__swsetup_r+0x6a>
 8011928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801192c:	4299      	cmp	r1, r3
 801192e:	d002      	beq.n	8011936 <__swsetup_r+0x66>
 8011930:	4630      	mov	r0, r6
 8011932:	f7ff fb91 	bl	8011058 <_free_r>
 8011936:	2300      	movs	r3, #0
 8011938:	6363      	str	r3, [r4, #52]	; 0x34
 801193a:	89a3      	ldrh	r3, [r4, #12]
 801193c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011940:	81a3      	strh	r3, [r4, #12]
 8011942:	2300      	movs	r3, #0
 8011944:	6063      	str	r3, [r4, #4]
 8011946:	6923      	ldr	r3, [r4, #16]
 8011948:	6023      	str	r3, [r4, #0]
 801194a:	89a3      	ldrh	r3, [r4, #12]
 801194c:	f043 0308 	orr.w	r3, r3, #8
 8011950:	81a3      	strh	r3, [r4, #12]
 8011952:	6923      	ldr	r3, [r4, #16]
 8011954:	b94b      	cbnz	r3, 801196a <__swsetup_r+0x9a>
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801195c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011960:	d003      	beq.n	801196a <__swsetup_r+0x9a>
 8011962:	4621      	mov	r1, r4
 8011964:	4630      	mov	r0, r6
 8011966:	f000 fa07 	bl	8011d78 <__smakebuf_r>
 801196a:	89a0      	ldrh	r0, [r4, #12]
 801196c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011970:	f010 0301 	ands.w	r3, r0, #1
 8011974:	d00a      	beq.n	801198c <__swsetup_r+0xbc>
 8011976:	2300      	movs	r3, #0
 8011978:	60a3      	str	r3, [r4, #8]
 801197a:	6963      	ldr	r3, [r4, #20]
 801197c:	425b      	negs	r3, r3
 801197e:	61a3      	str	r3, [r4, #24]
 8011980:	6923      	ldr	r3, [r4, #16]
 8011982:	b943      	cbnz	r3, 8011996 <__swsetup_r+0xc6>
 8011984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011988:	d1ba      	bne.n	8011900 <__swsetup_r+0x30>
 801198a:	bd70      	pop	{r4, r5, r6, pc}
 801198c:	0781      	lsls	r1, r0, #30
 801198e:	bf58      	it	pl
 8011990:	6963      	ldrpl	r3, [r4, #20]
 8011992:	60a3      	str	r3, [r4, #8]
 8011994:	e7f4      	b.n	8011980 <__swsetup_r+0xb0>
 8011996:	2000      	movs	r0, #0
 8011998:	e7f7      	b.n	801198a <__swsetup_r+0xba>
 801199a:	bf00      	nop
 801199c:	2000017c 	.word	0x2000017c
 80119a0:	08012fa8 	.word	0x08012fa8
 80119a4:	08012fc8 	.word	0x08012fc8
 80119a8:	08012f88 	.word	0x08012f88

080119ac <abort>:
 80119ac:	2006      	movs	r0, #6
 80119ae:	b508      	push	{r3, lr}
 80119b0:	f000 fa64 	bl	8011e7c <raise>
 80119b4:	2001      	movs	r0, #1
 80119b6:	f7f6 f996 	bl	8007ce6 <_exit>
	...

080119bc <__sflush_r>:
 80119bc:	898a      	ldrh	r2, [r1, #12]
 80119be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119c2:	4605      	mov	r5, r0
 80119c4:	0710      	lsls	r0, r2, #28
 80119c6:	460c      	mov	r4, r1
 80119c8:	d458      	bmi.n	8011a7c <__sflush_r+0xc0>
 80119ca:	684b      	ldr	r3, [r1, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	dc05      	bgt.n	80119dc <__sflush_r+0x20>
 80119d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	dc02      	bgt.n	80119dc <__sflush_r+0x20>
 80119d6:	2000      	movs	r0, #0
 80119d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119de:	2e00      	cmp	r6, #0
 80119e0:	d0f9      	beq.n	80119d6 <__sflush_r+0x1a>
 80119e2:	2300      	movs	r3, #0
 80119e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119e8:	682f      	ldr	r7, [r5, #0]
 80119ea:	602b      	str	r3, [r5, #0]
 80119ec:	d032      	beq.n	8011a54 <__sflush_r+0x98>
 80119ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119f0:	89a3      	ldrh	r3, [r4, #12]
 80119f2:	075a      	lsls	r2, r3, #29
 80119f4:	d505      	bpl.n	8011a02 <__sflush_r+0x46>
 80119f6:	6863      	ldr	r3, [r4, #4]
 80119f8:	1ac0      	subs	r0, r0, r3
 80119fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119fc:	b10b      	cbz	r3, 8011a02 <__sflush_r+0x46>
 80119fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a00:	1ac0      	subs	r0, r0, r3
 8011a02:	2300      	movs	r3, #0
 8011a04:	4602      	mov	r2, r0
 8011a06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a08:	4628      	mov	r0, r5
 8011a0a:	6a21      	ldr	r1, [r4, #32]
 8011a0c:	47b0      	blx	r6
 8011a0e:	1c43      	adds	r3, r0, #1
 8011a10:	89a3      	ldrh	r3, [r4, #12]
 8011a12:	d106      	bne.n	8011a22 <__sflush_r+0x66>
 8011a14:	6829      	ldr	r1, [r5, #0]
 8011a16:	291d      	cmp	r1, #29
 8011a18:	d82c      	bhi.n	8011a74 <__sflush_r+0xb8>
 8011a1a:	4a2a      	ldr	r2, [pc, #168]	; (8011ac4 <__sflush_r+0x108>)
 8011a1c:	40ca      	lsrs	r2, r1
 8011a1e:	07d6      	lsls	r6, r2, #31
 8011a20:	d528      	bpl.n	8011a74 <__sflush_r+0xb8>
 8011a22:	2200      	movs	r2, #0
 8011a24:	6062      	str	r2, [r4, #4]
 8011a26:	6922      	ldr	r2, [r4, #16]
 8011a28:	04d9      	lsls	r1, r3, #19
 8011a2a:	6022      	str	r2, [r4, #0]
 8011a2c:	d504      	bpl.n	8011a38 <__sflush_r+0x7c>
 8011a2e:	1c42      	adds	r2, r0, #1
 8011a30:	d101      	bne.n	8011a36 <__sflush_r+0x7a>
 8011a32:	682b      	ldr	r3, [r5, #0]
 8011a34:	b903      	cbnz	r3, 8011a38 <__sflush_r+0x7c>
 8011a36:	6560      	str	r0, [r4, #84]	; 0x54
 8011a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a3a:	602f      	str	r7, [r5, #0]
 8011a3c:	2900      	cmp	r1, #0
 8011a3e:	d0ca      	beq.n	80119d6 <__sflush_r+0x1a>
 8011a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a44:	4299      	cmp	r1, r3
 8011a46:	d002      	beq.n	8011a4e <__sflush_r+0x92>
 8011a48:	4628      	mov	r0, r5
 8011a4a:	f7ff fb05 	bl	8011058 <_free_r>
 8011a4e:	2000      	movs	r0, #0
 8011a50:	6360      	str	r0, [r4, #52]	; 0x34
 8011a52:	e7c1      	b.n	80119d8 <__sflush_r+0x1c>
 8011a54:	6a21      	ldr	r1, [r4, #32]
 8011a56:	2301      	movs	r3, #1
 8011a58:	4628      	mov	r0, r5
 8011a5a:	47b0      	blx	r6
 8011a5c:	1c41      	adds	r1, r0, #1
 8011a5e:	d1c7      	bne.n	80119f0 <__sflush_r+0x34>
 8011a60:	682b      	ldr	r3, [r5, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d0c4      	beq.n	80119f0 <__sflush_r+0x34>
 8011a66:	2b1d      	cmp	r3, #29
 8011a68:	d001      	beq.n	8011a6e <__sflush_r+0xb2>
 8011a6a:	2b16      	cmp	r3, #22
 8011a6c:	d101      	bne.n	8011a72 <__sflush_r+0xb6>
 8011a6e:	602f      	str	r7, [r5, #0]
 8011a70:	e7b1      	b.n	80119d6 <__sflush_r+0x1a>
 8011a72:	89a3      	ldrh	r3, [r4, #12]
 8011a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a78:	81a3      	strh	r3, [r4, #12]
 8011a7a:	e7ad      	b.n	80119d8 <__sflush_r+0x1c>
 8011a7c:	690f      	ldr	r7, [r1, #16]
 8011a7e:	2f00      	cmp	r7, #0
 8011a80:	d0a9      	beq.n	80119d6 <__sflush_r+0x1a>
 8011a82:	0793      	lsls	r3, r2, #30
 8011a84:	bf18      	it	ne
 8011a86:	2300      	movne	r3, #0
 8011a88:	680e      	ldr	r6, [r1, #0]
 8011a8a:	bf08      	it	eq
 8011a8c:	694b      	ldreq	r3, [r1, #20]
 8011a8e:	eba6 0807 	sub.w	r8, r6, r7
 8011a92:	600f      	str	r7, [r1, #0]
 8011a94:	608b      	str	r3, [r1, #8]
 8011a96:	f1b8 0f00 	cmp.w	r8, #0
 8011a9a:	dd9c      	ble.n	80119d6 <__sflush_r+0x1a>
 8011a9c:	4643      	mov	r3, r8
 8011a9e:	463a      	mov	r2, r7
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	6a21      	ldr	r1, [r4, #32]
 8011aa4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011aa6:	47b0      	blx	r6
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	dc06      	bgt.n	8011aba <__sflush_r+0xfe>
 8011aac:	89a3      	ldrh	r3, [r4, #12]
 8011aae:	f04f 30ff 	mov.w	r0, #4294967295
 8011ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ab6:	81a3      	strh	r3, [r4, #12]
 8011ab8:	e78e      	b.n	80119d8 <__sflush_r+0x1c>
 8011aba:	4407      	add	r7, r0
 8011abc:	eba8 0800 	sub.w	r8, r8, r0
 8011ac0:	e7e9      	b.n	8011a96 <__sflush_r+0xda>
 8011ac2:	bf00      	nop
 8011ac4:	20400001 	.word	0x20400001

08011ac8 <_fflush_r>:
 8011ac8:	b538      	push	{r3, r4, r5, lr}
 8011aca:	690b      	ldr	r3, [r1, #16]
 8011acc:	4605      	mov	r5, r0
 8011ace:	460c      	mov	r4, r1
 8011ad0:	b913      	cbnz	r3, 8011ad8 <_fflush_r+0x10>
 8011ad2:	2500      	movs	r5, #0
 8011ad4:	4628      	mov	r0, r5
 8011ad6:	bd38      	pop	{r3, r4, r5, pc}
 8011ad8:	b118      	cbz	r0, 8011ae2 <_fflush_r+0x1a>
 8011ada:	6983      	ldr	r3, [r0, #24]
 8011adc:	b90b      	cbnz	r3, 8011ae2 <_fflush_r+0x1a>
 8011ade:	f000 f887 	bl	8011bf0 <__sinit>
 8011ae2:	4b14      	ldr	r3, [pc, #80]	; (8011b34 <_fflush_r+0x6c>)
 8011ae4:	429c      	cmp	r4, r3
 8011ae6:	d11b      	bne.n	8011b20 <_fflush_r+0x58>
 8011ae8:	686c      	ldr	r4, [r5, #4]
 8011aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d0ef      	beq.n	8011ad2 <_fflush_r+0xa>
 8011af2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011af4:	07d0      	lsls	r0, r2, #31
 8011af6:	d404      	bmi.n	8011b02 <_fflush_r+0x3a>
 8011af8:	0599      	lsls	r1, r3, #22
 8011afa:	d402      	bmi.n	8011b02 <_fflush_r+0x3a>
 8011afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011afe:	f000 f915 	bl	8011d2c <__retarget_lock_acquire_recursive>
 8011b02:	4628      	mov	r0, r5
 8011b04:	4621      	mov	r1, r4
 8011b06:	f7ff ff59 	bl	80119bc <__sflush_r>
 8011b0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b0c:	4605      	mov	r5, r0
 8011b0e:	07da      	lsls	r2, r3, #31
 8011b10:	d4e0      	bmi.n	8011ad4 <_fflush_r+0xc>
 8011b12:	89a3      	ldrh	r3, [r4, #12]
 8011b14:	059b      	lsls	r3, r3, #22
 8011b16:	d4dd      	bmi.n	8011ad4 <_fflush_r+0xc>
 8011b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b1a:	f000 f908 	bl	8011d2e <__retarget_lock_release_recursive>
 8011b1e:	e7d9      	b.n	8011ad4 <_fflush_r+0xc>
 8011b20:	4b05      	ldr	r3, [pc, #20]	; (8011b38 <_fflush_r+0x70>)
 8011b22:	429c      	cmp	r4, r3
 8011b24:	d101      	bne.n	8011b2a <_fflush_r+0x62>
 8011b26:	68ac      	ldr	r4, [r5, #8]
 8011b28:	e7df      	b.n	8011aea <_fflush_r+0x22>
 8011b2a:	4b04      	ldr	r3, [pc, #16]	; (8011b3c <_fflush_r+0x74>)
 8011b2c:	429c      	cmp	r4, r3
 8011b2e:	bf08      	it	eq
 8011b30:	68ec      	ldreq	r4, [r5, #12]
 8011b32:	e7da      	b.n	8011aea <_fflush_r+0x22>
 8011b34:	08012fa8 	.word	0x08012fa8
 8011b38:	08012fc8 	.word	0x08012fc8
 8011b3c:	08012f88 	.word	0x08012f88

08011b40 <std>:
 8011b40:	2300      	movs	r3, #0
 8011b42:	b510      	push	{r4, lr}
 8011b44:	4604      	mov	r4, r0
 8011b46:	e9c0 3300 	strd	r3, r3, [r0]
 8011b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b4e:	6083      	str	r3, [r0, #8]
 8011b50:	8181      	strh	r1, [r0, #12]
 8011b52:	6643      	str	r3, [r0, #100]	; 0x64
 8011b54:	81c2      	strh	r2, [r0, #14]
 8011b56:	6183      	str	r3, [r0, #24]
 8011b58:	4619      	mov	r1, r3
 8011b5a:	2208      	movs	r2, #8
 8011b5c:	305c      	adds	r0, #92	; 0x5c
 8011b5e:	f7ff fa73 	bl	8011048 <memset>
 8011b62:	4b05      	ldr	r3, [pc, #20]	; (8011b78 <std+0x38>)
 8011b64:	6224      	str	r4, [r4, #32]
 8011b66:	6263      	str	r3, [r4, #36]	; 0x24
 8011b68:	4b04      	ldr	r3, [pc, #16]	; (8011b7c <std+0x3c>)
 8011b6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b6c:	4b04      	ldr	r3, [pc, #16]	; (8011b80 <std+0x40>)
 8011b6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b70:	4b04      	ldr	r3, [pc, #16]	; (8011b84 <std+0x44>)
 8011b72:	6323      	str	r3, [r4, #48]	; 0x30
 8011b74:	bd10      	pop	{r4, pc}
 8011b76:	bf00      	nop
 8011b78:	08011eb5 	.word	0x08011eb5
 8011b7c:	08011ed7 	.word	0x08011ed7
 8011b80:	08011f0f 	.word	0x08011f0f
 8011b84:	08011f33 	.word	0x08011f33

08011b88 <_cleanup_r>:
 8011b88:	4901      	ldr	r1, [pc, #4]	; (8011b90 <_cleanup_r+0x8>)
 8011b8a:	f000 b8af 	b.w	8011cec <_fwalk_reent>
 8011b8e:	bf00      	nop
 8011b90:	08011ac9 	.word	0x08011ac9

08011b94 <__sfmoreglue>:
 8011b94:	b570      	push	{r4, r5, r6, lr}
 8011b96:	2568      	movs	r5, #104	; 0x68
 8011b98:	1e4a      	subs	r2, r1, #1
 8011b9a:	4355      	muls	r5, r2
 8011b9c:	460e      	mov	r6, r1
 8011b9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011ba2:	f7ff faa5 	bl	80110f0 <_malloc_r>
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	b140      	cbz	r0, 8011bbc <__sfmoreglue+0x28>
 8011baa:	2100      	movs	r1, #0
 8011bac:	e9c0 1600 	strd	r1, r6, [r0]
 8011bb0:	300c      	adds	r0, #12
 8011bb2:	60a0      	str	r0, [r4, #8]
 8011bb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011bb8:	f7ff fa46 	bl	8011048 <memset>
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	bd70      	pop	{r4, r5, r6, pc}

08011bc0 <__sfp_lock_acquire>:
 8011bc0:	4801      	ldr	r0, [pc, #4]	; (8011bc8 <__sfp_lock_acquire+0x8>)
 8011bc2:	f000 b8b3 	b.w	8011d2c <__retarget_lock_acquire_recursive>
 8011bc6:	bf00      	nop
 8011bc8:	20001664 	.word	0x20001664

08011bcc <__sfp_lock_release>:
 8011bcc:	4801      	ldr	r0, [pc, #4]	; (8011bd4 <__sfp_lock_release+0x8>)
 8011bce:	f000 b8ae 	b.w	8011d2e <__retarget_lock_release_recursive>
 8011bd2:	bf00      	nop
 8011bd4:	20001664 	.word	0x20001664

08011bd8 <__sinit_lock_acquire>:
 8011bd8:	4801      	ldr	r0, [pc, #4]	; (8011be0 <__sinit_lock_acquire+0x8>)
 8011bda:	f000 b8a7 	b.w	8011d2c <__retarget_lock_acquire_recursive>
 8011bde:	bf00      	nop
 8011be0:	2000165f 	.word	0x2000165f

08011be4 <__sinit_lock_release>:
 8011be4:	4801      	ldr	r0, [pc, #4]	; (8011bec <__sinit_lock_release+0x8>)
 8011be6:	f000 b8a2 	b.w	8011d2e <__retarget_lock_release_recursive>
 8011bea:	bf00      	nop
 8011bec:	2000165f 	.word	0x2000165f

08011bf0 <__sinit>:
 8011bf0:	b510      	push	{r4, lr}
 8011bf2:	4604      	mov	r4, r0
 8011bf4:	f7ff fff0 	bl	8011bd8 <__sinit_lock_acquire>
 8011bf8:	69a3      	ldr	r3, [r4, #24]
 8011bfa:	b11b      	cbz	r3, 8011c04 <__sinit+0x14>
 8011bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c00:	f7ff bff0 	b.w	8011be4 <__sinit_lock_release>
 8011c04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c08:	6523      	str	r3, [r4, #80]	; 0x50
 8011c0a:	4b13      	ldr	r3, [pc, #76]	; (8011c58 <__sinit+0x68>)
 8011c0c:	4a13      	ldr	r2, [pc, #76]	; (8011c5c <__sinit+0x6c>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c12:	42a3      	cmp	r3, r4
 8011c14:	bf08      	it	eq
 8011c16:	2301      	moveq	r3, #1
 8011c18:	4620      	mov	r0, r4
 8011c1a:	bf08      	it	eq
 8011c1c:	61a3      	streq	r3, [r4, #24]
 8011c1e:	f000 f81f 	bl	8011c60 <__sfp>
 8011c22:	6060      	str	r0, [r4, #4]
 8011c24:	4620      	mov	r0, r4
 8011c26:	f000 f81b 	bl	8011c60 <__sfp>
 8011c2a:	60a0      	str	r0, [r4, #8]
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f000 f817 	bl	8011c60 <__sfp>
 8011c32:	2200      	movs	r2, #0
 8011c34:	2104      	movs	r1, #4
 8011c36:	60e0      	str	r0, [r4, #12]
 8011c38:	6860      	ldr	r0, [r4, #4]
 8011c3a:	f7ff ff81 	bl	8011b40 <std>
 8011c3e:	2201      	movs	r2, #1
 8011c40:	2109      	movs	r1, #9
 8011c42:	68a0      	ldr	r0, [r4, #8]
 8011c44:	f7ff ff7c 	bl	8011b40 <std>
 8011c48:	2202      	movs	r2, #2
 8011c4a:	2112      	movs	r1, #18
 8011c4c:	68e0      	ldr	r0, [r4, #12]
 8011c4e:	f7ff ff77 	bl	8011b40 <std>
 8011c52:	2301      	movs	r3, #1
 8011c54:	61a3      	str	r3, [r4, #24]
 8011c56:	e7d1      	b.n	8011bfc <__sinit+0xc>
 8011c58:	08012f50 	.word	0x08012f50
 8011c5c:	08011b89 	.word	0x08011b89

08011c60 <__sfp>:
 8011c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c62:	4607      	mov	r7, r0
 8011c64:	f7ff ffac 	bl	8011bc0 <__sfp_lock_acquire>
 8011c68:	4b1e      	ldr	r3, [pc, #120]	; (8011ce4 <__sfp+0x84>)
 8011c6a:	681e      	ldr	r6, [r3, #0]
 8011c6c:	69b3      	ldr	r3, [r6, #24]
 8011c6e:	b913      	cbnz	r3, 8011c76 <__sfp+0x16>
 8011c70:	4630      	mov	r0, r6
 8011c72:	f7ff ffbd 	bl	8011bf0 <__sinit>
 8011c76:	3648      	adds	r6, #72	; 0x48
 8011c78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c7c:	3b01      	subs	r3, #1
 8011c7e:	d503      	bpl.n	8011c88 <__sfp+0x28>
 8011c80:	6833      	ldr	r3, [r6, #0]
 8011c82:	b30b      	cbz	r3, 8011cc8 <__sfp+0x68>
 8011c84:	6836      	ldr	r6, [r6, #0]
 8011c86:	e7f7      	b.n	8011c78 <__sfp+0x18>
 8011c88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c8c:	b9d5      	cbnz	r5, 8011cc4 <__sfp+0x64>
 8011c8e:	4b16      	ldr	r3, [pc, #88]	; (8011ce8 <__sfp+0x88>)
 8011c90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c94:	60e3      	str	r3, [r4, #12]
 8011c96:	6665      	str	r5, [r4, #100]	; 0x64
 8011c98:	f000 f847 	bl	8011d2a <__retarget_lock_init_recursive>
 8011c9c:	f7ff ff96 	bl	8011bcc <__sfp_lock_release>
 8011ca0:	2208      	movs	r2, #8
 8011ca2:	4629      	mov	r1, r5
 8011ca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011ca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011cac:	6025      	str	r5, [r4, #0]
 8011cae:	61a5      	str	r5, [r4, #24]
 8011cb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011cb4:	f7ff f9c8 	bl	8011048 <memset>
 8011cb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011cbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cc4:	3468      	adds	r4, #104	; 0x68
 8011cc6:	e7d9      	b.n	8011c7c <__sfp+0x1c>
 8011cc8:	2104      	movs	r1, #4
 8011cca:	4638      	mov	r0, r7
 8011ccc:	f7ff ff62 	bl	8011b94 <__sfmoreglue>
 8011cd0:	4604      	mov	r4, r0
 8011cd2:	6030      	str	r0, [r6, #0]
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d1d5      	bne.n	8011c84 <__sfp+0x24>
 8011cd8:	f7ff ff78 	bl	8011bcc <__sfp_lock_release>
 8011cdc:	230c      	movs	r3, #12
 8011cde:	603b      	str	r3, [r7, #0]
 8011ce0:	e7ee      	b.n	8011cc0 <__sfp+0x60>
 8011ce2:	bf00      	nop
 8011ce4:	08012f50 	.word	0x08012f50
 8011ce8:	ffff0001 	.word	0xffff0001

08011cec <_fwalk_reent>:
 8011cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cf0:	4606      	mov	r6, r0
 8011cf2:	4688      	mov	r8, r1
 8011cf4:	2700      	movs	r7, #0
 8011cf6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011cfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cfe:	f1b9 0901 	subs.w	r9, r9, #1
 8011d02:	d505      	bpl.n	8011d10 <_fwalk_reent+0x24>
 8011d04:	6824      	ldr	r4, [r4, #0]
 8011d06:	2c00      	cmp	r4, #0
 8011d08:	d1f7      	bne.n	8011cfa <_fwalk_reent+0xe>
 8011d0a:	4638      	mov	r0, r7
 8011d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d10:	89ab      	ldrh	r3, [r5, #12]
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	d907      	bls.n	8011d26 <_fwalk_reent+0x3a>
 8011d16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d1a:	3301      	adds	r3, #1
 8011d1c:	d003      	beq.n	8011d26 <_fwalk_reent+0x3a>
 8011d1e:	4629      	mov	r1, r5
 8011d20:	4630      	mov	r0, r6
 8011d22:	47c0      	blx	r8
 8011d24:	4307      	orrs	r7, r0
 8011d26:	3568      	adds	r5, #104	; 0x68
 8011d28:	e7e9      	b.n	8011cfe <_fwalk_reent+0x12>

08011d2a <__retarget_lock_init_recursive>:
 8011d2a:	4770      	bx	lr

08011d2c <__retarget_lock_acquire_recursive>:
 8011d2c:	4770      	bx	lr

08011d2e <__retarget_lock_release_recursive>:
 8011d2e:	4770      	bx	lr

08011d30 <__swhatbuf_r>:
 8011d30:	b570      	push	{r4, r5, r6, lr}
 8011d32:	460e      	mov	r6, r1
 8011d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d38:	4614      	mov	r4, r2
 8011d3a:	2900      	cmp	r1, #0
 8011d3c:	461d      	mov	r5, r3
 8011d3e:	b096      	sub	sp, #88	; 0x58
 8011d40:	da07      	bge.n	8011d52 <__swhatbuf_r+0x22>
 8011d42:	2300      	movs	r3, #0
 8011d44:	602b      	str	r3, [r5, #0]
 8011d46:	89b3      	ldrh	r3, [r6, #12]
 8011d48:	061a      	lsls	r2, r3, #24
 8011d4a:	d410      	bmi.n	8011d6e <__swhatbuf_r+0x3e>
 8011d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d50:	e00e      	b.n	8011d70 <__swhatbuf_r+0x40>
 8011d52:	466a      	mov	r2, sp
 8011d54:	f000 f914 	bl	8011f80 <_fstat_r>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	dbf2      	blt.n	8011d42 <__swhatbuf_r+0x12>
 8011d5c:	9a01      	ldr	r2, [sp, #4]
 8011d5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d66:	425a      	negs	r2, r3
 8011d68:	415a      	adcs	r2, r3
 8011d6a:	602a      	str	r2, [r5, #0]
 8011d6c:	e7ee      	b.n	8011d4c <__swhatbuf_r+0x1c>
 8011d6e:	2340      	movs	r3, #64	; 0x40
 8011d70:	2000      	movs	r0, #0
 8011d72:	6023      	str	r3, [r4, #0]
 8011d74:	b016      	add	sp, #88	; 0x58
 8011d76:	bd70      	pop	{r4, r5, r6, pc}

08011d78 <__smakebuf_r>:
 8011d78:	898b      	ldrh	r3, [r1, #12]
 8011d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d7c:	079d      	lsls	r5, r3, #30
 8011d7e:	4606      	mov	r6, r0
 8011d80:	460c      	mov	r4, r1
 8011d82:	d507      	bpl.n	8011d94 <__smakebuf_r+0x1c>
 8011d84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d88:	6023      	str	r3, [r4, #0]
 8011d8a:	6123      	str	r3, [r4, #16]
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	6163      	str	r3, [r4, #20]
 8011d90:	b002      	add	sp, #8
 8011d92:	bd70      	pop	{r4, r5, r6, pc}
 8011d94:	466a      	mov	r2, sp
 8011d96:	ab01      	add	r3, sp, #4
 8011d98:	f7ff ffca 	bl	8011d30 <__swhatbuf_r>
 8011d9c:	9900      	ldr	r1, [sp, #0]
 8011d9e:	4605      	mov	r5, r0
 8011da0:	4630      	mov	r0, r6
 8011da2:	f7ff f9a5 	bl	80110f0 <_malloc_r>
 8011da6:	b948      	cbnz	r0, 8011dbc <__smakebuf_r+0x44>
 8011da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dac:	059a      	lsls	r2, r3, #22
 8011dae:	d4ef      	bmi.n	8011d90 <__smakebuf_r+0x18>
 8011db0:	f023 0303 	bic.w	r3, r3, #3
 8011db4:	f043 0302 	orr.w	r3, r3, #2
 8011db8:	81a3      	strh	r3, [r4, #12]
 8011dba:	e7e3      	b.n	8011d84 <__smakebuf_r+0xc>
 8011dbc:	4b0d      	ldr	r3, [pc, #52]	; (8011df4 <__smakebuf_r+0x7c>)
 8011dbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8011dc0:	89a3      	ldrh	r3, [r4, #12]
 8011dc2:	6020      	str	r0, [r4, #0]
 8011dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dc8:	81a3      	strh	r3, [r4, #12]
 8011dca:	9b00      	ldr	r3, [sp, #0]
 8011dcc:	6120      	str	r0, [r4, #16]
 8011dce:	6163      	str	r3, [r4, #20]
 8011dd0:	9b01      	ldr	r3, [sp, #4]
 8011dd2:	b15b      	cbz	r3, 8011dec <__smakebuf_r+0x74>
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dda:	f000 f8e3 	bl	8011fa4 <_isatty_r>
 8011dde:	b128      	cbz	r0, 8011dec <__smakebuf_r+0x74>
 8011de0:	89a3      	ldrh	r3, [r4, #12]
 8011de2:	f023 0303 	bic.w	r3, r3, #3
 8011de6:	f043 0301 	orr.w	r3, r3, #1
 8011dea:	81a3      	strh	r3, [r4, #12]
 8011dec:	89a0      	ldrh	r0, [r4, #12]
 8011dee:	4305      	orrs	r5, r0
 8011df0:	81a5      	strh	r5, [r4, #12]
 8011df2:	e7cd      	b.n	8011d90 <__smakebuf_r+0x18>
 8011df4:	08011b89 	.word	0x08011b89

08011df8 <memchr>:
 8011df8:	4603      	mov	r3, r0
 8011dfa:	b510      	push	{r4, lr}
 8011dfc:	b2c9      	uxtb	r1, r1
 8011dfe:	4402      	add	r2, r0
 8011e00:	4293      	cmp	r3, r2
 8011e02:	4618      	mov	r0, r3
 8011e04:	d101      	bne.n	8011e0a <memchr+0x12>
 8011e06:	2000      	movs	r0, #0
 8011e08:	e003      	b.n	8011e12 <memchr+0x1a>
 8011e0a:	7804      	ldrb	r4, [r0, #0]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	428c      	cmp	r4, r1
 8011e10:	d1f6      	bne.n	8011e00 <memchr+0x8>
 8011e12:	bd10      	pop	{r4, pc}

08011e14 <__malloc_lock>:
 8011e14:	4801      	ldr	r0, [pc, #4]	; (8011e1c <__malloc_lock+0x8>)
 8011e16:	f7ff bf89 	b.w	8011d2c <__retarget_lock_acquire_recursive>
 8011e1a:	bf00      	nop
 8011e1c:	20001660 	.word	0x20001660

08011e20 <__malloc_unlock>:
 8011e20:	4801      	ldr	r0, [pc, #4]	; (8011e28 <__malloc_unlock+0x8>)
 8011e22:	f7ff bf84 	b.w	8011d2e <__retarget_lock_release_recursive>
 8011e26:	bf00      	nop
 8011e28:	20001660 	.word	0x20001660

08011e2c <_raise_r>:
 8011e2c:	291f      	cmp	r1, #31
 8011e2e:	b538      	push	{r3, r4, r5, lr}
 8011e30:	4604      	mov	r4, r0
 8011e32:	460d      	mov	r5, r1
 8011e34:	d904      	bls.n	8011e40 <_raise_r+0x14>
 8011e36:	2316      	movs	r3, #22
 8011e38:	6003      	str	r3, [r0, #0]
 8011e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e3e:	bd38      	pop	{r3, r4, r5, pc}
 8011e40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011e42:	b112      	cbz	r2, 8011e4a <_raise_r+0x1e>
 8011e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e48:	b94b      	cbnz	r3, 8011e5e <_raise_r+0x32>
 8011e4a:	4620      	mov	r0, r4
 8011e4c:	f000 f830 	bl	8011eb0 <_getpid_r>
 8011e50:	462a      	mov	r2, r5
 8011e52:	4601      	mov	r1, r0
 8011e54:	4620      	mov	r0, r4
 8011e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e5a:	f000 b817 	b.w	8011e8c <_kill_r>
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d00a      	beq.n	8011e78 <_raise_r+0x4c>
 8011e62:	1c59      	adds	r1, r3, #1
 8011e64:	d103      	bne.n	8011e6e <_raise_r+0x42>
 8011e66:	2316      	movs	r3, #22
 8011e68:	6003      	str	r3, [r0, #0]
 8011e6a:	2001      	movs	r0, #1
 8011e6c:	e7e7      	b.n	8011e3e <_raise_r+0x12>
 8011e6e:	2400      	movs	r4, #0
 8011e70:	4628      	mov	r0, r5
 8011e72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e76:	4798      	blx	r3
 8011e78:	2000      	movs	r0, #0
 8011e7a:	e7e0      	b.n	8011e3e <_raise_r+0x12>

08011e7c <raise>:
 8011e7c:	4b02      	ldr	r3, [pc, #8]	; (8011e88 <raise+0xc>)
 8011e7e:	4601      	mov	r1, r0
 8011e80:	6818      	ldr	r0, [r3, #0]
 8011e82:	f7ff bfd3 	b.w	8011e2c <_raise_r>
 8011e86:	bf00      	nop
 8011e88:	2000017c 	.word	0x2000017c

08011e8c <_kill_r>:
 8011e8c:	b538      	push	{r3, r4, r5, lr}
 8011e8e:	2300      	movs	r3, #0
 8011e90:	4d06      	ldr	r5, [pc, #24]	; (8011eac <_kill_r+0x20>)
 8011e92:	4604      	mov	r4, r0
 8011e94:	4608      	mov	r0, r1
 8011e96:	4611      	mov	r1, r2
 8011e98:	602b      	str	r3, [r5, #0]
 8011e9a:	f7f5 ff14 	bl	8007cc6 <_kill>
 8011e9e:	1c43      	adds	r3, r0, #1
 8011ea0:	d102      	bne.n	8011ea8 <_kill_r+0x1c>
 8011ea2:	682b      	ldr	r3, [r5, #0]
 8011ea4:	b103      	cbz	r3, 8011ea8 <_kill_r+0x1c>
 8011ea6:	6023      	str	r3, [r4, #0]
 8011ea8:	bd38      	pop	{r3, r4, r5, pc}
 8011eaa:	bf00      	nop
 8011eac:	20001668 	.word	0x20001668

08011eb0 <_getpid_r>:
 8011eb0:	f7f5 bf02 	b.w	8007cb8 <_getpid>

08011eb4 <__sread>:
 8011eb4:	b510      	push	{r4, lr}
 8011eb6:	460c      	mov	r4, r1
 8011eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ebc:	f000 f894 	bl	8011fe8 <_read_r>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	bfab      	itete	ge
 8011ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8011ec8:	181b      	addge	r3, r3, r0
 8011eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ece:	bfac      	ite	ge
 8011ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ed2:	81a3      	strhlt	r3, [r4, #12]
 8011ed4:	bd10      	pop	{r4, pc}

08011ed6 <__swrite>:
 8011ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eda:	461f      	mov	r7, r3
 8011edc:	898b      	ldrh	r3, [r1, #12]
 8011ede:	4605      	mov	r5, r0
 8011ee0:	05db      	lsls	r3, r3, #23
 8011ee2:	460c      	mov	r4, r1
 8011ee4:	4616      	mov	r6, r2
 8011ee6:	d505      	bpl.n	8011ef4 <__swrite+0x1e>
 8011ee8:	2302      	movs	r3, #2
 8011eea:	2200      	movs	r2, #0
 8011eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ef0:	f000 f868 	bl	8011fc4 <_lseek_r>
 8011ef4:	89a3      	ldrh	r3, [r4, #12]
 8011ef6:	4632      	mov	r2, r6
 8011ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011efc:	81a3      	strh	r3, [r4, #12]
 8011efe:	4628      	mov	r0, r5
 8011f00:	463b      	mov	r3, r7
 8011f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f0a:	f000 b817 	b.w	8011f3c <_write_r>

08011f0e <__sseek>:
 8011f0e:	b510      	push	{r4, lr}
 8011f10:	460c      	mov	r4, r1
 8011f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f16:	f000 f855 	bl	8011fc4 <_lseek_r>
 8011f1a:	1c43      	adds	r3, r0, #1
 8011f1c:	89a3      	ldrh	r3, [r4, #12]
 8011f1e:	bf15      	itete	ne
 8011f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f2a:	81a3      	strheq	r3, [r4, #12]
 8011f2c:	bf18      	it	ne
 8011f2e:	81a3      	strhne	r3, [r4, #12]
 8011f30:	bd10      	pop	{r4, pc}

08011f32 <__sclose>:
 8011f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f36:	f000 b813 	b.w	8011f60 <_close_r>
	...

08011f3c <_write_r>:
 8011f3c:	b538      	push	{r3, r4, r5, lr}
 8011f3e:	4604      	mov	r4, r0
 8011f40:	4608      	mov	r0, r1
 8011f42:	4611      	mov	r1, r2
 8011f44:	2200      	movs	r2, #0
 8011f46:	4d05      	ldr	r5, [pc, #20]	; (8011f5c <_write_r+0x20>)
 8011f48:	602a      	str	r2, [r5, #0]
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	f7f5 fef2 	bl	8007d34 <_write>
 8011f50:	1c43      	adds	r3, r0, #1
 8011f52:	d102      	bne.n	8011f5a <_write_r+0x1e>
 8011f54:	682b      	ldr	r3, [r5, #0]
 8011f56:	b103      	cbz	r3, 8011f5a <_write_r+0x1e>
 8011f58:	6023      	str	r3, [r4, #0]
 8011f5a:	bd38      	pop	{r3, r4, r5, pc}
 8011f5c:	20001668 	.word	0x20001668

08011f60 <_close_r>:
 8011f60:	b538      	push	{r3, r4, r5, lr}
 8011f62:	2300      	movs	r3, #0
 8011f64:	4d05      	ldr	r5, [pc, #20]	; (8011f7c <_close_r+0x1c>)
 8011f66:	4604      	mov	r4, r0
 8011f68:	4608      	mov	r0, r1
 8011f6a:	602b      	str	r3, [r5, #0]
 8011f6c:	f7f5 fefe 	bl	8007d6c <_close>
 8011f70:	1c43      	adds	r3, r0, #1
 8011f72:	d102      	bne.n	8011f7a <_close_r+0x1a>
 8011f74:	682b      	ldr	r3, [r5, #0]
 8011f76:	b103      	cbz	r3, 8011f7a <_close_r+0x1a>
 8011f78:	6023      	str	r3, [r4, #0]
 8011f7a:	bd38      	pop	{r3, r4, r5, pc}
 8011f7c:	20001668 	.word	0x20001668

08011f80 <_fstat_r>:
 8011f80:	b538      	push	{r3, r4, r5, lr}
 8011f82:	2300      	movs	r3, #0
 8011f84:	4d06      	ldr	r5, [pc, #24]	; (8011fa0 <_fstat_r+0x20>)
 8011f86:	4604      	mov	r4, r0
 8011f88:	4608      	mov	r0, r1
 8011f8a:	4611      	mov	r1, r2
 8011f8c:	602b      	str	r3, [r5, #0]
 8011f8e:	f7f5 fef8 	bl	8007d82 <_fstat>
 8011f92:	1c43      	adds	r3, r0, #1
 8011f94:	d102      	bne.n	8011f9c <_fstat_r+0x1c>
 8011f96:	682b      	ldr	r3, [r5, #0]
 8011f98:	b103      	cbz	r3, 8011f9c <_fstat_r+0x1c>
 8011f9a:	6023      	str	r3, [r4, #0]
 8011f9c:	bd38      	pop	{r3, r4, r5, pc}
 8011f9e:	bf00      	nop
 8011fa0:	20001668 	.word	0x20001668

08011fa4 <_isatty_r>:
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	4d05      	ldr	r5, [pc, #20]	; (8011fc0 <_isatty_r+0x1c>)
 8011faa:	4604      	mov	r4, r0
 8011fac:	4608      	mov	r0, r1
 8011fae:	602b      	str	r3, [r5, #0]
 8011fb0:	f7f5 fef6 	bl	8007da0 <_isatty>
 8011fb4:	1c43      	adds	r3, r0, #1
 8011fb6:	d102      	bne.n	8011fbe <_isatty_r+0x1a>
 8011fb8:	682b      	ldr	r3, [r5, #0]
 8011fba:	b103      	cbz	r3, 8011fbe <_isatty_r+0x1a>
 8011fbc:	6023      	str	r3, [r4, #0]
 8011fbe:	bd38      	pop	{r3, r4, r5, pc}
 8011fc0:	20001668 	.word	0x20001668

08011fc4 <_lseek_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	4608      	mov	r0, r1
 8011fca:	4611      	mov	r1, r2
 8011fcc:	2200      	movs	r2, #0
 8011fce:	4d05      	ldr	r5, [pc, #20]	; (8011fe4 <_lseek_r+0x20>)
 8011fd0:	602a      	str	r2, [r5, #0]
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	f7f5 feee 	bl	8007db4 <_lseek>
 8011fd8:	1c43      	adds	r3, r0, #1
 8011fda:	d102      	bne.n	8011fe2 <_lseek_r+0x1e>
 8011fdc:	682b      	ldr	r3, [r5, #0]
 8011fde:	b103      	cbz	r3, 8011fe2 <_lseek_r+0x1e>
 8011fe0:	6023      	str	r3, [r4, #0]
 8011fe2:	bd38      	pop	{r3, r4, r5, pc}
 8011fe4:	20001668 	.word	0x20001668

08011fe8 <_read_r>:
 8011fe8:	b538      	push	{r3, r4, r5, lr}
 8011fea:	4604      	mov	r4, r0
 8011fec:	4608      	mov	r0, r1
 8011fee:	4611      	mov	r1, r2
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	4d05      	ldr	r5, [pc, #20]	; (8012008 <_read_r+0x20>)
 8011ff4:	602a      	str	r2, [r5, #0]
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	f7f5 fe7f 	bl	8007cfa <_read>
 8011ffc:	1c43      	adds	r3, r0, #1
 8011ffe:	d102      	bne.n	8012006 <_read_r+0x1e>
 8012000:	682b      	ldr	r3, [r5, #0]
 8012002:	b103      	cbz	r3, 8012006 <_read_r+0x1e>
 8012004:	6023      	str	r3, [r4, #0]
 8012006:	bd38      	pop	{r3, r4, r5, pc}
 8012008:	20001668 	.word	0x20001668

0801200c <_init>:
 801200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801200e:	bf00      	nop
 8012010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012012:	bc08      	pop	{r3}
 8012014:	469e      	mov	lr, r3
 8012016:	4770      	bx	lr

08012018 <_fini>:
 8012018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801201a:	bf00      	nop
 801201c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801201e:	bc08      	pop	{r3}
 8012020:	469e      	mov	lr, r3
 8012022:	4770      	bx	lr
