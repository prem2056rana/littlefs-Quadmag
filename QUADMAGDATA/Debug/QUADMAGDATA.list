
QUADMAGDATA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800a808  0800a808  0001a808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad04  0800ad04  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad04  0800ad04  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad04  0800ad04  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad04  0800ad04  0001ad04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800ad0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000224  0800af30  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800af30  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013392  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa2  00000000  00000000  000335df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00036088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00036e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032e3  00000000  00000000  00037ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010361  00000000  00000000  0003ae83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0a8  00000000  00000000  0004b1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d728c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  000d72e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000224 	.word	0x20000224
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a7ec 	.word	0x0800a7ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000228 	.word	0x20000228
 800014c:	0800a7ec 	.word	0x0800a7ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	460c      	mov	r4, r1
 8001028:	4605      	mov	r5, r0
 800102a:	4621      	mov	r1, r4
 800102c:	4628      	mov	r0, r5
 800102e:	2200      	movs	r2, #0
 8001030:	2300      	movs	r3, #0
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <SET_COUNT>:
extern uint8_t read_X2[4], read_X1[4], read_X0[4];
extern uint8_t read_Y2[4], read_Y1[4], read_Y0[4];
extern uint8_t read_Z2[4], read_Z1[4], read_Z0[4];


void SET_COUNT(int chip_select) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 800109c:	4a2c      	ldr	r2, [pc, #176]	; (8001150 <SET_COUNT+0xbc>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <SET_COUNT+0xc0>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	f001 fe44 	bl	8002d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80010b4:	4a26      	ldr	r2, [pc, #152]	; (8001150 <SET_COUNT+0xbc>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010bc:	4a25      	ldr	r2, [pc, #148]	; (8001154 <SET_COUNT+0xc0>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	f001 fe38 	bl	8002d3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, rm3100_MSB_X_buf, sizeof(rm3100_MSB_X_buf), 1000); //Not need to necessary to send multiple value or register
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	2201      	movs	r2, #1
 80010d2:	4921      	ldr	r1, [pc, #132]	; (8001158 <SET_COUNT+0xc4>)
 80010d4:	4821      	ldr	r0, [pc, #132]	; (800115c <SET_COUNT+0xc8>)
 80010d6:	f003 f9b5 	bl	8004444 <HAL_SPI_Transmit>
	//Initiate Count cycle
	HAL_SPI_Transmit(&hspi1, MSB_X_buf, sizeof(MSB_X_buf), 1000);
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	2201      	movs	r2, #1
 80010e0:	491f      	ldr	r1, [pc, #124]	; (8001160 <SET_COUNT+0xcc>)
 80010e2:	481e      	ldr	r0, [pc, #120]	; (800115c <SET_COUNT+0xc8>)
 80010e4:	f003 f9ae 	bl	8004444 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_X_buf, sizeof(LSB_X_buf), 1000);
 80010e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ec:	2201      	movs	r2, #1
 80010ee:	491d      	ldr	r1, [pc, #116]	; (8001164 <SET_COUNT+0xd0>)
 80010f0:	481a      	ldr	r0, [pc, #104]	; (800115c <SET_COUNT+0xc8>)
 80010f2:	f003 f9a7 	bl	8004444 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Y_buf, sizeof(MSB_Y_buf), 1000);
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	2201      	movs	r2, #1
 80010fc:	491a      	ldr	r1, [pc, #104]	; (8001168 <SET_COUNT+0xd4>)
 80010fe:	4817      	ldr	r0, [pc, #92]	; (800115c <SET_COUNT+0xc8>)
 8001100:	f003 f9a0 	bl	8004444 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Y_buf, sizeof(LSB_Y_buf), 1000);
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	2201      	movs	r2, #1
 800110a:	4918      	ldr	r1, [pc, #96]	; (800116c <SET_COUNT+0xd8>)
 800110c:	4813      	ldr	r0, [pc, #76]	; (800115c <SET_COUNT+0xc8>)
 800110e:	f003 f999 	bl	8004444 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, MSB_Z_buf, sizeof(MSB_Z_buf), 1000);
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	2201      	movs	r2, #1
 8001118:	4915      	ldr	r1, [pc, #84]	; (8001170 <SET_COUNT+0xdc>)
 800111a:	4810      	ldr	r0, [pc, #64]	; (800115c <SET_COUNT+0xc8>)
 800111c:	f003 f992 	bl	8004444 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, LSB_Z_buf, sizeof(LSB_Z_buf), 1000);
 8001120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001124:	2201      	movs	r2, #1
 8001126:	4913      	ldr	r1, [pc, #76]	; (8001174 <SET_COUNT+0xe0>)
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <SET_COUNT+0xc8>)
 800112a:	f003 f98b 	bl	8004444 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH);
 800112e:	4a08      	ldr	r2, [pc, #32]	; (8001150 <SET_COUNT+0xbc>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001136:	4a07      	ldr	r2, [pc, #28]	; (8001154 <SET_COUNT+0xc0>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	f001 fdfb 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000028 	.word	0x20000028
 8001154:	20000038 	.word	0x20000038
 8001158:	20000004 	.word	0x20000004
 800115c:	2000051c 	.word	0x2000051c
 8001160:	20000240 	.word	0x20000240
 8001164:	20000008 	.word	0x20000008
 8001168:	20000244 	.word	0x20000244
 800116c:	2000000c 	.word	0x2000000c
 8001170:	20000248 	.word	0x20000248
 8001174:	20000010 	.word	0x20000010

08001178 <Continuous_Mode>:
//Initiate Continuous Measurements Mode

void Continuous_Mode(int chip_select) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001180:	4a1a      	ldr	r2, [pc, #104]	; (80011ec <Continuous_Mode+0x74>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <Continuous_Mode+0x78>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001190:	2201      	movs	r2, #1
 8001192:	4619      	mov	r1, r3
 8001194:	f001 fdd2 	bl	8002d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <Continuous_Mode+0x74>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <Continuous_Mode+0x78>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	f001 fdc6 	bl	8002d3c <HAL_GPIO_WritePin>
	//Initiate Continuous Measurements Mode
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_buf, sizeof(rm3100_cmm_buf), 1000);
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	2201      	movs	r2, #1
 80011b6:	490f      	ldr	r1, [pc, #60]	; (80011f4 <Continuous_Mode+0x7c>)
 80011b8:	480f      	ldr	r0, [pc, #60]	; (80011f8 <Continuous_Mode+0x80>)
 80011ba:	f003 f943 	bl	8004444 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_cmm_mod_buf, sizeof(rm3100_cmm_mod_buf), 1000);
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	2201      	movs	r2, #1
 80011c4:	490d      	ldr	r1, [pc, #52]	; (80011fc <Continuous_Mode+0x84>)
 80011c6:	480c      	ldr	r0, [pc, #48]	; (80011f8 <Continuous_Mode+0x80>)
 80011c8:	f003 f93c 	bl	8004444 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <Continuous_Mode+0x74>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <Continuous_Mode+0x78>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	f001 fdac 	bl	8002d3c <HAL_GPIO_WritePin>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000028 	.word	0x20000028
 80011f0:	20000038 	.word	0x20000038
 80011f4:	20000014 	.word	0x20000014
 80011f8:	2000051c 	.word	0x2000051c
 80011fc:	20000018 	.word	0x20000018

08001200 <TMRC_Mode>:
//Initiate Time Measurements and Rate Control

void TMRC_Mode(int chip_select) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001208:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <TMRC_Mode+0x74>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <TMRC_Mode+0x78>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	f001 fd8e 	bl	8002d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 8001220:	4a14      	ldr	r2, [pc, #80]	; (8001274 <TMRC_Mode+0x74>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001228:	4a13      	ldr	r2, [pc, #76]	; (8001278 <TMRC_Mode+0x78>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001230:	2200      	movs	r2, #0
 8001232:	4619      	mov	r1, r3
 8001234:	f001 fd82 	bl	8002d3c <HAL_GPIO_WritePin>
	//initiate Time Measurements and Reset Control
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_add_buf, sizeof(rm3100_tmrc_add_buf), 1000);
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	2201      	movs	r2, #1
 800123e:	490f      	ldr	r1, [pc, #60]	; (800127c <TMRC_Mode+0x7c>)
 8001240:	480f      	ldr	r0, [pc, #60]	; (8001280 <TMRC_Mode+0x80>)
 8001242:	f003 f8ff 	bl	8004444 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_Val_buf, sizeof(rm3100_tmrc_Val_buf), 1000);
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	2201      	movs	r2, #1
 800124c:	490d      	ldr	r1, [pc, #52]	; (8001284 <TMRC_Mode+0x84>)
 800124e:	480c      	ldr	r0, [pc, #48]	; (8001280 <TMRC_Mode+0x80>)
 8001250:	f003 f8f8 	bl	8004444 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi1, rm3100_tmrc_read_buf, sizeof(rm3100_tmrc_read_buf),
//			1000);
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <TMRC_Mode+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <TMRC_Mode+0x78>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001264:	2201      	movs	r2, #1
 8001266:	4619      	mov	r1, r3
 8001268:	f001 fd68 	bl	8002d3c <HAL_GPIO_WritePin>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000028 	.word	0x20000028
 8001278:	20000038 	.word	0x20000038
 800127c:	2000001c 	.word	0x2000001c
 8001280:	2000051c 	.word	0x2000051c
 8001284:	20000020 	.word	0x20000020

08001288 <Mea_Result>:

//Read Measurements Results
void Mea_Result(int chip_select) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001290:	4a3f      	ldr	r2, [pc, #252]	; (8001390 <Mea_Result+0x108>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001298:	4a3e      	ldr	r2, [pc, #248]	; (8001394 <Mea_Result+0x10c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012a0:	2201      	movs	r2, #1
 80012a2:	4619      	mov	r1, r3
 80012a4:	f001 fd4a 	bl	8002d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_LOW); //SSN LOW TO COMMUNICATE WITH SENSOR
 80012a8:	4a39      	ldr	r2, [pc, #228]	; (8001390 <Mea_Result+0x108>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012b0:	4a38      	ldr	r2, [pc, #224]	; (8001394 <Mea_Result+0x10c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	f001 fd3e 	bl	8002d3c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, MRRW2_X_buf, sizeof(MRRW2_X_buf), 1000);
 80012c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c4:	2201      	movs	r2, #1
 80012c6:	4934      	ldr	r1, [pc, #208]	; (8001398 <Mea_Result+0x110>)
 80012c8:	4834      	ldr	r0, [pc, #208]	; (800139c <Mea_Result+0x114>)
 80012ca:	f003 f8bb 	bl	8004444 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &read_X2[chip_select], sizeof(read_X2[chip_select]), 1000);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a33      	ldr	r2, [pc, #204]	; (80013a0 <Mea_Result+0x118>)
 80012d2:	1899      	adds	r1, r3, r2
 80012d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d8:	2201      	movs	r2, #1
 80012da:	4830      	ldr	r0, [pc, #192]	; (800139c <Mea_Result+0x114>)
 80012dc:	f003 f9f5 	bl	80046ca <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X1[chip_select], sizeof(read_X1[chip_select]), 1000);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <Mea_Result+0x11c>)
 80012e4:	1899      	adds	r1, r3, r2
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	2201      	movs	r2, #1
 80012ec:	482b      	ldr	r0, [pc, #172]	; (800139c <Mea_Result+0x114>)
 80012ee:	f003 f9ec 	bl	80046ca <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_X0[chip_select], sizeof(read_X0[chip_select]), 1000);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a2c      	ldr	r2, [pc, #176]	; (80013a8 <Mea_Result+0x120>)
 80012f6:	1899      	adds	r1, r3, r2
 80012f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fc:	2201      	movs	r2, #1
 80012fe:	4827      	ldr	r0, [pc, #156]	; (800139c <Mea_Result+0x114>)
 8001300:	f003 f9e3 	bl	80046ca <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y2[chip_select], sizeof(read_Y2[chip_select]), 1000);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a29      	ldr	r2, [pc, #164]	; (80013ac <Mea_Result+0x124>)
 8001308:	1899      	adds	r1, r3, r2
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	2201      	movs	r2, #1
 8001310:	4822      	ldr	r0, [pc, #136]	; (800139c <Mea_Result+0x114>)
 8001312:	f003 f9da 	bl	80046ca <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y1[chip_select], sizeof(read_Y1[chip_select]), 1000);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a25      	ldr	r2, [pc, #148]	; (80013b0 <Mea_Result+0x128>)
 800131a:	1899      	adds	r1, r3, r2
 800131c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001320:	2201      	movs	r2, #1
 8001322:	481e      	ldr	r0, [pc, #120]	; (800139c <Mea_Result+0x114>)
 8001324:	f003 f9d1 	bl	80046ca <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Y0[chip_select], sizeof(read_Y0[chip_select]), 1000);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a22      	ldr	r2, [pc, #136]	; (80013b4 <Mea_Result+0x12c>)
 800132c:	1899      	adds	r1, r3, r2
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	2201      	movs	r2, #1
 8001334:	4819      	ldr	r0, [pc, #100]	; (800139c <Mea_Result+0x114>)
 8001336:	f003 f9c8 	bl	80046ca <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z2[chip_select], sizeof(read_Z2[chip_select]), 1000);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <Mea_Result+0x130>)
 800133e:	1899      	adds	r1, r3, r2
 8001340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001344:	2201      	movs	r2, #1
 8001346:	4815      	ldr	r0, [pc, #84]	; (800139c <Mea_Result+0x114>)
 8001348:	f003 f9bf 	bl	80046ca <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z1[chip_select], sizeof(read_Z1[chip_select]), 1000);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <Mea_Result+0x134>)
 8001350:	1899      	adds	r1, r3, r2
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	2201      	movs	r2, #1
 8001358:	4810      	ldr	r0, [pc, #64]	; (800139c <Mea_Result+0x114>)
 800135a:	f003 f9b6 	bl	80046ca <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &read_Z0[chip_select], sizeof(read_Z0[chip_select]), 1000);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <Mea_Result+0x138>)
 8001362:	1899      	adds	r1, r3, r2
 8001364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001368:	2201      	movs	r2, #1
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <Mea_Result+0x114>)
 800136c:	f003 f9ad 	bl	80046ca <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSN_PORTS[chip_select], SSN_PINS[chip_select], SPI_SSN_HIGH); //SSN HIGN
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <Mea_Result+0x108>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <Mea_Result+0x10c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001380:	2201      	movs	r2, #1
 8001382:	4619      	mov	r1, r3
 8001384:	f001 fcda 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000028 	.word	0x20000028
 8001394:	20000038 	.word	0x20000038
 8001398:	20000024 	.word	0x20000024
 800139c:	2000051c 	.word	0x2000051c
 80013a0:	20000500 	.word	0x20000500
 80013a4:	200004b0 	.word	0x200004b0
 80013a8:	20000518 	.word	0x20000518
 80013ac:	200008b4 	.word	0x200008b4
 80013b0:	200003dc 	.word	0x200003dc
 80013b4:	200005c0 	.word	0x200005c0
 80013b8:	200004fc 	.word	0x200004fc
 80013bc:	200003e0 	.word	0x200003e0
 80013c0:	200005bc 	.word	0x200005bc

080013c4 <Comb_measurement>:
    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
}


//Combine Measurements
void Comb_measurement(int chip_select) {
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

    // Get current time from RTC
    RTC_DateTypeDef gDate;
    RTC_TimeTypeDef gTime;
    // Get current time from RTC
    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2200      	movs	r2, #0
 80013d2:	4619      	mov	r1, r3
 80013d4:	48b0      	ldr	r0, [pc, #704]	; (8001698 <Comb_measurement+0x2d4>)
 80013d6:	f002 fc01 	bl	8003bdc <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	48ad      	ldr	r0, [pc, #692]	; (8001698 <Comb_measurement+0x2d4>)
 80013e4:	f002 fcd2 	bl	8003d8c <HAL_RTC_GetDate>

    // Combine bytes for X-axis
    mag_X[chip_select] = (read_X2[chip_select] << 16) | (read_X1[chip_select] << 8) | read_X0[chip_select];
 80013e8:	4aac      	ldr	r2, [pc, #688]	; (800169c <Comb_measurement+0x2d8>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	49ab      	ldr	r1, [pc, #684]	; (80016a0 <Comb_measurement+0x2dc>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	440b      	add	r3, r1
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	4313      	orrs	r3, r2
 80013fe:	49a9      	ldr	r1, [pc, #676]	; (80016a4 <Comb_measurement+0x2e0>)
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	440a      	add	r2, r1
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	4313      	orrs	r3, r2
 8001408:	4619      	mov	r1, r3
 800140a:	4aa7      	ldr	r2, [pc, #668]	; (80016a8 <Comb_measurement+0x2e4>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_X[chip_select] = (mag_X[chip_select] & 0x800000) ? (mag_X[chip_select] | 0xFF000000) : mag_X[chip_select];
 8001412:	4aa5      	ldr	r2, [pc, #660]	; (80016a8 <Comb_measurement+0x2e4>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <Comb_measurement+0x6e>
 8001422:	4aa1      	ldr	r2, [pc, #644]	; (80016a8 <Comb_measurement+0x2e4>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800142e:	4619      	mov	r1, r3
 8001430:	e004      	b.n	800143c <Comb_measurement+0x78>
 8001432:	4a9d      	ldr	r2, [pc, #628]	; (80016a8 <Comb_measurement+0x2e4>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	4619      	mov	r1, r3
 800143c:	4a9b      	ldr	r2, [pc, #620]	; (80016ac <Comb_measurement+0x2e8>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Y-axis
    mag_Y[chip_select] = (read_Y2[chip_select] << 16) | (read_Y1[chip_select] << 8) | read_Y0[chip_select];
 8001444:	4a9a      	ldr	r2, [pc, #616]	; (80016b0 <Comb_measurement+0x2ec>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	4999      	ldr	r1, [pc, #612]	; (80016b4 <Comb_measurement+0x2f0>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	440b      	add	r3, r1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	4313      	orrs	r3, r2
 800145a:	4997      	ldr	r1, [pc, #604]	; (80016b8 <Comb_measurement+0x2f4>)
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	440a      	add	r2, r1
 8001460:	7812      	ldrb	r2, [r2, #0]
 8001462:	4313      	orrs	r3, r2
 8001464:	4619      	mov	r1, r3
 8001466:	4a95      	ldr	r2, [pc, #596]	; (80016bc <Comb_measurement+0x2f8>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Y[chip_select] = (mag_Y[chip_select] & 0x800000) ? (mag_Y[chip_select] | 0xFF000000) : mag_Y[chip_select];
 800146e:	4a93      	ldr	r2, [pc, #588]	; (80016bc <Comb_measurement+0x2f8>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <Comb_measurement+0xca>
 800147e:	4a8f      	ldr	r2, [pc, #572]	; (80016bc <Comb_measurement+0x2f8>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800148a:	4619      	mov	r1, r3
 800148c:	e004      	b.n	8001498 <Comb_measurement+0xd4>
 800148e:	4a8b      	ldr	r2, [pc, #556]	; (80016bc <Comb_measurement+0x2f8>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	4619      	mov	r1, r3
 8001498:	4a89      	ldr	r2, [pc, #548]	; (80016c0 <Comb_measurement+0x2fc>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Combine bytes for Z-axis
    mag_Z[chip_select] = (read_Z2[chip_select] << 16) | (read_Z1[chip_select] << 8) | read_Z0[chip_select];
 80014a0:	4a88      	ldr	r2, [pc, #544]	; (80016c4 <Comb_measurement+0x300>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	4987      	ldr	r1, [pc, #540]	; (80016c8 <Comb_measurement+0x304>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	440b      	add	r3, r1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	4313      	orrs	r3, r2
 80014b6:	4985      	ldr	r1, [pc, #532]	; (80016cc <Comb_measurement+0x308>)
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	440a      	add	r2, r1
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	4313      	orrs	r3, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	4a83      	ldr	r2, [pc, #524]	; (80016d0 <Comb_measurement+0x30c>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // Extend the sign bit for negative values
    signed_mag_Z[chip_select] = (mag_Z[chip_select] & 0x800000) ? (mag_Z[chip_select] | 0xFF000000) : mag_Z[chip_select];
 80014ca:	4a81      	ldr	r2, [pc, #516]	; (80016d0 <Comb_measurement+0x30c>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <Comb_measurement+0x126>
 80014da:	4a7d      	ldr	r2, [pc, #500]	; (80016d0 <Comb_measurement+0x30c>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014e6:	4619      	mov	r1, r3
 80014e8:	e004      	b.n	80014f4 <Comb_measurement+0x130>
 80014ea:	4a79      	ldr	r2, [pc, #484]	; (80016d0 <Comb_measurement+0x30c>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4a77      	ldr	r2, [pc, #476]	; (80016d4 <Comb_measurement+0x310>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    // Calculate magnitude
    magnitude[chip_select] = sqrt((float)(signed_mag_X[chip_select] * signed_mag_X[chip_select]) + (signed_mag_Y[chip_select] * signed_mag_Y[chip_select]) + (signed_mag_Z[chip_select] * signed_mag_Z[chip_select]));
 80014fc:	4a6b      	ldr	r2, [pc, #428]	; (80016ac <Comb_measurement+0x2e8>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001504:	4969      	ldr	r1, [pc, #420]	; (80016ac <Comb_measurement+0x2e8>)
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fbe3 	bl	8000cdc <__aeabi_i2f>
 8001516:	4604      	mov	r4, r0
 8001518:	4a69      	ldr	r2, [pc, #420]	; (80016c0 <Comb_measurement+0x2fc>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	4967      	ldr	r1, [pc, #412]	; (80016c0 <Comb_measurement+0x2fc>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fbd5 	bl	8000cdc <__aeabi_i2f>
 8001532:	4603      	mov	r3, r0
 8001534:	4619      	mov	r1, r3
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff fb1c 	bl	8000b74 <__addsf3>
 800153c:	4603      	mov	r3, r0
 800153e:	461c      	mov	r4, r3
 8001540:	4a64      	ldr	r2, [pc, #400]	; (80016d4 <Comb_measurement+0x310>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	4962      	ldr	r1, [pc, #392]	; (80016d4 <Comb_measurement+0x310>)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fbc1 	bl	8000cdc <__aeabi_i2f>
 800155a:	4603      	mov	r3, r0
 800155c:	4619      	mov	r1, r3
 800155e:	4620      	mov	r0, r4
 8001560:	f7ff fb08 	bl	8000b74 <__addsf3>
 8001564:	4603      	mov	r3, r0
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ff5e 	bl	8000428 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f009 f862 	bl	800a63c <sqrt>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fa82 	bl	8000a88 <__aeabi_d2uiz>
 8001584:	4602      	mov	r2, r0
 8001586:	4954      	ldr	r1, [pc, #336]	; (80016d8 <Comb_measurement+0x314>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Calculate axis values
    X_axis[chip_select] = (float)signed_mag_X[chip_select] / gain;
 800158e:	4a47      	ldr	r2, [pc, #284]	; (80016ac <Comb_measurement+0x2e8>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fba0 	bl	8000cdc <__aeabi_i2f>
 800159c:	4602      	mov	r2, r0
 800159e:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <Comb_measurement+0x318>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4610      	mov	r0, r2
 80015a6:	f7ff fca1 	bl	8000eec <__aeabi_fdiv>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4a4c      	ldr	r2, [pc, #304]	; (80016e0 <Comb_measurement+0x31c>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Y_axis[chip_select] = (float)signed_mag_Y[chip_select] / gain;
 80015b6:	4a42      	ldr	r2, [pc, #264]	; (80016c0 <Comb_measurement+0x2fc>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fb8c 	bl	8000cdc <__aeabi_i2f>
 80015c4:	4602      	mov	r2, r0
 80015c6:	4b45      	ldr	r3, [pc, #276]	; (80016dc <Comb_measurement+0x318>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4610      	mov	r0, r2
 80015ce:	f7ff fc8d 	bl	8000eec <__aeabi_fdiv>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4619      	mov	r1, r3
 80015d6:	4a43      	ldr	r2, [pc, #268]	; (80016e4 <Comb_measurement+0x320>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Z_axis[chip_select] = (float)signed_mag_Z[chip_select] / gain;
 80015de:	4a3d      	ldr	r2, [pc, #244]	; (80016d4 <Comb_measurement+0x310>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fb78 	bl	8000cdc <__aeabi_i2f>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <Comb_measurement+0x318>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4610      	mov	r0, r2
 80015f6:	f7ff fc79 	bl	8000eec <__aeabi_fdiv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4619      	mov	r1, r3
 80015fe:	4a3a      	ldr	r2, [pc, #232]	; (80016e8 <Comb_measurement+0x324>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Magnitude[chip_select] = (float)magnitude[chip_select] / gain;
 8001606:	4a34      	ldr	r2, [pc, #208]	; (80016d8 <Comb_measurement+0x314>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fb60 	bl	8000cd4 <__aeabi_ui2f>
 8001614:	4602      	mov	r2, r0
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <Comb_measurement+0x318>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f7ff fc65 	bl	8000eec <__aeabi_fdiv>
 8001622:	4603      	mov	r3, r0
 8001624:	4619      	mov	r1, r3
 8001626:	4a31      	ldr	r2, [pc, #196]	; (80016ec <Comb_measurement+0x328>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//
//        // Read back data
//        Bulk_Read_4B(&hspi2, 0, &read_data, sizeof(read_data));

         //Transmitting float data via UART
        myDebug(" %.2f \t", X_axis[chip_select]);
 800162e:	4a2c      	ldr	r2, [pc, #176]	; (80016e0 <Comb_measurement+0x31c>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fef6 	bl	8000428 <__aeabi_f2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	482b      	ldr	r0, [pc, #172]	; (80016f0 <Comb_measurement+0x32c>)
 8001642:	f000 f857 	bl	80016f4 <myDebug>
        myDebug(" %.2f \t", Y_axis[chip_select]);
 8001646:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <Comb_measurement+0x320>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe feea 	bl	8000428 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4825      	ldr	r0, [pc, #148]	; (80016f0 <Comb_measurement+0x32c>)
 800165a:	f000 f84b 	bl	80016f4 <myDebug>
        myDebug(" %.2f \t", Z_axis[chip_select]);
 800165e:	4a22      	ldr	r2, [pc, #136]	; (80016e8 <Comb_measurement+0x324>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fede 	bl	8000428 <__aeabi_f2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	481f      	ldr	r0, [pc, #124]	; (80016f0 <Comb_measurement+0x32c>)
 8001672:	f000 f83f 	bl	80016f4 <myDebug>
        myDebug(" %.2f \t", Magnitude[chip_select]);
 8001676:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <Comb_measurement+0x328>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fed2 	bl	8000428 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4819      	ldr	r0, [pc, #100]	; (80016f0 <Comb_measurement+0x32c>)
 800168a:	f000 f833 	bl	80016f4 <myDebug>
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	20000504 	.word	0x20000504
 800169c:	20000500 	.word	0x20000500
 80016a0:	200004b0 	.word	0x200004b0
 80016a4:	20000518 	.word	0x20000518
 80016a8:	2000031c 	.word	0x2000031c
 80016ac:	20000268 	.word	0x20000268
 80016b0:	200008b4 	.word	0x200008b4
 80016b4:	200003dc 	.word	0x200003dc
 80016b8:	200005c0 	.word	0x200005c0
 80016bc:	20000258 	.word	0x20000258
 80016c0:	2000032c 	.word	0x2000032c
 80016c4:	200004fc 	.word	0x200004fc
 80016c8:	200003e0 	.word	0x200003e0
 80016cc:	200005bc 	.word	0x200005bc
 80016d0:	20000288 	.word	0x20000288
 80016d4:	200002d8 	.word	0x200002d8
 80016d8:	20000298 	.word	0x20000298
 80016dc:	20000000 	.word	0x20000000
 80016e0:	200002c8 	.word	0x200002c8
 80016e4:	200002a8 	.word	0x200002a8
 80016e8:	20000278 	.word	0x20000278
 80016ec:	200002b8 	.word	0x200002b8
 80016f0:	0800a808 	.word	0x0800a808

080016f4 <myDebug>:

void myDebug(const char *fmt, ...) {
 80016f4:	b40f      	push	{r0, r1, r2, r3}
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b09a      	sub	sp, #104	; 0x68
 80016fa:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 80016fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001700:	667b      	str	r3, [r7, #100]	; 0x64
    char buffer[100];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001702:	4638      	mov	r0, r7
 8001704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001706:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001708:	2164      	movs	r1, #100	; 0x64
 800170a:	f006 fb13 	bl	8007d34 <vsniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 800170e:	463b      	mov	r3, r7
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fd1d 	bl	8000150 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	b29a      	uxth	r2, r3
 800171a:	4639      	mov	r1, r7
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <myDebug+0x40>)
 8001722:	f003 fce7 	bl	80050f4 <HAL_UART_Transmit>
    va_end(args);
}
 8001726:	bf00      	nop
 8001728:	3768      	adds	r7, #104	; 0x68
 800172a:	46bd      	mov	sp, r7
 800172c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001730:	b004      	add	sp, #16
 8001732:	4770      	bx	lr
 8001734:	20000574 	.word	0x20000574

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173e:	f000 fdd1 	bl	80022e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001742:	f000 f835 	bl	80017b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RTC_Init();
 8001746:	f000 f895 	bl	8001874 <MX_RTC_Init>
  MX_GPIO_Init();
 800174a:	f000 f9c7 	bl	8001adc <MX_GPIO_Init>
  MX_DMA_Init();
 800174e:	f000 f98f 	bl	8001a70 <MX_DMA_Init>
  MX_SPI1_Init();
 8001752:	f000 f8ab 	bl	80018ac <MX_SPI1_Init>
  MX_SPI2_Init();
 8001756:	f000 f8df 	bl	8001918 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800175a:	f000 f913 	bl	8001984 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800175e:	f000 f93b 	bl	80019d8 <MX_USART2_UART_Init>
  MX_USB_PCD_Init();
 8001762:	f000 f963 	bl	8001a2c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
	for (int i = 0; i < 4; i++) {
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	e00b      	b.n	8001784 <main+0x4c>

		SET_COUNT(i);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fc91 	bl	8001094 <SET_COUNT>
		Continuous_Mode(i);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fd00 	bl	8001178 <Continuous_Mode>
		TMRC_Mode(i);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fd41 	bl	8001200 <TMRC_Mode>
	for (int i = 0; i < 4; i++) {
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b03      	cmp	r3, #3
 8001788:	ddf0      	ble.n	800176c <main+0x34>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		for (int j = 0; j < 4; j++) {
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	e00b      	b.n	80017a8 <main+0x70>
			Mea_Result(j);
 8001790:	6838      	ldr	r0, [r7, #0]
 8001792:	f7ff fd79 	bl	8001288 <Mea_Result>
			Comb_measurement(j);
 8001796:	6838      	ldr	r0, [r7, #0]
 8001798:	f7ff fe14 	bl	80013c4 <Comb_measurement>
			HAL_Delay(100);
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	f000 fe03 	bl	80023a8 <HAL_Delay>
		for (int j = 0; j < 4; j++) {
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	ddf0      	ble.n	8001790 <main+0x58>
 80017ae:	e7ec      	b.n	800178a <main+0x52>

080017b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b094      	sub	sp, #80	; 0x50
 80017b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ba:	2228      	movs	r2, #40	; 0x28
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fb3c 	bl	8005e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80017e0:	2309      	movs	r3, #9
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ee:	2301      	movs	r3, #1
 80017f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017f2:	2301      	movs	r3, #1
 80017f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
 80017f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001800:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001804:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fbba 	bl	8002f84 <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001816:	f000 f9c3 	bl	8001ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	230f      	movs	r3, #15
 800181c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2102      	movs	r1, #2
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fe24 	bl	8003484 <HAL_RCC_ClockConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001842:	f000 f9ad 	bl	8001ba0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8001846:	2311      	movs	r3, #17
 8001848:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800184a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800184e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	4618      	mov	r0, r3
 8001858:	f001 ffc8 	bl	80037ec <HAL_RCCEx_PeriphCLKConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001862:	f000 f99d 	bl	8001ba0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001866:	f001 fef7 	bl	8003658 <HAL_RCC_EnableCSS>
}
 800186a:	bf00      	nop
 800186c:	3750      	adds	r7, #80	; 0x50
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_RTC_Init+0x30>)
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <MX_RTC_Init+0x34>)
 800187c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_RTC_Init+0x30>)
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_RTC_Init+0x30>)
 8001888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800188c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_RTC_Init+0x30>)
 8001890:	f002 f918 	bl	8003ac4 <HAL_RTC_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800189a:	f000 f981 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000504 	.word	0x20000504
 80018a8:	40002800 	.word	0x40002800

080018ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_SPI1_Init+0x64>)
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <MX_SPI1_Init+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_SPI1_Init+0x64>)
 80018b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_SPI1_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_SPI1_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_SPI1_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_SPI1_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_SPI1_Init+0x64>)
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_SPI1_Init+0x64>)
 80018e0:	2230      	movs	r2, #48	; 0x30
 80018e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_SPI1_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_SPI1_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_SPI1_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_SPI1_Init+0x64>)
 80018f8:	220a      	movs	r2, #10
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_SPI1_Init+0x64>)
 80018fe:	f002 fd1d 	bl	800433c <HAL_SPI_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001908:	f000 f94a 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000051c 	.word	0x2000051c
 8001914:	40013000 	.word	0x40013000

08001918 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <MX_SPI2_Init+0x64>)
 800191e:	4a18      	ldr	r2, [pc, #96]	; (8001980 <MX_SPI2_Init+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_SPI2_Init+0x64>)
 8001924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001928:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_SPI2_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_SPI2_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_SPI2_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_SPI2_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_SPI2_Init+0x64>)
 8001944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001948:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_SPI2_Init+0x64>)
 800194c:	2228      	movs	r2, #40	; 0x28
 800194e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <MX_SPI2_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_SPI2_Init+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <MX_SPI2_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_SPI2_Init+0x64>)
 8001964:	220a      	movs	r2, #10
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001968:	4804      	ldr	r0, [pc, #16]	; (800197c <MX_SPI2_Init+0x64>)
 800196a:	f002 fce7 	bl	800433c <HAL_SPI_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001974:	f000 f914 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000384 	.word	0x20000384
 8001980:	40003800 	.word	0x40003800

08001984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <MX_USART1_UART_Init+0x50>)
 800198c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 8001990:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USART1_UART_Init+0x4c>)
 80019bc:	f003 fb4a 	bl	8005054 <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019c6:	f000 f8eb 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200004b4 	.word	0x200004b4
 80019d4:	40013800 	.word	0x40013800

080019d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_USART2_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a10:	f003 fb20 	bl	8005054 <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f8c1 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000574 	.word	0x20000574
 8001a28:	40004400 	.word	0x40004400

08001a2c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <MX_USB_PCD_Init+0x3c>)
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <MX_USB_PCD_Init+0x40>)
 8001a34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_USB_PCD_Init+0x3c>)
 8001a38:	2208      	movs	r2, #8
 8001a3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_USB_PCD_Init+0x3c>)
 8001a3e:	2202      	movs	r2, #2
 8001a40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_USB_PCD_Init+0x3c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_USB_PCD_Init+0x3c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_USB_PCD_Init+0x3c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_USB_PCD_Init+0x3c>)
 8001a56:	f001 f989 	bl	8002d6c <HAL_PCD_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001a60:	f000 f89e 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200005c4 	.word	0x200005c4
 8001a6c:	40005c00 	.word	0x40005c00

08001a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_DMA_Init+0x68>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <MX_DMA_Init+0x68>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6153      	str	r3, [r2, #20]
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_DMA_Init+0x68>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	200e      	movs	r0, #14
 8001a94:	f000 fd83 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a98:	200e      	movs	r0, #14
 8001a9a:	f000 fd9c 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	200f      	movs	r0, #15
 8001aa4:	f000 fd7b 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001aa8:	200f      	movs	r0, #15
 8001aaa:	f000 fd94 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2010      	movs	r0, #16
 8001ab4:	f000 fd73 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ab8:	2010      	movs	r0, #16
 8001aba:	f000 fd8c 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2011      	movs	r0, #17
 8001ac4:	f000 fd6b 	bl	800259e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ac8:	2011      	movs	r0, #17
 8001aca:	f000 fd84 	bl	80025d6 <HAL_NVIC_EnableIRQ>

}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000

08001adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <MX_GPIO_Init+0xb8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <MX_GPIO_Init+0xb8>)
 8001af6:	f043 0320 	orr.w	r3, r3, #32
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <MX_GPIO_Init+0xb8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <MX_GPIO_Init+0xb8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <MX_GPIO_Init+0xb8>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <MX_GPIO_Init+0xb8>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <MX_GPIO_Init+0xb8>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <MX_GPIO_Init+0xb8>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <MX_GPIO_Init+0xb8>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f241 717f 	movw	r1, #6015	; 0x177f
 8001b3e:	4816      	ldr	r0, [pc, #88]	; (8001b98 <MX_GPIO_Init+0xbc>)
 8001b40:	f001 f8fc 	bl	8002d3c <HAL_GPIO_WritePin>
                          |SMSN_FM_CS_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MSN_EN4_Pin|MSN_EN2_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001b4a:	4814      	ldr	r0, [pc, #80]	; (8001b9c <MX_GPIO_Init+0xc0>)
 8001b4c:	f001 f8f6 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin SS2_Pin SS3_Pin SS4_Pin
                           SMSN_FM_CS_Pin DRDY4_Pin DRDY3_Pin DRDY2_Pin
                           DRDY1_Pin MSN_EN3_Pin MSN_EN1_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|SS2_Pin|SS3_Pin|SS4_Pin
 8001b50:	f241 737f 	movw	r3, #6015	; 0x177f
 8001b54:	613b      	str	r3, [r7, #16]
                          |SMSN_FM_CS_Pin|DRDY4_Pin|DRDY3_Pin|DRDY2_Pin
                          |DRDY1_Pin|MSN_EN3_Pin|MSN_EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	480b      	ldr	r0, [pc, #44]	; (8001b98 <MX_GPIO_Init+0xbc>)
 8001b6a:	f000 ff63 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSN_EN4_Pin MSN_EN2_Pin */
  GPIO_InitStruct.Pin = MSN_EN4_Pin|MSN_EN2_Pin;
 8001b6e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4619      	mov	r1, r3
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_GPIO_Init+0xc0>)
 8001b88:	f000 ff54 	bl	8002a34 <HAL_GPIO_Init>

}
 8001b8c:	bf00      	nop
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010c00 	.word	0x40010c00
 8001b9c:	40010800 	.word	0x40010800

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <Error_Handler+0x8>
	...

08001bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6193      	str	r3, [r2, #24]
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_MspInit+0x5c>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_MspInit+0x60>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_MspInit+0x60>)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010000 	.word	0x40010000

08001c10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <HAL_RTC_MspInit+0x3c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d110      	bne.n	8001c44 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001c22:	f001 f9a3 	bl	8002f6c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_RTC_MspInit+0x40>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_RTC_MspInit+0x40>)
 8001c2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <HAL_RTC_MspInit+0x40>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RTC_MspInit+0x44>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40002800 	.word	0x40002800
 8001c50:	40021000 	.word	0x40021000
 8001c54:	4242043c 	.word	0x4242043c

08001c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0318 	add.w	r3, r7, #24
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <HAL_SPI_MspInit+0x108>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d130      	bne.n	8001cda <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a39      	ldr	r2, [pc, #228]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001c7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	4a33      	ldr	r2, [pc, #204]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	6193      	str	r3, [r2, #24]
 8001c9c:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ca8:	23a0      	movs	r3, #160	; 0xa0
 8001caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0318 	add.w	r3, r7, #24
 8001cb8:	4619      	mov	r1, r3
 8001cba:	482b      	ldr	r0, [pc, #172]	; (8001d68 <HAL_SPI_MspInit+0x110>)
 8001cbc:	f000 feba 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4825      	ldr	r0, [pc, #148]	; (8001d68 <HAL_SPI_MspInit+0x110>)
 8001cd4:	f000 feae 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001cd8:	e03e      	b.n	8001d58 <HAL_SPI_MspInit+0x100>
  else if(hspi->Instance==SPI2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <HAL_SPI_MspInit+0x114>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d139      	bne.n	8001d58 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cee:	61d3      	str	r3, [r2, #28]
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <HAL_SPI_MspInit+0x10c>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d14:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0318 	add.w	r3, r7, #24
 8001d26:	4619      	mov	r1, r3
 8001d28:	4811      	ldr	r0, [pc, #68]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001d2a:	f000 fe83 	bl	8002a34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 0318 	add.w	r3, r7, #24
 8001d40:	4619      	mov	r1, r3
 8001d42:	480b      	ldr	r0, [pc, #44]	; (8001d70 <HAL_SPI_MspInit+0x118>)
 8001d44:	f000 fe76 	bl	8002a34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2024      	movs	r0, #36	; 0x24
 8001d4e:	f000 fc26 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001d52:	2024      	movs	r0, #36	; 0x24
 8001d54:	f000 fc3f 	bl	80025d6 <HAL_NVIC_EnableIRQ>
}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40013000 	.word	0x40013000
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010800 	.word	0x40010800
 8001d6c:	40003800 	.word	0x40003800
 8001d70:	40010c00 	.word	0x40010c00

08001d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a8c      	ldr	r2, [pc, #560]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	f040 8087 	bne.w	8001ea4 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d96:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	4a8a      	ldr	r2, [pc, #552]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6193      	str	r3, [r2, #24]
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	4a84      	ldr	r2, [pc, #528]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6193      	str	r3, [r2, #24]
 8001dba:	4b82      	ldr	r3, [pc, #520]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_MSN3_TX_Pin;
 8001dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DEBUG_MSN3_TX_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	487b      	ldr	r0, [pc, #492]	; (8001fc8 <HAL_UART_MspInit+0x254>)
 8001ddc:	f000 fe2a 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DEBUG_MSN3_RX_Pin;
 8001de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DEBUG_MSN3_RX_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	4619      	mov	r1, r3
 8001df4:	4874      	ldr	r0, [pc, #464]	; (8001fc8 <HAL_UART_MspInit+0x254>)
 8001df6:	f000 fe1d 	bl	8002a34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001dfa:	4b74      	ldr	r3, [pc, #464]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001dfc:	4a74      	ldr	r2, [pc, #464]	; (8001fd0 <HAL_UART_MspInit+0x25c>)
 8001dfe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e00:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e06:	4b71      	ldr	r3, [pc, #452]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e12:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e18:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e1e:	4b6b      	ldr	r3, [pc, #428]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e24:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e2a:	4868      	ldr	r0, [pc, #416]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e2c:	f000 fbee 	bl	800260c <HAL_DMA_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001e36:	f7ff feb3 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a63      	ldr	r2, [pc, #396]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e40:	4a62      	ldr	r2, [pc, #392]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e48:	4a63      	ldr	r2, [pc, #396]	; (8001fd8 <HAL_UART_MspInit+0x264>)
 8001e4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e4c:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e4e:	2210      	movs	r2, #16
 8001e50:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e52:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e58:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5e:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e64:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e6a:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e76:	4857      	ldr	r0, [pc, #348]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e78:	f000 fbc8 	bl	800260c <HAL_DMA_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001e82:	f7ff fe8d 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a52      	ldr	r2, [pc, #328]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e8c:	4a51      	ldr	r2, [pc, #324]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2025      	movs	r0, #37	; 0x25
 8001e98:	f000 fb81 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e9c:	2025      	movs	r0, #37	; 0x25
 8001e9e:	f000 fb9a 	bl	80025d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ea2:	e089      	b.n	8001fb8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <HAL_UART_MspInit+0x268>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	f040 8084 	bne.w	8001fb8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb0:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	4a43      	ldr	r2, [pc, #268]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eba:	61d3      	str	r3, [r2, #28]
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a3d      	ldr	r2, [pc, #244]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 0318 	add.w	r3, r7, #24
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4835      	ldr	r0, [pc, #212]	; (8001fc8 <HAL_UART_MspInit+0x254>)
 8001ef4:	f000 fd9e 	bl	8002a34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	482f      	ldr	r0, [pc, #188]	; (8001fc8 <HAL_UART_MspInit+0x254>)
 8001f0c:	f000 fd92 	bl	8002a34 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001f10:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f12:	4a34      	ldr	r2, [pc, #208]	; (8001fe4 <HAL_UART_MspInit+0x270>)
 8001f14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1c:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f40:	4827      	ldr	r0, [pc, #156]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f42:	f000 fb63 	bl	800260c <HAL_DMA_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001f4c:	f7ff fe28 	bl	8001ba0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f54:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f56:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f5e:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_UART_MspInit+0x278>)
 8001f60:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f64:	2210      	movs	r2, #16
 8001f66:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f68:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f8c:	4816      	ldr	r0, [pc, #88]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f8e:	f000 fb3d 	bl	800260c <HAL_DMA_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001f98:	f7ff fe02 	bl	8001ba0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2026      	movs	r0, #38	; 0x26
 8001fae:	f000 faf6 	bl	800259e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fb2:	2026      	movs	r0, #38	; 0x26
 8001fb4:	f000 fb0f 	bl	80025d6 <HAL_NVIC_EnableIRQ>
}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40013800 	.word	0x40013800
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	20000428 	.word	0x20000428
 8001fd0:	40020058 	.word	0x40020058
 8001fd4:	200003e4 	.word	0x200003e4
 8001fd8:	40020044 	.word	0x40020044
 8001fdc:	40004400 	.word	0x40004400
 8001fe0:	20000340 	.word	0x20000340
 8001fe4:	4002006c 	.word	0x4002006c
 8001fe8:	2000046c 	.word	0x2000046c
 8001fec:	40020080 	.word	0x40020080

08001ff0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_PCD_MspInit+0x34>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10b      	bne.n	800201a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_PCD_MspInit+0x38>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	4a08      	ldr	r2, [pc, #32]	; (8002028 <HAL_PCD_MspInit+0x38>)
 8002008:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800200c:	61d3      	str	r3, [r2, #28]
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_PCD_MspInit+0x38>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40005c00 	.word	0x40005c00
 8002028:	40021000 	.word	0x40021000

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002030:	f001 fba4 	bl	800377c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <NMI_Handler+0x8>

08002036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <MemManage_Handler+0x4>

08002042 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>

0800204e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002076:	f000 f97b 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <DMA1_Channel4_IRQHandler+0x10>)
 8002086:	f000 fbcf 	bl	8002828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200003e4 	.word	0x200003e4

08002094 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <DMA1_Channel5_IRQHandler+0x10>)
 800209a:	f000 fbc5 	bl	8002828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000428 	.word	0x20000428

080020a8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA1_Channel6_IRQHandler+0x10>)
 80020ae:	f000 fbbb 	bl	8002828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000340 	.word	0x20000340

080020bc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <DMA1_Channel7_IRQHandler+0x10>)
 80020c2:	f000 fbb1 	bl	8002828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000046c 	.word	0x2000046c

080020d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <SPI2_IRQHandler+0x10>)
 80020d6:	f002 fdc1 	bl	8004c5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000384 	.word	0x20000384

080020e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <USART1_IRQHandler+0x10>)
 80020ea:	f003 f887 	bl	80051fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200004b4 	.word	0x200004b4

080020f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <USART2_IRQHandler+0x10>)
 80020fe:	f003 f87d 	bl	80051fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000574 	.word	0x20000574

0800210c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
	return 1;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <_kill>:

int _kill(int pid, int sig)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002124:	f003 fe38 	bl	8005d98 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	2216      	movs	r2, #22
 800212c:	601a      	str	r2, [r3, #0]
	return -1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_exit>:

void _exit (int status)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002142:	f04f 31ff 	mov.w	r1, #4294967295
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffe7 	bl	800211a <_kill>
	while (1) {}		/* Make sure we hang here */
 800214c:	e7fe      	b.n	800214c <_exit+0x12>

0800214e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e00a      	b.n	8002176 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002160:	f3af 8000 	nop.w
 8002164:	4601      	mov	r1, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	60ba      	str	r2, [r7, #8]
 800216c:	b2ca      	uxtb	r2, r1
 800216e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	dbf0      	blt.n	8002160 <_read+0x12>
	}

return len;
 800217e:	687b      	ldr	r3, [r7, #4]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e009      	b.n	80021ae <_write+0x26>
	{
		__io_putchar(*ptr++);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	60ba      	str	r2, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3301      	adds	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dbf1      	blt.n	800219a <_write+0x12>
	}
	return len;
 80021b6:	687b      	ldr	r3, [r7, #4]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_close>:

int _close(int file)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	return -1;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e6:	605a      	str	r2, [r3, #4]
	return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <_isatty>:

int _isatty(int file)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	return 1;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
	return 0;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f003 fda2 	bl	8005d98 <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20005000 	.word	0x20005000
 8002280:	00000400 	.word	0x00000400
 8002284:	2000024c 	.word	0x2000024c
 8002288:	200008d0 	.word	0x200008d0

0800228c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002298:	f7ff fff8 	bl	800228c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800229c:	480b      	ldr	r0, [pc, #44]	; (80022cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800229e:	490c      	ldr	r1, [pc, #48]	; (80022d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022a0:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a09      	ldr	r2, [pc, #36]	; (80022d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022b4:	4c09      	ldr	r4, [pc, #36]	; (80022dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022c2:	f003 fd81 	bl	8005dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022c6:	f7ff fa37 	bl	8001738 <main>
  bx lr
 80022ca:	4770      	bx	lr
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80022d4:	0800ad0c 	.word	0x0800ad0c
  ldr r2, =_sbss
 80022d8:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80022dc:	200008cc 	.word	0x200008cc

080022e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC1_2_IRQHandler>
	...

080022e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_Init+0x28>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_Init+0x28>)
 80022ee:	f043 0310 	orr.w	r3, r3, #16
 80022f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 f947 	bl	8002588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fa:	200f      	movs	r0, #15
 80022fc:	f000 f808 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002300:	f7ff fc54 	bl	8001bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40022000 	.word	0x40022000

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f95f 	bl	80025f2 <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 f927 	bl	800259e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000040 	.word	0x20000040
 8002368:	20000048 	.word	0x20000048
 800236c:	20000044 	.word	0x20000044

08002370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_IncTick+0x1c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_IncTick+0x20>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a03      	ldr	r2, [pc, #12]	; (8002390 <HAL_IncTick+0x20>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	20000048 	.word	0x20000048
 8002390:	200008b8 	.word	0x200008b8

08002394 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return uwTick;
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <HAL_GetTick+0x10>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	200008b8 	.word	0x200008b8

080023a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff fff0 	bl	8002394 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d005      	beq.n	80023ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_Delay+0x44>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ce:	bf00      	nop
 80023d0:	f7ff ffe0 	bl	8002394 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d8f7      	bhi.n	80023d0 <HAL_Delay+0x28>
  {
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000048 	.word	0x20000048

080023f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002422:	4a04      	ldr	r2, [pc, #16]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	60d3      	str	r3, [r2, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <__NVIC_GetPriorityGrouping+0x18>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	f003 0307 	and.w	r3, r3, #7
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	2b00      	cmp	r3, #0
 8002464:	db0b      	blt.n	800247e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4906      	ldr	r1, [pc, #24]	; (8002488 <__NVIC_EnableIRQ+0x34>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2001      	movs	r0, #1
 8002476:	fa00 f202 	lsl.w	r2, r0, r2
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	2b00      	cmp	r3, #0
 800249e:	db0a      	blt.n	80024b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	490c      	ldr	r1, [pc, #48]	; (80024d8 <__NVIC_SetPriority+0x4c>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	0112      	lsls	r2, r2, #4
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	440b      	add	r3, r1
 80024b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b4:	e00a      	b.n	80024cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <__NVIC_SetPriority+0x50>)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	3b04      	subs	r3, #4
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	440b      	add	r3, r1
 80024ca:	761a      	strb	r2, [r3, #24]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000e100 	.word	0xe000e100
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f1c3 0307 	rsb	r3, r3, #7
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	bf28      	it	cs
 80024fe:	2304      	movcs	r3, #4
 8002500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3304      	adds	r3, #4
 8002506:	2b06      	cmp	r3, #6
 8002508:	d902      	bls.n	8002510 <NVIC_EncodePriority+0x30>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3b03      	subs	r3, #3
 800250e:	e000      	b.n	8002512 <NVIC_EncodePriority+0x32>
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	f04f 32ff 	mov.w	r2, #4294967295
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002528:	f04f 31ff 	mov.w	r1, #4294967295
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	43d9      	mvns	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	4313      	orrs	r3, r2
         );
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002554:	d301      	bcc.n	800255a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002556:	2301      	movs	r3, #1
 8002558:	e00f      	b.n	800257a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <SysTick_Config+0x40>)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002562:	210f      	movs	r1, #15
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f7ff ff90 	bl	800248c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <SysTick_Config+0x40>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <SysTick_Config+0x40>)
 8002574:	2207      	movs	r2, #7
 8002576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	e000e010 	.word	0xe000e010

08002588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff2d 	bl	80023f0 <__NVIC_SetPriorityGrouping>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b0:	f7ff ff42 	bl	8002438 <__NVIC_GetPriorityGrouping>
 80025b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	f7ff ff90 	bl	80024e0 <NVIC_EncodePriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff5f 	bl	800248c <__NVIC_SetPriority>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff35 	bl	8002454 <__NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffa2 	bl	8002544 <SysTick_Config>
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e043      	b.n	80026aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_DMA_Init+0xa8>)
 800262a:	4413      	add	r3, r2
 800262c:	4a22      	ldr	r2, [pc, #136]	; (80026b8 <HAL_DMA_Init+0xac>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	009a      	lsls	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <HAL_DMA_Init+0xb0>)
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002656:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800265a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	bffdfff8 	.word	0xbffdfff8
 80026b8:	cccccccd 	.word	0xcccccccd
 80026bc:	40020000 	.word	0x40020000

080026c0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d008      	beq.n	80026ea <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2204      	movs	r2, #4
 80026dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e020      	b.n	800272c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 020e 	bic.w	r2, r2, #14
 80026f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	2101      	movs	r1, #1
 8002714:	fa01 f202 	lsl.w	r2, r1, r2
 8002718:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800272a:	7bfb      	ldrb	r3, [r7, #15]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
	...

08002738 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d005      	beq.n	800275c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2204      	movs	r2, #4
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e051      	b.n	8002800 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 020e 	bic.w	r2, r2, #14
 800276a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a22      	ldr	r2, [pc, #136]	; (800280c <HAL_DMA_Abort_IT+0xd4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d029      	beq.n	80027da <HAL_DMA_Abort_IT+0xa2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a21      	ldr	r2, [pc, #132]	; (8002810 <HAL_DMA_Abort_IT+0xd8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d022      	beq.n	80027d6 <HAL_DMA_Abort_IT+0x9e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <HAL_DMA_Abort_IT+0xdc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01a      	beq.n	80027d0 <HAL_DMA_Abort_IT+0x98>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <HAL_DMA_Abort_IT+0xe0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d012      	beq.n	80027ca <HAL_DMA_Abort_IT+0x92>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1c      	ldr	r2, [pc, #112]	; (800281c <HAL_DMA_Abort_IT+0xe4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00a      	beq.n	80027c4 <HAL_DMA_Abort_IT+0x8c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <HAL_DMA_Abort_IT+0xe8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d102      	bne.n	80027be <HAL_DMA_Abort_IT+0x86>
 80027b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027bc:	e00e      	b.n	80027dc <HAL_DMA_Abort_IT+0xa4>
 80027be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c2:	e00b      	b.n	80027dc <HAL_DMA_Abort_IT+0xa4>
 80027c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c8:	e008      	b.n	80027dc <HAL_DMA_Abort_IT+0xa4>
 80027ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ce:	e005      	b.n	80027dc <HAL_DMA_Abort_IT+0xa4>
 80027d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d4:	e002      	b.n	80027dc <HAL_DMA_Abort_IT+0xa4>
 80027d6:	2310      	movs	r3, #16
 80027d8:	e000      	b.n	80027dc <HAL_DMA_Abort_IT+0xa4>
 80027da:	2301      	movs	r3, #1
 80027dc:	4a11      	ldr	r2, [pc, #68]	; (8002824 <HAL_DMA_Abort_IT+0xec>)
 80027de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
    } 
  }
  return status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40020008 	.word	0x40020008
 8002810:	4002001c 	.word	0x4002001c
 8002814:	40020030 	.word	0x40020030
 8002818:	40020044 	.word	0x40020044
 800281c:	40020058 	.word	0x40020058
 8002820:	4002006c 	.word	0x4002006c
 8002824:	40020000 	.word	0x40020000

08002828 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2204      	movs	r2, #4
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d04f      	beq.n	80028f0 <HAL_DMA_IRQHandler+0xc8>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d04a      	beq.n	80028f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d107      	bne.n	8002878 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0204 	bic.w	r2, r2, #4
 8002876:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a66      	ldr	r2, [pc, #408]	; (8002a18 <HAL_DMA_IRQHandler+0x1f0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d029      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xae>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a65      	ldr	r2, [pc, #404]	; (8002a1c <HAL_DMA_IRQHandler+0x1f4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xaa>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a63      	ldr	r2, [pc, #396]	; (8002a20 <HAL_DMA_IRQHandler+0x1f8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01a      	beq.n	80028cc <HAL_DMA_IRQHandler+0xa4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a62      	ldr	r2, [pc, #392]	; (8002a24 <HAL_DMA_IRQHandler+0x1fc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d012      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x9e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a60      	ldr	r2, [pc, #384]	; (8002a28 <HAL_DMA_IRQHandler+0x200>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00a      	beq.n	80028c0 <HAL_DMA_IRQHandler+0x98>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a5f      	ldr	r2, [pc, #380]	; (8002a2c <HAL_DMA_IRQHandler+0x204>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d102      	bne.n	80028ba <HAL_DMA_IRQHandler+0x92>
 80028b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028b8:	e00e      	b.n	80028d8 <HAL_DMA_IRQHandler+0xb0>
 80028ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028be:	e00b      	b.n	80028d8 <HAL_DMA_IRQHandler+0xb0>
 80028c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028c4:	e008      	b.n	80028d8 <HAL_DMA_IRQHandler+0xb0>
 80028c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ca:	e005      	b.n	80028d8 <HAL_DMA_IRQHandler+0xb0>
 80028cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d0:	e002      	b.n	80028d8 <HAL_DMA_IRQHandler+0xb0>
 80028d2:	2340      	movs	r3, #64	; 0x40
 80028d4:	e000      	b.n	80028d8 <HAL_DMA_IRQHandler+0xb0>
 80028d6:	2304      	movs	r3, #4
 80028d8:	4a55      	ldr	r2, [pc, #340]	; (8002a30 <HAL_DMA_IRQHandler+0x208>)
 80028da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8094 	beq.w	8002a0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028ee:	e08e      	b.n	8002a0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	2202      	movs	r2, #2
 80028f6:	409a      	lsls	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d056      	beq.n	80029ae <HAL_DMA_IRQHandler+0x186>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d051      	beq.n	80029ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10b      	bne.n	8002930 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 020a 	bic.w	r2, r2, #10
 8002926:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a38      	ldr	r2, [pc, #224]	; (8002a18 <HAL_DMA_IRQHandler+0x1f0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d029      	beq.n	800298e <HAL_DMA_IRQHandler+0x166>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a37      	ldr	r2, [pc, #220]	; (8002a1c <HAL_DMA_IRQHandler+0x1f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <HAL_DMA_IRQHandler+0x162>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a35      	ldr	r2, [pc, #212]	; (8002a20 <HAL_DMA_IRQHandler+0x1f8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01a      	beq.n	8002984 <HAL_DMA_IRQHandler+0x15c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a34      	ldr	r2, [pc, #208]	; (8002a24 <HAL_DMA_IRQHandler+0x1fc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d012      	beq.n	800297e <HAL_DMA_IRQHandler+0x156>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a32      	ldr	r2, [pc, #200]	; (8002a28 <HAL_DMA_IRQHandler+0x200>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00a      	beq.n	8002978 <HAL_DMA_IRQHandler+0x150>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <HAL_DMA_IRQHandler+0x204>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d102      	bne.n	8002972 <HAL_DMA_IRQHandler+0x14a>
 800296c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002970:	e00e      	b.n	8002990 <HAL_DMA_IRQHandler+0x168>
 8002972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002976:	e00b      	b.n	8002990 <HAL_DMA_IRQHandler+0x168>
 8002978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297c:	e008      	b.n	8002990 <HAL_DMA_IRQHandler+0x168>
 800297e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002982:	e005      	b.n	8002990 <HAL_DMA_IRQHandler+0x168>
 8002984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002988:	e002      	b.n	8002990 <HAL_DMA_IRQHandler+0x168>
 800298a:	2320      	movs	r3, #32
 800298c:	e000      	b.n	8002990 <HAL_DMA_IRQHandler+0x168>
 800298e:	2302      	movs	r3, #2
 8002990:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <HAL_DMA_IRQHandler+0x208>)
 8002992:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d034      	beq.n	8002a0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029ac:	e02f      	b.n	8002a0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2208      	movs	r2, #8
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d028      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x1e8>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d023      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 020e 	bic.w	r2, r2, #14
 80029d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	2101      	movs	r1, #1
 80029e2:	fa01 f202 	lsl.w	r2, r1, r2
 80029e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
    }
  }
  return;
 8002a0e:	bf00      	nop
 8002a10:	bf00      	nop
}
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40020008 	.word	0x40020008
 8002a1c:	4002001c 	.word	0x4002001c
 8002a20:	40020030 	.word	0x40020030
 8002a24:	40020044 	.word	0x40020044
 8002a28:	40020058 	.word	0x40020058
 8002a2c:	4002006c 	.word	0x4002006c
 8002a30:	40020000 	.word	0x40020000

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b08b      	sub	sp, #44	; 0x2c
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a46:	e169      	b.n	8002d1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	f040 8158 	bne.w	8002d16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a9a      	ldr	r2, [pc, #616]	; (8002cd4 <HAL_GPIO_Init+0x2a0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d05e      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a70:	4a98      	ldr	r2, [pc, #608]	; (8002cd4 <HAL_GPIO_Init+0x2a0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d875      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a76:	4a98      	ldr	r2, [pc, #608]	; (8002cd8 <HAL_GPIO_Init+0x2a4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d058      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a7c:	4a96      	ldr	r2, [pc, #600]	; (8002cd8 <HAL_GPIO_Init+0x2a4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d86f      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a82:	4a96      	ldr	r2, [pc, #600]	; (8002cdc <HAL_GPIO_Init+0x2a8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d052      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a88:	4a94      	ldr	r2, [pc, #592]	; (8002cdc <HAL_GPIO_Init+0x2a8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d869      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a8e:	4a94      	ldr	r2, [pc, #592]	; (8002ce0 <HAL_GPIO_Init+0x2ac>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d04c      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a94:	4a92      	ldr	r2, [pc, #584]	; (8002ce0 <HAL_GPIO_Init+0x2ac>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d863      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a9a:	4a92      	ldr	r2, [pc, #584]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d046      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002aa0:	4a90      	ldr	r2, [pc, #576]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d85d      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002aa6:	2b12      	cmp	r3, #18
 8002aa8:	d82a      	bhi.n	8002b00 <HAL_GPIO_Init+0xcc>
 8002aaa:	2b12      	cmp	r3, #18
 8002aac:	d859      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002aae:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <HAL_GPIO_Init+0x80>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002b2f 	.word	0x08002b2f
 8002ab8:	08002b09 	.word	0x08002b09
 8002abc:	08002b1b 	.word	0x08002b1b
 8002ac0:	08002b5d 	.word	0x08002b5d
 8002ac4:	08002b63 	.word	0x08002b63
 8002ac8:	08002b63 	.word	0x08002b63
 8002acc:	08002b63 	.word	0x08002b63
 8002ad0:	08002b63 	.word	0x08002b63
 8002ad4:	08002b63 	.word	0x08002b63
 8002ad8:	08002b63 	.word	0x08002b63
 8002adc:	08002b63 	.word	0x08002b63
 8002ae0:	08002b63 	.word	0x08002b63
 8002ae4:	08002b63 	.word	0x08002b63
 8002ae8:	08002b63 	.word	0x08002b63
 8002aec:	08002b63 	.word	0x08002b63
 8002af0:	08002b63 	.word	0x08002b63
 8002af4:	08002b63 	.word	0x08002b63
 8002af8:	08002b11 	.word	0x08002b11
 8002afc:	08002b25 	.word	0x08002b25
 8002b00:	4a79      	ldr	r2, [pc, #484]	; (8002ce8 <HAL_GPIO_Init+0x2b4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b06:	e02c      	b.n	8002b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	623b      	str	r3, [r7, #32]
          break;
 8002b0e:	e029      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	3304      	adds	r3, #4
 8002b16:	623b      	str	r3, [r7, #32]
          break;
 8002b18:	e024      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	623b      	str	r3, [r7, #32]
          break;
 8002b22:	e01f      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	623b      	str	r3, [r7, #32]
          break;
 8002b2c:	e01a      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d102      	bne.n	8002b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b36:	2304      	movs	r3, #4
 8002b38:	623b      	str	r3, [r7, #32]
          break;
 8002b3a:	e013      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b44:	2308      	movs	r3, #8
 8002b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	611a      	str	r2, [r3, #16]
          break;
 8002b4e:	e009      	b.n	8002b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b50:	2308      	movs	r3, #8
 8002b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	615a      	str	r2, [r3, #20]
          break;
 8002b5a:	e003      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
          break;
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          break;
 8002b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2bff      	cmp	r3, #255	; 0xff
 8002b68:	d801      	bhi.n	8002b6e <HAL_GPIO_Init+0x13a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	e001      	b.n	8002b72 <HAL_GPIO_Init+0x13e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2bff      	cmp	r3, #255	; 0xff
 8002b78:	d802      	bhi.n	8002b80 <HAL_GPIO_Init+0x14c>
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	e002      	b.n	8002b86 <HAL_GPIO_Init+0x152>
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	3b08      	subs	r3, #8
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	210f      	movs	r1, #15
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80b1 	beq.w	8002d16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bb4:	4b4d      	ldr	r3, [pc, #308]	; (8002cec <HAL_GPIO_Init+0x2b8>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	4a4c      	ldr	r2, [pc, #304]	; (8002cec <HAL_GPIO_Init+0x2b8>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6193      	str	r3, [r2, #24]
 8002bc0:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <HAL_GPIO_Init+0x2b8>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bcc:	4a48      	ldr	r2, [pc, #288]	; (8002cf0 <HAL_GPIO_Init+0x2bc>)
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a40      	ldr	r2, [pc, #256]	; (8002cf4 <HAL_GPIO_Init+0x2c0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_GPIO_Init+0x1ec>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3f      	ldr	r2, [pc, #252]	; (8002cf8 <HAL_GPIO_Init+0x2c4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00d      	beq.n	8002c1c <HAL_GPIO_Init+0x1e8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3e      	ldr	r2, [pc, #248]	; (8002cfc <HAL_GPIO_Init+0x2c8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <HAL_GPIO_Init+0x1e4>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3d      	ldr	r2, [pc, #244]	; (8002d00 <HAL_GPIO_Init+0x2cc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d101      	bne.n	8002c14 <HAL_GPIO_Init+0x1e0>
 8002c10:	2303      	movs	r3, #3
 8002c12:	e006      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c14:	2304      	movs	r3, #4
 8002c16:	e004      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e002      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c20:	2300      	movs	r3, #0
 8002c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c24:	f002 0203 	and.w	r2, r2, #3
 8002c28:	0092      	lsls	r2, r2, #2
 8002c2a:	4093      	lsls	r3, r2
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c32:	492f      	ldr	r1, [pc, #188]	; (8002cf0 <HAL_GPIO_Init+0x2bc>)
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	492c      	ldr	r1, [pc, #176]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
 8002c58:	e006      	b.n	8002c68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c5a:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	4928      	ldr	r1, [pc, #160]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c74:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	4922      	ldr	r1, [pc, #136]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60cb      	str	r3, [r1, #12]
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	491e      	ldr	r1, [pc, #120]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	4918      	ldr	r1, [pc, #96]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
 8002ca8:	e006      	b.n	8002cb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	4914      	ldr	r1, [pc, #80]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d021      	beq.n	8002d08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	490e      	ldr	r1, [pc, #56]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
 8002cd0:	e021      	b.n	8002d16 <HAL_GPIO_Init+0x2e2>
 8002cd2:	bf00      	nop
 8002cd4:	10320000 	.word	0x10320000
 8002cd8:	10310000 	.word	0x10310000
 8002cdc:	10220000 	.word	0x10220000
 8002ce0:	10210000 	.word	0x10210000
 8002ce4:	10120000 	.word	0x10120000
 8002ce8:	10110000 	.word	0x10110000
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40010800 	.word	0x40010800
 8002cf8:	40010c00 	.word	0x40010c00
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40011400 	.word	0x40011400
 8002d04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	4909      	ldr	r1, [pc, #36]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	3301      	adds	r3, #1
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f47f ae8e 	bne.w	8002a48 <HAL_GPIO_Init+0x14>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	372c      	adds	r7, #44	; 0x2c
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d58:	e003      	b.n	8002d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	041a      	lsls	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	611a      	str	r2, [r3, #16]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6e:	b08b      	sub	sp, #44	; 0x2c
 8002d70:	af06      	add	r7, sp, #24
 8002d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0f1      	b.n	8002f62 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff f92c 	bl	8001ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 ff89 	bl	8005cbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	687e      	ldr	r6, [r7, #4]
 8002db2:	466d      	mov	r5, sp
 8002db4:	f106 0410 	add.w	r4, r6, #16
 8002db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	602b      	str	r3, [r5, #0]
 8002dc0:	1d33      	adds	r3, r6, #4
 8002dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dc4:	6838      	ldr	r0, [r7, #0]
 8002dc6:	f002 ff69 	bl	8005c9c <USB_CoreInit>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0c2      	b.n	8002f62 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 ff84 	bl	8005cf0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e040      	b.n	8002e70 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3301      	adds	r3, #1
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	3303      	adds	r3, #3
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3338      	adds	r3, #56	; 0x38
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	333c      	adds	r3, #60	; 0x3c
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	440b      	add	r3, r1
 8002e64:	3340      	adds	r3, #64	; 0x40
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d3b9      	bcc.n	8002dee <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	e044      	b.n	8002f0a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e96:	7bfa      	ldrb	r2, [r7, #15]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eac:	7bfa      	ldrb	r2, [r7, #15]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	440b      	add	r3, r1
 8002eba:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	440b      	add	r3, r1
 8002ed0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	3301      	adds	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d3b5      	bcc.n	8002e80 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	687e      	ldr	r6, [r7, #4]
 8002f1c:	466d      	mov	r5, sp
 8002f1e:	f106 0410 	add.w	r4, r6, #16
 8002f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	602b      	str	r3, [r5, #0]
 8002f2a:	1d33      	adds	r3, r6, #4
 8002f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f2e:	6838      	ldr	r0, [r7, #0]
 8002f30:	f002 feea 	bl	8005d08 <USB_DevInit>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00d      	b.n	8002f62 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 fef4 	bl	8005d48 <USB_DevDisconnect>

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f6c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	420e0020 	.word	0x420e0020

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e26c      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fa4:	4b92      	ldr	r3, [pc, #584]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 030c 	and.w	r3, r3, #12
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d00c      	beq.n	8002fca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fb0:	4b8f      	ldr	r3, [pc, #572]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d112      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x5e>
 8002fbc:	4b8c      	ldr	r3, [pc, #560]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fca:	4b89      	ldr	r3, [pc, #548]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d06c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x12c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d168      	bne.n	80030b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e246      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x76>
 8002fec:	4b80      	ldr	r3, [pc, #512]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a7f      	ldr	r2, [pc, #508]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	e02e      	b.n	8003058 <HAL_RCC_OscConfig+0xd4>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x98>
 8003002:	4b7b      	ldr	r3, [pc, #492]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7a      	ldr	r2, [pc, #488]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b78      	ldr	r3, [pc, #480]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a77      	ldr	r2, [pc, #476]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e01d      	b.n	8003058 <HAL_RCC_OscConfig+0xd4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0xbc>
 8003026:	4b72      	ldr	r3, [pc, #456]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a71      	ldr	r2, [pc, #452]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800302c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b6f      	ldr	r3, [pc, #444]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6e      	ldr	r2, [pc, #440]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0xd4>
 8003040:	4b6b      	ldr	r3, [pc, #428]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6a      	ldr	r2, [pc, #424]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b68      	ldr	r3, [pc, #416]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a67      	ldr	r2, [pc, #412]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003056:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7ff f998 	bl	8002394 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7ff f994 	bl	8002394 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1fa      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	4b5d      	ldr	r3, [pc, #372]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0xe4>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff f984 	bl	8002394 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003090:	f7ff f980 	bl	8002394 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e1e6      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x10c>
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d063      	beq.n	8003186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030be:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00b      	beq.n	80030e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030ca:	4b49      	ldr	r3, [pc, #292]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d11c      	bne.n	8003110 <HAL_RCC_OscConfig+0x18c>
 80030d6:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d116      	bne.n	8003110 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	4b43      	ldr	r3, [pc, #268]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_RCC_OscConfig+0x176>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e1ba      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fa:	4b3d      	ldr	r3, [pc, #244]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4939      	ldr	r1, [pc, #228]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310e:	e03a      	b.n	8003186 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003118:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <HAL_RCC_OscConfig+0x270>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7ff f939 	bl	8002394 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003126:	f7ff f935 	bl	8002394 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e19b      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003138:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003144:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4927      	ldr	r1, [pc, #156]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
 8003158:	e015      	b.n	8003186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <HAL_RCC_OscConfig+0x270>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7ff f918 	bl	8002394 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003168:	f7ff f914 	bl	8002394 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e17a      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d03a      	beq.n	8003208 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d019      	beq.n	80031ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319a:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a0:	f7ff f8f8 	bl	8002394 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a8:	f7ff f8f4 	bl	8002394 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e15a      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031c6:	2001      	movs	r0, #1
 80031c8:	f000 faec 	bl	80037a4 <RCC_Delay>
 80031cc:	e01c      	b.n	8003208 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_RCC_OscConfig+0x274>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7ff f8de 	bl	8002394 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031da:	e00f      	b.n	80031fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031dc:	f7ff f8da 	bl	8002394 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d908      	bls.n	80031fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e140      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	42420000 	.word	0x42420000
 80031f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031fc:	4b9e      	ldr	r3, [pc, #632]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e9      	bne.n	80031dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80a6 	beq.w	8003362 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321a:	4b97      	ldr	r3, [pc, #604]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	4b94      	ldr	r3, [pc, #592]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	4a93      	ldr	r2, [pc, #588]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	61d3      	str	r3, [r2, #28]
 8003232:	4b91      	ldr	r3, [pc, #580]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b8e      	ldr	r3, [pc, #568]	; (800347c <HAL_RCC_OscConfig+0x4f8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d118      	bne.n	8003280 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324e:	4b8b      	ldr	r3, [pc, #556]	; (800347c <HAL_RCC_OscConfig+0x4f8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a8a      	ldr	r2, [pc, #552]	; (800347c <HAL_RCC_OscConfig+0x4f8>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325a:	f7ff f89b 	bl	8002394 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7ff f897 	bl	8002394 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b64      	cmp	r3, #100	; 0x64
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e0fd      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	4b81      	ldr	r3, [pc, #516]	; (800347c <HAL_RCC_OscConfig+0x4f8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x312>
 8003288:	4b7b      	ldr	r3, [pc, #492]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4a7a      	ldr	r2, [pc, #488]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6213      	str	r3, [r2, #32]
 8003294:	e02d      	b.n	80032f2 <HAL_RCC_OscConfig+0x36e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x334>
 800329e:	4b76      	ldr	r3, [pc, #472]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4a75      	ldr	r2, [pc, #468]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6213      	str	r3, [r2, #32]
 80032aa:	4b73      	ldr	r3, [pc, #460]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4a72      	ldr	r2, [pc, #456]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	6213      	str	r3, [r2, #32]
 80032b6:	e01c      	b.n	80032f2 <HAL_RCC_OscConfig+0x36e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b05      	cmp	r3, #5
 80032be:	d10c      	bne.n	80032da <HAL_RCC_OscConfig+0x356>
 80032c0:	4b6d      	ldr	r3, [pc, #436]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4a6c      	ldr	r2, [pc, #432]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	6213      	str	r3, [r2, #32]
 80032cc:	4b6a      	ldr	r3, [pc, #424]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4a69      	ldr	r2, [pc, #420]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6213      	str	r3, [r2, #32]
 80032d8:	e00b      	b.n	80032f2 <HAL_RCC_OscConfig+0x36e>
 80032da:	4b67      	ldr	r3, [pc, #412]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4a66      	ldr	r2, [pc, #408]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	6213      	str	r3, [r2, #32]
 80032e6:	4b64      	ldr	r3, [pc, #400]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4a63      	ldr	r2, [pc, #396]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d015      	beq.n	8003326 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fa:	f7ff f84b 	bl	8002394 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003300:	e00a      	b.n	8003318 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003302:	f7ff f847 	bl	8002394 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003310:	4293      	cmp	r3, r2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e0ab      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	4b57      	ldr	r3, [pc, #348]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ee      	beq.n	8003302 <HAL_RCC_OscConfig+0x37e>
 8003324:	e014      	b.n	8003350 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003326:	f7ff f835 	bl	8002394 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332c:	e00a      	b.n	8003344 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332e:	f7ff f831 	bl	8002394 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	f241 3288 	movw	r2, #5000	; 0x1388
 800333c:	4293      	cmp	r3, r2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e095      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	4b4c      	ldr	r3, [pc, #304]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1ee      	bne.n	800332e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003350:	7dfb      	ldrb	r3, [r7, #23]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4b48      	ldr	r3, [pc, #288]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4a47      	ldr	r2, [pc, #284]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 800335c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003360:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8081 	beq.w	800346e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800336c:	4b42      	ldr	r3, [pc, #264]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b08      	cmp	r3, #8
 8003376:	d061      	beq.n	800343c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d146      	bne.n	800340e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003380:	4b3f      	ldr	r3, [pc, #252]	; (8003480 <HAL_RCC_OscConfig+0x4fc>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7ff f805 	bl	8002394 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7ff f801 	bl	8002394 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e067      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a0:	4b35      	ldr	r3, [pc, #212]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d108      	bne.n	80033c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033b6:	4b30      	ldr	r3, [pc, #192]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	492d      	ldr	r1, [pc, #180]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c8:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a19      	ldr	r1, [r3, #32]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	430b      	orrs	r3, r1
 80033da:	4927      	ldr	r1, [pc, #156]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_RCC_OscConfig+0x4fc>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fe ffd5 	bl	8002394 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fe ffd1 	bl	8002394 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e037      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x46a>
 800340c:	e02f      	b.n	800346e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <HAL_RCC_OscConfig+0x4fc>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fe ffbe 	bl	8002394 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7fe ffba 	bl	8002394 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e020      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x498>
 800343a:	e018      	b.n	800346e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e013      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_OscConfig+0x4f4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	429a      	cmp	r2, r3
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	42420060 	.word	0x42420060

08003484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0d0      	b.n	800363a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d910      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b67      	ldr	r3, [pc, #412]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 0207 	bic.w	r2, r3, #7
 80034ae:	4965      	ldr	r1, [pc, #404]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0b8      	b.n	800363a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e0:	4b59      	ldr	r3, [pc, #356]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f8:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003502:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	494d      	ldr	r1, [pc, #308]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d040      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d115      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e07f      	b.n	800363a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e073      	b.n	800363a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e06b      	b.n	800363a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003562:	4b39      	ldr	r3, [pc, #228]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4936      	ldr	r1, [pc, #216]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003574:	f7fe ff0e 	bl	8002394 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fe ff0a 	bl	8002394 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e053      	b.n	800363a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 020c 	and.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1eb      	bne.n	800357c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b27      	ldr	r3, [pc, #156]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d210      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f023 0207 	bic.w	r2, r3, #7
 80035ba:	4922      	ldr	r1, [pc, #136]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e032      	b.n	800363a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4916      	ldr	r1, [pc, #88]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	490e      	ldr	r1, [pc, #56]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003612:	f000 f82d 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 8003616:	4602      	mov	r2, r0
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	490a      	ldr	r1, [pc, #40]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003624:	5ccb      	ldrb	r3, [r1, r3]
 8003626:	fa22 f303 	lsr.w	r3, r2, r3
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1cc>)
 800362c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1d0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fe fe6c 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40022000 	.word	0x40022000
 8003648:	40021000 	.word	0x40021000
 800364c:	0800a810 	.word	0x0800a810
 8003650:	20000040 	.word	0x20000040
 8003654:	20000044 	.word	0x20000044

08003658 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCC_EnableCSS+0x14>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]
}
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	4242004c 	.word	0x4242004c

08003670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_RCC_GetSysClockFreq+0x94>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 030c 	and.w	r3, r3, #12
 8003696:	2b04      	cmp	r3, #4
 8003698:	d002      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x30>
 800369a:	2b08      	cmp	r3, #8
 800369c:	d003      	beq.n	80036a6 <HAL_RCC_GetSysClockFreq+0x36>
 800369e:	e027      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_RCC_GetSysClockFreq+0x98>)
 80036a2:	613b      	str	r3, [r7, #16]
      break;
 80036a4:	e027      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	0c9b      	lsrs	r3, r3, #18
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	4a17      	ldr	r2, [pc, #92]	; (800370c <HAL_RCC_GetSysClockFreq+0x9c>)
 80036b0:	5cd3      	ldrb	r3, [r2, r3]
 80036b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d010      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_RCC_GetSysClockFreq+0x94>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	0c5b      	lsrs	r3, r3, #17
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	4a11      	ldr	r2, [pc, #68]	; (8003710 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a0d      	ldr	r2, [pc, #52]	; (8003708 <HAL_RCC_GetSysClockFreq+0x98>)
 80036d2:	fb02 f203 	mul.w	r2, r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e004      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	613b      	str	r3, [r7, #16]
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetSysClockFreq+0x98>)
 80036f2:	613b      	str	r3, [r7, #16]
      break;
 80036f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f6:	693b      	ldr	r3, [r7, #16]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	007a1200 	.word	0x007a1200
 800370c:	0800a828 	.word	0x0800a828
 8003710:	0800a838 	.word	0x0800a838
 8003714:	003d0900 	.word	0x003d0900

08003718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b02      	ldr	r3, [pc, #8]	; (8003728 <HAL_RCC_GetHCLKFreq+0x10>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000040 	.word	0x20000040

0800372c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003730:	f7ff fff2 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	0800a820 	.word	0x0800a820

08003754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003758:	f7ff ffde 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	0adb      	lsrs	r3, r3, #11
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	0800a820 	.word	0x0800a820

0800377c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b80      	cmp	r3, #128	; 0x80
 800378a:	d104      	bne.n	8003796 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800378c:	f000 f828 	bl	80037e0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	701a      	strb	r2, [r3, #0]
  }
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000
 80037a0:	4002100a 	.word	0x4002100a

080037a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <RCC_Delay+0x34>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <RCC_Delay+0x38>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	0a5b      	lsrs	r3, r3, #9
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037c0:	bf00      	nop
  }
  while (Delay --);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1e5a      	subs	r2, r3, #1
 80037c6:	60fa      	str	r2, [r7, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f9      	bne.n	80037c0 <RCC_Delay+0x1c>
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	20000040 	.word	0x20000040
 80037dc:	10624dd3 	.word	0x10624dd3

080037e0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d07d      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003808:	2300      	movs	r3, #0
 800380a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380c:	4b4f      	ldr	r3, [pc, #316]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003818:	4b4c      	ldr	r3, [pc, #304]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	4a4b      	ldr	r2, [pc, #300]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003822:	61d3      	str	r3, [r2, #28]
 8003824:	4b49      	ldr	r3, [pc, #292]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003830:	2301      	movs	r3, #1
 8003832:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	4b46      	ldr	r3, [pc, #280]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d118      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a42      	ldr	r2, [pc, #264]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384c:	f7fe fda2 	bl	8002394 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	e008      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003854:	f7fe fd9e 	bl	8002394 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e06d      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003866:	4b3a      	ldr	r3, [pc, #232]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d02e      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d027      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003890:	4b2e      	ldr	r3, [pc, #184]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003898:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800389a:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038a0:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038a6:	4a29      	ldr	r2, [pc, #164]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d014      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fe fd6d 	bl	8002394 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	e00a      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f7fe fd69 	bl	8002394 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e036      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ee      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4917      	ldr	r1, [pc, #92]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f8:	4b14      	ldr	r3, [pc, #80]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	4a13      	ldr	r2, [pc, #76]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003902:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003910:	4b0e      	ldr	r3, [pc, #56]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	490b      	ldr	r1, [pc, #44]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4904      	ldr	r1, [pc, #16]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40021000 	.word	0x40021000
 8003950:	40007000 	.word	0x40007000
 8003954:	42420440 	.word	0x42420440

08003958 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	2300      	movs	r3, #0
 8003972:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b10      	cmp	r3, #16
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b10      	cmp	r3, #16
 800397e:	f200 808a 	bhi.w	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d045      	beq.n	8003a14 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d075      	beq.n	8003a7a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800398e:	e082      	b.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003990:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003996:	4b45      	ldr	r3, [pc, #276]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d07b      	beq.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	0c9b      	lsrs	r3, r3, #18
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	4a41      	ldr	r2, [pc, #260]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80039ac:	5cd3      	ldrb	r3, [r2, r3]
 80039ae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ba:	4b3c      	ldr	r3, [pc, #240]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	0c5b      	lsrs	r3, r3, #17
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	4a3b      	ldr	r2, [pc, #236]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80039c6:	5cd3      	ldrb	r3, [r2, r3]
 80039c8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80039d4:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	e004      	b.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4a34      	ldr	r2, [pc, #208]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80039f0:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fc:	d102      	bne.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	61bb      	str	r3, [r7, #24]
      break;
 8003a02:	e04a      	b.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4a2d      	ldr	r2, [pc, #180]	; (8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]
      break;
 8003a12:	e042      	b.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a24:	d108      	bne.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	e01f      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a42:	d109      	bne.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003a50:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e00f      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a62:	d11c      	bne.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a64:	4b11      	ldr	r3, [pc, #68]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d016      	beq.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003a70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a74:	61bb      	str	r3, [r7, #24]
      break;
 8003a76:	e012      	b.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a78:	e011      	b.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a7a:	f7ff fe6b 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	0b9b      	lsrs	r3, r3, #14
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	61bb      	str	r3, [r7, #24]
      break;
 8003a94:	e004      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a9e:	bf00      	nop
    }
  }
  return (frequency);
 8003aa0:	69bb      	ldr	r3, [r7, #24]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	0800a83c 	.word	0x0800a83c
 8003ab4:	0800a84c 	.word	0x0800a84c
 8003ab8:	007a1200 	.word	0x007a1200
 8003abc:	003d0900 	.word	0x003d0900
 8003ac0:	aaaaaaab 	.word	0xaaaaaaab

08003ac4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e07a      	b.n	8003bd0 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	7c5b      	ldrb	r3, [r3, #17]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fe f890 	bl	8001c10 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f99c 	bl	8003e34 <HAL_RTC_WaitForSynchro>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2204      	movs	r2, #4
 8003b06:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e061      	b.n	8003bd0 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fa55 	bl	8003fbc <RTC_EnterInitMode>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e056      	b.n	8003bd0 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0207 	bic.w	r2, r2, #7
 8003b30:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003b3a:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <HAL_RTC_Init+0x114>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4a26      	ldr	r2, [pc, #152]	; (8003bd8 <HAL_RTC_Init+0x114>)
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RTC_Init+0x114>)
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4921      	ldr	r1, [pc, #132]	; (8003bd8 <HAL_RTC_Init+0x114>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d003      	beq.n	8003b6a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	e00e      	b.n	8003b88 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f7ff fef4 	bl	8003958 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b70:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d104      	bne.n	8003b82 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e026      	b.n	8003bd0 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	0c1a      	lsrs	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f002 020f 	and.w	r2, r2, #15
 8003b94:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fa33 	bl	800400c <RTC_ExitInitMode>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00c      	b.n	8003bd0 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003bce:	2300      	movs	r3, #0
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40006c00 	.word	0x40006c00

08003bdc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	2300      	movs	r3, #0
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_RTC_GetTime+0x28>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0b5      	b.n	8003d74 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e0ac      	b.n	8003d74 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f937 	bl	8003e8e <RTC_ReadTimeCounter>
 8003c20:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	4a55      	ldr	r2, [pc, #340]	; (8003d7c <HAL_RTC_GetTime+0x1a0>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	0adb      	lsrs	r3, r3, #11
 8003c2c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4b52      	ldr	r3, [pc, #328]	; (8003d7c <HAL_RTC_GetTime+0x1a0>)
 8003c32:	fba3 1302 	umull	r1, r3, r3, r2
 8003c36:	0adb      	lsrs	r3, r3, #11
 8003c38:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	4a4f      	ldr	r2, [pc, #316]	; (8003d80 <HAL_RTC_GetTime+0x1a4>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	4a4a      	ldr	r2, [pc, #296]	; (8003d7c <HAL_RTC_GetTime+0x1a0>)
 8003c54:	fba2 1203 	umull	r1, r2, r2, r3
 8003c58:	0ad2      	lsrs	r2, r2, #11
 8003c5a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003c5e:	fb01 f202 	mul.w	r2, r1, r2
 8003c62:	1a9a      	subs	r2, r3, r2
 8003c64:	4b46      	ldr	r3, [pc, #280]	; (8003d80 <HAL_RTC_GetTime+0x1a4>)
 8003c66:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6a:	0959      	lsrs	r1, r3, #5
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a5b      	subs	r3, r3, r1
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	1ad1      	subs	r1, r2, r3
 8003c76:	b2ca      	uxtb	r2, r1
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b17      	cmp	r3, #23
 8003c80:	d955      	bls.n	8003d2e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4a3f      	ldr	r2, [pc, #252]	; (8003d84 <HAL_RTC_GetTime+0x1a8>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003c8e:	6939      	ldr	r1, [r7, #16]
 8003c90:	4b3c      	ldr	r3, [pc, #240]	; (8003d84 <HAL_RTC_GetTime+0x1a8>)
 8003c92:	fba3 2301 	umull	r2, r3, r3, r1
 8003c96:	091a      	lsrs	r2, r3, #4
 8003c98:	4613      	mov	r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	1aca      	subs	r2, r1, r3
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f947 	bl	8003f3c <RTC_ReadAlarmCounter>
 8003cae:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb6:	d008      	beq.n	8003cca <HAL_RTC_GetTime+0xee>
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d904      	bls.n	8003cca <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	e002      	b.n	8003cd0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295
 8003cce:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	4a2d      	ldr	r2, [pc, #180]	; (8003d88 <HAL_RTC_GetTime+0x1ac>)
 8003cd4:	fb02 f303 	mul.w	r3, r2, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f904 	bl	8003eee <RTC_WriteTimeCounter>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e041      	b.n	8003d74 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf6:	d00c      	beq.n	8003d12 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d00:	69f9      	ldr	r1, [r7, #28]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f933 	bl	8003f6e <RTC_WriteAlarmCounter>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e030      	b.n	8003d74 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d12:	69f9      	ldr	r1, [r7, #28]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f92a 	bl	8003f6e <RTC_WriteAlarmCounter>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e027      	b.n	8003d74 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003d24:	6979      	ldr	r1, [r7, #20]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f9b5 	bl	8004096 <RTC_DateUpdate>
 8003d2c:	e003      	b.n	8003d36 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01a      	beq.n	8003d72 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f98b 	bl	800405c <RTC_ByteToBcd2>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	785b      	ldrb	r3, [r3, #1]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f982 	bl	800405c <RTC_ByteToBcd2>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	789b      	ldrb	r3, [r3, #2]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f979 	bl	800405c <RTC_ByteToBcd2>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	91a2b3c5 	.word	0x91a2b3c5
 8003d80:	88888889 	.word	0x88888889
 8003d84:	aaaaaaab 	.word	0xaaaaaaab
 8003d88:	00015180 	.word	0x00015180

08003d8c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	460a      	mov	r2, r1
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	460a      	mov	r2, r1
 8003da4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_RTC_GetDate+0x26>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e03a      	b.n	8003e2c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003db6:	f107 0314 	add.w	r3, r7, #20
 8003dba:	2200      	movs	r2, #0
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff ff0c 	bl	8003bdc <HAL_RTC_GetTime>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e02e      	b.n	8003e2c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	7b1a      	ldrb	r2, [r3, #12]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	7bda      	ldrb	r2, [r3, #15]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	7b5a      	ldrb	r2, [r3, #13]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	7b9a      	ldrb	r2, [r3, #14]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01a      	beq.n	8003e2a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	78db      	ldrb	r3, [r3, #3]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f92f 	bl	800405c <RTC_ByteToBcd2>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f926 	bl	800405c <RTC_ByteToBcd2>
 8003e10:	4603      	mov	r3, r0
 8003e12:	461a      	mov	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	789b      	ldrb	r3, [r3, #2]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f91d 	bl	800405c <RTC_ByteToBcd2>
 8003e22:	4603      	mov	r3, r0
 8003e24:	461a      	mov	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e01d      	b.n	8003e86 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0208 	bic.w	r2, r2, #8
 8003e58:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003e5a:	f7fe fa9b 	bl	8002394 <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003e60:	e009      	b.n	8003e76 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e62:	f7fe fa97 	bl	8002394 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e70:	d901      	bls.n	8003e76 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e007      	b.n	8003e86 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ee      	beq.n	8003e62 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b087      	sub	sp, #28
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	827b      	strh	r3, [r7, #18]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	823b      	strh	r3, [r7, #16]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003ebe:	8a7a      	ldrh	r2, [r7, #18]
 8003ec0:	8a3b      	ldrh	r3, [r7, #16]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d008      	beq.n	8003ed8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003ec6:	8a3b      	ldrh	r3, [r7, #16]
 8003ec8:	041a      	lsls	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	e004      	b.n	8003ee2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003ed8:	8a7b      	ldrh	r3, [r7, #18]
 8003eda:	041a      	lsls	r2, r3, #16
 8003edc:	89fb      	ldrh	r3, [r7, #14]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003ee2:	697b      	ldr	r3, [r7, #20]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f85d 	bl	8003fbc <RTC_EnterInitMode>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e011      	b.n	8003f32 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	0c12      	lsrs	r2, r2, #16
 8003f16:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	b292      	uxth	r2, r2
 8003f20:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f872 	bl	800400c <RTC_ExitInitMode>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	81fb      	strh	r3, [r7, #14]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003f5c:	89fb      	ldrh	r3, [r7, #14]
 8003f5e:	041a      	lsls	r2, r3, #16
 8003f60:	89bb      	ldrh	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f81d 	bl	8003fbc <RTC_EnterInitMode>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e011      	b.n	8003fb2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	0c12      	lsrs	r2, r2, #16
 8003f96:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	b292      	uxth	r2, r2
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f832 	bl	800400c <RTC_ExitInitMode>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003fc8:	f7fe f9e4 	bl	8002394 <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003fce:	e009      	b.n	8003fe4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003fd0:	f7fe f9e0 	bl	8002394 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fde:	d901      	bls.n	8003fe4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e00f      	b.n	8004004 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ee      	beq.n	8003fd0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0210 	orr.w	r2, r2, #16
 8004000:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0210 	bic.w	r2, r2, #16
 8004026:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004028:	f7fe f9b4 	bl	8002394 <HAL_GetTick>
 800402c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800402e:	e009      	b.n	8004044 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004030:	f7fe f9b0 	bl	8002394 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800403e:	d901      	bls.n	8004044 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e007      	b.n	8004054 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ee      	beq.n	8004030 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800406a:	e005      	b.n	8004078 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3301      	adds	r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	3b0a      	subs	r3, #10
 8004076:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	2b09      	cmp	r3, #9
 800407c:	d8f6      	bhi.n	800406c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	b2da      	uxtb	r2, r3
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	4313      	orrs	r3, r2
 800408a:	b2db      	uxtb	r3, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7bdb      	ldrb	r3, [r3, #15]
 80040b4:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	7b5b      	ldrb	r3, [r3, #13]
 80040ba:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7b9b      	ldrb	r3, [r3, #14]
 80040c0:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	e06f      	b.n	80041a8 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d011      	beq.n	80040f2 <RTC_DateUpdate+0x5c>
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d00e      	beq.n	80040f2 <RTC_DateUpdate+0x5c>
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d00b      	beq.n	80040f2 <RTC_DateUpdate+0x5c>
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b07      	cmp	r3, #7
 80040de:	d008      	beq.n	80040f2 <RTC_DateUpdate+0x5c>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d005      	beq.n	80040f2 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b0a      	cmp	r3, #10
 80040ea:	d002      	beq.n	80040f2 <RTC_DateUpdate+0x5c>
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b0c      	cmp	r3, #12
 80040f0:	d117      	bne.n	8004122 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b1e      	cmp	r3, #30
 80040f6:	d803      	bhi.n	8004100 <RTC_DateUpdate+0x6a>
      {
        day++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3301      	adds	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80040fe:	e050      	b.n	80041a2 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d005      	beq.n	8004112 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	3301      	adds	r3, #1
 800410a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800410c:	2301      	movs	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004110:	e047      	b.n	80041a2 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004112:	2301      	movs	r3, #1
 8004114:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004116:	2301      	movs	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
          year++;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	3301      	adds	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004120:	e03f      	b.n	80041a2 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b04      	cmp	r3, #4
 8004126:	d008      	beq.n	800413a <RTC_DateUpdate+0xa4>
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b06      	cmp	r3, #6
 800412c:	d005      	beq.n	800413a <RTC_DateUpdate+0xa4>
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b09      	cmp	r3, #9
 8004132:	d002      	beq.n	800413a <RTC_DateUpdate+0xa4>
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0b      	cmp	r3, #11
 8004138:	d10c      	bne.n	8004154 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b1d      	cmp	r3, #29
 800413e:	d803      	bhi.n	8004148 <RTC_DateUpdate+0xb2>
      {
        day++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3301      	adds	r3, #1
 8004144:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004146:	e02c      	b.n	80041a2 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	3301      	adds	r3, #1
 800414c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800414e:	2301      	movs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004152:	e026      	b.n	80041a2 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d123      	bne.n	80041a2 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b1b      	cmp	r3, #27
 800415e:	d803      	bhi.n	8004168 <RTC_DateUpdate+0xd2>
      {
        day++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3301      	adds	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e01c      	b.n	80041a2 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b1c      	cmp	r3, #28
 800416c:	d111      	bne.n	8004192 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	b29b      	uxth	r3, r3
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f838 	bl	80041e8 <RTC_IsLeapYear>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <RTC_DateUpdate+0xf0>
        {
          day++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3301      	adds	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e00d      	b.n	80041a2 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	3301      	adds	r3, #1
 800418a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800418c:	2301      	movs	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e007      	b.n	80041a2 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b1d      	cmp	r3, #29
 8004196:	d104      	bne.n	80041a2 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	3301      	adds	r3, #1
 800419c:	613b      	str	r3, [r7, #16]
        day = 1U;
 800419e:	2301      	movs	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	3301      	adds	r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d38b      	bcc.n	80040c8 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f000 f83a 	bl	800424c <RTC_WeekDayNum>
 80041d8:	4603      	mov	r3, r0
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	731a      	strb	r2, [r3, #12]
}
 80041e0:	bf00      	nop
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	e01d      	b.n	800423e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	4a10      	ldr	r2, [pc, #64]	; (8004248 <RTC_IsLeapYear+0x60>)
 8004206:	fba2 1203 	umull	r1, r2, r2, r3
 800420a:	0952      	lsrs	r2, r2, #5
 800420c:	2164      	movs	r1, #100	; 0x64
 800420e:	fb01 f202 	mul.w	r2, r1, r2
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800421a:	2301      	movs	r3, #1
 800421c:	e00f      	b.n	800423e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	4a09      	ldr	r2, [pc, #36]	; (8004248 <RTC_IsLeapYear+0x60>)
 8004222:	fba2 1203 	umull	r1, r2, r2, r3
 8004226:	09d2      	lsrs	r2, r2, #7
 8004228:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800422c:	fb01 f202 	mul.w	r2, r1, r2
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800423c:	2300      	movs	r3, #0
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	51eb851f 	.word	0x51eb851f

0800424c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	70fb      	strb	r3, [r7, #3]
 8004258:	4613      	mov	r3, r2
 800425a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800426a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d82d      	bhi.n	80042ce <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	4613      	mov	r3, r2
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4413      	add	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <RTC_WeekDayNum+0xe4>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	085a      	lsrs	r2, r3, #1
 8004286:	78bb      	ldrb	r3, [r7, #2]
 8004288:	441a      	add	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	441a      	add	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	3b01      	subs	r3, #1
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	441a      	add	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	3b01      	subs	r3, #1
 800429a:	4926      	ldr	r1, [pc, #152]	; (8004334 <RTC_WeekDayNum+0xe8>)
 800429c:	fba1 1303 	umull	r1, r3, r1, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	1ad2      	subs	r2, r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	4922      	ldr	r1, [pc, #136]	; (8004334 <RTC_WeekDayNum+0xe8>)
 80042aa:	fba1 1303 	umull	r1, r3, r1, r3
 80042ae:	09db      	lsrs	r3, r3, #7
 80042b0:	4413      	add	r3, r2
 80042b2:	1d1a      	adds	r2, r3, #4
 80042b4:	4b20      	ldr	r3, [pc, #128]	; (8004338 <RTC_WeekDayNum+0xec>)
 80042b6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ba:	1ad1      	subs	r1, r2, r3
 80042bc:	0849      	lsrs	r1, r1, #1
 80042be:	440b      	add	r3, r1
 80042c0:	0899      	lsrs	r1, r3, #2
 80042c2:	460b      	mov	r3, r1
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	1a5b      	subs	r3, r3, r1
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e029      	b.n	8004322 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	4a15      	ldr	r2, [pc, #84]	; (8004330 <RTC_WeekDayNum+0xe4>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	085a      	lsrs	r2, r3, #1
 80042e2:	78bb      	ldrb	r3, [r7, #2]
 80042e4:	441a      	add	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	441a      	add	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	441a      	add	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4910      	ldr	r1, [pc, #64]	; (8004334 <RTC_WeekDayNum+0xe8>)
 80042f4:	fba1 1303 	umull	r1, r3, r1, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	1ad2      	subs	r2, r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	490d      	ldr	r1, [pc, #52]	; (8004334 <RTC_WeekDayNum+0xe8>)
 8004300:	fba1 1303 	umull	r1, r3, r1, r3
 8004304:	09db      	lsrs	r3, r3, #7
 8004306:	4413      	add	r3, r2
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <RTC_WeekDayNum+0xec>)
 800430c:	fba3 1302 	umull	r1, r3, r3, r2
 8004310:	1ad1      	subs	r1, r2, r3
 8004312:	0849      	lsrs	r1, r1, #1
 8004314:	440b      	add	r3, r1
 8004316:	0899      	lsrs	r1, r3, #2
 8004318:	460b      	mov	r3, r1
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	1a5b      	subs	r3, r3, r1
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	b2db      	uxtb	r3, r3
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	38e38e39 	.word	0x38e38e39
 8004334:	51eb851f 	.word	0x51eb851f
 8004338:	24924925 	.word	0x24924925

0800433c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e076      	b.n	800443c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d009      	beq.n	8004374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	61da      	str	r2, [r3, #28]
 8004366:	e005      	b.n	8004374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd fc62 	bl	8001c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f8:	ea42 0103 	orr.w	r1, r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	0c1a      	lsrs	r2, r3, #16
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f002 0204 	and.w	r2, r2, #4
 800441a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800442a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_SPI_Transmit+0x22>
 8004462:	2302      	movs	r3, #2
 8004464:	e12d      	b.n	80046c2 <HAL_SPI_Transmit+0x27e>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800446e:	f7fd ff91 	bl	8002394 <HAL_GetTick>
 8004472:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d002      	beq.n	800448a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004484:	2302      	movs	r3, #2
 8004486:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004488:	e116      	b.n	80046b8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_SPI_Transmit+0x52>
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	77fb      	strb	r3, [r7, #31]
    goto error;
 800449a:	e10d      	b.n	80046b8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2203      	movs	r2, #3
 80044a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	88fa      	ldrh	r2, [r7, #6]
 80044ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e2:	d10f      	bne.n	8004504 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004502:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d007      	beq.n	8004522 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004520:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800452a:	d14f      	bne.n	80045cc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_SPI_Transmit+0xf6>
 8004534:	8afb      	ldrh	r3, [r7, #22]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d142      	bne.n	80045c0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	881a      	ldrh	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	1c9a      	adds	r2, r3, #2
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800455e:	e02f      	b.n	80045c0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d112      	bne.n	8004594 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	881a      	ldrh	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	1c9a      	adds	r2, r3, #2
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	86da      	strh	r2, [r3, #54]	; 0x36
 8004592:	e015      	b.n	80045c0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004594:	f7fd fefe 	bl	8002394 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d803      	bhi.n	80045ac <HAL_SPI_Transmit+0x168>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d102      	bne.n	80045b2 <HAL_SPI_Transmit+0x16e>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80045be:	e07b      	b.n	80046b8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1ca      	bne.n	8004560 <HAL_SPI_Transmit+0x11c>
 80045ca:	e050      	b.n	800466e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_SPI_Transmit+0x196>
 80045d4:	8afb      	ldrh	r3, [r7, #22]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d144      	bne.n	8004664 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	7812      	ldrb	r2, [r2, #0]
 80045e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004600:	e030      	b.n	8004664 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b02      	cmp	r3, #2
 800460e:	d113      	bne.n	8004638 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	7812      	ldrb	r2, [r2, #0]
 800461c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	86da      	strh	r2, [r3, #54]	; 0x36
 8004636:	e015      	b.n	8004664 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004638:	f7fd feac 	bl	8002394 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d803      	bhi.n	8004650 <HAL_SPI_Transmit+0x20c>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d102      	bne.n	8004656 <HAL_SPI_Transmit+0x212>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004662:	e029      	b.n	80046b8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1c9      	bne.n	8004602 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	6839      	ldr	r1, [r7, #0]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fcd0 	bl	8005018 <SPI_EndRxTxTransaction>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e003      	b.n	80046b8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3720      	adds	r7, #32
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b088      	sub	sp, #32
 80046ce:	af02      	add	r7, sp, #8
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80046ea:	2302      	movs	r3, #2
 80046ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046ee:	e0fb      	b.n	80048e8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046f8:	d112      	bne.n	8004720 <HAL_SPI_Receive+0x56>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10e      	bne.n	8004720 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2204      	movs	r2, #4
 8004706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	4613      	mov	r3, r2
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f8ef 	bl	80048fa <HAL_SPI_TransmitReceive>
 800471c:	4603      	mov	r3, r0
 800471e:	e0e8      	b.n	80048f2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_SPI_Receive+0x64>
 800472a:	2302      	movs	r3, #2
 800472c:	e0e1      	b.n	80048f2 <HAL_SPI_Receive+0x228>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004736:	f7fd fe2d 	bl	8002394 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_SPI_Receive+0x7e>
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800474c:	e0cc      	b.n	80048e8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2204      	movs	r2, #4
 8004752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	88fa      	ldrh	r2, [r7, #6]
 8004766:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004794:	d10f      	bne.n	80047b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d007      	beq.n	80047d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d16a      	bne.n	80048b2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047dc:	e032      	b.n	8004844 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d115      	bne.n	8004818 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f103 020c 	add.w	r2, r3, #12
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	7812      	ldrb	r2, [r2, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004816:	e015      	b.n	8004844 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004818:	f7fd fdbc 	bl	8002394 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d803      	bhi.n	8004830 <HAL_SPI_Receive+0x166>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	d102      	bne.n	8004836 <HAL_SPI_Receive+0x16c>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004842:	e051      	b.n	80048e8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1c7      	bne.n	80047de <HAL_SPI_Receive+0x114>
 800484e:	e035      	b.n	80048bc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d113      	bne.n	8004886 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	b292      	uxth	r2, r2
 800486a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004884:	e015      	b.n	80048b2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004886:	f7fd fd85 	bl	8002394 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d803      	bhi.n	800489e <HAL_SPI_Receive+0x1d4>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d102      	bne.n	80048a4 <HAL_SPI_Receive+0x1da>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80048b0:	e01a      	b.n	80048e8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1c9      	bne.n	8004850 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	6839      	ldr	r1, [r7, #0]
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fb57 	bl	8004f74 <SPI_EndRxTransaction>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
 80048de:	e003      	b.n	80048e8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b08c      	sub	sp, #48	; 0x30
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004908:	2301      	movs	r3, #1
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_SPI_TransmitReceive+0x26>
 800491c:	2302      	movs	r3, #2
 800491e:	e198      	b.n	8004c52 <HAL_SPI_TransmitReceive+0x358>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004928:	f7fd fd34 	bl	8002394 <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004946:	2b01      	cmp	r3, #1
 8004948:	d00f      	beq.n	800496a <HAL_SPI_TransmitReceive+0x70>
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004950:	d107      	bne.n	8004962 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <HAL_SPI_TransmitReceive+0x68>
 800495a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800495e:	2b04      	cmp	r3, #4
 8004960:	d003      	beq.n	800496a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004962:	2302      	movs	r3, #2
 8004964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004968:	e16d      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_SPI_TransmitReceive+0x82>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_SPI_TransmitReceive+0x82>
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004982:	e160      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b04      	cmp	r3, #4
 800498e:	d003      	beq.n	8004998 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2205      	movs	r2, #5
 8004994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	887a      	ldrh	r2, [r7, #2]
 80049ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	887a      	ldrh	r2, [r7, #2]
 80049ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d007      	beq.n	80049ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f4:	d17c      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_SPI_TransmitReceive+0x10a>
 80049fe:	8b7b      	ldrh	r3, [r7, #26]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d16a      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	881a      	ldrh	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	1c9a      	adds	r2, r3, #2
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a28:	e057      	b.n	8004ada <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d11b      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x176>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d016      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x176>
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d113      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	881a      	ldrh	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	1c9a      	adds	r2, r3, #2
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d119      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x1b8>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d014      	beq.n	8004ab2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	b292      	uxth	r2, r2
 8004a94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	1c9a      	adds	r2, r3, #2
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ab2:	f7fd fc6f 	bl	8002394 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d80b      	bhi.n	8004ada <HAL_SPI_TransmitReceive+0x1e0>
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac8:	d007      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004ad8:	e0b5      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1a2      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x130>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d19d      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x130>
 8004aee:	e080      	b.n	8004bf2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_SPI_TransmitReceive+0x204>
 8004af8:	8b7b      	ldrh	r3, [r7, #26]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d16f      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b24:	e05b      	b.n	8004bde <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d11c      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x274>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d017      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x274>
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d114      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	7812      	ldrb	r2, [r2, #0]
 8004b50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d119      	bne.n	8004bb0 <HAL_SPI_TransmitReceive+0x2b6>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d014      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bac:	2301      	movs	r3, #1
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bb0:	f7fd fbf0 	bl	8002394 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d803      	bhi.n	8004bc8 <HAL_SPI_TransmitReceive+0x2ce>
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d102      	bne.n	8004bce <HAL_SPI_TransmitReceive+0x2d4>
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d107      	bne.n	8004bde <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004bdc:	e033      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d19e      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x22c>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d199      	bne.n	8004b26 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fa0e 	bl	8005018 <SPI_EndRxTxTransaction>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d006      	beq.n	8004c10 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c0e:	e01a      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3c:	e003      	b.n	8004c46 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3730      	adds	r7, #48	; 0x30
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10f      	bne.n	8004ca0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	099b      	lsrs	r3, r3, #6
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
    return;
 8004c9e:	e0be      	b.n	8004e1e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	085b      	lsrs	r3, r3, #1
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_SPI_IRQHandler+0x66>
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	09db      	lsrs	r3, r3, #7
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d004      	beq.n	8004cc2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
    return;
 8004cc0:	e0ad      	b.n	8004e1e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <HAL_SPI_IRQHandler+0x80>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	099b      	lsrs	r3, r3, #6
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 80a1 	beq.w	8004e1e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 809a 	beq.w	8004e1e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	099b      	lsrs	r3, r3, #6
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d023      	beq.n	8004d3e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d011      	beq.n	8004d26 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	f043 0204 	orr.w	r2, r3, #4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	e00b      	b.n	8004d3e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	693b      	ldr	r3, [r7, #16]
        return;
 8004d3c:	e06f      	b.n	8004e1e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d014      	beq.n	8004d74 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4e:	f043 0201 	orr.w	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d04f      	beq.n	8004e1c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <HAL_SPI_IRQHandler+0x14c>
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d034      	beq.n	8004e12 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0203 	bic.w	r2, r2, #3
 8004db6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d011      	beq.n	8004de4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <HAL_SPI_IRQHandler+0x1c8>)
 8004dc6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fd fcb3 	bl	8002738 <HAL_DMA_Abort_IT>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ddc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d016      	beq.n	8004e1a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df0:	4a0c      	ldr	r2, [pc, #48]	; (8004e24 <HAL_SPI_IRQHandler+0x1c8>)
 8004df2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fd fc9d 	bl	8002738 <HAL_DMA_Abort_IT>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e10:	e003      	b.n	8004e1a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f808 	bl	8004e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e18:	e000      	b.n	8004e1c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004e1a:	bf00      	nop
    return;
 8004e1c:	bf00      	nop
  }
}
 8004e1e:	3720      	adds	r7, #32
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	08004e3b 	.word	0x08004e3b

08004e28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr

08004e3a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7ff ffe7 	bl	8004e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e74:	f7fd fa8e 	bl	8002394 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4413      	add	r3, r2
 8004e82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e84:	f7fd fa86 	bl	8002394 <HAL_GetTick>
 8004e88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e8a:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	015b      	lsls	r3, r3, #5
 8004e90:	0d1b      	lsrs	r3, r3, #20
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e9a:	e054      	b.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d050      	beq.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ea4:	f7fd fa76 	bl	8002394 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d902      	bls.n	8004eba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d13d      	bne.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed2:	d111      	bne.n	8004ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004edc:	d004      	beq.n	8004ee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee6:	d107      	bne.n	8004ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f00:	d10f      	bne.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e017      	b.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d19b      	bne.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000040 	.word	0x20000040

08004f74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f88:	d111      	bne.n	8004fae <SPI_EndRxTransaction+0x3a>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f92:	d004      	beq.n	8004f9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9c:	d107      	bne.n	8004fae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fac:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb6:	d117      	bne.n	8004fe8 <SPI_EndRxTransaction+0x74>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc0:	d112      	bne.n	8004fe8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2101      	movs	r1, #1
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff ff49 	bl	8004e64 <SPI_WaitFlagStateUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01a      	beq.n	800500e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e013      	b.n	8005010 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff ff36 	bl	8004e64 <SPI_WaitFlagStateUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e000      	b.n	8005010 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2200      	movs	r2, #0
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff ff18 	bl	8004e64 <SPI_WaitFlagStateUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d007      	beq.n	800504a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e000      	b.n	800504c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e042      	b.n	80050ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fc fe7a 	bl	8001d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2224      	movs	r2, #36	; 0x24
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fd71 	bl	8005b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	4613      	mov	r3, r2
 8005102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b20      	cmp	r3, #32
 8005112:	d16d      	bne.n	80051f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_UART_Transmit+0x2c>
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e066      	b.n	80051f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2221      	movs	r2, #33	; 0x21
 800512e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005132:	f7fd f92f 	bl	8002394 <HAL_GetTick>
 8005136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	88fa      	ldrh	r2, [r7, #6]
 800513c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	88fa      	ldrh	r2, [r7, #6]
 8005142:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514c:	d108      	bne.n	8005160 <HAL_UART_Transmit+0x6c>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d104      	bne.n	8005160 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	e003      	b.n	8005168 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005168:	e02a      	b.n	80051c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2200      	movs	r2, #0
 8005172:	2180      	movs	r1, #128	; 0x80
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 faf9 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e036      	b.n	80051f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005198:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	3302      	adds	r3, #2
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	e007      	b.n	80051b2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	3301      	adds	r3, #1
 80051b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1cf      	bne.n	800516a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2140      	movs	r1, #64	; 0x40
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fac9 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e006      	b.n	80051f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e000      	b.n	80051f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80051f0:	2302      	movs	r3, #2
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b0ba      	sub	sp, #232	; 0xe8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005222:	2300      	movs	r3, #0
 8005224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005228:	2300      	movs	r3, #0
 800522a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800523a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10f      	bne.n	8005262 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <HAL_UART_IRQHandler+0x66>
 800524e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fbd1 	bl	8005a02 <UART_Receive_IT>
      return;
 8005260:	e25b      	b.n	800571a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 80de 	beq.w	8005428 <HAL_UART_IRQHandler+0x22c>
 800526c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800527c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80d1 	beq.w	8005428 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00b      	beq.n	80052aa <HAL_UART_IRQHandler+0xae>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	f043 0201 	orr.w	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <HAL_UART_IRQHandler+0xd2>
 80052b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	f043 0202 	orr.w	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <HAL_UART_IRQHandler+0xf6>
 80052da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	f043 0204 	orr.w	r2, r3, #4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d011      	beq.n	8005322 <HAL_UART_IRQHandler+0x126>
 80052fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d105      	bne.n	8005316 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	f043 0208 	orr.w	r2, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 81f2 	beq.w	8005710 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800532c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_UART_IRQHandler+0x14e>
 8005338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fb5c 	bl	8005a02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <HAL_UART_IRQHandler+0x17a>
 800536e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d04f      	beq.n	8005416 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa66 	bl	8005848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d041      	beq.n	800540e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3314      	adds	r3, #20
 8005390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3314      	adds	r3, #20
 80053b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1d9      	bne.n	800538a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d013      	beq.n	8005406 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	4a7e      	ldr	r2, [pc, #504]	; (80055dc <HAL_UART_IRQHandler+0x3e0>)
 80053e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fd f9a4 	bl	8002738 <HAL_DMA_Abort_IT>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005400:	4610      	mov	r0, r2
 8005402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	e00e      	b.n	8005424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f99c 	bl	8005744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	e00a      	b.n	8005424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f998 	bl	8005744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005414:	e006      	b.n	8005424 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f994 	bl	8005744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005422:	e175      	b.n	8005710 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	bf00      	nop
    return;
 8005426:	e173      	b.n	8005710 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	2b01      	cmp	r3, #1
 800542e:	f040 814f 	bne.w	80056d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8148 	beq.w	80056d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8141 	beq.w	80056d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	60bb      	str	r3, [r7, #8]
 8005462:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80b6 	beq.w	80055e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8145 	beq.w	8005714 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800548e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005492:	429a      	cmp	r2, r3
 8005494:	f080 813e 	bcs.w	8005714 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800549e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	f000 8088 	beq.w	80055bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1d9      	bne.n	80054ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3314      	adds	r3, #20
 80054fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3314      	adds	r3, #20
 8005518:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800551c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005520:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005524:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800552e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e1      	bne.n	80054f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3314      	adds	r3, #20
 800553a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800554a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3314      	adds	r3, #20
 8005554:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005558:	66fa      	str	r2, [r7, #108]	; 0x6c
 800555a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800555e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005566:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e3      	bne.n	8005534 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800558a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800558c:	f023 0310 	bic.w	r3, r3, #16
 8005590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800559e:	65ba      	str	r2, [r7, #88]	; 0x58
 80055a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e3      	bne.n	800557a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fd f882 	bl	80026c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	4619      	mov	r1, r3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f8bf 	bl	8005756 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055d8:	e09c      	b.n	8005714 <HAL_UART_IRQHandler+0x518>
 80055da:	bf00      	nop
 80055dc:	0800590d 	.word	0x0800590d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 808e 	beq.w	8005718 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80055fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8089 	beq.w	8005718 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	330c      	adds	r3, #12
 800560c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800561c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800562a:	647a      	str	r2, [r7, #68]	; 0x44
 800562c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e3      	bne.n	8005606 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3314      	adds	r3, #20
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	623b      	str	r3, [r7, #32]
   return(result);
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3314      	adds	r3, #20
 800565e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005662:	633a      	str	r2, [r7, #48]	; 0x30
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e3      	bne.n	800563e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	60fb      	str	r3, [r7, #12]
   return(result);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0310 	bic.w	r3, r3, #16
 800569a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056a8:	61fa      	str	r2, [r7, #28]
 80056aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	69b9      	ldr	r1, [r7, #24]
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	617b      	str	r3, [r7, #20]
   return(result);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e3      	bne.n	8005684 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f844 	bl	8005756 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056ce:	e023      	b.n	8005718 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d009      	beq.n	80056f0 <HAL_UART_IRQHandler+0x4f4>
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f923 	bl	8005934 <UART_Transmit_IT>
    return;
 80056ee:	e014      	b.n	800571a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00e      	beq.n	800571a <HAL_UART_IRQHandler+0x51e>
 80056fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f962 	bl	80059d2 <UART_EndTransmit_IT>
    return;
 800570e:	e004      	b.n	800571a <HAL_UART_IRQHandler+0x51e>
    return;
 8005710:	bf00      	nop
 8005712:	e002      	b.n	800571a <HAL_UART_IRQHandler+0x51e>
      return;
 8005714:	bf00      	nop
 8005716:	e000      	b.n	800571a <HAL_UART_IRQHandler+0x51e>
      return;
 8005718:	bf00      	nop
  }
}
 800571a:	37e8      	adds	r7, #232	; 0xe8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr

0800576c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b090      	sub	sp, #64	; 0x40
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577c:	e050      	b.n	8005820 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d04c      	beq.n	8005820 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <UART_WaitOnFlagUntilTimeout+0x30>
 800578c:	f7fc fe02 	bl	8002394 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005798:	429a      	cmp	r2, r3
 800579a:	d241      	bcs.n	8005820 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057bc:	637a      	str	r2, [r7, #52]	; 0x34
 80057be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e5      	bne.n	800579c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3314      	adds	r3, #20
 80057d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	613b      	str	r3, [r7, #16]
   return(result);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3314      	adds	r3, #20
 80057ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f0:	623a      	str	r2, [r7, #32]
 80057f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	69f9      	ldr	r1, [r7, #28]
 80057f6:	6a3a      	ldr	r2, [r7, #32]
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e5      	bne.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e00f      	b.n	8005840 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	429a      	cmp	r2, r3
 800583c:	d09f      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3740      	adds	r7, #64	; 0x40
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b095      	sub	sp, #84	; 0x54
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005870:	643a      	str	r2, [r7, #64]	; 0x40
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005876:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e5      	bne.n	8005850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3314      	adds	r3, #20
 800588a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	61fb      	str	r3, [r7, #28]
   return(result);
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	64bb      	str	r3, [r7, #72]	; 0x48
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3314      	adds	r3, #20
 80058a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e5      	bne.n	8005884 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d119      	bne.n	80058f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f023 0310 	bic.w	r3, r3, #16
 80058d6:	647b      	str	r3, [r7, #68]	; 0x44
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	330c      	adds	r3, #12
 80058de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058e0:	61ba      	str	r2, [r7, #24]
 80058e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	6979      	ldr	r1, [r7, #20]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	613b      	str	r3, [r7, #16]
   return(result);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e5      	bne.n	80058c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005902:	bf00      	nop
 8005904:	3754      	adds	r7, #84	; 0x54
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff ff0c 	bl	8005744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b21      	cmp	r3, #33	; 0x21
 8005946:	d13e      	bne.n	80059c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005950:	d114      	bne.n	800597c <UART_Transmit_IT+0x48>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d110      	bne.n	800597c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800596e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	1c9a      	adds	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	621a      	str	r2, [r3, #32]
 800597a:	e008      	b.n	800598e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	1c59      	adds	r1, r3, #1
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	6211      	str	r1, [r2, #32]
 8005986:	781a      	ldrb	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29b      	uxth	r3, r3
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	4619      	mov	r1, r3
 800599c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10f      	bne.n	80059c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e000      	b.n	80059c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059c6:	2302      	movs	r3, #2
  }
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff fe94 	bl	8005720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b08c      	sub	sp, #48	; 0x30
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b22      	cmp	r3, #34	; 0x22
 8005a14:	f040 80ae 	bne.w	8005b74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a20:	d117      	bne.n	8005a52 <UART_Receive_IT+0x50>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d113      	bne.n	8005a52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	1c9a      	adds	r2, r3, #2
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a50:	e026      	b.n	8005aa0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a64:	d007      	beq.n	8005a76 <UART_Receive_IT+0x74>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <UART_Receive_IT+0x82>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e008      	b.n	8005a96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4619      	mov	r1, r3
 8005aae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d15d      	bne.n	8005b70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0220 	bic.w	r2, r2, #32
 8005ac2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ad2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d135      	bne.n	8005b66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f023 0310 	bic.w	r3, r3, #16
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b20:	623a      	str	r2, [r7, #32]
 8005b22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	69f9      	ldr	r1, [r7, #28]
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e5      	bne.n	8005b00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	d10a      	bne.n	8005b58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7ff fdf9 	bl	8005756 <HAL_UARTEx_RxEventCallback>
 8005b64:	e002      	b.n	8005b6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff fde3 	bl	8005732 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e002      	b.n	8005b76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e000      	b.n	8005b76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b74:	2302      	movs	r3, #2
  }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3730      	adds	r7, #48	; 0x30
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005bba:	f023 030c 	bic.w	r3, r3, #12
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a2c      	ldr	r2, [pc, #176]	; (8005c94 <UART_SetConfig+0x114>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d103      	bne.n	8005bf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fd fdb4 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	e002      	b.n	8005bf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bf0:	f7fd fd9c 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 8005bf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009a      	lsls	r2, r3, #2
 8005c00:	441a      	add	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0c:	4a22      	ldr	r2, [pc, #136]	; (8005c98 <UART_SetConfig+0x118>)
 8005c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	0119      	lsls	r1, r3, #4
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009a      	lsls	r2, r3, #2
 8005c20:	441a      	add	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c2c:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <UART_SetConfig+0x118>)
 8005c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	2064      	movs	r0, #100	; 0x64
 8005c36:	fb00 f303 	mul.w	r3, r0, r3
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	3332      	adds	r3, #50	; 0x32
 8005c40:	4a15      	ldr	r2, [pc, #84]	; (8005c98 <UART_SetConfig+0x118>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c4c:	4419      	add	r1, r3
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009a      	lsls	r2, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <UART_SetConfig+0x118>)
 8005c66:	fba3 0302 	umull	r0, r3, r3, r2
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	2064      	movs	r0, #100	; 0x64
 8005c6e:	fb00 f303 	mul.w	r3, r0, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	3332      	adds	r3, #50	; 0x32
 8005c78:	4a07      	ldr	r2, [pc, #28]	; (8005c98 <UART_SetConfig+0x118>)
 8005c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	f003 020f 	and.w	r2, r3, #15
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	440a      	add	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40013800 	.word	0x40013800
 8005c98:	51eb851f 	.word	0x51eb851f

08005c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	f107 0014 	add.w	r0, r7, #20
 8005caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	b004      	add	sp, #16
 8005cba:	4770      	bx	lr

08005cbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005cc4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005cc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	4013      	ands	r3, r2
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d08:	b084      	sub	sp, #16
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	f107 0014 	add.w	r0, r7, #20
 8005d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	b004      	add	sp, #16
 8005d46:	4770      	bx	lr

08005d48 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <__assert_func>:
 8005d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d5e:	4614      	mov	r4, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <__assert_func+0x2c>)
 8005d64:	4605      	mov	r5, r0
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68d8      	ldr	r0, [r3, #12]
 8005d6a:	b14c      	cbz	r4, 8005d80 <__assert_func+0x24>
 8005d6c:	4b07      	ldr	r3, [pc, #28]	; (8005d8c <__assert_func+0x30>)
 8005d6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d72:	9100      	str	r1, [sp, #0]
 8005d74:	462b      	mov	r3, r5
 8005d76:	4906      	ldr	r1, [pc, #24]	; (8005d90 <__assert_func+0x34>)
 8005d78:	f000 f814 	bl	8005da4 <fiprintf>
 8005d7c:	f002 f8a8 	bl	8007ed0 <abort>
 8005d80:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <__assert_func+0x38>)
 8005d82:	461c      	mov	r4, r3
 8005d84:	e7f3      	b.n	8005d6e <__assert_func+0x12>
 8005d86:	bf00      	nop
 8005d88:	2000004c 	.word	0x2000004c
 8005d8c:	0800a84e 	.word	0x0800a84e
 8005d90:	0800a85b 	.word	0x0800a85b
 8005d94:	0800a889 	.word	0x0800a889

08005d98 <__errno>:
 8005d98:	4b01      	ldr	r3, [pc, #4]	; (8005da0 <__errno+0x8>)
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	2000004c 	.word	0x2000004c

08005da4 <fiprintf>:
 8005da4:	b40e      	push	{r1, r2, r3}
 8005da6:	b503      	push	{r0, r1, lr}
 8005da8:	4601      	mov	r1, r0
 8005daa:	ab03      	add	r3, sp, #12
 8005dac:	4805      	ldr	r0, [pc, #20]	; (8005dc4 <fiprintf+0x20>)
 8005dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	f000 f917 	bl	8005fe8 <_vfiprintf_r>
 8005dba:	b002      	add	sp, #8
 8005dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc0:	b003      	add	sp, #12
 8005dc2:	4770      	bx	lr
 8005dc4:	2000004c 	.word	0x2000004c

08005dc8 <__libc_init_array>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	2600      	movs	r6, #0
 8005dcc:	4d0c      	ldr	r5, [pc, #48]	; (8005e00 <__libc_init_array+0x38>)
 8005dce:	4c0d      	ldr	r4, [pc, #52]	; (8005e04 <__libc_init_array+0x3c>)
 8005dd0:	1b64      	subs	r4, r4, r5
 8005dd2:	10a4      	asrs	r4, r4, #2
 8005dd4:	42a6      	cmp	r6, r4
 8005dd6:	d109      	bne.n	8005dec <__libc_init_array+0x24>
 8005dd8:	f004 fd08 	bl	800a7ec <_init>
 8005ddc:	2600      	movs	r6, #0
 8005dde:	4d0a      	ldr	r5, [pc, #40]	; (8005e08 <__libc_init_array+0x40>)
 8005de0:	4c0a      	ldr	r4, [pc, #40]	; (8005e0c <__libc_init_array+0x44>)
 8005de2:	1b64      	subs	r4, r4, r5
 8005de4:	10a4      	asrs	r4, r4, #2
 8005de6:	42a6      	cmp	r6, r4
 8005de8:	d105      	bne.n	8005df6 <__libc_init_array+0x2e>
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df0:	4798      	blx	r3
 8005df2:	3601      	adds	r6, #1
 8005df4:	e7ee      	b.n	8005dd4 <__libc_init_array+0xc>
 8005df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfa:	4798      	blx	r3
 8005dfc:	3601      	adds	r6, #1
 8005dfe:	e7f2      	b.n	8005de6 <__libc_init_array+0x1e>
 8005e00:	0800ad04 	.word	0x0800ad04
 8005e04:	0800ad04 	.word	0x0800ad04
 8005e08:	0800ad04 	.word	0x0800ad04
 8005e0c:	0800ad08 	.word	0x0800ad08

08005e10 <malloc>:
 8005e10:	4b02      	ldr	r3, [pc, #8]	; (8005e1c <malloc+0xc>)
 8005e12:	4601      	mov	r1, r0
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	f000 b865 	b.w	8005ee4 <_malloc_r>
 8005e1a:	bf00      	nop
 8005e1c:	2000004c 	.word	0x2000004c

08005e20 <memcpy>:
 8005e20:	440a      	add	r2, r1
 8005e22:	4291      	cmp	r1, r2
 8005e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e28:	d100      	bne.n	8005e2c <memcpy+0xc>
 8005e2a:	4770      	bx	lr
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e32:	4291      	cmp	r1, r2
 8005e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e38:	d1f9      	bne.n	8005e2e <memcpy+0xe>
 8005e3a:	bd10      	pop	{r4, pc}

08005e3c <memset>:
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	4402      	add	r2, r0
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d100      	bne.n	8005e46 <memset+0xa>
 8005e44:	4770      	bx	lr
 8005e46:	f803 1b01 	strb.w	r1, [r3], #1
 8005e4a:	e7f9      	b.n	8005e40 <memset+0x4>

08005e4c <_free_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4605      	mov	r5, r0
 8005e50:	2900      	cmp	r1, #0
 8005e52:	d043      	beq.n	8005edc <_free_r+0x90>
 8005e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e58:	1f0c      	subs	r4, r1, #4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bfb8      	it	lt
 8005e5e:	18e4      	addlt	r4, r4, r3
 8005e60:	f003 fc7c 	bl	800975c <__malloc_lock>
 8005e64:	4a1e      	ldr	r2, [pc, #120]	; (8005ee0 <_free_r+0x94>)
 8005e66:	6813      	ldr	r3, [r2, #0]
 8005e68:	4610      	mov	r0, r2
 8005e6a:	b933      	cbnz	r3, 8005e7a <_free_r+0x2e>
 8005e6c:	6063      	str	r3, [r4, #4]
 8005e6e:	6014      	str	r4, [r2, #0]
 8005e70:	4628      	mov	r0, r5
 8005e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e76:	f003 bc77 	b.w	8009768 <__malloc_unlock>
 8005e7a:	42a3      	cmp	r3, r4
 8005e7c:	d90a      	bls.n	8005e94 <_free_r+0x48>
 8005e7e:	6821      	ldr	r1, [r4, #0]
 8005e80:	1862      	adds	r2, r4, r1
 8005e82:	4293      	cmp	r3, r2
 8005e84:	bf01      	itttt	eq
 8005e86:	681a      	ldreq	r2, [r3, #0]
 8005e88:	685b      	ldreq	r3, [r3, #4]
 8005e8a:	1852      	addeq	r2, r2, r1
 8005e8c:	6022      	streq	r2, [r4, #0]
 8005e8e:	6063      	str	r3, [r4, #4]
 8005e90:	6004      	str	r4, [r0, #0]
 8005e92:	e7ed      	b.n	8005e70 <_free_r+0x24>
 8005e94:	461a      	mov	r2, r3
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	b10b      	cbz	r3, 8005e9e <_free_r+0x52>
 8005e9a:	42a3      	cmp	r3, r4
 8005e9c:	d9fa      	bls.n	8005e94 <_free_r+0x48>
 8005e9e:	6811      	ldr	r1, [r2, #0]
 8005ea0:	1850      	adds	r0, r2, r1
 8005ea2:	42a0      	cmp	r0, r4
 8005ea4:	d10b      	bne.n	8005ebe <_free_r+0x72>
 8005ea6:	6820      	ldr	r0, [r4, #0]
 8005ea8:	4401      	add	r1, r0
 8005eaa:	1850      	adds	r0, r2, r1
 8005eac:	4283      	cmp	r3, r0
 8005eae:	6011      	str	r1, [r2, #0]
 8005eb0:	d1de      	bne.n	8005e70 <_free_r+0x24>
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4401      	add	r1, r0
 8005eb8:	6011      	str	r1, [r2, #0]
 8005eba:	6053      	str	r3, [r2, #4]
 8005ebc:	e7d8      	b.n	8005e70 <_free_r+0x24>
 8005ebe:	d902      	bls.n	8005ec6 <_free_r+0x7a>
 8005ec0:	230c      	movs	r3, #12
 8005ec2:	602b      	str	r3, [r5, #0]
 8005ec4:	e7d4      	b.n	8005e70 <_free_r+0x24>
 8005ec6:	6820      	ldr	r0, [r4, #0]
 8005ec8:	1821      	adds	r1, r4, r0
 8005eca:	428b      	cmp	r3, r1
 8005ecc:	bf01      	itttt	eq
 8005ece:	6819      	ldreq	r1, [r3, #0]
 8005ed0:	685b      	ldreq	r3, [r3, #4]
 8005ed2:	1809      	addeq	r1, r1, r0
 8005ed4:	6021      	streq	r1, [r4, #0]
 8005ed6:	6063      	str	r3, [r4, #4]
 8005ed8:	6054      	str	r4, [r2, #4]
 8005eda:	e7c9      	b.n	8005e70 <_free_r+0x24>
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000250 	.word	0x20000250

08005ee4 <_malloc_r>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	1ccd      	adds	r5, r1, #3
 8005ee8:	f025 0503 	bic.w	r5, r5, #3
 8005eec:	3508      	adds	r5, #8
 8005eee:	2d0c      	cmp	r5, #12
 8005ef0:	bf38      	it	cc
 8005ef2:	250c      	movcc	r5, #12
 8005ef4:	2d00      	cmp	r5, #0
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	db01      	blt.n	8005efe <_malloc_r+0x1a>
 8005efa:	42a9      	cmp	r1, r5
 8005efc:	d903      	bls.n	8005f06 <_malloc_r+0x22>
 8005efe:	230c      	movs	r3, #12
 8005f00:	6033      	str	r3, [r6, #0]
 8005f02:	2000      	movs	r0, #0
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f06:	f003 fc29 	bl	800975c <__malloc_lock>
 8005f0a:	4921      	ldr	r1, [pc, #132]	; (8005f90 <_malloc_r+0xac>)
 8005f0c:	680a      	ldr	r2, [r1, #0]
 8005f0e:	4614      	mov	r4, r2
 8005f10:	b99c      	cbnz	r4, 8005f3a <_malloc_r+0x56>
 8005f12:	4f20      	ldr	r7, [pc, #128]	; (8005f94 <_malloc_r+0xb0>)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	b923      	cbnz	r3, 8005f22 <_malloc_r+0x3e>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f001 f806 	bl	8006f2c <_sbrk_r>
 8005f20:	6038      	str	r0, [r7, #0]
 8005f22:	4629      	mov	r1, r5
 8005f24:	4630      	mov	r0, r6
 8005f26:	f001 f801 	bl	8006f2c <_sbrk_r>
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	d123      	bne.n	8005f76 <_malloc_r+0x92>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	4630      	mov	r0, r6
 8005f32:	6033      	str	r3, [r6, #0]
 8005f34:	f003 fc18 	bl	8009768 <__malloc_unlock>
 8005f38:	e7e3      	b.n	8005f02 <_malloc_r+0x1e>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	1b5b      	subs	r3, r3, r5
 8005f3e:	d417      	bmi.n	8005f70 <_malloc_r+0x8c>
 8005f40:	2b0b      	cmp	r3, #11
 8005f42:	d903      	bls.n	8005f4c <_malloc_r+0x68>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	441c      	add	r4, r3
 8005f48:	6025      	str	r5, [r4, #0]
 8005f4a:	e004      	b.n	8005f56 <_malloc_r+0x72>
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	42a2      	cmp	r2, r4
 8005f50:	bf0c      	ite	eq
 8005f52:	600b      	streq	r3, [r1, #0]
 8005f54:	6053      	strne	r3, [r2, #4]
 8005f56:	4630      	mov	r0, r6
 8005f58:	f003 fc06 	bl	8009768 <__malloc_unlock>
 8005f5c:	f104 000b 	add.w	r0, r4, #11
 8005f60:	1d23      	adds	r3, r4, #4
 8005f62:	f020 0007 	bic.w	r0, r0, #7
 8005f66:	1ac2      	subs	r2, r0, r3
 8005f68:	d0cc      	beq.n	8005f04 <_malloc_r+0x20>
 8005f6a:	1a1b      	subs	r3, r3, r0
 8005f6c:	50a3      	str	r3, [r4, r2]
 8005f6e:	e7c9      	b.n	8005f04 <_malloc_r+0x20>
 8005f70:	4622      	mov	r2, r4
 8005f72:	6864      	ldr	r4, [r4, #4]
 8005f74:	e7cc      	b.n	8005f10 <_malloc_r+0x2c>
 8005f76:	1cc4      	adds	r4, r0, #3
 8005f78:	f024 0403 	bic.w	r4, r4, #3
 8005f7c:	42a0      	cmp	r0, r4
 8005f7e:	d0e3      	beq.n	8005f48 <_malloc_r+0x64>
 8005f80:	1a21      	subs	r1, r4, r0
 8005f82:	4630      	mov	r0, r6
 8005f84:	f000 ffd2 	bl	8006f2c <_sbrk_r>
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d1dd      	bne.n	8005f48 <_malloc_r+0x64>
 8005f8c:	e7cf      	b.n	8005f2e <_malloc_r+0x4a>
 8005f8e:	bf00      	nop
 8005f90:	20000250 	.word	0x20000250
 8005f94:	20000254 	.word	0x20000254

08005f98 <__sfputc_r>:
 8005f98:	6893      	ldr	r3, [r2, #8]
 8005f9a:	b410      	push	{r4}
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	6093      	str	r3, [r2, #8]
 8005fa2:	da07      	bge.n	8005fb4 <__sfputc_r+0x1c>
 8005fa4:	6994      	ldr	r4, [r2, #24]
 8005fa6:	42a3      	cmp	r3, r4
 8005fa8:	db01      	blt.n	8005fae <__sfputc_r+0x16>
 8005faa:	290a      	cmp	r1, #10
 8005fac:	d102      	bne.n	8005fb4 <__sfputc_r+0x1c>
 8005fae:	bc10      	pop	{r4}
 8005fb0:	f001 bece 	b.w	8007d50 <__swbuf_r>
 8005fb4:	6813      	ldr	r3, [r2, #0]
 8005fb6:	1c58      	adds	r0, r3, #1
 8005fb8:	6010      	str	r0, [r2, #0]
 8005fba:	7019      	strb	r1, [r3, #0]
 8005fbc:	4608      	mov	r0, r1
 8005fbe:	bc10      	pop	{r4}
 8005fc0:	4770      	bx	lr

08005fc2 <__sfputs_r>:
 8005fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	460f      	mov	r7, r1
 8005fc8:	4614      	mov	r4, r2
 8005fca:	18d5      	adds	r5, r2, r3
 8005fcc:	42ac      	cmp	r4, r5
 8005fce:	d101      	bne.n	8005fd4 <__sfputs_r+0x12>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e007      	b.n	8005fe4 <__sfputs_r+0x22>
 8005fd4:	463a      	mov	r2, r7
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fdc:	f7ff ffdc 	bl	8005f98 <__sfputc_r>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d1f3      	bne.n	8005fcc <__sfputs_r+0xa>
 8005fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fe8 <_vfiprintf_r>:
 8005fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	460d      	mov	r5, r1
 8005fee:	4614      	mov	r4, r2
 8005ff0:	4698      	mov	r8, r3
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	b09d      	sub	sp, #116	; 0x74
 8005ff6:	b118      	cbz	r0, 8006000 <_vfiprintf_r+0x18>
 8005ff8:	6983      	ldr	r3, [r0, #24]
 8005ffa:	b90b      	cbnz	r3, 8006000 <_vfiprintf_r+0x18>
 8005ffc:	f002 ff04 	bl	8008e08 <__sinit>
 8006000:	4b89      	ldr	r3, [pc, #548]	; (8006228 <_vfiprintf_r+0x240>)
 8006002:	429d      	cmp	r5, r3
 8006004:	d11b      	bne.n	800603e <_vfiprintf_r+0x56>
 8006006:	6875      	ldr	r5, [r6, #4]
 8006008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800600a:	07d9      	lsls	r1, r3, #31
 800600c:	d405      	bmi.n	800601a <_vfiprintf_r+0x32>
 800600e:	89ab      	ldrh	r3, [r5, #12]
 8006010:	059a      	lsls	r2, r3, #22
 8006012:	d402      	bmi.n	800601a <_vfiprintf_r+0x32>
 8006014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006016:	f003 fb00 	bl	800961a <__retarget_lock_acquire_recursive>
 800601a:	89ab      	ldrh	r3, [r5, #12]
 800601c:	071b      	lsls	r3, r3, #28
 800601e:	d501      	bpl.n	8006024 <_vfiprintf_r+0x3c>
 8006020:	692b      	ldr	r3, [r5, #16]
 8006022:	b9eb      	cbnz	r3, 8006060 <_vfiprintf_r+0x78>
 8006024:	4629      	mov	r1, r5
 8006026:	4630      	mov	r0, r6
 8006028:	f001 fee4 	bl	8007df4 <__swsetup_r>
 800602c:	b1c0      	cbz	r0, 8006060 <_vfiprintf_r+0x78>
 800602e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006030:	07dc      	lsls	r4, r3, #31
 8006032:	d50e      	bpl.n	8006052 <_vfiprintf_r+0x6a>
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
 8006038:	b01d      	add	sp, #116	; 0x74
 800603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603e:	4b7b      	ldr	r3, [pc, #492]	; (800622c <_vfiprintf_r+0x244>)
 8006040:	429d      	cmp	r5, r3
 8006042:	d101      	bne.n	8006048 <_vfiprintf_r+0x60>
 8006044:	68b5      	ldr	r5, [r6, #8]
 8006046:	e7df      	b.n	8006008 <_vfiprintf_r+0x20>
 8006048:	4b79      	ldr	r3, [pc, #484]	; (8006230 <_vfiprintf_r+0x248>)
 800604a:	429d      	cmp	r5, r3
 800604c:	bf08      	it	eq
 800604e:	68f5      	ldreq	r5, [r6, #12]
 8006050:	e7da      	b.n	8006008 <_vfiprintf_r+0x20>
 8006052:	89ab      	ldrh	r3, [r5, #12]
 8006054:	0598      	lsls	r0, r3, #22
 8006056:	d4ed      	bmi.n	8006034 <_vfiprintf_r+0x4c>
 8006058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800605a:	f003 fadf 	bl	800961c <__retarget_lock_release_recursive>
 800605e:	e7e9      	b.n	8006034 <_vfiprintf_r+0x4c>
 8006060:	2300      	movs	r3, #0
 8006062:	9309      	str	r3, [sp, #36]	; 0x24
 8006064:	2320      	movs	r3, #32
 8006066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800606a:	2330      	movs	r3, #48	; 0x30
 800606c:	f04f 0901 	mov.w	r9, #1
 8006070:	f8cd 800c 	str.w	r8, [sp, #12]
 8006074:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006234 <_vfiprintf_r+0x24c>
 8006078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800607c:	4623      	mov	r3, r4
 800607e:	469a      	mov	sl, r3
 8006080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006084:	b10a      	cbz	r2, 800608a <_vfiprintf_r+0xa2>
 8006086:	2a25      	cmp	r2, #37	; 0x25
 8006088:	d1f9      	bne.n	800607e <_vfiprintf_r+0x96>
 800608a:	ebba 0b04 	subs.w	fp, sl, r4
 800608e:	d00b      	beq.n	80060a8 <_vfiprintf_r+0xc0>
 8006090:	465b      	mov	r3, fp
 8006092:	4622      	mov	r2, r4
 8006094:	4629      	mov	r1, r5
 8006096:	4630      	mov	r0, r6
 8006098:	f7ff ff93 	bl	8005fc2 <__sfputs_r>
 800609c:	3001      	adds	r0, #1
 800609e:	f000 80aa 	beq.w	80061f6 <_vfiprintf_r+0x20e>
 80060a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060a4:	445a      	add	r2, fp
 80060a6:	9209      	str	r2, [sp, #36]	; 0x24
 80060a8:	f89a 3000 	ldrb.w	r3, [sl]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80a2 	beq.w	80061f6 <_vfiprintf_r+0x20e>
 80060b2:	2300      	movs	r3, #0
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295
 80060b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060bc:	f10a 0a01 	add.w	sl, sl, #1
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	9307      	str	r3, [sp, #28]
 80060c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060c8:	931a      	str	r3, [sp, #104]	; 0x68
 80060ca:	4654      	mov	r4, sl
 80060cc:	2205      	movs	r2, #5
 80060ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060d2:	4858      	ldr	r0, [pc, #352]	; (8006234 <_vfiprintf_r+0x24c>)
 80060d4:	f003 fb1a 	bl	800970c <memchr>
 80060d8:	9a04      	ldr	r2, [sp, #16]
 80060da:	b9d8      	cbnz	r0, 8006114 <_vfiprintf_r+0x12c>
 80060dc:	06d1      	lsls	r1, r2, #27
 80060de:	bf44      	itt	mi
 80060e0:	2320      	movmi	r3, #32
 80060e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060e6:	0713      	lsls	r3, r2, #28
 80060e8:	bf44      	itt	mi
 80060ea:	232b      	movmi	r3, #43	; 0x2b
 80060ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060f0:	f89a 3000 	ldrb.w	r3, [sl]
 80060f4:	2b2a      	cmp	r3, #42	; 0x2a
 80060f6:	d015      	beq.n	8006124 <_vfiprintf_r+0x13c>
 80060f8:	4654      	mov	r4, sl
 80060fa:	2000      	movs	r0, #0
 80060fc:	f04f 0c0a 	mov.w	ip, #10
 8006100:	9a07      	ldr	r2, [sp, #28]
 8006102:	4621      	mov	r1, r4
 8006104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006108:	3b30      	subs	r3, #48	; 0x30
 800610a:	2b09      	cmp	r3, #9
 800610c:	d94e      	bls.n	80061ac <_vfiprintf_r+0x1c4>
 800610e:	b1b0      	cbz	r0, 800613e <_vfiprintf_r+0x156>
 8006110:	9207      	str	r2, [sp, #28]
 8006112:	e014      	b.n	800613e <_vfiprintf_r+0x156>
 8006114:	eba0 0308 	sub.w	r3, r0, r8
 8006118:	fa09 f303 	lsl.w	r3, r9, r3
 800611c:	4313      	orrs	r3, r2
 800611e:	46a2      	mov	sl, r4
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	e7d2      	b.n	80060ca <_vfiprintf_r+0xe2>
 8006124:	9b03      	ldr	r3, [sp, #12]
 8006126:	1d19      	adds	r1, r3, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	9103      	str	r1, [sp, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	bfbb      	ittet	lt
 8006130:	425b      	neglt	r3, r3
 8006132:	f042 0202 	orrlt.w	r2, r2, #2
 8006136:	9307      	strge	r3, [sp, #28]
 8006138:	9307      	strlt	r3, [sp, #28]
 800613a:	bfb8      	it	lt
 800613c:	9204      	strlt	r2, [sp, #16]
 800613e:	7823      	ldrb	r3, [r4, #0]
 8006140:	2b2e      	cmp	r3, #46	; 0x2e
 8006142:	d10c      	bne.n	800615e <_vfiprintf_r+0x176>
 8006144:	7863      	ldrb	r3, [r4, #1]
 8006146:	2b2a      	cmp	r3, #42	; 0x2a
 8006148:	d135      	bne.n	80061b6 <_vfiprintf_r+0x1ce>
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	3402      	adds	r4, #2
 800614e:	1d1a      	adds	r2, r3, #4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	9203      	str	r2, [sp, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	bfb8      	it	lt
 8006158:	f04f 33ff 	movlt.w	r3, #4294967295
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006244 <_vfiprintf_r+0x25c>
 8006162:	2203      	movs	r2, #3
 8006164:	4650      	mov	r0, sl
 8006166:	7821      	ldrb	r1, [r4, #0]
 8006168:	f003 fad0 	bl	800970c <memchr>
 800616c:	b140      	cbz	r0, 8006180 <_vfiprintf_r+0x198>
 800616e:	2340      	movs	r3, #64	; 0x40
 8006170:	eba0 000a 	sub.w	r0, r0, sl
 8006174:	fa03 f000 	lsl.w	r0, r3, r0
 8006178:	9b04      	ldr	r3, [sp, #16]
 800617a:	3401      	adds	r4, #1
 800617c:	4303      	orrs	r3, r0
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006184:	2206      	movs	r2, #6
 8006186:	482c      	ldr	r0, [pc, #176]	; (8006238 <_vfiprintf_r+0x250>)
 8006188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800618c:	f003 fabe 	bl	800970c <memchr>
 8006190:	2800      	cmp	r0, #0
 8006192:	d03f      	beq.n	8006214 <_vfiprintf_r+0x22c>
 8006194:	4b29      	ldr	r3, [pc, #164]	; (800623c <_vfiprintf_r+0x254>)
 8006196:	bb1b      	cbnz	r3, 80061e0 <_vfiprintf_r+0x1f8>
 8006198:	9b03      	ldr	r3, [sp, #12]
 800619a:	3307      	adds	r3, #7
 800619c:	f023 0307 	bic.w	r3, r3, #7
 80061a0:	3308      	adds	r3, #8
 80061a2:	9303      	str	r3, [sp, #12]
 80061a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a6:	443b      	add	r3, r7
 80061a8:	9309      	str	r3, [sp, #36]	; 0x24
 80061aa:	e767      	b.n	800607c <_vfiprintf_r+0x94>
 80061ac:	460c      	mov	r4, r1
 80061ae:	2001      	movs	r0, #1
 80061b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80061b4:	e7a5      	b.n	8006102 <_vfiprintf_r+0x11a>
 80061b6:	2300      	movs	r3, #0
 80061b8:	f04f 0c0a 	mov.w	ip, #10
 80061bc:	4619      	mov	r1, r3
 80061be:	3401      	adds	r4, #1
 80061c0:	9305      	str	r3, [sp, #20]
 80061c2:	4620      	mov	r0, r4
 80061c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061c8:	3a30      	subs	r2, #48	; 0x30
 80061ca:	2a09      	cmp	r2, #9
 80061cc:	d903      	bls.n	80061d6 <_vfiprintf_r+0x1ee>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0c5      	beq.n	800615e <_vfiprintf_r+0x176>
 80061d2:	9105      	str	r1, [sp, #20]
 80061d4:	e7c3      	b.n	800615e <_vfiprintf_r+0x176>
 80061d6:	4604      	mov	r4, r0
 80061d8:	2301      	movs	r3, #1
 80061da:	fb0c 2101 	mla	r1, ip, r1, r2
 80061de:	e7f0      	b.n	80061c2 <_vfiprintf_r+0x1da>
 80061e0:	ab03      	add	r3, sp, #12
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	462a      	mov	r2, r5
 80061e6:	4630      	mov	r0, r6
 80061e8:	4b15      	ldr	r3, [pc, #84]	; (8006240 <_vfiprintf_r+0x258>)
 80061ea:	a904      	add	r1, sp, #16
 80061ec:	f000 f8ca 	bl	8006384 <_printf_float>
 80061f0:	4607      	mov	r7, r0
 80061f2:	1c78      	adds	r0, r7, #1
 80061f4:	d1d6      	bne.n	80061a4 <_vfiprintf_r+0x1bc>
 80061f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061f8:	07d9      	lsls	r1, r3, #31
 80061fa:	d405      	bmi.n	8006208 <_vfiprintf_r+0x220>
 80061fc:	89ab      	ldrh	r3, [r5, #12]
 80061fe:	059a      	lsls	r2, r3, #22
 8006200:	d402      	bmi.n	8006208 <_vfiprintf_r+0x220>
 8006202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006204:	f003 fa0a 	bl	800961c <__retarget_lock_release_recursive>
 8006208:	89ab      	ldrh	r3, [r5, #12]
 800620a:	065b      	lsls	r3, r3, #25
 800620c:	f53f af12 	bmi.w	8006034 <_vfiprintf_r+0x4c>
 8006210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006212:	e711      	b.n	8006038 <_vfiprintf_r+0x50>
 8006214:	ab03      	add	r3, sp, #12
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	462a      	mov	r2, r5
 800621a:	4630      	mov	r0, r6
 800621c:	4b08      	ldr	r3, [pc, #32]	; (8006240 <_vfiprintf_r+0x258>)
 800621e:	a904      	add	r1, sp, #16
 8006220:	f000 fb4c 	bl	80068bc <_printf_i>
 8006224:	e7e4      	b.n	80061f0 <_vfiprintf_r+0x208>
 8006226:	bf00      	nop
 8006228:	0800aae8 	.word	0x0800aae8
 800622c:	0800ab08 	.word	0x0800ab08
 8006230:	0800aac8 	.word	0x0800aac8
 8006234:	0800a890 	.word	0x0800a890
 8006238:	0800a89a 	.word	0x0800a89a
 800623c:	08006385 	.word	0x08006385
 8006240:	08005fc3 	.word	0x08005fc3
 8006244:	0800a896 	.word	0x0800a896

08006248 <__cvt>:
 8006248:	2b00      	cmp	r3, #0
 800624a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800624e:	461f      	mov	r7, r3
 8006250:	bfbb      	ittet	lt
 8006252:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006256:	461f      	movlt	r7, r3
 8006258:	2300      	movge	r3, #0
 800625a:	232d      	movlt	r3, #45	; 0x2d
 800625c:	b088      	sub	sp, #32
 800625e:	4614      	mov	r4, r2
 8006260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006262:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006264:	7013      	strb	r3, [r2, #0]
 8006266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006268:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800626c:	f023 0820 	bic.w	r8, r3, #32
 8006270:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006274:	d005      	beq.n	8006282 <__cvt+0x3a>
 8006276:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800627a:	d100      	bne.n	800627e <__cvt+0x36>
 800627c:	3501      	adds	r5, #1
 800627e:	2302      	movs	r3, #2
 8006280:	e000      	b.n	8006284 <__cvt+0x3c>
 8006282:	2303      	movs	r3, #3
 8006284:	aa07      	add	r2, sp, #28
 8006286:	9204      	str	r2, [sp, #16]
 8006288:	aa06      	add	r2, sp, #24
 800628a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800628e:	e9cd 3500 	strd	r3, r5, [sp]
 8006292:	4622      	mov	r2, r4
 8006294:	463b      	mov	r3, r7
 8006296:	f001 feaf 	bl	8007ff8 <_dtoa_r>
 800629a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800629e:	4606      	mov	r6, r0
 80062a0:	d102      	bne.n	80062a8 <__cvt+0x60>
 80062a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062a4:	07db      	lsls	r3, r3, #31
 80062a6:	d522      	bpl.n	80062ee <__cvt+0xa6>
 80062a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062ac:	eb06 0905 	add.w	r9, r6, r5
 80062b0:	d110      	bne.n	80062d4 <__cvt+0x8c>
 80062b2:	7833      	ldrb	r3, [r6, #0]
 80062b4:	2b30      	cmp	r3, #48	; 0x30
 80062b6:	d10a      	bne.n	80062ce <__cvt+0x86>
 80062b8:	2200      	movs	r2, #0
 80062ba:	2300      	movs	r3, #0
 80062bc:	4620      	mov	r0, r4
 80062be:	4639      	mov	r1, r7
 80062c0:	f7fa fb72 	bl	80009a8 <__aeabi_dcmpeq>
 80062c4:	b918      	cbnz	r0, 80062ce <__cvt+0x86>
 80062c6:	f1c5 0501 	rsb	r5, r5, #1
 80062ca:	f8ca 5000 	str.w	r5, [sl]
 80062ce:	f8da 3000 	ldr.w	r3, [sl]
 80062d2:	4499      	add	r9, r3
 80062d4:	2200      	movs	r2, #0
 80062d6:	2300      	movs	r3, #0
 80062d8:	4620      	mov	r0, r4
 80062da:	4639      	mov	r1, r7
 80062dc:	f7fa fb64 	bl	80009a8 <__aeabi_dcmpeq>
 80062e0:	b108      	cbz	r0, 80062e6 <__cvt+0x9e>
 80062e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80062e6:	2230      	movs	r2, #48	; 0x30
 80062e8:	9b07      	ldr	r3, [sp, #28]
 80062ea:	454b      	cmp	r3, r9
 80062ec:	d307      	bcc.n	80062fe <__cvt+0xb6>
 80062ee:	4630      	mov	r0, r6
 80062f0:	9b07      	ldr	r3, [sp, #28]
 80062f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062f4:	1b9b      	subs	r3, r3, r6
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	b008      	add	sp, #32
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	1c59      	adds	r1, r3, #1
 8006300:	9107      	str	r1, [sp, #28]
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	e7f0      	b.n	80062e8 <__cvt+0xa0>

08006306 <__exponent>:
 8006306:	4603      	mov	r3, r0
 8006308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800630a:	2900      	cmp	r1, #0
 800630c:	f803 2b02 	strb.w	r2, [r3], #2
 8006310:	bfb6      	itet	lt
 8006312:	222d      	movlt	r2, #45	; 0x2d
 8006314:	222b      	movge	r2, #43	; 0x2b
 8006316:	4249      	neglt	r1, r1
 8006318:	2909      	cmp	r1, #9
 800631a:	7042      	strb	r2, [r0, #1]
 800631c:	dd2b      	ble.n	8006376 <__exponent+0x70>
 800631e:	f10d 0407 	add.w	r4, sp, #7
 8006322:	46a4      	mov	ip, r4
 8006324:	270a      	movs	r7, #10
 8006326:	fb91 f6f7 	sdiv	r6, r1, r7
 800632a:	460a      	mov	r2, r1
 800632c:	46a6      	mov	lr, r4
 800632e:	fb07 1516 	mls	r5, r7, r6, r1
 8006332:	2a63      	cmp	r2, #99	; 0x63
 8006334:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006338:	4631      	mov	r1, r6
 800633a:	f104 34ff 	add.w	r4, r4, #4294967295
 800633e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006342:	dcf0      	bgt.n	8006326 <__exponent+0x20>
 8006344:	3130      	adds	r1, #48	; 0x30
 8006346:	f1ae 0502 	sub.w	r5, lr, #2
 800634a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800634e:	4629      	mov	r1, r5
 8006350:	1c44      	adds	r4, r0, #1
 8006352:	4561      	cmp	r1, ip
 8006354:	d30a      	bcc.n	800636c <__exponent+0x66>
 8006356:	f10d 0209 	add.w	r2, sp, #9
 800635a:	eba2 020e 	sub.w	r2, r2, lr
 800635e:	4565      	cmp	r5, ip
 8006360:	bf88      	it	hi
 8006362:	2200      	movhi	r2, #0
 8006364:	4413      	add	r3, r2
 8006366:	1a18      	subs	r0, r3, r0
 8006368:	b003      	add	sp, #12
 800636a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006370:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006374:	e7ed      	b.n	8006352 <__exponent+0x4c>
 8006376:	2330      	movs	r3, #48	; 0x30
 8006378:	3130      	adds	r1, #48	; 0x30
 800637a:	7083      	strb	r3, [r0, #2]
 800637c:	70c1      	strb	r1, [r0, #3]
 800637e:	1d03      	adds	r3, r0, #4
 8006380:	e7f1      	b.n	8006366 <__exponent+0x60>
	...

08006384 <_printf_float>:
 8006384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	b091      	sub	sp, #68	; 0x44
 800638a:	460c      	mov	r4, r1
 800638c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006390:	4616      	mov	r6, r2
 8006392:	461f      	mov	r7, r3
 8006394:	4605      	mov	r5, r0
 8006396:	f003 f93b 	bl	8009610 <_localeconv_r>
 800639a:	6803      	ldr	r3, [r0, #0]
 800639c:	4618      	mov	r0, r3
 800639e:	9309      	str	r3, [sp, #36]	; 0x24
 80063a0:	f7f9 fed6 	bl	8000150 <strlen>
 80063a4:	2300      	movs	r3, #0
 80063a6:	930e      	str	r3, [sp, #56]	; 0x38
 80063a8:	f8d8 3000 	ldr.w	r3, [r8]
 80063ac:	900a      	str	r0, [sp, #40]	; 0x28
 80063ae:	3307      	adds	r3, #7
 80063b0:	f023 0307 	bic.w	r3, r3, #7
 80063b4:	f103 0208 	add.w	r2, r3, #8
 80063b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063bc:	f8d4 b000 	ldr.w	fp, [r4]
 80063c0:	f8c8 2000 	str.w	r2, [r8]
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063cc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80063d0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80063d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063d6:	f04f 32ff 	mov.w	r2, #4294967295
 80063da:	4640      	mov	r0, r8
 80063dc:	4b9c      	ldr	r3, [pc, #624]	; (8006650 <_printf_float+0x2cc>)
 80063de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063e0:	f7fa fb14 	bl	8000a0c <__aeabi_dcmpun>
 80063e4:	bb70      	cbnz	r0, 8006444 <_printf_float+0xc0>
 80063e6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ea:	4640      	mov	r0, r8
 80063ec:	4b98      	ldr	r3, [pc, #608]	; (8006650 <_printf_float+0x2cc>)
 80063ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063f0:	f7fa faee 	bl	80009d0 <__aeabi_dcmple>
 80063f4:	bb30      	cbnz	r0, 8006444 <_printf_float+0xc0>
 80063f6:	2200      	movs	r2, #0
 80063f8:	2300      	movs	r3, #0
 80063fa:	4640      	mov	r0, r8
 80063fc:	4651      	mov	r1, sl
 80063fe:	f7fa fadd 	bl	80009bc <__aeabi_dcmplt>
 8006402:	b110      	cbz	r0, 800640a <_printf_float+0x86>
 8006404:	232d      	movs	r3, #45	; 0x2d
 8006406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640a:	4b92      	ldr	r3, [pc, #584]	; (8006654 <_printf_float+0x2d0>)
 800640c:	4892      	ldr	r0, [pc, #584]	; (8006658 <_printf_float+0x2d4>)
 800640e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006412:	bf94      	ite	ls
 8006414:	4698      	movls	r8, r3
 8006416:	4680      	movhi	r8, r0
 8006418:	2303      	movs	r3, #3
 800641a:	f04f 0a00 	mov.w	sl, #0
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	f02b 0304 	bic.w	r3, fp, #4
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	4633      	mov	r3, r6
 8006428:	4621      	mov	r1, r4
 800642a:	4628      	mov	r0, r5
 800642c:	9700      	str	r7, [sp, #0]
 800642e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006430:	f000 f9d4 	bl	80067dc <_printf_common>
 8006434:	3001      	adds	r0, #1
 8006436:	f040 8090 	bne.w	800655a <_printf_float+0x1d6>
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	b011      	add	sp, #68	; 0x44
 8006440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006444:	4642      	mov	r2, r8
 8006446:	4653      	mov	r3, sl
 8006448:	4640      	mov	r0, r8
 800644a:	4651      	mov	r1, sl
 800644c:	f7fa fade 	bl	8000a0c <__aeabi_dcmpun>
 8006450:	b148      	cbz	r0, 8006466 <_printf_float+0xe2>
 8006452:	f1ba 0f00 	cmp.w	sl, #0
 8006456:	bfb8      	it	lt
 8006458:	232d      	movlt	r3, #45	; 0x2d
 800645a:	4880      	ldr	r0, [pc, #512]	; (800665c <_printf_float+0x2d8>)
 800645c:	bfb8      	it	lt
 800645e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006462:	4b7f      	ldr	r3, [pc, #508]	; (8006660 <_printf_float+0x2dc>)
 8006464:	e7d3      	b.n	800640e <_printf_float+0x8a>
 8006466:	6863      	ldr	r3, [r4, #4]
 8006468:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	d142      	bne.n	80064f6 <_printf_float+0x172>
 8006470:	2306      	movs	r3, #6
 8006472:	6063      	str	r3, [r4, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	9206      	str	r2, [sp, #24]
 8006478:	aa0e      	add	r2, sp, #56	; 0x38
 800647a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800647e:	aa0d      	add	r2, sp, #52	; 0x34
 8006480:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006484:	9203      	str	r2, [sp, #12]
 8006486:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800648a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	6863      	ldr	r3, [r4, #4]
 8006492:	4642      	mov	r2, r8
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4628      	mov	r0, r5
 8006498:	4653      	mov	r3, sl
 800649a:	910b      	str	r1, [sp, #44]	; 0x2c
 800649c:	f7ff fed4 	bl	8006248 <__cvt>
 80064a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064a2:	4680      	mov	r8, r0
 80064a4:	2947      	cmp	r1, #71	; 0x47
 80064a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064a8:	d108      	bne.n	80064bc <_printf_float+0x138>
 80064aa:	1cc8      	adds	r0, r1, #3
 80064ac:	db02      	blt.n	80064b4 <_printf_float+0x130>
 80064ae:	6863      	ldr	r3, [r4, #4]
 80064b0:	4299      	cmp	r1, r3
 80064b2:	dd40      	ble.n	8006536 <_printf_float+0x1b2>
 80064b4:	f1a9 0902 	sub.w	r9, r9, #2
 80064b8:	fa5f f989 	uxtb.w	r9, r9
 80064bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064c0:	d81f      	bhi.n	8006502 <_printf_float+0x17e>
 80064c2:	464a      	mov	r2, r9
 80064c4:	3901      	subs	r1, #1
 80064c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064ca:	910d      	str	r1, [sp, #52]	; 0x34
 80064cc:	f7ff ff1b 	bl	8006306 <__exponent>
 80064d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d2:	4682      	mov	sl, r0
 80064d4:	1813      	adds	r3, r2, r0
 80064d6:	2a01      	cmp	r2, #1
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	dc02      	bgt.n	80064e2 <_printf_float+0x15e>
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	07d2      	lsls	r2, r2, #31
 80064e0:	d501      	bpl.n	80064e6 <_printf_float+0x162>
 80064e2:	3301      	adds	r3, #1
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d09b      	beq.n	8006426 <_printf_float+0xa2>
 80064ee:	232d      	movs	r3, #45	; 0x2d
 80064f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f4:	e797      	b.n	8006426 <_printf_float+0xa2>
 80064f6:	2947      	cmp	r1, #71	; 0x47
 80064f8:	d1bc      	bne.n	8006474 <_printf_float+0xf0>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1ba      	bne.n	8006474 <_printf_float+0xf0>
 80064fe:	2301      	movs	r3, #1
 8006500:	e7b7      	b.n	8006472 <_printf_float+0xee>
 8006502:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006506:	d118      	bne.n	800653a <_printf_float+0x1b6>
 8006508:	2900      	cmp	r1, #0
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	dd0b      	ble.n	8006526 <_printf_float+0x1a2>
 800650e:	6121      	str	r1, [r4, #16]
 8006510:	b913      	cbnz	r3, 8006518 <_printf_float+0x194>
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	07d0      	lsls	r0, r2, #31
 8006516:	d502      	bpl.n	800651e <_printf_float+0x19a>
 8006518:	3301      	adds	r3, #1
 800651a:	440b      	add	r3, r1
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	f04f 0a00 	mov.w	sl, #0
 8006522:	65a1      	str	r1, [r4, #88]	; 0x58
 8006524:	e7df      	b.n	80064e6 <_printf_float+0x162>
 8006526:	b913      	cbnz	r3, 800652e <_printf_float+0x1aa>
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	07d2      	lsls	r2, r2, #31
 800652c:	d501      	bpl.n	8006532 <_printf_float+0x1ae>
 800652e:	3302      	adds	r3, #2
 8006530:	e7f4      	b.n	800651c <_printf_float+0x198>
 8006532:	2301      	movs	r3, #1
 8006534:	e7f2      	b.n	800651c <_printf_float+0x198>
 8006536:	f04f 0967 	mov.w	r9, #103	; 0x67
 800653a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800653c:	4299      	cmp	r1, r3
 800653e:	db05      	blt.n	800654c <_printf_float+0x1c8>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	6121      	str	r1, [r4, #16]
 8006544:	07d8      	lsls	r0, r3, #31
 8006546:	d5ea      	bpl.n	800651e <_printf_float+0x19a>
 8006548:	1c4b      	adds	r3, r1, #1
 800654a:	e7e7      	b.n	800651c <_printf_float+0x198>
 800654c:	2900      	cmp	r1, #0
 800654e:	bfcc      	ite	gt
 8006550:	2201      	movgt	r2, #1
 8006552:	f1c1 0202 	rsble	r2, r1, #2
 8006556:	4413      	add	r3, r2
 8006558:	e7e0      	b.n	800651c <_printf_float+0x198>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	055a      	lsls	r2, r3, #21
 800655e:	d407      	bmi.n	8006570 <_printf_float+0x1ec>
 8006560:	6923      	ldr	r3, [r4, #16]
 8006562:	4642      	mov	r2, r8
 8006564:	4631      	mov	r1, r6
 8006566:	4628      	mov	r0, r5
 8006568:	47b8      	blx	r7
 800656a:	3001      	adds	r0, #1
 800656c:	d12b      	bne.n	80065c6 <_printf_float+0x242>
 800656e:	e764      	b.n	800643a <_printf_float+0xb6>
 8006570:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006574:	f240 80dd 	bls.w	8006732 <_printf_float+0x3ae>
 8006578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800657c:	2200      	movs	r2, #0
 800657e:	2300      	movs	r3, #0
 8006580:	f7fa fa12 	bl	80009a8 <__aeabi_dcmpeq>
 8006584:	2800      	cmp	r0, #0
 8006586:	d033      	beq.n	80065f0 <_printf_float+0x26c>
 8006588:	2301      	movs	r3, #1
 800658a:	4631      	mov	r1, r6
 800658c:	4628      	mov	r0, r5
 800658e:	4a35      	ldr	r2, [pc, #212]	; (8006664 <_printf_float+0x2e0>)
 8006590:	47b8      	blx	r7
 8006592:	3001      	adds	r0, #1
 8006594:	f43f af51 	beq.w	800643a <_printf_float+0xb6>
 8006598:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800659c:	429a      	cmp	r2, r3
 800659e:	db02      	blt.n	80065a6 <_printf_float+0x222>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	07d8      	lsls	r0, r3, #31
 80065a4:	d50f      	bpl.n	80065c6 <_printf_float+0x242>
 80065a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f af42 	beq.w	800643a <_printf_float+0xb6>
 80065b6:	f04f 0800 	mov.w	r8, #0
 80065ba:	f104 091a 	add.w	r9, r4, #26
 80065be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065c0:	3b01      	subs	r3, #1
 80065c2:	4543      	cmp	r3, r8
 80065c4:	dc09      	bgt.n	80065da <_printf_float+0x256>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	079b      	lsls	r3, r3, #30
 80065ca:	f100 8102 	bmi.w	80067d2 <_printf_float+0x44e>
 80065ce:	68e0      	ldr	r0, [r4, #12]
 80065d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065d2:	4298      	cmp	r0, r3
 80065d4:	bfb8      	it	lt
 80065d6:	4618      	movlt	r0, r3
 80065d8:	e731      	b.n	800643e <_printf_float+0xba>
 80065da:	2301      	movs	r3, #1
 80065dc:	464a      	mov	r2, r9
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f af28 	beq.w	800643a <_printf_float+0xb6>
 80065ea:	f108 0801 	add.w	r8, r8, #1
 80065ee:	e7e6      	b.n	80065be <_printf_float+0x23a>
 80065f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	dc38      	bgt.n	8006668 <_printf_float+0x2e4>
 80065f6:	2301      	movs	r3, #1
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	4a19      	ldr	r2, [pc, #100]	; (8006664 <_printf_float+0x2e0>)
 80065fe:	47b8      	blx	r7
 8006600:	3001      	adds	r0, #1
 8006602:	f43f af1a 	beq.w	800643a <_printf_float+0xb6>
 8006606:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800660a:	4313      	orrs	r3, r2
 800660c:	d102      	bne.n	8006614 <_printf_float+0x290>
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	07d9      	lsls	r1, r3, #31
 8006612:	d5d8      	bpl.n	80065c6 <_printf_float+0x242>
 8006614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f af0b 	beq.w	800643a <_printf_float+0xb6>
 8006624:	f04f 0900 	mov.w	r9, #0
 8006628:	f104 0a1a 	add.w	sl, r4, #26
 800662c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800662e:	425b      	negs	r3, r3
 8006630:	454b      	cmp	r3, r9
 8006632:	dc01      	bgt.n	8006638 <_printf_float+0x2b4>
 8006634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006636:	e794      	b.n	8006562 <_printf_float+0x1de>
 8006638:	2301      	movs	r3, #1
 800663a:	4652      	mov	r2, sl
 800663c:	4631      	mov	r1, r6
 800663e:	4628      	mov	r0, r5
 8006640:	47b8      	blx	r7
 8006642:	3001      	adds	r0, #1
 8006644:	f43f aef9 	beq.w	800643a <_printf_float+0xb6>
 8006648:	f109 0901 	add.w	r9, r9, #1
 800664c:	e7ee      	b.n	800662c <_printf_float+0x2a8>
 800664e:	bf00      	nop
 8006650:	7fefffff 	.word	0x7fefffff
 8006654:	0800a8a1 	.word	0x0800a8a1
 8006658:	0800a8a5 	.word	0x0800a8a5
 800665c:	0800a8ad 	.word	0x0800a8ad
 8006660:	0800a8a9 	.word	0x0800a8a9
 8006664:	0800a8b1 	.word	0x0800a8b1
 8006668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800666a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800666c:	429a      	cmp	r2, r3
 800666e:	bfa8      	it	ge
 8006670:	461a      	movge	r2, r3
 8006672:	2a00      	cmp	r2, #0
 8006674:	4691      	mov	r9, r2
 8006676:	dc37      	bgt.n	80066e8 <_printf_float+0x364>
 8006678:	f04f 0b00 	mov.w	fp, #0
 800667c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006680:	f104 021a 	add.w	r2, r4, #26
 8006684:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006688:	ebaa 0309 	sub.w	r3, sl, r9
 800668c:	455b      	cmp	r3, fp
 800668e:	dc33      	bgt.n	80066f8 <_printf_float+0x374>
 8006690:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006694:	429a      	cmp	r2, r3
 8006696:	db3b      	blt.n	8006710 <_printf_float+0x38c>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	07da      	lsls	r2, r3, #31
 800669c:	d438      	bmi.n	8006710 <_printf_float+0x38c>
 800669e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066a2:	eba2 030a 	sub.w	r3, r2, sl
 80066a6:	eba2 0901 	sub.w	r9, r2, r1
 80066aa:	4599      	cmp	r9, r3
 80066ac:	bfa8      	it	ge
 80066ae:	4699      	movge	r9, r3
 80066b0:	f1b9 0f00 	cmp.w	r9, #0
 80066b4:	dc34      	bgt.n	8006720 <_printf_float+0x39c>
 80066b6:	f04f 0800 	mov.w	r8, #0
 80066ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066be:	f104 0a1a 	add.w	sl, r4, #26
 80066c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066c6:	1a9b      	subs	r3, r3, r2
 80066c8:	eba3 0309 	sub.w	r3, r3, r9
 80066cc:	4543      	cmp	r3, r8
 80066ce:	f77f af7a 	ble.w	80065c6 <_printf_float+0x242>
 80066d2:	2301      	movs	r3, #1
 80066d4:	4652      	mov	r2, sl
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	f43f aeac 	beq.w	800643a <_printf_float+0xb6>
 80066e2:	f108 0801 	add.w	r8, r8, #1
 80066e6:	e7ec      	b.n	80066c2 <_printf_float+0x33e>
 80066e8:	4613      	mov	r3, r2
 80066ea:	4631      	mov	r1, r6
 80066ec:	4642      	mov	r2, r8
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	d1c0      	bne.n	8006678 <_printf_float+0x2f4>
 80066f6:	e6a0      	b.n	800643a <_printf_float+0xb6>
 80066f8:	2301      	movs	r3, #1
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8006700:	47b8      	blx	r7
 8006702:	3001      	adds	r0, #1
 8006704:	f43f ae99 	beq.w	800643a <_printf_float+0xb6>
 8006708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800670a:	f10b 0b01 	add.w	fp, fp, #1
 800670e:	e7b9      	b.n	8006684 <_printf_float+0x300>
 8006710:	4631      	mov	r1, r6
 8006712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	d1bf      	bne.n	800669e <_printf_float+0x31a>
 800671e:	e68c      	b.n	800643a <_printf_float+0xb6>
 8006720:	464b      	mov	r3, r9
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	eb08 020a 	add.w	r2, r8, sl
 800672a:	47b8      	blx	r7
 800672c:	3001      	adds	r0, #1
 800672e:	d1c2      	bne.n	80066b6 <_printf_float+0x332>
 8006730:	e683      	b.n	800643a <_printf_float+0xb6>
 8006732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006734:	2a01      	cmp	r2, #1
 8006736:	dc01      	bgt.n	800673c <_printf_float+0x3b8>
 8006738:	07db      	lsls	r3, r3, #31
 800673a:	d537      	bpl.n	80067ac <_printf_float+0x428>
 800673c:	2301      	movs	r3, #1
 800673e:	4642      	mov	r2, r8
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f ae77 	beq.w	800643a <_printf_float+0xb6>
 800674c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	f43f ae6f 	beq.w	800643a <_printf_float+0xb6>
 800675c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006760:	2200      	movs	r2, #0
 8006762:	2300      	movs	r3, #0
 8006764:	f7fa f920 	bl	80009a8 <__aeabi_dcmpeq>
 8006768:	b9d8      	cbnz	r0, 80067a2 <_printf_float+0x41e>
 800676a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800676c:	f108 0201 	add.w	r2, r8, #1
 8006770:	3b01      	subs	r3, #1
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	d10e      	bne.n	800679a <_printf_float+0x416>
 800677c:	e65d      	b.n	800643a <_printf_float+0xb6>
 800677e:	2301      	movs	r3, #1
 8006780:	464a      	mov	r2, r9
 8006782:	4631      	mov	r1, r6
 8006784:	4628      	mov	r0, r5
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	f43f ae56 	beq.w	800643a <_printf_float+0xb6>
 800678e:	f108 0801 	add.w	r8, r8, #1
 8006792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006794:	3b01      	subs	r3, #1
 8006796:	4543      	cmp	r3, r8
 8006798:	dcf1      	bgt.n	800677e <_printf_float+0x3fa>
 800679a:	4653      	mov	r3, sl
 800679c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067a0:	e6e0      	b.n	8006564 <_printf_float+0x1e0>
 80067a2:	f04f 0800 	mov.w	r8, #0
 80067a6:	f104 091a 	add.w	r9, r4, #26
 80067aa:	e7f2      	b.n	8006792 <_printf_float+0x40e>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4642      	mov	r2, r8
 80067b0:	e7df      	b.n	8006772 <_printf_float+0x3ee>
 80067b2:	2301      	movs	r3, #1
 80067b4:	464a      	mov	r2, r9
 80067b6:	4631      	mov	r1, r6
 80067b8:	4628      	mov	r0, r5
 80067ba:	47b8      	blx	r7
 80067bc:	3001      	adds	r0, #1
 80067be:	f43f ae3c 	beq.w	800643a <_printf_float+0xb6>
 80067c2:	f108 0801 	add.w	r8, r8, #1
 80067c6:	68e3      	ldr	r3, [r4, #12]
 80067c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067ca:	1a5b      	subs	r3, r3, r1
 80067cc:	4543      	cmp	r3, r8
 80067ce:	dcf0      	bgt.n	80067b2 <_printf_float+0x42e>
 80067d0:	e6fd      	b.n	80065ce <_printf_float+0x24a>
 80067d2:	f04f 0800 	mov.w	r8, #0
 80067d6:	f104 0919 	add.w	r9, r4, #25
 80067da:	e7f4      	b.n	80067c6 <_printf_float+0x442>

080067dc <_printf_common>:
 80067dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	4616      	mov	r6, r2
 80067e2:	4699      	mov	r9, r3
 80067e4:	688a      	ldr	r2, [r1, #8]
 80067e6:	690b      	ldr	r3, [r1, #16]
 80067e8:	4607      	mov	r7, r0
 80067ea:	4293      	cmp	r3, r2
 80067ec:	bfb8      	it	lt
 80067ee:	4613      	movlt	r3, r2
 80067f0:	6033      	str	r3, [r6, #0]
 80067f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067f6:	460c      	mov	r4, r1
 80067f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067fc:	b10a      	cbz	r2, 8006802 <_printf_common+0x26>
 80067fe:	3301      	adds	r3, #1
 8006800:	6033      	str	r3, [r6, #0]
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	0699      	lsls	r1, r3, #26
 8006806:	bf42      	ittt	mi
 8006808:	6833      	ldrmi	r3, [r6, #0]
 800680a:	3302      	addmi	r3, #2
 800680c:	6033      	strmi	r3, [r6, #0]
 800680e:	6825      	ldr	r5, [r4, #0]
 8006810:	f015 0506 	ands.w	r5, r5, #6
 8006814:	d106      	bne.n	8006824 <_printf_common+0x48>
 8006816:	f104 0a19 	add.w	sl, r4, #25
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	6832      	ldr	r2, [r6, #0]
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	42ab      	cmp	r3, r5
 8006822:	dc28      	bgt.n	8006876 <_printf_common+0x9a>
 8006824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006828:	1e13      	subs	r3, r2, #0
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	bf18      	it	ne
 800682e:	2301      	movne	r3, #1
 8006830:	0692      	lsls	r2, r2, #26
 8006832:	d42d      	bmi.n	8006890 <_printf_common+0xb4>
 8006834:	4649      	mov	r1, r9
 8006836:	4638      	mov	r0, r7
 8006838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800683c:	47c0      	blx	r8
 800683e:	3001      	adds	r0, #1
 8006840:	d020      	beq.n	8006884 <_printf_common+0xa8>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	68e5      	ldr	r5, [r4, #12]
 8006846:	f003 0306 	and.w	r3, r3, #6
 800684a:	2b04      	cmp	r3, #4
 800684c:	bf18      	it	ne
 800684e:	2500      	movne	r5, #0
 8006850:	6832      	ldr	r2, [r6, #0]
 8006852:	f04f 0600 	mov.w	r6, #0
 8006856:	68a3      	ldr	r3, [r4, #8]
 8006858:	bf08      	it	eq
 800685a:	1aad      	subeq	r5, r5, r2
 800685c:	6922      	ldr	r2, [r4, #16]
 800685e:	bf08      	it	eq
 8006860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006864:	4293      	cmp	r3, r2
 8006866:	bfc4      	itt	gt
 8006868:	1a9b      	subgt	r3, r3, r2
 800686a:	18ed      	addgt	r5, r5, r3
 800686c:	341a      	adds	r4, #26
 800686e:	42b5      	cmp	r5, r6
 8006870:	d11a      	bne.n	80068a8 <_printf_common+0xcc>
 8006872:	2000      	movs	r0, #0
 8006874:	e008      	b.n	8006888 <_printf_common+0xac>
 8006876:	2301      	movs	r3, #1
 8006878:	4652      	mov	r2, sl
 800687a:	4649      	mov	r1, r9
 800687c:	4638      	mov	r0, r7
 800687e:	47c0      	blx	r8
 8006880:	3001      	adds	r0, #1
 8006882:	d103      	bne.n	800688c <_printf_common+0xb0>
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688c:	3501      	adds	r5, #1
 800688e:	e7c4      	b.n	800681a <_printf_common+0x3e>
 8006890:	2030      	movs	r0, #48	; 0x30
 8006892:	18e1      	adds	r1, r4, r3
 8006894:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800689e:	4422      	add	r2, r4
 80068a0:	3302      	adds	r3, #2
 80068a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068a6:	e7c5      	b.n	8006834 <_printf_common+0x58>
 80068a8:	2301      	movs	r3, #1
 80068aa:	4622      	mov	r2, r4
 80068ac:	4649      	mov	r1, r9
 80068ae:	4638      	mov	r0, r7
 80068b0:	47c0      	blx	r8
 80068b2:	3001      	adds	r0, #1
 80068b4:	d0e6      	beq.n	8006884 <_printf_common+0xa8>
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7d9      	b.n	800686e <_printf_common+0x92>
	...

080068bc <_printf_i>:
 80068bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068c0:	460c      	mov	r4, r1
 80068c2:	7e27      	ldrb	r7, [r4, #24]
 80068c4:	4691      	mov	r9, r2
 80068c6:	2f78      	cmp	r7, #120	; 0x78
 80068c8:	4680      	mov	r8, r0
 80068ca:	469a      	mov	sl, r3
 80068cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068d2:	d807      	bhi.n	80068e4 <_printf_i+0x28>
 80068d4:	2f62      	cmp	r7, #98	; 0x62
 80068d6:	d80a      	bhi.n	80068ee <_printf_i+0x32>
 80068d8:	2f00      	cmp	r7, #0
 80068da:	f000 80d9 	beq.w	8006a90 <_printf_i+0x1d4>
 80068de:	2f58      	cmp	r7, #88	; 0x58
 80068e0:	f000 80a4 	beq.w	8006a2c <_printf_i+0x170>
 80068e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068ec:	e03a      	b.n	8006964 <_printf_i+0xa8>
 80068ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068f2:	2b15      	cmp	r3, #21
 80068f4:	d8f6      	bhi.n	80068e4 <_printf_i+0x28>
 80068f6:	a001      	add	r0, pc, #4	; (adr r0, 80068fc <_printf_i+0x40>)
 80068f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068fc:	08006955 	.word	0x08006955
 8006900:	08006969 	.word	0x08006969
 8006904:	080068e5 	.word	0x080068e5
 8006908:	080068e5 	.word	0x080068e5
 800690c:	080068e5 	.word	0x080068e5
 8006910:	080068e5 	.word	0x080068e5
 8006914:	08006969 	.word	0x08006969
 8006918:	080068e5 	.word	0x080068e5
 800691c:	080068e5 	.word	0x080068e5
 8006920:	080068e5 	.word	0x080068e5
 8006924:	080068e5 	.word	0x080068e5
 8006928:	08006a77 	.word	0x08006a77
 800692c:	08006999 	.word	0x08006999
 8006930:	08006a59 	.word	0x08006a59
 8006934:	080068e5 	.word	0x080068e5
 8006938:	080068e5 	.word	0x080068e5
 800693c:	08006a99 	.word	0x08006a99
 8006940:	080068e5 	.word	0x080068e5
 8006944:	08006999 	.word	0x08006999
 8006948:	080068e5 	.word	0x080068e5
 800694c:	080068e5 	.word	0x080068e5
 8006950:	08006a61 	.word	0x08006a61
 8006954:	680b      	ldr	r3, [r1, #0]
 8006956:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800695a:	1d1a      	adds	r2, r3, #4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	600a      	str	r2, [r1, #0]
 8006960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006964:	2301      	movs	r3, #1
 8006966:	e0a4      	b.n	8006ab2 <_printf_i+0x1f6>
 8006968:	6825      	ldr	r5, [r4, #0]
 800696a:	6808      	ldr	r0, [r1, #0]
 800696c:	062e      	lsls	r6, r5, #24
 800696e:	f100 0304 	add.w	r3, r0, #4
 8006972:	d50a      	bpl.n	800698a <_printf_i+0xce>
 8006974:	6805      	ldr	r5, [r0, #0]
 8006976:	600b      	str	r3, [r1, #0]
 8006978:	2d00      	cmp	r5, #0
 800697a:	da03      	bge.n	8006984 <_printf_i+0xc8>
 800697c:	232d      	movs	r3, #45	; 0x2d
 800697e:	426d      	negs	r5, r5
 8006980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006984:	230a      	movs	r3, #10
 8006986:	485e      	ldr	r0, [pc, #376]	; (8006b00 <_printf_i+0x244>)
 8006988:	e019      	b.n	80069be <_printf_i+0x102>
 800698a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800698e:	6805      	ldr	r5, [r0, #0]
 8006990:	600b      	str	r3, [r1, #0]
 8006992:	bf18      	it	ne
 8006994:	b22d      	sxthne	r5, r5
 8006996:	e7ef      	b.n	8006978 <_printf_i+0xbc>
 8006998:	680b      	ldr	r3, [r1, #0]
 800699a:	6825      	ldr	r5, [r4, #0]
 800699c:	1d18      	adds	r0, r3, #4
 800699e:	6008      	str	r0, [r1, #0]
 80069a0:	0628      	lsls	r0, r5, #24
 80069a2:	d501      	bpl.n	80069a8 <_printf_i+0xec>
 80069a4:	681d      	ldr	r5, [r3, #0]
 80069a6:	e002      	b.n	80069ae <_printf_i+0xf2>
 80069a8:	0669      	lsls	r1, r5, #25
 80069aa:	d5fb      	bpl.n	80069a4 <_printf_i+0xe8>
 80069ac:	881d      	ldrh	r5, [r3, #0]
 80069ae:	2f6f      	cmp	r7, #111	; 0x6f
 80069b0:	bf0c      	ite	eq
 80069b2:	2308      	moveq	r3, #8
 80069b4:	230a      	movne	r3, #10
 80069b6:	4852      	ldr	r0, [pc, #328]	; (8006b00 <_printf_i+0x244>)
 80069b8:	2100      	movs	r1, #0
 80069ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069be:	6866      	ldr	r6, [r4, #4]
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	bfa8      	it	ge
 80069c4:	6821      	ldrge	r1, [r4, #0]
 80069c6:	60a6      	str	r6, [r4, #8]
 80069c8:	bfa4      	itt	ge
 80069ca:	f021 0104 	bicge.w	r1, r1, #4
 80069ce:	6021      	strge	r1, [r4, #0]
 80069d0:	b90d      	cbnz	r5, 80069d6 <_printf_i+0x11a>
 80069d2:	2e00      	cmp	r6, #0
 80069d4:	d04d      	beq.n	8006a72 <_printf_i+0x1b6>
 80069d6:	4616      	mov	r6, r2
 80069d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80069dc:	fb03 5711 	mls	r7, r3, r1, r5
 80069e0:	5dc7      	ldrb	r7, [r0, r7]
 80069e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069e6:	462f      	mov	r7, r5
 80069e8:	42bb      	cmp	r3, r7
 80069ea:	460d      	mov	r5, r1
 80069ec:	d9f4      	bls.n	80069d8 <_printf_i+0x11c>
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d10b      	bne.n	8006a0a <_printf_i+0x14e>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	07df      	lsls	r7, r3, #31
 80069f6:	d508      	bpl.n	8006a0a <_printf_i+0x14e>
 80069f8:	6923      	ldr	r3, [r4, #16]
 80069fa:	6861      	ldr	r1, [r4, #4]
 80069fc:	4299      	cmp	r1, r3
 80069fe:	bfde      	ittt	le
 8006a00:	2330      	movle	r3, #48	; 0x30
 8006a02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a0a:	1b92      	subs	r2, r2, r6
 8006a0c:	6122      	str	r2, [r4, #16]
 8006a0e:	464b      	mov	r3, r9
 8006a10:	4621      	mov	r1, r4
 8006a12:	4640      	mov	r0, r8
 8006a14:	f8cd a000 	str.w	sl, [sp]
 8006a18:	aa03      	add	r2, sp, #12
 8006a1a:	f7ff fedf 	bl	80067dc <_printf_common>
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d14c      	bne.n	8006abc <_printf_i+0x200>
 8006a22:	f04f 30ff 	mov.w	r0, #4294967295
 8006a26:	b004      	add	sp, #16
 8006a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2c:	4834      	ldr	r0, [pc, #208]	; (8006b00 <_printf_i+0x244>)
 8006a2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a32:	680e      	ldr	r6, [r1, #0]
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a3a:	061f      	lsls	r7, r3, #24
 8006a3c:	600e      	str	r6, [r1, #0]
 8006a3e:	d514      	bpl.n	8006a6a <_printf_i+0x1ae>
 8006a40:	07d9      	lsls	r1, r3, #31
 8006a42:	bf44      	itt	mi
 8006a44:	f043 0320 	orrmi.w	r3, r3, #32
 8006a48:	6023      	strmi	r3, [r4, #0]
 8006a4a:	b91d      	cbnz	r5, 8006a54 <_printf_i+0x198>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	f023 0320 	bic.w	r3, r3, #32
 8006a52:	6023      	str	r3, [r4, #0]
 8006a54:	2310      	movs	r3, #16
 8006a56:	e7af      	b.n	80069b8 <_printf_i+0xfc>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	f043 0320 	orr.w	r3, r3, #32
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	2378      	movs	r3, #120	; 0x78
 8006a62:	4828      	ldr	r0, [pc, #160]	; (8006b04 <_printf_i+0x248>)
 8006a64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a68:	e7e3      	b.n	8006a32 <_printf_i+0x176>
 8006a6a:	065e      	lsls	r6, r3, #25
 8006a6c:	bf48      	it	mi
 8006a6e:	b2ad      	uxthmi	r5, r5
 8006a70:	e7e6      	b.n	8006a40 <_printf_i+0x184>
 8006a72:	4616      	mov	r6, r2
 8006a74:	e7bb      	b.n	80069ee <_printf_i+0x132>
 8006a76:	680b      	ldr	r3, [r1, #0]
 8006a78:	6826      	ldr	r6, [r4, #0]
 8006a7a:	1d1d      	adds	r5, r3, #4
 8006a7c:	6960      	ldr	r0, [r4, #20]
 8006a7e:	600d      	str	r5, [r1, #0]
 8006a80:	0635      	lsls	r5, r6, #24
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	d501      	bpl.n	8006a8a <_printf_i+0x1ce>
 8006a86:	6018      	str	r0, [r3, #0]
 8006a88:	e002      	b.n	8006a90 <_printf_i+0x1d4>
 8006a8a:	0671      	lsls	r1, r6, #25
 8006a8c:	d5fb      	bpl.n	8006a86 <_printf_i+0x1ca>
 8006a8e:	8018      	strh	r0, [r3, #0]
 8006a90:	2300      	movs	r3, #0
 8006a92:	4616      	mov	r6, r2
 8006a94:	6123      	str	r3, [r4, #16]
 8006a96:	e7ba      	b.n	8006a0e <_printf_i+0x152>
 8006a98:	680b      	ldr	r3, [r1, #0]
 8006a9a:	1d1a      	adds	r2, r3, #4
 8006a9c:	600a      	str	r2, [r1, #0]
 8006a9e:	681e      	ldr	r6, [r3, #0]
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	6862      	ldr	r2, [r4, #4]
 8006aa6:	f002 fe31 	bl	800970c <memchr>
 8006aaa:	b108      	cbz	r0, 8006ab0 <_printf_i+0x1f4>
 8006aac:	1b80      	subs	r0, r0, r6
 8006aae:	6060      	str	r0, [r4, #4]
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	6123      	str	r3, [r4, #16]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aba:	e7a8      	b.n	8006a0e <_printf_i+0x152>
 8006abc:	4632      	mov	r2, r6
 8006abe:	4649      	mov	r1, r9
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	47d0      	blx	sl
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d0ab      	beq.n	8006a22 <_printf_i+0x166>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	079b      	lsls	r3, r3, #30
 8006ace:	d413      	bmi.n	8006af8 <_printf_i+0x23c>
 8006ad0:	68e0      	ldr	r0, [r4, #12]
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	4298      	cmp	r0, r3
 8006ad6:	bfb8      	it	lt
 8006ad8:	4618      	movlt	r0, r3
 8006ada:	e7a4      	b.n	8006a26 <_printf_i+0x16a>
 8006adc:	2301      	movs	r3, #1
 8006ade:	4632      	mov	r2, r6
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	47d0      	blx	sl
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d09b      	beq.n	8006a22 <_printf_i+0x166>
 8006aea:	3501      	adds	r5, #1
 8006aec:	68e3      	ldr	r3, [r4, #12]
 8006aee:	9903      	ldr	r1, [sp, #12]
 8006af0:	1a5b      	subs	r3, r3, r1
 8006af2:	42ab      	cmp	r3, r5
 8006af4:	dcf2      	bgt.n	8006adc <_printf_i+0x220>
 8006af6:	e7eb      	b.n	8006ad0 <_printf_i+0x214>
 8006af8:	2500      	movs	r5, #0
 8006afa:	f104 0619 	add.w	r6, r4, #25
 8006afe:	e7f5      	b.n	8006aec <_printf_i+0x230>
 8006b00:	0800a8b3 	.word	0x0800a8b3
 8006b04:	0800a8c4 	.word	0x0800a8c4

08006b08 <_scanf_float>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	b087      	sub	sp, #28
 8006b0e:	9303      	str	r3, [sp, #12]
 8006b10:	688b      	ldr	r3, [r1, #8]
 8006b12:	4617      	mov	r7, r2
 8006b14:	1e5a      	subs	r2, r3, #1
 8006b16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b1a:	bf85      	ittet	hi
 8006b1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006b20:	195b      	addhi	r3, r3, r5
 8006b22:	2300      	movls	r3, #0
 8006b24:	9302      	strhi	r3, [sp, #8]
 8006b26:	bf88      	it	hi
 8006b28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b2c:	468b      	mov	fp, r1
 8006b2e:	f04f 0500 	mov.w	r5, #0
 8006b32:	bf8c      	ite	hi
 8006b34:	608b      	strhi	r3, [r1, #8]
 8006b36:	9302      	strls	r3, [sp, #8]
 8006b38:	680b      	ldr	r3, [r1, #0]
 8006b3a:	4680      	mov	r8, r0
 8006b3c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006b40:	f84b 3b1c 	str.w	r3, [fp], #28
 8006b44:	460c      	mov	r4, r1
 8006b46:	465e      	mov	r6, fp
 8006b48:	46aa      	mov	sl, r5
 8006b4a:	46a9      	mov	r9, r5
 8006b4c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006b50:	9501      	str	r5, [sp, #4]
 8006b52:	68a2      	ldr	r2, [r4, #8]
 8006b54:	b152      	cbz	r2, 8006b6c <_scanf_float+0x64>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b4e      	cmp	r3, #78	; 0x4e
 8006b5c:	d864      	bhi.n	8006c28 <_scanf_float+0x120>
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d83c      	bhi.n	8006bdc <_scanf_float+0xd4>
 8006b62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006b66:	b2c8      	uxtb	r0, r1
 8006b68:	280e      	cmp	r0, #14
 8006b6a:	d93a      	bls.n	8006be2 <_scanf_float+0xda>
 8006b6c:	f1b9 0f00 	cmp.w	r9, #0
 8006b70:	d003      	beq.n	8006b7a <_scanf_float+0x72>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b7e:	f1ba 0f01 	cmp.w	sl, #1
 8006b82:	f200 8113 	bhi.w	8006dac <_scanf_float+0x2a4>
 8006b86:	455e      	cmp	r6, fp
 8006b88:	f200 8105 	bhi.w	8006d96 <_scanf_float+0x28e>
 8006b8c:	2501      	movs	r5, #1
 8006b8e:	4628      	mov	r0, r5
 8006b90:	b007      	add	sp, #28
 8006b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b9a:	2a0d      	cmp	r2, #13
 8006b9c:	d8e6      	bhi.n	8006b6c <_scanf_float+0x64>
 8006b9e:	a101      	add	r1, pc, #4	; (adr r1, 8006ba4 <_scanf_float+0x9c>)
 8006ba0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ba4:	08006ce3 	.word	0x08006ce3
 8006ba8:	08006b6d 	.word	0x08006b6d
 8006bac:	08006b6d 	.word	0x08006b6d
 8006bb0:	08006b6d 	.word	0x08006b6d
 8006bb4:	08006d43 	.word	0x08006d43
 8006bb8:	08006d1b 	.word	0x08006d1b
 8006bbc:	08006b6d 	.word	0x08006b6d
 8006bc0:	08006b6d 	.word	0x08006b6d
 8006bc4:	08006cf1 	.word	0x08006cf1
 8006bc8:	08006b6d 	.word	0x08006b6d
 8006bcc:	08006b6d 	.word	0x08006b6d
 8006bd0:	08006b6d 	.word	0x08006b6d
 8006bd4:	08006b6d 	.word	0x08006b6d
 8006bd8:	08006ca9 	.word	0x08006ca9
 8006bdc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006be0:	e7db      	b.n	8006b9a <_scanf_float+0x92>
 8006be2:	290e      	cmp	r1, #14
 8006be4:	d8c2      	bhi.n	8006b6c <_scanf_float+0x64>
 8006be6:	a001      	add	r0, pc, #4	; (adr r0, 8006bec <_scanf_float+0xe4>)
 8006be8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006bec:	08006c9b 	.word	0x08006c9b
 8006bf0:	08006b6d 	.word	0x08006b6d
 8006bf4:	08006c9b 	.word	0x08006c9b
 8006bf8:	08006d2f 	.word	0x08006d2f
 8006bfc:	08006b6d 	.word	0x08006b6d
 8006c00:	08006c49 	.word	0x08006c49
 8006c04:	08006c85 	.word	0x08006c85
 8006c08:	08006c85 	.word	0x08006c85
 8006c0c:	08006c85 	.word	0x08006c85
 8006c10:	08006c85 	.word	0x08006c85
 8006c14:	08006c85 	.word	0x08006c85
 8006c18:	08006c85 	.word	0x08006c85
 8006c1c:	08006c85 	.word	0x08006c85
 8006c20:	08006c85 	.word	0x08006c85
 8006c24:	08006c85 	.word	0x08006c85
 8006c28:	2b6e      	cmp	r3, #110	; 0x6e
 8006c2a:	d809      	bhi.n	8006c40 <_scanf_float+0x138>
 8006c2c:	2b60      	cmp	r3, #96	; 0x60
 8006c2e:	d8b2      	bhi.n	8006b96 <_scanf_float+0x8e>
 8006c30:	2b54      	cmp	r3, #84	; 0x54
 8006c32:	d077      	beq.n	8006d24 <_scanf_float+0x21c>
 8006c34:	2b59      	cmp	r3, #89	; 0x59
 8006c36:	d199      	bne.n	8006b6c <_scanf_float+0x64>
 8006c38:	2d07      	cmp	r5, #7
 8006c3a:	d197      	bne.n	8006b6c <_scanf_float+0x64>
 8006c3c:	2508      	movs	r5, #8
 8006c3e:	e029      	b.n	8006c94 <_scanf_float+0x18c>
 8006c40:	2b74      	cmp	r3, #116	; 0x74
 8006c42:	d06f      	beq.n	8006d24 <_scanf_float+0x21c>
 8006c44:	2b79      	cmp	r3, #121	; 0x79
 8006c46:	e7f6      	b.n	8006c36 <_scanf_float+0x12e>
 8006c48:	6821      	ldr	r1, [r4, #0]
 8006c4a:	05c8      	lsls	r0, r1, #23
 8006c4c:	d51a      	bpl.n	8006c84 <_scanf_float+0x17c>
 8006c4e:	9b02      	ldr	r3, [sp, #8]
 8006c50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006c54:	6021      	str	r1, [r4, #0]
 8006c56:	f109 0901 	add.w	r9, r9, #1
 8006c5a:	b11b      	cbz	r3, 8006c64 <_scanf_float+0x15c>
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	3201      	adds	r2, #1
 8006c60:	9302      	str	r3, [sp, #8]
 8006c62:	60a2      	str	r2, [r4, #8]
 8006c64:	68a3      	ldr	r3, [r4, #8]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	60a3      	str	r3, [r4, #8]
 8006c6a:	6923      	ldr	r3, [r4, #16]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	6123      	str	r3, [r4, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	607b      	str	r3, [r7, #4]
 8006c78:	f340 8084 	ble.w	8006d84 <_scanf_float+0x27c>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	603b      	str	r3, [r7, #0]
 8006c82:	e766      	b.n	8006b52 <_scanf_float+0x4a>
 8006c84:	eb1a 0f05 	cmn.w	sl, r5
 8006c88:	f47f af70 	bne.w	8006b6c <_scanf_float+0x64>
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006c92:	6022      	str	r2, [r4, #0]
 8006c94:	f806 3b01 	strb.w	r3, [r6], #1
 8006c98:	e7e4      	b.n	8006c64 <_scanf_float+0x15c>
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	0610      	lsls	r0, r2, #24
 8006c9e:	f57f af65 	bpl.w	8006b6c <_scanf_float+0x64>
 8006ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ca6:	e7f4      	b.n	8006c92 <_scanf_float+0x18a>
 8006ca8:	f1ba 0f00 	cmp.w	sl, #0
 8006cac:	d10e      	bne.n	8006ccc <_scanf_float+0x1c4>
 8006cae:	f1b9 0f00 	cmp.w	r9, #0
 8006cb2:	d10e      	bne.n	8006cd2 <_scanf_float+0x1ca>
 8006cb4:	6822      	ldr	r2, [r4, #0]
 8006cb6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006cba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006cbe:	d108      	bne.n	8006cd2 <_scanf_float+0x1ca>
 8006cc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cc4:	f04f 0a01 	mov.w	sl, #1
 8006cc8:	6022      	str	r2, [r4, #0]
 8006cca:	e7e3      	b.n	8006c94 <_scanf_float+0x18c>
 8006ccc:	f1ba 0f02 	cmp.w	sl, #2
 8006cd0:	d055      	beq.n	8006d7e <_scanf_float+0x276>
 8006cd2:	2d01      	cmp	r5, #1
 8006cd4:	d002      	beq.n	8006cdc <_scanf_float+0x1d4>
 8006cd6:	2d04      	cmp	r5, #4
 8006cd8:	f47f af48 	bne.w	8006b6c <_scanf_float+0x64>
 8006cdc:	3501      	adds	r5, #1
 8006cde:	b2ed      	uxtb	r5, r5
 8006ce0:	e7d8      	b.n	8006c94 <_scanf_float+0x18c>
 8006ce2:	f1ba 0f01 	cmp.w	sl, #1
 8006ce6:	f47f af41 	bne.w	8006b6c <_scanf_float+0x64>
 8006cea:	f04f 0a02 	mov.w	sl, #2
 8006cee:	e7d1      	b.n	8006c94 <_scanf_float+0x18c>
 8006cf0:	b97d      	cbnz	r5, 8006d12 <_scanf_float+0x20a>
 8006cf2:	f1b9 0f00 	cmp.w	r9, #0
 8006cf6:	f47f af3c 	bne.w	8006b72 <_scanf_float+0x6a>
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006d00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006d04:	f47f af39 	bne.w	8006b7a <_scanf_float+0x72>
 8006d08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d0c:	2501      	movs	r5, #1
 8006d0e:	6022      	str	r2, [r4, #0]
 8006d10:	e7c0      	b.n	8006c94 <_scanf_float+0x18c>
 8006d12:	2d03      	cmp	r5, #3
 8006d14:	d0e2      	beq.n	8006cdc <_scanf_float+0x1d4>
 8006d16:	2d05      	cmp	r5, #5
 8006d18:	e7de      	b.n	8006cd8 <_scanf_float+0x1d0>
 8006d1a:	2d02      	cmp	r5, #2
 8006d1c:	f47f af26 	bne.w	8006b6c <_scanf_float+0x64>
 8006d20:	2503      	movs	r5, #3
 8006d22:	e7b7      	b.n	8006c94 <_scanf_float+0x18c>
 8006d24:	2d06      	cmp	r5, #6
 8006d26:	f47f af21 	bne.w	8006b6c <_scanf_float+0x64>
 8006d2a:	2507      	movs	r5, #7
 8006d2c:	e7b2      	b.n	8006c94 <_scanf_float+0x18c>
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	0591      	lsls	r1, r2, #22
 8006d32:	f57f af1b 	bpl.w	8006b6c <_scanf_float+0x64>
 8006d36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006d3a:	6022      	str	r2, [r4, #0]
 8006d3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d40:	e7a8      	b.n	8006c94 <_scanf_float+0x18c>
 8006d42:	6822      	ldr	r2, [r4, #0]
 8006d44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006d48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006d4c:	d006      	beq.n	8006d5c <_scanf_float+0x254>
 8006d4e:	0550      	lsls	r0, r2, #21
 8006d50:	f57f af0c 	bpl.w	8006b6c <_scanf_float+0x64>
 8006d54:	f1b9 0f00 	cmp.w	r9, #0
 8006d58:	f43f af0f 	beq.w	8006b7a <_scanf_float+0x72>
 8006d5c:	0591      	lsls	r1, r2, #22
 8006d5e:	bf58      	it	pl
 8006d60:	9901      	ldrpl	r1, [sp, #4]
 8006d62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006d66:	bf58      	it	pl
 8006d68:	eba9 0101 	subpl.w	r1, r9, r1
 8006d6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006d70:	f04f 0900 	mov.w	r9, #0
 8006d74:	bf58      	it	pl
 8006d76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006d7a:	6022      	str	r2, [r4, #0]
 8006d7c:	e78a      	b.n	8006c94 <_scanf_float+0x18c>
 8006d7e:	f04f 0a03 	mov.w	sl, #3
 8006d82:	e787      	b.n	8006c94 <_scanf_float+0x18c>
 8006d84:	4639      	mov	r1, r7
 8006d86:	4640      	mov	r0, r8
 8006d88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d8c:	4798      	blx	r3
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	f43f aedf 	beq.w	8006b52 <_scanf_float+0x4a>
 8006d94:	e6ea      	b.n	8006b6c <_scanf_float+0x64>
 8006d96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006da2:	4798      	blx	r3
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	6123      	str	r3, [r4, #16]
 8006daa:	e6ec      	b.n	8006b86 <_scanf_float+0x7e>
 8006dac:	1e6b      	subs	r3, r5, #1
 8006dae:	2b06      	cmp	r3, #6
 8006db0:	d825      	bhi.n	8006dfe <_scanf_float+0x2f6>
 8006db2:	2d02      	cmp	r5, #2
 8006db4:	d836      	bhi.n	8006e24 <_scanf_float+0x31c>
 8006db6:	455e      	cmp	r6, fp
 8006db8:	f67f aee8 	bls.w	8006b8c <_scanf_float+0x84>
 8006dbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dc0:	463a      	mov	r2, r7
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dc8:	4798      	blx	r3
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	6123      	str	r3, [r4, #16]
 8006dd0:	e7f1      	b.n	8006db6 <_scanf_float+0x2ae>
 8006dd2:	9802      	ldr	r0, [sp, #8]
 8006dd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dd8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006ddc:	463a      	mov	r2, r7
 8006dde:	9002      	str	r0, [sp, #8]
 8006de0:	4640      	mov	r0, r8
 8006de2:	4798      	blx	r3
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dee:	fa5f fa8a 	uxtb.w	sl, sl
 8006df2:	f1ba 0f02 	cmp.w	sl, #2
 8006df6:	d1ec      	bne.n	8006dd2 <_scanf_float+0x2ca>
 8006df8:	3d03      	subs	r5, #3
 8006dfa:	b2ed      	uxtb	r5, r5
 8006dfc:	1b76      	subs	r6, r6, r5
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	05da      	lsls	r2, r3, #23
 8006e02:	d52f      	bpl.n	8006e64 <_scanf_float+0x35c>
 8006e04:	055b      	lsls	r3, r3, #21
 8006e06:	d510      	bpl.n	8006e2a <_scanf_float+0x322>
 8006e08:	455e      	cmp	r6, fp
 8006e0a:	f67f aebf 	bls.w	8006b8c <_scanf_float+0x84>
 8006e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e12:	463a      	mov	r2, r7
 8006e14:	4640      	mov	r0, r8
 8006e16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e1a:	4798      	blx	r3
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	6123      	str	r3, [r4, #16]
 8006e22:	e7f1      	b.n	8006e08 <_scanf_float+0x300>
 8006e24:	46aa      	mov	sl, r5
 8006e26:	9602      	str	r6, [sp, #8]
 8006e28:	e7df      	b.n	8006dea <_scanf_float+0x2e2>
 8006e2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	2965      	cmp	r1, #101	; 0x65
 8006e32:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e36:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	d00c      	beq.n	8006e58 <_scanf_float+0x350>
 8006e3e:	2945      	cmp	r1, #69	; 0x45
 8006e40:	d00a      	beq.n	8006e58 <_scanf_float+0x350>
 8006e42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e46:	463a      	mov	r2, r7
 8006e48:	4640      	mov	r0, r8
 8006e4a:	4798      	blx	r3
 8006e4c:	6923      	ldr	r3, [r4, #16]
 8006e4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	1eb5      	subs	r5, r6, #2
 8006e56:	6123      	str	r3, [r4, #16]
 8006e58:	463a      	mov	r2, r7
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e60:	4798      	blx	r3
 8006e62:	462e      	mov	r6, r5
 8006e64:	6825      	ldr	r5, [r4, #0]
 8006e66:	f015 0510 	ands.w	r5, r5, #16
 8006e6a:	d159      	bne.n	8006f20 <_scanf_float+0x418>
 8006e6c:	7035      	strb	r5, [r6, #0]
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e78:	d11c      	bne.n	8006eb4 <_scanf_float+0x3ac>
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	454b      	cmp	r3, r9
 8006e7e:	eba3 0209 	sub.w	r2, r3, r9
 8006e82:	d124      	bne.n	8006ece <_scanf_float+0x3c6>
 8006e84:	2200      	movs	r2, #0
 8006e86:	4659      	mov	r1, fp
 8006e88:	4640      	mov	r0, r8
 8006e8a:	f000 fe99 	bl	8007bc0 <_strtod_r>
 8006e8e:	f8d4 c000 	ldr.w	ip, [r4]
 8006e92:	9b03      	ldr	r3, [sp, #12]
 8006e94:	f01c 0f02 	tst.w	ip, #2
 8006e98:	4606      	mov	r6, r0
 8006e9a:	460f      	mov	r7, r1
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	d021      	beq.n	8006ee4 <_scanf_float+0x3dc>
 8006ea0:	9903      	ldr	r1, [sp, #12]
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	600a      	str	r2, [r1, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	e9c3 6700 	strd	r6, r7, [r3]
 8006eac:	68e3      	ldr	r3, [r4, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60e3      	str	r3, [r4, #12]
 8006eb2:	e66c      	b.n	8006b8e <_scanf_float+0x86>
 8006eb4:	9b04      	ldr	r3, [sp, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0e4      	beq.n	8006e84 <_scanf_float+0x37c>
 8006eba:	9905      	ldr	r1, [sp, #20]
 8006ebc:	230a      	movs	r3, #10
 8006ebe:	462a      	mov	r2, r5
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	3101      	adds	r1, #1
 8006ec4:	f000 ff08 	bl	8007cd8 <_strtol_r>
 8006ec8:	9b04      	ldr	r3, [sp, #16]
 8006eca:	9e05      	ldr	r6, [sp, #20]
 8006ecc:	1ac2      	subs	r2, r0, r3
 8006ece:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006ed2:	429e      	cmp	r6, r3
 8006ed4:	bf28      	it	cs
 8006ed6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006eda:	4630      	mov	r0, r6
 8006edc:	4911      	ldr	r1, [pc, #68]	; (8006f24 <_scanf_float+0x41c>)
 8006ede:	f000 f839 	bl	8006f54 <siprintf>
 8006ee2:	e7cf      	b.n	8006e84 <_scanf_float+0x37c>
 8006ee4:	f01c 0f04 	tst.w	ip, #4
 8006ee8:	f103 0e04 	add.w	lr, r3, #4
 8006eec:	d003      	beq.n	8006ef6 <_scanf_float+0x3ee>
 8006eee:	9903      	ldr	r1, [sp, #12]
 8006ef0:	f8c1 e000 	str.w	lr, [r1]
 8006ef4:	e7d7      	b.n	8006ea6 <_scanf_float+0x39e>
 8006ef6:	9a03      	ldr	r2, [sp, #12]
 8006ef8:	f8c2 e000 	str.w	lr, [r2]
 8006efc:	f8d3 8000 	ldr.w	r8, [r3]
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	f7f9 fd82 	bl	8000a0c <__aeabi_dcmpun>
 8006f08:	b128      	cbz	r0, 8006f16 <_scanf_float+0x40e>
 8006f0a:	4807      	ldr	r0, [pc, #28]	; (8006f28 <_scanf_float+0x420>)
 8006f0c:	f000 f81e 	bl	8006f4c <nanf>
 8006f10:	f8c8 0000 	str.w	r0, [r8]
 8006f14:	e7ca      	b.n	8006eac <_scanf_float+0x3a4>
 8006f16:	4630      	mov	r0, r6
 8006f18:	4639      	mov	r1, r7
 8006f1a:	f7f9 fdd5 	bl	8000ac8 <__aeabi_d2f>
 8006f1e:	e7f7      	b.n	8006f10 <_scanf_float+0x408>
 8006f20:	2500      	movs	r5, #0
 8006f22:	e634      	b.n	8006b8e <_scanf_float+0x86>
 8006f24:	0800a8d5 	.word	0x0800a8d5
 8006f28:	0800a889 	.word	0x0800a889

08006f2c <_sbrk_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	2300      	movs	r3, #0
 8006f30:	4d05      	ldr	r5, [pc, #20]	; (8006f48 <_sbrk_r+0x1c>)
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	602b      	str	r3, [r5, #0]
 8006f38:	f7fb f972 	bl	8002220 <_sbrk>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_sbrk_r+0x1a>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_sbrk_r+0x1a>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	200008c8 	.word	0x200008c8

08006f4c <nanf>:
 8006f4c:	4800      	ldr	r0, [pc, #0]	; (8006f50 <nanf+0x4>)
 8006f4e:	4770      	bx	lr
 8006f50:	7fc00000 	.word	0x7fc00000

08006f54 <siprintf>:
 8006f54:	b40e      	push	{r1, r2, r3}
 8006f56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f5a:	b500      	push	{lr}
 8006f5c:	b09c      	sub	sp, #112	; 0x70
 8006f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f60:	9002      	str	r0, [sp, #8]
 8006f62:	9006      	str	r0, [sp, #24]
 8006f64:	9107      	str	r1, [sp, #28]
 8006f66:	9104      	str	r1, [sp, #16]
 8006f68:	4808      	ldr	r0, [pc, #32]	; (8006f8c <siprintf+0x38>)
 8006f6a:	4909      	ldr	r1, [pc, #36]	; (8006f90 <siprintf+0x3c>)
 8006f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f70:	9105      	str	r1, [sp, #20]
 8006f72:	6800      	ldr	r0, [r0, #0]
 8006f74:	a902      	add	r1, sp, #8
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	f003 f944 	bl	800a204 <_svfiprintf_r>
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	9b02      	ldr	r3, [sp, #8]
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	b01c      	add	sp, #112	; 0x70
 8006f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f88:	b003      	add	sp, #12
 8006f8a:	4770      	bx	lr
 8006f8c:	2000004c 	.word	0x2000004c
 8006f90:	ffff0208 	.word	0xffff0208

08006f94 <sulp>:
 8006f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f98:	460f      	mov	r7, r1
 8006f9a:	4690      	mov	r8, r2
 8006f9c:	f002 ff5a 	bl	8009e54 <__ulp>
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	460d      	mov	r5, r1
 8006fa4:	f1b8 0f00 	cmp.w	r8, #0
 8006fa8:	d011      	beq.n	8006fce <sulp+0x3a>
 8006faa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006fae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dd0b      	ble.n	8006fce <sulp+0x3a>
 8006fb6:	2400      	movs	r4, #0
 8006fb8:	051b      	lsls	r3, r3, #20
 8006fba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	f7f9 fa87 	bl	80004d8 <__aeabi_dmul>
 8006fca:	4604      	mov	r4, r0
 8006fcc:	460d      	mov	r5, r1
 8006fce:	4620      	mov	r0, r4
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006fd8 <_strtod_l>:
 8006fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	469b      	mov	fp, r3
 8006fde:	2300      	movs	r3, #0
 8006fe0:	b0a1      	sub	sp, #132	; 0x84
 8006fe2:	931c      	str	r3, [sp, #112]	; 0x70
 8006fe4:	4ba1      	ldr	r3, [pc, #644]	; (800726c <_strtod_l+0x294>)
 8006fe6:	4682      	mov	sl, r0
 8006fe8:	681f      	ldr	r7, [r3, #0]
 8006fea:	460e      	mov	r6, r1
 8006fec:	4638      	mov	r0, r7
 8006fee:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ff0:	f7f9 f8ae 	bl	8000150 <strlen>
 8006ff4:	f04f 0800 	mov.w	r8, #0
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	f04f 0900 	mov.w	r9, #0
 8006ffe:	961b      	str	r6, [sp, #108]	; 0x6c
 8007000:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	2a2b      	cmp	r2, #43	; 0x2b
 8007006:	d04c      	beq.n	80070a2 <_strtod_l+0xca>
 8007008:	d83a      	bhi.n	8007080 <_strtod_l+0xa8>
 800700a:	2a0d      	cmp	r2, #13
 800700c:	d833      	bhi.n	8007076 <_strtod_l+0x9e>
 800700e:	2a08      	cmp	r2, #8
 8007010:	d833      	bhi.n	800707a <_strtod_l+0xa2>
 8007012:	2a00      	cmp	r2, #0
 8007014:	d03d      	beq.n	8007092 <_strtod_l+0xba>
 8007016:	2300      	movs	r3, #0
 8007018:	930c      	str	r3, [sp, #48]	; 0x30
 800701a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800701c:	782b      	ldrb	r3, [r5, #0]
 800701e:	2b30      	cmp	r3, #48	; 0x30
 8007020:	f040 80af 	bne.w	8007182 <_strtod_l+0x1aa>
 8007024:	786b      	ldrb	r3, [r5, #1]
 8007026:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800702a:	2b58      	cmp	r3, #88	; 0x58
 800702c:	d16c      	bne.n	8007108 <_strtod_l+0x130>
 800702e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007030:	4650      	mov	r0, sl
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	ab1c      	add	r3, sp, #112	; 0x70
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	4a8d      	ldr	r2, [pc, #564]	; (8007270 <_strtod_l+0x298>)
 800703a:	f8cd b008 	str.w	fp, [sp, #8]
 800703e:	ab1d      	add	r3, sp, #116	; 0x74
 8007040:	a91b      	add	r1, sp, #108	; 0x6c
 8007042:	f001 ffe7 	bl	8009014 <__gethex>
 8007046:	f010 0607 	ands.w	r6, r0, #7
 800704a:	4604      	mov	r4, r0
 800704c:	d005      	beq.n	800705a <_strtod_l+0x82>
 800704e:	2e06      	cmp	r6, #6
 8007050:	d129      	bne.n	80070a6 <_strtod_l+0xce>
 8007052:	2300      	movs	r3, #0
 8007054:	3501      	adds	r5, #1
 8007056:	951b      	str	r5, [sp, #108]	; 0x6c
 8007058:	930c      	str	r3, [sp, #48]	; 0x30
 800705a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800705c:	2b00      	cmp	r3, #0
 800705e:	f040 8596 	bne.w	8007b8e <_strtod_l+0xbb6>
 8007062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007064:	b1d3      	cbz	r3, 800709c <_strtod_l+0xc4>
 8007066:	4642      	mov	r2, r8
 8007068:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800706c:	4610      	mov	r0, r2
 800706e:	4619      	mov	r1, r3
 8007070:	b021      	add	sp, #132	; 0x84
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	2a20      	cmp	r2, #32
 8007078:	d1cd      	bne.n	8007016 <_strtod_l+0x3e>
 800707a:	3301      	adds	r3, #1
 800707c:	931b      	str	r3, [sp, #108]	; 0x6c
 800707e:	e7bf      	b.n	8007000 <_strtod_l+0x28>
 8007080:	2a2d      	cmp	r2, #45	; 0x2d
 8007082:	d1c8      	bne.n	8007016 <_strtod_l+0x3e>
 8007084:	2201      	movs	r2, #1
 8007086:	920c      	str	r2, [sp, #48]	; 0x30
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	921b      	str	r2, [sp, #108]	; 0x6c
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1c3      	bne.n	800701a <_strtod_l+0x42>
 8007092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007094:	961b      	str	r6, [sp, #108]	; 0x6c
 8007096:	2b00      	cmp	r3, #0
 8007098:	f040 8577 	bne.w	8007b8a <_strtod_l+0xbb2>
 800709c:	4642      	mov	r2, r8
 800709e:	464b      	mov	r3, r9
 80070a0:	e7e4      	b.n	800706c <_strtod_l+0x94>
 80070a2:	2200      	movs	r2, #0
 80070a4:	e7ef      	b.n	8007086 <_strtod_l+0xae>
 80070a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80070a8:	b13a      	cbz	r2, 80070ba <_strtod_l+0xe2>
 80070aa:	2135      	movs	r1, #53	; 0x35
 80070ac:	a81e      	add	r0, sp, #120	; 0x78
 80070ae:	f002 ffd5 	bl	800a05c <__copybits>
 80070b2:	4650      	mov	r0, sl
 80070b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80070b6:	f002 fb9d 	bl	80097f4 <_Bfree>
 80070ba:	3e01      	subs	r6, #1
 80070bc:	2e05      	cmp	r6, #5
 80070be:	d807      	bhi.n	80070d0 <_strtod_l+0xf8>
 80070c0:	e8df f006 	tbb	[pc, r6]
 80070c4:	1d180b0e 	.word	0x1d180b0e
 80070c8:	030e      	.short	0x030e
 80070ca:	f04f 0900 	mov.w	r9, #0
 80070ce:	46c8      	mov	r8, r9
 80070d0:	0721      	lsls	r1, r4, #28
 80070d2:	d5c2      	bpl.n	800705a <_strtod_l+0x82>
 80070d4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80070d8:	e7bf      	b.n	800705a <_strtod_l+0x82>
 80070da:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80070de:	e7f7      	b.n	80070d0 <_strtod_l+0xf8>
 80070e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80070e2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80070e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070ee:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80070f2:	e7ed      	b.n	80070d0 <_strtod_l+0xf8>
 80070f4:	f04f 0800 	mov.w	r8, #0
 80070f8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007274 <_strtod_l+0x29c>
 80070fc:	e7e8      	b.n	80070d0 <_strtod_l+0xf8>
 80070fe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007102:	f04f 38ff 	mov.w	r8, #4294967295
 8007106:	e7e3      	b.n	80070d0 <_strtod_l+0xf8>
 8007108:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	921b      	str	r2, [sp, #108]	; 0x6c
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	2b30      	cmp	r3, #48	; 0x30
 8007112:	d0f9      	beq.n	8007108 <_strtod_l+0x130>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0a0      	beq.n	800705a <_strtod_l+0x82>
 8007118:	2301      	movs	r3, #1
 800711a:	9307      	str	r3, [sp, #28]
 800711c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800711e:	220a      	movs	r2, #10
 8007120:	9308      	str	r3, [sp, #32]
 8007122:	2300      	movs	r3, #0
 8007124:	469b      	mov	fp, r3
 8007126:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800712a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800712c:	7805      	ldrb	r5, [r0, #0]
 800712e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007132:	b2d9      	uxtb	r1, r3
 8007134:	2909      	cmp	r1, #9
 8007136:	d926      	bls.n	8007186 <_strtod_l+0x1ae>
 8007138:	4622      	mov	r2, r4
 800713a:	4639      	mov	r1, r7
 800713c:	f003 f9ef 	bl	800a51e <strncmp>
 8007140:	2800      	cmp	r0, #0
 8007142:	d032      	beq.n	80071aa <_strtod_l+0x1d2>
 8007144:	2000      	movs	r0, #0
 8007146:	462b      	mov	r3, r5
 8007148:	465c      	mov	r4, fp
 800714a:	4602      	mov	r2, r0
 800714c:	9004      	str	r0, [sp, #16]
 800714e:	2b65      	cmp	r3, #101	; 0x65
 8007150:	d001      	beq.n	8007156 <_strtod_l+0x17e>
 8007152:	2b45      	cmp	r3, #69	; 0x45
 8007154:	d113      	bne.n	800717e <_strtod_l+0x1a6>
 8007156:	b91c      	cbnz	r4, 8007160 <_strtod_l+0x188>
 8007158:	9b07      	ldr	r3, [sp, #28]
 800715a:	4303      	orrs	r3, r0
 800715c:	d099      	beq.n	8007092 <_strtod_l+0xba>
 800715e:	2400      	movs	r4, #0
 8007160:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007162:	1c73      	adds	r3, r6, #1
 8007164:	931b      	str	r3, [sp, #108]	; 0x6c
 8007166:	7873      	ldrb	r3, [r6, #1]
 8007168:	2b2b      	cmp	r3, #43	; 0x2b
 800716a:	d078      	beq.n	800725e <_strtod_l+0x286>
 800716c:	2b2d      	cmp	r3, #45	; 0x2d
 800716e:	d07b      	beq.n	8007268 <_strtod_l+0x290>
 8007170:	2700      	movs	r7, #0
 8007172:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007176:	2909      	cmp	r1, #9
 8007178:	f240 8082 	bls.w	8007280 <_strtod_l+0x2a8>
 800717c:	961b      	str	r6, [sp, #108]	; 0x6c
 800717e:	2500      	movs	r5, #0
 8007180:	e09e      	b.n	80072c0 <_strtod_l+0x2e8>
 8007182:	2300      	movs	r3, #0
 8007184:	e7c9      	b.n	800711a <_strtod_l+0x142>
 8007186:	f1bb 0f08 	cmp.w	fp, #8
 800718a:	bfd5      	itete	le
 800718c:	9906      	ldrle	r1, [sp, #24]
 800718e:	9905      	ldrgt	r1, [sp, #20]
 8007190:	fb02 3301 	mlale	r3, r2, r1, r3
 8007194:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007198:	f100 0001 	add.w	r0, r0, #1
 800719c:	bfd4      	ite	le
 800719e:	9306      	strle	r3, [sp, #24]
 80071a0:	9305      	strgt	r3, [sp, #20]
 80071a2:	f10b 0b01 	add.w	fp, fp, #1
 80071a6:	901b      	str	r0, [sp, #108]	; 0x6c
 80071a8:	e7bf      	b.n	800712a <_strtod_l+0x152>
 80071aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071ac:	191a      	adds	r2, r3, r4
 80071ae:	921b      	str	r2, [sp, #108]	; 0x6c
 80071b0:	5d1b      	ldrb	r3, [r3, r4]
 80071b2:	f1bb 0f00 	cmp.w	fp, #0
 80071b6:	d036      	beq.n	8007226 <_strtod_l+0x24e>
 80071b8:	465c      	mov	r4, fp
 80071ba:	9004      	str	r0, [sp, #16]
 80071bc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80071c0:	2a09      	cmp	r2, #9
 80071c2:	d912      	bls.n	80071ea <_strtod_l+0x212>
 80071c4:	2201      	movs	r2, #1
 80071c6:	e7c2      	b.n	800714e <_strtod_l+0x176>
 80071c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071ca:	3001      	adds	r0, #1
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	921b      	str	r2, [sp, #108]	; 0x6c
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b30      	cmp	r3, #48	; 0x30
 80071d4:	d0f8      	beq.n	80071c8 <_strtod_l+0x1f0>
 80071d6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80071da:	2a08      	cmp	r2, #8
 80071dc:	f200 84dc 	bhi.w	8007b98 <_strtod_l+0xbc0>
 80071e0:	9004      	str	r0, [sp, #16]
 80071e2:	2000      	movs	r0, #0
 80071e4:	4604      	mov	r4, r0
 80071e6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80071e8:	9208      	str	r2, [sp, #32]
 80071ea:	3b30      	subs	r3, #48	; 0x30
 80071ec:	f100 0201 	add.w	r2, r0, #1
 80071f0:	d013      	beq.n	800721a <_strtod_l+0x242>
 80071f2:	9904      	ldr	r1, [sp, #16]
 80071f4:	1905      	adds	r5, r0, r4
 80071f6:	4411      	add	r1, r2
 80071f8:	9104      	str	r1, [sp, #16]
 80071fa:	4622      	mov	r2, r4
 80071fc:	210a      	movs	r1, #10
 80071fe:	42aa      	cmp	r2, r5
 8007200:	d113      	bne.n	800722a <_strtod_l+0x252>
 8007202:	1822      	adds	r2, r4, r0
 8007204:	2a08      	cmp	r2, #8
 8007206:	f104 0401 	add.w	r4, r4, #1
 800720a:	4404      	add	r4, r0
 800720c:	dc1b      	bgt.n	8007246 <_strtod_l+0x26e>
 800720e:	220a      	movs	r2, #10
 8007210:	9906      	ldr	r1, [sp, #24]
 8007212:	fb02 3301 	mla	r3, r2, r1, r3
 8007216:	9306      	str	r3, [sp, #24]
 8007218:	2200      	movs	r2, #0
 800721a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800721c:	4610      	mov	r0, r2
 800721e:	1c59      	adds	r1, r3, #1
 8007220:	911b      	str	r1, [sp, #108]	; 0x6c
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	e7ca      	b.n	80071bc <_strtod_l+0x1e4>
 8007226:	4658      	mov	r0, fp
 8007228:	e7d3      	b.n	80071d2 <_strtod_l+0x1fa>
 800722a:	2a08      	cmp	r2, #8
 800722c:	dc04      	bgt.n	8007238 <_strtod_l+0x260>
 800722e:	9f06      	ldr	r7, [sp, #24]
 8007230:	434f      	muls	r7, r1
 8007232:	9706      	str	r7, [sp, #24]
 8007234:	3201      	adds	r2, #1
 8007236:	e7e2      	b.n	80071fe <_strtod_l+0x226>
 8007238:	1c57      	adds	r7, r2, #1
 800723a:	2f10      	cmp	r7, #16
 800723c:	bfde      	ittt	le
 800723e:	9f05      	ldrle	r7, [sp, #20]
 8007240:	434f      	mulle	r7, r1
 8007242:	9705      	strle	r7, [sp, #20]
 8007244:	e7f6      	b.n	8007234 <_strtod_l+0x25c>
 8007246:	2c10      	cmp	r4, #16
 8007248:	bfdf      	itttt	le
 800724a:	220a      	movle	r2, #10
 800724c:	9905      	ldrle	r1, [sp, #20]
 800724e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007252:	9305      	strle	r3, [sp, #20]
 8007254:	e7e0      	b.n	8007218 <_strtod_l+0x240>
 8007256:	2300      	movs	r3, #0
 8007258:	2201      	movs	r2, #1
 800725a:	9304      	str	r3, [sp, #16]
 800725c:	e77c      	b.n	8007158 <_strtod_l+0x180>
 800725e:	2700      	movs	r7, #0
 8007260:	1cb3      	adds	r3, r6, #2
 8007262:	931b      	str	r3, [sp, #108]	; 0x6c
 8007264:	78b3      	ldrb	r3, [r6, #2]
 8007266:	e784      	b.n	8007172 <_strtod_l+0x19a>
 8007268:	2701      	movs	r7, #1
 800726a:	e7f9      	b.n	8007260 <_strtod_l+0x288>
 800726c:	0800ab94 	.word	0x0800ab94
 8007270:	0800a8dc 	.word	0x0800a8dc
 8007274:	7ff00000 	.word	0x7ff00000
 8007278:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800727a:	1c59      	adds	r1, r3, #1
 800727c:	911b      	str	r1, [sp, #108]	; 0x6c
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	2b30      	cmp	r3, #48	; 0x30
 8007282:	d0f9      	beq.n	8007278 <_strtod_l+0x2a0>
 8007284:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007288:	2908      	cmp	r1, #8
 800728a:	f63f af78 	bhi.w	800717e <_strtod_l+0x1a6>
 800728e:	f04f 0e0a 	mov.w	lr, #10
 8007292:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007298:	9309      	str	r3, [sp, #36]	; 0x24
 800729a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800729c:	1c59      	adds	r1, r3, #1
 800729e:	911b      	str	r1, [sp, #108]	; 0x6c
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80072a6:	2d09      	cmp	r5, #9
 80072a8:	d935      	bls.n	8007316 <_strtod_l+0x33e>
 80072aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072ac:	1b49      	subs	r1, r1, r5
 80072ae:	2908      	cmp	r1, #8
 80072b0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80072b4:	dc02      	bgt.n	80072bc <_strtod_l+0x2e4>
 80072b6:	4565      	cmp	r5, ip
 80072b8:	bfa8      	it	ge
 80072ba:	4665      	movge	r5, ip
 80072bc:	b107      	cbz	r7, 80072c0 <_strtod_l+0x2e8>
 80072be:	426d      	negs	r5, r5
 80072c0:	2c00      	cmp	r4, #0
 80072c2:	d14c      	bne.n	800735e <_strtod_l+0x386>
 80072c4:	9907      	ldr	r1, [sp, #28]
 80072c6:	4301      	orrs	r1, r0
 80072c8:	f47f aec7 	bne.w	800705a <_strtod_l+0x82>
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	f47f aee0 	bne.w	8007092 <_strtod_l+0xba>
 80072d2:	2b69      	cmp	r3, #105	; 0x69
 80072d4:	d026      	beq.n	8007324 <_strtod_l+0x34c>
 80072d6:	dc23      	bgt.n	8007320 <_strtod_l+0x348>
 80072d8:	2b49      	cmp	r3, #73	; 0x49
 80072da:	d023      	beq.n	8007324 <_strtod_l+0x34c>
 80072dc:	2b4e      	cmp	r3, #78	; 0x4e
 80072de:	f47f aed8 	bne.w	8007092 <_strtod_l+0xba>
 80072e2:	499c      	ldr	r1, [pc, #624]	; (8007554 <_strtod_l+0x57c>)
 80072e4:	a81b      	add	r0, sp, #108	; 0x6c
 80072e6:	f002 f8e3 	bl	80094b0 <__match>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	f43f aed1 	beq.w	8007092 <_strtod_l+0xba>
 80072f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b28      	cmp	r3, #40	; 0x28
 80072f6:	d12c      	bne.n	8007352 <_strtod_l+0x37a>
 80072f8:	4997      	ldr	r1, [pc, #604]	; (8007558 <_strtod_l+0x580>)
 80072fa:	aa1e      	add	r2, sp, #120	; 0x78
 80072fc:	a81b      	add	r0, sp, #108	; 0x6c
 80072fe:	f002 f8eb 	bl	80094d8 <__hexnan>
 8007302:	2805      	cmp	r0, #5
 8007304:	d125      	bne.n	8007352 <_strtod_l+0x37a>
 8007306:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007308:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800730c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007310:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007314:	e6a1      	b.n	800705a <_strtod_l+0x82>
 8007316:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800731a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800731e:	e7bc      	b.n	800729a <_strtod_l+0x2c2>
 8007320:	2b6e      	cmp	r3, #110	; 0x6e
 8007322:	e7dc      	b.n	80072de <_strtod_l+0x306>
 8007324:	498d      	ldr	r1, [pc, #564]	; (800755c <_strtod_l+0x584>)
 8007326:	a81b      	add	r0, sp, #108	; 0x6c
 8007328:	f002 f8c2 	bl	80094b0 <__match>
 800732c:	2800      	cmp	r0, #0
 800732e:	f43f aeb0 	beq.w	8007092 <_strtod_l+0xba>
 8007332:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007334:	498a      	ldr	r1, [pc, #552]	; (8007560 <_strtod_l+0x588>)
 8007336:	3b01      	subs	r3, #1
 8007338:	a81b      	add	r0, sp, #108	; 0x6c
 800733a:	931b      	str	r3, [sp, #108]	; 0x6c
 800733c:	f002 f8b8 	bl	80094b0 <__match>
 8007340:	b910      	cbnz	r0, 8007348 <_strtod_l+0x370>
 8007342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007344:	3301      	adds	r3, #1
 8007346:	931b      	str	r3, [sp, #108]	; 0x6c
 8007348:	f04f 0800 	mov.w	r8, #0
 800734c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8007570 <_strtod_l+0x598>
 8007350:	e683      	b.n	800705a <_strtod_l+0x82>
 8007352:	4884      	ldr	r0, [pc, #528]	; (8007564 <_strtod_l+0x58c>)
 8007354:	f003 f856 	bl	800a404 <nan>
 8007358:	4680      	mov	r8, r0
 800735a:	4689      	mov	r9, r1
 800735c:	e67d      	b.n	800705a <_strtod_l+0x82>
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	f1bb 0f00 	cmp.w	fp, #0
 8007364:	bf08      	it	eq
 8007366:	46a3      	moveq	fp, r4
 8007368:	1aeb      	subs	r3, r5, r3
 800736a:	2c10      	cmp	r4, #16
 800736c:	9806      	ldr	r0, [sp, #24]
 800736e:	4626      	mov	r6, r4
 8007370:	9307      	str	r3, [sp, #28]
 8007372:	bfa8      	it	ge
 8007374:	2610      	movge	r6, #16
 8007376:	f7f9 f835 	bl	80003e4 <__aeabi_ui2d>
 800737a:	2c09      	cmp	r4, #9
 800737c:	4680      	mov	r8, r0
 800737e:	4689      	mov	r9, r1
 8007380:	dd13      	ble.n	80073aa <_strtod_l+0x3d2>
 8007382:	4b79      	ldr	r3, [pc, #484]	; (8007568 <_strtod_l+0x590>)
 8007384:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007388:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800738c:	f7f9 f8a4 	bl	80004d8 <__aeabi_dmul>
 8007390:	4680      	mov	r8, r0
 8007392:	9805      	ldr	r0, [sp, #20]
 8007394:	4689      	mov	r9, r1
 8007396:	f7f9 f825 	bl	80003e4 <__aeabi_ui2d>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4640      	mov	r0, r8
 80073a0:	4649      	mov	r1, r9
 80073a2:	f7f8 fee3 	bl	800016c <__adddf3>
 80073a6:	4680      	mov	r8, r0
 80073a8:	4689      	mov	r9, r1
 80073aa:	2c0f      	cmp	r4, #15
 80073ac:	dc36      	bgt.n	800741c <_strtod_l+0x444>
 80073ae:	9b07      	ldr	r3, [sp, #28]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f43f ae52 	beq.w	800705a <_strtod_l+0x82>
 80073b6:	dd22      	ble.n	80073fe <_strtod_l+0x426>
 80073b8:	2b16      	cmp	r3, #22
 80073ba:	dc09      	bgt.n	80073d0 <_strtod_l+0x3f8>
 80073bc:	4c6a      	ldr	r4, [pc, #424]	; (8007568 <_strtod_l+0x590>)
 80073be:	4642      	mov	r2, r8
 80073c0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80073c4:	464b      	mov	r3, r9
 80073c6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80073ca:	f7f9 f885 	bl	80004d8 <__aeabi_dmul>
 80073ce:	e7c3      	b.n	8007358 <_strtod_l+0x380>
 80073d0:	9a07      	ldr	r2, [sp, #28]
 80073d2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80073d6:	4293      	cmp	r3, r2
 80073d8:	db20      	blt.n	800741c <_strtod_l+0x444>
 80073da:	4d63      	ldr	r5, [pc, #396]	; (8007568 <_strtod_l+0x590>)
 80073dc:	f1c4 040f 	rsb	r4, r4, #15
 80073e0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80073e4:	4642      	mov	r2, r8
 80073e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ea:	464b      	mov	r3, r9
 80073ec:	f7f9 f874 	bl	80004d8 <__aeabi_dmul>
 80073f0:	9b07      	ldr	r3, [sp, #28]
 80073f2:	1b1c      	subs	r4, r3, r4
 80073f4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80073f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073fc:	e7e5      	b.n	80073ca <_strtod_l+0x3f2>
 80073fe:	9b07      	ldr	r3, [sp, #28]
 8007400:	3316      	adds	r3, #22
 8007402:	db0b      	blt.n	800741c <_strtod_l+0x444>
 8007404:	9b04      	ldr	r3, [sp, #16]
 8007406:	4a58      	ldr	r2, [pc, #352]	; (8007568 <_strtod_l+0x590>)
 8007408:	1b5d      	subs	r5, r3, r5
 800740a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800740e:	4640      	mov	r0, r8
 8007410:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007414:	4649      	mov	r1, r9
 8007416:	f7f9 f989 	bl	800072c <__aeabi_ddiv>
 800741a:	e79d      	b.n	8007358 <_strtod_l+0x380>
 800741c:	9b07      	ldr	r3, [sp, #28]
 800741e:	1ba6      	subs	r6, r4, r6
 8007420:	441e      	add	r6, r3
 8007422:	2e00      	cmp	r6, #0
 8007424:	dd71      	ble.n	800750a <_strtod_l+0x532>
 8007426:	f016 030f 	ands.w	r3, r6, #15
 800742a:	d00a      	beq.n	8007442 <_strtod_l+0x46a>
 800742c:	494e      	ldr	r1, [pc, #312]	; (8007568 <_strtod_l+0x590>)
 800742e:	4642      	mov	r2, r8
 8007430:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007438:	464b      	mov	r3, r9
 800743a:	f7f9 f84d 	bl	80004d8 <__aeabi_dmul>
 800743e:	4680      	mov	r8, r0
 8007440:	4689      	mov	r9, r1
 8007442:	f036 060f 	bics.w	r6, r6, #15
 8007446:	d050      	beq.n	80074ea <_strtod_l+0x512>
 8007448:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800744c:	dd27      	ble.n	800749e <_strtod_l+0x4c6>
 800744e:	f04f 0b00 	mov.w	fp, #0
 8007452:	f8cd b010 	str.w	fp, [sp, #16]
 8007456:	f8cd b020 	str.w	fp, [sp, #32]
 800745a:	f8cd b018 	str.w	fp, [sp, #24]
 800745e:	2322      	movs	r3, #34	; 0x22
 8007460:	f04f 0800 	mov.w	r8, #0
 8007464:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007570 <_strtod_l+0x598>
 8007468:	f8ca 3000 	str.w	r3, [sl]
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	2b00      	cmp	r3, #0
 8007470:	f43f adf3 	beq.w	800705a <_strtod_l+0x82>
 8007474:	4650      	mov	r0, sl
 8007476:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007478:	f002 f9bc 	bl	80097f4 <_Bfree>
 800747c:	4650      	mov	r0, sl
 800747e:	9906      	ldr	r1, [sp, #24]
 8007480:	f002 f9b8 	bl	80097f4 <_Bfree>
 8007484:	4650      	mov	r0, sl
 8007486:	9904      	ldr	r1, [sp, #16]
 8007488:	f002 f9b4 	bl	80097f4 <_Bfree>
 800748c:	4650      	mov	r0, sl
 800748e:	9908      	ldr	r1, [sp, #32]
 8007490:	f002 f9b0 	bl	80097f4 <_Bfree>
 8007494:	4659      	mov	r1, fp
 8007496:	4650      	mov	r0, sl
 8007498:	f002 f9ac 	bl	80097f4 <_Bfree>
 800749c:	e5dd      	b.n	800705a <_strtod_l+0x82>
 800749e:	2300      	movs	r3, #0
 80074a0:	4640      	mov	r0, r8
 80074a2:	4649      	mov	r1, r9
 80074a4:	461f      	mov	r7, r3
 80074a6:	1136      	asrs	r6, r6, #4
 80074a8:	2e01      	cmp	r6, #1
 80074aa:	dc21      	bgt.n	80074f0 <_strtod_l+0x518>
 80074ac:	b10b      	cbz	r3, 80074b2 <_strtod_l+0x4da>
 80074ae:	4680      	mov	r8, r0
 80074b0:	4689      	mov	r9, r1
 80074b2:	4b2e      	ldr	r3, [pc, #184]	; (800756c <_strtod_l+0x594>)
 80074b4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80074b8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80074bc:	4642      	mov	r2, r8
 80074be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074c2:	464b      	mov	r3, r9
 80074c4:	f7f9 f808 	bl	80004d8 <__aeabi_dmul>
 80074c8:	4b29      	ldr	r3, [pc, #164]	; (8007570 <_strtod_l+0x598>)
 80074ca:	460a      	mov	r2, r1
 80074cc:	400b      	ands	r3, r1
 80074ce:	4929      	ldr	r1, [pc, #164]	; (8007574 <_strtod_l+0x59c>)
 80074d0:	4680      	mov	r8, r0
 80074d2:	428b      	cmp	r3, r1
 80074d4:	d8bb      	bhi.n	800744e <_strtod_l+0x476>
 80074d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074da:	428b      	cmp	r3, r1
 80074dc:	bf86      	itte	hi
 80074de:	f04f 38ff 	movhi.w	r8, #4294967295
 80074e2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007578 <_strtod_l+0x5a0>
 80074e6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80074ea:	2300      	movs	r3, #0
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	e07e      	b.n	80075ee <_strtod_l+0x616>
 80074f0:	07f2      	lsls	r2, r6, #31
 80074f2:	d507      	bpl.n	8007504 <_strtod_l+0x52c>
 80074f4:	4b1d      	ldr	r3, [pc, #116]	; (800756c <_strtod_l+0x594>)
 80074f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fe:	f7f8 ffeb 	bl	80004d8 <__aeabi_dmul>
 8007502:	2301      	movs	r3, #1
 8007504:	3701      	adds	r7, #1
 8007506:	1076      	asrs	r6, r6, #1
 8007508:	e7ce      	b.n	80074a8 <_strtod_l+0x4d0>
 800750a:	d0ee      	beq.n	80074ea <_strtod_l+0x512>
 800750c:	4276      	negs	r6, r6
 800750e:	f016 020f 	ands.w	r2, r6, #15
 8007512:	d00a      	beq.n	800752a <_strtod_l+0x552>
 8007514:	4b14      	ldr	r3, [pc, #80]	; (8007568 <_strtod_l+0x590>)
 8007516:	4640      	mov	r0, r8
 8007518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800751c:	4649      	mov	r1, r9
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	f7f9 f903 	bl	800072c <__aeabi_ddiv>
 8007526:	4680      	mov	r8, r0
 8007528:	4689      	mov	r9, r1
 800752a:	1136      	asrs	r6, r6, #4
 800752c:	d0dd      	beq.n	80074ea <_strtod_l+0x512>
 800752e:	2e1f      	cmp	r6, #31
 8007530:	dd24      	ble.n	800757c <_strtod_l+0x5a4>
 8007532:	f04f 0b00 	mov.w	fp, #0
 8007536:	f8cd b010 	str.w	fp, [sp, #16]
 800753a:	f8cd b020 	str.w	fp, [sp, #32]
 800753e:	f8cd b018 	str.w	fp, [sp, #24]
 8007542:	2322      	movs	r3, #34	; 0x22
 8007544:	f04f 0800 	mov.w	r8, #0
 8007548:	f04f 0900 	mov.w	r9, #0
 800754c:	f8ca 3000 	str.w	r3, [sl]
 8007550:	e78c      	b.n	800746c <_strtod_l+0x494>
 8007552:	bf00      	nop
 8007554:	0800a8ae 	.word	0x0800a8ae
 8007558:	0800a8f0 	.word	0x0800a8f0
 800755c:	0800a8a6 	.word	0x0800a8a6
 8007560:	0800aa34 	.word	0x0800aa34
 8007564:	0800a889 	.word	0x0800a889
 8007568:	0800ac30 	.word	0x0800ac30
 800756c:	0800ac08 	.word	0x0800ac08
 8007570:	7ff00000 	.word	0x7ff00000
 8007574:	7ca00000 	.word	0x7ca00000
 8007578:	7fefffff 	.word	0x7fefffff
 800757c:	f016 0310 	ands.w	r3, r6, #16
 8007580:	bf18      	it	ne
 8007582:	236a      	movne	r3, #106	; 0x6a
 8007584:	4640      	mov	r0, r8
 8007586:	9305      	str	r3, [sp, #20]
 8007588:	4649      	mov	r1, r9
 800758a:	2300      	movs	r3, #0
 800758c:	4fb2      	ldr	r7, [pc, #712]	; (8007858 <_strtod_l+0x880>)
 800758e:	07f2      	lsls	r2, r6, #31
 8007590:	d504      	bpl.n	800759c <_strtod_l+0x5c4>
 8007592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007596:	f7f8 ff9f 	bl	80004d8 <__aeabi_dmul>
 800759a:	2301      	movs	r3, #1
 800759c:	1076      	asrs	r6, r6, #1
 800759e:	f107 0708 	add.w	r7, r7, #8
 80075a2:	d1f4      	bne.n	800758e <_strtod_l+0x5b6>
 80075a4:	b10b      	cbz	r3, 80075aa <_strtod_l+0x5d2>
 80075a6:	4680      	mov	r8, r0
 80075a8:	4689      	mov	r9, r1
 80075aa:	9b05      	ldr	r3, [sp, #20]
 80075ac:	b1bb      	cbz	r3, 80075de <_strtod_l+0x606>
 80075ae:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80075b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	4649      	mov	r1, r9
 80075ba:	dd10      	ble.n	80075de <_strtod_l+0x606>
 80075bc:	2b1f      	cmp	r3, #31
 80075be:	f340 812b 	ble.w	8007818 <_strtod_l+0x840>
 80075c2:	2b34      	cmp	r3, #52	; 0x34
 80075c4:	bfd8      	it	le
 80075c6:	f04f 32ff 	movle.w	r2, #4294967295
 80075ca:	f04f 0800 	mov.w	r8, #0
 80075ce:	bfcf      	iteee	gt
 80075d0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80075d4:	3b20      	suble	r3, #32
 80075d6:	fa02 f303 	lslle.w	r3, r2, r3
 80075da:	ea03 0901 	andle.w	r9, r3, r1
 80075de:	2200      	movs	r2, #0
 80075e0:	2300      	movs	r3, #0
 80075e2:	4640      	mov	r0, r8
 80075e4:	4649      	mov	r1, r9
 80075e6:	f7f9 f9df 	bl	80009a8 <__aeabi_dcmpeq>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d1a1      	bne.n	8007532 <_strtod_l+0x55a>
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	465a      	mov	r2, fp
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	4650      	mov	r0, sl
 80075f6:	4623      	mov	r3, r4
 80075f8:	9908      	ldr	r1, [sp, #32]
 80075fa:	f002 f967 	bl	80098cc <__s2b>
 80075fe:	9008      	str	r0, [sp, #32]
 8007600:	2800      	cmp	r0, #0
 8007602:	f43f af24 	beq.w	800744e <_strtod_l+0x476>
 8007606:	9b04      	ldr	r3, [sp, #16]
 8007608:	f04f 0b00 	mov.w	fp, #0
 800760c:	1b5d      	subs	r5, r3, r5
 800760e:	9b07      	ldr	r3, [sp, #28]
 8007610:	f8cd b010 	str.w	fp, [sp, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	bfb4      	ite	lt
 8007618:	462b      	movlt	r3, r5
 800761a:	2300      	movge	r3, #0
 800761c:	930e      	str	r3, [sp, #56]	; 0x38
 800761e:	9b07      	ldr	r3, [sp, #28]
 8007620:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007624:	9316      	str	r3, [sp, #88]	; 0x58
 8007626:	9b08      	ldr	r3, [sp, #32]
 8007628:	4650      	mov	r0, sl
 800762a:	6859      	ldr	r1, [r3, #4]
 800762c:	f002 f8a2 	bl	8009774 <_Balloc>
 8007630:	9006      	str	r0, [sp, #24]
 8007632:	2800      	cmp	r0, #0
 8007634:	f43f af13 	beq.w	800745e <_strtod_l+0x486>
 8007638:	9b08      	ldr	r3, [sp, #32]
 800763a:	300c      	adds	r0, #12
 800763c:	691a      	ldr	r2, [r3, #16]
 800763e:	f103 010c 	add.w	r1, r3, #12
 8007642:	3202      	adds	r2, #2
 8007644:	0092      	lsls	r2, r2, #2
 8007646:	f7fe fbeb 	bl	8005e20 <memcpy>
 800764a:	ab1e      	add	r3, sp, #120	; 0x78
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	ab1d      	add	r3, sp, #116	; 0x74
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	4642      	mov	r2, r8
 8007654:	464b      	mov	r3, r9
 8007656:	4650      	mov	r0, sl
 8007658:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800765c:	f002 fc74 	bl	8009f48 <__d2b>
 8007660:	901c      	str	r0, [sp, #112]	; 0x70
 8007662:	2800      	cmp	r0, #0
 8007664:	f43f aefb 	beq.w	800745e <_strtod_l+0x486>
 8007668:	2101      	movs	r1, #1
 800766a:	4650      	mov	r0, sl
 800766c:	f002 f9c6 	bl	80099fc <__i2b>
 8007670:	4603      	mov	r3, r0
 8007672:	9004      	str	r0, [sp, #16]
 8007674:	2800      	cmp	r0, #0
 8007676:	f43f aef2 	beq.w	800745e <_strtod_l+0x486>
 800767a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800767c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800767e:	2d00      	cmp	r5, #0
 8007680:	bfab      	itete	ge
 8007682:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007684:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007686:	18ee      	addge	r6, r5, r3
 8007688:	1b5c      	sublt	r4, r3, r5
 800768a:	9b05      	ldr	r3, [sp, #20]
 800768c:	bfa8      	it	ge
 800768e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007690:	eba5 0503 	sub.w	r5, r5, r3
 8007694:	4415      	add	r5, r2
 8007696:	4b71      	ldr	r3, [pc, #452]	; (800785c <_strtod_l+0x884>)
 8007698:	f105 35ff 	add.w	r5, r5, #4294967295
 800769c:	bfb8      	it	lt
 800769e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80076a0:	429d      	cmp	r5, r3
 80076a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076a6:	f280 80c9 	bge.w	800783c <_strtod_l+0x864>
 80076aa:	1b5b      	subs	r3, r3, r5
 80076ac:	2b1f      	cmp	r3, #31
 80076ae:	f04f 0701 	mov.w	r7, #1
 80076b2:	eba2 0203 	sub.w	r2, r2, r3
 80076b6:	f300 80b6 	bgt.w	8007826 <_strtod_l+0x84e>
 80076ba:	2500      	movs	r5, #0
 80076bc:	fa07 f303 	lsl.w	r3, r7, r3
 80076c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80076c2:	18b7      	adds	r7, r6, r2
 80076c4:	9b05      	ldr	r3, [sp, #20]
 80076c6:	42be      	cmp	r6, r7
 80076c8:	4414      	add	r4, r2
 80076ca:	441c      	add	r4, r3
 80076cc:	4633      	mov	r3, r6
 80076ce:	bfa8      	it	ge
 80076d0:	463b      	movge	r3, r7
 80076d2:	42a3      	cmp	r3, r4
 80076d4:	bfa8      	it	ge
 80076d6:	4623      	movge	r3, r4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	bfc2      	ittt	gt
 80076dc:	1aff      	subgt	r7, r7, r3
 80076de:	1ae4      	subgt	r4, r4, r3
 80076e0:	1af6      	subgt	r6, r6, r3
 80076e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	dd17      	ble.n	8007718 <_strtod_l+0x740>
 80076e8:	461a      	mov	r2, r3
 80076ea:	4650      	mov	r0, sl
 80076ec:	9904      	ldr	r1, [sp, #16]
 80076ee:	f002 fa3f 	bl	8009b70 <__pow5mult>
 80076f2:	9004      	str	r0, [sp, #16]
 80076f4:	2800      	cmp	r0, #0
 80076f6:	f43f aeb2 	beq.w	800745e <_strtod_l+0x486>
 80076fa:	4601      	mov	r1, r0
 80076fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80076fe:	4650      	mov	r0, sl
 8007700:	f002 f992 	bl	8009a28 <__multiply>
 8007704:	9009      	str	r0, [sp, #36]	; 0x24
 8007706:	2800      	cmp	r0, #0
 8007708:	f43f aea9 	beq.w	800745e <_strtod_l+0x486>
 800770c:	4650      	mov	r0, sl
 800770e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007710:	f002 f870 	bl	80097f4 <_Bfree>
 8007714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007716:	931c      	str	r3, [sp, #112]	; 0x70
 8007718:	2f00      	cmp	r7, #0
 800771a:	f300 8093 	bgt.w	8007844 <_strtod_l+0x86c>
 800771e:	9b07      	ldr	r3, [sp, #28]
 8007720:	2b00      	cmp	r3, #0
 8007722:	dd08      	ble.n	8007736 <_strtod_l+0x75e>
 8007724:	4650      	mov	r0, sl
 8007726:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007728:	9906      	ldr	r1, [sp, #24]
 800772a:	f002 fa21 	bl	8009b70 <__pow5mult>
 800772e:	9006      	str	r0, [sp, #24]
 8007730:	2800      	cmp	r0, #0
 8007732:	f43f ae94 	beq.w	800745e <_strtod_l+0x486>
 8007736:	2c00      	cmp	r4, #0
 8007738:	dd08      	ble.n	800774c <_strtod_l+0x774>
 800773a:	4622      	mov	r2, r4
 800773c:	4650      	mov	r0, sl
 800773e:	9906      	ldr	r1, [sp, #24]
 8007740:	f002 fa70 	bl	8009c24 <__lshift>
 8007744:	9006      	str	r0, [sp, #24]
 8007746:	2800      	cmp	r0, #0
 8007748:	f43f ae89 	beq.w	800745e <_strtod_l+0x486>
 800774c:	2e00      	cmp	r6, #0
 800774e:	dd08      	ble.n	8007762 <_strtod_l+0x78a>
 8007750:	4632      	mov	r2, r6
 8007752:	4650      	mov	r0, sl
 8007754:	9904      	ldr	r1, [sp, #16]
 8007756:	f002 fa65 	bl	8009c24 <__lshift>
 800775a:	9004      	str	r0, [sp, #16]
 800775c:	2800      	cmp	r0, #0
 800775e:	f43f ae7e 	beq.w	800745e <_strtod_l+0x486>
 8007762:	4650      	mov	r0, sl
 8007764:	9a06      	ldr	r2, [sp, #24]
 8007766:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007768:	f002 fae4 	bl	8009d34 <__mdiff>
 800776c:	4683      	mov	fp, r0
 800776e:	2800      	cmp	r0, #0
 8007770:	f43f ae75 	beq.w	800745e <_strtod_l+0x486>
 8007774:	2400      	movs	r4, #0
 8007776:	68c3      	ldr	r3, [r0, #12]
 8007778:	9904      	ldr	r1, [sp, #16]
 800777a:	60c4      	str	r4, [r0, #12]
 800777c:	930d      	str	r3, [sp, #52]	; 0x34
 800777e:	f002 fabd 	bl	8009cfc <__mcmp>
 8007782:	42a0      	cmp	r0, r4
 8007784:	da70      	bge.n	8007868 <_strtod_l+0x890>
 8007786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007788:	ea53 0308 	orrs.w	r3, r3, r8
 800778c:	f040 8096 	bne.w	80078bc <_strtod_l+0x8e4>
 8007790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007794:	2b00      	cmp	r3, #0
 8007796:	f040 8091 	bne.w	80078bc <_strtod_l+0x8e4>
 800779a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800779e:	0d1b      	lsrs	r3, r3, #20
 80077a0:	051b      	lsls	r3, r3, #20
 80077a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077a6:	f240 8089 	bls.w	80078bc <_strtod_l+0x8e4>
 80077aa:	f8db 3014 	ldr.w	r3, [fp, #20]
 80077ae:	b923      	cbnz	r3, 80077ba <_strtod_l+0x7e2>
 80077b0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	f340 8081 	ble.w	80078bc <_strtod_l+0x8e4>
 80077ba:	4659      	mov	r1, fp
 80077bc:	2201      	movs	r2, #1
 80077be:	4650      	mov	r0, sl
 80077c0:	f002 fa30 	bl	8009c24 <__lshift>
 80077c4:	9904      	ldr	r1, [sp, #16]
 80077c6:	4683      	mov	fp, r0
 80077c8:	f002 fa98 	bl	8009cfc <__mcmp>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	dd75      	ble.n	80078bc <_strtod_l+0x8e4>
 80077d0:	9905      	ldr	r1, [sp, #20]
 80077d2:	464b      	mov	r3, r9
 80077d4:	4a22      	ldr	r2, [pc, #136]	; (8007860 <_strtod_l+0x888>)
 80077d6:	2900      	cmp	r1, #0
 80077d8:	f000 8091 	beq.w	80078fe <_strtod_l+0x926>
 80077dc:	ea02 0109 	and.w	r1, r2, r9
 80077e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077e4:	f300 808b 	bgt.w	80078fe <_strtod_l+0x926>
 80077e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077ec:	f77f aea9 	ble.w	8007542 <_strtod_l+0x56a>
 80077f0:	2300      	movs	r3, #0
 80077f2:	4a1c      	ldr	r2, [pc, #112]	; (8007864 <_strtod_l+0x88c>)
 80077f4:	4640      	mov	r0, r8
 80077f6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80077fa:	4649      	mov	r1, r9
 80077fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007800:	f7f8 fe6a 	bl	80004d8 <__aeabi_dmul>
 8007804:	460b      	mov	r3, r1
 8007806:	4303      	orrs	r3, r0
 8007808:	bf08      	it	eq
 800780a:	2322      	moveq	r3, #34	; 0x22
 800780c:	4680      	mov	r8, r0
 800780e:	4689      	mov	r9, r1
 8007810:	bf08      	it	eq
 8007812:	f8ca 3000 	streq.w	r3, [sl]
 8007816:	e62d      	b.n	8007474 <_strtod_l+0x49c>
 8007818:	f04f 32ff 	mov.w	r2, #4294967295
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	ea03 0808 	and.w	r8, r3, r8
 8007824:	e6db      	b.n	80075de <_strtod_l+0x606>
 8007826:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800782a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800782e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007832:	35e2      	adds	r5, #226	; 0xe2
 8007834:	fa07 f505 	lsl.w	r5, r7, r5
 8007838:	970f      	str	r7, [sp, #60]	; 0x3c
 800783a:	e742      	b.n	80076c2 <_strtod_l+0x6ea>
 800783c:	2301      	movs	r3, #1
 800783e:	2500      	movs	r5, #0
 8007840:	930f      	str	r3, [sp, #60]	; 0x3c
 8007842:	e73e      	b.n	80076c2 <_strtod_l+0x6ea>
 8007844:	463a      	mov	r2, r7
 8007846:	4650      	mov	r0, sl
 8007848:	991c      	ldr	r1, [sp, #112]	; 0x70
 800784a:	f002 f9eb 	bl	8009c24 <__lshift>
 800784e:	901c      	str	r0, [sp, #112]	; 0x70
 8007850:	2800      	cmp	r0, #0
 8007852:	f47f af64 	bne.w	800771e <_strtod_l+0x746>
 8007856:	e602      	b.n	800745e <_strtod_l+0x486>
 8007858:	0800a908 	.word	0x0800a908
 800785c:	fffffc02 	.word	0xfffffc02
 8007860:	7ff00000 	.word	0x7ff00000
 8007864:	39500000 	.word	0x39500000
 8007868:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800786c:	d166      	bne.n	800793c <_strtod_l+0x964>
 800786e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007874:	b35a      	cbz	r2, 80078ce <_strtod_l+0x8f6>
 8007876:	4a9c      	ldr	r2, [pc, #624]	; (8007ae8 <_strtod_l+0xb10>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d12c      	bne.n	80078d6 <_strtod_l+0x8fe>
 800787c:	9b05      	ldr	r3, [sp, #20]
 800787e:	4640      	mov	r0, r8
 8007880:	b303      	cbz	r3, 80078c4 <_strtod_l+0x8ec>
 8007882:	464b      	mov	r3, r9
 8007884:	4a99      	ldr	r2, [pc, #612]	; (8007aec <_strtod_l+0xb14>)
 8007886:	f04f 31ff 	mov.w	r1, #4294967295
 800788a:	401a      	ands	r2, r3
 800788c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007890:	d81b      	bhi.n	80078ca <_strtod_l+0x8f2>
 8007892:	0d12      	lsrs	r2, r2, #20
 8007894:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007898:	fa01 f303 	lsl.w	r3, r1, r3
 800789c:	4298      	cmp	r0, r3
 800789e:	d11a      	bne.n	80078d6 <_strtod_l+0x8fe>
 80078a0:	4b93      	ldr	r3, [pc, #588]	; (8007af0 <_strtod_l+0xb18>)
 80078a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d102      	bne.n	80078ae <_strtod_l+0x8d6>
 80078a8:	3001      	adds	r0, #1
 80078aa:	f43f add8 	beq.w	800745e <_strtod_l+0x486>
 80078ae:	f04f 0800 	mov.w	r8, #0
 80078b2:	4b8e      	ldr	r3, [pc, #568]	; (8007aec <_strtod_l+0xb14>)
 80078b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078b6:	401a      	ands	r2, r3
 80078b8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80078bc:	9b05      	ldr	r3, [sp, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d196      	bne.n	80077f0 <_strtod_l+0x818>
 80078c2:	e5d7      	b.n	8007474 <_strtod_l+0x49c>
 80078c4:	f04f 33ff 	mov.w	r3, #4294967295
 80078c8:	e7e8      	b.n	800789c <_strtod_l+0x8c4>
 80078ca:	460b      	mov	r3, r1
 80078cc:	e7e6      	b.n	800789c <_strtod_l+0x8c4>
 80078ce:	ea53 0308 	orrs.w	r3, r3, r8
 80078d2:	f43f af7d 	beq.w	80077d0 <_strtod_l+0x7f8>
 80078d6:	b1e5      	cbz	r5, 8007912 <_strtod_l+0x93a>
 80078d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078da:	421d      	tst	r5, r3
 80078dc:	d0ee      	beq.n	80078bc <_strtod_l+0x8e4>
 80078de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e0:	4640      	mov	r0, r8
 80078e2:	4649      	mov	r1, r9
 80078e4:	9a05      	ldr	r2, [sp, #20]
 80078e6:	b1c3      	cbz	r3, 800791a <_strtod_l+0x942>
 80078e8:	f7ff fb54 	bl	8006f94 <sulp>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078f4:	f7f8 fc3a 	bl	800016c <__adddf3>
 80078f8:	4680      	mov	r8, r0
 80078fa:	4689      	mov	r9, r1
 80078fc:	e7de      	b.n	80078bc <_strtod_l+0x8e4>
 80078fe:	4013      	ands	r3, r2
 8007900:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007904:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007908:	f04f 38ff 	mov.w	r8, #4294967295
 800790c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007910:	e7d4      	b.n	80078bc <_strtod_l+0x8e4>
 8007912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007914:	ea13 0f08 	tst.w	r3, r8
 8007918:	e7e0      	b.n	80078dc <_strtod_l+0x904>
 800791a:	f7ff fb3b 	bl	8006f94 <sulp>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007926:	f7f8 fc1f 	bl	8000168 <__aeabi_dsub>
 800792a:	2200      	movs	r2, #0
 800792c:	2300      	movs	r3, #0
 800792e:	4680      	mov	r8, r0
 8007930:	4689      	mov	r9, r1
 8007932:	f7f9 f839 	bl	80009a8 <__aeabi_dcmpeq>
 8007936:	2800      	cmp	r0, #0
 8007938:	d0c0      	beq.n	80078bc <_strtod_l+0x8e4>
 800793a:	e602      	b.n	8007542 <_strtod_l+0x56a>
 800793c:	4658      	mov	r0, fp
 800793e:	9904      	ldr	r1, [sp, #16]
 8007940:	f002 fb5e 	bl	800a000 <__ratio>
 8007944:	2200      	movs	r2, #0
 8007946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800794a:	4606      	mov	r6, r0
 800794c:	460f      	mov	r7, r1
 800794e:	f7f9 f83f 	bl	80009d0 <__aeabi_dcmple>
 8007952:	2800      	cmp	r0, #0
 8007954:	d075      	beq.n	8007a42 <_strtod_l+0xa6a>
 8007956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007958:	2b00      	cmp	r3, #0
 800795a:	d047      	beq.n	80079ec <_strtod_l+0xa14>
 800795c:	2600      	movs	r6, #0
 800795e:	4f65      	ldr	r7, [pc, #404]	; (8007af4 <_strtod_l+0xb1c>)
 8007960:	4d64      	ldr	r5, [pc, #400]	; (8007af4 <_strtod_l+0xb1c>)
 8007962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007968:	0d1b      	lsrs	r3, r3, #20
 800796a:	051b      	lsls	r3, r3, #20
 800796c:	930f      	str	r3, [sp, #60]	; 0x3c
 800796e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007970:	4b61      	ldr	r3, [pc, #388]	; (8007af8 <_strtod_l+0xb20>)
 8007972:	429a      	cmp	r2, r3
 8007974:	f040 80c8 	bne.w	8007b08 <_strtod_l+0xb30>
 8007978:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800797c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007982:	4640      	mov	r0, r8
 8007984:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007988:	4649      	mov	r1, r9
 800798a:	f002 fa63 	bl	8009e54 <__ulp>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4630      	mov	r0, r6
 8007994:	4639      	mov	r1, r7
 8007996:	f7f8 fd9f 	bl	80004d8 <__aeabi_dmul>
 800799a:	4642      	mov	r2, r8
 800799c:	464b      	mov	r3, r9
 800799e:	f7f8 fbe5 	bl	800016c <__adddf3>
 80079a2:	460b      	mov	r3, r1
 80079a4:	4951      	ldr	r1, [pc, #324]	; (8007aec <_strtod_l+0xb14>)
 80079a6:	4a55      	ldr	r2, [pc, #340]	; (8007afc <_strtod_l+0xb24>)
 80079a8:	4019      	ands	r1, r3
 80079aa:	4291      	cmp	r1, r2
 80079ac:	4680      	mov	r8, r0
 80079ae:	d95e      	bls.n	8007a6e <_strtod_l+0xa96>
 80079b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d103      	bne.n	80079c2 <_strtod_l+0x9ea>
 80079ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079bc:	3301      	adds	r3, #1
 80079be:	f43f ad4e 	beq.w	800745e <_strtod_l+0x486>
 80079c2:	f04f 38ff 	mov.w	r8, #4294967295
 80079c6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007af0 <_strtod_l+0xb18>
 80079ca:	4650      	mov	r0, sl
 80079cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079ce:	f001 ff11 	bl	80097f4 <_Bfree>
 80079d2:	4650      	mov	r0, sl
 80079d4:	9906      	ldr	r1, [sp, #24]
 80079d6:	f001 ff0d 	bl	80097f4 <_Bfree>
 80079da:	4650      	mov	r0, sl
 80079dc:	9904      	ldr	r1, [sp, #16]
 80079de:	f001 ff09 	bl	80097f4 <_Bfree>
 80079e2:	4659      	mov	r1, fp
 80079e4:	4650      	mov	r0, sl
 80079e6:	f001 ff05 	bl	80097f4 <_Bfree>
 80079ea:	e61c      	b.n	8007626 <_strtod_l+0x64e>
 80079ec:	f1b8 0f00 	cmp.w	r8, #0
 80079f0:	d119      	bne.n	8007a26 <_strtod_l+0xa4e>
 80079f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079f8:	b9e3      	cbnz	r3, 8007a34 <_strtod_l+0xa5c>
 80079fa:	2200      	movs	r2, #0
 80079fc:	4630      	mov	r0, r6
 80079fe:	4639      	mov	r1, r7
 8007a00:	4b3c      	ldr	r3, [pc, #240]	; (8007af4 <_strtod_l+0xb1c>)
 8007a02:	f7f8 ffdb 	bl	80009bc <__aeabi_dcmplt>
 8007a06:	b9c8      	cbnz	r0, 8007a3c <_strtod_l+0xa64>
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	4b3c      	ldr	r3, [pc, #240]	; (8007b00 <_strtod_l+0xb28>)
 8007a10:	f7f8 fd62 	bl	80004d8 <__aeabi_dmul>
 8007a14:	4604      	mov	r4, r0
 8007a16:	460d      	mov	r5, r1
 8007a18:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007a1c:	9418      	str	r4, [sp, #96]	; 0x60
 8007a1e:	9319      	str	r3, [sp, #100]	; 0x64
 8007a20:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007a24:	e79d      	b.n	8007962 <_strtod_l+0x98a>
 8007a26:	f1b8 0f01 	cmp.w	r8, #1
 8007a2a:	d103      	bne.n	8007a34 <_strtod_l+0xa5c>
 8007a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f43f ad87 	beq.w	8007542 <_strtod_l+0x56a>
 8007a34:	2600      	movs	r6, #0
 8007a36:	2400      	movs	r4, #0
 8007a38:	4f32      	ldr	r7, [pc, #200]	; (8007b04 <_strtod_l+0xb2c>)
 8007a3a:	e791      	b.n	8007960 <_strtod_l+0x988>
 8007a3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007a3e:	4d30      	ldr	r5, [pc, #192]	; (8007b00 <_strtod_l+0xb28>)
 8007a40:	e7ea      	b.n	8007a18 <_strtod_l+0xa40>
 8007a42:	4b2f      	ldr	r3, [pc, #188]	; (8007b00 <_strtod_l+0xb28>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	4630      	mov	r0, r6
 8007a48:	4639      	mov	r1, r7
 8007a4a:	f7f8 fd45 	bl	80004d8 <__aeabi_dmul>
 8007a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	b933      	cbnz	r3, 8007a64 <_strtod_l+0xa8c>
 8007a56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a5a:	9010      	str	r0, [sp, #64]	; 0x40
 8007a5c:	9311      	str	r3, [sp, #68]	; 0x44
 8007a5e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007a62:	e77e      	b.n	8007962 <_strtod_l+0x98a>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a6c:	e7f7      	b.n	8007a5e <_strtod_l+0xa86>
 8007a6e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007a72:	9b05      	ldr	r3, [sp, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1a8      	bne.n	80079ca <_strtod_l+0x9f2>
 8007a78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a7e:	0d1b      	lsrs	r3, r3, #20
 8007a80:	051b      	lsls	r3, r3, #20
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d1a1      	bne.n	80079ca <_strtod_l+0x9f2>
 8007a86:	4620      	mov	r0, r4
 8007a88:	4629      	mov	r1, r5
 8007a8a:	f7f9 facb 	bl	8001024 <__aeabi_d2lz>
 8007a8e:	f7f8 fcf5 	bl	800047c <__aeabi_l2d>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4620      	mov	r0, r4
 8007a98:	4629      	mov	r1, r5
 8007a9a:	f7f8 fb65 	bl	8000168 <__aeabi_dsub>
 8007a9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007aa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007aa4:	ea43 0308 	orr.w	r3, r3, r8
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	4604      	mov	r4, r0
 8007aac:	460d      	mov	r5, r1
 8007aae:	d066      	beq.n	8007b7e <_strtod_l+0xba6>
 8007ab0:	a309      	add	r3, pc, #36	; (adr r3, 8007ad8 <_strtod_l+0xb00>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	f7f8 ff81 	bl	80009bc <__aeabi_dcmplt>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f47f acda 	bne.w	8007474 <_strtod_l+0x49c>
 8007ac0:	a307      	add	r3, pc, #28	; (adr r3, 8007ae0 <_strtod_l+0xb08>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7f8 ff95 	bl	80009f8 <__aeabi_dcmpgt>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	f43f af7b 	beq.w	80079ca <_strtod_l+0x9f2>
 8007ad4:	e4ce      	b.n	8007474 <_strtod_l+0x49c>
 8007ad6:	bf00      	nop
 8007ad8:	94a03595 	.word	0x94a03595
 8007adc:	3fdfffff 	.word	0x3fdfffff
 8007ae0:	35afe535 	.word	0x35afe535
 8007ae4:	3fe00000 	.word	0x3fe00000
 8007ae8:	000fffff 	.word	0x000fffff
 8007aec:	7ff00000 	.word	0x7ff00000
 8007af0:	7fefffff 	.word	0x7fefffff
 8007af4:	3ff00000 	.word	0x3ff00000
 8007af8:	7fe00000 	.word	0x7fe00000
 8007afc:	7c9fffff 	.word	0x7c9fffff
 8007b00:	3fe00000 	.word	0x3fe00000
 8007b04:	bff00000 	.word	0xbff00000
 8007b08:	9b05      	ldr	r3, [sp, #20]
 8007b0a:	b313      	cbz	r3, 8007b52 <_strtod_l+0xb7a>
 8007b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b12:	d81e      	bhi.n	8007b52 <_strtod_l+0xb7a>
 8007b14:	a326      	add	r3, pc, #152	; (adr r3, 8007bb0 <_strtod_l+0xbd8>)
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f8 ff57 	bl	80009d0 <__aeabi_dcmple>
 8007b22:	b190      	cbz	r0, 8007b4a <_strtod_l+0xb72>
 8007b24:	4629      	mov	r1, r5
 8007b26:	4620      	mov	r0, r4
 8007b28:	f7f8 ffae 	bl	8000a88 <__aeabi_d2uiz>
 8007b2c:	2801      	cmp	r0, #1
 8007b2e:	bf38      	it	cc
 8007b30:	2001      	movcc	r0, #1
 8007b32:	f7f8 fc57 	bl	80003e4 <__aeabi_ui2d>
 8007b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b38:	4604      	mov	r4, r0
 8007b3a:	460d      	mov	r5, r1
 8007b3c:	b9d3      	cbnz	r3, 8007b74 <_strtod_l+0xb9c>
 8007b3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b42:	9012      	str	r0, [sp, #72]	; 0x48
 8007b44:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b46:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007b4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b4c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007b50:	1a9f      	subs	r7, r3, r2
 8007b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b56:	f002 f97d 	bl	8009e54 <__ulp>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4630      	mov	r0, r6
 8007b60:	4639      	mov	r1, r7
 8007b62:	f7f8 fcb9 	bl	80004d8 <__aeabi_dmul>
 8007b66:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b6a:	f7f8 faff 	bl	800016c <__adddf3>
 8007b6e:	4680      	mov	r8, r0
 8007b70:	4689      	mov	r9, r1
 8007b72:	e77e      	b.n	8007a72 <_strtod_l+0xa9a>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007b7c:	e7e3      	b.n	8007b46 <_strtod_l+0xb6e>
 8007b7e:	a30e      	add	r3, pc, #56	; (adr r3, 8007bb8 <_strtod_l+0xbe0>)
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f7f8 ff1a 	bl	80009bc <__aeabi_dcmplt>
 8007b88:	e7a1      	b.n	8007ace <_strtod_l+0xaf6>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	f7ff ba65 	b.w	8007062 <_strtod_l+0x8a>
 8007b98:	2b65      	cmp	r3, #101	; 0x65
 8007b9a:	f43f ab5c 	beq.w	8007256 <_strtod_l+0x27e>
 8007b9e:	2b45      	cmp	r3, #69	; 0x45
 8007ba0:	f43f ab59 	beq.w	8007256 <_strtod_l+0x27e>
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f7ff bb8d 	b.w	80072c4 <_strtod_l+0x2ec>
 8007baa:	bf00      	nop
 8007bac:	f3af 8000 	nop.w
 8007bb0:	ffc00000 	.word	0xffc00000
 8007bb4:	41dfffff 	.word	0x41dfffff
 8007bb8:	94a03595 	.word	0x94a03595
 8007bbc:	3fcfffff 	.word	0x3fcfffff

08007bc0 <_strtod_r>:
 8007bc0:	4b01      	ldr	r3, [pc, #4]	; (8007bc8 <_strtod_r+0x8>)
 8007bc2:	f7ff ba09 	b.w	8006fd8 <_strtod_l>
 8007bc6:	bf00      	nop
 8007bc8:	200000b4 	.word	0x200000b4

08007bcc <_strtol_l.isra.0>:
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd2:	4686      	mov	lr, r0
 8007bd4:	d001      	beq.n	8007bda <_strtol_l.isra.0+0xe>
 8007bd6:	2b24      	cmp	r3, #36	; 0x24
 8007bd8:	d906      	bls.n	8007be8 <_strtol_l.isra.0+0x1c>
 8007bda:	f7fe f8dd 	bl	8005d98 <__errno>
 8007bde:	2316      	movs	r3, #22
 8007be0:	6003      	str	r3, [r0, #0]
 8007be2:	2000      	movs	r0, #0
 8007be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be8:	468c      	mov	ip, r1
 8007bea:	4e3a      	ldr	r6, [pc, #232]	; (8007cd4 <_strtol_l.isra.0+0x108>)
 8007bec:	4660      	mov	r0, ip
 8007bee:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007bf2:	5da5      	ldrb	r5, [r4, r6]
 8007bf4:	f015 0508 	ands.w	r5, r5, #8
 8007bf8:	d1f8      	bne.n	8007bec <_strtol_l.isra.0+0x20>
 8007bfa:	2c2d      	cmp	r4, #45	; 0x2d
 8007bfc:	d133      	bne.n	8007c66 <_strtol_l.isra.0+0x9a>
 8007bfe:	f04f 0801 	mov.w	r8, #1
 8007c02:	f89c 4000 	ldrb.w	r4, [ip]
 8007c06:	f100 0c02 	add.w	ip, r0, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d05d      	beq.n	8007cca <_strtol_l.isra.0+0xfe>
 8007c0e:	2b10      	cmp	r3, #16
 8007c10:	d10c      	bne.n	8007c2c <_strtol_l.isra.0+0x60>
 8007c12:	2c30      	cmp	r4, #48	; 0x30
 8007c14:	d10a      	bne.n	8007c2c <_strtol_l.isra.0+0x60>
 8007c16:	f89c 0000 	ldrb.w	r0, [ip]
 8007c1a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007c1e:	2858      	cmp	r0, #88	; 0x58
 8007c20:	d14e      	bne.n	8007cc0 <_strtol_l.isra.0+0xf4>
 8007c22:	2310      	movs	r3, #16
 8007c24:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007c28:	f10c 0c02 	add.w	ip, ip, #2
 8007c2c:	2500      	movs	r5, #0
 8007c2e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8007c32:	3f01      	subs	r7, #1
 8007c34:	fbb7 f9f3 	udiv	r9, r7, r3
 8007c38:	4628      	mov	r0, r5
 8007c3a:	fb03 7a19 	mls	sl, r3, r9, r7
 8007c3e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007c42:	2e09      	cmp	r6, #9
 8007c44:	d818      	bhi.n	8007c78 <_strtol_l.isra.0+0xac>
 8007c46:	4634      	mov	r4, r6
 8007c48:	42a3      	cmp	r3, r4
 8007c4a:	dd24      	ble.n	8007c96 <_strtol_l.isra.0+0xca>
 8007c4c:	2d00      	cmp	r5, #0
 8007c4e:	db1f      	blt.n	8007c90 <_strtol_l.isra.0+0xc4>
 8007c50:	4581      	cmp	r9, r0
 8007c52:	d31d      	bcc.n	8007c90 <_strtol_l.isra.0+0xc4>
 8007c54:	d101      	bne.n	8007c5a <_strtol_l.isra.0+0x8e>
 8007c56:	45a2      	cmp	sl, r4
 8007c58:	db1a      	blt.n	8007c90 <_strtol_l.isra.0+0xc4>
 8007c5a:	2501      	movs	r5, #1
 8007c5c:	fb00 4003 	mla	r0, r0, r3, r4
 8007c60:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007c64:	e7eb      	b.n	8007c3e <_strtol_l.isra.0+0x72>
 8007c66:	2c2b      	cmp	r4, #43	; 0x2b
 8007c68:	bf08      	it	eq
 8007c6a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007c6e:	46a8      	mov	r8, r5
 8007c70:	bf08      	it	eq
 8007c72:	f100 0c02 	addeq.w	ip, r0, #2
 8007c76:	e7c8      	b.n	8007c0a <_strtol_l.isra.0+0x3e>
 8007c78:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007c7c:	2e19      	cmp	r6, #25
 8007c7e:	d801      	bhi.n	8007c84 <_strtol_l.isra.0+0xb8>
 8007c80:	3c37      	subs	r4, #55	; 0x37
 8007c82:	e7e1      	b.n	8007c48 <_strtol_l.isra.0+0x7c>
 8007c84:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007c88:	2e19      	cmp	r6, #25
 8007c8a:	d804      	bhi.n	8007c96 <_strtol_l.isra.0+0xca>
 8007c8c:	3c57      	subs	r4, #87	; 0x57
 8007c8e:	e7db      	b.n	8007c48 <_strtol_l.isra.0+0x7c>
 8007c90:	f04f 35ff 	mov.w	r5, #4294967295
 8007c94:	e7e4      	b.n	8007c60 <_strtol_l.isra.0+0x94>
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	da08      	bge.n	8007cac <_strtol_l.isra.0+0xe0>
 8007c9a:	2322      	movs	r3, #34	; 0x22
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	f8ce 3000 	str.w	r3, [lr]
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	d09e      	beq.n	8007be4 <_strtol_l.isra.0+0x18>
 8007ca6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007caa:	e007      	b.n	8007cbc <_strtol_l.isra.0+0xf0>
 8007cac:	f1b8 0f00 	cmp.w	r8, #0
 8007cb0:	d000      	beq.n	8007cb4 <_strtol_l.isra.0+0xe8>
 8007cb2:	4240      	negs	r0, r0
 8007cb4:	2a00      	cmp	r2, #0
 8007cb6:	d095      	beq.n	8007be4 <_strtol_l.isra.0+0x18>
 8007cb8:	2d00      	cmp	r5, #0
 8007cba:	d1f4      	bne.n	8007ca6 <_strtol_l.isra.0+0xda>
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	e791      	b.n	8007be4 <_strtol_l.isra.0+0x18>
 8007cc0:	2430      	movs	r4, #48	; 0x30
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1b2      	bne.n	8007c2c <_strtol_l.isra.0+0x60>
 8007cc6:	2308      	movs	r3, #8
 8007cc8:	e7b0      	b.n	8007c2c <_strtol_l.isra.0+0x60>
 8007cca:	2c30      	cmp	r4, #48	; 0x30
 8007ccc:	d0a3      	beq.n	8007c16 <_strtol_l.isra.0+0x4a>
 8007cce:	230a      	movs	r3, #10
 8007cd0:	e7ac      	b.n	8007c2c <_strtol_l.isra.0+0x60>
 8007cd2:	bf00      	nop
 8007cd4:	0800a931 	.word	0x0800a931

08007cd8 <_strtol_r>:
 8007cd8:	f7ff bf78 	b.w	8007bcc <_strtol_l.isra.0>

08007cdc <_vsniprintf_r>:
 8007cdc:	b530      	push	{r4, r5, lr}
 8007cde:	1e14      	subs	r4, r2, #0
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	b09b      	sub	sp, #108	; 0x6c
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	da05      	bge.n	8007cf4 <_vsniprintf_r+0x18>
 8007ce8:	238b      	movs	r3, #139	; 0x8b
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295
 8007cee:	602b      	str	r3, [r5, #0]
 8007cf0:	b01b      	add	sp, #108	; 0x6c
 8007cf2:	bd30      	pop	{r4, r5, pc}
 8007cf4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007cf8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007cfc:	bf0c      	ite	eq
 8007cfe:	4623      	moveq	r3, r4
 8007d00:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d04:	9302      	str	r3, [sp, #8]
 8007d06:	9305      	str	r3, [sp, #20]
 8007d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	9100      	str	r1, [sp, #0]
 8007d10:	9104      	str	r1, [sp, #16]
 8007d12:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007d16:	4669      	mov	r1, sp
 8007d18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f002 fa72 	bl	800a204 <_svfiprintf_r>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	bfbc      	itt	lt
 8007d24:	238b      	movlt	r3, #139	; 0x8b
 8007d26:	602b      	strlt	r3, [r5, #0]
 8007d28:	2c00      	cmp	r4, #0
 8007d2a:	d0e1      	beq.n	8007cf0 <_vsniprintf_r+0x14>
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	9b00      	ldr	r3, [sp, #0]
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	e7dd      	b.n	8007cf0 <_vsniprintf_r+0x14>

08007d34 <vsniprintf>:
 8007d34:	b507      	push	{r0, r1, r2, lr}
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	460a      	mov	r2, r1
 8007d3c:	4601      	mov	r1, r0
 8007d3e:	4803      	ldr	r0, [pc, #12]	; (8007d4c <vsniprintf+0x18>)
 8007d40:	6800      	ldr	r0, [r0, #0]
 8007d42:	f7ff ffcb 	bl	8007cdc <_vsniprintf_r>
 8007d46:	b003      	add	sp, #12
 8007d48:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d4c:	2000004c 	.word	0x2000004c

08007d50 <__swbuf_r>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	460e      	mov	r6, r1
 8007d54:	4614      	mov	r4, r2
 8007d56:	4605      	mov	r5, r0
 8007d58:	b118      	cbz	r0, 8007d62 <__swbuf_r+0x12>
 8007d5a:	6983      	ldr	r3, [r0, #24]
 8007d5c:	b90b      	cbnz	r3, 8007d62 <__swbuf_r+0x12>
 8007d5e:	f001 f853 	bl	8008e08 <__sinit>
 8007d62:	4b21      	ldr	r3, [pc, #132]	; (8007de8 <__swbuf_r+0x98>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	d12b      	bne.n	8007dc0 <__swbuf_r+0x70>
 8007d68:	686c      	ldr	r4, [r5, #4]
 8007d6a:	69a3      	ldr	r3, [r4, #24]
 8007d6c:	60a3      	str	r3, [r4, #8]
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	071a      	lsls	r2, r3, #28
 8007d72:	d52f      	bpl.n	8007dd4 <__swbuf_r+0x84>
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	b36b      	cbz	r3, 8007dd4 <__swbuf_r+0x84>
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	6820      	ldr	r0, [r4, #0]
 8007d7c:	b2f6      	uxtb	r6, r6
 8007d7e:	1ac0      	subs	r0, r0, r3
 8007d80:	6963      	ldr	r3, [r4, #20]
 8007d82:	4637      	mov	r7, r6
 8007d84:	4283      	cmp	r3, r0
 8007d86:	dc04      	bgt.n	8007d92 <__swbuf_r+0x42>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 ffa8 	bl	8008ce0 <_fflush_r>
 8007d90:	bb30      	cbnz	r0, 8007de0 <__swbuf_r+0x90>
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	3001      	adds	r0, #1
 8007d96:	3b01      	subs	r3, #1
 8007d98:	60a3      	str	r3, [r4, #8]
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	6022      	str	r2, [r4, #0]
 8007da0:	701e      	strb	r6, [r3, #0]
 8007da2:	6963      	ldr	r3, [r4, #20]
 8007da4:	4283      	cmp	r3, r0
 8007da6:	d004      	beq.n	8007db2 <__swbuf_r+0x62>
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	07db      	lsls	r3, r3, #31
 8007dac:	d506      	bpl.n	8007dbc <__swbuf_r+0x6c>
 8007dae:	2e0a      	cmp	r6, #10
 8007db0:	d104      	bne.n	8007dbc <__swbuf_r+0x6c>
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 ff93 	bl	8008ce0 <_fflush_r>
 8007dba:	b988      	cbnz	r0, 8007de0 <__swbuf_r+0x90>
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <__swbuf_r+0x9c>)
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	d101      	bne.n	8007dca <__swbuf_r+0x7a>
 8007dc6:	68ac      	ldr	r4, [r5, #8]
 8007dc8:	e7cf      	b.n	8007d6a <__swbuf_r+0x1a>
 8007dca:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <__swbuf_r+0xa0>)
 8007dcc:	429c      	cmp	r4, r3
 8007dce:	bf08      	it	eq
 8007dd0:	68ec      	ldreq	r4, [r5, #12]
 8007dd2:	e7ca      	b.n	8007d6a <__swbuf_r+0x1a>
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 f80c 	bl	8007df4 <__swsetup_r>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d0cb      	beq.n	8007d78 <__swbuf_r+0x28>
 8007de0:	f04f 37ff 	mov.w	r7, #4294967295
 8007de4:	e7ea      	b.n	8007dbc <__swbuf_r+0x6c>
 8007de6:	bf00      	nop
 8007de8:	0800aae8 	.word	0x0800aae8
 8007dec:	0800ab08 	.word	0x0800ab08
 8007df0:	0800aac8 	.word	0x0800aac8

08007df4 <__swsetup_r>:
 8007df4:	4b32      	ldr	r3, [pc, #200]	; (8007ec0 <__swsetup_r+0xcc>)
 8007df6:	b570      	push	{r4, r5, r6, lr}
 8007df8:	681d      	ldr	r5, [r3, #0]
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	b125      	cbz	r5, 8007e0a <__swsetup_r+0x16>
 8007e00:	69ab      	ldr	r3, [r5, #24]
 8007e02:	b913      	cbnz	r3, 8007e0a <__swsetup_r+0x16>
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 ffff 	bl	8008e08 <__sinit>
 8007e0a:	4b2e      	ldr	r3, [pc, #184]	; (8007ec4 <__swsetup_r+0xd0>)
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	d10f      	bne.n	8007e30 <__swsetup_r+0x3c>
 8007e10:	686c      	ldr	r4, [r5, #4]
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e18:	0719      	lsls	r1, r3, #28
 8007e1a:	d42c      	bmi.n	8007e76 <__swsetup_r+0x82>
 8007e1c:	06dd      	lsls	r5, r3, #27
 8007e1e:	d411      	bmi.n	8007e44 <__swsetup_r+0x50>
 8007e20:	2309      	movs	r3, #9
 8007e22:	6033      	str	r3, [r6, #0]
 8007e24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	e03e      	b.n	8007eae <__swsetup_r+0xba>
 8007e30:	4b25      	ldr	r3, [pc, #148]	; (8007ec8 <__swsetup_r+0xd4>)
 8007e32:	429c      	cmp	r4, r3
 8007e34:	d101      	bne.n	8007e3a <__swsetup_r+0x46>
 8007e36:	68ac      	ldr	r4, [r5, #8]
 8007e38:	e7eb      	b.n	8007e12 <__swsetup_r+0x1e>
 8007e3a:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <__swsetup_r+0xd8>)
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	bf08      	it	eq
 8007e40:	68ec      	ldreq	r4, [r5, #12]
 8007e42:	e7e6      	b.n	8007e12 <__swsetup_r+0x1e>
 8007e44:	0758      	lsls	r0, r3, #29
 8007e46:	d512      	bpl.n	8007e6e <__swsetup_r+0x7a>
 8007e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e4a:	b141      	cbz	r1, 8007e5e <__swsetup_r+0x6a>
 8007e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d002      	beq.n	8007e5a <__swsetup_r+0x66>
 8007e54:	4630      	mov	r0, r6
 8007e56:	f7fd fff9 	bl	8005e4c <_free_r>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e64:	81a3      	strh	r3, [r4, #12]
 8007e66:	2300      	movs	r3, #0
 8007e68:	6063      	str	r3, [r4, #4]
 8007e6a:	6923      	ldr	r3, [r4, #16]
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	f043 0308 	orr.w	r3, r3, #8
 8007e74:	81a3      	strh	r3, [r4, #12]
 8007e76:	6923      	ldr	r3, [r4, #16]
 8007e78:	b94b      	cbnz	r3, 8007e8e <__swsetup_r+0x9a>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e84:	d003      	beq.n	8007e8e <__swsetup_r+0x9a>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f001 fbed 	bl	8009668 <__smakebuf_r>
 8007e8e:	89a0      	ldrh	r0, [r4, #12]
 8007e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e94:	f010 0301 	ands.w	r3, r0, #1
 8007e98:	d00a      	beq.n	8007eb0 <__swsetup_r+0xbc>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60a3      	str	r3, [r4, #8]
 8007e9e:	6963      	ldr	r3, [r4, #20]
 8007ea0:	425b      	negs	r3, r3
 8007ea2:	61a3      	str	r3, [r4, #24]
 8007ea4:	6923      	ldr	r3, [r4, #16]
 8007ea6:	b943      	cbnz	r3, 8007eba <__swsetup_r+0xc6>
 8007ea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007eac:	d1ba      	bne.n	8007e24 <__swsetup_r+0x30>
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	0781      	lsls	r1, r0, #30
 8007eb2:	bf58      	it	pl
 8007eb4:	6963      	ldrpl	r3, [r4, #20]
 8007eb6:	60a3      	str	r3, [r4, #8]
 8007eb8:	e7f4      	b.n	8007ea4 <__swsetup_r+0xb0>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e7f7      	b.n	8007eae <__swsetup_r+0xba>
 8007ebe:	bf00      	nop
 8007ec0:	2000004c 	.word	0x2000004c
 8007ec4:	0800aae8 	.word	0x0800aae8
 8007ec8:	0800ab08 	.word	0x0800ab08
 8007ecc:	0800aac8 	.word	0x0800aac8

08007ed0 <abort>:
 8007ed0:	2006      	movs	r0, #6
 8007ed2:	b508      	push	{r3, lr}
 8007ed4:	f002 fac4 	bl	800a460 <raise>
 8007ed8:	2001      	movs	r0, #1
 8007eda:	f7fa f92e 	bl	800213a <_exit>

08007ede <quorem>:
 8007ede:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee2:	6903      	ldr	r3, [r0, #16]
 8007ee4:	690c      	ldr	r4, [r1, #16]
 8007ee6:	4607      	mov	r7, r0
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	f2c0 8083 	blt.w	8007ff4 <quorem+0x116>
 8007eee:	3c01      	subs	r4, #1
 8007ef0:	f100 0514 	add.w	r5, r0, #20
 8007ef4:	f101 0814 	add.w	r8, r1, #20
 8007ef8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f06:	3301      	adds	r3, #1
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f0e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f16:	d332      	bcc.n	8007f7e <quorem+0xa0>
 8007f18:	f04f 0e00 	mov.w	lr, #0
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	46ac      	mov	ip, r5
 8007f20:	46f2      	mov	sl, lr
 8007f22:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f26:	b293      	uxth	r3, r2
 8007f28:	fb06 e303 	mla	r3, r6, r3, lr
 8007f2c:	0c12      	lsrs	r2, r2, #16
 8007f2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f32:	fb06 e202 	mla	r2, r6, r2, lr
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	ebaa 0303 	sub.w	r3, sl, r3
 8007f3c:	f8dc a000 	ldr.w	sl, [ip]
 8007f40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f44:	fa1f fa8a 	uxth.w	sl, sl
 8007f48:	4453      	add	r3, sl
 8007f4a:	fa1f fa82 	uxth.w	sl, r2
 8007f4e:	f8dc 2000 	ldr.w	r2, [ip]
 8007f52:	4581      	cmp	r9, r0
 8007f54:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007f58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f66:	f84c 3b04 	str.w	r3, [ip], #4
 8007f6a:	d2da      	bcs.n	8007f22 <quorem+0x44>
 8007f6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f70:	b92b      	cbnz	r3, 8007f7e <quorem+0xa0>
 8007f72:	9b01      	ldr	r3, [sp, #4]
 8007f74:	3b04      	subs	r3, #4
 8007f76:	429d      	cmp	r5, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	d32f      	bcc.n	8007fdc <quorem+0xfe>
 8007f7c:	613c      	str	r4, [r7, #16]
 8007f7e:	4638      	mov	r0, r7
 8007f80:	f001 febc 	bl	8009cfc <__mcmp>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	db25      	blt.n	8007fd4 <quorem+0xf6>
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f04f 0c00 	mov.w	ip, #0
 8007f8e:	3601      	adds	r6, #1
 8007f90:	f858 1b04 	ldr.w	r1, [r8], #4
 8007f94:	f8d0 e000 	ldr.w	lr, [r0]
 8007f98:	b28b      	uxth	r3, r1
 8007f9a:	ebac 0303 	sub.w	r3, ip, r3
 8007f9e:	fa1f f28e 	uxth.w	r2, lr
 8007fa2:	4413      	add	r3, r2
 8007fa4:	0c0a      	lsrs	r2, r1, #16
 8007fa6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007faa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fb4:	45c1      	cmp	r9, r8
 8007fb6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007fba:	f840 3b04 	str.w	r3, [r0], #4
 8007fbe:	d2e7      	bcs.n	8007f90 <quorem+0xb2>
 8007fc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fc8:	b922      	cbnz	r2, 8007fd4 <quorem+0xf6>
 8007fca:	3b04      	subs	r3, #4
 8007fcc:	429d      	cmp	r5, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	d30a      	bcc.n	8007fe8 <quorem+0x10a>
 8007fd2:	613c      	str	r4, [r7, #16]
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	b003      	add	sp, #12
 8007fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fdc:	6812      	ldr	r2, [r2, #0]
 8007fde:	3b04      	subs	r3, #4
 8007fe0:	2a00      	cmp	r2, #0
 8007fe2:	d1cb      	bne.n	8007f7c <quorem+0x9e>
 8007fe4:	3c01      	subs	r4, #1
 8007fe6:	e7c6      	b.n	8007f76 <quorem+0x98>
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	3b04      	subs	r3, #4
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	d1f0      	bne.n	8007fd2 <quorem+0xf4>
 8007ff0:	3c01      	subs	r4, #1
 8007ff2:	e7eb      	b.n	8007fcc <quorem+0xee>
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	e7ee      	b.n	8007fd6 <quorem+0xf8>

08007ff8 <_dtoa_r>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	461f      	mov	r7, r3
 8008000:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008002:	b099      	sub	sp, #100	; 0x64
 8008004:	4605      	mov	r5, r0
 8008006:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800800a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800800e:	b974      	cbnz	r4, 800802e <_dtoa_r+0x36>
 8008010:	2010      	movs	r0, #16
 8008012:	f7fd fefd 	bl	8005e10 <malloc>
 8008016:	4602      	mov	r2, r0
 8008018:	6268      	str	r0, [r5, #36]	; 0x24
 800801a:	b920      	cbnz	r0, 8008026 <_dtoa_r+0x2e>
 800801c:	21ea      	movs	r1, #234	; 0xea
 800801e:	4bae      	ldr	r3, [pc, #696]	; (80082d8 <_dtoa_r+0x2e0>)
 8008020:	48ae      	ldr	r0, [pc, #696]	; (80082dc <_dtoa_r+0x2e4>)
 8008022:	f7fd fe9b 	bl	8005d5c <__assert_func>
 8008026:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800802a:	6004      	str	r4, [r0, #0]
 800802c:	60c4      	str	r4, [r0, #12]
 800802e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008030:	6819      	ldr	r1, [r3, #0]
 8008032:	b151      	cbz	r1, 800804a <_dtoa_r+0x52>
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	2301      	movs	r3, #1
 8008038:	4093      	lsls	r3, r2
 800803a:	604a      	str	r2, [r1, #4]
 800803c:	608b      	str	r3, [r1, #8]
 800803e:	4628      	mov	r0, r5
 8008040:	f001 fbd8 	bl	80097f4 <_Bfree>
 8008044:	2200      	movs	r2, #0
 8008046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	1e3b      	subs	r3, r7, #0
 800804c:	bfaf      	iteee	ge
 800804e:	2300      	movge	r3, #0
 8008050:	2201      	movlt	r2, #1
 8008052:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008056:	9305      	strlt	r3, [sp, #20]
 8008058:	bfa8      	it	ge
 800805a:	f8c8 3000 	strge.w	r3, [r8]
 800805e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008062:	4b9f      	ldr	r3, [pc, #636]	; (80082e0 <_dtoa_r+0x2e8>)
 8008064:	bfb8      	it	lt
 8008066:	f8c8 2000 	strlt.w	r2, [r8]
 800806a:	ea33 0309 	bics.w	r3, r3, r9
 800806e:	d119      	bne.n	80080a4 <_dtoa_r+0xac>
 8008070:	f242 730f 	movw	r3, #9999	; 0x270f
 8008074:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800807c:	4333      	orrs	r3, r6
 800807e:	f000 8580 	beq.w	8008b82 <_dtoa_r+0xb8a>
 8008082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008084:	b953      	cbnz	r3, 800809c <_dtoa_r+0xa4>
 8008086:	4b97      	ldr	r3, [pc, #604]	; (80082e4 <_dtoa_r+0x2ec>)
 8008088:	e022      	b.n	80080d0 <_dtoa_r+0xd8>
 800808a:	4b97      	ldr	r3, [pc, #604]	; (80082e8 <_dtoa_r+0x2f0>)
 800808c:	9308      	str	r3, [sp, #32]
 800808e:	3308      	adds	r3, #8
 8008090:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	9808      	ldr	r0, [sp, #32]
 8008096:	b019      	add	sp, #100	; 0x64
 8008098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809c:	4b91      	ldr	r3, [pc, #580]	; (80082e4 <_dtoa_r+0x2ec>)
 800809e:	9308      	str	r3, [sp, #32]
 80080a0:	3303      	adds	r3, #3
 80080a2:	e7f5      	b.n	8008090 <_dtoa_r+0x98>
 80080a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80080a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80080ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080b0:	2200      	movs	r2, #0
 80080b2:	2300      	movs	r3, #0
 80080b4:	f7f8 fc78 	bl	80009a8 <__aeabi_dcmpeq>
 80080b8:	4680      	mov	r8, r0
 80080ba:	b158      	cbz	r0, 80080d4 <_dtoa_r+0xdc>
 80080bc:	2301      	movs	r3, #1
 80080be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080c0:	6013      	str	r3, [r2, #0]
 80080c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8559 	beq.w	8008b7c <_dtoa_r+0xb84>
 80080ca:	4888      	ldr	r0, [pc, #544]	; (80082ec <_dtoa_r+0x2f4>)
 80080cc:	6018      	str	r0, [r3, #0]
 80080ce:	1e43      	subs	r3, r0, #1
 80080d0:	9308      	str	r3, [sp, #32]
 80080d2:	e7df      	b.n	8008094 <_dtoa_r+0x9c>
 80080d4:	ab16      	add	r3, sp, #88	; 0x58
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	ab17      	add	r3, sp, #92	; 0x5c
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	4628      	mov	r0, r5
 80080de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80080e2:	f001 ff31 	bl	8009f48 <__d2b>
 80080e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80080ea:	4682      	mov	sl, r0
 80080ec:	2c00      	cmp	r4, #0
 80080ee:	d07e      	beq.n	80081ee <_dtoa_r+0x1f6>
 80080f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80080fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008102:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008106:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800810a:	2200      	movs	r2, #0
 800810c:	4b78      	ldr	r3, [pc, #480]	; (80082f0 <_dtoa_r+0x2f8>)
 800810e:	f7f8 f82b 	bl	8000168 <__aeabi_dsub>
 8008112:	a36b      	add	r3, pc, #428	; (adr r3, 80082c0 <_dtoa_r+0x2c8>)
 8008114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008118:	f7f8 f9de 	bl	80004d8 <__aeabi_dmul>
 800811c:	a36a      	add	r3, pc, #424	; (adr r3, 80082c8 <_dtoa_r+0x2d0>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	f7f8 f823 	bl	800016c <__adddf3>
 8008126:	4606      	mov	r6, r0
 8008128:	4620      	mov	r0, r4
 800812a:	460f      	mov	r7, r1
 800812c:	f7f8 f96a 	bl	8000404 <__aeabi_i2d>
 8008130:	a367      	add	r3, pc, #412	; (adr r3, 80082d0 <_dtoa_r+0x2d8>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f7f8 f9cf 	bl	80004d8 <__aeabi_dmul>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4630      	mov	r0, r6
 8008140:	4639      	mov	r1, r7
 8008142:	f7f8 f813 	bl	800016c <__adddf3>
 8008146:	4606      	mov	r6, r0
 8008148:	460f      	mov	r7, r1
 800814a:	f7f8 fc75 	bl	8000a38 <__aeabi_d2iz>
 800814e:	2200      	movs	r2, #0
 8008150:	4681      	mov	r9, r0
 8008152:	2300      	movs	r3, #0
 8008154:	4630      	mov	r0, r6
 8008156:	4639      	mov	r1, r7
 8008158:	f7f8 fc30 	bl	80009bc <__aeabi_dcmplt>
 800815c:	b148      	cbz	r0, 8008172 <_dtoa_r+0x17a>
 800815e:	4648      	mov	r0, r9
 8008160:	f7f8 f950 	bl	8000404 <__aeabi_i2d>
 8008164:	4632      	mov	r2, r6
 8008166:	463b      	mov	r3, r7
 8008168:	f7f8 fc1e 	bl	80009a8 <__aeabi_dcmpeq>
 800816c:	b908      	cbnz	r0, 8008172 <_dtoa_r+0x17a>
 800816e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008172:	f1b9 0f16 	cmp.w	r9, #22
 8008176:	d857      	bhi.n	8008228 <_dtoa_r+0x230>
 8008178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800817c:	4b5d      	ldr	r3, [pc, #372]	; (80082f4 <_dtoa_r+0x2fc>)
 800817e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 fc19 	bl	80009bc <__aeabi_dcmplt>
 800818a:	2800      	cmp	r0, #0
 800818c:	d04e      	beq.n	800822c <_dtoa_r+0x234>
 800818e:	2300      	movs	r3, #0
 8008190:	f109 39ff 	add.w	r9, r9, #4294967295
 8008194:	930f      	str	r3, [sp, #60]	; 0x3c
 8008196:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008198:	1b1c      	subs	r4, r3, r4
 800819a:	1e63      	subs	r3, r4, #1
 800819c:	9309      	str	r3, [sp, #36]	; 0x24
 800819e:	bf49      	itett	mi
 80081a0:	f1c4 0301 	rsbmi	r3, r4, #1
 80081a4:	2300      	movpl	r3, #0
 80081a6:	9306      	strmi	r3, [sp, #24]
 80081a8:	2300      	movmi	r3, #0
 80081aa:	bf54      	ite	pl
 80081ac:	9306      	strpl	r3, [sp, #24]
 80081ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 80081b0:	f1b9 0f00 	cmp.w	r9, #0
 80081b4:	db3c      	blt.n	8008230 <_dtoa_r+0x238>
 80081b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80081bc:	444b      	add	r3, r9
 80081be:	9309      	str	r3, [sp, #36]	; 0x24
 80081c0:	2300      	movs	r3, #0
 80081c2:	930a      	str	r3, [sp, #40]	; 0x28
 80081c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081c6:	2b09      	cmp	r3, #9
 80081c8:	d86c      	bhi.n	80082a4 <_dtoa_r+0x2ac>
 80081ca:	2b05      	cmp	r3, #5
 80081cc:	bfc4      	itt	gt
 80081ce:	3b04      	subgt	r3, #4
 80081d0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80081d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081d4:	bfc8      	it	gt
 80081d6:	2400      	movgt	r4, #0
 80081d8:	f1a3 0302 	sub.w	r3, r3, #2
 80081dc:	bfd8      	it	le
 80081de:	2401      	movle	r4, #1
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	f200 808b 	bhi.w	80082fc <_dtoa_r+0x304>
 80081e6:	e8df f003 	tbb	[pc, r3]
 80081ea:	4f2d      	.short	0x4f2d
 80081ec:	5b4d      	.short	0x5b4d
 80081ee:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80081f2:	441c      	add	r4, r3
 80081f4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	bfc3      	ittte	gt
 80081fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008200:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008204:	fa09 f303 	lslgt.w	r3, r9, r3
 8008208:	f1c3 0320 	rsble	r3, r3, #32
 800820c:	bfc6      	itte	gt
 800820e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008212:	4318      	orrgt	r0, r3
 8008214:	fa06 f003 	lslle.w	r0, r6, r3
 8008218:	f7f8 f8e4 	bl	80003e4 <__aeabi_ui2d>
 800821c:	2301      	movs	r3, #1
 800821e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008222:	3c01      	subs	r4, #1
 8008224:	9313      	str	r3, [sp, #76]	; 0x4c
 8008226:	e770      	b.n	800810a <_dtoa_r+0x112>
 8008228:	2301      	movs	r3, #1
 800822a:	e7b3      	b.n	8008194 <_dtoa_r+0x19c>
 800822c:	900f      	str	r0, [sp, #60]	; 0x3c
 800822e:	e7b2      	b.n	8008196 <_dtoa_r+0x19e>
 8008230:	9b06      	ldr	r3, [sp, #24]
 8008232:	eba3 0309 	sub.w	r3, r3, r9
 8008236:	9306      	str	r3, [sp, #24]
 8008238:	f1c9 0300 	rsb	r3, r9, #0
 800823c:	930a      	str	r3, [sp, #40]	; 0x28
 800823e:	2300      	movs	r3, #0
 8008240:	930e      	str	r3, [sp, #56]	; 0x38
 8008242:	e7bf      	b.n	80081c4 <_dtoa_r+0x1cc>
 8008244:	2300      	movs	r3, #0
 8008246:	930b      	str	r3, [sp, #44]	; 0x2c
 8008248:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800824a:	2b00      	cmp	r3, #0
 800824c:	dc59      	bgt.n	8008302 <_dtoa_r+0x30a>
 800824e:	f04f 0b01 	mov.w	fp, #1
 8008252:	465b      	mov	r3, fp
 8008254:	f8cd b008 	str.w	fp, [sp, #8]
 8008258:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800825c:	2200      	movs	r2, #0
 800825e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008260:	6042      	str	r2, [r0, #4]
 8008262:	2204      	movs	r2, #4
 8008264:	f102 0614 	add.w	r6, r2, #20
 8008268:	429e      	cmp	r6, r3
 800826a:	6841      	ldr	r1, [r0, #4]
 800826c:	d94f      	bls.n	800830e <_dtoa_r+0x316>
 800826e:	4628      	mov	r0, r5
 8008270:	f001 fa80 	bl	8009774 <_Balloc>
 8008274:	9008      	str	r0, [sp, #32]
 8008276:	2800      	cmp	r0, #0
 8008278:	d14d      	bne.n	8008316 <_dtoa_r+0x31e>
 800827a:	4602      	mov	r2, r0
 800827c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008280:	4b1d      	ldr	r3, [pc, #116]	; (80082f8 <_dtoa_r+0x300>)
 8008282:	e6cd      	b.n	8008020 <_dtoa_r+0x28>
 8008284:	2301      	movs	r3, #1
 8008286:	e7de      	b.n	8008246 <_dtoa_r+0x24e>
 8008288:	2300      	movs	r3, #0
 800828a:	930b      	str	r3, [sp, #44]	; 0x2c
 800828c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800828e:	eb09 0b03 	add.w	fp, r9, r3
 8008292:	f10b 0301 	add.w	r3, fp, #1
 8008296:	2b01      	cmp	r3, #1
 8008298:	9302      	str	r3, [sp, #8]
 800829a:	bfb8      	it	lt
 800829c:	2301      	movlt	r3, #1
 800829e:	e7dd      	b.n	800825c <_dtoa_r+0x264>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e7f2      	b.n	800828a <_dtoa_r+0x292>
 80082a4:	2401      	movs	r4, #1
 80082a6:	2300      	movs	r3, #0
 80082a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80082aa:	9322      	str	r3, [sp, #136]	; 0x88
 80082ac:	f04f 3bff 	mov.w	fp, #4294967295
 80082b0:	2200      	movs	r2, #0
 80082b2:	2312      	movs	r3, #18
 80082b4:	f8cd b008 	str.w	fp, [sp, #8]
 80082b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80082ba:	e7cf      	b.n	800825c <_dtoa_r+0x264>
 80082bc:	f3af 8000 	nop.w
 80082c0:	636f4361 	.word	0x636f4361
 80082c4:	3fd287a7 	.word	0x3fd287a7
 80082c8:	8b60c8b3 	.word	0x8b60c8b3
 80082cc:	3fc68a28 	.word	0x3fc68a28
 80082d0:	509f79fb 	.word	0x509f79fb
 80082d4:	3fd34413 	.word	0x3fd34413
 80082d8:	0800aa3e 	.word	0x0800aa3e
 80082dc:	0800aa55 	.word	0x0800aa55
 80082e0:	7ff00000 	.word	0x7ff00000
 80082e4:	0800aa3a 	.word	0x0800aa3a
 80082e8:	0800aa31 	.word	0x0800aa31
 80082ec:	0800a8b2 	.word	0x0800a8b2
 80082f0:	3ff80000 	.word	0x3ff80000
 80082f4:	0800ac30 	.word	0x0800ac30
 80082f8:	0800aab4 	.word	0x0800aab4
 80082fc:	2301      	movs	r3, #1
 80082fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008300:	e7d4      	b.n	80082ac <_dtoa_r+0x2b4>
 8008302:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008306:	465b      	mov	r3, fp
 8008308:	f8cd b008 	str.w	fp, [sp, #8]
 800830c:	e7a6      	b.n	800825c <_dtoa_r+0x264>
 800830e:	3101      	adds	r1, #1
 8008310:	6041      	str	r1, [r0, #4]
 8008312:	0052      	lsls	r2, r2, #1
 8008314:	e7a6      	b.n	8008264 <_dtoa_r+0x26c>
 8008316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008318:	9a08      	ldr	r2, [sp, #32]
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	9b02      	ldr	r3, [sp, #8]
 800831e:	2b0e      	cmp	r3, #14
 8008320:	f200 80a8 	bhi.w	8008474 <_dtoa_r+0x47c>
 8008324:	2c00      	cmp	r4, #0
 8008326:	f000 80a5 	beq.w	8008474 <_dtoa_r+0x47c>
 800832a:	f1b9 0f00 	cmp.w	r9, #0
 800832e:	dd34      	ble.n	800839a <_dtoa_r+0x3a2>
 8008330:	4a9a      	ldr	r2, [pc, #616]	; (800859c <_dtoa_r+0x5a4>)
 8008332:	f009 030f 	and.w	r3, r9, #15
 8008336:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800833a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800833e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008342:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008346:	ea4f 1429 	mov.w	r4, r9, asr #4
 800834a:	d016      	beq.n	800837a <_dtoa_r+0x382>
 800834c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008350:	4b93      	ldr	r3, [pc, #588]	; (80085a0 <_dtoa_r+0x5a8>)
 8008352:	2703      	movs	r7, #3
 8008354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008358:	f7f8 f9e8 	bl	800072c <__aeabi_ddiv>
 800835c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008360:	f004 040f 	and.w	r4, r4, #15
 8008364:	4e8e      	ldr	r6, [pc, #568]	; (80085a0 <_dtoa_r+0x5a8>)
 8008366:	b954      	cbnz	r4, 800837e <_dtoa_r+0x386>
 8008368:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800836c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008370:	f7f8 f9dc 	bl	800072c <__aeabi_ddiv>
 8008374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008378:	e029      	b.n	80083ce <_dtoa_r+0x3d6>
 800837a:	2702      	movs	r7, #2
 800837c:	e7f2      	b.n	8008364 <_dtoa_r+0x36c>
 800837e:	07e1      	lsls	r1, r4, #31
 8008380:	d508      	bpl.n	8008394 <_dtoa_r+0x39c>
 8008382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008386:	e9d6 2300 	ldrd	r2, r3, [r6]
 800838a:	f7f8 f8a5 	bl	80004d8 <__aeabi_dmul>
 800838e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008392:	3701      	adds	r7, #1
 8008394:	1064      	asrs	r4, r4, #1
 8008396:	3608      	adds	r6, #8
 8008398:	e7e5      	b.n	8008366 <_dtoa_r+0x36e>
 800839a:	f000 80a5 	beq.w	80084e8 <_dtoa_r+0x4f0>
 800839e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083a2:	f1c9 0400 	rsb	r4, r9, #0
 80083a6:	4b7d      	ldr	r3, [pc, #500]	; (800859c <_dtoa_r+0x5a4>)
 80083a8:	f004 020f 	and.w	r2, r4, #15
 80083ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f7f8 f890 	bl	80004d8 <__aeabi_dmul>
 80083b8:	2702      	movs	r7, #2
 80083ba:	2300      	movs	r3, #0
 80083bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083c0:	4e77      	ldr	r6, [pc, #476]	; (80085a0 <_dtoa_r+0x5a8>)
 80083c2:	1124      	asrs	r4, r4, #4
 80083c4:	2c00      	cmp	r4, #0
 80083c6:	f040 8084 	bne.w	80084d2 <_dtoa_r+0x4da>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1d2      	bne.n	8008374 <_dtoa_r+0x37c>
 80083ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 808b 	beq.w	80084ec <_dtoa_r+0x4f4>
 80083d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80083da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80083de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083e2:	2200      	movs	r2, #0
 80083e4:	4b6f      	ldr	r3, [pc, #444]	; (80085a4 <_dtoa_r+0x5ac>)
 80083e6:	f7f8 fae9 	bl	80009bc <__aeabi_dcmplt>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d07e      	beq.n	80084ec <_dtoa_r+0x4f4>
 80083ee:	9b02      	ldr	r3, [sp, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d07b      	beq.n	80084ec <_dtoa_r+0x4f4>
 80083f4:	f1bb 0f00 	cmp.w	fp, #0
 80083f8:	dd38      	ble.n	800846c <_dtoa_r+0x474>
 80083fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083fe:	2200      	movs	r2, #0
 8008400:	4b69      	ldr	r3, [pc, #420]	; (80085a8 <_dtoa_r+0x5b0>)
 8008402:	f7f8 f869 	bl	80004d8 <__aeabi_dmul>
 8008406:	465c      	mov	r4, fp
 8008408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800840c:	f109 38ff 	add.w	r8, r9, #4294967295
 8008410:	3701      	adds	r7, #1
 8008412:	4638      	mov	r0, r7
 8008414:	f7f7 fff6 	bl	8000404 <__aeabi_i2d>
 8008418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800841c:	f7f8 f85c 	bl	80004d8 <__aeabi_dmul>
 8008420:	2200      	movs	r2, #0
 8008422:	4b62      	ldr	r3, [pc, #392]	; (80085ac <_dtoa_r+0x5b4>)
 8008424:	f7f7 fea2 	bl	800016c <__adddf3>
 8008428:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800842c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008430:	9611      	str	r6, [sp, #68]	; 0x44
 8008432:	2c00      	cmp	r4, #0
 8008434:	d15d      	bne.n	80084f2 <_dtoa_r+0x4fa>
 8008436:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800843a:	2200      	movs	r2, #0
 800843c:	4b5c      	ldr	r3, [pc, #368]	; (80085b0 <_dtoa_r+0x5b8>)
 800843e:	f7f7 fe93 	bl	8000168 <__aeabi_dsub>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800844a:	4633      	mov	r3, r6
 800844c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800844e:	f7f8 fad3 	bl	80009f8 <__aeabi_dcmpgt>
 8008452:	2800      	cmp	r0, #0
 8008454:	f040 829e 	bne.w	8008994 <_dtoa_r+0x99c>
 8008458:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800845c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800845e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008462:	f7f8 faab 	bl	80009bc <__aeabi_dcmplt>
 8008466:	2800      	cmp	r0, #0
 8008468:	f040 8292 	bne.w	8008990 <_dtoa_r+0x998>
 800846c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008470:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008474:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008476:	2b00      	cmp	r3, #0
 8008478:	f2c0 8153 	blt.w	8008722 <_dtoa_r+0x72a>
 800847c:	f1b9 0f0e 	cmp.w	r9, #14
 8008480:	f300 814f 	bgt.w	8008722 <_dtoa_r+0x72a>
 8008484:	4b45      	ldr	r3, [pc, #276]	; (800859c <_dtoa_r+0x5a4>)
 8008486:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800848a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800848e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008492:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008494:	2b00      	cmp	r3, #0
 8008496:	f280 80db 	bge.w	8008650 <_dtoa_r+0x658>
 800849a:	9b02      	ldr	r3, [sp, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	f300 80d7 	bgt.w	8008650 <_dtoa_r+0x658>
 80084a2:	f040 8274 	bne.w	800898e <_dtoa_r+0x996>
 80084a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084aa:	2200      	movs	r2, #0
 80084ac:	4b40      	ldr	r3, [pc, #256]	; (80085b0 <_dtoa_r+0x5b8>)
 80084ae:	f7f8 f813 	bl	80004d8 <__aeabi_dmul>
 80084b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084b6:	f7f8 fa95 	bl	80009e4 <__aeabi_dcmpge>
 80084ba:	9c02      	ldr	r4, [sp, #8]
 80084bc:	4626      	mov	r6, r4
 80084be:	2800      	cmp	r0, #0
 80084c0:	f040 824a 	bne.w	8008958 <_dtoa_r+0x960>
 80084c4:	2331      	movs	r3, #49	; 0x31
 80084c6:	9f08      	ldr	r7, [sp, #32]
 80084c8:	f109 0901 	add.w	r9, r9, #1
 80084cc:	f807 3b01 	strb.w	r3, [r7], #1
 80084d0:	e246      	b.n	8008960 <_dtoa_r+0x968>
 80084d2:	07e2      	lsls	r2, r4, #31
 80084d4:	d505      	bpl.n	80084e2 <_dtoa_r+0x4ea>
 80084d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084da:	f7f7 fffd 	bl	80004d8 <__aeabi_dmul>
 80084de:	2301      	movs	r3, #1
 80084e0:	3701      	adds	r7, #1
 80084e2:	1064      	asrs	r4, r4, #1
 80084e4:	3608      	adds	r6, #8
 80084e6:	e76d      	b.n	80083c4 <_dtoa_r+0x3cc>
 80084e8:	2702      	movs	r7, #2
 80084ea:	e770      	b.n	80083ce <_dtoa_r+0x3d6>
 80084ec:	46c8      	mov	r8, r9
 80084ee:	9c02      	ldr	r4, [sp, #8]
 80084f0:	e78f      	b.n	8008412 <_dtoa_r+0x41a>
 80084f2:	9908      	ldr	r1, [sp, #32]
 80084f4:	4b29      	ldr	r3, [pc, #164]	; (800859c <_dtoa_r+0x5a4>)
 80084f6:	4421      	add	r1, r4
 80084f8:	9112      	str	r1, [sp, #72]	; 0x48
 80084fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008500:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008504:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008508:	2900      	cmp	r1, #0
 800850a:	d055      	beq.n	80085b8 <_dtoa_r+0x5c0>
 800850c:	2000      	movs	r0, #0
 800850e:	4929      	ldr	r1, [pc, #164]	; (80085b4 <_dtoa_r+0x5bc>)
 8008510:	f7f8 f90c 	bl	800072c <__aeabi_ddiv>
 8008514:	463b      	mov	r3, r7
 8008516:	4632      	mov	r2, r6
 8008518:	f7f7 fe26 	bl	8000168 <__aeabi_dsub>
 800851c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008520:	9f08      	ldr	r7, [sp, #32]
 8008522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008526:	f7f8 fa87 	bl	8000a38 <__aeabi_d2iz>
 800852a:	4604      	mov	r4, r0
 800852c:	f7f7 ff6a 	bl	8000404 <__aeabi_i2d>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008538:	f7f7 fe16 	bl	8000168 <__aeabi_dsub>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	3430      	adds	r4, #48	; 0x30
 8008542:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008546:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800854a:	f807 4b01 	strb.w	r4, [r7], #1
 800854e:	f7f8 fa35 	bl	80009bc <__aeabi_dcmplt>
 8008552:	2800      	cmp	r0, #0
 8008554:	d174      	bne.n	8008640 <_dtoa_r+0x648>
 8008556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800855a:	2000      	movs	r0, #0
 800855c:	4911      	ldr	r1, [pc, #68]	; (80085a4 <_dtoa_r+0x5ac>)
 800855e:	f7f7 fe03 	bl	8000168 <__aeabi_dsub>
 8008562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008566:	f7f8 fa29 	bl	80009bc <__aeabi_dcmplt>
 800856a:	2800      	cmp	r0, #0
 800856c:	f040 80b6 	bne.w	80086dc <_dtoa_r+0x6e4>
 8008570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008572:	429f      	cmp	r7, r3
 8008574:	f43f af7a 	beq.w	800846c <_dtoa_r+0x474>
 8008578:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800857c:	2200      	movs	r2, #0
 800857e:	4b0a      	ldr	r3, [pc, #40]	; (80085a8 <_dtoa_r+0x5b0>)
 8008580:	f7f7 ffaa 	bl	80004d8 <__aeabi_dmul>
 8008584:	2200      	movs	r2, #0
 8008586:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800858a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800858e:	4b06      	ldr	r3, [pc, #24]	; (80085a8 <_dtoa_r+0x5b0>)
 8008590:	f7f7 ffa2 	bl	80004d8 <__aeabi_dmul>
 8008594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008598:	e7c3      	b.n	8008522 <_dtoa_r+0x52a>
 800859a:	bf00      	nop
 800859c:	0800ac30 	.word	0x0800ac30
 80085a0:	0800ac08 	.word	0x0800ac08
 80085a4:	3ff00000 	.word	0x3ff00000
 80085a8:	40240000 	.word	0x40240000
 80085ac:	401c0000 	.word	0x401c0000
 80085b0:	40140000 	.word	0x40140000
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	4630      	mov	r0, r6
 80085ba:	4639      	mov	r1, r7
 80085bc:	f7f7 ff8c 	bl	80004d8 <__aeabi_dmul>
 80085c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085c6:	9c08      	ldr	r4, [sp, #32]
 80085c8:	9314      	str	r3, [sp, #80]	; 0x50
 80085ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085ce:	f7f8 fa33 	bl	8000a38 <__aeabi_d2iz>
 80085d2:	9015      	str	r0, [sp, #84]	; 0x54
 80085d4:	f7f7 ff16 	bl	8000404 <__aeabi_i2d>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085e0:	f7f7 fdc2 	bl	8000168 <__aeabi_dsub>
 80085e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085e6:	4606      	mov	r6, r0
 80085e8:	3330      	adds	r3, #48	; 0x30
 80085ea:	f804 3b01 	strb.w	r3, [r4], #1
 80085ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085f0:	460f      	mov	r7, r1
 80085f2:	429c      	cmp	r4, r3
 80085f4:	f04f 0200 	mov.w	r2, #0
 80085f8:	d124      	bne.n	8008644 <_dtoa_r+0x64c>
 80085fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085fe:	4bb3      	ldr	r3, [pc, #716]	; (80088cc <_dtoa_r+0x8d4>)
 8008600:	f7f7 fdb4 	bl	800016c <__adddf3>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f7f8 f9f4 	bl	80009f8 <__aeabi_dcmpgt>
 8008610:	2800      	cmp	r0, #0
 8008612:	d162      	bne.n	80086da <_dtoa_r+0x6e2>
 8008614:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008618:	2000      	movs	r0, #0
 800861a:	49ac      	ldr	r1, [pc, #688]	; (80088cc <_dtoa_r+0x8d4>)
 800861c:	f7f7 fda4 	bl	8000168 <__aeabi_dsub>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4630      	mov	r0, r6
 8008626:	4639      	mov	r1, r7
 8008628:	f7f8 f9c8 	bl	80009bc <__aeabi_dcmplt>
 800862c:	2800      	cmp	r0, #0
 800862e:	f43f af1d 	beq.w	800846c <_dtoa_r+0x474>
 8008632:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008634:	1e7b      	subs	r3, r7, #1
 8008636:	9314      	str	r3, [sp, #80]	; 0x50
 8008638:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800863c:	2b30      	cmp	r3, #48	; 0x30
 800863e:	d0f8      	beq.n	8008632 <_dtoa_r+0x63a>
 8008640:	46c1      	mov	r9, r8
 8008642:	e03a      	b.n	80086ba <_dtoa_r+0x6c2>
 8008644:	4ba2      	ldr	r3, [pc, #648]	; (80088d0 <_dtoa_r+0x8d8>)
 8008646:	f7f7 ff47 	bl	80004d8 <__aeabi_dmul>
 800864a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800864e:	e7bc      	b.n	80085ca <_dtoa_r+0x5d2>
 8008650:	9f08      	ldr	r7, [sp, #32]
 8008652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800865a:	f7f8 f867 	bl	800072c <__aeabi_ddiv>
 800865e:	f7f8 f9eb 	bl	8000a38 <__aeabi_d2iz>
 8008662:	4604      	mov	r4, r0
 8008664:	f7f7 fece 	bl	8000404 <__aeabi_i2d>
 8008668:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800866c:	f7f7 ff34 	bl	80004d8 <__aeabi_dmul>
 8008670:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008674:	460b      	mov	r3, r1
 8008676:	4602      	mov	r2, r0
 8008678:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800867c:	f7f7 fd74 	bl	8000168 <__aeabi_dsub>
 8008680:	f807 6b01 	strb.w	r6, [r7], #1
 8008684:	9e08      	ldr	r6, [sp, #32]
 8008686:	9b02      	ldr	r3, [sp, #8]
 8008688:	1bbe      	subs	r6, r7, r6
 800868a:	42b3      	cmp	r3, r6
 800868c:	d13a      	bne.n	8008704 <_dtoa_r+0x70c>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	f7f7 fd6b 	bl	800016c <__adddf3>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800869e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086a2:	f7f8 f9a9 	bl	80009f8 <__aeabi_dcmpgt>
 80086a6:	bb58      	cbnz	r0, 8008700 <_dtoa_r+0x708>
 80086a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b0:	f7f8 f97a 	bl	80009a8 <__aeabi_dcmpeq>
 80086b4:	b108      	cbz	r0, 80086ba <_dtoa_r+0x6c2>
 80086b6:	07e1      	lsls	r1, r4, #31
 80086b8:	d422      	bmi.n	8008700 <_dtoa_r+0x708>
 80086ba:	4628      	mov	r0, r5
 80086bc:	4651      	mov	r1, sl
 80086be:	f001 f899 	bl	80097f4 <_Bfree>
 80086c2:	2300      	movs	r3, #0
 80086c4:	703b      	strb	r3, [r7, #0]
 80086c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80086c8:	f109 0001 	add.w	r0, r9, #1
 80086cc:	6018      	str	r0, [r3, #0]
 80086ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f43f acdf 	beq.w	8008094 <_dtoa_r+0x9c>
 80086d6:	601f      	str	r7, [r3, #0]
 80086d8:	e4dc      	b.n	8008094 <_dtoa_r+0x9c>
 80086da:	4627      	mov	r7, r4
 80086dc:	463b      	mov	r3, r7
 80086de:	461f      	mov	r7, r3
 80086e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086e4:	2a39      	cmp	r2, #57	; 0x39
 80086e6:	d107      	bne.n	80086f8 <_dtoa_r+0x700>
 80086e8:	9a08      	ldr	r2, [sp, #32]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d1f7      	bne.n	80086de <_dtoa_r+0x6e6>
 80086ee:	2230      	movs	r2, #48	; 0x30
 80086f0:	9908      	ldr	r1, [sp, #32]
 80086f2:	f108 0801 	add.w	r8, r8, #1
 80086f6:	700a      	strb	r2, [r1, #0]
 80086f8:	781a      	ldrb	r2, [r3, #0]
 80086fa:	3201      	adds	r2, #1
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	e79f      	b.n	8008640 <_dtoa_r+0x648>
 8008700:	46c8      	mov	r8, r9
 8008702:	e7eb      	b.n	80086dc <_dtoa_r+0x6e4>
 8008704:	2200      	movs	r2, #0
 8008706:	4b72      	ldr	r3, [pc, #456]	; (80088d0 <_dtoa_r+0x8d8>)
 8008708:	f7f7 fee6 	bl	80004d8 <__aeabi_dmul>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008714:	2200      	movs	r2, #0
 8008716:	2300      	movs	r3, #0
 8008718:	f7f8 f946 	bl	80009a8 <__aeabi_dcmpeq>
 800871c:	2800      	cmp	r0, #0
 800871e:	d098      	beq.n	8008652 <_dtoa_r+0x65a>
 8008720:	e7cb      	b.n	80086ba <_dtoa_r+0x6c2>
 8008722:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008724:	2a00      	cmp	r2, #0
 8008726:	f000 80cd 	beq.w	80088c4 <_dtoa_r+0x8cc>
 800872a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800872c:	2a01      	cmp	r2, #1
 800872e:	f300 80af 	bgt.w	8008890 <_dtoa_r+0x898>
 8008732:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008734:	2a00      	cmp	r2, #0
 8008736:	f000 80a7 	beq.w	8008888 <_dtoa_r+0x890>
 800873a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800873e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008740:	9f06      	ldr	r7, [sp, #24]
 8008742:	9a06      	ldr	r2, [sp, #24]
 8008744:	2101      	movs	r1, #1
 8008746:	441a      	add	r2, r3
 8008748:	9206      	str	r2, [sp, #24]
 800874a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800874c:	4628      	mov	r0, r5
 800874e:	441a      	add	r2, r3
 8008750:	9209      	str	r2, [sp, #36]	; 0x24
 8008752:	f001 f953 	bl	80099fc <__i2b>
 8008756:	4606      	mov	r6, r0
 8008758:	2f00      	cmp	r7, #0
 800875a:	dd0c      	ble.n	8008776 <_dtoa_r+0x77e>
 800875c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875e:	2b00      	cmp	r3, #0
 8008760:	dd09      	ble.n	8008776 <_dtoa_r+0x77e>
 8008762:	42bb      	cmp	r3, r7
 8008764:	bfa8      	it	ge
 8008766:	463b      	movge	r3, r7
 8008768:	9a06      	ldr	r2, [sp, #24]
 800876a:	1aff      	subs	r7, r7, r3
 800876c:	1ad2      	subs	r2, r2, r3
 800876e:	9206      	str	r2, [sp, #24]
 8008770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	9309      	str	r3, [sp, #36]	; 0x24
 8008776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008778:	b1f3      	cbz	r3, 80087b8 <_dtoa_r+0x7c0>
 800877a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80a9 	beq.w	80088d4 <_dtoa_r+0x8dc>
 8008782:	2c00      	cmp	r4, #0
 8008784:	dd10      	ble.n	80087a8 <_dtoa_r+0x7b0>
 8008786:	4631      	mov	r1, r6
 8008788:	4622      	mov	r2, r4
 800878a:	4628      	mov	r0, r5
 800878c:	f001 f9f0 	bl	8009b70 <__pow5mult>
 8008790:	4652      	mov	r2, sl
 8008792:	4601      	mov	r1, r0
 8008794:	4606      	mov	r6, r0
 8008796:	4628      	mov	r0, r5
 8008798:	f001 f946 	bl	8009a28 <__multiply>
 800879c:	4680      	mov	r8, r0
 800879e:	4651      	mov	r1, sl
 80087a0:	4628      	mov	r0, r5
 80087a2:	f001 f827 	bl	80097f4 <_Bfree>
 80087a6:	46c2      	mov	sl, r8
 80087a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087aa:	1b1a      	subs	r2, r3, r4
 80087ac:	d004      	beq.n	80087b8 <_dtoa_r+0x7c0>
 80087ae:	4651      	mov	r1, sl
 80087b0:	4628      	mov	r0, r5
 80087b2:	f001 f9dd 	bl	8009b70 <__pow5mult>
 80087b6:	4682      	mov	sl, r0
 80087b8:	2101      	movs	r1, #1
 80087ba:	4628      	mov	r0, r5
 80087bc:	f001 f91e 	bl	80099fc <__i2b>
 80087c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087c2:	4604      	mov	r4, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f340 8087 	ble.w	80088d8 <_dtoa_r+0x8e0>
 80087ca:	461a      	mov	r2, r3
 80087cc:	4601      	mov	r1, r0
 80087ce:	4628      	mov	r0, r5
 80087d0:	f001 f9ce 	bl	8009b70 <__pow5mult>
 80087d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087d6:	4604      	mov	r4, r0
 80087d8:	2b01      	cmp	r3, #1
 80087da:	f340 8080 	ble.w	80088de <_dtoa_r+0x8e6>
 80087de:	f04f 0800 	mov.w	r8, #0
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087e8:	6918      	ldr	r0, [r3, #16]
 80087ea:	f001 f8b9 	bl	8009960 <__hi0bits>
 80087ee:	f1c0 0020 	rsb	r0, r0, #32
 80087f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f4:	4418      	add	r0, r3
 80087f6:	f010 001f 	ands.w	r0, r0, #31
 80087fa:	f000 8092 	beq.w	8008922 <_dtoa_r+0x92a>
 80087fe:	f1c0 0320 	rsb	r3, r0, #32
 8008802:	2b04      	cmp	r3, #4
 8008804:	f340 808a 	ble.w	800891c <_dtoa_r+0x924>
 8008808:	f1c0 001c 	rsb	r0, r0, #28
 800880c:	9b06      	ldr	r3, [sp, #24]
 800880e:	4407      	add	r7, r0
 8008810:	4403      	add	r3, r0
 8008812:	9306      	str	r3, [sp, #24]
 8008814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008816:	4403      	add	r3, r0
 8008818:	9309      	str	r3, [sp, #36]	; 0x24
 800881a:	9b06      	ldr	r3, [sp, #24]
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd05      	ble.n	800882c <_dtoa_r+0x834>
 8008820:	4651      	mov	r1, sl
 8008822:	461a      	mov	r2, r3
 8008824:	4628      	mov	r0, r5
 8008826:	f001 f9fd 	bl	8009c24 <__lshift>
 800882a:	4682      	mov	sl, r0
 800882c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800882e:	2b00      	cmp	r3, #0
 8008830:	dd05      	ble.n	800883e <_dtoa_r+0x846>
 8008832:	4621      	mov	r1, r4
 8008834:	461a      	mov	r2, r3
 8008836:	4628      	mov	r0, r5
 8008838:	f001 f9f4 	bl	8009c24 <__lshift>
 800883c:	4604      	mov	r4, r0
 800883e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d070      	beq.n	8008926 <_dtoa_r+0x92e>
 8008844:	4621      	mov	r1, r4
 8008846:	4650      	mov	r0, sl
 8008848:	f001 fa58 	bl	8009cfc <__mcmp>
 800884c:	2800      	cmp	r0, #0
 800884e:	da6a      	bge.n	8008926 <_dtoa_r+0x92e>
 8008850:	2300      	movs	r3, #0
 8008852:	4651      	mov	r1, sl
 8008854:	220a      	movs	r2, #10
 8008856:	4628      	mov	r0, r5
 8008858:	f000 ffee 	bl	8009838 <__multadd>
 800885c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800885e:	4682      	mov	sl, r0
 8008860:	f109 39ff 	add.w	r9, r9, #4294967295
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 8193 	beq.w	8008b90 <_dtoa_r+0xb98>
 800886a:	4631      	mov	r1, r6
 800886c:	2300      	movs	r3, #0
 800886e:	220a      	movs	r2, #10
 8008870:	4628      	mov	r0, r5
 8008872:	f000 ffe1 	bl	8009838 <__multadd>
 8008876:	f1bb 0f00 	cmp.w	fp, #0
 800887a:	4606      	mov	r6, r0
 800887c:	f300 8093 	bgt.w	80089a6 <_dtoa_r+0x9ae>
 8008880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008882:	2b02      	cmp	r3, #2
 8008884:	dc57      	bgt.n	8008936 <_dtoa_r+0x93e>
 8008886:	e08e      	b.n	80089a6 <_dtoa_r+0x9ae>
 8008888:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800888a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800888e:	e756      	b.n	800873e <_dtoa_r+0x746>
 8008890:	9b02      	ldr	r3, [sp, #8]
 8008892:	1e5c      	subs	r4, r3, #1
 8008894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008896:	42a3      	cmp	r3, r4
 8008898:	bfb7      	itett	lt
 800889a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800889c:	1b1c      	subge	r4, r3, r4
 800889e:	1ae2      	sublt	r2, r4, r3
 80088a0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80088a2:	bfbe      	ittt	lt
 80088a4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80088a6:	189b      	addlt	r3, r3, r2
 80088a8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80088aa:	9b02      	ldr	r3, [sp, #8]
 80088ac:	bfb8      	it	lt
 80088ae:	2400      	movlt	r4, #0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bfbb      	ittet	lt
 80088b4:	9b06      	ldrlt	r3, [sp, #24]
 80088b6:	9a02      	ldrlt	r2, [sp, #8]
 80088b8:	9f06      	ldrge	r7, [sp, #24]
 80088ba:	1a9f      	sublt	r7, r3, r2
 80088bc:	bfac      	ite	ge
 80088be:	9b02      	ldrge	r3, [sp, #8]
 80088c0:	2300      	movlt	r3, #0
 80088c2:	e73e      	b.n	8008742 <_dtoa_r+0x74a>
 80088c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088c6:	9f06      	ldr	r7, [sp, #24]
 80088c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80088ca:	e745      	b.n	8008758 <_dtoa_r+0x760>
 80088cc:	3fe00000 	.word	0x3fe00000
 80088d0:	40240000 	.word	0x40240000
 80088d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d6:	e76a      	b.n	80087ae <_dtoa_r+0x7b6>
 80088d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088da:	2b01      	cmp	r3, #1
 80088dc:	dc19      	bgt.n	8008912 <_dtoa_r+0x91a>
 80088de:	9b04      	ldr	r3, [sp, #16]
 80088e0:	b9bb      	cbnz	r3, 8008912 <_dtoa_r+0x91a>
 80088e2:	9b05      	ldr	r3, [sp, #20]
 80088e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088e8:	b99b      	cbnz	r3, 8008912 <_dtoa_r+0x91a>
 80088ea:	9b05      	ldr	r3, [sp, #20]
 80088ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088f0:	0d1b      	lsrs	r3, r3, #20
 80088f2:	051b      	lsls	r3, r3, #20
 80088f4:	b183      	cbz	r3, 8008918 <_dtoa_r+0x920>
 80088f6:	f04f 0801 	mov.w	r8, #1
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	3301      	adds	r3, #1
 80088fe:	9306      	str	r3, [sp, #24]
 8008900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008902:	3301      	adds	r3, #1
 8008904:	9309      	str	r3, [sp, #36]	; 0x24
 8008906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008908:	2b00      	cmp	r3, #0
 800890a:	f47f af6a 	bne.w	80087e2 <_dtoa_r+0x7ea>
 800890e:	2001      	movs	r0, #1
 8008910:	e76f      	b.n	80087f2 <_dtoa_r+0x7fa>
 8008912:	f04f 0800 	mov.w	r8, #0
 8008916:	e7f6      	b.n	8008906 <_dtoa_r+0x90e>
 8008918:	4698      	mov	r8, r3
 800891a:	e7f4      	b.n	8008906 <_dtoa_r+0x90e>
 800891c:	f43f af7d 	beq.w	800881a <_dtoa_r+0x822>
 8008920:	4618      	mov	r0, r3
 8008922:	301c      	adds	r0, #28
 8008924:	e772      	b.n	800880c <_dtoa_r+0x814>
 8008926:	9b02      	ldr	r3, [sp, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	dc36      	bgt.n	800899a <_dtoa_r+0x9a2>
 800892c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800892e:	2b02      	cmp	r3, #2
 8008930:	dd33      	ble.n	800899a <_dtoa_r+0x9a2>
 8008932:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008936:	f1bb 0f00 	cmp.w	fp, #0
 800893a:	d10d      	bne.n	8008958 <_dtoa_r+0x960>
 800893c:	4621      	mov	r1, r4
 800893e:	465b      	mov	r3, fp
 8008940:	2205      	movs	r2, #5
 8008942:	4628      	mov	r0, r5
 8008944:	f000 ff78 	bl	8009838 <__multadd>
 8008948:	4601      	mov	r1, r0
 800894a:	4604      	mov	r4, r0
 800894c:	4650      	mov	r0, sl
 800894e:	f001 f9d5 	bl	8009cfc <__mcmp>
 8008952:	2800      	cmp	r0, #0
 8008954:	f73f adb6 	bgt.w	80084c4 <_dtoa_r+0x4cc>
 8008958:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800895a:	9f08      	ldr	r7, [sp, #32]
 800895c:	ea6f 0903 	mvn.w	r9, r3
 8008960:	f04f 0800 	mov.w	r8, #0
 8008964:	4621      	mov	r1, r4
 8008966:	4628      	mov	r0, r5
 8008968:	f000 ff44 	bl	80097f4 <_Bfree>
 800896c:	2e00      	cmp	r6, #0
 800896e:	f43f aea4 	beq.w	80086ba <_dtoa_r+0x6c2>
 8008972:	f1b8 0f00 	cmp.w	r8, #0
 8008976:	d005      	beq.n	8008984 <_dtoa_r+0x98c>
 8008978:	45b0      	cmp	r8, r6
 800897a:	d003      	beq.n	8008984 <_dtoa_r+0x98c>
 800897c:	4641      	mov	r1, r8
 800897e:	4628      	mov	r0, r5
 8008980:	f000 ff38 	bl	80097f4 <_Bfree>
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	f000 ff34 	bl	80097f4 <_Bfree>
 800898c:	e695      	b.n	80086ba <_dtoa_r+0x6c2>
 800898e:	2400      	movs	r4, #0
 8008990:	4626      	mov	r6, r4
 8008992:	e7e1      	b.n	8008958 <_dtoa_r+0x960>
 8008994:	46c1      	mov	r9, r8
 8008996:	4626      	mov	r6, r4
 8008998:	e594      	b.n	80084c4 <_dtoa_r+0x4cc>
 800899a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800899c:	f8dd b008 	ldr.w	fp, [sp, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 80fc 	beq.w	8008b9e <_dtoa_r+0xba6>
 80089a6:	2f00      	cmp	r7, #0
 80089a8:	dd05      	ble.n	80089b6 <_dtoa_r+0x9be>
 80089aa:	4631      	mov	r1, r6
 80089ac:	463a      	mov	r2, r7
 80089ae:	4628      	mov	r0, r5
 80089b0:	f001 f938 	bl	8009c24 <__lshift>
 80089b4:	4606      	mov	r6, r0
 80089b6:	f1b8 0f00 	cmp.w	r8, #0
 80089ba:	d05c      	beq.n	8008a76 <_dtoa_r+0xa7e>
 80089bc:	4628      	mov	r0, r5
 80089be:	6871      	ldr	r1, [r6, #4]
 80089c0:	f000 fed8 	bl	8009774 <_Balloc>
 80089c4:	4607      	mov	r7, r0
 80089c6:	b928      	cbnz	r0, 80089d4 <_dtoa_r+0x9dc>
 80089c8:	4602      	mov	r2, r0
 80089ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 80089ce:	4b7e      	ldr	r3, [pc, #504]	; (8008bc8 <_dtoa_r+0xbd0>)
 80089d0:	f7ff bb26 	b.w	8008020 <_dtoa_r+0x28>
 80089d4:	6932      	ldr	r2, [r6, #16]
 80089d6:	f106 010c 	add.w	r1, r6, #12
 80089da:	3202      	adds	r2, #2
 80089dc:	0092      	lsls	r2, r2, #2
 80089de:	300c      	adds	r0, #12
 80089e0:	f7fd fa1e 	bl	8005e20 <memcpy>
 80089e4:	2201      	movs	r2, #1
 80089e6:	4639      	mov	r1, r7
 80089e8:	4628      	mov	r0, r5
 80089ea:	f001 f91b 	bl	8009c24 <__lshift>
 80089ee:	46b0      	mov	r8, r6
 80089f0:	4606      	mov	r6, r0
 80089f2:	9b08      	ldr	r3, [sp, #32]
 80089f4:	3301      	adds	r3, #1
 80089f6:	9302      	str	r3, [sp, #8]
 80089f8:	9b08      	ldr	r3, [sp, #32]
 80089fa:	445b      	add	r3, fp
 80089fc:	930a      	str	r3, [sp, #40]	; 0x28
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	9309      	str	r3, [sp, #36]	; 0x24
 8008a06:	9b02      	ldr	r3, [sp, #8]
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4650      	mov	r0, sl
 8008a0c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008a10:	f7ff fa65 	bl	8007ede <quorem>
 8008a14:	4603      	mov	r3, r0
 8008a16:	4641      	mov	r1, r8
 8008a18:	3330      	adds	r3, #48	; 0x30
 8008a1a:	9004      	str	r0, [sp, #16]
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a20:	f001 f96c 	bl	8009cfc <__mcmp>
 8008a24:	4632      	mov	r2, r6
 8008a26:	9006      	str	r0, [sp, #24]
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f001 f982 	bl	8009d34 <__mdiff>
 8008a30:	68c2      	ldr	r2, [r0, #12]
 8008a32:	4607      	mov	r7, r0
 8008a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a36:	bb02      	cbnz	r2, 8008a7a <_dtoa_r+0xa82>
 8008a38:	4601      	mov	r1, r0
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	f001 f95e 	bl	8009cfc <__mcmp>
 8008a40:	4602      	mov	r2, r0
 8008a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a44:	4639      	mov	r1, r7
 8008a46:	4628      	mov	r0, r5
 8008a48:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008a4c:	f000 fed2 	bl	80097f4 <_Bfree>
 8008a50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a54:	9f02      	ldr	r7, [sp, #8]
 8008a56:	ea43 0102 	orr.w	r1, r3, r2
 8008a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a60:	d10d      	bne.n	8008a7e <_dtoa_r+0xa86>
 8008a62:	2b39      	cmp	r3, #57	; 0x39
 8008a64:	d027      	beq.n	8008ab6 <_dtoa_r+0xabe>
 8008a66:	9a06      	ldr	r2, [sp, #24]
 8008a68:	2a00      	cmp	r2, #0
 8008a6a:	dd01      	ble.n	8008a70 <_dtoa_r+0xa78>
 8008a6c:	9b04      	ldr	r3, [sp, #16]
 8008a6e:	3331      	adds	r3, #49	; 0x31
 8008a70:	f88b 3000 	strb.w	r3, [fp]
 8008a74:	e776      	b.n	8008964 <_dtoa_r+0x96c>
 8008a76:	4630      	mov	r0, r6
 8008a78:	e7b9      	b.n	80089ee <_dtoa_r+0x9f6>
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	e7e2      	b.n	8008a44 <_dtoa_r+0xa4c>
 8008a7e:	9906      	ldr	r1, [sp, #24]
 8008a80:	2900      	cmp	r1, #0
 8008a82:	db04      	blt.n	8008a8e <_dtoa_r+0xa96>
 8008a84:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008a86:	4301      	orrs	r1, r0
 8008a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a8a:	4301      	orrs	r1, r0
 8008a8c:	d120      	bne.n	8008ad0 <_dtoa_r+0xad8>
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	ddee      	ble.n	8008a70 <_dtoa_r+0xa78>
 8008a92:	4651      	mov	r1, sl
 8008a94:	2201      	movs	r2, #1
 8008a96:	4628      	mov	r0, r5
 8008a98:	9302      	str	r3, [sp, #8]
 8008a9a:	f001 f8c3 	bl	8009c24 <__lshift>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4682      	mov	sl, r0
 8008aa2:	f001 f92b 	bl	8009cfc <__mcmp>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	9b02      	ldr	r3, [sp, #8]
 8008aaa:	dc02      	bgt.n	8008ab2 <_dtoa_r+0xaba>
 8008aac:	d1e0      	bne.n	8008a70 <_dtoa_r+0xa78>
 8008aae:	07da      	lsls	r2, r3, #31
 8008ab0:	d5de      	bpl.n	8008a70 <_dtoa_r+0xa78>
 8008ab2:	2b39      	cmp	r3, #57	; 0x39
 8008ab4:	d1da      	bne.n	8008a6c <_dtoa_r+0xa74>
 8008ab6:	2339      	movs	r3, #57	; 0x39
 8008ab8:	f88b 3000 	strb.w	r3, [fp]
 8008abc:	463b      	mov	r3, r7
 8008abe:	461f      	mov	r7, r3
 8008ac0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	2a39      	cmp	r2, #57	; 0x39
 8008ac8:	d050      	beq.n	8008b6c <_dtoa_r+0xb74>
 8008aca:	3201      	adds	r2, #1
 8008acc:	701a      	strb	r2, [r3, #0]
 8008ace:	e749      	b.n	8008964 <_dtoa_r+0x96c>
 8008ad0:	2a00      	cmp	r2, #0
 8008ad2:	dd03      	ble.n	8008adc <_dtoa_r+0xae4>
 8008ad4:	2b39      	cmp	r3, #57	; 0x39
 8008ad6:	d0ee      	beq.n	8008ab6 <_dtoa_r+0xabe>
 8008ad8:	3301      	adds	r3, #1
 8008ada:	e7c9      	b.n	8008a70 <_dtoa_r+0xa78>
 8008adc:	9a02      	ldr	r2, [sp, #8]
 8008ade:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ae0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ae4:	428a      	cmp	r2, r1
 8008ae6:	d02a      	beq.n	8008b3e <_dtoa_r+0xb46>
 8008ae8:	4651      	mov	r1, sl
 8008aea:	2300      	movs	r3, #0
 8008aec:	220a      	movs	r2, #10
 8008aee:	4628      	mov	r0, r5
 8008af0:	f000 fea2 	bl	8009838 <__multadd>
 8008af4:	45b0      	cmp	r8, r6
 8008af6:	4682      	mov	sl, r0
 8008af8:	f04f 0300 	mov.w	r3, #0
 8008afc:	f04f 020a 	mov.w	r2, #10
 8008b00:	4641      	mov	r1, r8
 8008b02:	4628      	mov	r0, r5
 8008b04:	d107      	bne.n	8008b16 <_dtoa_r+0xb1e>
 8008b06:	f000 fe97 	bl	8009838 <__multadd>
 8008b0a:	4680      	mov	r8, r0
 8008b0c:	4606      	mov	r6, r0
 8008b0e:	9b02      	ldr	r3, [sp, #8]
 8008b10:	3301      	adds	r3, #1
 8008b12:	9302      	str	r3, [sp, #8]
 8008b14:	e777      	b.n	8008a06 <_dtoa_r+0xa0e>
 8008b16:	f000 fe8f 	bl	8009838 <__multadd>
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	2300      	movs	r3, #0
 8008b20:	220a      	movs	r2, #10
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 fe88 	bl	8009838 <__multadd>
 8008b28:	4606      	mov	r6, r0
 8008b2a:	e7f0      	b.n	8008b0e <_dtoa_r+0xb16>
 8008b2c:	f1bb 0f00 	cmp.w	fp, #0
 8008b30:	bfcc      	ite	gt
 8008b32:	465f      	movgt	r7, fp
 8008b34:	2701      	movle	r7, #1
 8008b36:	f04f 0800 	mov.w	r8, #0
 8008b3a:	9a08      	ldr	r2, [sp, #32]
 8008b3c:	4417      	add	r7, r2
 8008b3e:	4651      	mov	r1, sl
 8008b40:	2201      	movs	r2, #1
 8008b42:	4628      	mov	r0, r5
 8008b44:	9302      	str	r3, [sp, #8]
 8008b46:	f001 f86d 	bl	8009c24 <__lshift>
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	4682      	mov	sl, r0
 8008b4e:	f001 f8d5 	bl	8009cfc <__mcmp>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	dcb2      	bgt.n	8008abc <_dtoa_r+0xac4>
 8008b56:	d102      	bne.n	8008b5e <_dtoa_r+0xb66>
 8008b58:	9b02      	ldr	r3, [sp, #8]
 8008b5a:	07db      	lsls	r3, r3, #31
 8008b5c:	d4ae      	bmi.n	8008abc <_dtoa_r+0xac4>
 8008b5e:	463b      	mov	r3, r7
 8008b60:	461f      	mov	r7, r3
 8008b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b66:	2a30      	cmp	r2, #48	; 0x30
 8008b68:	d0fa      	beq.n	8008b60 <_dtoa_r+0xb68>
 8008b6a:	e6fb      	b.n	8008964 <_dtoa_r+0x96c>
 8008b6c:	9a08      	ldr	r2, [sp, #32]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d1a5      	bne.n	8008abe <_dtoa_r+0xac6>
 8008b72:	2331      	movs	r3, #49	; 0x31
 8008b74:	f109 0901 	add.w	r9, r9, #1
 8008b78:	7013      	strb	r3, [r2, #0]
 8008b7a:	e6f3      	b.n	8008964 <_dtoa_r+0x96c>
 8008b7c:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <_dtoa_r+0xbd4>)
 8008b7e:	f7ff baa7 	b.w	80080d0 <_dtoa_r+0xd8>
 8008b82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f47f aa80 	bne.w	800808a <_dtoa_r+0x92>
 8008b8a:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <_dtoa_r+0xbd8>)
 8008b8c:	f7ff baa0 	b.w	80080d0 <_dtoa_r+0xd8>
 8008b90:	f1bb 0f00 	cmp.w	fp, #0
 8008b94:	dc03      	bgt.n	8008b9e <_dtoa_r+0xba6>
 8008b96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	f73f aecc 	bgt.w	8008936 <_dtoa_r+0x93e>
 8008b9e:	9f08      	ldr	r7, [sp, #32]
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	f7ff f99b 	bl	8007ede <quorem>
 8008ba8:	9a08      	ldr	r2, [sp, #32]
 8008baa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008bae:	f807 3b01 	strb.w	r3, [r7], #1
 8008bb2:	1aba      	subs	r2, r7, r2
 8008bb4:	4593      	cmp	fp, r2
 8008bb6:	ddb9      	ble.n	8008b2c <_dtoa_r+0xb34>
 8008bb8:	4651      	mov	r1, sl
 8008bba:	2300      	movs	r3, #0
 8008bbc:	220a      	movs	r2, #10
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f000 fe3a 	bl	8009838 <__multadd>
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	e7eb      	b.n	8008ba0 <_dtoa_r+0xba8>
 8008bc8:	0800aab4 	.word	0x0800aab4
 8008bcc:	0800a8b1 	.word	0x0800a8b1
 8008bd0:	0800aa31 	.word	0x0800aa31

08008bd4 <__sflush_r>:
 8008bd4:	898a      	ldrh	r2, [r1, #12]
 8008bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bda:	4605      	mov	r5, r0
 8008bdc:	0710      	lsls	r0, r2, #28
 8008bde:	460c      	mov	r4, r1
 8008be0:	d458      	bmi.n	8008c94 <__sflush_r+0xc0>
 8008be2:	684b      	ldr	r3, [r1, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dc05      	bgt.n	8008bf4 <__sflush_r+0x20>
 8008be8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	dc02      	bgt.n	8008bf4 <__sflush_r+0x20>
 8008bee:	2000      	movs	r0, #0
 8008bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bf6:	2e00      	cmp	r6, #0
 8008bf8:	d0f9      	beq.n	8008bee <__sflush_r+0x1a>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c00:	682f      	ldr	r7, [r5, #0]
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	d032      	beq.n	8008c6c <__sflush_r+0x98>
 8008c06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c08:	89a3      	ldrh	r3, [r4, #12]
 8008c0a:	075a      	lsls	r2, r3, #29
 8008c0c:	d505      	bpl.n	8008c1a <__sflush_r+0x46>
 8008c0e:	6863      	ldr	r3, [r4, #4]
 8008c10:	1ac0      	subs	r0, r0, r3
 8008c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c14:	b10b      	cbz	r3, 8008c1a <__sflush_r+0x46>
 8008c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c18:	1ac0      	subs	r0, r0, r3
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c20:	4628      	mov	r0, r5
 8008c22:	6a21      	ldr	r1, [r4, #32]
 8008c24:	47b0      	blx	r6
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	d106      	bne.n	8008c3a <__sflush_r+0x66>
 8008c2c:	6829      	ldr	r1, [r5, #0]
 8008c2e:	291d      	cmp	r1, #29
 8008c30:	d82c      	bhi.n	8008c8c <__sflush_r+0xb8>
 8008c32:	4a2a      	ldr	r2, [pc, #168]	; (8008cdc <__sflush_r+0x108>)
 8008c34:	40ca      	lsrs	r2, r1
 8008c36:	07d6      	lsls	r6, r2, #31
 8008c38:	d528      	bpl.n	8008c8c <__sflush_r+0xb8>
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	6062      	str	r2, [r4, #4]
 8008c3e:	6922      	ldr	r2, [r4, #16]
 8008c40:	04d9      	lsls	r1, r3, #19
 8008c42:	6022      	str	r2, [r4, #0]
 8008c44:	d504      	bpl.n	8008c50 <__sflush_r+0x7c>
 8008c46:	1c42      	adds	r2, r0, #1
 8008c48:	d101      	bne.n	8008c4e <__sflush_r+0x7a>
 8008c4a:	682b      	ldr	r3, [r5, #0]
 8008c4c:	b903      	cbnz	r3, 8008c50 <__sflush_r+0x7c>
 8008c4e:	6560      	str	r0, [r4, #84]	; 0x54
 8008c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c52:	602f      	str	r7, [r5, #0]
 8008c54:	2900      	cmp	r1, #0
 8008c56:	d0ca      	beq.n	8008bee <__sflush_r+0x1a>
 8008c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c5c:	4299      	cmp	r1, r3
 8008c5e:	d002      	beq.n	8008c66 <__sflush_r+0x92>
 8008c60:	4628      	mov	r0, r5
 8008c62:	f7fd f8f3 	bl	8005e4c <_free_r>
 8008c66:	2000      	movs	r0, #0
 8008c68:	6360      	str	r0, [r4, #52]	; 0x34
 8008c6a:	e7c1      	b.n	8008bf0 <__sflush_r+0x1c>
 8008c6c:	6a21      	ldr	r1, [r4, #32]
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b0      	blx	r6
 8008c74:	1c41      	adds	r1, r0, #1
 8008c76:	d1c7      	bne.n	8008c08 <__sflush_r+0x34>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0c4      	beq.n	8008c08 <__sflush_r+0x34>
 8008c7e:	2b1d      	cmp	r3, #29
 8008c80:	d001      	beq.n	8008c86 <__sflush_r+0xb2>
 8008c82:	2b16      	cmp	r3, #22
 8008c84:	d101      	bne.n	8008c8a <__sflush_r+0xb6>
 8008c86:	602f      	str	r7, [r5, #0]
 8008c88:	e7b1      	b.n	8008bee <__sflush_r+0x1a>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	e7ad      	b.n	8008bf0 <__sflush_r+0x1c>
 8008c94:	690f      	ldr	r7, [r1, #16]
 8008c96:	2f00      	cmp	r7, #0
 8008c98:	d0a9      	beq.n	8008bee <__sflush_r+0x1a>
 8008c9a:	0793      	lsls	r3, r2, #30
 8008c9c:	bf18      	it	ne
 8008c9e:	2300      	movne	r3, #0
 8008ca0:	680e      	ldr	r6, [r1, #0]
 8008ca2:	bf08      	it	eq
 8008ca4:	694b      	ldreq	r3, [r1, #20]
 8008ca6:	eba6 0807 	sub.w	r8, r6, r7
 8008caa:	600f      	str	r7, [r1, #0]
 8008cac:	608b      	str	r3, [r1, #8]
 8008cae:	f1b8 0f00 	cmp.w	r8, #0
 8008cb2:	dd9c      	ble.n	8008bee <__sflush_r+0x1a>
 8008cb4:	4643      	mov	r3, r8
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	4628      	mov	r0, r5
 8008cba:	6a21      	ldr	r1, [r4, #32]
 8008cbc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cbe:	47b0      	blx	r6
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	dc06      	bgt.n	8008cd2 <__sflush_r+0xfe>
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	e78e      	b.n	8008bf0 <__sflush_r+0x1c>
 8008cd2:	4407      	add	r7, r0
 8008cd4:	eba8 0800 	sub.w	r8, r8, r0
 8008cd8:	e7e9      	b.n	8008cae <__sflush_r+0xda>
 8008cda:	bf00      	nop
 8008cdc:	20400001 	.word	0x20400001

08008ce0 <_fflush_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	690b      	ldr	r3, [r1, #16]
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	b913      	cbnz	r3, 8008cf0 <_fflush_r+0x10>
 8008cea:	2500      	movs	r5, #0
 8008cec:	4628      	mov	r0, r5
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	b118      	cbz	r0, 8008cfa <_fflush_r+0x1a>
 8008cf2:	6983      	ldr	r3, [r0, #24]
 8008cf4:	b90b      	cbnz	r3, 8008cfa <_fflush_r+0x1a>
 8008cf6:	f000 f887 	bl	8008e08 <__sinit>
 8008cfa:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <_fflush_r+0x6c>)
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	d11b      	bne.n	8008d38 <_fflush_r+0x58>
 8008d00:	686c      	ldr	r4, [r5, #4]
 8008d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0ef      	beq.n	8008cea <_fflush_r+0xa>
 8008d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d0c:	07d0      	lsls	r0, r2, #31
 8008d0e:	d404      	bmi.n	8008d1a <_fflush_r+0x3a>
 8008d10:	0599      	lsls	r1, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <_fflush_r+0x3a>
 8008d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d16:	f000 fc80 	bl	800961a <__retarget_lock_acquire_recursive>
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f7ff ff59 	bl	8008bd4 <__sflush_r>
 8008d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d24:	4605      	mov	r5, r0
 8008d26:	07da      	lsls	r2, r3, #31
 8008d28:	d4e0      	bmi.n	8008cec <_fflush_r+0xc>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	059b      	lsls	r3, r3, #22
 8008d2e:	d4dd      	bmi.n	8008cec <_fflush_r+0xc>
 8008d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d32:	f000 fc73 	bl	800961c <__retarget_lock_release_recursive>
 8008d36:	e7d9      	b.n	8008cec <_fflush_r+0xc>
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <_fflush_r+0x70>)
 8008d3a:	429c      	cmp	r4, r3
 8008d3c:	d101      	bne.n	8008d42 <_fflush_r+0x62>
 8008d3e:	68ac      	ldr	r4, [r5, #8]
 8008d40:	e7df      	b.n	8008d02 <_fflush_r+0x22>
 8008d42:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <_fflush_r+0x74>)
 8008d44:	429c      	cmp	r4, r3
 8008d46:	bf08      	it	eq
 8008d48:	68ec      	ldreq	r4, [r5, #12]
 8008d4a:	e7da      	b.n	8008d02 <_fflush_r+0x22>
 8008d4c:	0800aae8 	.word	0x0800aae8
 8008d50:	0800ab08 	.word	0x0800ab08
 8008d54:	0800aac8 	.word	0x0800aac8

08008d58 <std>:
 8008d58:	2300      	movs	r3, #0
 8008d5a:	b510      	push	{r4, lr}
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d66:	6083      	str	r3, [r0, #8]
 8008d68:	8181      	strh	r1, [r0, #12]
 8008d6a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d6c:	81c2      	strh	r2, [r0, #14]
 8008d6e:	6183      	str	r3, [r0, #24]
 8008d70:	4619      	mov	r1, r3
 8008d72:	2208      	movs	r2, #8
 8008d74:	305c      	adds	r0, #92	; 0x5c
 8008d76:	f7fd f861 	bl	8005e3c <memset>
 8008d7a:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <std+0x38>)
 8008d7c:	6224      	str	r4, [r4, #32]
 8008d7e:	6263      	str	r3, [r4, #36]	; 0x24
 8008d80:	4b04      	ldr	r3, [pc, #16]	; (8008d94 <std+0x3c>)
 8008d82:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d84:	4b04      	ldr	r3, [pc, #16]	; (8008d98 <std+0x40>)
 8008d86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d88:	4b04      	ldr	r3, [pc, #16]	; (8008d9c <std+0x44>)
 8008d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d8c:	bd10      	pop	{r4, pc}
 8008d8e:	bf00      	nop
 8008d90:	0800a499 	.word	0x0800a499
 8008d94:	0800a4bb 	.word	0x0800a4bb
 8008d98:	0800a4f3 	.word	0x0800a4f3
 8008d9c:	0800a517 	.word	0x0800a517

08008da0 <_cleanup_r>:
 8008da0:	4901      	ldr	r1, [pc, #4]	; (8008da8 <_cleanup_r+0x8>)
 8008da2:	f000 b8af 	b.w	8008f04 <_fwalk_reent>
 8008da6:	bf00      	nop
 8008da8:	08008ce1 	.word	0x08008ce1

08008dac <__sfmoreglue>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	2568      	movs	r5, #104	; 0x68
 8008db0:	1e4a      	subs	r2, r1, #1
 8008db2:	4355      	muls	r5, r2
 8008db4:	460e      	mov	r6, r1
 8008db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dba:	f7fd f893 	bl	8005ee4 <_malloc_r>
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	b140      	cbz	r0, 8008dd4 <__sfmoreglue+0x28>
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8008dc8:	300c      	adds	r0, #12
 8008dca:	60a0      	str	r0, [r4, #8]
 8008dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dd0:	f7fd f834 	bl	8005e3c <memset>
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}

08008dd8 <__sfp_lock_acquire>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__sfp_lock_acquire+0x8>)
 8008dda:	f000 bc1e 	b.w	800961a <__retarget_lock_acquire_recursive>
 8008dde:	bf00      	nop
 8008de0:	200008c4 	.word	0x200008c4

08008de4 <__sfp_lock_release>:
 8008de4:	4801      	ldr	r0, [pc, #4]	; (8008dec <__sfp_lock_release+0x8>)
 8008de6:	f000 bc19 	b.w	800961c <__retarget_lock_release_recursive>
 8008dea:	bf00      	nop
 8008dec:	200008c4 	.word	0x200008c4

08008df0 <__sinit_lock_acquire>:
 8008df0:	4801      	ldr	r0, [pc, #4]	; (8008df8 <__sinit_lock_acquire+0x8>)
 8008df2:	f000 bc12 	b.w	800961a <__retarget_lock_acquire_recursive>
 8008df6:	bf00      	nop
 8008df8:	200008bf 	.word	0x200008bf

08008dfc <__sinit_lock_release>:
 8008dfc:	4801      	ldr	r0, [pc, #4]	; (8008e04 <__sinit_lock_release+0x8>)
 8008dfe:	f000 bc0d 	b.w	800961c <__retarget_lock_release_recursive>
 8008e02:	bf00      	nop
 8008e04:	200008bf 	.word	0x200008bf

08008e08 <__sinit>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	f7ff fff0 	bl	8008df0 <__sinit_lock_acquire>
 8008e10:	69a3      	ldr	r3, [r4, #24]
 8008e12:	b11b      	cbz	r3, 8008e1c <__sinit+0x14>
 8008e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e18:	f7ff bff0 	b.w	8008dfc <__sinit_lock_release>
 8008e1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e20:	6523      	str	r3, [r4, #80]	; 0x50
 8008e22:	4b13      	ldr	r3, [pc, #76]	; (8008e70 <__sinit+0x68>)
 8008e24:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <__sinit+0x6c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e2a:	42a3      	cmp	r3, r4
 8008e2c:	bf08      	it	eq
 8008e2e:	2301      	moveq	r3, #1
 8008e30:	4620      	mov	r0, r4
 8008e32:	bf08      	it	eq
 8008e34:	61a3      	streq	r3, [r4, #24]
 8008e36:	f000 f81f 	bl	8008e78 <__sfp>
 8008e3a:	6060      	str	r0, [r4, #4]
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f000 f81b 	bl	8008e78 <__sfp>
 8008e42:	60a0      	str	r0, [r4, #8]
 8008e44:	4620      	mov	r0, r4
 8008e46:	f000 f817 	bl	8008e78 <__sfp>
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2104      	movs	r1, #4
 8008e4e:	60e0      	str	r0, [r4, #12]
 8008e50:	6860      	ldr	r0, [r4, #4]
 8008e52:	f7ff ff81 	bl	8008d58 <std>
 8008e56:	2201      	movs	r2, #1
 8008e58:	2109      	movs	r1, #9
 8008e5a:	68a0      	ldr	r0, [r4, #8]
 8008e5c:	f7ff ff7c 	bl	8008d58 <std>
 8008e60:	2202      	movs	r2, #2
 8008e62:	2112      	movs	r1, #18
 8008e64:	68e0      	ldr	r0, [r4, #12]
 8008e66:	f7ff ff77 	bl	8008d58 <std>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	61a3      	str	r3, [r4, #24]
 8008e6e:	e7d1      	b.n	8008e14 <__sinit+0xc>
 8008e70:	0800a88c 	.word	0x0800a88c
 8008e74:	08008da1 	.word	0x08008da1

08008e78 <__sfp>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	f7ff ffac 	bl	8008dd8 <__sfp_lock_acquire>
 8008e80:	4b1e      	ldr	r3, [pc, #120]	; (8008efc <__sfp+0x84>)
 8008e82:	681e      	ldr	r6, [r3, #0]
 8008e84:	69b3      	ldr	r3, [r6, #24]
 8008e86:	b913      	cbnz	r3, 8008e8e <__sfp+0x16>
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7ff ffbd 	bl	8008e08 <__sinit>
 8008e8e:	3648      	adds	r6, #72	; 0x48
 8008e90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	d503      	bpl.n	8008ea0 <__sfp+0x28>
 8008e98:	6833      	ldr	r3, [r6, #0]
 8008e9a:	b30b      	cbz	r3, 8008ee0 <__sfp+0x68>
 8008e9c:	6836      	ldr	r6, [r6, #0]
 8008e9e:	e7f7      	b.n	8008e90 <__sfp+0x18>
 8008ea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ea4:	b9d5      	cbnz	r5, 8008edc <__sfp+0x64>
 8008ea6:	4b16      	ldr	r3, [pc, #88]	; (8008f00 <__sfp+0x88>)
 8008ea8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008eac:	60e3      	str	r3, [r4, #12]
 8008eae:	6665      	str	r5, [r4, #100]	; 0x64
 8008eb0:	f000 fbb2 	bl	8009618 <__retarget_lock_init_recursive>
 8008eb4:	f7ff ff96 	bl	8008de4 <__sfp_lock_release>
 8008eb8:	2208      	movs	r2, #8
 8008eba:	4629      	mov	r1, r5
 8008ebc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ec0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ec4:	6025      	str	r5, [r4, #0]
 8008ec6:	61a5      	str	r5, [r4, #24]
 8008ec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ecc:	f7fc ffb6 	bl	8005e3c <memset>
 8008ed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ed8:	4620      	mov	r0, r4
 8008eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008edc:	3468      	adds	r4, #104	; 0x68
 8008ede:	e7d9      	b.n	8008e94 <__sfp+0x1c>
 8008ee0:	2104      	movs	r1, #4
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f7ff ff62 	bl	8008dac <__sfmoreglue>
 8008ee8:	4604      	mov	r4, r0
 8008eea:	6030      	str	r0, [r6, #0]
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d1d5      	bne.n	8008e9c <__sfp+0x24>
 8008ef0:	f7ff ff78 	bl	8008de4 <__sfp_lock_release>
 8008ef4:	230c      	movs	r3, #12
 8008ef6:	603b      	str	r3, [r7, #0]
 8008ef8:	e7ee      	b.n	8008ed8 <__sfp+0x60>
 8008efa:	bf00      	nop
 8008efc:	0800a88c 	.word	0x0800a88c
 8008f00:	ffff0001 	.word	0xffff0001

08008f04 <_fwalk_reent>:
 8008f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f08:	4606      	mov	r6, r0
 8008f0a:	4688      	mov	r8, r1
 8008f0c:	2700      	movs	r7, #0
 8008f0e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f16:	f1b9 0901 	subs.w	r9, r9, #1
 8008f1a:	d505      	bpl.n	8008f28 <_fwalk_reent+0x24>
 8008f1c:	6824      	ldr	r4, [r4, #0]
 8008f1e:	2c00      	cmp	r4, #0
 8008f20:	d1f7      	bne.n	8008f12 <_fwalk_reent+0xe>
 8008f22:	4638      	mov	r0, r7
 8008f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f28:	89ab      	ldrh	r3, [r5, #12]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d907      	bls.n	8008f3e <_fwalk_reent+0x3a>
 8008f2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f32:	3301      	adds	r3, #1
 8008f34:	d003      	beq.n	8008f3e <_fwalk_reent+0x3a>
 8008f36:	4629      	mov	r1, r5
 8008f38:	4630      	mov	r0, r6
 8008f3a:	47c0      	blx	r8
 8008f3c:	4307      	orrs	r7, r0
 8008f3e:	3568      	adds	r5, #104	; 0x68
 8008f40:	e7e9      	b.n	8008f16 <_fwalk_reent+0x12>

08008f42 <rshift>:
 8008f42:	6903      	ldr	r3, [r0, #16]
 8008f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008f4c:	f100 0414 	add.w	r4, r0, #20
 8008f50:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008f54:	dd46      	ble.n	8008fe4 <rshift+0xa2>
 8008f56:	f011 011f 	ands.w	r1, r1, #31
 8008f5a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008f5e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008f62:	d10c      	bne.n	8008f7e <rshift+0x3c>
 8008f64:	4629      	mov	r1, r5
 8008f66:	f100 0710 	add.w	r7, r0, #16
 8008f6a:	42b1      	cmp	r1, r6
 8008f6c:	d335      	bcc.n	8008fda <rshift+0x98>
 8008f6e:	1a9b      	subs	r3, r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	1eea      	subs	r2, r5, #3
 8008f74:	4296      	cmp	r6, r2
 8008f76:	bf38      	it	cc
 8008f78:	2300      	movcc	r3, #0
 8008f7a:	4423      	add	r3, r4
 8008f7c:	e015      	b.n	8008faa <rshift+0x68>
 8008f7e:	46a1      	mov	r9, r4
 8008f80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008f84:	f1c1 0820 	rsb	r8, r1, #32
 8008f88:	40cf      	lsrs	r7, r1
 8008f8a:	f105 0e04 	add.w	lr, r5, #4
 8008f8e:	4576      	cmp	r6, lr
 8008f90:	46f4      	mov	ip, lr
 8008f92:	d816      	bhi.n	8008fc2 <rshift+0x80>
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	009a      	lsls	r2, r3, #2
 8008f98:	3a04      	subs	r2, #4
 8008f9a:	3501      	adds	r5, #1
 8008f9c:	42ae      	cmp	r6, r5
 8008f9e:	bf38      	it	cc
 8008fa0:	2200      	movcc	r2, #0
 8008fa2:	18a3      	adds	r3, r4, r2
 8008fa4:	50a7      	str	r7, [r4, r2]
 8008fa6:	b107      	cbz	r7, 8008faa <rshift+0x68>
 8008fa8:	3304      	adds	r3, #4
 8008faa:	42a3      	cmp	r3, r4
 8008fac:	eba3 0204 	sub.w	r2, r3, r4
 8008fb0:	bf08      	it	eq
 8008fb2:	2300      	moveq	r3, #0
 8008fb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008fb8:	6102      	str	r2, [r0, #16]
 8008fba:	bf08      	it	eq
 8008fbc:	6143      	streq	r3, [r0, #20]
 8008fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fc2:	f8dc c000 	ldr.w	ip, [ip]
 8008fc6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008fca:	ea4c 0707 	orr.w	r7, ip, r7
 8008fce:	f849 7b04 	str.w	r7, [r9], #4
 8008fd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fd6:	40cf      	lsrs	r7, r1
 8008fd8:	e7d9      	b.n	8008f8e <rshift+0x4c>
 8008fda:	f851 cb04 	ldr.w	ip, [r1], #4
 8008fde:	f847 cf04 	str.w	ip, [r7, #4]!
 8008fe2:	e7c2      	b.n	8008f6a <rshift+0x28>
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	e7e0      	b.n	8008faa <rshift+0x68>

08008fe8 <__hexdig_fun>:
 8008fe8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008fec:	2b09      	cmp	r3, #9
 8008fee:	d802      	bhi.n	8008ff6 <__hexdig_fun+0xe>
 8008ff0:	3820      	subs	r0, #32
 8008ff2:	b2c0      	uxtb	r0, r0
 8008ff4:	4770      	bx	lr
 8008ff6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	d801      	bhi.n	8009002 <__hexdig_fun+0x1a>
 8008ffe:	3847      	subs	r0, #71	; 0x47
 8009000:	e7f7      	b.n	8008ff2 <__hexdig_fun+0xa>
 8009002:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009006:	2b05      	cmp	r3, #5
 8009008:	d801      	bhi.n	800900e <__hexdig_fun+0x26>
 800900a:	3827      	subs	r0, #39	; 0x27
 800900c:	e7f1      	b.n	8008ff2 <__hexdig_fun+0xa>
 800900e:	2000      	movs	r0, #0
 8009010:	4770      	bx	lr
	...

08009014 <__gethex>:
 8009014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	b08b      	sub	sp, #44	; 0x2c
 800901a:	9306      	str	r3, [sp, #24]
 800901c:	4bb9      	ldr	r3, [pc, #740]	; (8009304 <__gethex+0x2f0>)
 800901e:	9002      	str	r0, [sp, #8]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	468b      	mov	fp, r1
 8009024:	4618      	mov	r0, r3
 8009026:	4690      	mov	r8, r2
 8009028:	9303      	str	r3, [sp, #12]
 800902a:	f7f7 f891 	bl	8000150 <strlen>
 800902e:	4682      	mov	sl, r0
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	f8db 2000 	ldr.w	r2, [fp]
 8009036:	4403      	add	r3, r0
 8009038:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800903c:	9307      	str	r3, [sp, #28]
 800903e:	1c93      	adds	r3, r2, #2
 8009040:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009044:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009048:	32fe      	adds	r2, #254	; 0xfe
 800904a:	18d1      	adds	r1, r2, r3
 800904c:	461f      	mov	r7, r3
 800904e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009052:	9101      	str	r1, [sp, #4]
 8009054:	2830      	cmp	r0, #48	; 0x30
 8009056:	d0f8      	beq.n	800904a <__gethex+0x36>
 8009058:	f7ff ffc6 	bl	8008fe8 <__hexdig_fun>
 800905c:	4604      	mov	r4, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	d13a      	bne.n	80090d8 <__gethex+0xc4>
 8009062:	4652      	mov	r2, sl
 8009064:	4638      	mov	r0, r7
 8009066:	9903      	ldr	r1, [sp, #12]
 8009068:	f001 fa59 	bl	800a51e <strncmp>
 800906c:	4605      	mov	r5, r0
 800906e:	2800      	cmp	r0, #0
 8009070:	d166      	bne.n	8009140 <__gethex+0x12c>
 8009072:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009076:	eb07 060a 	add.w	r6, r7, sl
 800907a:	f7ff ffb5 	bl	8008fe8 <__hexdig_fun>
 800907e:	2800      	cmp	r0, #0
 8009080:	d060      	beq.n	8009144 <__gethex+0x130>
 8009082:	4633      	mov	r3, r6
 8009084:	7818      	ldrb	r0, [r3, #0]
 8009086:	461f      	mov	r7, r3
 8009088:	2830      	cmp	r0, #48	; 0x30
 800908a:	f103 0301 	add.w	r3, r3, #1
 800908e:	d0f9      	beq.n	8009084 <__gethex+0x70>
 8009090:	f7ff ffaa 	bl	8008fe8 <__hexdig_fun>
 8009094:	2301      	movs	r3, #1
 8009096:	fab0 f480 	clz	r4, r0
 800909a:	4635      	mov	r5, r6
 800909c:	0964      	lsrs	r4, r4, #5
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	463a      	mov	r2, r7
 80090a2:	4616      	mov	r6, r2
 80090a4:	7830      	ldrb	r0, [r6, #0]
 80090a6:	3201      	adds	r2, #1
 80090a8:	f7ff ff9e 	bl	8008fe8 <__hexdig_fun>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	d1f8      	bne.n	80090a2 <__gethex+0x8e>
 80090b0:	4652      	mov	r2, sl
 80090b2:	4630      	mov	r0, r6
 80090b4:	9903      	ldr	r1, [sp, #12]
 80090b6:	f001 fa32 	bl	800a51e <strncmp>
 80090ba:	b980      	cbnz	r0, 80090de <__gethex+0xca>
 80090bc:	b94d      	cbnz	r5, 80090d2 <__gethex+0xbe>
 80090be:	eb06 050a 	add.w	r5, r6, sl
 80090c2:	462a      	mov	r2, r5
 80090c4:	4616      	mov	r6, r2
 80090c6:	7830      	ldrb	r0, [r6, #0]
 80090c8:	3201      	adds	r2, #1
 80090ca:	f7ff ff8d 	bl	8008fe8 <__hexdig_fun>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d1f8      	bne.n	80090c4 <__gethex+0xb0>
 80090d2:	1bad      	subs	r5, r5, r6
 80090d4:	00ad      	lsls	r5, r5, #2
 80090d6:	e004      	b.n	80090e2 <__gethex+0xce>
 80090d8:	2400      	movs	r4, #0
 80090da:	4625      	mov	r5, r4
 80090dc:	e7e0      	b.n	80090a0 <__gethex+0x8c>
 80090de:	2d00      	cmp	r5, #0
 80090e0:	d1f7      	bne.n	80090d2 <__gethex+0xbe>
 80090e2:	7833      	ldrb	r3, [r6, #0]
 80090e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090e8:	2b50      	cmp	r3, #80	; 0x50
 80090ea:	d139      	bne.n	8009160 <__gethex+0x14c>
 80090ec:	7873      	ldrb	r3, [r6, #1]
 80090ee:	2b2b      	cmp	r3, #43	; 0x2b
 80090f0:	d02a      	beq.n	8009148 <__gethex+0x134>
 80090f2:	2b2d      	cmp	r3, #45	; 0x2d
 80090f4:	d02c      	beq.n	8009150 <__gethex+0x13c>
 80090f6:	f04f 0900 	mov.w	r9, #0
 80090fa:	1c71      	adds	r1, r6, #1
 80090fc:	7808      	ldrb	r0, [r1, #0]
 80090fe:	f7ff ff73 	bl	8008fe8 <__hexdig_fun>
 8009102:	1e43      	subs	r3, r0, #1
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b18      	cmp	r3, #24
 8009108:	d82a      	bhi.n	8009160 <__gethex+0x14c>
 800910a:	f1a0 0210 	sub.w	r2, r0, #16
 800910e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009112:	f7ff ff69 	bl	8008fe8 <__hexdig_fun>
 8009116:	1e43      	subs	r3, r0, #1
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b18      	cmp	r3, #24
 800911c:	d91b      	bls.n	8009156 <__gethex+0x142>
 800911e:	f1b9 0f00 	cmp.w	r9, #0
 8009122:	d000      	beq.n	8009126 <__gethex+0x112>
 8009124:	4252      	negs	r2, r2
 8009126:	4415      	add	r5, r2
 8009128:	f8cb 1000 	str.w	r1, [fp]
 800912c:	b1d4      	cbz	r4, 8009164 <__gethex+0x150>
 800912e:	9b01      	ldr	r3, [sp, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	bf14      	ite	ne
 8009134:	2700      	movne	r7, #0
 8009136:	2706      	moveq	r7, #6
 8009138:	4638      	mov	r0, r7
 800913a:	b00b      	add	sp, #44	; 0x2c
 800913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009140:	463e      	mov	r6, r7
 8009142:	4625      	mov	r5, r4
 8009144:	2401      	movs	r4, #1
 8009146:	e7cc      	b.n	80090e2 <__gethex+0xce>
 8009148:	f04f 0900 	mov.w	r9, #0
 800914c:	1cb1      	adds	r1, r6, #2
 800914e:	e7d5      	b.n	80090fc <__gethex+0xe8>
 8009150:	f04f 0901 	mov.w	r9, #1
 8009154:	e7fa      	b.n	800914c <__gethex+0x138>
 8009156:	230a      	movs	r3, #10
 8009158:	fb03 0202 	mla	r2, r3, r2, r0
 800915c:	3a10      	subs	r2, #16
 800915e:	e7d6      	b.n	800910e <__gethex+0xfa>
 8009160:	4631      	mov	r1, r6
 8009162:	e7e1      	b.n	8009128 <__gethex+0x114>
 8009164:	4621      	mov	r1, r4
 8009166:	1bf3      	subs	r3, r6, r7
 8009168:	3b01      	subs	r3, #1
 800916a:	2b07      	cmp	r3, #7
 800916c:	dc0a      	bgt.n	8009184 <__gethex+0x170>
 800916e:	9802      	ldr	r0, [sp, #8]
 8009170:	f000 fb00 	bl	8009774 <_Balloc>
 8009174:	4604      	mov	r4, r0
 8009176:	b940      	cbnz	r0, 800918a <__gethex+0x176>
 8009178:	4602      	mov	r2, r0
 800917a:	21de      	movs	r1, #222	; 0xde
 800917c:	4b62      	ldr	r3, [pc, #392]	; (8009308 <__gethex+0x2f4>)
 800917e:	4863      	ldr	r0, [pc, #396]	; (800930c <__gethex+0x2f8>)
 8009180:	f7fc fdec 	bl	8005d5c <__assert_func>
 8009184:	3101      	adds	r1, #1
 8009186:	105b      	asrs	r3, r3, #1
 8009188:	e7ef      	b.n	800916a <__gethex+0x156>
 800918a:	f04f 0b00 	mov.w	fp, #0
 800918e:	f100 0914 	add.w	r9, r0, #20
 8009192:	f1ca 0301 	rsb	r3, sl, #1
 8009196:	f8cd 9010 	str.w	r9, [sp, #16]
 800919a:	f8cd b004 	str.w	fp, [sp, #4]
 800919e:	9308      	str	r3, [sp, #32]
 80091a0:	42b7      	cmp	r7, r6
 80091a2:	d33f      	bcc.n	8009224 <__gethex+0x210>
 80091a4:	9f04      	ldr	r7, [sp, #16]
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	f847 3b04 	str.w	r3, [r7], #4
 80091ac:	eba7 0709 	sub.w	r7, r7, r9
 80091b0:	10bf      	asrs	r7, r7, #2
 80091b2:	6127      	str	r7, [r4, #16]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 fbd3 	bl	8009960 <__hi0bits>
 80091ba:	017f      	lsls	r7, r7, #5
 80091bc:	f8d8 6000 	ldr.w	r6, [r8]
 80091c0:	1a3f      	subs	r7, r7, r0
 80091c2:	42b7      	cmp	r7, r6
 80091c4:	dd62      	ble.n	800928c <__gethex+0x278>
 80091c6:	1bbf      	subs	r7, r7, r6
 80091c8:	4639      	mov	r1, r7
 80091ca:	4620      	mov	r0, r4
 80091cc:	f000 ff69 	bl	800a0a2 <__any_on>
 80091d0:	4682      	mov	sl, r0
 80091d2:	b1a8      	cbz	r0, 8009200 <__gethex+0x1ec>
 80091d4:	f04f 0a01 	mov.w	sl, #1
 80091d8:	1e7b      	subs	r3, r7, #1
 80091da:	1159      	asrs	r1, r3, #5
 80091dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80091e0:	f003 021f 	and.w	r2, r3, #31
 80091e4:	fa0a f202 	lsl.w	r2, sl, r2
 80091e8:	420a      	tst	r2, r1
 80091ea:	d009      	beq.n	8009200 <__gethex+0x1ec>
 80091ec:	4553      	cmp	r3, sl
 80091ee:	dd05      	ble.n	80091fc <__gethex+0x1e8>
 80091f0:	4620      	mov	r0, r4
 80091f2:	1eb9      	subs	r1, r7, #2
 80091f4:	f000 ff55 	bl	800a0a2 <__any_on>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d144      	bne.n	8009286 <__gethex+0x272>
 80091fc:	f04f 0a02 	mov.w	sl, #2
 8009200:	4639      	mov	r1, r7
 8009202:	4620      	mov	r0, r4
 8009204:	f7ff fe9d 	bl	8008f42 <rshift>
 8009208:	443d      	add	r5, r7
 800920a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800920e:	42ab      	cmp	r3, r5
 8009210:	da4a      	bge.n	80092a8 <__gethex+0x294>
 8009212:	4621      	mov	r1, r4
 8009214:	9802      	ldr	r0, [sp, #8]
 8009216:	f000 faed 	bl	80097f4 <_Bfree>
 800921a:	2300      	movs	r3, #0
 800921c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800921e:	27a3      	movs	r7, #163	; 0xa3
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	e789      	b.n	8009138 <__gethex+0x124>
 8009224:	1e73      	subs	r3, r6, #1
 8009226:	9a07      	ldr	r2, [sp, #28]
 8009228:	9305      	str	r3, [sp, #20]
 800922a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800922e:	4293      	cmp	r3, r2
 8009230:	d019      	beq.n	8009266 <__gethex+0x252>
 8009232:	f1bb 0f20 	cmp.w	fp, #32
 8009236:	d107      	bne.n	8009248 <__gethex+0x234>
 8009238:	9b04      	ldr	r3, [sp, #16]
 800923a:	9a01      	ldr	r2, [sp, #4]
 800923c:	f843 2b04 	str.w	r2, [r3], #4
 8009240:	9304      	str	r3, [sp, #16]
 8009242:	2300      	movs	r3, #0
 8009244:	469b      	mov	fp, r3
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800924c:	f7ff fecc 	bl	8008fe8 <__hexdig_fun>
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	f000 000f 	and.w	r0, r0, #15
 8009256:	fa00 f00b 	lsl.w	r0, r0, fp
 800925a:	4303      	orrs	r3, r0
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	f10b 0b04 	add.w	fp, fp, #4
 8009262:	9b05      	ldr	r3, [sp, #20]
 8009264:	e00d      	b.n	8009282 <__gethex+0x26e>
 8009266:	9b05      	ldr	r3, [sp, #20]
 8009268:	9a08      	ldr	r2, [sp, #32]
 800926a:	4413      	add	r3, r2
 800926c:	42bb      	cmp	r3, r7
 800926e:	d3e0      	bcc.n	8009232 <__gethex+0x21e>
 8009270:	4618      	mov	r0, r3
 8009272:	4652      	mov	r2, sl
 8009274:	9903      	ldr	r1, [sp, #12]
 8009276:	9309      	str	r3, [sp, #36]	; 0x24
 8009278:	f001 f951 	bl	800a51e <strncmp>
 800927c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927e:	2800      	cmp	r0, #0
 8009280:	d1d7      	bne.n	8009232 <__gethex+0x21e>
 8009282:	461e      	mov	r6, r3
 8009284:	e78c      	b.n	80091a0 <__gethex+0x18c>
 8009286:	f04f 0a03 	mov.w	sl, #3
 800928a:	e7b9      	b.n	8009200 <__gethex+0x1ec>
 800928c:	da09      	bge.n	80092a2 <__gethex+0x28e>
 800928e:	1bf7      	subs	r7, r6, r7
 8009290:	4621      	mov	r1, r4
 8009292:	463a      	mov	r2, r7
 8009294:	9802      	ldr	r0, [sp, #8]
 8009296:	f000 fcc5 	bl	8009c24 <__lshift>
 800929a:	4604      	mov	r4, r0
 800929c:	1bed      	subs	r5, r5, r7
 800929e:	f100 0914 	add.w	r9, r0, #20
 80092a2:	f04f 0a00 	mov.w	sl, #0
 80092a6:	e7b0      	b.n	800920a <__gethex+0x1f6>
 80092a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80092ac:	42a8      	cmp	r0, r5
 80092ae:	dd71      	ble.n	8009394 <__gethex+0x380>
 80092b0:	1b45      	subs	r5, r0, r5
 80092b2:	42ae      	cmp	r6, r5
 80092b4:	dc34      	bgt.n	8009320 <__gethex+0x30c>
 80092b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d028      	beq.n	8009310 <__gethex+0x2fc>
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d02a      	beq.n	8009318 <__gethex+0x304>
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d115      	bne.n	80092f2 <__gethex+0x2de>
 80092c6:	42ae      	cmp	r6, r5
 80092c8:	d113      	bne.n	80092f2 <__gethex+0x2de>
 80092ca:	2e01      	cmp	r6, #1
 80092cc:	d10b      	bne.n	80092e6 <__gethex+0x2d2>
 80092ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80092d2:	9a06      	ldr	r2, [sp, #24]
 80092d4:	2762      	movs	r7, #98	; 0x62
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	2301      	movs	r3, #1
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	f8c9 3000 	str.w	r3, [r9]
 80092e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092e2:	601c      	str	r4, [r3, #0]
 80092e4:	e728      	b.n	8009138 <__gethex+0x124>
 80092e6:	4620      	mov	r0, r4
 80092e8:	1e71      	subs	r1, r6, #1
 80092ea:	f000 feda 	bl	800a0a2 <__any_on>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d1ed      	bne.n	80092ce <__gethex+0x2ba>
 80092f2:	4621      	mov	r1, r4
 80092f4:	9802      	ldr	r0, [sp, #8]
 80092f6:	f000 fa7d 	bl	80097f4 <_Bfree>
 80092fa:	2300      	movs	r3, #0
 80092fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092fe:	2750      	movs	r7, #80	; 0x50
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	e719      	b.n	8009138 <__gethex+0x124>
 8009304:	0800ab94 	.word	0x0800ab94
 8009308:	0800aab4 	.word	0x0800aab4
 800930c:	0800ab28 	.word	0x0800ab28
 8009310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1ed      	bne.n	80092f2 <__gethex+0x2de>
 8009316:	e7da      	b.n	80092ce <__gethex+0x2ba>
 8009318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1d7      	bne.n	80092ce <__gethex+0x2ba>
 800931e:	e7e8      	b.n	80092f2 <__gethex+0x2de>
 8009320:	1e6f      	subs	r7, r5, #1
 8009322:	f1ba 0f00 	cmp.w	sl, #0
 8009326:	d132      	bne.n	800938e <__gethex+0x37a>
 8009328:	b127      	cbz	r7, 8009334 <__gethex+0x320>
 800932a:	4639      	mov	r1, r7
 800932c:	4620      	mov	r0, r4
 800932e:	f000 feb8 	bl	800a0a2 <__any_on>
 8009332:	4682      	mov	sl, r0
 8009334:	2101      	movs	r1, #1
 8009336:	117b      	asrs	r3, r7, #5
 8009338:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800933c:	f007 071f 	and.w	r7, r7, #31
 8009340:	fa01 f707 	lsl.w	r7, r1, r7
 8009344:	421f      	tst	r7, r3
 8009346:	f04f 0702 	mov.w	r7, #2
 800934a:	4629      	mov	r1, r5
 800934c:	4620      	mov	r0, r4
 800934e:	bf18      	it	ne
 8009350:	f04a 0a02 	orrne.w	sl, sl, #2
 8009354:	1b76      	subs	r6, r6, r5
 8009356:	f7ff fdf4 	bl	8008f42 <rshift>
 800935a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800935e:	f1ba 0f00 	cmp.w	sl, #0
 8009362:	d048      	beq.n	80093f6 <__gethex+0x3e2>
 8009364:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009368:	2b02      	cmp	r3, #2
 800936a:	d015      	beq.n	8009398 <__gethex+0x384>
 800936c:	2b03      	cmp	r3, #3
 800936e:	d017      	beq.n	80093a0 <__gethex+0x38c>
 8009370:	2b01      	cmp	r3, #1
 8009372:	d109      	bne.n	8009388 <__gethex+0x374>
 8009374:	f01a 0f02 	tst.w	sl, #2
 8009378:	d006      	beq.n	8009388 <__gethex+0x374>
 800937a:	f8d9 0000 	ldr.w	r0, [r9]
 800937e:	ea4a 0a00 	orr.w	sl, sl, r0
 8009382:	f01a 0f01 	tst.w	sl, #1
 8009386:	d10e      	bne.n	80093a6 <__gethex+0x392>
 8009388:	f047 0710 	orr.w	r7, r7, #16
 800938c:	e033      	b.n	80093f6 <__gethex+0x3e2>
 800938e:	f04f 0a01 	mov.w	sl, #1
 8009392:	e7cf      	b.n	8009334 <__gethex+0x320>
 8009394:	2701      	movs	r7, #1
 8009396:	e7e2      	b.n	800935e <__gethex+0x34a>
 8009398:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800939a:	f1c3 0301 	rsb	r3, r3, #1
 800939e:	9315      	str	r3, [sp, #84]	; 0x54
 80093a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0f0      	beq.n	8009388 <__gethex+0x374>
 80093a6:	f04f 0c00 	mov.w	ip, #0
 80093aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80093ae:	f104 0314 	add.w	r3, r4, #20
 80093b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80093b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80093c4:	d01c      	beq.n	8009400 <__gethex+0x3ec>
 80093c6:	3201      	adds	r2, #1
 80093c8:	6002      	str	r2, [r0, #0]
 80093ca:	2f02      	cmp	r7, #2
 80093cc:	f104 0314 	add.w	r3, r4, #20
 80093d0:	d13d      	bne.n	800944e <__gethex+0x43a>
 80093d2:	f8d8 2000 	ldr.w	r2, [r8]
 80093d6:	3a01      	subs	r2, #1
 80093d8:	42b2      	cmp	r2, r6
 80093da:	d10a      	bne.n	80093f2 <__gethex+0x3de>
 80093dc:	2201      	movs	r2, #1
 80093de:	1171      	asrs	r1, r6, #5
 80093e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093e4:	f006 061f 	and.w	r6, r6, #31
 80093e8:	fa02 f606 	lsl.w	r6, r2, r6
 80093ec:	421e      	tst	r6, r3
 80093ee:	bf18      	it	ne
 80093f0:	4617      	movne	r7, r2
 80093f2:	f047 0720 	orr.w	r7, r7, #32
 80093f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093f8:	601c      	str	r4, [r3, #0]
 80093fa:	9b06      	ldr	r3, [sp, #24]
 80093fc:	601d      	str	r5, [r3, #0]
 80093fe:	e69b      	b.n	8009138 <__gethex+0x124>
 8009400:	4299      	cmp	r1, r3
 8009402:	f843 cc04 	str.w	ip, [r3, #-4]
 8009406:	d8d8      	bhi.n	80093ba <__gethex+0x3a6>
 8009408:	68a3      	ldr	r3, [r4, #8]
 800940a:	459b      	cmp	fp, r3
 800940c:	db17      	blt.n	800943e <__gethex+0x42a>
 800940e:	6861      	ldr	r1, [r4, #4]
 8009410:	9802      	ldr	r0, [sp, #8]
 8009412:	3101      	adds	r1, #1
 8009414:	f000 f9ae 	bl	8009774 <_Balloc>
 8009418:	4681      	mov	r9, r0
 800941a:	b918      	cbnz	r0, 8009424 <__gethex+0x410>
 800941c:	4602      	mov	r2, r0
 800941e:	2184      	movs	r1, #132	; 0x84
 8009420:	4b19      	ldr	r3, [pc, #100]	; (8009488 <__gethex+0x474>)
 8009422:	e6ac      	b.n	800917e <__gethex+0x16a>
 8009424:	6922      	ldr	r2, [r4, #16]
 8009426:	f104 010c 	add.w	r1, r4, #12
 800942a:	3202      	adds	r2, #2
 800942c:	0092      	lsls	r2, r2, #2
 800942e:	300c      	adds	r0, #12
 8009430:	f7fc fcf6 	bl	8005e20 <memcpy>
 8009434:	4621      	mov	r1, r4
 8009436:	9802      	ldr	r0, [sp, #8]
 8009438:	f000 f9dc 	bl	80097f4 <_Bfree>
 800943c:	464c      	mov	r4, r9
 800943e:	6923      	ldr	r3, [r4, #16]
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	6122      	str	r2, [r4, #16]
 8009444:	2201      	movs	r2, #1
 8009446:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800944a:	615a      	str	r2, [r3, #20]
 800944c:	e7bd      	b.n	80093ca <__gethex+0x3b6>
 800944e:	6922      	ldr	r2, [r4, #16]
 8009450:	455a      	cmp	r2, fp
 8009452:	dd0b      	ble.n	800946c <__gethex+0x458>
 8009454:	2101      	movs	r1, #1
 8009456:	4620      	mov	r0, r4
 8009458:	f7ff fd73 	bl	8008f42 <rshift>
 800945c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009460:	3501      	adds	r5, #1
 8009462:	42ab      	cmp	r3, r5
 8009464:	f6ff aed5 	blt.w	8009212 <__gethex+0x1fe>
 8009468:	2701      	movs	r7, #1
 800946a:	e7c2      	b.n	80093f2 <__gethex+0x3de>
 800946c:	f016 061f 	ands.w	r6, r6, #31
 8009470:	d0fa      	beq.n	8009468 <__gethex+0x454>
 8009472:	449a      	add	sl, r3
 8009474:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009478:	f000 fa72 	bl	8009960 <__hi0bits>
 800947c:	f1c6 0620 	rsb	r6, r6, #32
 8009480:	42b0      	cmp	r0, r6
 8009482:	dbe7      	blt.n	8009454 <__gethex+0x440>
 8009484:	e7f0      	b.n	8009468 <__gethex+0x454>
 8009486:	bf00      	nop
 8009488:	0800aab4 	.word	0x0800aab4

0800948c <L_shift>:
 800948c:	f1c2 0208 	rsb	r2, r2, #8
 8009490:	0092      	lsls	r2, r2, #2
 8009492:	b570      	push	{r4, r5, r6, lr}
 8009494:	f1c2 0620 	rsb	r6, r2, #32
 8009498:	6843      	ldr	r3, [r0, #4]
 800949a:	6804      	ldr	r4, [r0, #0]
 800949c:	fa03 f506 	lsl.w	r5, r3, r6
 80094a0:	432c      	orrs	r4, r5
 80094a2:	40d3      	lsrs	r3, r2
 80094a4:	6004      	str	r4, [r0, #0]
 80094a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80094aa:	4288      	cmp	r0, r1
 80094ac:	d3f4      	bcc.n	8009498 <L_shift+0xc>
 80094ae:	bd70      	pop	{r4, r5, r6, pc}

080094b0 <__match>:
 80094b0:	b530      	push	{r4, r5, lr}
 80094b2:	6803      	ldr	r3, [r0, #0]
 80094b4:	3301      	adds	r3, #1
 80094b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ba:	b914      	cbnz	r4, 80094c2 <__match+0x12>
 80094bc:	6003      	str	r3, [r0, #0]
 80094be:	2001      	movs	r0, #1
 80094c0:	bd30      	pop	{r4, r5, pc}
 80094c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80094ca:	2d19      	cmp	r5, #25
 80094cc:	bf98      	it	ls
 80094ce:	3220      	addls	r2, #32
 80094d0:	42a2      	cmp	r2, r4
 80094d2:	d0f0      	beq.n	80094b6 <__match+0x6>
 80094d4:	2000      	movs	r0, #0
 80094d6:	e7f3      	b.n	80094c0 <__match+0x10>

080094d8 <__hexnan>:
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	2500      	movs	r5, #0
 80094de:	680b      	ldr	r3, [r1, #0]
 80094e0:	4682      	mov	sl, r0
 80094e2:	115e      	asrs	r6, r3, #5
 80094e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80094e8:	f013 031f 	ands.w	r3, r3, #31
 80094ec:	bf18      	it	ne
 80094ee:	3604      	addne	r6, #4
 80094f0:	1f37      	subs	r7, r6, #4
 80094f2:	4690      	mov	r8, r2
 80094f4:	46b9      	mov	r9, r7
 80094f6:	463c      	mov	r4, r7
 80094f8:	46ab      	mov	fp, r5
 80094fa:	b087      	sub	sp, #28
 80094fc:	6801      	ldr	r1, [r0, #0]
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	f846 5c04 	str.w	r5, [r6, #-4]
 8009504:	9502      	str	r5, [sp, #8]
 8009506:	784a      	ldrb	r2, [r1, #1]
 8009508:	1c4b      	adds	r3, r1, #1
 800950a:	9303      	str	r3, [sp, #12]
 800950c:	b342      	cbz	r2, 8009560 <__hexnan+0x88>
 800950e:	4610      	mov	r0, r2
 8009510:	9105      	str	r1, [sp, #20]
 8009512:	9204      	str	r2, [sp, #16]
 8009514:	f7ff fd68 	bl	8008fe8 <__hexdig_fun>
 8009518:	2800      	cmp	r0, #0
 800951a:	d14f      	bne.n	80095bc <__hexnan+0xe4>
 800951c:	9a04      	ldr	r2, [sp, #16]
 800951e:	9905      	ldr	r1, [sp, #20]
 8009520:	2a20      	cmp	r2, #32
 8009522:	d818      	bhi.n	8009556 <__hexnan+0x7e>
 8009524:	9b02      	ldr	r3, [sp, #8]
 8009526:	459b      	cmp	fp, r3
 8009528:	dd13      	ble.n	8009552 <__hexnan+0x7a>
 800952a:	454c      	cmp	r4, r9
 800952c:	d206      	bcs.n	800953c <__hexnan+0x64>
 800952e:	2d07      	cmp	r5, #7
 8009530:	dc04      	bgt.n	800953c <__hexnan+0x64>
 8009532:	462a      	mov	r2, r5
 8009534:	4649      	mov	r1, r9
 8009536:	4620      	mov	r0, r4
 8009538:	f7ff ffa8 	bl	800948c <L_shift>
 800953c:	4544      	cmp	r4, r8
 800953e:	d950      	bls.n	80095e2 <__hexnan+0x10a>
 8009540:	2300      	movs	r3, #0
 8009542:	f1a4 0904 	sub.w	r9, r4, #4
 8009546:	f844 3c04 	str.w	r3, [r4, #-4]
 800954a:	461d      	mov	r5, r3
 800954c:	464c      	mov	r4, r9
 800954e:	f8cd b008 	str.w	fp, [sp, #8]
 8009552:	9903      	ldr	r1, [sp, #12]
 8009554:	e7d7      	b.n	8009506 <__hexnan+0x2e>
 8009556:	2a29      	cmp	r2, #41	; 0x29
 8009558:	d156      	bne.n	8009608 <__hexnan+0x130>
 800955a:	3102      	adds	r1, #2
 800955c:	f8ca 1000 	str.w	r1, [sl]
 8009560:	f1bb 0f00 	cmp.w	fp, #0
 8009564:	d050      	beq.n	8009608 <__hexnan+0x130>
 8009566:	454c      	cmp	r4, r9
 8009568:	d206      	bcs.n	8009578 <__hexnan+0xa0>
 800956a:	2d07      	cmp	r5, #7
 800956c:	dc04      	bgt.n	8009578 <__hexnan+0xa0>
 800956e:	462a      	mov	r2, r5
 8009570:	4649      	mov	r1, r9
 8009572:	4620      	mov	r0, r4
 8009574:	f7ff ff8a 	bl	800948c <L_shift>
 8009578:	4544      	cmp	r4, r8
 800957a:	d934      	bls.n	80095e6 <__hexnan+0x10e>
 800957c:	4623      	mov	r3, r4
 800957e:	f1a8 0204 	sub.w	r2, r8, #4
 8009582:	f853 1b04 	ldr.w	r1, [r3], #4
 8009586:	429f      	cmp	r7, r3
 8009588:	f842 1f04 	str.w	r1, [r2, #4]!
 800958c:	d2f9      	bcs.n	8009582 <__hexnan+0xaa>
 800958e:	1b3b      	subs	r3, r7, r4
 8009590:	f023 0303 	bic.w	r3, r3, #3
 8009594:	3304      	adds	r3, #4
 8009596:	3401      	adds	r4, #1
 8009598:	3e03      	subs	r6, #3
 800959a:	42b4      	cmp	r4, r6
 800959c:	bf88      	it	hi
 800959e:	2304      	movhi	r3, #4
 80095a0:	2200      	movs	r2, #0
 80095a2:	4443      	add	r3, r8
 80095a4:	f843 2b04 	str.w	r2, [r3], #4
 80095a8:	429f      	cmp	r7, r3
 80095aa:	d2fb      	bcs.n	80095a4 <__hexnan+0xcc>
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	b91b      	cbnz	r3, 80095b8 <__hexnan+0xe0>
 80095b0:	4547      	cmp	r7, r8
 80095b2:	d127      	bne.n	8009604 <__hexnan+0x12c>
 80095b4:	2301      	movs	r3, #1
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	2005      	movs	r0, #5
 80095ba:	e026      	b.n	800960a <__hexnan+0x132>
 80095bc:	3501      	adds	r5, #1
 80095be:	2d08      	cmp	r5, #8
 80095c0:	f10b 0b01 	add.w	fp, fp, #1
 80095c4:	dd06      	ble.n	80095d4 <__hexnan+0xfc>
 80095c6:	4544      	cmp	r4, r8
 80095c8:	d9c3      	bls.n	8009552 <__hexnan+0x7a>
 80095ca:	2300      	movs	r3, #0
 80095cc:	2501      	movs	r5, #1
 80095ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80095d2:	3c04      	subs	r4, #4
 80095d4:	6822      	ldr	r2, [r4, #0]
 80095d6:	f000 000f 	and.w	r0, r0, #15
 80095da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80095de:	6022      	str	r2, [r4, #0]
 80095e0:	e7b7      	b.n	8009552 <__hexnan+0x7a>
 80095e2:	2508      	movs	r5, #8
 80095e4:	e7b5      	b.n	8009552 <__hexnan+0x7a>
 80095e6:	9b01      	ldr	r3, [sp, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d0df      	beq.n	80095ac <__hexnan+0xd4>
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	f1c3 0320 	rsb	r3, r3, #32
 80095f4:	fa22 f303 	lsr.w	r3, r2, r3
 80095f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80095fc:	401a      	ands	r2, r3
 80095fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8009602:	e7d3      	b.n	80095ac <__hexnan+0xd4>
 8009604:	3f04      	subs	r7, #4
 8009606:	e7d1      	b.n	80095ac <__hexnan+0xd4>
 8009608:	2004      	movs	r0, #4
 800960a:	b007      	add	sp, #28
 800960c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009610 <_localeconv_r>:
 8009610:	4800      	ldr	r0, [pc, #0]	; (8009614 <_localeconv_r+0x4>)
 8009612:	4770      	bx	lr
 8009614:	200001a4 	.word	0x200001a4

08009618 <__retarget_lock_init_recursive>:
 8009618:	4770      	bx	lr

0800961a <__retarget_lock_acquire_recursive>:
 800961a:	4770      	bx	lr

0800961c <__retarget_lock_release_recursive>:
 800961c:	4770      	bx	lr

0800961e <__swhatbuf_r>:
 800961e:	b570      	push	{r4, r5, r6, lr}
 8009620:	460e      	mov	r6, r1
 8009622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009626:	4614      	mov	r4, r2
 8009628:	2900      	cmp	r1, #0
 800962a:	461d      	mov	r5, r3
 800962c:	b096      	sub	sp, #88	; 0x58
 800962e:	da07      	bge.n	8009640 <__swhatbuf_r+0x22>
 8009630:	2300      	movs	r3, #0
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	89b3      	ldrh	r3, [r6, #12]
 8009636:	061a      	lsls	r2, r3, #24
 8009638:	d410      	bmi.n	800965c <__swhatbuf_r+0x3e>
 800963a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800963e:	e00e      	b.n	800965e <__swhatbuf_r+0x40>
 8009640:	466a      	mov	r2, sp
 8009642:	f000 ffad 	bl	800a5a0 <_fstat_r>
 8009646:	2800      	cmp	r0, #0
 8009648:	dbf2      	blt.n	8009630 <__swhatbuf_r+0x12>
 800964a:	9a01      	ldr	r2, [sp, #4]
 800964c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009650:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009654:	425a      	negs	r2, r3
 8009656:	415a      	adcs	r2, r3
 8009658:	602a      	str	r2, [r5, #0]
 800965a:	e7ee      	b.n	800963a <__swhatbuf_r+0x1c>
 800965c:	2340      	movs	r3, #64	; 0x40
 800965e:	2000      	movs	r0, #0
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	b016      	add	sp, #88	; 0x58
 8009664:	bd70      	pop	{r4, r5, r6, pc}
	...

08009668 <__smakebuf_r>:
 8009668:	898b      	ldrh	r3, [r1, #12]
 800966a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800966c:	079d      	lsls	r5, r3, #30
 800966e:	4606      	mov	r6, r0
 8009670:	460c      	mov	r4, r1
 8009672:	d507      	bpl.n	8009684 <__smakebuf_r+0x1c>
 8009674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	6123      	str	r3, [r4, #16]
 800967c:	2301      	movs	r3, #1
 800967e:	6163      	str	r3, [r4, #20]
 8009680:	b002      	add	sp, #8
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	466a      	mov	r2, sp
 8009686:	ab01      	add	r3, sp, #4
 8009688:	f7ff ffc9 	bl	800961e <__swhatbuf_r>
 800968c:	9900      	ldr	r1, [sp, #0]
 800968e:	4605      	mov	r5, r0
 8009690:	4630      	mov	r0, r6
 8009692:	f7fc fc27 	bl	8005ee4 <_malloc_r>
 8009696:	b948      	cbnz	r0, 80096ac <__smakebuf_r+0x44>
 8009698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800969c:	059a      	lsls	r2, r3, #22
 800969e:	d4ef      	bmi.n	8009680 <__smakebuf_r+0x18>
 80096a0:	f023 0303 	bic.w	r3, r3, #3
 80096a4:	f043 0302 	orr.w	r3, r3, #2
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	e7e3      	b.n	8009674 <__smakebuf_r+0xc>
 80096ac:	4b0d      	ldr	r3, [pc, #52]	; (80096e4 <__smakebuf_r+0x7c>)
 80096ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	6020      	str	r0, [r4, #0]
 80096b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b8:	81a3      	strh	r3, [r4, #12]
 80096ba:	9b00      	ldr	r3, [sp, #0]
 80096bc:	6120      	str	r0, [r4, #16]
 80096be:	6163      	str	r3, [r4, #20]
 80096c0:	9b01      	ldr	r3, [sp, #4]
 80096c2:	b15b      	cbz	r3, 80096dc <__smakebuf_r+0x74>
 80096c4:	4630      	mov	r0, r6
 80096c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096ca:	f000 ff7b 	bl	800a5c4 <_isatty_r>
 80096ce:	b128      	cbz	r0, 80096dc <__smakebuf_r+0x74>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	f023 0303 	bic.w	r3, r3, #3
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	89a0      	ldrh	r0, [r4, #12]
 80096de:	4305      	orrs	r5, r0
 80096e0:	81a5      	strh	r5, [r4, #12]
 80096e2:	e7cd      	b.n	8009680 <__smakebuf_r+0x18>
 80096e4:	08008da1 	.word	0x08008da1

080096e8 <__ascii_mbtowc>:
 80096e8:	b082      	sub	sp, #8
 80096ea:	b901      	cbnz	r1, 80096ee <__ascii_mbtowc+0x6>
 80096ec:	a901      	add	r1, sp, #4
 80096ee:	b142      	cbz	r2, 8009702 <__ascii_mbtowc+0x1a>
 80096f0:	b14b      	cbz	r3, 8009706 <__ascii_mbtowc+0x1e>
 80096f2:	7813      	ldrb	r3, [r2, #0]
 80096f4:	600b      	str	r3, [r1, #0]
 80096f6:	7812      	ldrb	r2, [r2, #0]
 80096f8:	1e10      	subs	r0, r2, #0
 80096fa:	bf18      	it	ne
 80096fc:	2001      	movne	r0, #1
 80096fe:	b002      	add	sp, #8
 8009700:	4770      	bx	lr
 8009702:	4610      	mov	r0, r2
 8009704:	e7fb      	b.n	80096fe <__ascii_mbtowc+0x16>
 8009706:	f06f 0001 	mvn.w	r0, #1
 800970a:	e7f8      	b.n	80096fe <__ascii_mbtowc+0x16>

0800970c <memchr>:
 800970c:	4603      	mov	r3, r0
 800970e:	b510      	push	{r4, lr}
 8009710:	b2c9      	uxtb	r1, r1
 8009712:	4402      	add	r2, r0
 8009714:	4293      	cmp	r3, r2
 8009716:	4618      	mov	r0, r3
 8009718:	d101      	bne.n	800971e <memchr+0x12>
 800971a:	2000      	movs	r0, #0
 800971c:	e003      	b.n	8009726 <memchr+0x1a>
 800971e:	7804      	ldrb	r4, [r0, #0]
 8009720:	3301      	adds	r3, #1
 8009722:	428c      	cmp	r4, r1
 8009724:	d1f6      	bne.n	8009714 <memchr+0x8>
 8009726:	bd10      	pop	{r4, pc}

08009728 <memmove>:
 8009728:	4288      	cmp	r0, r1
 800972a:	b510      	push	{r4, lr}
 800972c:	eb01 0402 	add.w	r4, r1, r2
 8009730:	d902      	bls.n	8009738 <memmove+0x10>
 8009732:	4284      	cmp	r4, r0
 8009734:	4623      	mov	r3, r4
 8009736:	d807      	bhi.n	8009748 <memmove+0x20>
 8009738:	1e43      	subs	r3, r0, #1
 800973a:	42a1      	cmp	r1, r4
 800973c:	d008      	beq.n	8009750 <memmove+0x28>
 800973e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009746:	e7f8      	b.n	800973a <memmove+0x12>
 8009748:	4601      	mov	r1, r0
 800974a:	4402      	add	r2, r0
 800974c:	428a      	cmp	r2, r1
 800974e:	d100      	bne.n	8009752 <memmove+0x2a>
 8009750:	bd10      	pop	{r4, pc}
 8009752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800975a:	e7f7      	b.n	800974c <memmove+0x24>

0800975c <__malloc_lock>:
 800975c:	4801      	ldr	r0, [pc, #4]	; (8009764 <__malloc_lock+0x8>)
 800975e:	f7ff bf5c 	b.w	800961a <__retarget_lock_acquire_recursive>
 8009762:	bf00      	nop
 8009764:	200008c0 	.word	0x200008c0

08009768 <__malloc_unlock>:
 8009768:	4801      	ldr	r0, [pc, #4]	; (8009770 <__malloc_unlock+0x8>)
 800976a:	f7ff bf57 	b.w	800961c <__retarget_lock_release_recursive>
 800976e:	bf00      	nop
 8009770:	200008c0 	.word	0x200008c0

08009774 <_Balloc>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009778:	4604      	mov	r4, r0
 800977a:	460d      	mov	r5, r1
 800977c:	b976      	cbnz	r6, 800979c <_Balloc+0x28>
 800977e:	2010      	movs	r0, #16
 8009780:	f7fc fb46 	bl	8005e10 <malloc>
 8009784:	4602      	mov	r2, r0
 8009786:	6260      	str	r0, [r4, #36]	; 0x24
 8009788:	b920      	cbnz	r0, 8009794 <_Balloc+0x20>
 800978a:	2166      	movs	r1, #102	; 0x66
 800978c:	4b17      	ldr	r3, [pc, #92]	; (80097ec <_Balloc+0x78>)
 800978e:	4818      	ldr	r0, [pc, #96]	; (80097f0 <_Balloc+0x7c>)
 8009790:	f7fc fae4 	bl	8005d5c <__assert_func>
 8009794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009798:	6006      	str	r6, [r0, #0]
 800979a:	60c6      	str	r6, [r0, #12]
 800979c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800979e:	68f3      	ldr	r3, [r6, #12]
 80097a0:	b183      	cbz	r3, 80097c4 <_Balloc+0x50>
 80097a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097aa:	b9b8      	cbnz	r0, 80097dc <_Balloc+0x68>
 80097ac:	2101      	movs	r1, #1
 80097ae:	fa01 f605 	lsl.w	r6, r1, r5
 80097b2:	1d72      	adds	r2, r6, #5
 80097b4:	4620      	mov	r0, r4
 80097b6:	0092      	lsls	r2, r2, #2
 80097b8:	f000 fc94 	bl	800a0e4 <_calloc_r>
 80097bc:	b160      	cbz	r0, 80097d8 <_Balloc+0x64>
 80097be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097c2:	e00e      	b.n	80097e2 <_Balloc+0x6e>
 80097c4:	2221      	movs	r2, #33	; 0x21
 80097c6:	2104      	movs	r1, #4
 80097c8:	4620      	mov	r0, r4
 80097ca:	f000 fc8b 	bl	800a0e4 <_calloc_r>
 80097ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097d0:	60f0      	str	r0, [r6, #12]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e4      	bne.n	80097a2 <_Balloc+0x2e>
 80097d8:	2000      	movs	r0, #0
 80097da:	bd70      	pop	{r4, r5, r6, pc}
 80097dc:	6802      	ldr	r2, [r0, #0]
 80097de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097e2:	2300      	movs	r3, #0
 80097e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097e8:	e7f7      	b.n	80097da <_Balloc+0x66>
 80097ea:	bf00      	nop
 80097ec:	0800aa3e 	.word	0x0800aa3e
 80097f0:	0800aba8 	.word	0x0800aba8

080097f4 <_Bfree>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097f8:	4605      	mov	r5, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	b976      	cbnz	r6, 800981c <_Bfree+0x28>
 80097fe:	2010      	movs	r0, #16
 8009800:	f7fc fb06 	bl	8005e10 <malloc>
 8009804:	4602      	mov	r2, r0
 8009806:	6268      	str	r0, [r5, #36]	; 0x24
 8009808:	b920      	cbnz	r0, 8009814 <_Bfree+0x20>
 800980a:	218a      	movs	r1, #138	; 0x8a
 800980c:	4b08      	ldr	r3, [pc, #32]	; (8009830 <_Bfree+0x3c>)
 800980e:	4809      	ldr	r0, [pc, #36]	; (8009834 <_Bfree+0x40>)
 8009810:	f7fc faa4 	bl	8005d5c <__assert_func>
 8009814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009818:	6006      	str	r6, [r0, #0]
 800981a:	60c6      	str	r6, [r0, #12]
 800981c:	b13c      	cbz	r4, 800982e <_Bfree+0x3a>
 800981e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009820:	6862      	ldr	r2, [r4, #4]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009828:	6021      	str	r1, [r4, #0]
 800982a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	0800aa3e 	.word	0x0800aa3e
 8009834:	0800aba8 	.word	0x0800aba8

08009838 <__multadd>:
 8009838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800983c:	4698      	mov	r8, r3
 800983e:	460c      	mov	r4, r1
 8009840:	2300      	movs	r3, #0
 8009842:	690e      	ldr	r6, [r1, #16]
 8009844:	4607      	mov	r7, r0
 8009846:	f101 0014 	add.w	r0, r1, #20
 800984a:	6805      	ldr	r5, [r0, #0]
 800984c:	3301      	adds	r3, #1
 800984e:	b2a9      	uxth	r1, r5
 8009850:	fb02 8101 	mla	r1, r2, r1, r8
 8009854:	0c2d      	lsrs	r5, r5, #16
 8009856:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800985a:	fb02 c505 	mla	r5, r2, r5, ip
 800985e:	b289      	uxth	r1, r1
 8009860:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009864:	429e      	cmp	r6, r3
 8009866:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800986a:	f840 1b04 	str.w	r1, [r0], #4
 800986e:	dcec      	bgt.n	800984a <__multadd+0x12>
 8009870:	f1b8 0f00 	cmp.w	r8, #0
 8009874:	d022      	beq.n	80098bc <__multadd+0x84>
 8009876:	68a3      	ldr	r3, [r4, #8]
 8009878:	42b3      	cmp	r3, r6
 800987a:	dc19      	bgt.n	80098b0 <__multadd+0x78>
 800987c:	6861      	ldr	r1, [r4, #4]
 800987e:	4638      	mov	r0, r7
 8009880:	3101      	adds	r1, #1
 8009882:	f7ff ff77 	bl	8009774 <_Balloc>
 8009886:	4605      	mov	r5, r0
 8009888:	b928      	cbnz	r0, 8009896 <__multadd+0x5e>
 800988a:	4602      	mov	r2, r0
 800988c:	21b5      	movs	r1, #181	; 0xb5
 800988e:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <__multadd+0x8c>)
 8009890:	480d      	ldr	r0, [pc, #52]	; (80098c8 <__multadd+0x90>)
 8009892:	f7fc fa63 	bl	8005d5c <__assert_func>
 8009896:	6922      	ldr	r2, [r4, #16]
 8009898:	f104 010c 	add.w	r1, r4, #12
 800989c:	3202      	adds	r2, #2
 800989e:	0092      	lsls	r2, r2, #2
 80098a0:	300c      	adds	r0, #12
 80098a2:	f7fc fabd 	bl	8005e20 <memcpy>
 80098a6:	4621      	mov	r1, r4
 80098a8:	4638      	mov	r0, r7
 80098aa:	f7ff ffa3 	bl	80097f4 <_Bfree>
 80098ae:	462c      	mov	r4, r5
 80098b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80098b4:	3601      	adds	r6, #1
 80098b6:	f8c3 8014 	str.w	r8, [r3, #20]
 80098ba:	6126      	str	r6, [r4, #16]
 80098bc:	4620      	mov	r0, r4
 80098be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c2:	bf00      	nop
 80098c4:	0800aab4 	.word	0x0800aab4
 80098c8:	0800aba8 	.word	0x0800aba8

080098cc <__s2b>:
 80098cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d0:	4615      	mov	r5, r2
 80098d2:	2209      	movs	r2, #9
 80098d4:	461f      	mov	r7, r3
 80098d6:	3308      	adds	r3, #8
 80098d8:	460c      	mov	r4, r1
 80098da:	fb93 f3f2 	sdiv	r3, r3, r2
 80098de:	4606      	mov	r6, r0
 80098e0:	2201      	movs	r2, #1
 80098e2:	2100      	movs	r1, #0
 80098e4:	429a      	cmp	r2, r3
 80098e6:	db09      	blt.n	80098fc <__s2b+0x30>
 80098e8:	4630      	mov	r0, r6
 80098ea:	f7ff ff43 	bl	8009774 <_Balloc>
 80098ee:	b940      	cbnz	r0, 8009902 <__s2b+0x36>
 80098f0:	4602      	mov	r2, r0
 80098f2:	21ce      	movs	r1, #206	; 0xce
 80098f4:	4b18      	ldr	r3, [pc, #96]	; (8009958 <__s2b+0x8c>)
 80098f6:	4819      	ldr	r0, [pc, #100]	; (800995c <__s2b+0x90>)
 80098f8:	f7fc fa30 	bl	8005d5c <__assert_func>
 80098fc:	0052      	lsls	r2, r2, #1
 80098fe:	3101      	adds	r1, #1
 8009900:	e7f0      	b.n	80098e4 <__s2b+0x18>
 8009902:	9b08      	ldr	r3, [sp, #32]
 8009904:	2d09      	cmp	r5, #9
 8009906:	6143      	str	r3, [r0, #20]
 8009908:	f04f 0301 	mov.w	r3, #1
 800990c:	6103      	str	r3, [r0, #16]
 800990e:	dd16      	ble.n	800993e <__s2b+0x72>
 8009910:	f104 0909 	add.w	r9, r4, #9
 8009914:	46c8      	mov	r8, r9
 8009916:	442c      	add	r4, r5
 8009918:	f818 3b01 	ldrb.w	r3, [r8], #1
 800991c:	4601      	mov	r1, r0
 800991e:	220a      	movs	r2, #10
 8009920:	4630      	mov	r0, r6
 8009922:	3b30      	subs	r3, #48	; 0x30
 8009924:	f7ff ff88 	bl	8009838 <__multadd>
 8009928:	45a0      	cmp	r8, r4
 800992a:	d1f5      	bne.n	8009918 <__s2b+0x4c>
 800992c:	f1a5 0408 	sub.w	r4, r5, #8
 8009930:	444c      	add	r4, r9
 8009932:	1b2d      	subs	r5, r5, r4
 8009934:	1963      	adds	r3, r4, r5
 8009936:	42bb      	cmp	r3, r7
 8009938:	db04      	blt.n	8009944 <__s2b+0x78>
 800993a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800993e:	2509      	movs	r5, #9
 8009940:	340a      	adds	r4, #10
 8009942:	e7f6      	b.n	8009932 <__s2b+0x66>
 8009944:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009948:	4601      	mov	r1, r0
 800994a:	220a      	movs	r2, #10
 800994c:	4630      	mov	r0, r6
 800994e:	3b30      	subs	r3, #48	; 0x30
 8009950:	f7ff ff72 	bl	8009838 <__multadd>
 8009954:	e7ee      	b.n	8009934 <__s2b+0x68>
 8009956:	bf00      	nop
 8009958:	0800aab4 	.word	0x0800aab4
 800995c:	0800aba8 	.word	0x0800aba8

08009960 <__hi0bits>:
 8009960:	0c02      	lsrs	r2, r0, #16
 8009962:	0412      	lsls	r2, r2, #16
 8009964:	4603      	mov	r3, r0
 8009966:	b9ca      	cbnz	r2, 800999c <__hi0bits+0x3c>
 8009968:	0403      	lsls	r3, r0, #16
 800996a:	2010      	movs	r0, #16
 800996c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009970:	bf04      	itt	eq
 8009972:	021b      	lsleq	r3, r3, #8
 8009974:	3008      	addeq	r0, #8
 8009976:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800997a:	bf04      	itt	eq
 800997c:	011b      	lsleq	r3, r3, #4
 800997e:	3004      	addeq	r0, #4
 8009980:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009984:	bf04      	itt	eq
 8009986:	009b      	lsleq	r3, r3, #2
 8009988:	3002      	addeq	r0, #2
 800998a:	2b00      	cmp	r3, #0
 800998c:	db05      	blt.n	800999a <__hi0bits+0x3a>
 800998e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009992:	f100 0001 	add.w	r0, r0, #1
 8009996:	bf08      	it	eq
 8009998:	2020      	moveq	r0, #32
 800999a:	4770      	bx	lr
 800999c:	2000      	movs	r0, #0
 800999e:	e7e5      	b.n	800996c <__hi0bits+0xc>

080099a0 <__lo0bits>:
 80099a0:	6803      	ldr	r3, [r0, #0]
 80099a2:	4602      	mov	r2, r0
 80099a4:	f013 0007 	ands.w	r0, r3, #7
 80099a8:	d00b      	beq.n	80099c2 <__lo0bits+0x22>
 80099aa:	07d9      	lsls	r1, r3, #31
 80099ac:	d422      	bmi.n	80099f4 <__lo0bits+0x54>
 80099ae:	0798      	lsls	r0, r3, #30
 80099b0:	bf49      	itett	mi
 80099b2:	085b      	lsrmi	r3, r3, #1
 80099b4:	089b      	lsrpl	r3, r3, #2
 80099b6:	2001      	movmi	r0, #1
 80099b8:	6013      	strmi	r3, [r2, #0]
 80099ba:	bf5c      	itt	pl
 80099bc:	2002      	movpl	r0, #2
 80099be:	6013      	strpl	r3, [r2, #0]
 80099c0:	4770      	bx	lr
 80099c2:	b299      	uxth	r1, r3
 80099c4:	b909      	cbnz	r1, 80099ca <__lo0bits+0x2a>
 80099c6:	2010      	movs	r0, #16
 80099c8:	0c1b      	lsrs	r3, r3, #16
 80099ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80099ce:	bf04      	itt	eq
 80099d0:	0a1b      	lsreq	r3, r3, #8
 80099d2:	3008      	addeq	r0, #8
 80099d4:	0719      	lsls	r1, r3, #28
 80099d6:	bf04      	itt	eq
 80099d8:	091b      	lsreq	r3, r3, #4
 80099da:	3004      	addeq	r0, #4
 80099dc:	0799      	lsls	r1, r3, #30
 80099de:	bf04      	itt	eq
 80099e0:	089b      	lsreq	r3, r3, #2
 80099e2:	3002      	addeq	r0, #2
 80099e4:	07d9      	lsls	r1, r3, #31
 80099e6:	d403      	bmi.n	80099f0 <__lo0bits+0x50>
 80099e8:	085b      	lsrs	r3, r3, #1
 80099ea:	f100 0001 	add.w	r0, r0, #1
 80099ee:	d003      	beq.n	80099f8 <__lo0bits+0x58>
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	4770      	bx	lr
 80099f4:	2000      	movs	r0, #0
 80099f6:	4770      	bx	lr
 80099f8:	2020      	movs	r0, #32
 80099fa:	4770      	bx	lr

080099fc <__i2b>:
 80099fc:	b510      	push	{r4, lr}
 80099fe:	460c      	mov	r4, r1
 8009a00:	2101      	movs	r1, #1
 8009a02:	f7ff feb7 	bl	8009774 <_Balloc>
 8009a06:	4602      	mov	r2, r0
 8009a08:	b928      	cbnz	r0, 8009a16 <__i2b+0x1a>
 8009a0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a0e:	4b04      	ldr	r3, [pc, #16]	; (8009a20 <__i2b+0x24>)
 8009a10:	4804      	ldr	r0, [pc, #16]	; (8009a24 <__i2b+0x28>)
 8009a12:	f7fc f9a3 	bl	8005d5c <__assert_func>
 8009a16:	2301      	movs	r3, #1
 8009a18:	6144      	str	r4, [r0, #20]
 8009a1a:	6103      	str	r3, [r0, #16]
 8009a1c:	bd10      	pop	{r4, pc}
 8009a1e:	bf00      	nop
 8009a20:	0800aab4 	.word	0x0800aab4
 8009a24:	0800aba8 	.word	0x0800aba8

08009a28 <__multiply>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	4614      	mov	r4, r2
 8009a2e:	690a      	ldr	r2, [r1, #16]
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	460d      	mov	r5, r1
 8009a34:	429a      	cmp	r2, r3
 8009a36:	bfbe      	ittt	lt
 8009a38:	460b      	movlt	r3, r1
 8009a3a:	4625      	movlt	r5, r4
 8009a3c:	461c      	movlt	r4, r3
 8009a3e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a42:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a46:	68ab      	ldr	r3, [r5, #8]
 8009a48:	6869      	ldr	r1, [r5, #4]
 8009a4a:	eb0a 0709 	add.w	r7, sl, r9
 8009a4e:	42bb      	cmp	r3, r7
 8009a50:	b085      	sub	sp, #20
 8009a52:	bfb8      	it	lt
 8009a54:	3101      	addlt	r1, #1
 8009a56:	f7ff fe8d 	bl	8009774 <_Balloc>
 8009a5a:	b930      	cbnz	r0, 8009a6a <__multiply+0x42>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	f240 115d 	movw	r1, #349	; 0x15d
 8009a62:	4b41      	ldr	r3, [pc, #260]	; (8009b68 <__multiply+0x140>)
 8009a64:	4841      	ldr	r0, [pc, #260]	; (8009b6c <__multiply+0x144>)
 8009a66:	f7fc f979 	bl	8005d5c <__assert_func>
 8009a6a:	f100 0614 	add.w	r6, r0, #20
 8009a6e:	4633      	mov	r3, r6
 8009a70:	2200      	movs	r2, #0
 8009a72:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a76:	4543      	cmp	r3, r8
 8009a78:	d31e      	bcc.n	8009ab8 <__multiply+0x90>
 8009a7a:	f105 0c14 	add.w	ip, r5, #20
 8009a7e:	f104 0314 	add.w	r3, r4, #20
 8009a82:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a86:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a8a:	9202      	str	r2, [sp, #8]
 8009a8c:	ebac 0205 	sub.w	r2, ip, r5
 8009a90:	3a15      	subs	r2, #21
 8009a92:	f022 0203 	bic.w	r2, r2, #3
 8009a96:	3204      	adds	r2, #4
 8009a98:	f105 0115 	add.w	r1, r5, #21
 8009a9c:	458c      	cmp	ip, r1
 8009a9e:	bf38      	it	cc
 8009aa0:	2204      	movcc	r2, #4
 8009aa2:	9201      	str	r2, [sp, #4]
 8009aa4:	9a02      	ldr	r2, [sp, #8]
 8009aa6:	9303      	str	r3, [sp, #12]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d808      	bhi.n	8009abe <__multiply+0x96>
 8009aac:	2f00      	cmp	r7, #0
 8009aae:	dc55      	bgt.n	8009b5c <__multiply+0x134>
 8009ab0:	6107      	str	r7, [r0, #16]
 8009ab2:	b005      	add	sp, #20
 8009ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab8:	f843 2b04 	str.w	r2, [r3], #4
 8009abc:	e7db      	b.n	8009a76 <__multiply+0x4e>
 8009abe:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ac2:	f1ba 0f00 	cmp.w	sl, #0
 8009ac6:	d020      	beq.n	8009b0a <__multiply+0xe2>
 8009ac8:	46b1      	mov	r9, r6
 8009aca:	2200      	movs	r2, #0
 8009acc:	f105 0e14 	add.w	lr, r5, #20
 8009ad0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009ad4:	f8d9 b000 	ldr.w	fp, [r9]
 8009ad8:	b2a1      	uxth	r1, r4
 8009ada:	fa1f fb8b 	uxth.w	fp, fp
 8009ade:	fb0a b101 	mla	r1, sl, r1, fp
 8009ae2:	4411      	add	r1, r2
 8009ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ae8:	0c24      	lsrs	r4, r4, #16
 8009aea:	0c12      	lsrs	r2, r2, #16
 8009aec:	fb0a 2404 	mla	r4, sl, r4, r2
 8009af0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009af4:	b289      	uxth	r1, r1
 8009af6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009afa:	45f4      	cmp	ip, lr
 8009afc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009b00:	f849 1b04 	str.w	r1, [r9], #4
 8009b04:	d8e4      	bhi.n	8009ad0 <__multiply+0xa8>
 8009b06:	9901      	ldr	r1, [sp, #4]
 8009b08:	5072      	str	r2, [r6, r1]
 8009b0a:	9a03      	ldr	r2, [sp, #12]
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b12:	f1b9 0f00 	cmp.w	r9, #0
 8009b16:	d01f      	beq.n	8009b58 <__multiply+0x130>
 8009b18:	46b6      	mov	lr, r6
 8009b1a:	f04f 0a00 	mov.w	sl, #0
 8009b1e:	6834      	ldr	r4, [r6, #0]
 8009b20:	f105 0114 	add.w	r1, r5, #20
 8009b24:	880a      	ldrh	r2, [r1, #0]
 8009b26:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b2a:	b2a4      	uxth	r4, r4
 8009b2c:	fb09 b202 	mla	r2, r9, r2, fp
 8009b30:	4492      	add	sl, r2
 8009b32:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b36:	f84e 4b04 	str.w	r4, [lr], #4
 8009b3a:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b3e:	f8be 2000 	ldrh.w	r2, [lr]
 8009b42:	0c24      	lsrs	r4, r4, #16
 8009b44:	fb09 2404 	mla	r4, r9, r4, r2
 8009b48:	458c      	cmp	ip, r1
 8009b4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b4e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b52:	d8e7      	bhi.n	8009b24 <__multiply+0xfc>
 8009b54:	9a01      	ldr	r2, [sp, #4]
 8009b56:	50b4      	str	r4, [r6, r2]
 8009b58:	3604      	adds	r6, #4
 8009b5a:	e7a3      	b.n	8009aa4 <__multiply+0x7c>
 8009b5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1a5      	bne.n	8009ab0 <__multiply+0x88>
 8009b64:	3f01      	subs	r7, #1
 8009b66:	e7a1      	b.n	8009aac <__multiply+0x84>
 8009b68:	0800aab4 	.word	0x0800aab4
 8009b6c:	0800aba8 	.word	0x0800aba8

08009b70 <__pow5mult>:
 8009b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b74:	4615      	mov	r5, r2
 8009b76:	f012 0203 	ands.w	r2, r2, #3
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460f      	mov	r7, r1
 8009b7e:	d007      	beq.n	8009b90 <__pow5mult+0x20>
 8009b80:	4c25      	ldr	r4, [pc, #148]	; (8009c18 <__pow5mult+0xa8>)
 8009b82:	3a01      	subs	r2, #1
 8009b84:	2300      	movs	r3, #0
 8009b86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b8a:	f7ff fe55 	bl	8009838 <__multadd>
 8009b8e:	4607      	mov	r7, r0
 8009b90:	10ad      	asrs	r5, r5, #2
 8009b92:	d03d      	beq.n	8009c10 <__pow5mult+0xa0>
 8009b94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b96:	b97c      	cbnz	r4, 8009bb8 <__pow5mult+0x48>
 8009b98:	2010      	movs	r0, #16
 8009b9a:	f7fc f939 	bl	8005e10 <malloc>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	6270      	str	r0, [r6, #36]	; 0x24
 8009ba2:	b928      	cbnz	r0, 8009bb0 <__pow5mult+0x40>
 8009ba4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ba8:	4b1c      	ldr	r3, [pc, #112]	; (8009c1c <__pow5mult+0xac>)
 8009baa:	481d      	ldr	r0, [pc, #116]	; (8009c20 <__pow5mult+0xb0>)
 8009bac:	f7fc f8d6 	bl	8005d5c <__assert_func>
 8009bb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bb4:	6004      	str	r4, [r0, #0]
 8009bb6:	60c4      	str	r4, [r0, #12]
 8009bb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bc0:	b94c      	cbnz	r4, 8009bd6 <__pow5mult+0x66>
 8009bc2:	f240 2171 	movw	r1, #625	; 0x271
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ff18 	bl	80099fc <__i2b>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4604      	mov	r4, r0
 8009bd0:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bd4:	6003      	str	r3, [r0, #0]
 8009bd6:	f04f 0900 	mov.w	r9, #0
 8009bda:	07eb      	lsls	r3, r5, #31
 8009bdc:	d50a      	bpl.n	8009bf4 <__pow5mult+0x84>
 8009bde:	4639      	mov	r1, r7
 8009be0:	4622      	mov	r2, r4
 8009be2:	4630      	mov	r0, r6
 8009be4:	f7ff ff20 	bl	8009a28 <__multiply>
 8009be8:	4680      	mov	r8, r0
 8009bea:	4639      	mov	r1, r7
 8009bec:	4630      	mov	r0, r6
 8009bee:	f7ff fe01 	bl	80097f4 <_Bfree>
 8009bf2:	4647      	mov	r7, r8
 8009bf4:	106d      	asrs	r5, r5, #1
 8009bf6:	d00b      	beq.n	8009c10 <__pow5mult+0xa0>
 8009bf8:	6820      	ldr	r0, [r4, #0]
 8009bfa:	b938      	cbnz	r0, 8009c0c <__pow5mult+0x9c>
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7ff ff11 	bl	8009a28 <__multiply>
 8009c06:	6020      	str	r0, [r4, #0]
 8009c08:	f8c0 9000 	str.w	r9, [r0]
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	e7e4      	b.n	8009bda <__pow5mult+0x6a>
 8009c10:	4638      	mov	r0, r7
 8009c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c16:	bf00      	nop
 8009c18:	0800acf8 	.word	0x0800acf8
 8009c1c:	0800aa3e 	.word	0x0800aa3e
 8009c20:	0800aba8 	.word	0x0800aba8

08009c24 <__lshift>:
 8009c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	460c      	mov	r4, r1
 8009c2a:	4607      	mov	r7, r0
 8009c2c:	4691      	mov	r9, r2
 8009c2e:	6923      	ldr	r3, [r4, #16]
 8009c30:	6849      	ldr	r1, [r1, #4]
 8009c32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c36:	68a3      	ldr	r3, [r4, #8]
 8009c38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c3c:	f108 0601 	add.w	r6, r8, #1
 8009c40:	42b3      	cmp	r3, r6
 8009c42:	db0b      	blt.n	8009c5c <__lshift+0x38>
 8009c44:	4638      	mov	r0, r7
 8009c46:	f7ff fd95 	bl	8009774 <_Balloc>
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	b948      	cbnz	r0, 8009c62 <__lshift+0x3e>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c54:	4b27      	ldr	r3, [pc, #156]	; (8009cf4 <__lshift+0xd0>)
 8009c56:	4828      	ldr	r0, [pc, #160]	; (8009cf8 <__lshift+0xd4>)
 8009c58:	f7fc f880 	bl	8005d5c <__assert_func>
 8009c5c:	3101      	adds	r1, #1
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	e7ee      	b.n	8009c40 <__lshift+0x1c>
 8009c62:	2300      	movs	r3, #0
 8009c64:	f100 0114 	add.w	r1, r0, #20
 8009c68:	f100 0210 	add.w	r2, r0, #16
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	4553      	cmp	r3, sl
 8009c70:	db33      	blt.n	8009cda <__lshift+0xb6>
 8009c72:	6920      	ldr	r0, [r4, #16]
 8009c74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c78:	f104 0314 	add.w	r3, r4, #20
 8009c7c:	f019 091f 	ands.w	r9, r9, #31
 8009c80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c88:	d02b      	beq.n	8009ce2 <__lshift+0xbe>
 8009c8a:	468a      	mov	sl, r1
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f1c9 0e20 	rsb	lr, r9, #32
 8009c92:	6818      	ldr	r0, [r3, #0]
 8009c94:	fa00 f009 	lsl.w	r0, r0, r9
 8009c98:	4302      	orrs	r2, r0
 8009c9a:	f84a 2b04 	str.w	r2, [sl], #4
 8009c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca2:	459c      	cmp	ip, r3
 8009ca4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ca8:	d8f3      	bhi.n	8009c92 <__lshift+0x6e>
 8009caa:	ebac 0304 	sub.w	r3, ip, r4
 8009cae:	3b15      	subs	r3, #21
 8009cb0:	f023 0303 	bic.w	r3, r3, #3
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	f104 0015 	add.w	r0, r4, #21
 8009cba:	4584      	cmp	ip, r0
 8009cbc:	bf38      	it	cc
 8009cbe:	2304      	movcc	r3, #4
 8009cc0:	50ca      	str	r2, [r1, r3]
 8009cc2:	b10a      	cbz	r2, 8009cc8 <__lshift+0xa4>
 8009cc4:	f108 0602 	add.w	r6, r8, #2
 8009cc8:	3e01      	subs	r6, #1
 8009cca:	4638      	mov	r0, r7
 8009ccc:	4621      	mov	r1, r4
 8009cce:	612e      	str	r6, [r5, #16]
 8009cd0:	f7ff fd90 	bl	80097f4 <_Bfree>
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cda:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cde:	3301      	adds	r3, #1
 8009ce0:	e7c5      	b.n	8009c6e <__lshift+0x4a>
 8009ce2:	3904      	subs	r1, #4
 8009ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ce8:	459c      	cmp	ip, r3
 8009cea:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cee:	d8f9      	bhi.n	8009ce4 <__lshift+0xc0>
 8009cf0:	e7ea      	b.n	8009cc8 <__lshift+0xa4>
 8009cf2:	bf00      	nop
 8009cf4:	0800aab4 	.word	0x0800aab4
 8009cf8:	0800aba8 	.word	0x0800aba8

08009cfc <__mcmp>:
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	690a      	ldr	r2, [r1, #16]
 8009d00:	6900      	ldr	r0, [r0, #16]
 8009d02:	b530      	push	{r4, r5, lr}
 8009d04:	1a80      	subs	r0, r0, r2
 8009d06:	d10d      	bne.n	8009d24 <__mcmp+0x28>
 8009d08:	3314      	adds	r3, #20
 8009d0a:	3114      	adds	r1, #20
 8009d0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d1c:	4295      	cmp	r5, r2
 8009d1e:	d002      	beq.n	8009d26 <__mcmp+0x2a>
 8009d20:	d304      	bcc.n	8009d2c <__mcmp+0x30>
 8009d22:	2001      	movs	r0, #1
 8009d24:	bd30      	pop	{r4, r5, pc}
 8009d26:	42a3      	cmp	r3, r4
 8009d28:	d3f4      	bcc.n	8009d14 <__mcmp+0x18>
 8009d2a:	e7fb      	b.n	8009d24 <__mcmp+0x28>
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	e7f8      	b.n	8009d24 <__mcmp+0x28>
	...

08009d34 <__mdiff>:
 8009d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	460c      	mov	r4, r1
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4620      	mov	r0, r4
 8009d40:	4692      	mov	sl, r2
 8009d42:	f7ff ffdb 	bl	8009cfc <__mcmp>
 8009d46:	1e05      	subs	r5, r0, #0
 8009d48:	d111      	bne.n	8009d6e <__mdiff+0x3a>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f7ff fd11 	bl	8009774 <_Balloc>
 8009d52:	4602      	mov	r2, r0
 8009d54:	b928      	cbnz	r0, 8009d62 <__mdiff+0x2e>
 8009d56:	f240 2132 	movw	r1, #562	; 0x232
 8009d5a:	4b3c      	ldr	r3, [pc, #240]	; (8009e4c <__mdiff+0x118>)
 8009d5c:	483c      	ldr	r0, [pc, #240]	; (8009e50 <__mdiff+0x11c>)
 8009d5e:	f7fb fffd 	bl	8005d5c <__assert_func>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d68:	4610      	mov	r0, r2
 8009d6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6e:	bfa4      	itt	ge
 8009d70:	4653      	movge	r3, sl
 8009d72:	46a2      	movge	sl, r4
 8009d74:	4630      	mov	r0, r6
 8009d76:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009d7a:	bfa6      	itte	ge
 8009d7c:	461c      	movge	r4, r3
 8009d7e:	2500      	movge	r5, #0
 8009d80:	2501      	movlt	r5, #1
 8009d82:	f7ff fcf7 	bl	8009774 <_Balloc>
 8009d86:	4602      	mov	r2, r0
 8009d88:	b918      	cbnz	r0, 8009d92 <__mdiff+0x5e>
 8009d8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d8e:	4b2f      	ldr	r3, [pc, #188]	; (8009e4c <__mdiff+0x118>)
 8009d90:	e7e4      	b.n	8009d5c <__mdiff+0x28>
 8009d92:	f100 0814 	add.w	r8, r0, #20
 8009d96:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009d9a:	60c5      	str	r5, [r0, #12]
 8009d9c:	f04f 0c00 	mov.w	ip, #0
 8009da0:	f10a 0514 	add.w	r5, sl, #20
 8009da4:	f10a 0010 	add.w	r0, sl, #16
 8009da8:	46c2      	mov	sl, r8
 8009daa:	6926      	ldr	r6, [r4, #16]
 8009dac:	f104 0914 	add.w	r9, r4, #20
 8009db0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009db4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009db8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009dbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dc0:	fa1f f18b 	uxth.w	r1, fp
 8009dc4:	4461      	add	r1, ip
 8009dc6:	fa1f fc83 	uxth.w	ip, r3
 8009dca:	0c1b      	lsrs	r3, r3, #16
 8009dcc:	eba1 010c 	sub.w	r1, r1, ip
 8009dd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dd4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009dd8:	b289      	uxth	r1, r1
 8009dda:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009dde:	454e      	cmp	r6, r9
 8009de0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009de4:	f84a 3b04 	str.w	r3, [sl], #4
 8009de8:	d8e6      	bhi.n	8009db8 <__mdiff+0x84>
 8009dea:	1b33      	subs	r3, r6, r4
 8009dec:	3b15      	subs	r3, #21
 8009dee:	f023 0303 	bic.w	r3, r3, #3
 8009df2:	3415      	adds	r4, #21
 8009df4:	3304      	adds	r3, #4
 8009df6:	42a6      	cmp	r6, r4
 8009df8:	bf38      	it	cc
 8009dfa:	2304      	movcc	r3, #4
 8009dfc:	441d      	add	r5, r3
 8009dfe:	4443      	add	r3, r8
 8009e00:	461e      	mov	r6, r3
 8009e02:	462c      	mov	r4, r5
 8009e04:	4574      	cmp	r4, lr
 8009e06:	d30e      	bcc.n	8009e26 <__mdiff+0xf2>
 8009e08:	f10e 0103 	add.w	r1, lr, #3
 8009e0c:	1b49      	subs	r1, r1, r5
 8009e0e:	f021 0103 	bic.w	r1, r1, #3
 8009e12:	3d03      	subs	r5, #3
 8009e14:	45ae      	cmp	lr, r5
 8009e16:	bf38      	it	cc
 8009e18:	2100      	movcc	r1, #0
 8009e1a:	4419      	add	r1, r3
 8009e1c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009e20:	b18b      	cbz	r3, 8009e46 <__mdiff+0x112>
 8009e22:	6117      	str	r7, [r2, #16]
 8009e24:	e7a0      	b.n	8009d68 <__mdiff+0x34>
 8009e26:	f854 8b04 	ldr.w	r8, [r4], #4
 8009e2a:	fa1f f188 	uxth.w	r1, r8
 8009e2e:	4461      	add	r1, ip
 8009e30:	1408      	asrs	r0, r1, #16
 8009e32:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009e36:	b289      	uxth	r1, r1
 8009e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e40:	f846 1b04 	str.w	r1, [r6], #4
 8009e44:	e7de      	b.n	8009e04 <__mdiff+0xd0>
 8009e46:	3f01      	subs	r7, #1
 8009e48:	e7e8      	b.n	8009e1c <__mdiff+0xe8>
 8009e4a:	bf00      	nop
 8009e4c:	0800aab4 	.word	0x0800aab4
 8009e50:	0800aba8 	.word	0x0800aba8

08009e54 <__ulp>:
 8009e54:	4b11      	ldr	r3, [pc, #68]	; (8009e9c <__ulp+0x48>)
 8009e56:	400b      	ands	r3, r1
 8009e58:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dd02      	ble.n	8009e66 <__ulp+0x12>
 8009e60:	2000      	movs	r0, #0
 8009e62:	4619      	mov	r1, r3
 8009e64:	4770      	bx	lr
 8009e66:	425b      	negs	r3, r3
 8009e68:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009e6c:	f04f 0000 	mov.w	r0, #0
 8009e70:	f04f 0100 	mov.w	r1, #0
 8009e74:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e78:	da04      	bge.n	8009e84 <__ulp+0x30>
 8009e7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e7e:	fa43 f102 	asr.w	r1, r3, r2
 8009e82:	4770      	bx	lr
 8009e84:	f1a2 0314 	sub.w	r3, r2, #20
 8009e88:	2b1e      	cmp	r3, #30
 8009e8a:	bfd6      	itet	le
 8009e8c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009e90:	2301      	movgt	r3, #1
 8009e92:	fa22 f303 	lsrle.w	r3, r2, r3
 8009e96:	4618      	mov	r0, r3
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	7ff00000 	.word	0x7ff00000

08009ea0 <__b2d>:
 8009ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ea4:	6907      	ldr	r7, [r0, #16]
 8009ea6:	f100 0914 	add.w	r9, r0, #20
 8009eaa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009eae:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009eb2:	f1a7 0804 	sub.w	r8, r7, #4
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7ff fd52 	bl	8009960 <__hi0bits>
 8009ebc:	f1c0 0320 	rsb	r3, r0, #32
 8009ec0:	280a      	cmp	r0, #10
 8009ec2:	600b      	str	r3, [r1, #0]
 8009ec4:	491f      	ldr	r1, [pc, #124]	; (8009f44 <__b2d+0xa4>)
 8009ec6:	dc17      	bgt.n	8009ef8 <__b2d+0x58>
 8009ec8:	45c1      	cmp	r9, r8
 8009eca:	bf28      	it	cs
 8009ecc:	2200      	movcs	r2, #0
 8009ece:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ed2:	fa26 f30c 	lsr.w	r3, r6, ip
 8009ed6:	bf38      	it	cc
 8009ed8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009edc:	ea43 0501 	orr.w	r5, r3, r1
 8009ee0:	f100 0315 	add.w	r3, r0, #21
 8009ee4:	fa06 f303 	lsl.w	r3, r6, r3
 8009ee8:	fa22 f20c 	lsr.w	r2, r2, ip
 8009eec:	ea43 0402 	orr.w	r4, r3, r2
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef8:	45c1      	cmp	r9, r8
 8009efa:	bf2e      	itee	cs
 8009efc:	2200      	movcs	r2, #0
 8009efe:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009f02:	f1a7 0808 	subcc.w	r8, r7, #8
 8009f06:	f1b0 030b 	subs.w	r3, r0, #11
 8009f0a:	d016      	beq.n	8009f3a <__b2d+0x9a>
 8009f0c:	f1c3 0720 	rsb	r7, r3, #32
 8009f10:	fa22 f107 	lsr.w	r1, r2, r7
 8009f14:	45c8      	cmp	r8, r9
 8009f16:	fa06 f603 	lsl.w	r6, r6, r3
 8009f1a:	ea46 0601 	orr.w	r6, r6, r1
 8009f1e:	bf94      	ite	ls
 8009f20:	2100      	movls	r1, #0
 8009f22:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009f26:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009f2a:	fa02 f003 	lsl.w	r0, r2, r3
 8009f2e:	40f9      	lsrs	r1, r7
 8009f30:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f34:	ea40 0401 	orr.w	r4, r0, r1
 8009f38:	e7da      	b.n	8009ef0 <__b2d+0x50>
 8009f3a:	4614      	mov	r4, r2
 8009f3c:	ea46 0501 	orr.w	r5, r6, r1
 8009f40:	e7d6      	b.n	8009ef0 <__b2d+0x50>
 8009f42:	bf00      	nop
 8009f44:	3ff00000 	.word	0x3ff00000

08009f48 <__d2b>:
 8009f48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009f52:	4690      	mov	r8, r2
 8009f54:	461d      	mov	r5, r3
 8009f56:	f7ff fc0d 	bl	8009774 <_Balloc>
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	b930      	cbnz	r0, 8009f6c <__d2b+0x24>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	f240 310a 	movw	r1, #778	; 0x30a
 8009f64:	4b24      	ldr	r3, [pc, #144]	; (8009ff8 <__d2b+0xb0>)
 8009f66:	4825      	ldr	r0, [pc, #148]	; (8009ffc <__d2b+0xb4>)
 8009f68:	f7fb fef8 	bl	8005d5c <__assert_func>
 8009f6c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009f70:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009f74:	bb2d      	cbnz	r5, 8009fc2 <__d2b+0x7a>
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	f1b8 0300 	subs.w	r3, r8, #0
 8009f7c:	d026      	beq.n	8009fcc <__d2b+0x84>
 8009f7e:	4668      	mov	r0, sp
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	f7ff fd0d 	bl	80099a0 <__lo0bits>
 8009f86:	9900      	ldr	r1, [sp, #0]
 8009f88:	b1f0      	cbz	r0, 8009fc8 <__d2b+0x80>
 8009f8a:	9a01      	ldr	r2, [sp, #4]
 8009f8c:	f1c0 0320 	rsb	r3, r0, #32
 8009f90:	fa02 f303 	lsl.w	r3, r2, r3
 8009f94:	430b      	orrs	r3, r1
 8009f96:	40c2      	lsrs	r2, r0
 8009f98:	6163      	str	r3, [r4, #20]
 8009f9a:	9201      	str	r2, [sp, #4]
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bf14      	ite	ne
 8009fa2:	2102      	movne	r1, #2
 8009fa4:	2101      	moveq	r1, #1
 8009fa6:	61a3      	str	r3, [r4, #24]
 8009fa8:	6121      	str	r1, [r4, #16]
 8009faa:	b1c5      	cbz	r5, 8009fde <__d2b+0x96>
 8009fac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fb0:	4405      	add	r5, r0
 8009fb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fb6:	603d      	str	r5, [r7, #0]
 8009fb8:	6030      	str	r0, [r6, #0]
 8009fba:	4620      	mov	r0, r4
 8009fbc:	b002      	add	sp, #8
 8009fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fc6:	e7d6      	b.n	8009f76 <__d2b+0x2e>
 8009fc8:	6161      	str	r1, [r4, #20]
 8009fca:	e7e7      	b.n	8009f9c <__d2b+0x54>
 8009fcc:	a801      	add	r0, sp, #4
 8009fce:	f7ff fce7 	bl	80099a0 <__lo0bits>
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	9b01      	ldr	r3, [sp, #4]
 8009fd6:	6121      	str	r1, [r4, #16]
 8009fd8:	6163      	str	r3, [r4, #20]
 8009fda:	3020      	adds	r0, #32
 8009fdc:	e7e5      	b.n	8009faa <__d2b+0x62>
 8009fde:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009fe2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fe6:	6038      	str	r0, [r7, #0]
 8009fe8:	6918      	ldr	r0, [r3, #16]
 8009fea:	f7ff fcb9 	bl	8009960 <__hi0bits>
 8009fee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009ff2:	6031      	str	r1, [r6, #0]
 8009ff4:	e7e1      	b.n	8009fba <__d2b+0x72>
 8009ff6:	bf00      	nop
 8009ff8:	0800aab4 	.word	0x0800aab4
 8009ffc:	0800aba8 	.word	0x0800aba8

0800a000 <__ratio>:
 800a000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	4688      	mov	r8, r1
 800a006:	4669      	mov	r1, sp
 800a008:	4681      	mov	r9, r0
 800a00a:	f7ff ff49 	bl	8009ea0 <__b2d>
 800a00e:	460f      	mov	r7, r1
 800a010:	4604      	mov	r4, r0
 800a012:	460d      	mov	r5, r1
 800a014:	4640      	mov	r0, r8
 800a016:	a901      	add	r1, sp, #4
 800a018:	f7ff ff42 	bl	8009ea0 <__b2d>
 800a01c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a020:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a024:	468b      	mov	fp, r1
 800a026:	eba3 0c02 	sub.w	ip, r3, r2
 800a02a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a02e:	1a9b      	subs	r3, r3, r2
 800a030:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a034:	2b00      	cmp	r3, #0
 800a036:	bfd5      	itete	le
 800a038:	460a      	movle	r2, r1
 800a03a:	462a      	movgt	r2, r5
 800a03c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a040:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a044:	bfd8      	it	le
 800a046:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a04a:	465b      	mov	r3, fp
 800a04c:	4602      	mov	r2, r0
 800a04e:	4639      	mov	r1, r7
 800a050:	4620      	mov	r0, r4
 800a052:	f7f6 fb6b 	bl	800072c <__aeabi_ddiv>
 800a056:	b003      	add	sp, #12
 800a058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a05c <__copybits>:
 800a05c:	3901      	subs	r1, #1
 800a05e:	b570      	push	{r4, r5, r6, lr}
 800a060:	1149      	asrs	r1, r1, #5
 800a062:	6914      	ldr	r4, [r2, #16]
 800a064:	3101      	adds	r1, #1
 800a066:	f102 0314 	add.w	r3, r2, #20
 800a06a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a06e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a072:	1f05      	subs	r5, r0, #4
 800a074:	42a3      	cmp	r3, r4
 800a076:	d30c      	bcc.n	800a092 <__copybits+0x36>
 800a078:	1aa3      	subs	r3, r4, r2
 800a07a:	3b11      	subs	r3, #17
 800a07c:	f023 0303 	bic.w	r3, r3, #3
 800a080:	3211      	adds	r2, #17
 800a082:	42a2      	cmp	r2, r4
 800a084:	bf88      	it	hi
 800a086:	2300      	movhi	r3, #0
 800a088:	4418      	add	r0, r3
 800a08a:	2300      	movs	r3, #0
 800a08c:	4288      	cmp	r0, r1
 800a08e:	d305      	bcc.n	800a09c <__copybits+0x40>
 800a090:	bd70      	pop	{r4, r5, r6, pc}
 800a092:	f853 6b04 	ldr.w	r6, [r3], #4
 800a096:	f845 6f04 	str.w	r6, [r5, #4]!
 800a09a:	e7eb      	b.n	800a074 <__copybits+0x18>
 800a09c:	f840 3b04 	str.w	r3, [r0], #4
 800a0a0:	e7f4      	b.n	800a08c <__copybits+0x30>

0800a0a2 <__any_on>:
 800a0a2:	f100 0214 	add.w	r2, r0, #20
 800a0a6:	6900      	ldr	r0, [r0, #16]
 800a0a8:	114b      	asrs	r3, r1, #5
 800a0aa:	4298      	cmp	r0, r3
 800a0ac:	b510      	push	{r4, lr}
 800a0ae:	db11      	blt.n	800a0d4 <__any_on+0x32>
 800a0b0:	dd0a      	ble.n	800a0c8 <__any_on+0x26>
 800a0b2:	f011 011f 	ands.w	r1, r1, #31
 800a0b6:	d007      	beq.n	800a0c8 <__any_on+0x26>
 800a0b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a0bc:	fa24 f001 	lsr.w	r0, r4, r1
 800a0c0:	fa00 f101 	lsl.w	r1, r0, r1
 800a0c4:	428c      	cmp	r4, r1
 800a0c6:	d10b      	bne.n	800a0e0 <__any_on+0x3e>
 800a0c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d803      	bhi.n	800a0d8 <__any_on+0x36>
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	bd10      	pop	{r4, pc}
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	e7f7      	b.n	800a0c8 <__any_on+0x26>
 800a0d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	d0f5      	beq.n	800a0cc <__any_on+0x2a>
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	e7f6      	b.n	800a0d2 <__any_on+0x30>

0800a0e4 <_calloc_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	fb02 f501 	mul.w	r5, r2, r1
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	f7fb fefa 	bl	8005ee4 <_malloc_r>
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	b118      	cbz	r0, 800a0fc <_calloc_r+0x18>
 800a0f4:	462a      	mov	r2, r5
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	f7fb fea0 	bl	8005e3c <memset>
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}

0800a100 <_realloc_r>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	4607      	mov	r7, r0
 800a104:	4614      	mov	r4, r2
 800a106:	460e      	mov	r6, r1
 800a108:	b921      	cbnz	r1, 800a114 <_realloc_r+0x14>
 800a10a:	4611      	mov	r1, r2
 800a10c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a110:	f7fb bee8 	b.w	8005ee4 <_malloc_r>
 800a114:	b922      	cbnz	r2, 800a120 <_realloc_r+0x20>
 800a116:	f7fb fe99 	bl	8005e4c <_free_r>
 800a11a:	4625      	mov	r5, r4
 800a11c:	4628      	mov	r0, r5
 800a11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a120:	f000 fa72 	bl	800a608 <_malloc_usable_size_r>
 800a124:	42a0      	cmp	r0, r4
 800a126:	d20f      	bcs.n	800a148 <_realloc_r+0x48>
 800a128:	4621      	mov	r1, r4
 800a12a:	4638      	mov	r0, r7
 800a12c:	f7fb feda 	bl	8005ee4 <_malloc_r>
 800a130:	4605      	mov	r5, r0
 800a132:	2800      	cmp	r0, #0
 800a134:	d0f2      	beq.n	800a11c <_realloc_r+0x1c>
 800a136:	4631      	mov	r1, r6
 800a138:	4622      	mov	r2, r4
 800a13a:	f7fb fe71 	bl	8005e20 <memcpy>
 800a13e:	4631      	mov	r1, r6
 800a140:	4638      	mov	r0, r7
 800a142:	f7fb fe83 	bl	8005e4c <_free_r>
 800a146:	e7e9      	b.n	800a11c <_realloc_r+0x1c>
 800a148:	4635      	mov	r5, r6
 800a14a:	e7e7      	b.n	800a11c <_realloc_r+0x1c>

0800a14c <__ssputs_r>:
 800a14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a150:	688e      	ldr	r6, [r1, #8]
 800a152:	4682      	mov	sl, r0
 800a154:	429e      	cmp	r6, r3
 800a156:	460c      	mov	r4, r1
 800a158:	4690      	mov	r8, r2
 800a15a:	461f      	mov	r7, r3
 800a15c:	d838      	bhi.n	800a1d0 <__ssputs_r+0x84>
 800a15e:	898a      	ldrh	r2, [r1, #12]
 800a160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a164:	d032      	beq.n	800a1cc <__ssputs_r+0x80>
 800a166:	6825      	ldr	r5, [r4, #0]
 800a168:	6909      	ldr	r1, [r1, #16]
 800a16a:	3301      	adds	r3, #1
 800a16c:	eba5 0901 	sub.w	r9, r5, r1
 800a170:	6965      	ldr	r5, [r4, #20]
 800a172:	444b      	add	r3, r9
 800a174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a17c:	106d      	asrs	r5, r5, #1
 800a17e:	429d      	cmp	r5, r3
 800a180:	bf38      	it	cc
 800a182:	461d      	movcc	r5, r3
 800a184:	0553      	lsls	r3, r2, #21
 800a186:	d531      	bpl.n	800a1ec <__ssputs_r+0xa0>
 800a188:	4629      	mov	r1, r5
 800a18a:	f7fb feab 	bl	8005ee4 <_malloc_r>
 800a18e:	4606      	mov	r6, r0
 800a190:	b950      	cbnz	r0, 800a1a8 <__ssputs_r+0x5c>
 800a192:	230c      	movs	r3, #12
 800a194:	f04f 30ff 	mov.w	r0, #4294967295
 800a198:	f8ca 3000 	str.w	r3, [sl]
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a8:	464a      	mov	r2, r9
 800a1aa:	6921      	ldr	r1, [r4, #16]
 800a1ac:	f7fb fe38 	bl	8005e20 <memcpy>
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ba:	81a3      	strh	r3, [r4, #12]
 800a1bc:	6126      	str	r6, [r4, #16]
 800a1be:	444e      	add	r6, r9
 800a1c0:	6026      	str	r6, [r4, #0]
 800a1c2:	463e      	mov	r6, r7
 800a1c4:	6165      	str	r5, [r4, #20]
 800a1c6:	eba5 0509 	sub.w	r5, r5, r9
 800a1ca:	60a5      	str	r5, [r4, #8]
 800a1cc:	42be      	cmp	r6, r7
 800a1ce:	d900      	bls.n	800a1d2 <__ssputs_r+0x86>
 800a1d0:	463e      	mov	r6, r7
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	4641      	mov	r1, r8
 800a1d6:	6820      	ldr	r0, [r4, #0]
 800a1d8:	f7ff faa6 	bl	8009728 <memmove>
 800a1dc:	68a3      	ldr	r3, [r4, #8]
 800a1de:	6822      	ldr	r2, [r4, #0]
 800a1e0:	1b9b      	subs	r3, r3, r6
 800a1e2:	4432      	add	r2, r6
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	60a3      	str	r3, [r4, #8]
 800a1e8:	6022      	str	r2, [r4, #0]
 800a1ea:	e7db      	b.n	800a1a4 <__ssputs_r+0x58>
 800a1ec:	462a      	mov	r2, r5
 800a1ee:	f7ff ff87 	bl	800a100 <_realloc_r>
 800a1f2:	4606      	mov	r6, r0
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d1e1      	bne.n	800a1bc <__ssputs_r+0x70>
 800a1f8:	4650      	mov	r0, sl
 800a1fa:	6921      	ldr	r1, [r4, #16]
 800a1fc:	f7fb fe26 	bl	8005e4c <_free_r>
 800a200:	e7c7      	b.n	800a192 <__ssputs_r+0x46>
	...

0800a204 <_svfiprintf_r>:
 800a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a208:	4698      	mov	r8, r3
 800a20a:	898b      	ldrh	r3, [r1, #12]
 800a20c:	4607      	mov	r7, r0
 800a20e:	061b      	lsls	r3, r3, #24
 800a210:	460d      	mov	r5, r1
 800a212:	4614      	mov	r4, r2
 800a214:	b09d      	sub	sp, #116	; 0x74
 800a216:	d50e      	bpl.n	800a236 <_svfiprintf_r+0x32>
 800a218:	690b      	ldr	r3, [r1, #16]
 800a21a:	b963      	cbnz	r3, 800a236 <_svfiprintf_r+0x32>
 800a21c:	2140      	movs	r1, #64	; 0x40
 800a21e:	f7fb fe61 	bl	8005ee4 <_malloc_r>
 800a222:	6028      	str	r0, [r5, #0]
 800a224:	6128      	str	r0, [r5, #16]
 800a226:	b920      	cbnz	r0, 800a232 <_svfiprintf_r+0x2e>
 800a228:	230c      	movs	r3, #12
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295
 800a230:	e0d1      	b.n	800a3d6 <_svfiprintf_r+0x1d2>
 800a232:	2340      	movs	r3, #64	; 0x40
 800a234:	616b      	str	r3, [r5, #20]
 800a236:	2300      	movs	r3, #0
 800a238:	9309      	str	r3, [sp, #36]	; 0x24
 800a23a:	2320      	movs	r3, #32
 800a23c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a240:	2330      	movs	r3, #48	; 0x30
 800a242:	f04f 0901 	mov.w	r9, #1
 800a246:	f8cd 800c 	str.w	r8, [sp, #12]
 800a24a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a3f0 <_svfiprintf_r+0x1ec>
 800a24e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a252:	4623      	mov	r3, r4
 800a254:	469a      	mov	sl, r3
 800a256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a25a:	b10a      	cbz	r2, 800a260 <_svfiprintf_r+0x5c>
 800a25c:	2a25      	cmp	r2, #37	; 0x25
 800a25e:	d1f9      	bne.n	800a254 <_svfiprintf_r+0x50>
 800a260:	ebba 0b04 	subs.w	fp, sl, r4
 800a264:	d00b      	beq.n	800a27e <_svfiprintf_r+0x7a>
 800a266:	465b      	mov	r3, fp
 800a268:	4622      	mov	r2, r4
 800a26a:	4629      	mov	r1, r5
 800a26c:	4638      	mov	r0, r7
 800a26e:	f7ff ff6d 	bl	800a14c <__ssputs_r>
 800a272:	3001      	adds	r0, #1
 800a274:	f000 80aa 	beq.w	800a3cc <_svfiprintf_r+0x1c8>
 800a278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a27a:	445a      	add	r2, fp
 800a27c:	9209      	str	r2, [sp, #36]	; 0x24
 800a27e:	f89a 3000 	ldrb.w	r3, [sl]
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 80a2 	beq.w	800a3cc <_svfiprintf_r+0x1c8>
 800a288:	2300      	movs	r3, #0
 800a28a:	f04f 32ff 	mov.w	r2, #4294967295
 800a28e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a292:	f10a 0a01 	add.w	sl, sl, #1
 800a296:	9304      	str	r3, [sp, #16]
 800a298:	9307      	str	r3, [sp, #28]
 800a29a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a29e:	931a      	str	r3, [sp, #104]	; 0x68
 800a2a0:	4654      	mov	r4, sl
 800a2a2:	2205      	movs	r2, #5
 800a2a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a8:	4851      	ldr	r0, [pc, #324]	; (800a3f0 <_svfiprintf_r+0x1ec>)
 800a2aa:	f7ff fa2f 	bl	800970c <memchr>
 800a2ae:	9a04      	ldr	r2, [sp, #16]
 800a2b0:	b9d8      	cbnz	r0, 800a2ea <_svfiprintf_r+0xe6>
 800a2b2:	06d0      	lsls	r0, r2, #27
 800a2b4:	bf44      	itt	mi
 800a2b6:	2320      	movmi	r3, #32
 800a2b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2bc:	0711      	lsls	r1, r2, #28
 800a2be:	bf44      	itt	mi
 800a2c0:	232b      	movmi	r3, #43	; 0x2b
 800a2c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ca:	2b2a      	cmp	r3, #42	; 0x2a
 800a2cc:	d015      	beq.n	800a2fa <_svfiprintf_r+0xf6>
 800a2ce:	4654      	mov	r4, sl
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	f04f 0c0a 	mov.w	ip, #10
 800a2d6:	9a07      	ldr	r2, [sp, #28]
 800a2d8:	4621      	mov	r1, r4
 800a2da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2de:	3b30      	subs	r3, #48	; 0x30
 800a2e0:	2b09      	cmp	r3, #9
 800a2e2:	d94e      	bls.n	800a382 <_svfiprintf_r+0x17e>
 800a2e4:	b1b0      	cbz	r0, 800a314 <_svfiprintf_r+0x110>
 800a2e6:	9207      	str	r2, [sp, #28]
 800a2e8:	e014      	b.n	800a314 <_svfiprintf_r+0x110>
 800a2ea:	eba0 0308 	sub.w	r3, r0, r8
 800a2ee:	fa09 f303 	lsl.w	r3, r9, r3
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	46a2      	mov	sl, r4
 800a2f6:	9304      	str	r3, [sp, #16]
 800a2f8:	e7d2      	b.n	800a2a0 <_svfiprintf_r+0x9c>
 800a2fa:	9b03      	ldr	r3, [sp, #12]
 800a2fc:	1d19      	adds	r1, r3, #4
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	9103      	str	r1, [sp, #12]
 800a302:	2b00      	cmp	r3, #0
 800a304:	bfbb      	ittet	lt
 800a306:	425b      	neglt	r3, r3
 800a308:	f042 0202 	orrlt.w	r2, r2, #2
 800a30c:	9307      	strge	r3, [sp, #28]
 800a30e:	9307      	strlt	r3, [sp, #28]
 800a310:	bfb8      	it	lt
 800a312:	9204      	strlt	r2, [sp, #16]
 800a314:	7823      	ldrb	r3, [r4, #0]
 800a316:	2b2e      	cmp	r3, #46	; 0x2e
 800a318:	d10c      	bne.n	800a334 <_svfiprintf_r+0x130>
 800a31a:	7863      	ldrb	r3, [r4, #1]
 800a31c:	2b2a      	cmp	r3, #42	; 0x2a
 800a31e:	d135      	bne.n	800a38c <_svfiprintf_r+0x188>
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	3402      	adds	r4, #2
 800a324:	1d1a      	adds	r2, r3, #4
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	9203      	str	r2, [sp, #12]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	bfb8      	it	lt
 800a32e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a332:	9305      	str	r3, [sp, #20]
 800a334:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a400 <_svfiprintf_r+0x1fc>
 800a338:	2203      	movs	r2, #3
 800a33a:	4650      	mov	r0, sl
 800a33c:	7821      	ldrb	r1, [r4, #0]
 800a33e:	f7ff f9e5 	bl	800970c <memchr>
 800a342:	b140      	cbz	r0, 800a356 <_svfiprintf_r+0x152>
 800a344:	2340      	movs	r3, #64	; 0x40
 800a346:	eba0 000a 	sub.w	r0, r0, sl
 800a34a:	fa03 f000 	lsl.w	r0, r3, r0
 800a34e:	9b04      	ldr	r3, [sp, #16]
 800a350:	3401      	adds	r4, #1
 800a352:	4303      	orrs	r3, r0
 800a354:	9304      	str	r3, [sp, #16]
 800a356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a35a:	2206      	movs	r2, #6
 800a35c:	4825      	ldr	r0, [pc, #148]	; (800a3f4 <_svfiprintf_r+0x1f0>)
 800a35e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a362:	f7ff f9d3 	bl	800970c <memchr>
 800a366:	2800      	cmp	r0, #0
 800a368:	d038      	beq.n	800a3dc <_svfiprintf_r+0x1d8>
 800a36a:	4b23      	ldr	r3, [pc, #140]	; (800a3f8 <_svfiprintf_r+0x1f4>)
 800a36c:	bb1b      	cbnz	r3, 800a3b6 <_svfiprintf_r+0x1b2>
 800a36e:	9b03      	ldr	r3, [sp, #12]
 800a370:	3307      	adds	r3, #7
 800a372:	f023 0307 	bic.w	r3, r3, #7
 800a376:	3308      	adds	r3, #8
 800a378:	9303      	str	r3, [sp, #12]
 800a37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a37c:	4433      	add	r3, r6
 800a37e:	9309      	str	r3, [sp, #36]	; 0x24
 800a380:	e767      	b.n	800a252 <_svfiprintf_r+0x4e>
 800a382:	460c      	mov	r4, r1
 800a384:	2001      	movs	r0, #1
 800a386:	fb0c 3202 	mla	r2, ip, r2, r3
 800a38a:	e7a5      	b.n	800a2d8 <_svfiprintf_r+0xd4>
 800a38c:	2300      	movs	r3, #0
 800a38e:	f04f 0c0a 	mov.w	ip, #10
 800a392:	4619      	mov	r1, r3
 800a394:	3401      	adds	r4, #1
 800a396:	9305      	str	r3, [sp, #20]
 800a398:	4620      	mov	r0, r4
 800a39a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a39e:	3a30      	subs	r2, #48	; 0x30
 800a3a0:	2a09      	cmp	r2, #9
 800a3a2:	d903      	bls.n	800a3ac <_svfiprintf_r+0x1a8>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0c5      	beq.n	800a334 <_svfiprintf_r+0x130>
 800a3a8:	9105      	str	r1, [sp, #20]
 800a3aa:	e7c3      	b.n	800a334 <_svfiprintf_r+0x130>
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3b4:	e7f0      	b.n	800a398 <_svfiprintf_r+0x194>
 800a3b6:	ab03      	add	r3, sp, #12
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	462a      	mov	r2, r5
 800a3bc:	4638      	mov	r0, r7
 800a3be:	4b0f      	ldr	r3, [pc, #60]	; (800a3fc <_svfiprintf_r+0x1f8>)
 800a3c0:	a904      	add	r1, sp, #16
 800a3c2:	f7fb ffdf 	bl	8006384 <_printf_float>
 800a3c6:	1c42      	adds	r2, r0, #1
 800a3c8:	4606      	mov	r6, r0
 800a3ca:	d1d6      	bne.n	800a37a <_svfiprintf_r+0x176>
 800a3cc:	89ab      	ldrh	r3, [r5, #12]
 800a3ce:	065b      	lsls	r3, r3, #25
 800a3d0:	f53f af2c 	bmi.w	800a22c <_svfiprintf_r+0x28>
 800a3d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3d6:	b01d      	add	sp, #116	; 0x74
 800a3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3dc:	ab03      	add	r3, sp, #12
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	462a      	mov	r2, r5
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <_svfiprintf_r+0x1f8>)
 800a3e6:	a904      	add	r1, sp, #16
 800a3e8:	f7fc fa68 	bl	80068bc <_printf_i>
 800a3ec:	e7eb      	b.n	800a3c6 <_svfiprintf_r+0x1c2>
 800a3ee:	bf00      	nop
 800a3f0:	0800a890 	.word	0x0800a890
 800a3f4:	0800a89a 	.word	0x0800a89a
 800a3f8:	08006385 	.word	0x08006385
 800a3fc:	0800a14d 	.word	0x0800a14d
 800a400:	0800a896 	.word	0x0800a896

0800a404 <nan>:
 800a404:	2000      	movs	r0, #0
 800a406:	4901      	ldr	r1, [pc, #4]	; (800a40c <nan+0x8>)
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	7ff80000 	.word	0x7ff80000

0800a410 <_raise_r>:
 800a410:	291f      	cmp	r1, #31
 800a412:	b538      	push	{r3, r4, r5, lr}
 800a414:	4604      	mov	r4, r0
 800a416:	460d      	mov	r5, r1
 800a418:	d904      	bls.n	800a424 <_raise_r+0x14>
 800a41a:	2316      	movs	r3, #22
 800a41c:	6003      	str	r3, [r0, #0]
 800a41e:	f04f 30ff 	mov.w	r0, #4294967295
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a426:	b112      	cbz	r2, 800a42e <_raise_r+0x1e>
 800a428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a42c:	b94b      	cbnz	r3, 800a442 <_raise_r+0x32>
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 f830 	bl	800a494 <_getpid_r>
 800a434:	462a      	mov	r2, r5
 800a436:	4601      	mov	r1, r0
 800a438:	4620      	mov	r0, r4
 800a43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a43e:	f000 b817 	b.w	800a470 <_kill_r>
 800a442:	2b01      	cmp	r3, #1
 800a444:	d00a      	beq.n	800a45c <_raise_r+0x4c>
 800a446:	1c59      	adds	r1, r3, #1
 800a448:	d103      	bne.n	800a452 <_raise_r+0x42>
 800a44a:	2316      	movs	r3, #22
 800a44c:	6003      	str	r3, [r0, #0]
 800a44e:	2001      	movs	r0, #1
 800a450:	e7e7      	b.n	800a422 <_raise_r+0x12>
 800a452:	2400      	movs	r4, #0
 800a454:	4628      	mov	r0, r5
 800a456:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a45a:	4798      	blx	r3
 800a45c:	2000      	movs	r0, #0
 800a45e:	e7e0      	b.n	800a422 <_raise_r+0x12>

0800a460 <raise>:
 800a460:	4b02      	ldr	r3, [pc, #8]	; (800a46c <raise+0xc>)
 800a462:	4601      	mov	r1, r0
 800a464:	6818      	ldr	r0, [r3, #0]
 800a466:	f7ff bfd3 	b.w	800a410 <_raise_r>
 800a46a:	bf00      	nop
 800a46c:	2000004c 	.word	0x2000004c

0800a470 <_kill_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	2300      	movs	r3, #0
 800a474:	4d06      	ldr	r5, [pc, #24]	; (800a490 <_kill_r+0x20>)
 800a476:	4604      	mov	r4, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	4611      	mov	r1, r2
 800a47c:	602b      	str	r3, [r5, #0]
 800a47e:	f7f7 fe4c 	bl	800211a <_kill>
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	d102      	bne.n	800a48c <_kill_r+0x1c>
 800a486:	682b      	ldr	r3, [r5, #0]
 800a488:	b103      	cbz	r3, 800a48c <_kill_r+0x1c>
 800a48a:	6023      	str	r3, [r4, #0]
 800a48c:	bd38      	pop	{r3, r4, r5, pc}
 800a48e:	bf00      	nop
 800a490:	200008c8 	.word	0x200008c8

0800a494 <_getpid_r>:
 800a494:	f7f7 be3a 	b.w	800210c <_getpid>

0800a498 <__sread>:
 800a498:	b510      	push	{r4, lr}
 800a49a:	460c      	mov	r4, r1
 800a49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a0:	f000 f8ba 	bl	800a618 <_read_r>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	bfab      	itete	ge
 800a4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a4ac:	181b      	addge	r3, r3, r0
 800a4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4b2:	bfac      	ite	ge
 800a4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4b6:	81a3      	strhlt	r3, [r4, #12]
 800a4b8:	bd10      	pop	{r4, pc}

0800a4ba <__swrite>:
 800a4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4be:	461f      	mov	r7, r3
 800a4c0:	898b      	ldrh	r3, [r1, #12]
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	05db      	lsls	r3, r3, #23
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	4616      	mov	r6, r2
 800a4ca:	d505      	bpl.n	800a4d8 <__swrite+0x1e>
 800a4cc:	2302      	movs	r3, #2
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d4:	f000 f886 	bl	800a5e4 <_lseek_r>
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	4632      	mov	r2, r6
 800a4dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ee:	f000 b835 	b.w	800a55c <_write_r>

0800a4f2 <__sseek>:
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	460c      	mov	r4, r1
 800a4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fa:	f000 f873 	bl	800a5e4 <_lseek_r>
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	bf15      	itete	ne
 800a504:	6560      	strne	r0, [r4, #84]	; 0x54
 800a506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a50e:	81a3      	strheq	r3, [r4, #12]
 800a510:	bf18      	it	ne
 800a512:	81a3      	strhne	r3, [r4, #12]
 800a514:	bd10      	pop	{r4, pc}

0800a516 <__sclose>:
 800a516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51a:	f000 b831 	b.w	800a580 <_close_r>

0800a51e <strncmp>:
 800a51e:	b510      	push	{r4, lr}
 800a520:	b16a      	cbz	r2, 800a53e <strncmp+0x20>
 800a522:	3901      	subs	r1, #1
 800a524:	1884      	adds	r4, r0, r2
 800a526:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a52a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a52e:	4293      	cmp	r3, r2
 800a530:	d103      	bne.n	800a53a <strncmp+0x1c>
 800a532:	42a0      	cmp	r0, r4
 800a534:	d001      	beq.n	800a53a <strncmp+0x1c>
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1f5      	bne.n	800a526 <strncmp+0x8>
 800a53a:	1a98      	subs	r0, r3, r2
 800a53c:	bd10      	pop	{r4, pc}
 800a53e:	4610      	mov	r0, r2
 800a540:	e7fc      	b.n	800a53c <strncmp+0x1e>

0800a542 <__ascii_wctomb>:
 800a542:	4603      	mov	r3, r0
 800a544:	4608      	mov	r0, r1
 800a546:	b141      	cbz	r1, 800a55a <__ascii_wctomb+0x18>
 800a548:	2aff      	cmp	r2, #255	; 0xff
 800a54a:	d904      	bls.n	800a556 <__ascii_wctomb+0x14>
 800a54c:	228a      	movs	r2, #138	; 0x8a
 800a54e:	f04f 30ff 	mov.w	r0, #4294967295
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	4770      	bx	lr
 800a556:	2001      	movs	r0, #1
 800a558:	700a      	strb	r2, [r1, #0]
 800a55a:	4770      	bx	lr

0800a55c <_write_r>:
 800a55c:	b538      	push	{r3, r4, r5, lr}
 800a55e:	4604      	mov	r4, r0
 800a560:	4608      	mov	r0, r1
 800a562:	4611      	mov	r1, r2
 800a564:	2200      	movs	r2, #0
 800a566:	4d05      	ldr	r5, [pc, #20]	; (800a57c <_write_r+0x20>)
 800a568:	602a      	str	r2, [r5, #0]
 800a56a:	461a      	mov	r2, r3
 800a56c:	f7f7 fe0c 	bl	8002188 <_write>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d102      	bne.n	800a57a <_write_r+0x1e>
 800a574:	682b      	ldr	r3, [r5, #0]
 800a576:	b103      	cbz	r3, 800a57a <_write_r+0x1e>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	200008c8 	.word	0x200008c8

0800a580 <_close_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	2300      	movs	r3, #0
 800a584:	4d05      	ldr	r5, [pc, #20]	; (800a59c <_close_r+0x1c>)
 800a586:	4604      	mov	r4, r0
 800a588:	4608      	mov	r0, r1
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	f7f7 fe18 	bl	80021c0 <_close>
 800a590:	1c43      	adds	r3, r0, #1
 800a592:	d102      	bne.n	800a59a <_close_r+0x1a>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	b103      	cbz	r3, 800a59a <_close_r+0x1a>
 800a598:	6023      	str	r3, [r4, #0]
 800a59a:	bd38      	pop	{r3, r4, r5, pc}
 800a59c:	200008c8 	.word	0x200008c8

0800a5a0 <_fstat_r>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	4d06      	ldr	r5, [pc, #24]	; (800a5c0 <_fstat_r+0x20>)
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	4608      	mov	r0, r1
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	602b      	str	r3, [r5, #0]
 800a5ae:	f7f7 fe12 	bl	80021d6 <_fstat>
 800a5b2:	1c43      	adds	r3, r0, #1
 800a5b4:	d102      	bne.n	800a5bc <_fstat_r+0x1c>
 800a5b6:	682b      	ldr	r3, [r5, #0]
 800a5b8:	b103      	cbz	r3, 800a5bc <_fstat_r+0x1c>
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	bd38      	pop	{r3, r4, r5, pc}
 800a5be:	bf00      	nop
 800a5c0:	200008c8 	.word	0x200008c8

0800a5c4 <_isatty_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	4d05      	ldr	r5, [pc, #20]	; (800a5e0 <_isatty_r+0x1c>)
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	4608      	mov	r0, r1
 800a5ce:	602b      	str	r3, [r5, #0]
 800a5d0:	f7f7 fe10 	bl	80021f4 <_isatty>
 800a5d4:	1c43      	adds	r3, r0, #1
 800a5d6:	d102      	bne.n	800a5de <_isatty_r+0x1a>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	b103      	cbz	r3, 800a5de <_isatty_r+0x1a>
 800a5dc:	6023      	str	r3, [r4, #0]
 800a5de:	bd38      	pop	{r3, r4, r5, pc}
 800a5e0:	200008c8 	.word	0x200008c8

0800a5e4 <_lseek_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4d05      	ldr	r5, [pc, #20]	; (800a604 <_lseek_r+0x20>)
 800a5f0:	602a      	str	r2, [r5, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	f7f7 fe08 	bl	8002208 <_lseek>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_lseek_r+0x1e>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_lseek_r+0x1e>
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	200008c8 	.word	0x200008c8

0800a608 <_malloc_usable_size_r>:
 800a608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a60c:	1f18      	subs	r0, r3, #4
 800a60e:	2b00      	cmp	r3, #0
 800a610:	bfbc      	itt	lt
 800a612:	580b      	ldrlt	r3, [r1, r0]
 800a614:	18c0      	addlt	r0, r0, r3
 800a616:	4770      	bx	lr

0800a618 <_read_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4604      	mov	r4, r0
 800a61c:	4608      	mov	r0, r1
 800a61e:	4611      	mov	r1, r2
 800a620:	2200      	movs	r2, #0
 800a622:	4d05      	ldr	r5, [pc, #20]	; (800a638 <_read_r+0x20>)
 800a624:	602a      	str	r2, [r5, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	f7f7 fd91 	bl	800214e <_read>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_read_r+0x1e>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_read_r+0x1e>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	200008c8 	.word	0x200008c8

0800a63c <sqrt>:
 800a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63e:	4606      	mov	r6, r0
 800a640:	460f      	mov	r7, r1
 800a642:	f000 f827 	bl	800a694 <__ieee754_sqrt>
 800a646:	4b12      	ldr	r3, [pc, #72]	; (800a690 <sqrt+0x54>)
 800a648:	4604      	mov	r4, r0
 800a64a:	f993 3000 	ldrsb.w	r3, [r3]
 800a64e:	460d      	mov	r5, r1
 800a650:	3301      	adds	r3, #1
 800a652:	d019      	beq.n	800a688 <sqrt+0x4c>
 800a654:	4632      	mov	r2, r6
 800a656:	463b      	mov	r3, r7
 800a658:	4630      	mov	r0, r6
 800a65a:	4639      	mov	r1, r7
 800a65c:	f7f6 f9d6 	bl	8000a0c <__aeabi_dcmpun>
 800a660:	b990      	cbnz	r0, 800a688 <sqrt+0x4c>
 800a662:	2200      	movs	r2, #0
 800a664:	2300      	movs	r3, #0
 800a666:	4630      	mov	r0, r6
 800a668:	4639      	mov	r1, r7
 800a66a:	f7f6 f9a7 	bl	80009bc <__aeabi_dcmplt>
 800a66e:	b158      	cbz	r0, 800a688 <sqrt+0x4c>
 800a670:	f7fb fb92 	bl	8005d98 <__errno>
 800a674:	2321      	movs	r3, #33	; 0x21
 800a676:	2200      	movs	r2, #0
 800a678:	6003      	str	r3, [r0, #0]
 800a67a:	2300      	movs	r3, #0
 800a67c:	4610      	mov	r0, r2
 800a67e:	4619      	mov	r1, r3
 800a680:	f7f6 f854 	bl	800072c <__aeabi_ddiv>
 800a684:	4604      	mov	r4, r0
 800a686:	460d      	mov	r5, r1
 800a688:	4620      	mov	r0, r4
 800a68a:	4629      	mov	r1, r5
 800a68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a68e:	bf00      	nop
 800a690:	20000220 	.word	0x20000220

0800a694 <__ieee754_sqrt>:
 800a694:	f8df c150 	ldr.w	ip, [pc, #336]	; 800a7e8 <__ieee754_sqrt+0x154>
 800a698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a69c:	ea3c 0c01 	bics.w	ip, ip, r1
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460d      	mov	r5, r1
 800a6a6:	460a      	mov	r2, r1
 800a6a8:	4607      	mov	r7, r0
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	d10e      	bne.n	800a6cc <__ieee754_sqrt+0x38>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	f7f5 ff12 	bl	80004d8 <__aeabi_dmul>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	f7f5 fd56 	bl	800016c <__adddf3>
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	460d      	mov	r5, r1
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6cc:	2900      	cmp	r1, #0
 800a6ce:	dc0d      	bgt.n	800a6ec <__ieee754_sqrt+0x58>
 800a6d0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a6d4:	ea5c 0707 	orrs.w	r7, ip, r7
 800a6d8:	d0f4      	beq.n	800a6c4 <__ieee754_sqrt+0x30>
 800a6da:	b139      	cbz	r1, 800a6ec <__ieee754_sqrt+0x58>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	f7f5 fd43 	bl	8000168 <__aeabi_dsub>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	f7f6 f821 	bl	800072c <__aeabi_ddiv>
 800a6ea:	e7e9      	b.n	800a6c0 <__ieee754_sqrt+0x2c>
 800a6ec:	1512      	asrs	r2, r2, #20
 800a6ee:	d074      	beq.n	800a7da <__ieee754_sqrt+0x146>
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	07d5      	lsls	r5, r2, #31
 800a6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6f8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800a6fc:	bf5e      	ittt	pl
 800a6fe:	0fe3      	lsrpl	r3, r4, #31
 800a700:	0064      	lslpl	r4, r4, #1
 800a702:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800a706:	0fe3      	lsrs	r3, r4, #31
 800a708:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a70c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a710:	2516      	movs	r5, #22
 800a712:	4601      	mov	r1, r0
 800a714:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a718:	1076      	asrs	r6, r6, #1
 800a71a:	0064      	lsls	r4, r4, #1
 800a71c:	188f      	adds	r7, r1, r2
 800a71e:	429f      	cmp	r7, r3
 800a720:	bfde      	ittt	le
 800a722:	1bdb      	suble	r3, r3, r7
 800a724:	18b9      	addle	r1, r7, r2
 800a726:	1880      	addle	r0, r0, r2
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	3d01      	subs	r5, #1
 800a72c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a730:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a734:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a738:	d1f0      	bne.n	800a71c <__ieee754_sqrt+0x88>
 800a73a:	462a      	mov	r2, r5
 800a73c:	f04f 0e20 	mov.w	lr, #32
 800a740:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800a744:	428b      	cmp	r3, r1
 800a746:	eb07 0c05 	add.w	ip, r7, r5
 800a74a:	dc02      	bgt.n	800a752 <__ieee754_sqrt+0xbe>
 800a74c:	d113      	bne.n	800a776 <__ieee754_sqrt+0xe2>
 800a74e:	45a4      	cmp	ip, r4
 800a750:	d811      	bhi.n	800a776 <__ieee754_sqrt+0xe2>
 800a752:	f1bc 0f00 	cmp.w	ip, #0
 800a756:	eb0c 0507 	add.w	r5, ip, r7
 800a75a:	da43      	bge.n	800a7e4 <__ieee754_sqrt+0x150>
 800a75c:	2d00      	cmp	r5, #0
 800a75e:	db41      	blt.n	800a7e4 <__ieee754_sqrt+0x150>
 800a760:	f101 0801 	add.w	r8, r1, #1
 800a764:	1a5b      	subs	r3, r3, r1
 800a766:	4641      	mov	r1, r8
 800a768:	45a4      	cmp	ip, r4
 800a76a:	bf88      	it	hi
 800a76c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a770:	eba4 040c 	sub.w	r4, r4, ip
 800a774:	443a      	add	r2, r7
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	f1be 0e01 	subs.w	lr, lr, #1
 800a77c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a780:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800a784:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a788:	d1dc      	bne.n	800a744 <__ieee754_sqrt+0xb0>
 800a78a:	4323      	orrs	r3, r4
 800a78c:	d006      	beq.n	800a79c <__ieee754_sqrt+0x108>
 800a78e:	1c54      	adds	r4, r2, #1
 800a790:	bf0b      	itete	eq
 800a792:	4672      	moveq	r2, lr
 800a794:	3201      	addne	r2, #1
 800a796:	3001      	addeq	r0, #1
 800a798:	f022 0201 	bicne.w	r2, r2, #1
 800a79c:	1043      	asrs	r3, r0, #1
 800a79e:	07c1      	lsls	r1, r0, #31
 800a7a0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a7a4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a7a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a7ac:	bf48      	it	mi
 800a7ae:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800a7b8:	e782      	b.n	800a6c0 <__ieee754_sqrt+0x2c>
 800a7ba:	0ae3      	lsrs	r3, r4, #11
 800a7bc:	3915      	subs	r1, #21
 800a7be:	0564      	lsls	r4, r4, #21
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0fa      	beq.n	800a7ba <__ieee754_sqrt+0x126>
 800a7c4:	02de      	lsls	r6, r3, #11
 800a7c6:	d50a      	bpl.n	800a7de <__ieee754_sqrt+0x14a>
 800a7c8:	f1c2 0020 	rsb	r0, r2, #32
 800a7cc:	fa24 f000 	lsr.w	r0, r4, r0
 800a7d0:	1e55      	subs	r5, r2, #1
 800a7d2:	4094      	lsls	r4, r2
 800a7d4:	4303      	orrs	r3, r0
 800a7d6:	1b4a      	subs	r2, r1, r5
 800a7d8:	e78a      	b.n	800a6f0 <__ieee754_sqrt+0x5c>
 800a7da:	4611      	mov	r1, r2
 800a7dc:	e7f0      	b.n	800a7c0 <__ieee754_sqrt+0x12c>
 800a7de:	005b      	lsls	r3, r3, #1
 800a7e0:	3201      	adds	r2, #1
 800a7e2:	e7ef      	b.n	800a7c4 <__ieee754_sqrt+0x130>
 800a7e4:	4688      	mov	r8, r1
 800a7e6:	e7bd      	b.n	800a764 <__ieee754_sqrt+0xd0>
 800a7e8:	7ff00000 	.word	0x7ff00000

0800a7ec <_init>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	bf00      	nop
 800a7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7f2:	bc08      	pop	{r3}
 800a7f4:	469e      	mov	lr, r3
 800a7f6:	4770      	bx	lr

0800a7f8 <_fini>:
 800a7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fa:	bf00      	nop
 800a7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fe:	bc08      	pop	{r3}
 800a800:	469e      	mov	lr, r3
 800a802:	4770      	bx	lr
