
littlfs_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b80  0800af40  0800af40  0001af40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cac0  0800cac0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800cac0  0800cac0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cac0  0800cac0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cac0  0800cac0  0001cac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cac4  0800cac4  0001cac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800cac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  0800cb38  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  0800cb38  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154c6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280c  00000000  00000000  0003555f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00037d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  00038dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037d3  00000000  00000000  00039fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ab8  00000000  00000000  0003d7ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088dbb  00000000  00000000  0004f263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d801e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d8  00000000  00000000  000d8074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800af28 	.word	0x0800af28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800af28 	.word	0x0800af28

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__popcountsi2>:
 800015c:	0843      	lsrs	r3, r0, #1
 800015e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000162:	1ac0      	subs	r0, r0, r3
 8000164:	0883      	lsrs	r3, r0, #2
 8000166:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800016a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 800016e:	4418      	add	r0, r3
 8000170:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000174:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000178:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800017c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000180:	0e00      	lsrs	r0, r0, #24
 8000182:	4770      	bx	lr

08000184 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800018e:	683a      	ldr	r2, [r7, #0]
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4293      	cmp	r3, r2
 8000194:	bf38      	it	cc
 8000196:	4613      	movcc	r3, r2
}
 8000198:	4618      	mov	r0, r3
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr

080001a2 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80001a2:	b480      	push	{r7}
 80001a4:	b083      	sub	sp, #12
 80001a6:	af00      	add	r7, sp, #0
 80001a8:	6078      	str	r0, [r7, #4]
 80001aa:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80001ac:	683a      	ldr	r2, [r7, #0]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4293      	cmp	r3, r2
 80001b2:	bf28      	it	cs
 80001b4:	4613      	movcs	r3, r2
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
 80001c8:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	683a      	ldr	r2, [r7, #0]
 80001ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80001d2:	6839      	ldr	r1, [r7, #0]
 80001d4:	fb01 f202 	mul.w	r2, r1, r2
 80001d8:	1a9b      	subs	r3, r3, r2
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	1ad3      	subs	r3, r2, r3
}
 80001de:	4618      	mov	r0, r3
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr

080001e8 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	3b01      	subs	r3, #1
 80001fa:	6839      	ldr	r1, [r7, #0]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffdf 	bl	80001c0 <lfs_aligndown>
 8000202:	4603      	mov	r3, r0
}
 8000204:	4618      	mov	r0, r3
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}

0800020c <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3b01      	subs	r3, #1
 8000218:	fab3 f383 	clz	r3, r3
 800021c:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8000220:	4618      	mov	r0, r3
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800022a:	b480      	push	{r7}
 800022c:	b083      	sub	sp, #12
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	fa93 f3a3 	rbit	r3, r3
 8000238:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800023c:	4618      	mov	r0, r3
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f7ff ff84 	bl	800015c <__popcountsi2>
 8000254:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8000256:	4618      	mov	r0, r3
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}

0800025e <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800025e:	b480      	push	{r7}
 8000260:	b083      	sub	sp, #12
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
 8000266:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	1ad3      	subs	r3, r2, r3
}
 800026e:	4618      	mov	r0, r3
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8000280:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000282:	4618      	mov	r0, r3
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f7ff ffef 	bl	8000278 <lfs_fromle32>
 800029a:	4603      	mov	r3, r0
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr

080002ba <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b082      	sub	sp, #8
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80002c2:	6878      	ldr	r0, [r7, #4]
 80002c4:	f7ff ffee 	bl	80002a4 <lfs_frombe32>
 80002c8:	4603      	mov	r3, r0
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f009 fc50 	bl	8009b80 <malloc>
 80002e0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b082      	sub	sp, #8
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f009 fc4c 	bl	8009b90 <free>
#else
    (void)p;
#endif
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	f04f 32ff 	mov.w	r2, #4294967295
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	68d8      	ldr	r0, [r3, #12]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800032e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000330:	461a      	mov	r2, r3
 8000332:	21ff      	movs	r1, #255	; 0xff
 8000334:	f009 fc50 	bl	8009bd8 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f04f 32ff 	mov.w	r2, #4294967295
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000348:	b5b0      	push	{r4, r5, r7, lr}
 800034a:	b08a      	sub	sp, #40	; 0x28
 800034c:	af02      	add	r7, sp, #8
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
 8000354:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000358:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 800035a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800035c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800035e:	441a      	add	r2, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	429a      	cmp	r2, r3
 8000368:	d80a      	bhi.n	8000380 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800036e:	2b00      	cmp	r3, #0
 8000370:	f000 8124 	beq.w	80005bc <lfs_bd_read+0x274>
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800037a:	429a      	cmp	r2, r3
 800037c:	f0c0 811e 	bcc.w	80005bc <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8000380:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000384:	e11f      	b.n	80005c6 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000388:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d03f      	beq.n	8000410 <lfs_bd_read+0xc8>
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000396:	429a      	cmp	r2, r3
 8000398:	d13a      	bne.n	8000410 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	685a      	ldr	r2, [r3, #4]
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 80003a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d232      	bcs.n	8000410 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d324      	bcc.n	80003fe <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	689a      	ldr	r2, [r3, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	6859      	ldr	r1, [r3, #4]
 80003bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003be:	1acb      	subs	r3, r1, r3
 80003c0:	4413      	add	r3, r2
 80003c2:	4619      	mov	r1, r3
 80003c4:	69b8      	ldr	r0, [r7, #24]
 80003c6:	f7ff feec 	bl	80001a2 <lfs_min>
 80003ca:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	68da      	ldr	r2, [r3, #12]
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80003d6:	1acb      	subs	r3, r1, r3
 80003d8:	4413      	add	r3, r2
 80003da:	69ba      	ldr	r2, [r7, #24]
 80003dc:	4619      	mov	r1, r3
 80003de:	69f8      	ldr	r0, [r7, #28]
 80003e0:	f009 fbec 	bl	8009bbc <memcpy>

                data += diff;
 80003e4:	69fa      	ldr	r2, [r7, #28]
 80003e6:	69bb      	ldr	r3, [r7, #24]
 80003e8:	4413      	add	r3, r2
 80003ea:	61fb      	str	r3, [r7, #28]
                off += diff;
 80003ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80003ee:	69bb      	ldr	r3, [r7, #24]
 80003f0:	4413      	add	r3, r2
 80003f2:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80003f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80003f6:	69bb      	ldr	r3, [r7, #24]
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80003fc:	e0de      	b.n	80005bc <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	685a      	ldr	r2, [r3, #4]
 8000402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	4619      	mov	r1, r3
 8000408:	69b8      	ldr	r0, [r7, #24]
 800040a:	f7ff feca 	bl	80001a2 <lfs_min>
 800040e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000416:	429a      	cmp	r2, r3
 8000418:	d13a      	bne.n	8000490 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000426:	429a      	cmp	r2, r3
 8000428:	d232      	bcs.n	8000490 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000430:	429a      	cmp	r2, r3
 8000432:	d324      	bcc.n	800047e <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	689a      	ldr	r2, [r3, #8]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6859      	ldr	r1, [r3, #4]
 800043c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800043e:	1acb      	subs	r3, r1, r3
 8000440:	4413      	add	r3, r2
 8000442:	4619      	mov	r1, r3
 8000444:	69b8      	ldr	r0, [r7, #24]
 8000446:	f7ff feac 	bl	80001a2 <lfs_min>
 800044a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	68da      	ldr	r2, [r3, #12]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	4413      	add	r3, r2
 800045a:	69ba      	ldr	r2, [r7, #24]
 800045c:	4619      	mov	r1, r3
 800045e:	69f8      	ldr	r0, [r7, #28]
 8000460:	f009 fbac 	bl	8009bbc <memcpy>

                data += diff;
 8000464:	69fa      	ldr	r2, [r7, #28]
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	4413      	add	r3, r2
 800046a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800046c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800046e:	69bb      	ldr	r3, [r7, #24]
 8000470:	4413      	add	r3, r2
 8000472:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800047c:	e09e      	b.n	80005bc <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685a      	ldr	r2, [r3, #4]
 8000482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	4619      	mov	r1, r3
 8000488:	69b8      	ldr	r0, [r7, #24]
 800048a:	f7ff fe8a 	bl	80001a2 <lfs_min>
 800048e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	429a      	cmp	r2, r3
 8000496:	d336      	bcc.n	8000506 <lfs_bd_read+0x1be>
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80004a4:	fb02 f201 	mul.w	r2, r2, r1
 80004a8:	1a9b      	subs	r3, r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d12b      	bne.n	8000506 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80004b2:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80004b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d325      	bcc.n	8000506 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4619      	mov	r1, r3
 80004c2:	69b8      	ldr	r0, [r7, #24]
 80004c4:	f7ff fe7c 	bl	80001c0 <lfs_aligndown>
 80004c8:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80004ce:	685c      	ldr	r4, [r3, #4]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80004d4:	69bb      	ldr	r3, [r7, #24]
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80004de:	47a0      	blx	r4
 80004e0:	6178      	str	r0, [r7, #20]
            if (err) {
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <lfs_bd_read+0x1a4>
                return err;
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	e06c      	b.n	80005c6 <lfs_bd_read+0x27e>
            }

            data += diff;
 80004ec:	69fa      	ldr	r2, [r7, #28]
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	4413      	add	r3, r2
 80004f2:	61fb      	str	r3, [r7, #28]
            off += diff;
 80004f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	4413      	add	r3, r2
 80004fa:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 80004fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000504:	e05a      	b.n	80005bc <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00a      	beq.n	8000524 <lfs_bd_read+0x1dc>
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000514:	429a      	cmp	r2, r3
 8000516:	d305      	bcc.n	8000524 <lfs_bd_read+0x1dc>
 8000518:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <lfs_bd_read+0x288>)
 800051a:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <lfs_bd_read+0x28c>)
 800051c:	2174      	movs	r1, #116	; 0x74
 800051e:	482e      	ldr	r0, [pc, #184]	; (80005d8 <lfs_bd_read+0x290>)
 8000520:	f009 fad4 	bl	8009acc <__assert_func>
        rcache->block = block;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000528:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	4619      	mov	r1, r3
 8000532:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000534:	f7ff fe44 	bl	80001c0 <lfs_aligndown>
 8000538:	4602      	mov	r2, r0
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800053e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4619      	mov	r1, r3
 800054c:	4610      	mov	r0, r2
 800054e:	f7ff fe4b 	bl	80001e8 <lfs_alignup>
 8000552:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4619      	mov	r1, r3
 800055c:	4610      	mov	r0, r2
 800055e:	f7ff fe20 	bl	80001a2 <lfs_min>
 8000562:	4602      	mov	r2, r0
                - rcache->off,
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000568:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 800056e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000570:	4619      	mov	r1, r3
 8000572:	4610      	mov	r0, r2
 8000574:	f7ff fe15 	bl	80001a2 <lfs_min>
 8000578:	4602      	mov	r2, r0
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000582:	685c      	ldr	r4, [r3, #4]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	462b      	mov	r3, r5
 800059c:	47a0      	blx	r4
 800059e:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	dd05      	ble.n	80005b2 <lfs_bd_read+0x26a>
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <lfs_bd_read+0x294>)
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <lfs_bd_read+0x28c>)
 80005aa:	217f      	movs	r1, #127	; 0x7f
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <lfs_bd_read+0x290>)
 80005ae:	f009 fa8d 	bl	8009acc <__assert_func>
        if (err) {
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <lfs_bd_read+0x274>
            return err;
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	e004      	b.n	80005c6 <lfs_bd_read+0x27e>
    while (size > 0) {
 80005bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f47f aee1 	bne.w	8000386 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3720      	adds	r7, #32
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}
 80005ce:	bf00      	nop
 80005d0:	0800af40 	.word	0x0800af40
 80005d4:	0800c83c 	.word	0x0800c83c
 80005d8:	0800af70 	.word	0x0800af70
 80005dc:	0800af84 	.word	0x0800af84

080005e0 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b090      	sub	sp, #64	; 0x40
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80005ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 80005f6:	2300      	movs	r3, #0
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005fa:	e039      	b.n	8000670 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80005fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	2108      	movs	r1, #8
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fdcc 	bl	80001a2 <lfs_min>
 800060a:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000610:	1ad1      	subs	r1, r2, r3
 8000612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000616:	4413      	add	r3, r2
 8000618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800061a:	9203      	str	r2, [sp, #12]
 800061c:	f107 0214 	add.w	r2, r7, #20
 8000620:	9202      	str	r2, [sp, #8]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	460b      	mov	r3, r1
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	68b9      	ldr	r1, [r7, #8]
 800062e:	68f8      	ldr	r0, [r7, #12]
 8000630:	f7ff fe8a 	bl	8000348 <lfs_bd_read>
 8000634:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000636:	6a3b      	ldr	r3, [r7, #32]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <lfs_bd_cmp+0x60>
            return err;
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	e01c      	b.n	800067a <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000644:	18d1      	adds	r1, r2, r3
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800064c:	4618      	mov	r0, r3
 800064e:	f009 faa7 	bl	8009ba0 <memcmp>
 8000652:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d006      	beq.n	8000668 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	2b00      	cmp	r3, #0
 800065e:	da01      	bge.n	8000664 <lfs_bd_cmp+0x84>
 8000660:	2301      	movs	r3, #1
 8000662:	e00a      	b.n	800067a <lfs_bd_cmp+0x9a>
 8000664:	2302      	movs	r3, #2
 8000666:	e008      	b.n	800067a <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	4413      	add	r3, r2
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000674:	429a      	cmp	r2, r3
 8000676:	d3c1      	bcc.n	80005fc <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3730      	adds	r7, #48	; 0x30
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000682:	b580      	push	{r7, lr}
 8000684:	b08e      	sub	sp, #56	; 0x38
 8000686:	af04      	add	r7, sp, #16
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
 8000698:	e030      	b.n	80006fc <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800069a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	2108      	movs	r1, #8
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fd7d 	bl	80001a2 <lfs_min>
 80006a8:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ae:	1ad1      	subs	r1, r2, r3
 80006b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	4413      	add	r3, r2
 80006b6:	6a3a      	ldr	r2, [r7, #32]
 80006b8:	9203      	str	r2, [sp, #12]
 80006ba:	f107 0214 	add.w	r2, r7, #20
 80006be:	9202      	str	r2, [sp, #8]
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	460b      	mov	r3, r1
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	68b9      	ldr	r1, [r7, #8]
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f7ff fe3b 	bl	8000348 <lfs_bd_read>
 80006d2:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <lfs_bd_crc+0x5c>
            return err;
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	e013      	b.n	8000706 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 80006de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f107 0114 	add.w	r1, r7, #20
 80006e6:	6a3a      	ldr	r2, [r7, #32]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f006 fcd3 	bl	8007094 <lfs_crc>
 80006ee:	4602      	mov	r2, r0
 80006f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006f2:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 80006f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	4413      	add	r3, r2
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
 80006fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000700:	429a      	cmp	r2, r3
 8000702:	d3ca      	bcc.n	800069a <lfs_bd_crc+0x18>
    }

    return 0;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af04      	add	r7, sp, #16
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000726:	d060      	beq.n	80007ea <lfs_bd_flush+0xda>
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f113 0f02 	cmn.w	r3, #2
 8000730:	d05b      	beq.n	80007ea <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800073a:	429a      	cmp	r2, r3
 800073c:	d305      	bcc.n	800074a <lfs_bd_flush+0x3a>
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <lfs_bd_flush+0xe4>)
 8000740:	4a2d      	ldr	r2, [pc, #180]	; (80007f8 <lfs_bd_flush+0xe8>)
 8000742:	21bc      	movs	r1, #188	; 0xbc
 8000744:	482d      	ldr	r0, [pc, #180]	; (80007fc <lfs_bd_flush+0xec>)
 8000746:	f009 f9c1 	bl	8009acc <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4619      	mov	r1, r3
 8000756:	4610      	mov	r0, r2
 8000758:	f7ff fd46 	bl	80001e8 <lfs_alignup>
 800075c:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000762:	689c      	ldr	r4, [r3, #8]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	6819      	ldr	r1, [r3, #0]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	462b      	mov	r3, r5
 800077a:	47a0      	blx	r4
 800077c:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dd05      	ble.n	8000790 <lfs_bd_flush+0x80>
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <lfs_bd_flush+0xf0>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <lfs_bd_flush+0xe8>)
 8000788:	21c0      	movs	r1, #192	; 0xc0
 800078a:	481c      	ldr	r0, [pc, #112]	; (80007fc <lfs_bd_flush+0xec>)
 800078c:	f009 f99e 	bl	8009acc <__assert_func>
        if (err) {
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <lfs_bd_flush+0x8a>
            return err;
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	e028      	b.n	80007ec <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d020      	beq.n	80007e2 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f7ff fdac 	bl	8000300 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 80007b4:	69f8      	ldr	r0, [r7, #28]
 80007b6:	9003      	str	r0, [sp, #12]
 80007b8:	9102      	str	r1, [sp, #8]
 80007ba:	9201      	str	r2, [sp, #4]
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	2100      	movs	r1, #0
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	f7ff ff0b 	bl	80005e0 <lfs_bd_cmp>
 80007ca:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	da01      	bge.n	80007d6 <lfs_bd_flush+0xc6>
                return res;
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	e00a      	b.n	80007ec <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 80007dc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80007e0:	e004      	b.n	80007ec <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff fd99 	bl	800031c <lfs_cache_zero>
    }

    return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bdb0      	pop	{r4, r5, r7, pc}
 80007f4:	0800af90 	.word	0x0800af90
 80007f8:	0800c848 	.word	0x0800c848
 80007fc:	0800af70 	.word	0x0800af70
 8000800:	0800af84 	.word	0x0800af84

08000804 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff fd73 	bl	8000300 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	68b9      	ldr	r1, [r7, #8]
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f7ff ff75 	bl	8000710 <lfs_bd_flush>
 8000826:	6178      	str	r0, [r7, #20]
    if (err) {
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <lfs_bd_sync+0x2e>
        return err;
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	e011      	b.n	8000856 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000836:	691b      	ldr	r3, [r3, #16]
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800083c:	4610      	mov	r0, r2
 800083e:	4798      	blx	r3
 8000840:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	2b00      	cmp	r3, #0
 8000846:	dd05      	ble.n	8000854 <lfs_bd_sync+0x50>
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <lfs_bd_sync+0x5c>)
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <lfs_bd_sync+0x60>)
 800084c:	21e6      	movs	r1, #230	; 0xe6
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <lfs_bd_sync+0x64>)
 8000850:	f009 f93c 	bl	8009acc <__assert_func>
    return err;
 8000854:	697b      	ldr	r3, [r7, #20]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	0800af84 	.word	0x0800af84
 8000864:	0800c858 	.word	0x0800c858
 8000868:	0800af70 	.word	0x0800af70

0800086c <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000880:	f113 0f02 	cmn.w	r3, #2
 8000884:	d00a      	beq.n	800089c <lfs_bd_prog+0x30>
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800088a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800088c:	429a      	cmp	r2, r3
 800088e:	d305      	bcc.n	800089c <lfs_bd_prog+0x30>
 8000890:	4b47      	ldr	r3, [pc, #284]	; (80009b0 <lfs_bd_prog+0x144>)
 8000892:	4a48      	ldr	r2, [pc, #288]	; (80009b4 <lfs_bd_prog+0x148>)
 8000894:	21f1      	movs	r1, #241	; 0xf1
 8000896:	4848      	ldr	r0, [pc, #288]	; (80009b8 <lfs_bd_prog+0x14c>)
 8000898:	f009 f918 	bl	8009acc <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800089c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a0:	441a      	add	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d978      	bls.n	800099e <lfs_bd_prog+0x132>
 80008ac:	4b43      	ldr	r3, [pc, #268]	; (80009bc <lfs_bd_prog+0x150>)
 80008ae:	4a41      	ldr	r2, [pc, #260]	; (80009b4 <lfs_bd_prog+0x148>)
 80008b0:	21f2      	movs	r1, #242	; 0xf2
 80008b2:	4841      	ldr	r0, [pc, #260]	; (80009b8 <lfs_bd_prog+0x14c>)
 80008b4:	f009 f90a 	bl	8009acc <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008be:	429a      	cmp	r2, r3
 80008c0:	d151      	bne.n	8000966 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80008c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d34c      	bcc.n	8000966 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d6:	4413      	add	r3, r2
                off >= pcache->off &&
 80008d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008da:	429a      	cmp	r2, r3
 80008dc:	d243      	bcs.n	8000966 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	6859      	ldr	r1, [r3, #4]
 80008e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ea:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80008ec:	4413      	add	r3, r2
 80008ee:	4619      	mov	r1, r3
 80008f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80008f2:	f7ff fc56 	bl	80001a2 <lfs_min>
 80008f6:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000902:	1acb      	subs	r3, r1, r3
 8000904:	4413      	add	r3, r2
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	69f9      	ldr	r1, [r7, #28]
 800090a:	4618      	mov	r0, r3
 800090c:	f009 f956 	bl	8009bbc <memcpy>

            data += diff;
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	4413      	add	r3, r2
 8000916:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	4413      	add	r3, r2
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8000920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	6898      	ldr	r0, [r3, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	4619      	mov	r1, r3
 8000936:	f7ff fc25 	bl	8000184 <lfs_max>
 800093a:	4602      	mov	r2, r0
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094a:	429a      	cmp	r2, r3
 800094c:	d127      	bne.n	800099e <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800094e:	78fb      	ldrb	r3, [r7, #3]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	68b9      	ldr	r1, [r7, #8]
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f7ff fedb 	bl	8000710 <lfs_bd_flush>
 800095a:	6178      	str	r0, [r7, #20]
                if (err) {
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d01d      	beq.n	800099e <lfs_bd_prog+0x132>
                    return err;
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	e01f      	b.n	80009a6 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096e:	d006      	beq.n	800097e <lfs_bd_prog+0x112>
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <lfs_bd_prog+0x154>)
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <lfs_bd_prog+0x148>)
 8000974:	f240 110f 	movw	r1, #271	; 0x10f
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <lfs_bd_prog+0x14c>)
 800097a:	f009 f8a7 	bl	8009acc <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000982:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4619      	mov	r1, r3
 800098c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800098e:	f7ff fc17 	bl	80001c0 <lfs_aligndown>
 8000992:	4602      	mov	r2, r0
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800099e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d189      	bne.n	80008b8 <lfs_bd_prog+0x4c>
    }

    return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	0800afb4 	.word	0x0800afb4
 80009b4:	0800c864 	.word	0x0800c864
 80009b8:	0800af70 	.word	0x0800af70
 80009bc:	0800afec 	.word	0x0800afec
 80009c0:	0800b010 	.word	0x0800b010

080009c4 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d306      	bcc.n	80009e6 <lfs_bd_erase+0x22>
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <lfs_bd_erase+0x54>)
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <lfs_bd_erase+0x58>)
 80009dc:	f240 111d 	movw	r1, #285	; 0x11d
 80009e0:	480f      	ldr	r0, [pc, #60]	; (8000a20 <lfs_bd_erase+0x5c>)
 80009e2:	f009 f873 	bl	8009acc <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80009f0:	6839      	ldr	r1, [r7, #0]
 80009f2:	4610      	mov	r0, r2
 80009f4:	4798      	blx	r3
 80009f6:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	dd06      	ble.n	8000a0c <lfs_bd_erase+0x48>
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <lfs_bd_erase+0x60>)
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <lfs_bd_erase+0x58>)
 8000a02:	f240 111f 	movw	r1, #287	; 0x11f
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <lfs_bd_erase+0x5c>)
 8000a08:	f009 f860 	bl	8009acc <__assert_func>
    return err;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	0800b034 	.word	0x0800b034
 8000a1c:	0800c870 	.word	0x0800c870
 8000a20:	0800af70 	.word	0x0800af70
 8000a24:	0800af84 	.word	0x0800af84

08000a28 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3304      	adds	r3, #4
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	601a      	str	r2, [r3, #0]
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	d005      	beq.n	8000a6e <lfs_pair_isnull+0x1e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3304      	adds	r3, #4
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d101      	bne.n	8000a72 <lfs_pair_isnull+0x22>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <lfs_pair_isnull+0x24>
 8000a72:	2300      	movs	r3, #0
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	b2db      	uxtb	r3, r3
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d017      	beq.n	8000aca <lfs_pair_cmp+0x46>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d00f      	beq.n	8000aca <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d008      	beq.n	8000aca <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3304      	adds	r3, #4
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d001      	beq.n	8000aca <lfs_pair_cmp+0x46>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <lfs_pair_cmp+0x48>
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d107      	bne.n	8000afc <lfs_pair_issync+0x26>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3304      	adds	r3, #4
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	3304      	adds	r3, #4
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d00d      	beq.n	8000b18 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3304      	adds	r3, #4
 8000b04:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d108      	bne.n	8000b1c <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d101      	bne.n	8000b1c <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e000      	b.n	8000b1e <lfs_pair_issync+0x48>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	b2db      	uxtb	r3, r3
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8000b2e:	b590      	push	{r4, r7, lr}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fb9c 	bl	8000278 <lfs_fromle32>
 8000b40:	4602      	mov	r2, r0
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	1d1c      	adds	r4, r3, #4
 8000b50:	4610      	mov	r0, r2
 8000b52:	f7ff fb91 	bl	8000278 <lfs_fromle32>
 8000b56:	4603      	mov	r3, r0
 8000b58:	6023      	str	r3, [r4, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}

08000b62 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8000b62:	b590      	push	{r4, r7, lr}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fb8c 	bl	800028c <lfs_tole32>
 8000b74:	4602      	mov	r2, r0
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1d1c      	adds	r4, r3, #4
 8000b84:	4610      	mov	r0, r2
 8000b86:	f7ff fb81 	bl	800028c <lfs_tole32>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6023      	str	r3, [r4, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}

08000b96 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	0fdb      	lsrs	r3, r3, #31
 8000ba4:	b2db      	uxtb	r3, r3
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	059b      	lsls	r3, r3, #22
 8000bbc:	159b      	asrs	r3, r3, #22
 8000bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc2:	bf0c      	ite	eq
 8000bc4:	2301      	moveq	r3, #1
 8000bc6:	2300      	movne	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	0d1b      	lsrs	r3, r3, #20
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000be6:	b29b      	uxth	r3, r3
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	0d1b      	lsrs	r3, r3, #20
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8000c04:	b29b      	uxth	r3, r3
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	0d1b      	lsrs	r3, r3, #20
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c22:	b29b      	uxth	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	0d1b      	lsrs	r3, r3, #20
 8000c3a:	b2db      	uxtb	r3, r3
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffed 	bl	8000c2e <lfs_tag_chunk>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b25b      	sxtb	r3, r3
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	0a9b      	lsrs	r3, r3, #10
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c72:	b29b      	uxth	r3, r3
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff86 	bl	8000bb0 <lfs_tag_isdelete>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ffe6 	bl	8000c7e <lfs_tag_size>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	3304      	adds	r3, #4
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	e012      	b.n	8000cf4 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	4403      	add	r3, r0
 8000cea:	404a      	eors	r2, r1
 8000cec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	dde9      	ble.n	8000cce <lfs_gstate_xor+0x10>
    }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e00b      	b.n	8000d2c <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <lfs_gstate_iszero+0x20>
            return false;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e006      	b.n	8000d34 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	ddf0      	ble.n	8000d14 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff97 	bl	8000c7e <lfs_tag_size>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf14      	ite	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	2300      	moveq	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff84 	bl	8000c7e <lfs_tag_size>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b2db      	uxtb	r3, r3
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff20 	bl	8000bd4 <lfs_tag_type1>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff62 	bl	8000c7e <lfs_tag_size>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	0a5b      	lsrs	r3, r3, #9
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf14      	ite	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	2300      	moveq	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fef8 	bl	8000bd4 <lfs_tag_type1>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00a      	beq.n	8000e00 <lfs_gstate_hasmovehere+0x30>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3304      	adds	r3, #4
 8000dee:	6839      	ldr	r1, [r7, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fe47 	bl	8000a84 <lfs_pair_cmp>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <lfs_gstate_hasmovehere+0x30>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <lfs_gstate_hasmovehere+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fa2b 	bl	8000278 <lfs_fromle32>
 8000e22:	4602      	mov	r2, r0
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fa23 	bl	8000278 <lfs_fromle32>
 8000e32:	4602      	mov	r2, r0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fa1b 	bl	8000278 <lfs_fromle32>
 8000e42:	4602      	mov	r2, r0
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	609a      	str	r2, [r3, #8]
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fa15 	bl	800028c <lfs_tole32>
 8000e62:	4602      	mov	r2, r0
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fa0d 	bl	800028c <lfs_tole32>
 8000e72:	4602      	mov	r2, r0
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fa05 	bl	800028c <lfs_tole32>
 8000e82:	4602      	mov	r2, r0
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	609a      	str	r2, [r3, #8]
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff f9eb 	bl	8000278 <lfs_fromle32>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff f9e3 	bl	8000278 <lfs_fromle32>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	605a      	str	r2, [r3, #4]
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff f9dd 	bl	800028c <lfs_tole32>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff f9d5 	bl	800028c <lfs_tole32>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	605a      	str	r2, [r3, #4]
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff f9bb 	bl	8000278 <lfs_fromle32>
 8000f02:	4602      	mov	r2, r0
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f9b3 	bl	8000278 <lfs_fromle32>
 8000f12:	4602      	mov	r2, r0
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	605a      	str	r2, [r3, #4]
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f9ad 	bl	800028c <lfs_tole32>
 8000f32:	4602      	mov	r2, r0
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f9a5 	bl	800028c <lfs_tole32>
 8000f42:	4602      	mov	r2, r0
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	605a      	str	r2, [r3, #4]
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f98b 	bl	8000278 <lfs_fromle32>
 8000f62:	4602      	mov	r2, r0
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f983 	bl	8000278 <lfs_fromle32>
 8000f72:	4602      	mov	r2, r0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff f97b 	bl	8000278 <lfs_fromle32>
 8000f82:	4602      	mov	r2, r0
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f973 	bl	8000278 <lfs_fromle32>
 8000f92:	4602      	mov	r2, r0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f96b 	bl	8000278 <lfs_fromle32>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f963 	bl	8000278 <lfs_fromle32>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	615a      	str	r2, [r3, #20]
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f95d 	bl	800028c <lfs_tole32>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f955 	bl	800028c <lfs_tole32>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f94d 	bl	800028c <lfs_tole32>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff f945 	bl	800028c <lfs_tole32>
 8001002:	4602      	mov	r2, r0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f93d 	bl	800028c <lfs_tole32>
 8001012:	4602      	mov	r2, r0
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f935 	bl	800028c <lfs_tole32>
 8001022:	4602      	mov	r2, r0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	615a      	str	r2, [r3, #20]
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e009      	b.n	8001054 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d101      	bne.n	800104e <lfs_mlist_isopen+0x1e>
            return true;
 800104a:	2301      	movs	r3, #1
 800104c:	e007      	b.n	800105e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f1      	bne.n	8001040 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3328      	adds	r3, #40	; 0x28
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e00d      	b.n	8001096 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d105      	bne.n	8001090 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	601a      	str	r2, [r3, #0]
            break;
 800108e:	e007      	b.n	80010a0 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1ed      	bne.n	800107a <lfs_mlist_remove+0x12>
        }
    }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 80010d4:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <lfs_fs_disk_version+0x14>)
    }
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	00020001 	.word	0x00020001

080010e4 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffed 	bl	80010cc <lfs_fs_disk_version>
 80010f2:	4603      	mov	r3, r0
 80010f4:	0c1b      	lsrs	r3, r3, #16
 80010f6:	b29b      	uxth	r3, r3

}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ffdf 	bl	80010cc <lfs_fs_disk_version>
 800110e:	4603      	mov	r3, r0
 8001110:	b29b      	uxth	r3, r3
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	661a      	str	r2, [r3, #96]	; 0x60
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->lookahead.next = 0;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ckpoint(lfs);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffe6 	bl	800111a <lfs_alloc_ckpoint>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001170:	4413      	add	r3, r2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8001176:	fbb3 f1f2 	udiv	r1, r3, r2
 800117a:	fb02 f201 	mul.w	r2, r2, r1
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	429a      	cmp	r2, r3
 800118a:	d212      	bcs.n	80011b2 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	441a      	add	r2, r3
 8001196:	7811      	ldrb	r1, [r2, #0]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	f002 0207 	and.w	r2, r2, #7
 800119e:	2001      	movs	r0, #1
 80011a0:	fa00 f202 	lsl.w	r2, r0, r2
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80011aa:	4403      	add	r3, r0
 80011ac:	430a      	orrs	r2, r1
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
	...

080011c0 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	4413      	add	r3, r2
            % lfs->block_count;
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80011d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80011da:	fb02 f201 	mul.w	r2, r2, r1
 80011de:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->lookahead.next = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    lfs->lookahead.size = lfs_min(
 80011f0:	00da      	lsls	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f6:	4619      	mov	r1, r3
 80011f8:	4610      	mov	r0, r2
 80011fa:	f7fe ffd2 	bl	80001a2 <lfs_min>
 80011fe:	4602      	mov	r2, r0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	659a      	str	r2, [r3, #88]	; 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	461a      	mov	r2, r3
 8001210:	2100      	movs	r1, #0
 8001212:	f008 fce1 	bl	8009bd8 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 8001216:	2301      	movs	r3, #1
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4909      	ldr	r1, [pc, #36]	; (8001240 <lfs_alloc_scan+0x80>)
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f004 ff1f 	bl	8006060 <lfs_fs_traverse_>
 8001222:	60f8      	str	r0, [r7, #12]
    if (err) {
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d004      	beq.n	8001234 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff82 	bl	8001134 <lfs_alloc_drop>
        return err;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	e000      	b.n	8001236 <lfs_alloc_scan+0x76>
    }

    return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	08001157 	.word	0x08001157

08001244 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800124e:	e04d      	b.n	80012ec <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d131      	bne.n	80012d8 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127c:	4413      	add	r3, r2
                        % lfs->block_count;
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001282:	fbb3 f1f2 	udiv	r1, r3, r2
 8001286:	fb02 f201 	mul.w	r2, r2, r1
 800128a:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	661a      	str	r2, [r3, #96]	; 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d211      	bcs.n	80012d4 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c4:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80012c8:	fa22 f303 	lsr.w	r3, r2, r3
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1dd      	bne.n	8001290 <lfs_alloc+0x4c>
                        return 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e032      	b.n	800133e <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->lookahead.ckpoint -= 1;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	661a      	str	r2, [r3, #96]	; 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d3ab      	bcc.n	8001250 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d116      	bne.n	800132e <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001308:	4413      	add	r3, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800130e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001312:	fb02 f201 	mul.w	r2, r2, r1
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <lfs_alloc+0x104>)
 800131a:	9200      	str	r2, [sp, #0]
 800131c:	f240 22ba 	movw	r2, #698	; 0x2ba
 8001320:	490a      	ldr	r1, [pc, #40]	; (800134c <lfs_alloc+0x108>)
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <lfs_alloc+0x10c>)
 8001324:	f006 f924 	bl	8007570 <myprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 8001328:	f06f 031b 	mvn.w	r3, #27
 800132c:	e007      	b.n	800133e <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff46 	bl	80011c0 <lfs_alloc_scan>
 8001334:	60f8      	str	r0, [r7, #12]
        if(err) {
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d088      	beq.n	800124e <lfs_alloc+0xa>
            return err;
 800133c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	0800b07c 	.word	0x0800b07c
 800134c:	0800af70 	.word	0x0800af70
 8001350:	0800b050 	.word	0x0800b050

08001354 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b08f      	sub	sp, #60	; 0x3c
 8001358:	af04      	add	r7, sp, #16
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	333c      	adds	r3, #60	; 0x3c
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fd28 	bl	8000dd0 <lfs_gstate_hasmovehere>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80c9 	beq.w	800151a <lfs_dir_getslice+0x1c6>
            lfs_tag_id(gmask) != 0) {
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fc69 	bl	8000c60 <lfs_tag_id>
 800138e:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80c2 	beq.w	800151a <lfs_dir_getslice+0x1c6>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fc60 	bl	8000c60 <lfs_tag_id>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461c      	mov	r4, r3
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	f7ff fc5b 	bl	8000c60 <lfs_tag_id>
 80013aa:	4603      	mov	r3, r0
 80013ac:	429c      	cmp	r4, r3
 80013ae:	d102      	bne.n	80013b6 <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 80013b0:	f06f 0301 	mvn.w	r3, #1
 80013b4:	e0bd      	b.n	8001532 <lfs_dir_getslice+0x1de>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc50 	bl	8000c60 <lfs_tag_id>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461c      	mov	r4, r3
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f7ff fc4b 	bl	8000c60 <lfs_tag_id>
 80013ca:	4603      	mov	r3, r0
 80013cc:	429c      	cmp	r4, r3
 80013ce:	f080 80a4 	bcs.w	800151a <lfs_dir_getslice+0x1c6>
            gdiff -= LFS_MKTAG(0, 1, 0);
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80013d8:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80013da:	e09e      	b.n	800151a <lfs_dir_getslice+0x1c6>
        off -= lfs_tag_dsize(ntag);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fc59 	bl	8000c96 <lfs_tag_dsize>
 80013e4:	4602      	mov	r2, r0
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 80013f0:	68f9      	ldr	r1, [r7, #12]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2204      	movs	r2, #4
 80013f8:	9203      	str	r2, [sp, #12]
 80013fa:	f107 0210 	add.w	r2, r7, #16
 80013fe:	9202      	str	r2, [sp, #8]
 8001400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001402:	9201      	str	r2, [sp, #4]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2304      	movs	r3, #4
 8001408:	460a      	mov	r2, r1
 800140a:	2100      	movs	r1, #0
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f7fe ff9b 	bl	8000348 <lfs_bd_read>
 8001412:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <lfs_dir_getslice+0xca>
            return err;
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	e089      	b.n	8001532 <lfs_dir_getslice+0x1de>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe ff3f 	bl	80002a4 <lfs_frombe32>
 8001426:	4602      	mov	r2, r0
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	4053      	eors	r3, r2
 800142c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001430:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fc14 	bl	8000c60 <lfs_tag_id>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d02b      	beq.n	8001496 <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800143e:	69f8      	ldr	r0, [r7, #28]
 8001440:	f7ff fbc8 	bl	8000bd4 <lfs_tag_type1>
 8001444:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800144a:	d124      	bne.n	8001496 <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800144c:	69f8      	ldr	r0, [r7, #28]
 800144e:	f7ff fc07 	bl	8000c60 <lfs_tag_id>
 8001452:	4603      	mov	r3, r0
 8001454:	461c      	mov	r4, r3
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fbff 	bl	8000c60 <lfs_tag_id>
 8001462:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001464:	429c      	cmp	r4, r3
 8001466:	d816      	bhi.n	8001496 <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	1ad2      	subs	r2, r2, r3
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <lfs_dir_getslice+0x1e8>)
 8001470:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001472:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	d102      	bne.n	8001486 <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 8001480:	f06f 0301 	mvn.w	r3, #1
 8001484:	e055      	b.n	8001532 <lfs_dir_getslice+0x1de>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001486:	69f8      	ldr	r0, [r7, #28]
 8001488:	f7ff fbdd 	bl	8000c46 <lfs_tag_splice>
 800148c:	4603      	mov	r3, r0
 800148e:	029a      	lsls	r2, r3, #10
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	4413      	add	r3, r2
 8001494:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	1ad2      	subs	r2, r2, r3
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	405a      	eors	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d138      	bne.n	800151a <lfs_dir_getslice+0x1c6>
            if (lfs_tag_isdelete(tag)) {
 80014a8:	69f8      	ldr	r0, [r7, #28]
 80014aa:	f7ff fb81 	bl	8000bb0 <lfs_tag_isdelete>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <lfs_dir_getslice+0x166>
                return LFS_ERR_NOENT;
 80014b4:	f06f 0301 	mvn.w	r3, #1
 80014b8:	e03b      	b.n	8001532 <lfs_dir_getslice+0x1de>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 80014ba:	69f8      	ldr	r0, [r7, #28]
 80014bc:	f7ff fbdf 	bl	8000c7e <lfs_tag_size>
 80014c0:	4603      	mov	r3, r0
 80014c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fe6c 	bl	80001a2 <lfs_min>
 80014ca:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80014d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014d6:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 80014d8:	3204      	adds	r2, #4
 80014da:	6979      	ldr	r1, [r7, #20]
 80014dc:	9103      	str	r1, [sp, #12]
 80014de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80014e0:	9102      	str	r1, [sp, #8]
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4602      	mov	r2, r0
 80014ea:	2100      	movs	r1, #0
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7fe ff2b 	bl	8000348 <lfs_bd_read>
 80014f2:	61b8      	str	r0, [r7, #24]
            if (err) {
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <lfs_dir_getslice+0x1aa>
                return err;
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	e019      	b.n	8001532 <lfs_dir_getslice+0x1de>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 80014fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	18d0      	adds	r0, r2, r3
 8001504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	461a      	mov	r2, r3
 800150c:	2100      	movs	r1, #0
 800150e:	f008 fb63 	bl	8009bd8 <memset>

            return tag + gdiff;
 8001512:	6a3a      	ldr	r2, [r7, #32]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	e00b      	b.n	8001532 <lfs_dir_getslice+0x1de>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fbba 	bl	8000c96 <lfs_tag_dsize>
 8001522:	4603      	mov	r3, r0
 8001524:	3304      	adds	r3, #4
 8001526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001528:	429a      	cmp	r2, r3
 800152a:	f4bf af57 	bcs.w	80013dc <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 800152e:	f06f 0301 	mvn.w	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	372c      	adds	r7, #44	; 0x2c
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	000ffc00 	.word	0x000ffc00

08001540 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af04      	add	r7, sp, #16
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800154e:	6838      	ldr	r0, [r7, #0]
 8001550:	f7ff fb95 	bl	8000c7e <lfs_tag_size>
 8001554:	4603      	mov	r3, r0
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	2300      	movs	r3, #0
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff fef4 	bl	8001354 <lfs_dir_getslice>
 800156c:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001576:	b580      	push	{r7, lr}
 8001578:	b08c      	sub	sp, #48	; 0x30
 800157a:	af04      	add	r7, sp, #16
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001586:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800158a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158c:	441a      	add	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	429a      	cmp	r2, r3
 8001596:	f240 80c0 	bls.w	800171a <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800159a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800159e:	e0c1      	b.n	8001724 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80015a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015a2:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d03f      	beq.n	800162a <lfs_dir_getread+0xb4>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f113 0f02 	cmn.w	r3, #2
 80015b2:	d13a      	bne.n	800162a <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80015be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d232      	bcs.n	800162a <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d324      	bcc.n	8001618 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6859      	ldr	r1, [r3, #4]
 80015d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d8:	1acb      	subs	r3, r1, r3
 80015da:	4413      	add	r3, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	69b8      	ldr	r0, [r7, #24]
 80015e0:	f7fe fddf 	bl	80001a2 <lfs_min>
 80015e4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015f0:	1acb      	subs	r3, r1, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4619      	mov	r1, r3
 80015f8:	69f8      	ldr	r0, [r7, #28]
 80015fa:	f008 fadf 	bl	8009bbc <memcpy>

                data += diff;
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	4413      	add	r3, r2
 8001604:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	4413      	add	r3, r2
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800160e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001616:	e080      	b.n	800171a <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4619      	mov	r1, r3
 8001622:	69b8      	ldr	r0, [r7, #24]
 8001624:	f7fe fdbd 	bl	80001a2 <lfs_min>
 8001628:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f113 0f02 	cmn.w	r3, #2
 8001632:	d13a      	bne.n	80016aa <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800163e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001640:	429a      	cmp	r2, r3
 8001642:	d232      	bcs.n	80016aa <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800164a:	429a      	cmp	r2, r3
 800164c:	d324      	bcc.n	8001698 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	6859      	ldr	r1, [r3, #4]
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	1acb      	subs	r3, r1, r3
 800165a:	4413      	add	r3, r2
 800165c:	4619      	mov	r1, r3
 800165e:	69b8      	ldr	r0, [r7, #24]
 8001660:	f7fe fd9f 	bl	80001a2 <lfs_min>
 8001664:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001670:	1acb      	subs	r3, r1, r3
 8001672:	4413      	add	r3, r2
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4619      	mov	r1, r3
 8001678:	69f8      	ldr	r0, [r7, #28]
 800167a:	f008 fa9f 	bl	8009bbc <memcpy>

                data += diff;
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	4413      	add	r3, r2
 8001684:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	4413      	add	r3, r2
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800168e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001696:	e040      	b.n	800171a <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	69b8      	ldr	r0, [r7, #24]
 80016a4:	f7fe fd7d 	bl	80001a2 <lfs_min>
 80016a8:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f06f 0201 	mvn.w	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	4619      	mov	r1, r3
 80016ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016bc:	f7fe fd80 	bl	80001c0 <lfs_aligndown>
 80016c0:	4602      	mov	r2, r0
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80016c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	441a      	add	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	4619      	mov	r1, r3
 80016d4:	4610      	mov	r0, r2
 80016d6:	f7fe fd87 	bl	80001e8 <lfs_alignup>
 80016da:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f7fe fd5c 	bl	80001a2 <lfs_min>
 80016ea:	4602      	mov	r2, r0
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 80016f8:	6839      	ldr	r1, [r7, #0]
 80016fa:	6889      	ldr	r1, [r1, #8]
 80016fc:	9102      	str	r1, [sp, #8]
 80016fe:	9201      	str	r2, [sp, #4]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff fe23 	bl	8001354 <lfs_dir_getslice>
 800170e:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	da01      	bge.n	800171a <lfs_dir_getread+0x1a4>
            return err;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	e004      	b.n	8001724 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800171a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800171c:	2b00      	cmp	r3, #0
 800171e:	f47f af3f 	bne.w	80015a0 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <lfs_dir_traverse_filter+0x1e>
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <lfs_dir_traverse_filter+0xac>)
 8001748:	e000      	b.n	800174c <lfs_dir_traverse_filter+0x20>
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800174c:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	405a      	eors	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d014      	beq.n	8001788 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fa24 	bl	8000bb0 <lfs_tag_isdelete>
 8001768:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <lfs_dir_traverse_filter+0xac>)
 8001772:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <lfs_dir_traverse_filter+0xb4>)
 800177a:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800177c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8001780:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d104      	bne.n	8001792 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
        return true;
 800178e:	2301      	movs	r3, #1
 8001790:	e01e      	b.n	80017d0 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001792:	68b8      	ldr	r0, [r7, #8]
 8001794:	f7ff fa1e 	bl	8000bd4 <lfs_tag_type1>
 8001798:	4603      	mov	r3, r0
 800179a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179e:	d116      	bne.n	80017ce <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 80017a0:	68b8      	ldr	r0, [r7, #8]
 80017a2:	f7ff fa5d 	bl	8000c60 <lfs_tag_id>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461c      	mov	r4, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fa56 	bl	8000c60 <lfs_tag_id>
 80017b4:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80017b6:	429c      	cmp	r4, r3
 80017b8:	d809      	bhi.n	80017ce <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80017ba:	68b8      	ldr	r0, [r7, #8]
 80017bc:	f7ff fa43 	bl	8000c46 <lfs_tag_splice>
 80017c0:	4603      	mov	r3, r0
 80017c2:	029a      	lsls	r2, r3, #10
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	441a      	add	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	601a      	str	r2, [r3, #0]
    }

    return false;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	7ffffc00 	.word	0x7ffffc00
 80017dc:	700ffc00 	.word	0x700ffc00
 80017e0:	000ffc00 	.word	0x000ffc00

080017e4 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b0c1      	sub	sp, #260	; 0x104
 80017e8:	af04      	add	r7, sp, #16
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 80017f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001802:	6838      	ldr	r0, [r7, #0]
 8001804:	f7ff fa47 	bl	8000c96 <lfs_tag_dsize>
 8001808:	4602      	mov	r2, r0
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	441a      	add	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	429a      	cmp	r2, r3
 8001814:	d237      	bcs.n	8001886 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8001816:	6838      	ldr	r0, [r7, #0]
 8001818:	f7ff fa3d 	bl	8000c96 <lfs_tag_dsize>
 800181c:	4602      	mov	r2, r0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001824:	68f9      	ldr	r1, [r7, #12]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2204      	movs	r2, #4
 800182c:	9203      	str	r2, [sp, #12]
 800182e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001832:	9202      	str	r2, [sp, #8]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	9201      	str	r2, [sp, #4]
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2304      	movs	r3, #4
 800183c:	460a      	mov	r2, r1
 800183e:	2100      	movs	r1, #0
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f7fe fd81 	bl	8000348 <lfs_bd_read>
 8001846:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 800184a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <lfs_dir_traverse+0x74>
                    return err;
 8001852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001856:	e3d0      	b.n	8001ffa <lfs_dir_traverse+0x816>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fd22 	bl	80002a4 <lfs_frombe32>
 8001860:	4602      	mov	r2, r0
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	4053      	eors	r3, r2
 8001866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800186a:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3304      	adds	r3, #4
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8001878:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800187c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8001880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	e01b      	b.n	80018be <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8001886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800188a:	2b00      	cmp	r3, #0
 800188c:	dd13      	ble.n	80018b6 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800188e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8001896:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 80018a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80018a4:	3308      	adds	r3, #8
 80018a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 80018aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018b4:	e003      	b.n	80018be <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 80018bc:	e2bd      	b.n	8001e3a <lfs_dir_traverse+0x656>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 80018be:	4b86      	ldr	r3, [pc, #536]	; (8001ad8 <lfs_dir_traverse+0x2f4>)
 80018c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 80018c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018ca:	405a      	eors	r2, r3
 80018cc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80018d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018d4:	400b      	ands	r3, r1
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f040 82a1 	bne.w	8001e20 <lfs_dir_traverse+0x63c>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 80018de:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80018e2:	f7ff f9bd 	bl	8000c60 <lfs_tag_id>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80ff 	beq.w	8001aec <lfs_dir_traverse+0x308>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 80018ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d906      	bls.n	8001904 <lfs_dir_traverse+0x120>
 80018f6:	4b79      	ldr	r3, [pc, #484]	; (8001adc <lfs_dir_traverse+0x2f8>)
 80018f8:	4a79      	ldr	r2, [pc, #484]	; (8001ae0 <lfs_dir_traverse+0x2fc>)
 80018fa:	f240 31bf 	movw	r1, #959	; 0x3bf
 80018fe:	4879      	ldr	r0, [pc, #484]	; (8001ae4 <lfs_dir_traverse+0x300>)
 8001900:	f008 f8e4 	bl	8009acc <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8001904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001906:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800190a:	4613      	mov	r3, r2
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001916:	4413      	add	r3, r2
 8001918:	3b98      	subs	r3, #152	; 0x98
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001922:	4613      	mov	r3, r2
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800192e:	4413      	add	r3, r2
 8001930:	3b94      	subs	r3, #148	; 0x94
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800193a:	4613      	mov	r3, r2
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001946:	4413      	add	r3, r2
 8001948:	3b90      	subs	r3, #144	; 0x90
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800195e:	4413      	add	r3, r2
 8001960:	3b8c      	subs	r3, #140	; 0x8c
 8001962:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001978:	4413      	add	r3, r2
 800197a:	3b88      	subs	r3, #136	; 0x88
 800197c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001986:	4613      	mov	r3, r2
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001992:	4413      	add	r3, r2
 8001994:	3b84      	subs	r3, #132	; 0x84
 8001996:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80019ac:	4413      	add	r3, r2
 80019ae:	3b80      	subs	r3, #128	; 0x80
 80019b0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80019c6:	4413      	add	r3, r2
 80019c8:	3b7c      	subs	r3, #124	; 0x7c
 80019ca:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80019ce:	801a      	strh	r2, [r3, #0]
 80019d0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80019d4:	4613      	mov	r3, r2
 80019d6:	011b      	lsls	r3, r3, #4
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80019e0:	4413      	add	r3, r2
 80019e2:	3b7a      	subs	r3, #122	; 0x7a
 80019e4:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80019ee:	4613      	mov	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80019fa:	4413      	add	r3, r2
 80019fc:	3b78      	subs	r3, #120	; 0x78
 80019fe:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8001a02:	801a      	strh	r2, [r3, #0]
 8001a04:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001a14:	4413      	add	r3, r2
 8001a16:	3b74      	subs	r3, #116	; 0x74
 8001a18:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001a22:	4613      	mov	r3, r2
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	1a9b      	subs	r3, r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b70      	subs	r3, #112	; 0x70
 8001a32:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b6c      	subs	r3, #108	; 0x6c
 8001a4c:	6019      	str	r1, [r3, #0]
 8001a4e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001a52:	4613      	mov	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b68      	subs	r3, #104	; 0x68
 8001a62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001a78:	4413      	add	r3, r2
 8001a7a:	3b68      	subs	r3, #104	; 0x68
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a86:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8001a8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <lfs_dir_traverse+0x304>)
 8001ab4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8001ab8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001abc:	1e5a      	subs	r2, r3, #1
 8001abe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	3328      	adds	r3, #40	; 0x28
 8001acc:	440b      	add	r3, r1
 8001ace:	3304      	adds	r3, #4
 8001ad0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ad4:	e695      	b.n	8001802 <lfs_dir_traverse+0x1e>
 8001ad6:	bf00      	nop
 8001ad8:	7ff00000 	.word	0x7ff00000
 8001adc:	0800b080 	.word	0x0800b080
 8001ae0:	0800c880 	.word	0x0800c880
 8001ae4:	0800af70 	.word	0x0800af70
 8001ae8:	0800172d 	.word	0x0800172d
                continue;
            }
        }

popped:
 8001aec:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8001aee:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001af2:	f7ff f8b5 	bl	8000c60 <lfs_tag_id>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d015      	beq.n	8001b28 <lfs_dir_traverse+0x344>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f8ae 	bl	8000c60 <lfs_tag_id>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8001b08:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	f200 8189 	bhi.w	8001e24 <lfs_dir_traverse+0x640>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f8a3 	bl	8000c60 <lfs_tag_id>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001b22:	4293      	cmp	r3, r2
 8001b24:	f240 817e 	bls.w	8001e24 <lfs_dir_traverse+0x640>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8001b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f870 	bl	8000c10 <lfs_tag_type3>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f43f ae65 	beq.w	8001802 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8001b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f868 	bl	8000c10 <lfs_tag_type3>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	f240 1301 	movw	r3, #257	; 0x101
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 80ed 	bne.w	8001d28 <lfs_dir_traverse+0x544>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8001b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001b52:	4ab7      	ldr	r2, [pc, #732]	; (8001e30 <lfs_dir_traverse+0x64c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	f000 8167 	beq.w	8001e28 <lfs_dir_traverse+0x644>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8001b5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001b5e:	4613      	mov	r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b98      	subs	r3, #152	; 0x98
 8001b6e:	4618      	mov	r0, r3
 8001b70:	233c      	movs	r3, #60	; 0x3c
 8001b72:	461a      	mov	r2, r3
 8001b74:	2100      	movs	r1, #0
 8001b76:	f008 f82f 	bl	8009bd8 <memset>
 8001b7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001b7e:	4613      	mov	r3, r2
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b98      	subs	r3, #152	; 0x98
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001b96:	4613      	mov	r3, r2
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b94      	subs	r3, #148	; 0x94
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001bae:	4613      	mov	r3, r2
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b90      	subs	r3, #144	; 0x90
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b8c      	subs	r3, #140	; 0x8c
 8001bd6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001bec:	4413      	add	r3, r2
 8001bee:	3b88      	subs	r3, #136	; 0x88
 8001bf0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001c06:	4413      	add	r3, r2
 8001c08:	3b84      	subs	r3, #132	; 0x84
 8001c0a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c14:	4613      	mov	r3, r2
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001c20:	4413      	add	r3, r2
 8001c22:	3b80      	subs	r3, #128	; 0x80
 8001c24:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c2e:	4613      	mov	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b7c      	subs	r3, #124	; 0x7c
 8001c3e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8001c42:	801a      	strh	r2, [r3, #0]
 8001c44:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c48:	4613      	mov	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001c54:	4413      	add	r3, r2
 8001c56:	3b7a      	subs	r3, #122	; 0x7a
 8001c58:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c62:	4613      	mov	r3, r2
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b78      	subs	r3, #120	; 0x78
 8001c72:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8001c76:	801a      	strh	r2, [r3, #0]
 8001c78:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b74      	subs	r3, #116	; 0x74
 8001c8c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001c96:	4613      	mov	r3, r2
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b70      	subs	r3, #112	; 0x70
 8001ca6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001caa:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8001cac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe ffe0 	bl	8000c7e <lfs_tag_size>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe ffca 	bl	8000c60 <lfs_tag_id>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8001cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cd6:	60bb      	str	r3, [r7, #8]
            off = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8001cee:	4b51      	ldr	r3, [pc, #324]	; (8001e34 <lfs_dir_traverse+0x650>)
 8001cf0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8001cf4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cf8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8001cfc:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001d00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8001d04:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8001d0e:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8001d12:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8001d1e:	4413      	add	r3, r2
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8001d26:	e56c      	b.n	8001802 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ff70 	bl	8000c10 <lfs_tag_type3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001d36:	d159      	bne.n	8001dec <lfs_dir_traverse+0x608>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d3e:	e04b      	b.n	8001dd8 <lfs_dir_traverse+0x5f4>
                const struct lfs_attr *a = buffer;
 8001d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8001d48:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	461a      	mov	r2, r3
 8001d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d62:	051c      	lsls	r4, r3, #20
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ff7a 	bl	8000c60 <lfs_tag_id>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8001d74:	4413      	add	r3, r2
 8001d76:	029b      	lsls	r3, r3, #10
 8001d78:	ea44 0103 	orr.w	r1, r4, r3
 8001d7c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d8e:	4413      	add	r3, r2
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8001d94:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	461a      	mov	r2, r3
 8001da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001da6:	4413      	add	r3, r2
 8001da8:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8001daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001dae:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001db2:	4798      	blx	r3
 8001db4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8001db8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	da02      	bge.n	8001dc6 <lfs_dir_traverse+0x5e2>
                    return res;
 8001dc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001dc4:	e119      	b.n	8001ffa <lfs_dir_traverse+0x816>
                }

                if (res) {
 8001dc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d12e      	bne.n	8001e2c <lfs_dir_traverse+0x648>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8001dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe ff4f 	bl	8000c7e <lfs_tag_size>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d3aa      	bcc.n	8001d40 <lfs_dir_traverse+0x55c>
 8001dea:	e50a      	b.n	8001802 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8001dec:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8001df0:	029a      	lsls	r2, r3, #10
 8001df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df4:	18d1      	adds	r1, r2, r3
 8001df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001dfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001dfe:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001e02:	4798      	blx	r3
 8001e04:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8001e08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	da02      	bge.n	8001e16 <lfs_dir_traverse+0x632>
                return res;
 8001e10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e14:	e0f1      	b.n	8001ffa <lfs_dir_traverse+0x816>
            }

            if (res) {
 8001e16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <lfs_dir_traverse+0x654>
 8001e1e:	e4f0      	b.n	8001802 <lfs_dir_traverse+0x1e>
                continue;
 8001e20:	bf00      	nop
 8001e22:	e4ee      	b.n	8001802 <lfs_dir_traverse+0x1e>
            continue;
 8001e24:	bf00      	nop
 8001e26:	e4ec      	b.n	8001802 <lfs_dir_traverse+0x1e>
                continue;
 8001e28:	bf00      	nop
 8001e2a:	e4ea      	b.n	8001802 <lfs_dir_traverse+0x1e>
                    break;
 8001e2c:	bf00      	nop
        {
 8001e2e:	e4e8      	b.n	8001802 <lfs_dir_traverse+0x1e>
 8001e30:	0800172d 	.word	0x0800172d
 8001e34:	600ffc00 	.word	0x600ffc00
                break;
 8001e38:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8001e3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 80d9 	beq.w	8001ff6 <lfs_dir_traverse+0x812>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8001e44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e48:	1e5a      	subs	r2, r3, #1
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e56:	4413      	add	r3, r2
 8001e58:	3b98      	subs	r3, #152	; 0x98
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8001e5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e62:	1e5a      	subs	r2, r3, #1
 8001e64:	4613      	mov	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e70:	4413      	add	r3, r2
 8001e72:	3b94      	subs	r3, #148	; 0x94
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8001e78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b90      	subs	r3, #144	; 0x90
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8001e92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e96:	1e5a      	subs	r2, r3, #1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b8c      	subs	r3, #140	; 0x8c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8001eae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3b88      	subs	r3, #136	; 0x88
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8001eca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ece:	1e5a      	subs	r2, r3, #1
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001edc:	4413      	add	r3, r2
 8001ede:	3b84      	subs	r3, #132	; 0x84
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8001ee6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b80      	subs	r3, #128	; 0x80
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8001f02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f06:	1e5a      	subs	r2, r3, #1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f14:	4413      	add	r3, r2
 8001f16:	3b7c      	subs	r3, #124	; 0x7c
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8001f1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f22:	1e5a      	subs	r2, r3, #1
 8001f24:	4613      	mov	r3, r2
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f30:	4413      	add	r3, r2
 8001f32:	3b7a      	subs	r3, #122	; 0x7a
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8001f3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f3e:	1e5a      	subs	r2, r3, #1
 8001f40:	4613      	mov	r3, r2
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3b78      	subs	r3, #120	; 0x78
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8001f56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f5a:	1e5a      	subs	r2, r3, #1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b74      	subs	r3, #116	; 0x74
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8001f72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f76:	1e5a      	subs	r2, r3, #1
 8001f78:	4613      	mov	r3, r2
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f84:	4413      	add	r3, r2
 8001f86:	3b70      	subs	r3, #112	; 0x70
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8001f8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f92:	1e5a      	subs	r2, r3, #1
 8001f94:	4613      	mov	r3, r2
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b6c      	subs	r3, #108	; 0x6c
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8001fa8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001fac:	1e5a      	subs	r2, r3, #1
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b68      	subs	r3, #104	; 0x68
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8001fc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001fc8:	1e5a      	subs	r2, r3, #1
 8001fca:	4613      	mov	r3, r2
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8001fdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fe0:	3204      	adds	r2, #4
 8001fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fe6:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8001fea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8001ff4:	e57b      	b.n	8001aee <lfs_dir_traverse+0x30a>
    } else {
        return res;
 8001ff6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	37f4      	adds	r7, #244	; 0xf4
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd90      	pop	{r4, r7, pc}
 8002002:	bf00      	nop

08002004 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	b0a5      	sub	sp, #148	; 0x94
 8002008:	af04      	add	r7, sp, #16
 800200a:	6178      	str	r0, [r7, #20]
 800200c:	6139      	str	r1, [r7, #16]
 800200e:	60fa      	str	r2, [r7, #12]
 8002010:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00f      	beq.n	8002040 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002028:	429a      	cmp	r2, r3
 800202a:	d206      	bcs.n	800203a <lfs_dir_fetchmatch+0x36>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3304      	adds	r3, #4
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002036:	429a      	cmp	r2, r3
 8002038:	d302      	bcc.n	8002040 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800203a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800203e:	e39d      	b.n	800277c <lfs_dir_fetchmatch+0x778>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002040:	2300      	movs	r3, #0
 8002042:	647b      	str	r3, [r7, #68]	; 0x44
 8002044:	2300      	movs	r3, #0
 8002046:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 800204c:	2300      	movs	r3, #0
 800204e:	677b      	str	r3, [r7, #116]	; 0x74
 8002050:	e056      	b.n	8002100 <lfs_dir_fetchmatch+0xfc>
        int err = lfs_bd_read(lfs,
 8002052:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800205c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800205e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002062:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8002068:	2104      	movs	r1, #4
 800206a:	9103      	str	r1, [sp, #12]
 800206c:	9202      	str	r2, [sp, #8]
 800206e:	2200      	movs	r2, #0
 8002070:	9201      	str	r2, [sp, #4]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2304      	movs	r3, #4
 8002076:	4602      	mov	r2, r0
 8002078:	2100      	movs	r1, #0
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7fe f964 	bl	8000348 <lfs_bd_read>
 8002080:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8002082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800208a:	4413      	add	r3, r2
 800208c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f8f1 	bl	8000278 <lfs_fromle32>
 8002096:	4602      	mov	r2, r0
 8002098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80020a0:	440b      	add	r3, r1
 80020a2:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 80020a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <lfs_dir_fetchmatch+0xb4>
 80020ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80020b2:	d001      	beq.n	80020b8 <lfs_dir_fetchmatch+0xb4>
            return err;
 80020b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b6:	e361      	b.n	800277c <lfs_dir_fetchmatch+0x778>
        }

        if (err != LFS_ERR_CORRUPT &&
 80020b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80020be:	d01c      	beq.n	80020fa <lfs_dir_fetchmatch+0xf6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80020c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80020c8:	4413      	add	r3, r2
 80020ca:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80020ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d0:	3301      	adds	r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	bfb8      	it	lt
 80020da:	425b      	neglt	r3, r3
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80020e2:	440b      	add	r3, r1
 80020e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80020e8:	4619      	mov	r1, r3
 80020ea:	4610      	mov	r0, r2
 80020ec:	f7fe f8b7 	bl	800025e <lfs_scmp>
 80020f0:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	dd01      	ble.n	80020fa <lfs_dir_fetchmatch+0xf6>
            r = i;
 80020f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f8:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 80020fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020fc:	3301      	adds	r3, #1
 80020fe:	677b      	str	r3, [r7, #116]	; 0x74
 8002100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002102:	2b01      	cmp	r3, #1
 8002104:	dda5      	ble.n	8002052 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002108:	2b00      	cmp	r3, #0
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	bfb8      	it	lt
 8002110:	425b      	neglt	r3, r3
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800211e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002120:	3301      	adds	r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	bfb8      	it	lt
 800212a:	425b      	neglt	r3, r3
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4413      	add	r3, r2
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800213a:	2b00      	cmp	r3, #0
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	bfb8      	it	lt
 8002142:	425b      	neglt	r3, r3
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800214a:	4413      	add	r3, r2
 800214c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800215a:	2300      	movs	r3, #0
 800215c:	673b      	str	r3, [r7, #112]	; 0x70
 800215e:	e2f9      	b.n	8002754 <lfs_dir_fetchmatch+0x750>
        lfs_off_t off = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002170:	4aa8      	ldr	r2, [pc, #672]	; (8002414 <lfs_dir_fetchmatch+0x410>)
 8002172:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800217a:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800217e:	2300      	movs	r3, #0
 8002180:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 8002184:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002186:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f877 	bl	800028c <lfs_tole32>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	3308      	adds	r3, #8
 80021a8:	2204      	movs	r2, #4
 80021aa:	4619      	mov	r1, r3
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f004 ff70 	bl	8007094 <lfs_crc>
 80021b4:	4603      	mov	r3, r0
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f85b 	bl	8000278 <lfs_fromle32>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80021c8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80021ca:	f7fe fd64 	bl	8000c96 <lfs_tag_dsize>
 80021ce:	4602      	mov	r2, r0
 80021d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d2:	4413      	add	r3, r2
 80021d4:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 80021d6:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80021dc:	69d8      	ldr	r0, [r3, #28]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2204      	movs	r2, #4
 80021e4:	9203      	str	r2, [sp, #12]
 80021e6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80021ea:	9202      	str	r2, [sp, #8]
 80021ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021ee:	9201      	str	r2, [sp, #4]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	4603      	mov	r3, r0
 80021f4:	460a      	mov	r2, r1
 80021f6:	2100      	movs	r1, #0
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f7fe f8a5 	bl	8000348 <lfs_bd_read>
 80021fe:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <lfs_dir_fetchmatch+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8002206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002208:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800220c:	f000 81d5 	beq.w	80025ba <lfs_dir_fetchmatch+0x5b6>
                    // can't continue?
                    break;
                }
                return err;
 8002210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002212:	e2b3      	b.n	800277c <lfs_dir_fetchmatch+0x778>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800221a:	2204      	movs	r2, #4
 800221c:	4618      	mov	r0, r3
 800221e:	f004 ff39 	bl	8007094 <lfs_crc>
 8002222:	4603      	mov	r3, r0
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f83b 	bl	80002a4 <lfs_frombe32>
 800222e:	4602      	mov	r2, r0
 8002230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002232:	4053      	eors	r3, r2
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fcac 	bl	8000b96 <lfs_tag_isvalid>
 800223e:	4603      	mov	r3, r0
 8002240:	f083 0301 	eor.w	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <lfs_dir_fetchmatch+0x25e>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800224a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800224c:	f7fe fcd1 	bl	8000bf2 <lfs_tag_type2>
 8002250:	4603      	mov	r3, r0
 8002252:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 8002260:	e1ba      	b.n	80025d8 <lfs_dir_fetchmatch+0x5d4>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe fd16 	bl	8000c96 <lfs_tag_dsize>
 800226a:	4602      	mov	r2, r0
 800226c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226e:	441a      	add	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	429a      	cmp	r2, r3
 8002278:	f200 81a1 	bhi.w	80025be <lfs_dir_fetchmatch+0x5ba>
                break;
            }

            ptag = tag;
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fcb5 	bl	8000bf2 <lfs_tag_type2>
 8002288:	4603      	mov	r3, r0
 800228a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800228e:	d15e      	bne.n	800234e <lfs_dir_fetchmatch+0x34a>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8002290:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002296:	69dc      	ldr	r4, [r3, #28]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800229e:	3204      	adds	r2, #4
 80022a0:	2104      	movs	r1, #4
 80022a2:	9103      	str	r1, [sp, #12]
 80022a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80022a8:	9102      	str	r1, [sp, #8]
 80022aa:	9201      	str	r2, [sp, #4]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4623      	mov	r3, r4
 80022b0:	4602      	mov	r2, r0
 80022b2:	2100      	movs	r1, #0
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	f7fe f847 	bl	8000348 <lfs_bd_read>
 80022ba:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80022bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <lfs_dir_fetchmatch+0x2cc>
                    if (err == LFS_ERR_CORRUPT) {
 80022c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80022c8:	f000 817b 	beq.w	80025c2 <lfs_dir_fetchmatch+0x5be>
                        break;
                    }
                    return err;
 80022cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 80022ce:	e255      	b.n	800277c <lfs_dir_fetchmatch+0x778>
                }
                dcrc = lfs_fromle32(dcrc);
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fd ffd0 	bl	8000278 <lfs_fromle32>
 80022d8:	4603      	mov	r3, r0
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 80022dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	429a      	cmp	r2, r3
 80022e2:	f040 8170 	bne.w	80025c6 <lfs_dir_fetchmatch+0x5c2>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fca0 	bl	8000c2e <lfs_tag_chunk>
 80022ee:	4603      	mov	r3, r0
 80022f0:	07db      	lsls	r3, r3, #31
 80022f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80022f4:	4053      	eors	r3, r2
 80022f6:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002300:	2204      	movs	r2, #4
 8002302:	4618      	mov	r0, r3
 8002304:	f004 fec6 	bl	8007094 <lfs_crc>
 8002308:	4602      	mov	r2, r0
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800230e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002310:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fcbe 	bl	8000c96 <lfs_tag_dsize>
 800231a:	4602      	mov	r2, r0
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	441a      	add	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002328:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002330:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8002344:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
 800234c:	e73c      	b.n	80021c8 <lfs_dir_fetchmatch+0x1c4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800234e:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	681c      	ldr	r4, [r3, #0]
 800235c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235e:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fc97 	bl	8000c96 <lfs_tag_dsize>
 8002368:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 800236a:	3b04      	subs	r3, #4
 800236c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002370:	9203      	str	r2, [sp, #12]
 8002372:	9302      	str	r3, [sp, #8]
 8002374:	9501      	str	r5, [sp, #4]
 8002376:	9400      	str	r4, [sp, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4632      	mov	r2, r6
 800237c:	2100      	movs	r1, #0
 800237e:	6978      	ldr	r0, [r7, #20]
 8002380:	f7fe f97f 	bl	8000682 <lfs_bd_crc>
 8002384:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8002386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <lfs_dir_fetchmatch+0x396>
                if (err == LFS_ERR_CORRUPT) {
 800238c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800238e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002392:	f000 811a 	beq.w	80025ca <lfs_dir_fetchmatch+0x5c6>
                    break;
                }
                return err;
 8002396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002398:	e1f0      	b.n	800277c <lfs_dir_fetchmatch+0x778>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fc19 	bl	8000bd4 <lfs_tag_type1>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d113      	bne.n	80023d0 <lfs_dir_fetchmatch+0x3cc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fc58 	bl	8000c60 <lfs_tag_id>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80023b8:	4293      	cmp	r3, r2
 80023ba:	f200 80b5 	bhi.w	8002528 <lfs_dir_fetchmatch+0x524>
                    tempcount = lfs_tag_id(tag) + 1;
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fc4d 	bl	8000c60 <lfs_tag_id>
 80023c6:	4603      	mov	r3, r0
 80023c8:	3301      	adds	r3, #1
 80023ca:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80023ce:	e0ab      	b.n	8002528 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fbfe 	bl	8000bd4 <lfs_tag_type1>
 80023d8:	4603      	mov	r3, r0
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023de:	d139      	bne.n	8002454 <lfs_dir_fetchmatch+0x450>
                tempcount += lfs_tag_splice(tag);
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fc2f 	bl	8000c46 <lfs_tag_splice>
 80023e8:	4603      	mov	r3, r0
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80023f0:	4413      	add	r3, r2
 80023f2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 80023f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <lfs_dir_fetchmatch+0x414>)
 80023fa:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80023fc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002400:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002406:	4293      	cmp	r3, r2
 8002408:	d108      	bne.n	800241c <lfs_dir_fetchmatch+0x418>
                    tempbesttag |= 0x80000000;
 800240a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800240c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002410:	663b      	str	r3, [r7, #96]	; 0x60
 8002412:	e089      	b.n	8002528 <lfs_dir_fetchmatch+0x524>
 8002414:	0800b0c0 	.word	0x0800b0c0
 8002418:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 800241c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800241e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002422:	f000 8081 	beq.w	8002528 <lfs_dir_fetchmatch+0x524>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fc19 	bl	8000c60 <lfs_tag_id>
 800242e:	4603      	mov	r3, r0
 8002430:	461c      	mov	r4, r3
 8002432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fc13 	bl	8000c60 <lfs_tag_id>
 800243a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800243c:	429c      	cmp	r4, r3
 800243e:	d873      	bhi.n	8002528 <lfs_dir_fetchmatch+0x524>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fbff 	bl	8000c46 <lfs_tag_splice>
 8002448:	4603      	mov	r3, r0
 800244a:	029a      	lsls	r2, r3, #10
 800244c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800244e:	4413      	add	r3, r2
 8002450:	663b      	str	r3, [r7, #96]	; 0x60
 8002452:	e069      	b.n	8002528 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fbbc 	bl	8000bd4 <lfs_tag_type1>
 800245c:	4603      	mov	r3, r0
 800245e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002462:	d132      	bne.n	80024ca <lfs_dir_fetchmatch+0x4c6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fbe1 	bl	8000c2e <lfs_tag_chunk>
 800246c:	4603      	mov	r3, r0
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf14      	ite	ne
 8002476:	2301      	movne	r3, #1
 8002478:	2300      	moveq	r3, #0
 800247a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 800247e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002484:	69dc      	ldr	r4, [r3, #28]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800248c:	3204      	adds	r2, #4
 800248e:	2108      	movs	r1, #8
 8002490:	9103      	str	r1, [sp, #12]
 8002492:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002496:	9102      	str	r1, [sp, #8]
 8002498:	9201      	str	r2, [sp, #4]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4623      	mov	r3, r4
 800249e:	4602      	mov	r2, r0
 80024a0:	2100      	movs	r1, #0
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	f7fd ff50 	bl	8000348 <lfs_bd_read>
 80024a8:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80024aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <lfs_dir_fetchmatch+0x4ba>
                    if (err == LFS_ERR_CORRUPT) {
 80024b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80024b6:	f000 808a 	beq.w	80025ce <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 80024ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024bc:	e15e      	b.n	800277c <lfs_dir_fetchmatch+0x778>
                }
                lfs_pair_fromle32(temptail);
 80024be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fb33 	bl	8000b2e <lfs_pair_fromle32>
 80024c8:	e02e      	b.n	8002528 <lfs_dir_fetchmatch+0x524>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fb9f 	bl	8000c10 <lfs_tag_type3>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80024da:	429a      	cmp	r2, r3
 80024dc:	d124      	bne.n	8002528 <lfs_dir_fetchmatch+0x524>
                err = lfs_bd_read(lfs,
 80024de:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80024e4:	69dc      	ldr	r4, [r3, #28]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024ec:	3204      	adds	r2, #4
 80024ee:	2108      	movs	r1, #8
 80024f0:	9103      	str	r1, [sp, #12]
 80024f2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80024f6:	9102      	str	r1, [sp, #8]
 80024f8:	9201      	str	r2, [sp, #4]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	4623      	mov	r3, r4
 80024fe:	4602      	mov	r2, r0
 8002500:	2100      	movs	r1, #0
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7fd ff20 	bl	8000348 <lfs_bd_read>
 8002508:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800250a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <lfs_dir_fetchmatch+0x514>
                    if (err == LFS_ERR_CORRUPT) {
 8002510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002512:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002516:	d05c      	beq.n	80025d2 <lfs_dir_fetchmatch+0x5ce>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002518:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fcb7 	bl	8000e90 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8002522:	2301      	movs	r3, #1
 8002524:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800252a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800252e:	405a      	eors	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	f47f ae47 	bne.w	80021c8 <lfs_dir_fetchmatch+0x1c4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800253a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002540:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002544:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
 8002548:	f107 0220 	add.w	r2, r7, #32
 800254c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002550:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002554:	4798      	blx	r3
 8002556:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8002558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255a:	2b00      	cmp	r3, #0
 800255c:	da05      	bge.n	800256a <lfs_dir_fetchmatch+0x566>
                    if (res == LFS_ERR_CORRUPT) {
 800255e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002560:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002564:	d037      	beq.n	80025d6 <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return res;
 8002566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8002568:	e108      	b.n	800277c <lfs_dir_fetchmatch+0x778>
                }

                if (res == LFS_CMP_EQ) {
 800256a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <lfs_dir_fetchmatch+0x572>
                    // found a match
                    tempbesttag = tag;
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	663b      	str	r3, [r7, #96]	; 0x60
 8002574:	e628      	b.n	80021c8 <lfs_dir_fetchmatch+0x1c4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800257a:	405a      	eors	r2, r3
 800257c:	4b81      	ldr	r3, [pc, #516]	; (8002784 <lfs_dir_fetchmatch+0x780>)
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <lfs_dir_fetchmatch+0x588>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
 8002588:	663b      	str	r3, [r7, #96]	; 0x60
 800258a:	e61d      	b.n	80021c8 <lfs_dir_fetchmatch+0x1c4>
                } else if (res == LFS_CMP_GT &&
 800258c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258e:	2b02      	cmp	r3, #2
 8002590:	f47f ae1a 	bne.w	80021c8 <lfs_dir_fetchmatch+0x1c4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fb62 	bl	8000c60 <lfs_tag_id>
 800259c:	4603      	mov	r3, r0
 800259e:	461c      	mov	r4, r3
 80025a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fb5c 	bl	8000c60 <lfs_tag_id>
 80025a8:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 80025aa:	429c      	cmp	r4, r3
 80025ac:	f63f ae0c 	bhi.w	80021c8 <lfs_dir_fetchmatch+0x1c4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025b6:	663b      	str	r3, [r7, #96]	; 0x60
 80025b8:	e606      	b.n	80021c8 <lfs_dir_fetchmatch+0x1c4>
                    break;
 80025ba:	bf00      	nop
 80025bc:	e00c      	b.n	80025d8 <lfs_dir_fetchmatch+0x5d4>
                break;
 80025be:	bf00      	nop
 80025c0:	e00a      	b.n	80025d8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80025c2:	bf00      	nop
 80025c4:	e008      	b.n	80025d8 <lfs_dir_fetchmatch+0x5d4>
                    break;
 80025c6:	bf00      	nop
 80025c8:	e006      	b.n	80025d8 <lfs_dir_fetchmatch+0x5d4>
                    break;
 80025ca:	bf00      	nop
 80025cc:	e004      	b.n	80025d8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80025ce:	bf00      	nop
 80025d0:	e002      	b.n	80025d8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80025d2:	bf00      	nop
 80025d4:	e000      	b.n	80025d8 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80025d6:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d000      	beq.n	80025e2 <lfs_dir_fetchmatch+0x5de>
 80025e0:	e016      	b.n	8002610 <lfs_dir_fetchmatch+0x60c>
            // try the other block?
            lfs_pair_swap(dir->pair);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fa1f 	bl	8000a28 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 80025ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ec:	3301      	adds	r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	bfb8      	it	lt
 80025f6:	425b      	neglt	r3, r3
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025fe:	4413      	add	r3, r2
 8002600:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002608:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800260a:	3301      	adds	r3, #1
 800260c:	673b      	str	r3, [r7, #112]	; 0x70
 800260e:	e0a1      	b.n	8002754 <lfs_dir_fetchmatch+0x750>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2200      	movs	r2, #0
 8002614:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03a      	beq.n	8002694 <lfs_dir_fetchmatch+0x690>
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002626:	6992      	ldr	r2, [r2, #24]
 8002628:	fbb3 f1f2 	udiv	r1, r3, r2
 800262c:	fb02 f201 	mul.w	r2, r2, r1
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d12e      	bne.n	8002694 <lfs_dir_fetchmatch+0x690>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002636:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800263a:	2b00      	cmp	r3, #0
 800263c:	d02a      	beq.n	8002694 <lfs_dir_fetchmatch+0x690>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8002644:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 800264a:	69dd      	ldr	r5, [r3, #28]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	68d2      	ldr	r2, [r2, #12]
 8002654:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002656:	f107 001c 	add.w	r0, r7, #28
 800265a:	9003      	str	r0, [sp, #12]
 800265c:	9102      	str	r1, [sp, #8]
 800265e:	9201      	str	r2, [sp, #4]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	462b      	mov	r3, r5
 8002664:	4622      	mov	r2, r4
 8002666:	2100      	movs	r1, #0
 8002668:	6978      	ldr	r0, [r7, #20]
 800266a:	f7fe f80a 	bl	8000682 <lfs_bd_crc>
 800266e:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <lfs_dir_fetchmatch+0x67e>
 8002676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002678:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800267c:	d001      	beq.n	8002682 <lfs_dir_fetchmatch+0x67e>
                    return err;
 800267e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002680:	e07c      	b.n	800277c <lfs_dir_fetchmatch+0x778>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	429a      	cmp	r2, r3
 8002688:	bf0c      	ite	eq
 800268a:	2301      	moveq	r3, #1
 800268c:	2300      	movne	r3, #0
 800268e:	b2da      	uxtb	r2, r3
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	333c      	adds	r3, #60	; 0x3c
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fb97 	bl	8000dd0 <lfs_gstate_hasmovehere>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d028      	beq.n	80026fa <lfs_dir_fetchmatch+0x6f6>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fad7 	bl	8000c60 <lfs_tag_id>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461c      	mov	r4, r3
 80026b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fad1 	bl	8000c60 <lfs_tag_id>
 80026be:	4603      	mov	r3, r0
 80026c0:	429c      	cmp	r4, r3
 80026c2:	d104      	bne.n	80026ce <lfs_dir_fetchmatch+0x6ca>
                besttag |= 0x80000000;
 80026c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026cc:	e015      	b.n	80026fa <lfs_dir_fetchmatch+0x6f6>
            } else if (besttag != -1 &&
 80026ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d011      	beq.n	80026fa <lfs_dir_fetchmatch+0x6f6>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fac0 	bl	8000c60 <lfs_tag_id>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461c      	mov	r4, r3
 80026e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe faba 	bl	8000c60 <lfs_tag_id>
 80026ec:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 80026ee:	429c      	cmp	r4, r3
 80026f0:	d203      	bcs.n	80026fa <lfs_dir_fetchmatch+0x6f6>
                besttag -= LFS_MKTAG(0, 1, 0);
 80026f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026f4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026f8:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 80026fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <lfs_dir_fetchmatch+0x720>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002702:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe faab 	bl	8000c60 <lfs_tag_id>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	8a9b      	ldrh	r3, [r3, #20]
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f7fd fd44 	bl	80001a2 <lfs_min>
 800271a:	4603      	mov	r3, r0
 800271c:	b29a      	uxth	r2, r3
 800271e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002722:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002724:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fa35 	bl	8000b96 <lfs_tag_isvalid>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <lfs_dir_fetchmatch+0x732>
            return besttag;
 8002732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002734:	e022      	b.n	800277c <lfs_dir_fetchmatch+0x778>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fa91 	bl	8000c60 <lfs_tag_id>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	8a9b      	ldrh	r3, [r3, #20]
 8002746:	429a      	cmp	r2, r3
 8002748:	d202      	bcs.n	8002750 <lfs_dir_fetchmatch+0x74c>
            return LFS_ERR_NOENT;
 800274a:	f06f 0301 	mvn.w	r3, #1
 800274e:	e015      	b.n	800277c <lfs_dir_fetchmatch+0x778>
        } else {
            return 0;
 8002750:	2300      	movs	r3, #0
 8002752:	e013      	b.n	800277c <lfs_dir_fetchmatch+0x778>
    for (int i = 0; i < 2; i++) {
 8002754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002756:	2b01      	cmp	r3, #1
 8002758:	f77f ad02 	ble.w	8002160 <lfs_dir_fetchmatch+0x15c>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4908      	ldr	r1, [pc, #32]	; (8002788 <lfs_dir_fetchmatch+0x784>)
 8002766:	9101      	str	r1, [sp, #4]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	f240 5262 	movw	r2, #1378	; 0x562
 8002770:	4906      	ldr	r1, [pc, #24]	; (800278c <lfs_dir_fetchmatch+0x788>)
 8002772:	4807      	ldr	r0, [pc, #28]	; (8002790 <lfs_dir_fetchmatch+0x78c>)
 8002774:	f004 fefc 	bl	8007570 <myprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002778:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800277c:	4618      	mov	r0, r3
 800277e:	3784      	adds	r7, #132	; 0x84
 8002780:	46bd      	mov	sp, r7
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002784:	7ffffc00 	.word	0x7ffffc00
 8002788:	0800b07c 	.word	0x0800b07c
 800278c:	0800af70 	.word	0x0800af70
 8002790:	0800b088 	.word	0x0800b088

08002794 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af04      	add	r7, sp, #16
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80027a0:	2300      	movs	r3, #0
 80027a2:	9303      	str	r3, [sp, #12]
 80027a4:	2300      	movs	r3, #0
 80027a6:	9302      	str	r3, [sp, #8]
 80027a8:	2300      	movs	r3, #0
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff fc22 	bl	8002004 <lfs_dir_fetchmatch>
 80027c0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <lfs_dir_getgstate+0x5c>)
 80027e0:	4a12      	ldr	r2, [pc, #72]	; (800282c <lfs_dir_getgstate+0x60>)
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7fe feab 	bl	8001540 <lfs_dir_get>
 80027ea:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	da05      	bge.n	80027fe <lfs_dir_getgstate+0x32>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f113 0f02 	cmn.w	r3, #2
 80027f8:	d001      	beq.n	80027fe <lfs_dir_getgstate+0x32>
        return res;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	e00f      	b.n	800281e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f113 0f02 	cmn.w	r3, #2
 8002804:	d00a      	beq.n	800281c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002806:	f107 0310 	add.w	r3, r7, #16
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fb00 	bl	8000e10 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fa51 	bl	8000cbe <lfs_gstate_xor>
    }

    return 0;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	7ff0000c 	.word	0x7ff0000c
 800282c:	7ff00000 	.word	0x7ff00000

08002830 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b08f      	sub	sp, #60	; 0x3c
 8002834:	af04      	add	r7, sp, #16
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	689c      	ldr	r4, [r3, #8]
 800284e:	68b8      	ldr	r0, [r7, #8]
 8002850:	f7fe fa15 	bl	8000c7e <lfs_tag_size>
 8002854:	4603      	mov	r3, r0
 8002856:	4619      	mov	r1, r3
 8002858:	4620      	mov	r0, r4
 800285a:	f7fd fca2 	bl	80001a2 <lfs_min>
 800285e:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002860:	6a3c      	ldr	r4, [r7, #32]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	6852      	ldr	r2, [r2, #4]
 800286a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800286c:	6849      	ldr	r1, [r1, #4]
 800286e:	69b8      	ldr	r0, [r7, #24]
 8002870:	9003      	str	r0, [sp, #12]
 8002872:	9102      	str	r1, [sp, #8]
 8002874:	9201      	str	r2, [sp, #4]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4622      	mov	r2, r4
 800287c:	2100      	movs	r1, #0
 800287e:	6a38      	ldr	r0, [r7, #32]
 8002880:	f7fd feae 	bl	80005e0 <lfs_bd_cmp>
 8002884:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <lfs_dir_find_match+0x60>
        return res;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	e014      	b.n	80028ba <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	689c      	ldr	r4, [r3, #8]
 8002894:	68b8      	ldr	r0, [r7, #8]
 8002896:	f7fe f9f2 	bl	8000c7e <lfs_tag_size>
 800289a:	4603      	mov	r3, r0
 800289c:	429c      	cmp	r4, r3
 800289e:	d00b      	beq.n	80028b8 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	689c      	ldr	r4, [r3, #8]
 80028a4:	68b8      	ldr	r0, [r7, #8]
 80028a6:	f7fe f9ea 	bl	8000c7e <lfs_tag_size>
 80028aa:	4603      	mov	r3, r0
 80028ac:	429c      	cmp	r4, r3
 80028ae:	d201      	bcs.n	80028b4 <lfs_dir_find_match+0x84>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e002      	b.n	80028ba <lfs_dir_find_match+0x8a>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e000      	b.n	80028ba <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	372c      	adds	r7, #44	; 0x2c
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}
	...

080028c4 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b093      	sub	sp, #76	; 0x4c
 80028c8:	af04      	add	r7, sp, #16
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <lfs_dir_find+0x22>
        *id = 0x3ff;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80028e4:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 80028e6:	4b6e      	ldr	r3, [pc, #440]	; (8002aa0 <lfs_dir_find+0x1dc>)
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a1a      	ldr	r2, [r3, #32]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 80028fa:	496a      	ldr	r1, [pc, #424]	; (8002aa4 <lfs_dir_find+0x1e0>)
 80028fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80028fe:	f007 fd35 	bl	800a36c <strspn>
 8002902:	4602      	mov	r2, r0
 8002904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002906:	4413      	add	r3, r2
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800290a:	4966      	ldr	r1, [pc, #408]	; (8002aa4 <lfs_dir_find+0x1e0>)
 800290c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800290e:	f007 fd1c 	bl	800a34a <strcspn>
 8002912:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <lfs_dir_find+0x62>
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <lfs_dir_find+0x1e4>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d00a      	beq.n	800293c <lfs_dir_find+0x78>
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	2b02      	cmp	r3, #2
 800292a:	d10c      	bne.n	8002946 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800292c:	2202      	movs	r2, #2
 800292e:	495f      	ldr	r1, [pc, #380]	; (8002aac <lfs_dir_find+0x1e8>)
 8002930:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002932:	f007 f935 	bl	8009ba0 <memcmp>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d104      	bne.n	8002946 <lfs_dir_find+0x82>
            name += namelen;
 800293c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	4413      	add	r3, r2
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8002944:	e7d9      	b.n	80028fa <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	4413      	add	r3, r2
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8002952:	4954      	ldr	r1, [pc, #336]	; (8002aa4 <lfs_dir_find+0x1e0>)
 8002954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002956:	f007 fd09 	bl	800a36c <strspn>
 800295a:	4602      	mov	r2, r0
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	4413      	add	r3, r2
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8002962:	4950      	ldr	r1, [pc, #320]	; (8002aa4 <lfs_dir_find+0x1e0>)
 8002964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002966:	f007 fcf0 	bl	800a34a <strcspn>
 800296a:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01d      	beq.n	80029ae <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d112      	bne.n	800299e <lfs_dir_find+0xda>
 8002978:	2202      	movs	r2, #2
 800297a:	494c      	ldr	r1, [pc, #304]	; (8002aac <lfs_dir_find+0x1e8>)
 800297c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800297e:	f007 f90f 	bl	8009ba0 <memcmp>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <lfs_dir_find+0xda>
                depth -= 1;
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8002994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	4413      	add	r3, r2
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800299c:	e7ad      	b.n	80028fa <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	3301      	adds	r3, #1
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 80029a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	4413      	add	r3, r2
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 80029ac:	e7d1      	b.n	8002952 <lfs_dir_find+0x8e>
                break;
 80029ae:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <lfs_dir_find+0xf8>
            return tag;
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	e06c      	b.n	8002a96 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c0:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe f923 	bl	8000c10 <lfs_tag_type3>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d002      	beq.n	80029d6 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80029d0:	f06f 0313 	mvn.w	r3, #19
 80029d4:	e05f      	b.n	8002a96 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe f941 	bl	8000c60 <lfs_tag_id>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d01c      	beq.n	8002a24 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe f937 	bl	8000c60 <lfs_tag_id>
 80029f2:	4603      	mov	r3, r0
 80029f4:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80029f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029fa:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002a02:	9200      	str	r2, [sp, #0]
 8002a04:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <lfs_dir_find+0x1ec>)
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7fe fd99 	bl	8001540 <lfs_dir_get>
 8002a0e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	da01      	bge.n	8002a1a <lfs_dir_find+0x156>
                return res;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	e03d      	b.n	8002a96 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	3318      	adds	r3, #24
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f885 	bl	8000b2e <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8002a2a:	212f      	movs	r1, #47	; 0x2f
 8002a2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a2e:	f007 fc7f 	bl	800a330 <strchr>
 8002a32:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <lfs_dir_find+0x178>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	e000      	b.n	8002a3e <lfs_dir_find+0x17a>
 8002a3c:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	613a      	str	r2, [r7, #16]
 8002a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a44:	617a      	str	r2, [r7, #20]
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002a4a:	f107 0210 	add.w	r2, r7, #16
 8002a4e:	9203      	str	r2, [sp, #12]
 8002a50:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <lfs_dir_find+0x1f0>)
 8002a52:	9202      	str	r2, [sp, #8]
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8002a5e:	4622      	mov	r2, r4
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff face 	bl	8002004 <lfs_dir_fetchmatch>
 8002a68:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	da01      	bge.n	8002a74 <lfs_dir_find+0x1b0>
                return tag;
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	e010      	b.n	8002a96 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8002a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	4413      	add	r3, r2
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8002a82:	e73a      	b.n	80028fa <lfs_dir_find+0x36>
            if (!dir->split) {
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	7ddb      	ldrb	r3, [r3, #23]
 8002a88:	f083 0301 	eor.w	r3, r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0c8      	beq.n	8002a24 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8002a92:	f06f 0301 	mvn.w	r3, #1
    }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	373c      	adds	r7, #60	; 0x3c
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	002ffc00 	.word	0x002ffc00
 8002aa4:	0800b0c8 	.word	0x0800b0c8
 8002aa8:	0800b0cc 	.word	0x0800b0cc
 8002aac:	0800b0d0 	.word	0x0800b0d0
 8002ab0:	700ffc00 	.word	0x700ffc00
 8002ab4:	08002831 	.word	0x08002831

08002ab8 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b08b      	sub	sp, #44	; 0x2c
 8002abc:	af04      	add	r7, sp, #16
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f103 0010 	add.w	r0, r3, #16
 8002acc:	68fc      	ldr	r4, [r7, #12]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	6852      	ldr	r2, [r2, #4]
 8002ad6:	6839      	ldr	r1, [r7, #0]
 8002ad8:	9103      	str	r1, [sp, #12]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	9102      	str	r1, [sp, #8]
 8002ade:	9201      	str	r2, [sp, #4]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	4622      	mov	r2, r4
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7fd febf 	bl	800086c <lfs_bd_prog>
 8002aee:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <lfs_dir_commitprog+0x42>
        return err;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	e010      	b.n	8002b1c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f004 fac6 	bl	8007094 <lfs_crc>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	441a      	add	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	605a      	str	r2, [r3, #4]
    return 0;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd90      	pop	{r4, r7, pc}

08002b24 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b08f      	sub	sp, #60	; 0x3c
 8002b28:	af04      	add	r7, sp, #16
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe f8af 	bl	8000c96 <lfs_tag_dsize>
 8002b38:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	441a      	add	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d902      	bls.n	8002b50 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8002b4a:	f06f 031b 	mvn.w	r3, #27
 8002b4e:	e065      	b.n	8002c1c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	4053      	eors	r3, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fbac 	bl	80002ba <lfs_tobe32>
 8002b62:	4603      	mov	r3, r0
 8002b64:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8002b66:	f107 0214 	add.w	r2, r7, #20
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff ffa2 	bl	8002ab8 <lfs_dir_commitprog>
 8002b74:	61f8      	str	r0, [r7, #28]
    if (err) {
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <lfs_dir_commitattr+0x5c>
        return err;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	e04d      	b.n	8002c1c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0c      	blt.n	8002ba0 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	3b04      	subs	r3, #4
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff ff92 	bl	8002ab8 <lfs_dir_commitprog>
 8002b94:	61f8      	str	r0, [r7, #28]
        if (err) {
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d039      	beq.n	8002c10 <lfs_dir_commitattr+0xec>
            return err;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	e03d      	b.n	8002c1c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba8:	e02d      	b.n	8002c06 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8002baa:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8002bb2:	1f1c      	subs	r4, r3, #4
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	440a      	add	r2, r1
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	9103      	str	r1, [sp, #12]
 8002bc4:	f107 0113 	add.w	r1, r7, #19
 8002bc8:	9102      	str	r1, [sp, #8]
 8002bca:	9201      	str	r2, [sp, #4]
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	4623      	mov	r3, r4
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7fd fbb7 	bl	8000348 <lfs_bd_read>
 8002bda:	61f8      	str	r0, [r7, #28]
            if (err) {
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <lfs_dir_commitattr+0xc2>
                return err;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	e01a      	b.n	8002c1c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8002be6:	f107 0213 	add.w	r2, r7, #19
 8002bea:	2301      	movs	r3, #1
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f7ff ff62 	bl	8002ab8 <lfs_dir_commitprog>
 8002bf4:	61f8      	str	r0, [r7, #28]
            if (err) {
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <lfs_dir_commitattr+0xdc>
                return err;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	e00d      	b.n	8002c1c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	3301      	adds	r3, #1
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	3b04      	subs	r3, #4
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d3cc      	bcc.n	8002baa <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	609a      	str	r2, [r3, #8]
    return 0;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	372c      	adds	r7, #44	; 0x2c
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}

08002c24 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b097      	sub	sp, #92	; 0x5c
 8002c28:	af04      	add	r7, sp, #16
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8002c32:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f7fd faaf 	bl	80001a2 <lfs_min>
 8002c44:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f7fd faca 	bl	80001e8 <lfs_alignup>
 8002c54:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8002c5e:	e0fe      	b.n	8002e5e <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	3b04      	subs	r3, #4
 8002c6a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fa97 	bl	80001a2 <lfs_min>
 8002c74:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4413      	add	r3, r2
        lfs_off_t noff = (
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8002c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d206      	bcs.n	8002c96 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	3b14      	subs	r3, #20
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c90:	f7fd fa87 	bl	80001a2 <lfs_min>
 8002c94:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 8002c96:	23ff      	movs	r3, #255	; 0xff
 8002c98:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8002c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d35f      	bcc.n	8002d62 <lfs_dir_commitcrc+0x13e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d855      	bhi.n	8002d62 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8002cb6:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002cbc:	6998      	ldr	r0, [r3, #24]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	9203      	str	r2, [sp, #12]
 8002cc6:	f107 021b 	add.w	r2, r7, #27
 8002cca:	9202      	str	r2, [sp, #8]
 8002ccc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cce:	9201      	str	r2, [sp, #4]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460a      	mov	r2, r1
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7fd fb35 	bl	8000348 <lfs_bd_read>
 8002cde:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <lfs_dir_commitcrc+0xce>
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002cec:	d001      	beq.n	8002cf2 <lfs_dir_commitcrc+0xce>
                return err;
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	e101      	b.n	8002ef6 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf6:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8002d00:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 8002d06:	699c      	ldr	r4, [r3, #24]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	f107 0108 	add.w	r1, r7, #8
 8002d12:	3104      	adds	r1, #4
 8002d14:	9103      	str	r1, [sp, #12]
 8002d16:	9202      	str	r2, [sp, #8]
 8002d18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d1a:	9201      	str	r2, [sp, #4]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	4623      	mov	r3, r4
 8002d20:	4602      	mov	r2, r0
 8002d22:	2100      	movs	r1, #0
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fd fcac 	bl	8000682 <lfs_bd_crc>
 8002d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <lfs_dir_commitcrc+0x11a>
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002d38:	d001      	beq.n	8002d3e <lfs_dir_commitcrc+0x11a>
                    return err;
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	e0db      	b.n	8002ef6 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe f8bc 	bl	8000ec0 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8002d48:	f107 0308 	add.w	r3, r7, #8
 8002d4c:	4a6c      	ldr	r2, [pc, #432]	; (8002f00 <lfs_dir_commitcrc+0x2dc>)
 8002d4e:	6839      	ldr	r1, [r7, #0]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff fee7 	bl	8002b24 <lfs_dir_commitattr>
 8002d56:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <lfs_dir_commitcrc+0x13e>
                    return err;
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	e0c9      	b.n	8002ef6 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8002d62:	7efb      	ldrb	r3, [r7, #27]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	09db      	lsrs	r3, r3, #7
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	051a      	lsls	r2, r3, #20
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d78:	1acb      	subs	r3, r1, r3
 8002d7a:	3b04      	subs	r3, #4
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8002d82:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	4053      	eors	r3, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fa92 	bl	80002ba <lfs_tobe32>
 8002d96:	4603      	mov	r3, r0
 8002d98:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f107 0110 	add.w	r1, r7, #16
 8002da2:	2204      	movs	r2, #4
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 f975 	bl	8007094 <lfs_crc>
 8002daa:	4602      	mov	r2, r0
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fa69 	bl	800028c <lfs_tole32>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f103 0010 	add.w	r0, r3, #16
 8002dc4:	687c      	ldr	r4, [r7, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6852      	ldr	r2, [r2, #4]
 8002dce:	2108      	movs	r1, #8
 8002dd0:	9103      	str	r1, [sp, #12]
 8002dd2:	f107 0110 	add.w	r1, r7, #16
 8002dd6:	9102      	str	r1, [sp, #8]
 8002dd8:	9201      	str	r2, [sp, #4]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	4622      	mov	r2, r4
 8002de0:	4601      	mov	r1, r0
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fd fd42 	bl	800086c <lfs_bd_prog>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <lfs_dir_commitcrc+0x1d0>
            return err;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	e080      	b.n	8002ef6 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8002df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e0c:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8002e0e:	7efb      	ldrb	r3, [r7, #27]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	061b      	lsls	r3, r3, #24
 8002e14:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	405a      	eors	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f04f 32ff 	mov.w	r2, #4294967295
 8002e26:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8002e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d208      	bcs.n	8002e42 <lfs_dir_commitcrc+0x21e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	4413      	add	r3, r2
 8002e3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d30d      	bcc.n	8002e5e <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f103 0110 	add.w	r1, r3, #16
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fd fcd9 	bl	8000804 <lfs_bd_sync>
 8002e52:	6238      	str	r0, [r7, #32]
            if (err) {
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <lfs_dir_commitcrc+0x23a>
                return err;
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	e04b      	b.n	8002ef6 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f63f aefb 	bhi.w	8002c60 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8002e70:	f04f 33ff 	mov.w	r3, #4294967295
 8002e74:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7a:	1d1c      	adds	r4, r3, #4
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e84:	1a8a      	subs	r2, r1, r2
 8002e86:	f107 011c 	add.w	r1, r7, #28
 8002e8a:	9103      	str	r1, [sp, #12]
 8002e8c:	9202      	str	r2, [sp, #8]
 8002e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e90:	9201      	str	r2, [sp, #4]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	4623      	mov	r3, r4
 8002e96:	4602      	mov	r2, r0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fbf1 	bl	8000682 <lfs_bd_crc>
 8002ea0:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <lfs_dir_commitcrc+0x288>
        return err;
 8002ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eaa:	e024      	b.n	8002ef6 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d002      	beq.n	8002eba <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8002eb4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002eb8:	e01d      	b.n	8002ef6 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f107 021c 	add.w	r2, r7, #28
 8002ec4:	9203      	str	r2, [sp, #12]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	9202      	str	r2, [sp, #8]
 8002eca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ecc:	9201      	str	r2, [sp, #4]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd fbd3 	bl	8000682 <lfs_bd_crc>
 8002edc:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <lfs_dir_commitcrc+0x2c4>
        return err;
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	e006      	b.n	8002ef6 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8002eee:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002ef2:	e000      	b.n	8002ef6 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	374c      	adds	r7, #76	; 0x4c
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}
 8002efe:	bf00      	nop
 8002f00:	5ffffc08 	.word	0x5ffffc08

08002f04 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af04      	add	r7, sp, #16
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e016      	b.n	8002f42 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3301      	adds	r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	bfb8      	it	lt
 8002f20:	425b      	neglt	r3, r3
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe f98a 	bl	8001244 <lfs_alloc>
 8002f30:	60f8      	str	r0, [r7, #12]
        if (err) {
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <lfs_dir_alloc+0x38>
            return err;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	e058      	b.n	8002fee <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	dde5      	ble.n	8002f14 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8002f58:	2004      	movs	r0, #4
 8002f5a:	9003      	str	r0, [sp, #12]
 8002f5c:	9202      	str	r2, [sp, #8]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	9201      	str	r2, [sp, #4]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	2304      	movs	r3, #4
 8002f66:	460a      	mov	r2, r1
 8002f68:	2100      	movs	r1, #0
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd f9ec 	bl	8000348 <lfs_bd_read>
 8002f70:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd f97e 	bl	8000278 <lfs_fromle32>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <lfs_dir_alloc+0x90>
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002f8e:	d001      	beq.n	8002f94 <lfs_dir_alloc+0x90>
        return err;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	e02c      	b.n	8002fee <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	dd0e      	ble.n	8002fbc <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f7fd f919 	bl	80001e8 <lfs_alignup>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc8:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f04f 32ff 	mov.w	r2, #4294967295
 8002fde:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b092      	sub	sp, #72	; 0x48
 8002ffa:	af04      	add	r7, sp, #16
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	4619      	mov	r1, r3
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7ff ff7a 	bl	8002f04 <lfs_dir_alloc>
 8003010:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <lfs_dir_split+0x26>
        return err;
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	e03c      	b.n	8003096 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	7ddb      	ldrb	r3, [r3, #23]
 8003020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003030:	f107 0110 	add.w	r1, r7, #16
 8003034:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003038:	9302      	str	r3, [sp, #8]
 800303a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f879 	bl	8003140 <lfs_dir_compact>
 800304e:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	2b00      	cmp	r3, #0
 8003054:	da01      	bge.n	800305a <lfs_dir_split+0x64>
        return res;
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	e01d      	b.n	8003096 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2201      	movs	r2, #1
 800306a:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3320      	adds	r3, #32
 8003072:	4619      	mov	r1, r3
 8003074:	4610      	mov	r0, r2
 8003076:	f7fd fd05 	bl	8000a84 <lfs_pair_cmp>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <lfs_dir_split+0x9e>
 8003080:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3738      	adds	r7, #56	; 0x38
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80030ae:	68b8      	ldr	r0, [r7, #8]
 80030b0:	f7fd fdf1 	bl	8000c96 <lfs_tag_dsize>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	441a      	add	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]
    return 0;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	f7ff fd1d 	bl	8002b24 <lfs_dir_commitattr>
 80030ea:	4603      	mov	r3, r0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003104:	2b00      	cmp	r3, #0
 8003106:	dd11      	ble.n	800312c <lfs_dir_needsrelocation+0x38>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	3301      	adds	r3, #1
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003112:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003114:	3201      	adds	r2, #1
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	fbb3 f1f2 	udiv	r1, r3, r2
 800311e:	fb02 f201 	mul.w	r2, r2, r1
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <lfs_dir_needsrelocation+0x38>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <lfs_dir_needsrelocation+0x3a>
 800312c:	2300      	movs	r3, #0
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	b2db      	uxtb	r3, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
	...

08003140 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b0a4      	sub	sp, #144	; 0x90
 8003144:	af0a      	add	r7, sp, #40	; 0x28
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff ffcc 	bl	80030f4 <lfs_dir_needsrelocation>
 800315c:	4603      	mov	r3, r0
 800315e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800316c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00e      	beq.n	8003192 <lfs_dir_compact+0x52>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2200      	movs	r2, #0
 8003178:	657a      	str	r2, [r7, #84]	; 0x54
 800317a:	2201      	movs	r2, #1
 800317c:	65ba      	str	r2, [r7, #88]	; 0x58
 800317e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd fc7d 	bl	8000a84 <lfs_pair_cmp>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 8155 	bne.w	800343c <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8003196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003198:	2300      	movs	r3, #0
 800319a:	643b      	str	r3, [r7, #64]	; 0x40
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
 80031a0:	647b      	str	r3, [r7, #68]	; 0x44
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295
 80031a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031a8:	2300      	movs	r3, #0
 80031aa:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <lfs_dir_compact+0x80>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031bc:	3b08      	subs	r3, #8
 80031be:	e003      	b.n	80031c8 <lfs_dir_compact+0x88>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80031c8:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4619      	mov	r1, r3
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7fd fbf7 	bl	80009c4 <lfs_bd_erase>
 80031d6:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80031d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 80031de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80031e4:	f000 812c 	beq.w	8003440 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 80031e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ea:	e187      	b.n	80034fc <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd f84b 	bl	800028c <lfs_tole32>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8003202:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003206:	2304      	movs	r3, #4
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff fc55 	bl	8002ab8 <lfs_dir_commitprog>
 800320e:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f82f 	bl	8000278 <lfs_fromle32>
 800321a:	4602      	mov	r2, r0
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	609a      	str	r2, [r3, #8]
            if (err) {
 8003220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8003226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003228:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800322c:	f000 810a 	beq.w	8003444 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003232:	e163      	b.n	80034fc <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003234:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003238:	425b      	negs	r3, r3
 800323a:	b29b      	uxth	r3, r3
 800323c:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	637a      	str	r2, [r7, #52]	; 0x34
 8003242:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003246:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8003248:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800324c:	9208      	str	r2, [sp, #32]
 800324e:	4aad      	ldr	r2, [pc, #692]	; (8003504 <lfs_dir_compact+0x3c4>)
 8003250:	9207      	str	r2, [sp, #28]
 8003252:	9306      	str	r3, [sp, #24]
 8003254:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003258:	9305      	str	r3, [sp, #20]
 800325a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800325e:	9304      	str	r3, [sp, #16]
 8003260:	2300      	movs	r3, #0
 8003262:	9303      	str	r3, [sp, #12]
 8003264:	4ba8      	ldr	r3, [pc, #672]	; (8003508 <lfs_dir_compact+0x3c8>)
 8003266:	9302      	str	r3, [sp, #8]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	2200      	movs	r2, #0
 8003276:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7fe fab3 	bl	80017e4 <lfs_dir_traverse>
 800327e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8003280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d006      	beq.n	8003294 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8003286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003288:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800328c:	f000 80dc 	beq.w	8003448 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8003290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003292:	e133      	b.n	80034fc <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	3318      	adds	r3, #24
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd fbd9 	bl	8000a50 <lfs_pair_isnull>
 800329e:	4603      	mov	r3, r0
 80032a0:	f083 0301 	eor.w	r3, r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d022      	beq.n	80032f0 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	3318      	adds	r3, #24
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd fc57 	bl	8000b62 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	7ddb      	ldrb	r3, [r3, #23]
 80032b8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80032bc:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80032be:	4a93      	ldr	r2, [pc, #588]	; (800350c <lfs_dir_compact+0x3cc>)
 80032c0:	431a      	orrs	r2, r3
                        dir->tail);
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80032c6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fc2a 	bl	8002b24 <lfs_dir_commitattr>
 80032d0:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3318      	adds	r3, #24
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd fc29 	bl	8000b2e <lfs_pair_fromle32>
                if (err) {
 80032dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 80032e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80032e8:	f000 80b0 	beq.w	800344c <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 80032ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ee:	e105      	b.n	80034fc <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 80032f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80032fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003300:	f083 0301 	eor.w	r3, r3, #1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d011      	beq.n	800332e <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fcd1 	bl	8000cbe <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd fcc8 	bl	8000cbe <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd fcbf 	bl	8000cbe <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800334c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003350:	461a      	mov	r2, r3
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f7ff fa39 	bl	80027cc <lfs_dir_getgstate>
 800335a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800335c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <lfs_dir_compact+0x226>
                return err;
 8003362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003364:	e0ca      	b.n	80034fc <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fccb 	bl	8000d06 <lfs_gstate_iszero>
 8003370:	4603      	mov	r3, r0
 8003372:	f083 0301 	eor.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d016      	beq.n	80033aa <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800337c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd fd65 	bl	8000e50 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800338a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800338e:	4a60      	ldr	r2, [pc, #384]	; (8003510 <lfs_dir_compact+0x3d0>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7ff fbc7 	bl	8002b24 <lfs_dir_commitattr>
 8003396:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800339e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80033a4:	d054      	beq.n	8003450 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80033a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a8:	e0a8      	b.n	80034fc <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80033aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033ae:	4619      	mov	r1, r3
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff fc37 	bl	8002c24 <lfs_dir_commitcrc>
 80033b6:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80033b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80033be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80033c4:	d046      	beq.n	8003454 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80033c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c8:	e098      	b.n	80034fc <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80033ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033d0:	6992      	ldr	r2, [r2, #24]
 80033d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80033d6:	fb02 f201 	mul.w	r2, r2, r1
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d006      	beq.n	80033ee <lfs_dir_compact+0x2ae>
 80033e0:	4b4c      	ldr	r3, [pc, #304]	; (8003514 <lfs_dir_compact+0x3d4>)
 80033e2:	4a4d      	ldr	r2, [pc, #308]	; (8003518 <lfs_dir_compact+0x3d8>)
 80033e4:	f640 010f 	movw	r1, #2063	; 0x80f
 80033e8:	484c      	ldr	r0, [pc, #304]	; (800351c <lfs_dir_compact+0x3dc>)
 80033ea:	f006 fb6f 	bl	8009acc <__assert_func>
            lfs_pair_swap(dir->pair);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd fb19 	bl	8000a28 <lfs_pair_swap>
            dir->count = end - begin;
 80033f6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80033fa:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	b29a      	uxth	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800340c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3348      	adds	r3, #72	; 0x48
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800341e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003422:	f083 0301 	eor.w	r3, r3, #1
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d064      	beq.n	80034f6 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	333c      	adds	r3, #60	; 0x3c
 8003432:	3230      	adds	r2, #48	; 0x30
 8003434:	ca07      	ldmia	r2, {r0, r1, r2}
 8003436:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800343a:	e05c      	b.n	80034f6 <lfs_dir_compact+0x3b6>
        goto relocate;
 800343c:	bf00      	nop
 800343e:	e00a      	b.n	8003456 <lfs_dir_compact+0x316>
                    goto relocate;
 8003440:	bf00      	nop
 8003442:	e008      	b.n	8003456 <lfs_dir_compact+0x316>
                    goto relocate;
 8003444:	bf00      	nop
 8003446:	e006      	b.n	8003456 <lfs_dir_compact+0x316>
                    goto relocate;
 8003448:	bf00      	nop
 800344a:	e004      	b.n	8003456 <lfs_dir_compact+0x316>
                        goto relocate;
 800344c:	bf00      	nop
 800344e:	e002      	b.n	8003456 <lfs_dir_compact+0x316>
                        goto relocate;
 8003450:	bf00      	nop
 8003452:	e000      	b.n	8003456 <lfs_dir_compact+0x316>
                    goto relocate;
 8003454:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3310      	adds	r3, #16
 8003460:	4619      	mov	r1, r3
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7fc ff4c 	bl	8000300 <lfs_cache_drop>
        if (!tired) {
 8003468:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800346c:	f083 0301 	eor.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a29      	ldr	r2, [pc, #164]	; (8003520 <lfs_dir_compact+0x3e0>)
 800347c:	9200      	str	r2, [sp, #0]
 800347e:	f640 0221 	movw	r2, #2081	; 0x821
 8003482:	4926      	ldr	r1, [pc, #152]	; (800351c <lfs_dir_compact+0x3dc>)
 8003484:	4827      	ldr	r0, [pc, #156]	; (8003524 <lfs_dir_compact+0x3e4>)
 8003486:	f004 f873 	bl	8007570 <myprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2200      	movs	r2, #0
 800348e:	617a      	str	r2, [r7, #20]
 8003490:	2201      	movs	r2, #1
 8003492:	61ba      	str	r2, [r7, #24]
 8003494:	f107 0214 	add.w	r2, r7, #20
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd faf2 	bl	8000a84 <lfs_pair_cmp>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <lfs_dir_compact+0x3e0>)
 80034ac:	9200      	str	r2, [sp, #0]
 80034ae:	f640 0226 	movw	r2, #2086	; 0x826
 80034b2:	491a      	ldr	r1, [pc, #104]	; (800351c <lfs_dir_compact+0x3dc>)
 80034b4:	481c      	ldr	r0, [pc, #112]	; (8003528 <lfs_dir_compact+0x3e8>)
 80034b6:	f004 f85b 	bl	8007570 <myprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80034ba:	f06f 031b 	mvn.w	r3, #27
 80034be:	e01d      	b.n	80034fc <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	3304      	adds	r3, #4
 80034c4:	4619      	mov	r1, r3
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7fd febc 	bl	8001244 <lfs_alloc>
 80034cc:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80034ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00c      	beq.n	80034ee <lfs_dir_compact+0x3ae>
 80034d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d6:	f113 0f1c 	cmn.w	r3, #28
 80034da:	d106      	bne.n	80034ea <lfs_dir_compact+0x3aa>
 80034dc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80034e0:	f083 0301 	eor.w	r3, r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <lfs_dir_compact+0x3ae>
            return err;
 80034ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ec:	e006      	b.n	80034fc <lfs_dir_compact+0x3bc>
        }

        tired = false;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 80034f4:	e64d      	b.n	8003192 <lfs_dir_compact+0x52>
        break;
 80034f6:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 80034f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3768      	adds	r7, #104	; 0x68
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	080030cb 	.word	0x080030cb
 8003508:	400ffc00 	.word	0x400ffc00
 800350c:	000ffc08 	.word	0x000ffc08
 8003510:	7ffffc0c 	.word	0x7ffffc0c
 8003514:	0800b0d4 	.word	0x0800b0d4
 8003518:	0800c894 	.word	0x0800c894
 800351c:	0800af70 	.word	0x0800af70
 8003520:	0800b07c 	.word	0x0800b07c
 8003524:	0800b0fc 	.word	0x0800b0fc
 8003528:	0800b120 	.word	0x0800b120

0800352c <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b097      	sub	sp, #92	; 0x5c
 8003530:	af0a      	add	r7, sp, #40	; 0x28
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800353a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003540:	e058      	b.n	80035f4 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	b29b      	uxth	r3, r3
 800354a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800354c:	b292      	uxth	r2, r2
 800354e:	4252      	negs	r2, r2
 8003550:	b292      	uxth	r2, r2
 8003552:	b212      	sxth	r2, r2
 8003554:	f107 0118 	add.w	r1, r7, #24
 8003558:	9108      	str	r1, [sp, #32]
 800355a:	4979      	ldr	r1, [pc, #484]	; (8003740 <lfs_dir_splittingcompact+0x214>)
 800355c:	9107      	str	r1, [sp, #28]
 800355e:	9206      	str	r2, [sp, #24]
 8003560:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003564:	9205      	str	r2, [sp, #20]
 8003566:	9304      	str	r3, [sp, #16]
 8003568:	2300      	movs	r3, #0
 800356a:	9303      	str	r3, [sp, #12]
 800356c:	4b75      	ldr	r3, [pc, #468]	; (8003744 <lfs_dir_splittingcompact+0x218>)
 800356e:	9302      	str	r3, [sp, #8]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	2200      	movs	r2, #0
 800357e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7fe f92f 	bl	80017e4 <lfs_dir_traverse>
 8003586:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <lfs_dir_splittingcompact+0x66>
                return err;
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	e0d2      	b.n	8003738 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8003592:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2bfe      	cmp	r3, #254	; 0xfe
 800359c:	d822      	bhi.n	80035e4 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a2:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 80035a4:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    && size <= lfs_min(
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d004      	beq.n	80035bc <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    && size <= lfs_min(
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	e003      	b.n	80035c4 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c0:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 80035c2:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 80035c8:	6992      	ldr	r2, [r2, #24]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fc fe0b 	bl	80001e8 <lfs_alignup>
 80035d2:	4603      	mov	r3, r0
 80035d4:	4619      	mov	r1, r3
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7fc fde3 	bl	80001a2 <lfs_min>
 80035dc:	4602      	mov	r2, r0
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d20e      	bcs.n	8003602 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80035e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f0:	4413      	add	r3, r2
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80035f4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d8a0      	bhi.n	8003542 <lfs_dir_splittingcompact+0x16>
 8003600:	e000      	b.n	8003604 <lfs_dir_splittingcompact+0xd8>
                break;
 8003602:	bf00      	nop
        }

        if (split == begin) {
 8003604:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360a:	429a      	cmp	r2, r3
 800360c:	d02d      	beq.n	800366a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	b29b      	uxth	r3, r3
 8003612:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003616:	9202      	str	r2, [sp, #8]
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f7ff fce6 	bl	8002ff6 <lfs_dir_split>
 800362a:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <lfs_dir_splittingcompact+0x112>
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	f113 0f1c 	cmn.w	r3, #28
 8003638:	d001      	beq.n	800363e <lfs_dir_splittingcompact+0x112>
            return err;
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	e07c      	b.n	8003738 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00e      	beq.n	8003662 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	493e      	ldr	r1, [pc, #248]	; (8003748 <lfs_dir_splittingcompact+0x21c>)
 800364e:	9101      	str	r1, [sp, #4]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	f640 0279 	movw	r2, #2169	; 0x879
 8003658:	493c      	ldr	r1, [pc, #240]	; (800374c <lfs_dir_splittingcompact+0x220>)
 800365a:	483d      	ldr	r0, [pc, #244]	; (8003750 <lfs_dir_splittingcompact+0x224>)
 800365c:	f003 ff88 	bl	8007570 <myprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003660:	e004      	b.n	800366c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003668:	e767      	b.n	800353a <lfs_dir_splittingcompact+0xe>
            break;
 800366a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff fd40 	bl	80030f4 <lfs_dir_needsrelocation>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d04f      	beq.n	800371a <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	613a      	str	r2, [r7, #16]
 8003680:	2201      	movs	r2, #1
 8003682:	617a      	str	r2, [r7, #20]
 8003684:	f107 0210 	add.w	r2, r7, #16
 8003688:	4611      	mov	r1, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd f9fa 	bl	8000a84 <lfs_pair_cmp>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d141      	bne.n	800371a <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f003 fad6 	bl	8006c48 <lfs_fs_size_>
 800369c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	da01      	bge.n	80036a8 <lfs_dir_splittingcompact+0x17c>
            return size;
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	e047      	b.n	8003738 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	1ad2      	subs	r2, r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b4:	08db      	lsrs	r3, r3, #3
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d92f      	bls.n	800371a <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	4a22      	ldr	r2, [pc, #136]	; (8003748 <lfs_dir_splittingcompact+0x21c>)
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	f640 028f 	movw	r2, #2191	; 0x88f
 80036c6:	4921      	ldr	r1, [pc, #132]	; (800374c <lfs_dir_splittingcompact+0x220>)
 80036c8:	4822      	ldr	r0, [pc, #136]	; (8003754 <lfs_dir_splittingcompact+0x228>)
 80036ca:	f003 ff51 	bl	8007570 <myprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80036ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80036d2:	9302      	str	r3, [sp, #8]
 80036d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff fc86 	bl	8002ff6 <lfs_dir_split>
 80036ea:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <lfs_dir_splittingcompact+0x1d2>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f113 0f1c 	cmn.w	r3, #28
 80036f8:	d001      	beq.n	80036fe <lfs_dir_splittingcompact+0x1d2>
                return err;
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	e01c      	b.n	8003738 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <lfs_dir_splittingcompact+0x21c>)
 8003706:	f640 0299 	movw	r2, #2201	; 0x899
 800370a:	4910      	ldr	r1, [pc, #64]	; (800374c <lfs_dir_splittingcompact+0x220>)
 800370c:	4812      	ldr	r0, [pc, #72]	; (8003758 <lfs_dir_splittingcompact+0x22c>)
 800370e:	f003 ff2f 	bl	8007570 <myprintf>
 8003712:	e002      	b.n	800371a <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8003714:	2301      	movs	r3, #1
 8003716:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800371a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800371e:	9302      	str	r3, [sp, #8]
 8003720:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff fd05 	bl	8003140 <lfs_dir_compact>
 8003736:	4603      	mov	r3, r0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3734      	adds	r7, #52	; 0x34
 800373c:	46bd      	mov	sp, r7
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	0800309f 	.word	0x0800309f
 8003744:	400ffc00 	.word	0x400ffc00
 8003748:	0800b07c 	.word	0x0800b07c
 800374c:	0800af70 	.word	0x0800af70
 8003750:	0800b158 	.word	0x0800b158
 8003754:	0800b188 	.word	0x0800b188
 8003758:	0800b1b8 	.word	0x0800b1b8

0800375c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	b0a6      	sub	sp, #152	; 0x98
 8003760:	af0a      	add	r7, sp, #40	; 0x28
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
    int state = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800376e:	2300      	movs	r3, #0
 8003770:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003774:	2300      	movs	r3, #0
 8003776:	667b      	str	r3, [r7, #100]	; 0x64
 8003778:	e06d      	b.n	8003856 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800377a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	4413      	add	r3, r2
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fd fa43 	bl	8000c10 <lfs_tag_type3>
 800378a:	4603      	mov	r3, r0
 800378c:	461a      	mov	r2, r3
 800378e:	f240 4301 	movw	r3, #1025	; 0x401
 8003792:	429a      	cmp	r2, r3
 8003794:	d106      	bne.n	80037a4 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	8a9b      	ldrh	r3, [r3, #20]
 800379a:	3301      	adds	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	829a      	strh	r2, [r3, #20]
 80037a2:	e055      	b.n	8003850 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80037a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fa2e 	bl	8000c10 <lfs_tag_type3>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80037bc:	429a      	cmp	r2, r3
 80037be:	d114      	bne.n	80037ea <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	8a9b      	ldrh	r3, [r3, #20]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <lfs_dir_relocatingcommit+0x7a>
 80037c8:	4ba4      	ldr	r3, [pc, #656]	; (8003a5c <lfs_dir_relocatingcommit+0x300>)
 80037ca:	4aa5      	ldr	r2, [pc, #660]	; (8003a60 <lfs_dir_relocatingcommit+0x304>)
 80037cc:	f640 01b2 	movw	r1, #2226	; 0x8b2
 80037d0:	48a4      	ldr	r0, [pc, #656]	; (8003a64 <lfs_dir_relocatingcommit+0x308>)
 80037d2:	f006 f97b 	bl	8009acc <__assert_func>
            dir->count -= 1;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	8a9b      	ldrh	r3, [r3, #20]
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80037e8:	e032      	b.n	8003850 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80037ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd f9ed 	bl	8000bd4 <lfs_tag_type1>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003800:	d126      	bne.n	8003850 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	4413      	add	r3, r2
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	4413      	add	r3, r2
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	4413      	add	r3, r2
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fd f9fe 	bl	8000c2e <lfs_tag_chunk>
 8003832:	4603      	mov	r3, r0
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3318      	adds	r3, #24
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd f96f 	bl	8000b2e <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003852:	3301      	adds	r3, #1
 8003854:	667b      	str	r3, [r7, #100]	; 0x64
 8003856:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003858:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800385c:	429a      	cmp	r2, r3
 800385e:	db8c      	blt.n	800377a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003860:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02b      	beq.n	80038c0 <lfs_dir_relocatingcommit+0x164>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	8a9b      	ldrh	r3, [r3, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d127      	bne.n	80038c0 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <lfs_dir_relocatingcommit+0x12a>
 8003878:	4b7b      	ldr	r3, [pc, #492]	; (8003a68 <lfs_dir_relocatingcommit+0x30c>)
 800387a:	4a79      	ldr	r2, [pc, #484]	; (8003a60 <lfs_dir_relocatingcommit+0x304>)
 800387c:	f640 01bf 	movw	r1, #2239	; 0x8bf
 8003880:	4878      	ldr	r0, [pc, #480]	; (8003a64 <lfs_dir_relocatingcommit+0x308>)
 8003882:	f006 f923 	bl	8009acc <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800388c:	4619      	mov	r1, r3
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f002 fd38 	bl	8006304 <lfs_fs_pred>
 8003894:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8003896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <lfs_dir_relocatingcommit+0x14c>
 800389c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800389e:	f113 0f02 	cmn.w	r3, #2
 80038a2:	d001      	beq.n	80038a8 <lfs_dir_relocatingcommit+0x14c>
            return err;
 80038a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038a6:	e20f      	b.n	8003cc8 <lfs_dir_relocatingcommit+0x56c>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80038a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038aa:	f113 0f02 	cmn.w	r3, #2
 80038ae:	d007      	beq.n	80038c0 <lfs_dir_relocatingcommit+0x164>
 80038b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038b4:	7ddb      	ldrb	r3, [r3, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 80038ba:	2302      	movs	r3, #2
 80038bc:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 80038be:	e121      	b.n	8003b04 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	7d9b      	ldrb	r3, [r3, #22]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80fb 	beq.w	8003ac0 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 80038da:	63bb      	str	r3, [r7, #56]	; 0x38
 80038dc:	f04f 33ff 	mov.w	r3, #4294967295
 80038e0:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80038e6:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <lfs_dir_relocatingcommit+0x1a0>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f8:	3b08      	subs	r3, #8
 80038fa:	e003      	b.n	8003904 <lfs_dir_relocatingcommit+0x1a8>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	3318      	adds	r3, #24
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd f929 	bl	8000b62 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
 800391c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8003922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003926:	9308      	str	r3, [sp, #32]
 8003928:	4b50      	ldr	r3, [pc, #320]	; (8003a6c <lfs_dir_relocatingcommit+0x310>)
 800392a:	9307      	str	r3, [sp, #28]
 800392c:	2300      	movs	r3, #0
 800392e:	9306      	str	r3, [sp, #24]
 8003930:	2300      	movs	r3, #0
 8003932:	9305      	str	r3, [sp, #20]
 8003934:	2300      	movs	r3, #0
 8003936:	9304      	str	r3, [sp, #16]
 8003938:	2300      	movs	r3, #0
 800393a:	9303      	str	r3, [sp, #12]
 800393c:	2300      	movs	r3, #0
 800393e:	9302      	str	r3, [sp, #8]
 8003940:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	460b      	mov	r3, r1
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7fd ff48 	bl	80017e4 <lfs_dir_traverse>
 8003954:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	3318      	adds	r3, #24
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd f8e7 	bl	8000b2e <lfs_pair_fromle32>
        if (err) {
 8003960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003968:	f113 0f1c 	cmn.w	r3, #28
 800396c:	f000 80aa 	beq.w	8003ac4 <lfs_dir_relocatingcommit+0x368>
 8003970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003972:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003976:	f000 80a5 	beq.w	8003ac4 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800397a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397c:	e1a4      	b.n	8003cc8 <lfs_dir_relocatingcommit+0x56c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800397e:	f107 031c 	add.w	r3, r7, #28
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd f991 	bl	8000cbe <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80039a2:	f107 031c 	add.w	r3, r7, #28
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd f988 	bl	8000cbe <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80039b4:	f107 031c 	add.w	r3, r7, #28
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd f97f 	bl	8000cbe <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039c6:	f023 0303 	bic.w	r3, r3, #3
 80039ca:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 80039cc:	f107 031c 	add.w	r3, r7, #28
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fd f998 	bl	8000d06 <lfs_gstate_iszero>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f083 0301 	eor.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d027      	beq.n	8003a32 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80039e2:	f107 031c 	add.w	r3, r7, #28
 80039e6:	461a      	mov	r2, r3
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7fe feee 	bl	80027cc <lfs_dir_getgstate>
 80039f0:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 80039f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <lfs_dir_relocatingcommit+0x2a0>
                return err;
 80039f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039fa:	e165      	b.n	8003cc8 <lfs_dir_relocatingcommit+0x56c>
            }

            lfs_gstate_tole32(&delta);
 80039fc:	f107 031c 	add.w	r3, r7, #28
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fd fa25 	bl	8000e50 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8003a06:	f107 031c 	add.w	r3, r7, #28
 8003a0a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003a0e:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <lfs_dir_relocatingcommit+0x314>)
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7ff f887 	bl	8002b24 <lfs_dir_commitattr>
 8003a16:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8003a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a20:	f113 0f1c 	cmn.w	r3, #28
 8003a24:	d050      	beq.n	8003ac8 <lfs_dir_relocatingcommit+0x36c>
 8003a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a28:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003a2c:	d04c      	beq.n	8003ac8 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8003a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a30:	e14a      	b.n	8003cc8 <lfs_dir_relocatingcommit+0x56c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8003a32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a36:	4619      	mov	r1, r3
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff f8f3 	bl	8002c24 <lfs_dir_commitcrc>
 8003a3e:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8003a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d016      	beq.n	8003a74 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a48:	f113 0f1c 	cmn.w	r3, #28
 8003a4c:	d03e      	beq.n	8003acc <lfs_dir_relocatingcommit+0x370>
 8003a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a50:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003a54:	d03a      	beq.n	8003acc <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8003a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a58:	e136      	b.n	8003cc8 <lfs_dir_relocatingcommit+0x56c>
 8003a5a:	bf00      	nop
 8003a5c:	0800b1e4 	.word	0x0800b1e4
 8003a60:	0800c8a4 	.word	0x0800c8a4
 8003a64:	0800af70 	.word	0x0800af70
 8003a68:	0800b1f4 	.word	0x0800b1f4
 8003a6c:	080030cb 	.word	0x080030cb
 8003a70:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a7a:	6992      	ldr	r2, [r2, #24]
 8003a7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a80:	fb02 f201 	mul.w	r2, r2, r1
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d006      	beq.n	8003a98 <lfs_dir_relocatingcommit+0x33c>
 8003a8a:	4b91      	ldr	r3, [pc, #580]	; (8003cd0 <lfs_dir_relocatingcommit+0x574>)
 8003a8c:	4a91      	ldr	r2, [pc, #580]	; (8003cd4 <lfs_dir_relocatingcommit+0x578>)
 8003a8e:	f640 1109 	movw	r1, #2313	; 0x909
 8003a92:	4891      	ldr	r0, [pc, #580]	; (8003cd8 <lfs_dir_relocatingcommit+0x57c>)
 8003a94:	f006 f81a 	bl	8009acc <__assert_func>
        dir->off = commit.off;
 8003a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8003a9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	333c      	adds	r3, #60	; 0x3c
 8003aaa:	3230      	adds	r2, #48	; 0x30
 8003aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3348      	adds	r3, #72	; 0x48
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	e021      	b.n	8003b04 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8003ac0:	bf00      	nop
 8003ac2:	e004      	b.n	8003ace <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8003ac4:	bf00      	nop
 8003ac6:	e002      	b.n	8003ace <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8003ac8:	bf00      	nop
 8003aca:	e000      	b.n	8003ace <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8003acc:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3310      	adds	r3, #16
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7fc fc13 	bl	8000300 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	8a9b      	ldrh	r3, [r3, #20]
 8003ade:	9302      	str	r3, [sp, #8]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff fd1b 	bl	800352c <lfs_dir_splittingcompact>
 8003af6:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8003af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da01      	bge.n	8003b02 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8003afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b00:	e0e2      	b.n	8003cc8 <lfs_dir_relocatingcommit+0x56c>
    }

    goto fixmlist;
 8003b02:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	663b      	str	r3, [r7, #96]	; 0x60
 8003b16:	e0d2      	b.n	8003cbe <lfs_dir_relocatingcommit+0x562>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8003b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b20:	4611      	mov	r1, r2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fc ffae 	bl	8000a84 <lfs_pair_cmp>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f040 80c4 	bne.w	8003cb8 <lfs_dir_relocatingcommit+0x55c>
            d->m = *dir;
 8003b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	f103 0408 	add.w	r4, r3, #8
 8003b38:	4615      	mov	r5, r2
 8003b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8003b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b48:	3308      	adds	r3, #8
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	f000 80a9 	beq.w	8003ca4 <lfs_dir_relocatingcommit+0x548>
                for (int i = 0; i < attrcount; i++) {
 8003b52:	2300      	movs	r3, #0
 8003b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b56:	e07b      	b.n	8003c50 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	4413      	add	r3, r2
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd f854 	bl	8000c10 <lfs_tag_type3>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d115      	bne.n	8003ba0 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8003b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b76:	889c      	ldrh	r4, [r3, #4]
 8003b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	4413      	add	r3, r2
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd f86c 	bl	8000c60 <lfs_tag_id>
 8003b88:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003b8a:	429c      	cmp	r4, r3
 8003b8c:	d108      	bne.n	8003ba0 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8003b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b90:	f04f 32ff 	mov.w	r2, #4294967295
 8003b94:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8003b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b98:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	e054      	b.n	8003c4a <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd f830 	bl	8000c10 <lfs_tag_type3>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d11c      	bne.n	8003bf6 <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8003bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bbe:	889c      	ldrh	r4, [r3, #4]
 8003bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd f848 	bl	8000c60 <lfs_tag_id>
 8003bd0:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003bd2:	429c      	cmp	r4, r3
 8003bd4:	d90f      	bls.n	8003bf6 <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8003bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd8:	889b      	ldrh	r3, [r3, #4]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003be0:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8003be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003be4:	799b      	ldrb	r3, [r3, #6]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d12f      	bne.n	8003c4a <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8003bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	1e5a      	subs	r2, r3, #1
 8003bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8003bf4:	e029      	b.n	8003c4a <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8003bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fd f805 	bl	8000c10 <lfs_tag_type3>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f240 4301 	movw	r3, #1025	; 0x401
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d11b      	bne.n	8003c4a <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8003c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c14:	889c      	ldrh	r4, [r3, #4]
 8003c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fd f81d 	bl	8000c60 <lfs_tag_id>
 8003c26:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8003c28:	429c      	cmp	r4, r3
 8003c2a:	d30e      	bcc.n	8003c4a <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8003c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c2e:	889b      	ldrh	r3, [r3, #4]
 8003c30:	3301      	adds	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c36:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8003c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c3a:	799b      	ldrb	r3, [r3, #6]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d104      	bne.n	8003c4a <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8003c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c48:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8003c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c56:	429a      	cmp	r2, r3
 8003c58:	f6ff af7e 	blt.w	8003b58 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8003c5c:	e022      	b.n	8003ca4 <lfs_dir_relocatingcommit+0x548>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 8003c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c60:	f103 0220 	add.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3320      	adds	r3, #32
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f7fc ff0a 	bl	8000a84 <lfs_pair_cmp>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <lfs_dir_relocatingcommit+0x52a>
                    d->id -= d->m.count;
 8003c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c78:	889a      	ldrh	r2, [r3, #4]
 8003c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c7c:	8b9b      	ldrh	r3, [r3, #28]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c84:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8003c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c88:	f103 0108 	add.w	r1, r3, #8
 8003c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c8e:	3320      	adds	r3, #32
 8003c90:	461a      	mov	r2, r3
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7fe fd7e 	bl	8002794 <lfs_dir_fetch>
 8003c98:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8003c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <lfs_dir_relocatingcommit+0x548>
                    return err;
 8003ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca2:	e011      	b.n	8003cc8 <lfs_dir_relocatingcommit+0x56c>
            while (d->id >= d->m.count && d->m.split) {
 8003ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ca6:	889a      	ldrh	r2, [r3, #4]
 8003ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003caa:	8b9b      	ldrh	r3, [r3, #28]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d303      	bcc.n	8003cb8 <lfs_dir_relocatingcommit+0x55c>
 8003cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb2:	7fdb      	ldrb	r3, [r3, #31]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1d2      	bne.n	8003c5e <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f47f af29 	bne.w	8003b18 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 8003cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3770      	adds	r7, #112	; 0x70
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd0:	0800b0d4 	.word	0x0800b0d4
 8003cd4:	0800c8a4 	.word	0x0800c8a4
 8003cd8:	0800af70 	.word	0x0800af70

08003cdc <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8003cdc:	b5b0      	push	{r4, r5, r7, lr}
 8003cde:	b0bc      	sub	sp, #240	; 0xf0
 8003ce0:	af04      	add	r7, sp, #16
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003cf2:	e045      	b.n	8003d80 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8003cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d03a      	beq.n	8003d76 <lfs_dir_orphaningcommit+0x9a>
 8003d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d04:	3308      	adds	r3, #8
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc feba 	bl	8000a84 <lfs_pair_cmp>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d12f      	bne.n	8003d76 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8003d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d1a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d12a      	bne.n	8003d76 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8003d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d023      	beq.n	8003d76 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8003d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d91b      	bls.n	8003d76 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8003d3e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fff2 	bl	8004d2c <lfs_file_outline>
 8003d48:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8003d4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <lfs_dir_orphaningcommit+0x7e>
                return err;
 8003d54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d58:	e2ad      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8003d5a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f001 f806 	bl	8004d70 <lfs_file_flush>
 8003d64:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8003d68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <lfs_dir_orphaningcommit+0x9a>
                return err;
 8003d70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003d74:	e29f      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8003d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1b5      	bne.n	8003cf4 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003d9e:	461d      	mov	r5, r3
 8003da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003db2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fccc 	bl	800375c <lfs_dir_relocatingcommit>
 8003dc4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8003dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	da02      	bge.n	8003dd6 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8003dd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dd4:	e26f      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fe50 	bl	8000a84 <lfs_pair_cmp>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	461d      	mov	r5, r3
 8003dee:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003df6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003dfa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8003dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d14a      	bne.n	8003e9c <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3348      	adds	r3, #72	; 0x48
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7fe fcdc 	bl	80027cc <lfs_dir_getgstate>
 8003e14:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8003e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <lfs_dir_orphaningcommit+0x14a>
            return err;
 8003e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e24:	e247      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8003e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8003e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3318      	adds	r3, #24
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc fe93 	bl	8000b62 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	7ddb      	ldrb	r3, [r3, #23]
 8003e40:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003e44:	051a      	lsls	r2, r3, #20
 8003e46:	4bc2      	ldr	r3, [pc, #776]	; (8004150 <lfs_dir_orphaningcommit+0x474>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	667b      	str	r3, [r7, #100]	; 0x64
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	3318      	adds	r3, #24
 8003e50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e56:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003e5a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003e5e:	2000      	movs	r0, #0
 8003e60:	9001      	str	r0, [sp, #4]
 8003e62:	2001      	movs	r0, #1
 8003e64:	9000      	str	r0, [sp, #0]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff fc78 	bl	800375c <lfs_dir_relocatingcommit>
 8003e6c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3318      	adds	r3, #24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc fe5a 	bl	8000b2e <lfs_pair_fromle32>
        if (state < 0) {
 8003e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da02      	bge.n	8003e88 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8003e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e86:	e216      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8003e88:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003e8c:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8003e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8003ea2:	e1fc      	b.n	800429e <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8003ea4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003eb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003eb4:	4ca7      	ldr	r4, [pc, #668]	; (8004154 <lfs_dir_orphaningcommit+0x478>)
 8003eb6:	9403      	str	r4, [sp, #12]
 8003eb8:	9102      	str	r1, [sp, #8]
 8003eba:	9201      	str	r2, [sp, #4]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f640 1295 	movw	r2, #2453	; 0x995
 8003ec4:	49a4      	ldr	r1, [pc, #656]	; (8004158 <lfs_dir_orphaningcommit+0x47c>)
 8003ec6:	48a5      	ldr	r0, [pc, #660]	; (800415c <lfs_dir_orphaningcommit+0x480>)
 8003ec8:	f003 fb52 	bl	8007570 <myprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f103 0220 	add.w	r2, r3, #32
 8003ed8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc fdd0 	bl	8000a84 <lfs_pair_cmp>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d107      	bne.n	8003efa <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8003eea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8003ef2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f02:	e037      	b.n	8003f74 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8003f04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f08:	f103 0208 	add.w	r2, r3, #8
 8003f0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fc fdb6 	bl	8000a84 <lfs_pair_cmp>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d109      	bne.n	8003f32 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8003f1e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003f22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f26:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8003f28:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003f2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f30:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8003f32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f36:	799b      	ldrb	r3, [r3, #6]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d116      	bne.n	8003f6a <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8003f3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f40:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003f44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f48:	4611      	mov	r1, r2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc fd9a 	bl	8000a84 <lfs_pair_cmp>
 8003f50:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8003f56:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003f5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8003f60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003f64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003f6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1c3      	bne.n	8003f04 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8003f7c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003f80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f84:	4619      	mov	r1, r3
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f002 fa6e 	bl	8006468 <lfs_fs_parent>
 8003f8c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8003f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	da07      	bge.n	8003fa8 <lfs_dir_orphaningcommit+0x2cc>
 8003f98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f9c:	f113 0f02 	cmn.w	r3, #2
 8003fa0:	d002      	beq.n	8003fa8 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8003fa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fa6:	e186      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8003fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fac:	f113 0f02 	cmn.w	r3, #2
 8003fb0:	bf14      	ite	ne
 8003fb2:	2301      	movne	r3, #1
 8003fb4:	2300      	moveq	r3, #0
 8003fb6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8003fba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fbe:	f113 0f02 	cmn.w	r3, #2
 8003fc2:	f000 809e 	beq.w	8004102 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f002 fae3 	bl	8006594 <lfs_fs_preporphans>
 8003fce:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8003fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <lfs_dir_orphaningcommit+0x304>
                return err;
 8003fda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fde:	e16a      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8003fe0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003fe4:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3330      	adds	r3, #48	; 0x30
 8003fec:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc feec 	bl	8000dd0 <lfs_gstate_hasmovehere>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d02d      	beq.n	800405a <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc fe2c 	bl	8000c60 <lfs_tag_id>
 8004008:	4603      	mov	r3, r0
 800400a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 800400e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004012:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8004016:	484f      	ldr	r0, [pc, #316]	; (8004154 <lfs_dir_orphaningcommit+0x478>)
 8004018:	9002      	str	r0, [sp, #8]
 800401a:	9201      	str	r2, [sp, #4]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	460b      	mov	r3, r1
 8004020:	f640 12c2 	movw	r2, #2498	; 0x9c2
 8004024:	494c      	ldr	r1, [pc, #304]	; (8004158 <lfs_dir_orphaningcommit+0x47c>)
 8004026:	484e      	ldr	r0, [pc, #312]	; (8004160 <lfs_dir_orphaningcommit+0x484>)
 8004028:	f003 faa2 	bl	8007570 <myprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800402c:	2200      	movs	r2, #0
 800402e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f002 fafe 	bl	8006634 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8004038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fe0f 	bl	8000c60 <lfs_tag_id>
 8004042:	4603      	mov	r3, r0
 8004044:	461a      	mov	r2, r3
 8004046:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800404a:	4293      	cmp	r3, r2
 800404c:	d205      	bcs.n	800405a <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 800404e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004052:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800405a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405c:	657b      	str	r3, [r7, #84]	; 0x54
 800405e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004060:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8004062:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fd7b 	bl	8000b62 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 800406c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004070:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004074:	4293      	cmp	r3, r2
 8004076:	d007      	beq.n	8004088 <lfs_dir_orphaningcommit+0x3ac>
 8004078:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800407c:	029b      	lsls	r3, r3, #10
 800407e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004082:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004086:	e000      	b.n	800408a <lfs_dir_orphaningcommit+0x3ae>
 8004088:	2300      	movs	r3, #0
 800408a:	647b      	str	r3, [r7, #68]	; 0x44
 800408c:	2300      	movs	r3, #0
 800408e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004094:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004096:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800409a:	653b      	str	r3, [r7, #80]	; 0x50
 800409c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040a0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80040a4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80040a8:	2000      	movs	r0, #0
 80040aa:	9001      	str	r0, [sp, #4]
 80040ac:	2002      	movs	r0, #2
 80040ae:	9000      	str	r0, [sp, #0]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff fb53 	bl	800375c <lfs_dir_relocatingcommit>
 80040b6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80040ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc fd35 	bl	8000b2e <lfs_pair_fromle32>
            if (state < 0) {
 80040c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	da02      	bge.n	80040d2 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 80040cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040d0:	e0f1      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 80040d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d113      	bne.n	8004102 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 80040da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 80040e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 80040e6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80040ea:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80040ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80040f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004100:	e0cd      	b.n	800429e <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004102:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004106:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800410a:	4619      	mov	r1, r3
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f002 f8f9 	bl	8006304 <lfs_fs_pred>
 8004112:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8004116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <lfs_dir_orphaningcommit+0x452>
 800411e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004122:	f113 0f02 	cmn.w	r3, #2
 8004126:	d002      	beq.n	800412e <lfs_dir_orphaningcommit+0x452>
            return err;
 8004128:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800412c:	e0c3      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800412e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01a      	beq.n	800416c <lfs_dir_orphaningcommit+0x490>
 8004136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800413a:	f113 0f02 	cmn.w	r3, #2
 800413e:	d115      	bne.n	800416c <lfs_dir_orphaningcommit+0x490>
 8004140:	4b08      	ldr	r3, [pc, #32]	; (8004164 <lfs_dir_orphaningcommit+0x488>)
 8004142:	4a09      	ldr	r2, [pc, #36]	; (8004168 <lfs_dir_orphaningcommit+0x48c>)
 8004144:	f640 11e5 	movw	r1, #2533	; 0x9e5
 8004148:	4803      	ldr	r0, [pc, #12]	; (8004158 <lfs_dir_orphaningcommit+0x47c>)
 800414a:	f005 fcbf 	bl	8009acc <__assert_func>
 800414e:	bf00      	nop
 8004150:	000ffc08 	.word	0x000ffc08
 8004154:	0800b07c 	.word	0x0800b07c
 8004158:	0800af70 	.word	0x0800af70
 800415c:	0800b1fc 	.word	0x0800b1fc
 8004160:	0800b238 	.word	0x0800b238
 8004164:	0800b27c 	.word	0x0800b27c
 8004168:	0800c8c0 	.word	0x0800c8c0

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 800416c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004170:	f113 0f02 	cmn.w	r3, #2
 8004174:	f000 8093 	beq.w	800429e <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3330      	adds	r3, #48	; 0x30
 800417c:	4618      	mov	r0, r3
 800417e:	f7fc fdde 	bl	8000d3e <lfs_gstate_hasorphans>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d011      	beq.n	80041ac <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8004188:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800418c:	425b      	negs	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	b25b      	sxtb	r3, r3
 8004192:	4619      	mov	r1, r3
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f002 f9fd 	bl	8006594 <lfs_fs_preporphans>
 800419a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 800419e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80041a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041aa:	e084      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80041ac:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80041b0:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3330      	adds	r3, #48	; 0x30
 80041b8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc fe06 	bl	8000dd0 <lfs_gstate_hasmovehere>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01c      	beq.n	8004204 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc fd46 	bl	8000c60 <lfs_tag_id>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 80041da:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80041dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041de:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80041e2:	4837      	ldr	r0, [pc, #220]	; (80042c0 <lfs_dir_orphaningcommit+0x5e4>)
 80041e4:	9002      	str	r0, [sp, #8]
 80041e6:	9201      	str	r2, [sp, #4]
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	460b      	mov	r3, r1
 80041ec:	f640 12f6 	movw	r2, #2550	; 0x9f6
 80041f0:	4934      	ldr	r1, [pc, #208]	; (80042c4 <lfs_dir_orphaningcommit+0x5e8>)
 80041f2:	4835      	ldr	r0, [pc, #212]	; (80042c8 <lfs_dir_orphaningcommit+0x5ec>)
 80041f4:	f003 f9bc 	bl	8007570 <myprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80041f8:	2200      	movs	r2, #0
 80041fa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f002 fa18 	bl	8006634 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 800420a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800420c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004210:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004214:	4618      	mov	r0, r3
 8004216:	f7fc fca4 	bl	8000b62 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800421a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800421e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <lfs_dir_orphaningcommit+0x55a>
 8004226:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800422a:	029b      	lsls	r3, r3, #10
 800422c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004230:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004234:	e000      	b.n	8004238 <lfs_dir_orphaningcommit+0x55c>
 8004236:	2300      	movs	r3, #0
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
 800423a:	2300      	movs	r3, #0
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
 800423e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004242:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004246:	051a      	lsls	r2, r3, #20
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <lfs_dir_orphaningcommit+0x5f0>)
 800424a:	4313      	orrs	r3, r2
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800424e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
 8004254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004258:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800425c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004260:	2000      	movs	r0, #0
 8004262:	9001      	str	r0, [sp, #4]
 8004264:	2002      	movs	r0, #2
 8004266:	9000      	str	r0, [sp, #0]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fa77 	bl	800375c <lfs_dir_relocatingcommit>
 800426e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004272:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc fc59 	bl	8000b2e <lfs_pair_fromle32>
            if (state < 0) {
 800427c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004280:	2b00      	cmp	r3, #0
 8004282:	da02      	bge.n	800428a <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8004284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004288:	e015      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 800428a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800428e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004296:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800429a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 800429e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	f43f adfe 	beq.w	8003ea4 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80042a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <lfs_dir_orphaningcommit+0x5d8>
 80042b0:	2303      	movs	r3, #3
 80042b2:	e000      	b.n	80042b6 <lfs_dir_orphaningcommit+0x5da>
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	37e0      	adds	r7, #224	; 0xe0
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bdb0      	pop	{r4, r5, r7, pc}
 80042be:	bf00      	nop
 80042c0:	0800b07c 	.word	0x0800b07c
 80042c4:	0800af70 	.word	0x0800af70
 80042c8:	0800b238 	.word	0x0800b238
 80042cc:	000ffc08 	.word	0x000ffc08

080042d0 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff fcf9 	bl	8003cdc <lfs_dir_orphaningcommit>
 80042ea:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da01      	bge.n	80042f6 <lfs_dir_commit+0x26>
        return orphans;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	e00d      	b.n	8004312 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 80042fc:	2100      	movs	r1, #0
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f002 faba 	bl	8006878 <lfs_fs_deorphan>
 8004304:	6138      	str	r0, [r7, #16]
        if (err) {
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <lfs_dir_commit+0x40>
            return err;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	e000      	b.n	8004312 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800431a:	b590      	push	{r4, r7, lr}
 800431c:	b087      	sub	sp, #28
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	3b08      	subs	r3, #8
 8004332:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <lfs_ctz_index+0x2e>
        return 0;
 8004344:	2300      	movs	r3, #0
 8004346:	e01c      	b.n	8004382 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3b01      	subs	r3, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f7fb ff7a 	bl	8000246 <lfs_popc>
 8004352:	4603      	mov	r3, r0
 8004354:	3302      	adds	r3, #2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	1ad2      	subs	r2, r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	fb02 f303 	mul.w	r3, r2, r3
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	1ad4      	subs	r4, r2, r3
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7fb ff68 	bl	8000246 <lfs_popc>
 8004376:	4603      	mov	r3, r0
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	1ae2      	subs	r2, r4, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	601a      	str	r2, [r3, #0]
    return i;
 8004380:	68fb      	ldr	r3, [r7, #12]
}
 8004382:	4618      	mov	r0, r3
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd90      	pop	{r4, r7, pc}

0800438a <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800438a:	b590      	push	{r4, r7, lr}
 800438c:	b08f      	sub	sp, #60	; 0x3c
 800438e:	af04      	add	r7, sp, #16
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	2b00      	cmp	r3, #0
 800439c:	d108      	bne.n	80043b0 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800439e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	601a      	str	r2, [r3, #0]
        *off = 0;
 80043a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
        return 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	e053      	b.n	8004458 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	3b01      	subs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	f107 0314 	add.w	r3, r7, #20
 80043ba:	4619      	mov	r1, r3
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff ffac 	bl	800431a <lfs_ctz_index>
 80043c2:	4603      	mov	r3, r0
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80043c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043ca:	4619      	mov	r1, r3
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7ff ffa4 	bl	800431a <lfs_ctz_index>
 80043d2:	4603      	mov	r3, r0
 80043d4:	623b      	str	r3, [r7, #32]

    while (current > target) {
 80043d6:	e034      	b.n	8004442 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 80043d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fb ff13 	bl	800020c <lfs_npw2>
 80043e6:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80043e8:	1e5c      	subs	r4, r3, #1
 80043ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ec:	f7fb ff1d 	bl	800022a <lfs_ctz>
 80043f0:	4603      	mov	r3, r0
 80043f2:	4619      	mov	r1, r3
 80043f4:	4620      	mov	r0, r4
 80043f6:	f7fb fed4 	bl	80001a2 <lfs_min>
 80043fa:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	0092      	lsls	r2, r2, #2
 8004402:	2104      	movs	r1, #4
 8004404:	9103      	str	r1, [sp, #12]
 8004406:	4639      	mov	r1, r7
 8004408:	9102      	str	r1, [sp, #8]
 800440a:	9201      	str	r2, [sp, #4]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2304      	movs	r3, #4
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7fb ff97 	bl	8000348 <lfs_bd_read>
 800441a:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fb ff2a 	bl	8000278 <lfs_fromle32>
 8004424:	4603      	mov	r3, r0
 8004426:	603b      	str	r3, [r7, #0]
        if (err) {
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <lfs_ctz_find+0xa8>
            return err;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	e012      	b.n	8004458 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004432:	2201      	movs	r2, #1
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	461a      	mov	r2, r3
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	429a      	cmp	r2, r3
 8004448:	d8c6      	bhi.n	80043d8 <lfs_ctz_find+0x4e>
    }

    *block = head;
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444e:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004454:	601a      	str	r2, [r3, #0]
    return 0;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	372c      	adds	r7, #44	; 0x2c
 800445c:	46bd      	mov	sp, r7
 800445e:	bd90      	pop	{r4, r7, pc}

08004460 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b092      	sub	sp, #72	; 0x48
 8004464:	af04      	add	r7, sp, #16
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800446e:	f107 0320 	add.w	r3, r7, #32
 8004472:	4619      	mov	r1, r3
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7fc fee5 	bl	8001244 <lfs_alloc>
 800447a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <lfs_ctz_extend+0x26>
            return err;
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	e0e9      	b.n	800465a <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	4619      	mov	r1, r3
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f7fc fa9a 	bl	80009c4 <lfs_bd_erase>
 8004490:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d006      	beq.n	80044a6 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800449e:	f000 80cb 	beq.w	8004638 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	e0d9      	b.n	800465a <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 80044a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d107      	bne.n	80044bc <lfs_ctz_extend+0x5c>
                *block = nblock;
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b0:	601a      	str	r2, [r3, #0]
                *off = 0;
 80044b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
                return 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e0ce      	b.n	800465a <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 80044bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044be:	3b01      	subs	r3, #1
 80044c0:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 80044c2:	f107 031c 	add.w	r3, r7, #28
 80044c6:	4619      	mov	r1, r3
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff ff26 	bl	800431a <lfs_ctz_index>
 80044ce:	4603      	mov	r3, r0
 80044d0:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044dc:	69da      	ldr	r2, [r3, #28]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d044      	beq.n	800456e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 80044e4:	2300      	movs	r3, #0
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
 80044e8:	e035      	b.n	8004556 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	1ad2      	subs	r2, r2, r3
 80044f0:	2301      	movs	r3, #1
 80044f2:	9303      	str	r3, [sp, #12]
 80044f4:	f107 0317 	add.w	r3, r7, #23
 80044f8:	9302      	str	r3, [sp, #8]
 80044fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	2100      	movs	r1, #0
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7fb ff1d 	bl	8000348 <lfs_bd_read>
 800450e:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <lfs_ctz_extend+0xba>
                        return err;
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	e09f      	b.n	800465a <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	2201      	movs	r2, #1
 800451e:	9203      	str	r2, [sp, #12]
 8004520:	f107 0217 	add.w	r2, r7, #23
 8004524:	9202      	str	r2, [sp, #8]
 8004526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004528:	9201      	str	r2, [sp, #4]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2301      	movs	r3, #1
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7fc f99a 	bl	800086c <lfs_bd_prog>
 8004538:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004546:	d101      	bne.n	800454c <lfs_ctz_extend+0xec>
                            goto relocate;
 8004548:	bf00      	nop
                    goto relocate;
 800454a:	e075      	b.n	8004638 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800454c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800454e:	e084      	b.n	800465a <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004552:	3301      	adds	r3, #1
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800455a:	429a      	cmp	r2, r3
 800455c:	d3c5      	bcc.n	80044ea <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004562:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004568:	601a      	str	r2, [r3, #0]
                return 0;
 800456a:	2300      	movs	r3, #0
 800456c:	e075      	b.n	800465a <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	3301      	adds	r3, #1
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004576:	f7fb fe58 	bl	800022a <lfs_ctz>
 800457a:	4603      	mov	r3, r0
 800457c:	3301      	adds	r3, #1
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004584:	2300      	movs	r3, #0
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
 8004588:	e049      	b.n	800461e <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4618      	mov	r0, r3
 800458e:	f7fb fe7d 	bl	800028c <lfs_tole32>
 8004592:	4603      	mov	r3, r0
 8004594:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459a:	0092      	lsls	r2, r2, #2
 800459c:	2104      	movs	r1, #4
 800459e:	9103      	str	r1, [sp, #12]
 80045a0:	f107 0118 	add.w	r1, r7, #24
 80045a4:	9102      	str	r1, [sp, #8]
 80045a6:	9201      	str	r2, [sp, #4]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	2301      	movs	r3, #1
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7fc f95b 	bl	800086c <lfs_bd_prog>
 80045b6:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fb fe5c 	bl	8000278 <lfs_fromle32>
 80045c0:	4603      	mov	r3, r0
 80045c2:	61bb      	str	r3, [r7, #24]
                if (err) {
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80045d0:	d034      	beq.n	800463c <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	e041      	b.n	800465a <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	3b01      	subs	r3, #1
 80045da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045dc:	429a      	cmp	r2, r3
 80045de:	d01b      	beq.n	8004618 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e4:	0092      	lsls	r2, r2, #2
 80045e6:	2104      	movs	r1, #4
 80045e8:	9103      	str	r1, [sp, #12]
 80045ea:	f107 0118 	add.w	r1, r7, #24
 80045ee:	9102      	str	r1, [sp, #8]
 80045f0:	9201      	str	r2, [sp, #4]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2304      	movs	r3, #4
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	2100      	movs	r1, #0
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7fb fea4 	bl	8000348 <lfs_bd_read>
 8004600:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	4618      	mov	r0, r3
 8004606:	f7fb fe37 	bl	8000278 <lfs_fromle32>
 800460a:	4603      	mov	r3, r0
 800460c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <lfs_ctz_extend+0x1b8>
                        return err;
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	e020      	b.n	800465a <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	3301      	adds	r3, #1
 800461c:	633b      	str	r3, [r7, #48]	; 0x30
 800461e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	429a      	cmp	r2, r3
 8004624:	d3b1      	bcc.n	800458a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8004626:	6a3a      	ldr	r2, [r7, #32]
 8004628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462a:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	009a      	lsls	r2, r3, #2
 8004630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004632:	601a      	str	r2, [r3, #0]
            return 0;
 8004634:	2300      	movs	r3, #0
 8004636:	e010      	b.n	800465a <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <lfs_ctz_extend+0x1de>
                        goto relocate;
 800463c:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	4a08      	ldr	r2, [pc, #32]	; (8004664 <lfs_ctz_extend+0x204>)
 8004642:	9200      	str	r2, [sp, #0]
 8004644:	f640 32af 	movw	r2, #2991	; 0xbaf
 8004648:	4907      	ldr	r1, [pc, #28]	; (8004668 <lfs_ctz_extend+0x208>)
 800464a:	4808      	ldr	r0, [pc, #32]	; (800466c <lfs_ctz_extend+0x20c>)
 800464c:	f002 ff90 	bl	8007570 <myprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7fb fe54 	bl	8000300 <lfs_cache_drop>
    while (true) {
 8004658:	e709      	b.n	800446e <lfs_ctz_extend+0xe>
    }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3738      	adds	r7, #56	; 0x38
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	0800b07c 	.word	0x0800b07c
 8004668:	0800af70 	.word	0x0800af70
 800466c:	0800b0fc 	.word	0x0800b0fc

08004670 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b090      	sub	sp, #64	; 0x40
 8004674:	af04      	add	r7, sp, #16
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <lfs_ctz_traverse+0x18>
        return 0;
 8004684:	2300      	movs	r3, #0
 8004686:	e06d      	b.n	8004764 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468a:	3b01      	subs	r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	f107 031c 	add.w	r3, r7, #28
 8004692:	4619      	mov	r1, r3
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fe40 	bl	800431a <lfs_ctz_index>
 800469a:	4603      	mov	r3, r0
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 800469e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80046a4:	4798      	blx	r3
 80046a6:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <lfs_ctz_traverse+0x42>
            return err;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	e058      	b.n	8004764 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <lfs_ctz_traverse+0x4c>
            return 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e053      	b.n	8004764 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	f1c3 0302 	rsb	r3, r3, #2
 80046c6:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80046c8:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80046ca:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80046cc:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80046ce:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80046d0:	9303      	str	r3, [sp, #12]
 80046d2:	f107 0314 	add.w	r3, r7, #20
 80046d6:	9302      	str	r3, [sp, #8]
 80046d8:	2300      	movs	r3, #0
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	4613      	mov	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7fb fe2e 	bl	8000348 <lfs_bd_read>
 80046ec:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fb fdc1 	bl	8000278 <lfs_fromle32>
 80046f6:	4603      	mov	r3, r0
 80046f8:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fb fdbb 	bl	8000278 <lfs_fromle32>
 8004702:	4603      	mov	r3, r0
 8004704:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <lfs_ctz_traverse+0xa0>
            return err;
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	e029      	b.n	8004764 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8004710:	2300      	movs	r3, #0
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
 8004714:	e013      	b.n	800473e <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800471e:	4413      	add	r3, r2
 8004720:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004726:	4611      	mov	r1, r2
 8004728:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800472a:	4798      	blx	r3
 800472c:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <lfs_ctz_traverse+0xc8>
                return err;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	e015      	b.n	8004764 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	3301      	adds	r3, #1
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	3b01      	subs	r3, #1
 8004742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004744:	429a      	cmp	r2, r3
 8004746:	dbe6      	blt.n	8004716 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	3b01      	subs	r3, #1
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004752:	4413      	add	r3, r2
 8004754:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004758:	603b      	str	r3, [r7, #0]
        index -= count;
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004762:	e79c      	b.n	800469e <lfs_ctz_traverse+0x2e>
    }
}
 8004764:	4618      	mov	r0, r3
 8004766:	3730      	adds	r7, #48	; 0x30
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800476c:	b5b0      	push	{r4, r5, r7, lr}
 800476e:	b09a      	sub	sp, #104	; 0x68
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f002 fa27 	bl	8006bd8 <lfs_fs_forceconsistency>
 800478a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 800478c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <lfs_file_opencfg_+0x2a>
            return err;
 8004792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004794:	e1b0      	b.n	8004af8 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800479a:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2200      	movs	r2, #0
 80047a6:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2200      	movs	r2, #0
 80047ac:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2200      	movs	r2, #0
 80047b2:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f103 0108 	add.w	r1, r3, #8
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3304      	adds	r3, #4
 80047be:	1d3a      	adds	r2, r7, #4
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7fe f87f 	bl	80028c4 <lfs_dir_find>
 80047c6:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 80047c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da0c      	bge.n	80047e8 <lfs_file_opencfg_+0x7c>
 80047ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047d0:	f113 0f02 	cmn.w	r3, #2
 80047d4:	d105      	bne.n	80047e2 <lfs_file_opencfg_+0x76>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	889b      	ldrh	r3, [r3, #4]
 80047da:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80047de:	4293      	cmp	r3, r2
 80047e0:	d102      	bne.n	80047e8 <lfs_file_opencfg_+0x7c>
        err = tag;
 80047e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80047e6:	e17c      	b.n	8004ae2 <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2201      	movs	r2, #1
 80047ec:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7fc fc5a 	bl	80010aa <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80047f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047f8:	f113 0f02 	cmn.w	r3, #2
 80047fc:	d14e      	bne.n	800489c <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d103      	bne.n	8004810 <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8004808:	f06f 0301 	mvn.w	r3, #1
 800480c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800480e:	e168      	b.n	8004ae2 <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4618      	mov	r0, r3
 8004814:	f7fb fc9a 	bl	800014c <strlen>
 8004818:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004820:	429a      	cmp	r2, r3
 8004822:	d903      	bls.n	800482c <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004824:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004828:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800482a:	e15a      	b.n	8004ae2 <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f103 0108 	add.w	r1, r3, #8
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	889b      	ldrh	r3, [r3, #4]
 8004836:	029b      	lsls	r3, r3, #10
 8004838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800483c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004842:	2300      	movs	r3, #0
 8004844:	633b      	str	r3, [r7, #48]	; 0x30
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	889b      	ldrh	r3, [r3, #4]
 800484a:	029a      	lsls	r2, r3, #10
 800484c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484e:	4313      	orrs	r3, r2
 8004850:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	63bb      	str	r3, [r7, #56]	; 0x38
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	889b      	ldrh	r3, [r3, #4]
 800485e:	029b      	lsls	r3, r3, #10
 8004860:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486a:	2300      	movs	r3, #0
 800486c:	643b      	str	r3, [r7, #64]	; 0x40
 800486e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004872:	2303      	movs	r3, #3
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff fd2b 	bl	80042d0 <lfs_dir_commit>
 800487a:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 800487c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487e:	f113 0f1c 	cmn.w	r3, #28
 8004882:	d001      	beq.n	8004888 <lfs_file_opencfg_+0x11c>
 8004884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004886:	e001      	b.n	800488c <lfs_file_opencfg_+0x120>
 8004888:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800488c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 800488e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004890:	2b00      	cmp	r3, #0
 8004892:	f040 8125 	bne.w	8004ae0 <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8004896:	4b9a      	ldr	r3, [pc, #616]	; (8004b00 <lfs_file_opencfg_+0x394>)
 8004898:	65bb      	str	r3, [r7, #88]	; 0x58
 800489a:	e044      	b.n	8004926 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 80048a6:	f06f 0310 	mvn.w	r3, #16
 80048aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80048ac:	e119      	b.n	8004ae2 <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80048ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fc f9ad 	bl	8000c10 <lfs_tag_type3>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d003      	beq.n	80048c4 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 80048bc:	f06f 0314 	mvn.w	r3, #20
 80048c0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80048c2:	e10e      	b.n	8004ae2 <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00e      	beq.n	80048ec <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	889b      	ldrh	r3, [r3, #4]
 80048d2:	029b      	lsls	r3, r3, #10
 80048d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048dc:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
 80048ea:	e01c      	b.n	8004926 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	889b      	ldrh	r3, [r3, #4]
 80048f6:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80048f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048fc:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004904:	9200      	str	r2, [sp, #0]
 8004906:	4a7f      	ldr	r2, [pc, #508]	; (8004b04 <lfs_file_opencfg_+0x398>)
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f7fc fe19 	bl	8001540 <lfs_dir_get>
 800490e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8004910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004912:	2b00      	cmp	r3, #0
 8004914:	da02      	bge.n	800491c <lfs_file_opencfg_+0x1b0>
            err = tag;
 8004916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004918:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800491a:	e0e2      	b.n	8004ae2 <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	3328      	adds	r3, #40	; 0x28
 8004920:	4618      	mov	r0, r3
 8004922:	f7fc fae5 	bl	8000ef0 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004926:	2300      	movs	r3, #0
 8004928:	657b      	str	r3, [r7, #84]	; 0x54
 800492a:	e063      	b.n	80049f4 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d03c      	beq.n	80049b2 <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004942:	6859      	ldr	r1, [r3, #4]
 8004944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004956:	051a      	lsls	r2, r3, #20
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	889b      	ldrh	r3, [r3, #4]
 800495c:	029b      	lsls	r3, r3, #10
 800495e:	ea42 0103 	orr.w	r1, r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004966:	6858      	ldr	r0, [r3, #4]
 8004968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800496a:	4613      	mov	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4403      	add	r3, r0
 8004974:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004976:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004982:	4613      	mov	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4603      	mov	r3, r0
 8004992:	4a5d      	ldr	r2, [pc, #372]	; (8004b08 <lfs_file_opencfg_+0x39c>)
 8004994:	4621      	mov	r1, r4
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f7fc fdd2 	bl	8001540 <lfs_dir_get>
 800499c:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800499e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	da06      	bge.n	80049b2 <lfs_file_opencfg_+0x246>
 80049a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a6:	f113 0f02 	cmn.w	r3, #2
 80049aa:	d002      	beq.n	80049b2 <lfs_file_opencfg_+0x246>
                err = res;
 80049ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80049b0:	e097      	b.n	8004ae2 <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d017      	beq.n	80049ee <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c2:	6859      	ldr	r1, [r3, #4]
 80049c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049c6:	4613      	mov	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d903      	bls.n	80049e2 <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 80049da:	f06f 031b 	mvn.w	r3, #27
 80049de:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80049e0:	e07f      	b.n	8004ae2 <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80049ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f0:	3301      	adds	r3, #1
 80049f2:	657b      	str	r3, [r7, #84]	; 0x54
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d395      	bcc.n	800492c <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a14:	e010      	b.n	8004a38 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fb fc58 	bl	80002d2 <lfs_malloc>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8004a30:	f06f 030b 	mvn.w	r3, #11
 8004a34:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004a36:	e054      	b.n	8004ae2 <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3340      	adds	r3, #64	; 0x40
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7fb fc6c 	bl	800031c <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8004a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc f8e2 	bl	8000c10 <lfs_tag_type3>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f240 2301 	movw	r3, #513	; 0x201
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d141      	bne.n	8004adc <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f06f 0201 	mvn.w	r2, #1
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8004a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fc f90b 	bl	8000c7e <lfs_tag_size>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2200      	movs	r2, #0
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d020      	beq.n	8004adc <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	889b      	ldrh	r3, [r3, #4]
 8004aa4:	029c      	lsls	r4, r3, #10
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aaa:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fb fb77 	bl	80001a2 <lfs_min>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004ab8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	4a0f      	ldr	r2, [pc, #60]	; (8004b04 <lfs_file_opencfg_+0x398>)
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7fc fd39 	bl	8001540 <lfs_dir_get>
 8004ace:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8004ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da02      	bge.n	8004adc <lfs_file_opencfg_+0x370>
                err = res;
 8004ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8004ada:	e002      	b.n	8004ae2 <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e00b      	b.n	8004af8 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 8004ae0:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_close_(lfs, file);
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f823 	bl	8004b3c <lfs_file_close_>
    return err;
 8004af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3760      	adds	r7, #96	; 0x60
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bdb0      	pop	{r4, r5, r7, pc}
 8004b00:	20100000 	.word	0x20100000
 8004b04:	700ffc00 	.word	0x700ffc00
 8004b08:	7ffffc00 	.word	0x7ffffc00

08004b0c <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8004b1a:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <lfs_file_open_+0x2c>)
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7ff fe21 	bl	800476c <lfs_file_opencfg_>
 8004b2a:	6178      	str	r0, [r7, #20]
    return err;
 8004b2c:	697b      	ldr	r3, [r7, #20]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	0800c8d8 	.word	0x0800c8d8

08004b3c <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8004b46:	6839      	ldr	r1, [r7, #0]
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f9e5 	bl	8004f18 <lfs_file_sync_>
 8004b4e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc fa88 	bl	8001068 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fb fbbf 	bl	80002ea <lfs_free>
    }

    return err;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b08d      	sub	sp, #52	; 0x34
 8004b7c:	af06      	add	r7, sp, #24
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004b82:	f107 030c 	add.w	r3, r7, #12
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7fc fb5b 	bl	8001244 <lfs_alloc>
 8004b8e:	6138      	str	r0, [r7, #16]
        if (err) {
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <lfs_file_relocate+0x22>
            return err;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	e0bb      	b.n	8004d12 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fb ff10 	bl	80009c4 <lfs_bd_erase>
 8004ba4:	6138      	str	r0, [r7, #16]
        if (err) {
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d006      	beq.n	8004bba <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004bb2:	f000 809b 	beq.w	8004cec <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	e0ab      	b.n	8004d12 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e069      	b.n	8004c94 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d027      	beq.n	8004c1c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f103 0008 	add.w	r0, r3, #8
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	889b      	ldrh	r3, [r3, #4]
 8004be4:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8004be6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bee:	2101      	movs	r1, #1
 8004bf0:	9105      	str	r1, [sp, #20]
 8004bf2:	f107 010b 	add.w	r1, r7, #11
 8004bf6:	9104      	str	r1, [sp, #16]
 8004bf8:	6979      	ldr	r1, [r7, #20]
 8004bfa:	9103      	str	r1, [sp, #12]
 8004bfc:	9302      	str	r3, [sp, #8]
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <lfs_file_relocate+0x1a4>)
 8004c00:	9301      	str	r3, [sp, #4]
 8004c02:	9200      	str	r2, [sp, #0]
 8004c04:	4623      	mov	r3, r4
 8004c06:	2200      	movs	r2, #0
 8004c08:	4601      	mov	r1, r0
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fc fcb3 	bl	8001576 <lfs_dir_getread>
 8004c10:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01e      	beq.n	8004c56 <lfs_file_relocate+0xde>
                    return err;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	e07a      	b.n	8004d12 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8004c22:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	1ad4      	subs	r4, r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	2201      	movs	r2, #1
 8004c32:	9203      	str	r2, [sp, #12]
 8004c34:	f107 020b 	add.w	r2, r7, #11
 8004c38:	9202      	str	r2, [sp, #8]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	9201      	str	r2, [sp, #4]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	4623      	mov	r3, r4
 8004c42:	4602      	mov	r2, r0
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fb fb7f 	bl	8000348 <lfs_bd_read>
 8004c4a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <lfs_file_relocate+0xde>
                    return err;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	e05d      	b.n	8004d12 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f103 0110 	add.w	r1, r3, #16
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	9203      	str	r2, [sp, #12]
 8004c64:	f107 020b 	add.w	r2, r7, #11
 8004c68:	9202      	str	r2, [sp, #8]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	9201      	str	r2, [sp, #4]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	2301      	movs	r3, #1
 8004c72:	4602      	mov	r2, r0
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7fb fdf9 	bl	800086c <lfs_bd_prog>
 8004c7a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004c88:	d032      	beq.n	8004cf0 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	e041      	b.n	8004d12 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	3301      	adds	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d390      	bcc.n	8004bc0 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69d9      	ldr	r1, [r3, #28]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	461a      	mov	r2, r3
 8004cae:	f004 ff85 	bl	8009bbc <memcpy>
        file->cache.block = lfs->pcache.block;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691a      	ldr	r2, [r3, #16]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3310      	adds	r3, #16
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fb fb23 	bl	800031c <lfs_cache_zero>

        file->block = nblock;
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e012      	b.n	8004d12 <lfs_file_relocate+0x19a>
                goto relocate;
 8004cec:	bf00      	nop
 8004cee:	e000      	b.n	8004cf2 <lfs_file_relocate+0x17a>
                    goto relocate;
 8004cf0:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <lfs_file_relocate+0x1a8>)
 8004cf6:	9200      	str	r2, [sp, #0]
 8004cf8:	f640 42e5 	movw	r2, #3301	; 0xce5
 8004cfc:	4909      	ldr	r1, [pc, #36]	; (8004d24 <lfs_file_relocate+0x1ac>)
 8004cfe:	480a      	ldr	r0, [pc, #40]	; (8004d28 <lfs_file_relocate+0x1b0>)
 8004d00:	f002 fc36 	bl	8007570 <myprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3310      	adds	r3, #16
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fb faf8 	bl	8000300 <lfs_cache_drop>
    while (true) {
 8004d10:	e737      	b.n	8004b82 <lfs_file_relocate+0xa>
    }
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd90      	pop	{r4, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	fff7fc00 	.word	0xfff7fc00
 8004d20:	0800b07c 	.word	0x0800b07c
 8004d24:	0800af70 	.word	0x0800af70
 8004d28:	0800b0fc 	.word	0x0800b0fc

08004d2c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ckpoint(lfs);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc f9eb 	bl	800111a <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ff16 	bl	8004b78 <lfs_file_relocate>
 8004d4c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <lfs_file_outline+0x2c>
        return err;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	e006      	b.n	8004d66 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b09f      	sub	sp, #124	; 0x7c
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d011      	beq.n	8004daa <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	3340      	adds	r3, #64	; 0x40
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fb fab1 	bl	8000300 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80a4 	beq.w	8004f00 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbc:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d176      	bne.n	8004eb8 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8004dca:	f107 030c 	add.w	r3, r7, #12
 8004dce:	2254      	movs	r2, #84	; 0x54
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f004 ff00 	bl	8009bd8 <memset>
                .ctz.head = file->ctz.head,
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8004de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004de4:	2301      	movs	r3, #1
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8004dec:	643b      	str	r3, [r7, #64]	; 0x40
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8004df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fb fa7e 	bl	8000300 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8004e04:	e02b      	b.n	8004e5e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8004e06:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8004e0a:	f107 010c 	add.w	r1, r7, #12
 8004e0e:	2301      	movs	r3, #1
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f921 	bl	8005058 <lfs_file_flushedread>
 8004e16:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8004e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	da01      	bge.n	8004e22 <lfs_file_flush+0xb2>
                    return res;
 8004e1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e20:	e06f      	b.n	8004f02 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8004e22:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8004e26:	2301      	movs	r3, #1
 8004e28:	6839      	ldr	r1, [r7, #0]
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa1c 	bl	8005268 <lfs_file_flushedwrite>
 8004e30:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8004e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da01      	bge.n	8004e3c <lfs_file_flush+0xcc>
                    return res;
 8004e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e3a:	e062      	b.n	8004f02 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d00b      	beq.n	8004e5e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8004e46:	f107 030c 	add.w	r3, r7, #12
 8004e4a:	3340      	adds	r3, #64	; 0x40
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fb fa56 	bl	8000300 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fb fa51 	bl	8000300 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d3cd      	bcc.n	8004e06 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	2301      	movs	r3, #1
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7fb fc4b 	bl	8000710 <lfs_bd_flush>
 8004e7a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8004e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d026      	beq.n	8004ed0 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8004e82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e84:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004e88:	d001      	beq.n	8004e8e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8004e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e8c:	e039      	b.n	8004f02 <lfs_file_flush+0x192>
                        goto relocate;
 8004e8e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <lfs_file_flush+0x19c>)
 8004e96:	9200      	str	r2, [sp, #0]
 8004e98:	f640 5234 	movw	r2, #3380	; 0xd34
 8004e9c:	491c      	ldr	r1, [pc, #112]	; (8004f10 <lfs_file_flush+0x1a0>)
 8004e9e:	481d      	ldr	r0, [pc, #116]	; (8004f14 <lfs_file_flush+0x1a4>)
 8004ea0:	f002 fb66 	bl	8007570 <myprintf>
                err = lfs_file_relocate(lfs, file);
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff fe66 	bl	8004b78 <lfs_file_relocate>
 8004eac:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8004eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0da      	beq.n	8004e6a <lfs_file_flush+0xfa>
                    return err;
 8004eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eb6:	e024      	b.n	8004f02 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f7fb f95e 	bl	8000184 <lfs_max>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ece:	e000      	b.n	8004ed2 <lfs_file_flush+0x162>
                break;
 8004ed0:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004efe:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3774      	adds	r7, #116	; 0x74
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd90      	pop	{r4, r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	0800b07c 	.word	0x0800b07c
 8004f10:	0800af70 	.word	0x0800af70
 8004f14:	0800b0fc 	.word	0x0800b0fc

08004f18 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b090      	sub	sp, #64	; 0x40
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e08e      	b.n	8005050 <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ff1b 	bl	8004d70 <lfs_file_flush>
 8004f3a:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d007      	beq.n	8004f52 <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	e07e      	b.n	8005050 <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d077      	beq.n	800504e <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	3308      	adds	r3, #8
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fb fd74 	bl	8000a50 <lfs_pair_isnull>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f083 0301 	eor.w	r3, r3, #1
 8004f6e:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d06c      	beq.n	800504e <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10d      	bne.n	8004f9c <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f103 0110 	add.w	r1, r3, #16
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fb fc3a 	bl	8000804 <lfs_bd_sync>
 8004f90:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <lfs_file_sync_+0x84>
                return err;
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	e059      	b.n	8005050 <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8004fa8:	f240 2301 	movw	r3, #513	; 0x201
 8004fac:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb2:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fba:	e014      	b.n	8004fe6 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8004fbc:	f240 2302 	movw	r3, #514	; 0x202
 8004fc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fc8:	3228      	adds	r2, #40	; 0x28
 8004fca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fce:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8004fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fb ffa2 	bl	8000f20 <lfs_ctz_tole32>
            buffer = &ctz;
 8004fdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fe0:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f103 0108 	add.w	r1, r3, #8
 8004fec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004fee:	051a      	lsls	r2, r3, #20
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	889b      	ldrh	r3, [r3, #4]
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	889b      	ldrh	r3, [r3, #4]
 8005006:	029a      	lsls	r2, r3, #10
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	4313      	orrs	r3, r2
 8005010:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
 800501e:	f107 0218 	add.w	r2, r7, #24
 8005022:	2302      	movs	r3, #2
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff f953 	bl	80042d0 <lfs_dir_commit>
 800502a:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	e006      	b.n	8005050 <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3740      	adds	r7, #64	; 0x40
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005058:	b5b0      	push	{r4, r5, r7, lr}
 800505a:	b090      	sub	sp, #64	; 0x40
 800505c:	af06      	add	r7, sp, #24
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	429a      	cmp	r2, r3
 8005078:	d301      	bcc.n	800507e <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 800507a:	2300      	movs	r3, #0
 800507c:	e0b7      	b.n	80051ee <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	4619      	mov	r1, r3
 800508a:	6838      	ldr	r0, [r7, #0]
 800508c:	f7fb f889 	bl	80001a2 <lfs_min>
 8005090:	6038      	str	r0, [r7, #0]
    nsize = size;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8005096:	e0a5      	b.n	80051e4 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d006      	beq.n	80050b2 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ac:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d130      	bne.n	8005114 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11c      	bne.n	80050f8 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	3138      	adds	r1, #56	; 0x38
 80050d4:	68b8      	ldr	r0, [r7, #8]
 80050d6:	303c      	adds	r0, #60	; 0x3c
 80050d8:	9003      	str	r0, [sp, #12]
 80050da:	9102      	str	r1, [sp, #8]
 80050dc:	9201      	str	r2, [sp, #4]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	462b      	mov	r3, r5
 80050e2:	4622      	mov	r2, r4
 80050e4:	2100      	movs	r1, #0
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff f94f 	bl	800438a <lfs_ctz_find>
 80050ec:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d009      	beq.n	8005108 <lfs_file_flushedread+0xb0>
                    return err;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	e07a      	b.n	80051ee <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f06f 0201 	mvn.w	r2, #1
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005118:	69da      	ldr	r2, [r3, #28]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	4619      	mov	r1, r3
 8005122:	6a38      	ldr	r0, [r7, #32]
 8005124:	f7fb f83d 	bl	80001a2 <lfs_min>
 8005128:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d026      	beq.n	8005184 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f103 0408 	add.w	r4, r3, #8
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 8005146:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	889b      	ldrh	r3, [r3, #4]
 800514c:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800514e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800515a:	69b8      	ldr	r0, [r7, #24]
 800515c:	9005      	str	r0, [sp, #20]
 800515e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005160:	9004      	str	r0, [sp, #16]
 8005162:	9103      	str	r1, [sp, #12]
 8005164:	9302      	str	r3, [sp, #8]
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <lfs_file_flushedread+0x1a0>)
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	9200      	str	r2, [sp, #0]
 800516c:	462b      	mov	r3, r5
 800516e:	2200      	movs	r2, #0
 8005170:	4621      	mov	r1, r4
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7fc f9ff 	bl	8001576 <lfs_dir_getread>
 8005178:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01d      	beq.n	80051bc <lfs_file_flushedread+0x164>
                return err;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	e034      	b.n	80051ee <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 800518e:	69dc      	ldr	r4, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005198:	69b9      	ldr	r1, [r7, #24]
 800519a:	9103      	str	r1, [sp, #12]
 800519c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800519e:	9102      	str	r1, [sp, #8]
 80051a0:	9201      	str	r2, [sp, #4]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	4623      	mov	r3, r4
 80051a6:	4602      	mov	r2, r0
 80051a8:	2100      	movs	r1, #0
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f7fb f8cc 	bl	8000348 <lfs_bd_read>
 80051b0:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <lfs_file_flushedread+0x164>
                return err;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	e018      	b.n	80051ee <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	441a      	add	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	441a      	add	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80051d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	4413      	add	r3, r2
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 80051dc:	6a3a      	ldr	r2, [r7, #32]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f47f af56 	bne.w	8005098 <lfs_file_flushedread+0x40>
    }

    return size;
 80051ec:	683b      	ldr	r3, [r7, #0]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3728      	adds	r7, #40	; 0x28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bdb0      	pop	{r4, r5, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	fff7fc00 	.word	0xfff7fc00

080051fc <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <lfs_file_read_+0x28>
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <lfs_file_read_+0x60>)
 8005218:	4a11      	ldr	r2, [pc, #68]	; (8005260 <lfs_file_read_+0x64>)
 800521a:	f640 51c8 	movw	r1, #3528	; 0xdc8
 800521e:	4811      	ldr	r0, [pc, #68]	; (8005264 <lfs_file_read_+0x68>)
 8005220:	f004 fc54 	bl	8009acc <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fd9c 	bl	8004d70 <lfs_file_flush>
 8005238:	6178      	str	r0, [r7, #20]
        if (err) {
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <lfs_file_read_+0x48>
            return err;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	e006      	b.n	8005252 <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f7ff ff04 	bl	8005058 <lfs_file_flushedread>
 8005250:	4603      	mov	r3, r0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	0800b2a4 	.word	0x0800b2a4
 8005260:	0800c8e4 	.word	0x0800c8e4
 8005264:	0800af70 	.word	0x0800af70

08005268 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005268:	b5b0      	push	{r4, r5, r7, lr}
 800526a:	b090      	sub	sp, #64	; 0x40
 800526c:	af04      	add	r7, sp, #16
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 80f4 	beq.w	8005474 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	441a      	add	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f7fa ff72 	bl	8000184 <lfs_max>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 80052a6:	429a      	cmp	r2, r3
 80052a8:	f240 80e4 	bls.w	8005474 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff fd3c 	bl	8004d2c <lfs_file_outline>
 80052b4:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80db 	beq.w	8005474 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	e0d7      	b.n	800547e <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d006      	beq.n	80052e8 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052e2:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d16d      	bne.n	80053c4 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d159      	bne.n	80053a8 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d12f      	bne.n	8005360 <lfs_file_flushedwrite+0xf8>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02b      	beq.n	8005360 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800531a:	3a01      	subs	r2, #1
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005320:	2000      	movs	r0, #0
 8005322:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005324:	f107 0010 	add.w	r0, r7, #16
 8005328:	9003      	str	r0, [sp, #12]
 800532a:	9102      	str	r1, [sp, #8]
 800532c:	9201      	str	r2, [sp, #4]
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	462b      	mov	r3, r5
 8005332:	4622      	mov	r2, r4
 8005334:	2100      	movs	r1, #0
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff f827 	bl	800438a <lfs_ctz_find>
 800533c:	6238      	str	r0, [r7, #32]
                    if (err) {
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	e094      	b.n	800547e <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	3340      	adds	r3, #64	; 0x40
 8005358:	4619      	mov	r1, r3
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f7fa ffde 	bl	800031c <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7fb feda 	bl	800111a <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800536c:	68fc      	ldr	r4, [r7, #12]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	3238      	adds	r2, #56	; 0x38
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	313c      	adds	r1, #60	; 0x3c
 800537e:	9102      	str	r1, [sp, #8]
 8005380:	9201      	str	r2, [sp, #4]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	462b      	mov	r3, r5
 8005386:	4622      	mov	r2, r4
 8005388:	4601      	mov	r1, r0
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7ff f868 	bl	8004460 <lfs_ctz_extend>
 8005390:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00f      	beq.n	80053b8 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	e06a      	b.n	800547e <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f06f 0201 	mvn.w	r2, #1
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	4619      	mov	r1, r3
 80053d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d4:	f7fa fee5 	bl	80001a2 <lfs_min>
 80053d8:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80053e0:	68fc      	ldr	r4, [r7, #12]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053ea:	69b9      	ldr	r1, [r7, #24]
 80053ec:	9103      	str	r1, [sp, #12]
 80053ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053f0:	9102      	str	r1, [sp, #8]
 80053f2:	9201      	str	r2, [sp, #4]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	2301      	movs	r3, #1
 80053f8:	4622      	mov	r2, r4
 80053fa:	4601      	mov	r1, r0
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7fb fa35 	bl	800086c <lfs_bd_prog>
 8005402:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01c      	beq.n	8005444 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005410:	d007      	beq.n	8005422 <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	e02d      	b.n	800547e <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8005422:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff fba6 	bl	8004b78 <lfs_file_relocate>
 800542c:	6178      	str	r0, [r7, #20]
            if (err) {
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0d2      	beq.n	80053da <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	e01c      	b.n	800547e <lfs_file_flushedwrite+0x216>
            break;
 8005444:	bf00      	nop
            }
        }

        file->pos += diff;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	441a      	add	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	441a      	add	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800545e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	4413      	add	r3, r2
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ckpoint(lfs);
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7fb fe53 	bl	800111a <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	2b00      	cmp	r3, #0
 8005478:	f47f af29 	bne.w	80052ce <lfs_file_flushedwrite+0x66>
    }

    return size;
 800547c:	683b      	ldr	r3, [r7, #0]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3730      	adds	r7, #48	; 0x30
 8005482:	46bd      	mov	sp, r7
 8005484:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005488 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <lfs_file_write_+0x28>
 80054a2:	4b38      	ldr	r3, [pc, #224]	; (8005584 <lfs_file_write_+0xfc>)
 80054a4:	4a38      	ldr	r2, [pc, #224]	; (8005588 <lfs_file_write_+0x100>)
 80054a6:	f640 612f 	movw	r1, #3631	; 0xe2f
 80054aa:	4838      	ldr	r0, [pc, #224]	; (800558c <lfs_file_write_+0x104>)
 80054ac:	f004 fb0e 	bl	8009acc <__assert_func>

    if (file->flags & LFS_F_READING) {
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d009      	beq.n	80054d0 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff fc56 	bl	8004d70 <lfs_file_flush>
 80054c4:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <lfs_file_write_+0x48>
            return err;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	e055      	b.n	800557c <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <lfs_file_write_+0x68>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d203      	bcs.n	80054f0 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	441a      	add	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d902      	bls.n	8005506 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005500:	f06f 031a 	mvn.w	r3, #26
 8005504:	e03a      	b.n	800557c <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d121      	bne.n	8005556 <lfs_file_write_+0xce>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	429a      	cmp	r2, r3
 800551c:	d91b      	bls.n	8005556 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800552c:	e00e      	b.n	800554c <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 800552e:	2300      	movs	r3, #0
 8005530:	75fb      	strb	r3, [r7, #23]
 8005532:	f107 0217 	add.w	r2, r7, #23
 8005536:	2301      	movs	r3, #1
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff fe94 	bl	8005268 <lfs_file_flushedwrite>
 8005540:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	2b00      	cmp	r3, #0
 8005546:	da01      	bge.n	800554c <lfs_file_write_+0xc4>
                return res;
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	e017      	b.n	800557c <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005550:	6a3a      	ldr	r2, [r7, #32]
 8005552:	429a      	cmp	r2, r3
 8005554:	d8eb      	bhi.n	800552e <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff fe83 	bl	8005268 <lfs_file_flushedwrite>
 8005562:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	da01      	bge.n	800556e <lfs_file_write_+0xe6>
        return nsize;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	e006      	b.n	800557c <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 800557a:	69bb      	ldr	r3, [r7, #24]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3728      	adds	r7, #40	; 0x28
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	0800b2d4 	.word	0x0800b2d4
 8005588:	0800c8f4 	.word	0x0800c8f4
 800558c:	0800af70 	.word	0x0800af70

08005590 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005590:	b590      	push	{r4, r7, lr}
 8005592:	b08d      	sub	sp, #52	; 0x34
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <lfs_init+0x34>
 80055b6:	4b96      	ldr	r3, [pc, #600]	; (8005810 <lfs_init+0x280>)
 80055b8:	4a96      	ldr	r2, [pc, #600]	; (8005814 <lfs_init+0x284>)
 80055ba:	f241 015b 	movw	r1, #4187	; 0x105b
 80055be:	4896      	ldr	r0, [pc, #600]	; (8005818 <lfs_init+0x288>)
 80055c0:	f004 fa84 	bl	8009acc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <lfs_init+0x4c>
 80055ce:	4b93      	ldr	r3, [pc, #588]	; (800581c <lfs_init+0x28c>)
 80055d0:	4a90      	ldr	r2, [pc, #576]	; (8005814 <lfs_init+0x284>)
 80055d2:	f241 015c 	movw	r1, #4188	; 0x105c
 80055d6:	4890      	ldr	r0, [pc, #576]	; (8005818 <lfs_init+0x288>)
 80055d8:	f004 fa78 	bl	8009acc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <lfs_init+0x64>
 80055e6:	4b8e      	ldr	r3, [pc, #568]	; (8005820 <lfs_init+0x290>)
 80055e8:	4a8a      	ldr	r2, [pc, #552]	; (8005814 <lfs_init+0x284>)
 80055ea:	f241 015d 	movw	r1, #4189	; 0x105d
 80055ee:	488a      	ldr	r0, [pc, #552]	; (8005818 <lfs_init+0x288>)
 80055f0:	f004 fa6c 	bl	8009acc <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055fe:	6952      	ldr	r2, [r2, #20]
 8005600:	fbb3 f1f2 	udiv	r1, r3, r2
 8005604:	fb02 f201 	mul.w	r2, r2, r1
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d006      	beq.n	800561c <lfs_init+0x8c>
 800560e:	4b85      	ldr	r3, [pc, #532]	; (8005824 <lfs_init+0x294>)
 8005610:	4a80      	ldr	r2, [pc, #512]	; (8005814 <lfs_init+0x284>)
 8005612:	f241 0161 	movw	r1, #4193	; 0x1061
 8005616:	4880      	ldr	r0, [pc, #512]	; (8005818 <lfs_init+0x288>)
 8005618:	f004 fa58 	bl	8009acc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005626:	6992      	ldr	r2, [r2, #24]
 8005628:	fbb3 f1f2 	udiv	r1, r3, r2
 800562c:	fb02 f201 	mul.w	r2, r2, r1
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d006      	beq.n	8005644 <lfs_init+0xb4>
 8005636:	4b7c      	ldr	r3, [pc, #496]	; (8005828 <lfs_init+0x298>)
 8005638:	4a76      	ldr	r2, [pc, #472]	; (8005814 <lfs_init+0x284>)
 800563a:	f241 0162 	movw	r1, #4194	; 0x1062
 800563e:	4876      	ldr	r0, [pc, #472]	; (8005818 <lfs_init+0x288>)
 8005640:	f004 fa44 	bl	8009acc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800564e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005650:	fbb3 f1f2 	udiv	r1, r3, r2
 8005654:	fb02 f201 	mul.w	r2, r2, r1
 8005658:	1a9b      	subs	r3, r3, r2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d006      	beq.n	800566c <lfs_init+0xdc>
 800565e:	4b73      	ldr	r3, [pc, #460]	; (800582c <lfs_init+0x29c>)
 8005660:	4a6c      	ldr	r2, [pc, #432]	; (8005814 <lfs_init+0x284>)
 8005662:	f241 0163 	movw	r1, #4195	; 0x1063
 8005666:	486c      	ldr	r0, [pc, #432]	; (8005818 <lfs_init+0x288>)
 8005668:	f004 fa30 	bl	8009acc <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	2b7f      	cmp	r3, #127	; 0x7f
 8005674:	d806      	bhi.n	8005684 <lfs_init+0xf4>
 8005676:	4b6e      	ldr	r3, [pc, #440]	; (8005830 <lfs_init+0x2a0>)
 8005678:	4a66      	ldr	r2, [pc, #408]	; (8005814 <lfs_init+0x284>)
 800567a:	f241 0166 	movw	r1, #4198	; 0x1066
 800567e:	4866      	ldr	r0, [pc, #408]	; (8005818 <lfs_init+0x288>)
 8005680:	f004 fa24 	bl	8009acc <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	3b08      	subs	r3, #8
 800568c:	f04f 32ff 	mov.w	r2, #4294967295
 8005690:	fbb2 f3f3 	udiv	r3, r2, r3
 8005694:	4618      	mov	r0, r3
 8005696:	f7fa fdb9 	bl	800020c <lfs_npw2>
 800569a:	4603      	mov	r3, r0
 800569c:	009a      	lsls	r2, r3, #2
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d906      	bls.n	80056b6 <lfs_init+0x126>
 80056a8:	4b62      	ldr	r3, [pc, #392]	; (8005834 <lfs_init+0x2a4>)
 80056aa:	4a5a      	ldr	r2, [pc, #360]	; (8005814 <lfs_init+0x284>)
 80056ac:	f241 0169 	movw	r1, #4201	; 0x1069
 80056b0:	4859      	ldr	r0, [pc, #356]	; (8005818 <lfs_init+0x288>)
 80056b2:	f004 fa0b 	bl	8009acc <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <lfs_init+0x13e>
 80056c0:	4b5d      	ldr	r3, [pc, #372]	; (8005838 <lfs_init+0x2a8>)
 80056c2:	4a54      	ldr	r2, [pc, #336]	; (8005814 <lfs_init+0x284>)
 80056c4:	f241 0172 	movw	r1, #4210	; 0x1072
 80056c8:	4853      	ldr	r0, [pc, #332]	; (8005818 <lfs_init+0x288>)
 80056ca:	f004 f9ff 	bl	8009acc <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00f      	beq.n	80056f8 <lfs_init+0x168>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d206      	bcs.n	80056f8 <lfs_init+0x168>
 80056ea:	4b54      	ldr	r3, [pc, #336]	; (800583c <lfs_init+0x2ac>)
 80056ec:	4a49      	ldr	r2, [pc, #292]	; (8005814 <lfs_init+0x284>)
 80056ee:	f241 0178 	movw	r1, #4216	; 0x1078
 80056f2:	4849      	ldr	r0, [pc, #292]	; (8005818 <lfs_init+0x288>)
 80056f4:	f004 f9ea 	bl	8009acc <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d00e      	beq.n	8005722 <lfs_init+0x192>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	429a      	cmp	r2, r3
 8005712:	d906      	bls.n	8005722 <lfs_init+0x192>
 8005714:	4b4a      	ldr	r3, [pc, #296]	; (8005840 <lfs_init+0x2b0>)
 8005716:	4a3f      	ldr	r2, [pc, #252]	; (8005814 <lfs_init+0x284>)
 8005718:	f241 017a 	movw	r1, #4218	; 0x107a
 800571c:	483e      	ldr	r0, [pc, #248]	; (8005818 <lfs_init+0x288>)
 800571e:	f004 f9d5 	bl	8009acc <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	e010      	b.n	800575a <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	4618      	mov	r0, r3
 8005740:	f7fa fdc7 	bl	80002d2 <lfs_malloc>
 8005744:	4602      	mov	r2, r0
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d103      	bne.n	800575a <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8005752:	f06f 030b 	mvn.w	r3, #11
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005758:	e163      	b.n	8005a22 <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	61da      	str	r2, [r3, #28]
 800576e:	e010      	b.n	8005792 <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	4618      	mov	r0, r3
 8005778:	f7fa fdab 	bl	80002d2 <lfs_malloc>
 800577c:	4602      	mov	r2, r0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 800578a:	f06f 030b 	mvn.w	r3, #11
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005790:	e147      	b.n	8005a22 <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fa fdc0 	bl	800031c <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3310      	adds	r3, #16
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fa fdba 	bl	800031c <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <lfs_init+0x230>
 80057b2:	4b24      	ldr	r3, [pc, #144]	; (8005844 <lfs_init+0x2b4>)
 80057b4:	4a17      	ldr	r2, [pc, #92]	; (8005814 <lfs_init+0x284>)
 80057b6:	f241 0199 	movw	r1, #4249	; 0x1099
 80057ba:	4817      	ldr	r0, [pc, #92]	; (8005818 <lfs_init+0x288>)
 80057bc:	f004 f986 	bl	8009acc <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	665a      	str	r2, [r3, #100]	; 0x64
 80057d4:	e010      	b.n	80057f8 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fa fd78 	bl	80002d2 <lfs_malloc>
 80057e2:	4602      	mov	r2, r0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->lookahead.buffer) {
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d103      	bne.n	80057f8 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 80057f0:	f06f 030b 	mvn.w	r3, #11
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80057f6:	e114      	b.n	8005a22 <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	2bff      	cmp	r3, #255	; 0xff
 8005800:	d924      	bls.n	800584c <lfs_init+0x2bc>
 8005802:	4b11      	ldr	r3, [pc, #68]	; (8005848 <lfs_init+0x2b8>)
 8005804:	4a03      	ldr	r2, [pc, #12]	; (8005814 <lfs_init+0x284>)
 8005806:	f241 01a5 	movw	r1, #4261	; 0x10a5
 800580a:	4803      	ldr	r0, [pc, #12]	; (8005818 <lfs_init+0x288>)
 800580c:	f004 f95e 	bl	8009acc <__assert_func>
 8005810:	0800b304 	.word	0x0800b304
 8005814:	0800c904 	.word	0x0800c904
 8005818:	0800af70 	.word	0x0800af70
 800581c:	0800b320 	.word	0x0800b320
 8005820:	0800b33c 	.word	0x0800b33c
 8005824:	0800b358 	.word	0x0800b358
 8005828:	0800b388 	.word	0x0800b388
 800582c:	0800b3b8 	.word	0x0800b3b8
 8005830:	0800b3ec 	.word	0x0800b3ec
 8005834:	0800b408 	.word	0x0800b408
 8005838:	0800b454 	.word	0x0800b454
 800583c:	0800b470 	.word	0x0800b470
 8005840:	0800b4c4 	.word	0x0800b4c4
 8005844:	0800b524 	.word	0x0800b524
 8005848:	0800b544 	.word	0x0800b544
    lfs->name_max = lfs->cfg->name_max;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	22ff      	movs	r2, #255	; 0xff
 8005862:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	2b00      	cmp	r3, #0
 800586c:	da06      	bge.n	800587c <lfs_init+0x2ec>
 800586e:	4b71      	ldr	r3, [pc, #452]	; (8005a34 <lfs_init+0x4a4>)
 8005870:	4a71      	ldr	r2, [pc, #452]	; (8005a38 <lfs_init+0x4a8>)
 8005872:	f241 01ab 	movw	r1, #4267	; 0x10ab
 8005876:	4871      	ldr	r0, [pc, #452]	; (8005a3c <lfs_init+0x4ac>)
 8005878:	f004 f928 	bl	8009acc <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005894:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800589a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800589c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d906      	bls.n	80058b2 <lfs_init+0x322>
 80058a4:	4b66      	ldr	r3, [pc, #408]	; (8005a40 <lfs_init+0x4b0>)
 80058a6:	4a64      	ldr	r2, [pc, #400]	; (8005a38 <lfs_init+0x4a8>)
 80058a8:	f241 01b1 	movw	r1, #4273	; 0x10b1
 80058ac:	4863      	ldr	r0, [pc, #396]	; (8005a3c <lfs_init+0x4ac>)
 80058ae:	f004 f90d 	bl	8009acc <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d103      	bne.n	80058cc <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80058ca:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d906      	bls.n	80058ea <lfs_init+0x35a>
 80058dc:	4b59      	ldr	r3, [pc, #356]	; (8005a44 <lfs_init+0x4b4>)
 80058de:	4a56      	ldr	r2, [pc, #344]	; (8005a38 <lfs_init+0x4a8>)
 80058e0:	f241 01b7 	movw	r1, #4279	; 0x10b7
 80058e4:	4855      	ldr	r0, [pc, #340]	; (8005a3c <lfs_init+0x4ac>)
 80058e6:	f004 f8f1 	bl	8009acc <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d00e      	beq.n	8005914 <lfs_init+0x384>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	429a      	cmp	r2, r3
 8005904:	d906      	bls.n	8005914 <lfs_init+0x384>
 8005906:	4b50      	ldr	r3, [pc, #320]	; (8005a48 <lfs_init+0x4b8>)
 8005908:	4a4b      	ldr	r2, [pc, #300]	; (8005a38 <lfs_init+0x4a8>)
 800590a:	f241 01b9 	movw	r1, #4281	; 0x10b9
 800590e:	484b      	ldr	r0, [pc, #300]	; (8005a3c <lfs_init+0x4ac>)
 8005910:	f004 f8dc 	bl	8009acc <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	d00d      	beq.n	800593c <lfs_init+0x3ac>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800592a:	429a      	cmp	r2, r3
 800592c:	d906      	bls.n	800593c <lfs_init+0x3ac>
 800592e:	4b47      	ldr	r3, [pc, #284]	; (8005a4c <lfs_init+0x4bc>)
 8005930:	4a41      	ldr	r2, [pc, #260]	; (8005a38 <lfs_init+0x4a8>)
 8005932:	f241 01bb 	movw	r1, #4283	; 0x10bb
 8005936:	4841      	ldr	r0, [pc, #260]	; (8005a3c <lfs_init+0x4ac>)
 8005938:	f004 f8c8 	bl	8009acc <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d019      	beq.n	800597c <lfs_init+0x3ec>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800594c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <lfs_init+0x3d2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800595c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595e:	08db      	lsrs	r3, r3, #3
 8005960:	e003      	b.n	800596a <lfs_init+0x3da>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	08db      	lsrs	r3, r3, #3
 800596a:	4293      	cmp	r3, r2
 800596c:	d206      	bcs.n	800597c <lfs_init+0x3ec>
 800596e:	4b38      	ldr	r3, [pc, #224]	; (8005a50 <lfs_init+0x4c0>)
 8005970:	4a31      	ldr	r2, [pc, #196]	; (8005a38 <lfs_init+0x4a8>)
 8005972:	f241 01bd 	movw	r1, #4285	; 0x10bd
 8005976:	4831      	ldr	r0, [pc, #196]	; (8005a3c <lfs_init+0x4ac>)
 8005978:	f004 f8a8 	bl	8009acc <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	67da      	str	r2, [r3, #124]	; 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d103      	bne.n	8005998 <lfs_init+0x408>
        lfs->inline_max = 0;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	67da      	str	r2, [r3, #124]	; 0x7c
 8005996:	e022      	b.n	80059de <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d11e      	bne.n	80059de <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->inline_max = lfs_min(
 80059a4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d004      	beq.n	80059be <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 80059ba:	08db      	lsrs	r3, r3, #3
 80059bc:	e003      	b.n	80059c6 <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c2:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 80059c4:	08db      	lsrs	r3, r3, #3
 80059c6:	4619      	mov	r1, r3
 80059c8:	4610      	mov	r0, r2
 80059ca:	f7fa fbea 	bl	80001a2 <lfs_min>
 80059ce:	4603      	mov	r3, r0
 80059d0:	4619      	mov	r1, r3
 80059d2:	4620      	mov	r0, r4
 80059d4:	f7fa fbe5 	bl	80001a2 <lfs_min>
 80059d8:	4602      	mov	r2, r0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f04f 32ff 	mov.w	r2, #4294967295
 80059e4:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	333c      	adds	r3, #60	; 0x3c
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	605a      	str	r2, [r3, #4]
 8005a04:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3330      	adds	r3, #48	; 0x30
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	605a      	str	r2, [r3, #4]
 8005a10:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3348      	adds	r3, #72	; 0x48
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	605a      	str	r2, [r3, #4]
 8005a1c:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e003      	b.n	8005a2a <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f816 	bl	8005a54 <lfs_deinit>
    return err;
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3734      	adds	r7, #52	; 0x34
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd90      	pop	{r4, r7, pc}
 8005a32:	bf00      	nop
 8005a34:	0800b560 	.word	0x0800b560
 8005a38:	0800c904 	.word	0x0800c904
 8005a3c:	0800af70 	.word	0x0800af70
 8005a40:	0800b584 	.word	0x0800b584
 8005a44:	0800b5a0 	.word	0x0800b5a0
 8005a48:	0800b5d0 	.word	0x0800b5d0
 8005a4c:	0800b628 	.word	0x0800b628
 8005a50:	0800b678 	.word	0x0800b678

08005a54 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fa fc3d 	bl	80002ea <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fa fc33 	bl	80002ea <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fa fc29 	bl	80002ea <lfs_free>
    }

    return 0;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b0a0      	sub	sp, #128	; 0x80
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
    int err = 0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff fd6b 	bl	8005590 <lfs_init>
 8005aba:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005abc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <lfs_format_+0x22>
            return err;
 8005ac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ac4:	e08d      	b.n	8005be2 <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <lfs_format_+0x38>
 8005ace:	4b47      	ldr	r3, [pc, #284]	; (8005bec <lfs_format_+0x148>)
 8005ad0:	4a47      	ldr	r2, [pc, #284]	; (8005bf0 <lfs_format_+0x14c>)
 8005ad2:	f241 01fd 	movw	r1, #4349	; 0x10fd
 8005ad6:	4847      	ldr	r0, [pc, #284]	; (8005bf4 <lfs_format_+0x150>)
 8005ad8:	f003 fff8 	bl	8009acc <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2100      	movs	r1, #0
 8005aea:	f004 f875 	bl	8009bd8 <memset>
        lfs->lookahead.start = 0;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afa:	00da      	lsls	r2, r3, #3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f7fa fb4d 	bl	80001a2 <lfs_min>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ckpoint(lfs);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fb fb00 	bl	800111a <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8005b1a:	f107 030c 	add.w	r3, r7, #12
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7fd f9ef 	bl	8002f04 <lfs_dir_alloc>
 8005b26:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005b28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d150      	bne.n	8005bd0 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb facc 	bl	80010cc <lfs_fs_disk_version>
 8005b34:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 8005b36:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b3c:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8005b3e:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8005b44:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8005b4a:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8005b50:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 8005b56:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8005b58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fb fa2f 	bl	8000fc0 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8005b62:	4b25      	ldr	r3, [pc, #148]	; (8005bf8 <lfs_format_+0x154>)
 8005b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b66:	2300      	movs	r3, #0
 8005b68:	653b      	str	r3, [r7, #80]	; 0x50
 8005b6a:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <lfs_format_+0x158>)
 8005b6c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b6e:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <lfs_format_+0x15c>)
 8005b70:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b72:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <lfs_format_+0x160>)
 8005b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b7c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005b80:	f107 010c 	add.w	r1, r7, #12
 8005b84:	2303      	movs	r3, #3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fe fba2 	bl	80042d0 <lfs_dir_commit>
 8005b8c:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8005b8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11f      	bne.n	8005bd4 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8005b94:	2300      	movs	r3, #0
 8005b96:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8005b9a:	f107 010c 	add.w	r1, r7, #12
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fe fb94 	bl	80042d0 <lfs_dir_commit>
 8005ba8:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005baa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d113      	bne.n	8005bd8 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005bbc:	f107 030c 	add.w	r3, r7, #12
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fc fde6 	bl	8002794 <lfs_dir_fetch>
 8005bc8:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8005bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	e004      	b.n	8005bda <lfs_format_+0x136>
            goto cleanup;
 8005bd0:	bf00      	nop
 8005bd2:	e002      	b.n	8005bda <lfs_format_+0x136>
            goto cleanup;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <lfs_format_+0x136>
            goto cleanup;
 8005bd8:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff ff3a 	bl	8005a54 <lfs_deinit>
    return err;
 8005be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3780      	adds	r7, #128	; 0x80
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	0800b708 	.word	0x0800b708
 8005bf0:	0800c910 	.word	0x0800c910
 8005bf4:	0800af70 	.word	0x0800af70
 8005bf8:	40100000 	.word	0x40100000
 8005bfc:	0ff00008 	.word	0x0ff00008
 8005c00:	0800b720 	.word	0x0800b720
 8005c04:	20100018 	.word	0x20100018

08005c08 <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8005c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0a:	b0a1      	sub	sp, #132	; 0x84
 8005c0c:	af04      	add	r7, sp, #16
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8005c12:	6839      	ldr	r1, [r7, #0]
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff fcbb 	bl	8005590 <lfs_init>
 8005c1a:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err) {
 8005c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <lfs_mount_+0x1e>
        return err;
 8005c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c24:	e202      	b.n	800602c <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8005c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f003 ffd2 	bl	8009bd8 <memset>
 8005c34:	2301      	movs	r3, #1
 8005c36:	657b      	str	r3, [r7, #84]	; 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8005c38:	4a9a      	ldr	r2, [pc, #616]	; (8005ea4 <lfs_mount_+0x29c>)
 8005c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c42:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8005c46:	2301      	movs	r3, #1
 8005c48:	66bb      	str	r3, [r7, #104]	; 0x68
    lfs_size_t tortoise_period = 1;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	667b      	str	r3, [r7, #100]	; 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 8005c4e:	e199      	b.n	8005f84 <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8005c50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c58:	3318      	adds	r3, #24
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fa ff3a 	bl	8000ad6 <lfs_pair_issync>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 8005c68:	4b8f      	ldr	r3, [pc, #572]	; (8005ea8 <lfs_mount_+0x2a0>)
 8005c6a:	f241 1246 	movw	r2, #4422	; 0x1146
 8005c6e:	498f      	ldr	r1, [pc, #572]	; (8005eac <lfs_mount_+0x2a4>)
 8005c70:	488f      	ldr	r0, [pc, #572]	; (8005eb0 <lfs_mount_+0x2a8>)
 8005c72:	f001 fc7d 	bl	8007570 <myprintf>
            err = LFS_ERR_CORRUPT;
 8005c76:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8005c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto cleanup;
 8005c7c:	e1d2      	b.n	8006024 <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 8005c7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d108      	bne.n	8005c98 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 8005c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c88:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise[1] = dir.tail[1];
 8005c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
            tortoise_i = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	66bb      	str	r3, [r7, #104]	; 0x68
            tortoise_period *= 2;
 8005c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	667b      	str	r3, [r7, #100]	; 0x64
        }
        tortoise_i += 1;
 8005c98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	66bb      	str	r3, [r7, #104]	; 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca2:	4b84      	ldr	r3, [pc, #528]	; (8005eb4 <lfs_mount_+0x2ac>)
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8005caa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005cae:	f103 0218 	add.w	r2, r3, #24
 8005cb2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cba:	9303      	str	r3, [sp, #12]
 8005cbc:	4b7e      	ldr	r3, [pc, #504]	; (8005eb8 <lfs_mount_+0x2b0>)
 8005cbe:	9302      	str	r3, [sp, #8]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	4b7d      	ldr	r3, [pc, #500]	; (8005ebc <lfs_mount_+0x2b4>)
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	4b7d      	ldr	r3, [pc, #500]	; (8005ec0 <lfs_mount_+0x2b8>)
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fc f99a 	bl	8002004 <lfs_dir_fetchmatch>
 8005cd0:	65f8      	str	r0, [r7, #92]	; 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8005cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da02      	bge.n	8005cde <lfs_mount_+0xd6>
            err = tag;
 8005cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cda:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto cleanup;
 8005cdc:	e1a2      	b.n	8006024 <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8005cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8142 	beq.w	8005f6a <lfs_mount_+0x362>
 8005ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fa ff61 	bl	8000bb0 <lfs_tag_isdelete>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f083 0301 	eor.w	r3, r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 8137 	beq.w	8005f6a <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 8005cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8005d02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8005d08:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005d0c:	f107 030c 	add.w	r3, r7, #12
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	4b6c      	ldr	r3, [pc, #432]	; (8005ec4 <lfs_mount_+0x2bc>)
 8005d14:	4a6a      	ldr	r2, [pc, #424]	; (8005ec0 <lfs_mount_+0x2b8>)
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fb fc12 	bl	8001540 <lfs_dir_get>
 8005d1c:	65f8      	str	r0, [r7, #92]	; 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8005d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	da02      	bge.n	8005d2a <lfs_mount_+0x122>
                err = tag;
 8005d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d26:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 8005d28:	e17c      	b.n	8006024 <lfs_mount_+0x41c>
            }
            lfs_superblock_fromle32(&superblock);
 8005d2a:	f107 030c 	add.w	r3, r7, #12
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fb f90e 	bl	8000f50 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	0c1b      	lsrs	r3, r3, #16
 8005d38:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fb f9ce 	bl	80010e4 <lfs_fs_disk_version_major>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d108      	bne.n	8005d66 <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7fb f9d3 	bl	8001100 <lfs_fs_disk_version_minor>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d91d      	bls.n	8005da2 <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 8005d66:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
 8005d6a:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fb f9b8 	bl	80010e4 <lfs_fs_disk_version_major>
 8005d74:	4603      	mov	r3, r0
 8005d76:	461e      	mov	r6, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7fb f9c1 	bl	8001100 <lfs_fs_disk_version_minor>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	4b49      	ldr	r3, [pc, #292]	; (8005ea8 <lfs_mount_+0x2a0>)
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	9202      	str	r2, [sp, #8]
 8005d88:	9601      	str	r6, [sp, #4]
 8005d8a:	9400      	str	r4, [sp, #0]
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	f241 1274 	movw	r2, #4468	; 0x1174
 8005d92:	4946      	ldr	r1, [pc, #280]	; (8005eac <lfs_mount_+0x2a4>)
 8005d94:	484c      	ldr	r0, [pc, #304]	; (8005ec8 <lfs_mount_+0x2c0>)
 8005d96:	f001 fbeb 	bl	8007570 <myprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8005d9a:	f06f 0315 	mvn.w	r3, #21
 8005d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 8005da0:	e0e2      	b.n	8005f68 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7fb f9a9 	bl	8001100 <lfs_fs_disk_version_minor>
 8005dae:	4603      	mov	r3, r0
 8005db0:	461a      	mov	r2, r3
 8005db2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d21c      	bcs.n	8005df4 <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 8005dba:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
 8005dbe:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fb f98e 	bl	80010e4 <lfs_fs_disk_version_major>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	461e      	mov	r6, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7fb f997 	bl	8001100 <lfs_fs_disk_version_minor>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4b34      	ldr	r3, [pc, #208]	; (8005ea8 <lfs_mount_+0x2a0>)
 8005dd8:	9303      	str	r3, [sp, #12]
 8005dda:	9202      	str	r2, [sp, #8]
 8005ddc:	9601      	str	r6, [sp, #4]
 8005dde:	9400      	str	r4, [sp, #0]
 8005de0:	462b      	mov	r3, r5
 8005de2:	f241 1283 	movw	r2, #4483	; 0x1183
 8005de6:	4931      	ldr	r1, [pc, #196]	; (8005eac <lfs_mount_+0x2a4>)
 8005de8:	4838      	ldr	r0, [pc, #224]	; (8005ecc <lfs_mount_+0x2c4>)
 8005dea:	f001 fbc1 	bl	8007570 <myprintf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 8005df4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fbb6 	bl	800656c <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d018      	beq.n	8005e38 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d910      	bls.n	8005e32 <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	4924      	ldr	r1, [pc, #144]	; (8005ea8 <lfs_mount_+0x2a0>)
 8005e18:	9101      	str	r1, [sp, #4]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	f241 1292 	movw	r2, #4498	; 0x1192
 8005e22:	4922      	ldr	r1, [pc, #136]	; (8005eac <lfs_mount_+0x2a4>)
 8005e24:	482a      	ldr	r0, [pc, #168]	; (8005ed0 <lfs_mount_+0x2c8>)
 8005e26:	f001 fba3 	bl	8007570 <myprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8005e2a:	f06f 0315 	mvn.w	r3, #21
 8005e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 8005e30:	e09a      	b.n	8005f68 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d018      	beq.n	8005e70 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d910      	bls.n	8005e6a <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4e:	4916      	ldr	r1, [pc, #88]	; (8005ea8 <lfs_mount_+0x2a0>)
 8005e50:	9101      	str	r1, [sp, #4]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	f241 129d 	movw	r2, #4509	; 0x119d
 8005e5a:	4914      	ldr	r1, [pc, #80]	; (8005eac <lfs_mount_+0x2a4>)
 8005e5c:	481d      	ldr	r0, [pc, #116]	; (8005ed4 <lfs_mount_+0x2cc>)
 8005e5e:	f001 fb87 	bl	8007570 <myprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8005e62:	f06f 0315 	mvn.w	r3, #21
 8005e66:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 8005e68:	e07e      	b.n	8005f68 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d040      	beq.n	8005ef8 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 8005e76:	6a3a      	ldr	r2, [r7, #32]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d92d      	bls.n	8005edc <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8005e80:	6a3a      	ldr	r2, [r7, #32]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e86:	4908      	ldr	r1, [pc, #32]	; (8005ea8 <lfs_mount_+0x2a0>)
 8005e88:	9101      	str	r1, [sp, #4]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8005e92:	4906      	ldr	r1, [pc, #24]	; (8005eac <lfs_mount_+0x2a4>)
 8005e94:	4810      	ldr	r0, [pc, #64]	; (8005ed8 <lfs_mount_+0x2d0>)
 8005e96:	f001 fb6b 	bl	8007570 <myprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8005e9a:	f06f 0315 	mvn.w	r3, #21
 8005e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
                    goto cleanup;
 8005ea0:	e062      	b.n	8005f68 <lfs_mount_+0x360>
 8005ea2:	bf00      	nop
 8005ea4:	0800b0c0 	.word	0x0800b0c0
 8005ea8:	0800b07c 	.word	0x0800b07c
 8005eac:	0800af70 	.word	0x0800af70
 8005eb0:	0800b72c 	.word	0x0800b72c
 8005eb4:	0800b720 	.word	0x0800b720
 8005eb8:	08002831 	.word	0x08002831
 8005ebc:	0ff00008 	.word	0x0ff00008
 8005ec0:	7ffffc00 	.word	0x7ffffc00
 8005ec4:	20100018 	.word	0x20100018
 8005ec8:	0800b758 	.word	0x0800b758
 8005ecc:	0800b790 	.word	0x0800b790
 8005ed0:	0800b7d0 	.word	0x0800b7d0
 8005ed4:	0800b804 	.word	0x0800b804
 8005ed8:	0800b838 	.word	0x0800b838
                }

                lfs->attr_max = superblock.attr_max;
 8005edc:	6a3a      	ldr	r2, [r7, #32]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	679a      	str	r2, [r3, #120]	; 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f7fa f958 	bl	80001a2 <lfs_min>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	67da      	str	r2, [r3, #124]	; 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d017      	beq.n	8005f32 <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d011      	beq.n	8005f32 <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	4947      	ldr	r1, [pc, #284]	; (8006034 <lfs_mount_+0x42c>)
 8005f18:	9101      	str	r1, [sp, #4]
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	f241 12b7 	movw	r2, #4535	; 0x11b7
 8005f22:	4945      	ldr	r1, [pc, #276]	; (8006038 <lfs_mount_+0x430>)
 8005f24:	4845      	ldr	r0, [pc, #276]	; (800603c <lfs_mount_+0x434>)
 8005f26:	f001 fb23 	bl	8007570 <myprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8005f2a:	f06f 0315 	mvn.w	r3, #21
 8005f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 8005f30:	e01a      	b.n	8005f68 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d012      	beq.n	8005f6a <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	4939      	ldr	r1, [pc, #228]	; (8006034 <lfs_mount_+0x42c>)
 8005f4e:	9101      	str	r1, [sp, #4]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	f44f 528e 	mov.w	r2, #4544	; 0x11c0
 8005f58:	4937      	ldr	r1, [pc, #220]	; (8006038 <lfs_mount_+0x430>)
 8005f5a:	4839      	ldr	r0, [pc, #228]	; (8006040 <lfs_mount_+0x438>)
 8005f5c:	f001 fb08 	bl	8007570 <myprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8005f60:	f06f 0315 	mvn.w	r3, #21
 8005f64:	66fb      	str	r3, [r7, #108]	; 0x6c
                goto cleanup;
 8005f66:	bf00      	nop
            goto cleanup;
 8005f68:	e05c      	b.n	8006024 <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fc fc28 	bl	80027cc <lfs_dir_getgstate>
 8005f7c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d14e      	bne.n	8006022 <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 8005f84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f88:	3318      	adds	r3, #24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fa fd60 	bl	8000a50 <lfs_pair_isnull>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f083 0301 	eor.w	r3, r3, #1
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f47f ae59 	bne.w	8005c50 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3330      	adds	r3, #48	; 0x30
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa feaf 	bl	8000d06 <lfs_gstate_iszero>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f083 0301 	eor.w	r3, r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d010      	beq.n	8005fd6 <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fc0:	481c      	ldr	r0, [pc, #112]	; (8006034 <lfs_mount_+0x42c>)
 8005fc2:	9002      	str	r0, [sp, #8]
 8005fc4:	9201      	str	r2, [sp, #4]
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	f241 12d0 	movw	r2, #4560	; 0x11d0
 8005fce:	491a      	ldr	r1, [pc, #104]	; (8006038 <lfs_mount_+0x430>)
 8005fd0:	481c      	ldr	r0, [pc, #112]	; (8006044 <lfs_mount_+0x43c>)
 8005fd2:	f001 facd 	bl	8007570 <myprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fa fddb 	bl	8000b96 <lfs_tag_isvalid>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f083 0301 	eor.w	r3, r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	441a      	add	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	333c      	adds	r3, #60	; 0x3c
 8005ffa:	3230      	adds	r2, #48	; 0x30
 8005ffc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ffe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800600a:	fbb3 f1f2 	udiv	r1, r3, r2
 800600e:	fb02 f201 	mul.w	r2, r2, r1
 8006012:	1a9a      	subs	r2, r3, r2
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fb f88b 	bl	8001134 <lfs_alloc_drop>

    return 0;
 800601e:	2300      	movs	r3, #0
 8006020:	e004      	b.n	800602c <lfs_mount_+0x424>
            goto cleanup;
 8006022:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f80f 	bl	8006048 <lfs_unmount_>
    return err;
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800602c:	4618      	mov	r0, r3
 800602e:	3774      	adds	r7, #116	; 0x74
 8006030:	46bd      	mov	sp, r7
 8006032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006034:	0800b07c 	.word	0x0800b07c
 8006038:	0800af70 	.word	0x0800af70
 800603c:	0800b86c 	.word	0x0800b86c
 8006040:	0800b8a0 	.word	0x0800b8a0
 8006044:	0800b8d0 	.word	0x0800b8d0

08006048 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fcff 	bl	8005a54 <lfs_deinit>
 8006056:	4603      	mov	r3, r0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8006060:	b590      	push	{r4, r7, lr}
 8006062:	b0a1      	sub	sp, #132	; 0x84
 8006064:	af04      	add	r7, sp, #16
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800606e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006072:	2220      	movs	r2, #32
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f003 fdae 	bl	8009bd8 <memset>
 800607c:	2301      	movs	r3, #1
 800607e:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006080:	4a9b      	ldr	r2, [pc, #620]	; (80062f0 <lfs_fs_traverse_+0x290>)
 8006082:	f107 031c 	add.w	r3, r7, #28
 8006086:	e892 0003 	ldmia.w	r2, {r0, r1}
 800608a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800608e:	2301      	movs	r3, #1
 8006090:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8006092:	2301      	movs	r3, #1
 8006094:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8006096:	e0c1      	b.n	800621c <lfs_fs_traverse_+0x1bc>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8006098:	f107 021c 	add.w	r2, r7, #28
 800609c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060a0:	3318      	adds	r3, #24
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fa fd16 	bl	8000ad6 <lfs_pair_issync>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d009      	beq.n	80060c4 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 80060b0:	4b90      	ldr	r3, [pc, #576]	; (80062f4 <lfs_fs_traverse_+0x294>)
 80060b2:	f241 222b 	movw	r2, #4651	; 0x122b
 80060b6:	4990      	ldr	r1, [pc, #576]	; (80062f8 <lfs_fs_traverse_+0x298>)
 80060b8:	4890      	ldr	r0, [pc, #576]	; (80062fc <lfs_fs_traverse_+0x29c>)
 80060ba:	f001 fa59 	bl	8007570 <myprintf>
            return LFS_ERR_CORRUPT;
 80060be:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80060c2:	e110      	b.n	80062e6 <lfs_fs_traverse_+0x286>
        }
        if (tortoise_i == tortoise_period) {
 80060c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d108      	bne.n	80060de <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 80060cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ce:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 80060d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d2:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 80060d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 80060de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e0:	3301      	adds	r3, #1
 80060e2:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 80060e4:	2300      	movs	r3, #0
 80060e6:	667b      	str	r3, [r7, #100]	; 0x64
 80060e8:	e014      	b.n	8006114 <lfs_fs_traverse_+0xb4>
            int err = cb(data, dir.tail[i]);
 80060ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ec:	3306      	adds	r3, #6
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80060f4:	4413      	add	r3, r2
 80060f6:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	4611      	mov	r1, r2
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
 8006102:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8006104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <lfs_fs_traverse_+0xae>
                return err;
 800610a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610c:	e0eb      	b.n	80062e6 <lfs_fs_traverse_+0x286>
        for (int i = 0; i < 2; i++) {
 800610e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006110:	3301      	adds	r3, #1
 8006112:	667b      	str	r3, [r7, #100]	; 0x64
 8006114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006116:	2b01      	cmp	r3, #1
 8006118:	dde7      	ble.n	80060ea <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800611a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800611e:	f103 0218 	add.w	r2, r3, #24
 8006122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006126:	4619      	mov	r1, r3
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7fc fb33 	bl	8002794 <lfs_dir_fetch>
 800612e:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8006130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <lfs_fs_traverse_+0xda>
            return err;
 8006136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006138:	e0d5      	b.n	80062e6 <lfs_fs_traverse_+0x286>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800613a:	2300      	movs	r3, #0
 800613c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006140:	e067      	b.n	8006212 <lfs_fs_traverse_+0x1b2>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006142:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006146:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006148:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800614c:	f043 0308 	orr.w	r3, r3, #8
 8006150:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006154:	f107 0214 	add.w	r2, r7, #20
 8006158:	9200      	str	r2, [sp, #0]
 800615a:	4a69      	ldr	r2, [pc, #420]	; (8006300 <lfs_fs_traverse_+0x2a0>)
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7fb f9ef 	bl	8001540 <lfs_dir_get>
 8006162:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 8006164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006166:	2b00      	cmp	r3, #0
 8006168:	da05      	bge.n	8006176 <lfs_fs_traverse_+0x116>
                if (tag == LFS_ERR_NOENT) {
 800616a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616c:	f113 0f02 	cmn.w	r3, #2
 8006170:	d049      	beq.n	8006206 <lfs_fs_traverse_+0x1a6>
                    continue;
                }
                return tag;
 8006172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006174:	e0b7      	b.n	80062e6 <lfs_fs_traverse_+0x286>
            }
            lfs_ctz_fromle32(&ctz);
 8006176:	f107 0314 	add.w	r3, r7, #20
 800617a:	4618      	mov	r0, r3
 800617c:	f7fa feb8 	bl	8000ef0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8006180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006182:	4618      	mov	r0, r3
 8006184:	f7fa fd44 	bl	8000c10 <lfs_tag_type3>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	f240 2302 	movw	r3, #514	; 0x202
 8006190:	429a      	cmp	r2, r3
 8006192:	d113      	bne.n	80061bc <lfs_fs_traverse_+0x15c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8006194:	68f9      	ldr	r1, [r7, #12]
 8006196:	6978      	ldr	r0, [r7, #20]
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	9202      	str	r2, [sp, #8]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	9201      	str	r2, [sp, #4]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	4603      	mov	r3, r0
 80061a6:	460a      	mov	r2, r1
 80061a8:	2100      	movs	r1, #0
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7fe fa60 	bl	8004670 <lfs_ctz_traverse>
 80061b0:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80061b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d027      	beq.n	8006208 <lfs_fs_traverse_+0x1a8>
                    return err;
 80061b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ba:	e094      	b.n	80062e6 <lfs_fs_traverse_+0x286>
                }
            } else if (includeorphans &&
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d022      	beq.n	8006208 <lfs_fs_traverse_+0x1a8>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 80061c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fa fd23 	bl	8000c10 <lfs_tag_type3>
 80061ca:	4603      	mov	r3, r0
            } else if (includeorphans &&
 80061cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d0:	d11a      	bne.n	8006208 <lfs_fs_traverse_+0x1a8>
                for (int i = 0; i < 2; i++) {
 80061d2:	2300      	movs	r3, #0
 80061d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d6:	e012      	b.n	80061fe <lfs_fs_traverse_+0x19e>
                    err = cb(data, (&ctz.head)[i]);
 80061d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	f107 0214 	add.w	r2, r7, #20
 80061e0:	4413      	add	r3, r2
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4611      	mov	r1, r2
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
 80061ec:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 80061ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <lfs_fs_traverse_+0x198>
                        return err;
 80061f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f6:	e076      	b.n	80062e6 <lfs_fs_traverse_+0x286>
                for (int i = 0; i < 2; i++) {
 80061f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061fa:	3301      	adds	r3, #1
 80061fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006200:	2b01      	cmp	r3, #1
 8006202:	dde9      	ble.n	80061d8 <lfs_fs_traverse_+0x178>
 8006204:	e000      	b.n	8006208 <lfs_fs_traverse_+0x1a8>
                    continue;
 8006206:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006208:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800620c:	3301      	adds	r3, #1
 800620e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006212:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006214:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8006218:	429a      	cmp	r2, r3
 800621a:	d392      	bcc.n	8006142 <lfs_fs_traverse_+0xe2>
    while (!lfs_pair_isnull(dir.tail)) {
 800621c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006220:	3318      	adds	r3, #24
 8006222:	4618      	mov	r0, r3
 8006224:	f7fa fc14 	bl	8000a50 <lfs_pair_isnull>
 8006228:	4603      	mov	r3, r0
 800622a:	f083 0301 	eor.w	r3, r3, #1
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	f47f af31 	bne.w	8006098 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	65bb      	str	r3, [r7, #88]	; 0x58
 800623c:	e04f      	b.n	80062de <lfs_fs_traverse_+0x27e>
        if (f->type != LFS_TYPE_REG) {
 800623e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006240:	799b      	ldrb	r3, [r3, #6]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d147      	bne.n	80062d6 <lfs_fs_traverse_+0x276>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01d      	beq.n	800628e <lfs_fs_traverse_+0x22e>
 8006252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d117      	bne.n	800628e <lfs_fs_traverse_+0x22e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800625e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006260:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006268:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800626a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	9202      	str	r2, [sp, #8]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	9201      	str	r2, [sp, #4]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	4623      	mov	r3, r4
 800627a:	4602      	mov	r2, r0
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7fe f9f7 	bl	8004670 <lfs_ctz_traverse>
 8006282:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <lfs_fs_traverse_+0x22e>
                return err;
 800628a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800628c:	e02b      	b.n	80062e6 <lfs_fs_traverse_+0x286>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800628e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01e      	beq.n	80062d8 <lfs_fs_traverse_+0x278>
 800629a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d118      	bne.n	80062d8 <lfs_fs_traverse_+0x278>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80062a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062a8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062b0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80062b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	9202      	str	r2, [sp, #8]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	9201      	str	r2, [sp, #4]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	4623      	mov	r3, r4
 80062c2:	4602      	mov	r2, r0
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7fe f9d3 	bl	8004670 <lfs_ctz_traverse>
 80062ca:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 80062cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <lfs_fs_traverse_+0x278>
                return err;
 80062d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d4:	e007      	b.n	80062e6 <lfs_fs_traverse_+0x286>
            continue;
 80062d6:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80062d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80062de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1ac      	bne.n	800623e <lfs_fs_traverse_+0x1de>
            }
        }
    }
#endif

    return 0;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3774      	adds	r7, #116	; 0x74
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd90      	pop	{r4, r7, pc}
 80062ee:	bf00      	nop
 80062f0:	0800b0c0 	.word	0x0800b0c0
 80062f4:	0800b07c 	.word	0x0800b07c
 80062f8:	0800af70 	.word	0x0800af70
 80062fc:	0800b72c 	.word	0x0800b72c
 8006300:	700ffc00 	.word	0x700ffc00

08006304 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b08a      	sub	sp, #40	; 0x28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800631c:	4a2d      	ldr	r2, [pc, #180]	; (80063d4 <lfs_fs_pred+0xd0>)
 800631e:	f107 0314 	add.w	r3, r7, #20
 8006322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006326:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800632a:	2301      	movs	r3, #1
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 800632e:	2301      	movs	r3, #1
 8006330:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8006332:	e03e      	b.n	80063b2 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3318      	adds	r3, #24
 8006338:	f107 0214 	add.w	r2, r7, #20
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f7fa fbc9 	bl	8000ad6 <lfs_pair_issync>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d009      	beq.n	800635e <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800634a:	4b23      	ldr	r3, [pc, #140]	; (80063d8 <lfs_fs_pred+0xd4>)
 800634c:	f241 2289 	movw	r2, #4745	; 0x1289
 8006350:	4922      	ldr	r1, [pc, #136]	; (80063dc <lfs_fs_pred+0xd8>)
 8006352:	4823      	ldr	r0, [pc, #140]	; (80063e0 <lfs_fs_pred+0xdc>)
 8006354:	f001 f90c 	bl	8007570 <myprintf>
            return LFS_ERR_CORRUPT;
 8006358:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800635c:	e036      	b.n	80063cc <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 800635e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	429a      	cmp	r2, r3
 8006364:	d10a      	bne.n	800637c <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	3301      	adds	r3, #1
 8006380:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3318      	adds	r3, #24
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	4618      	mov	r0, r3
 800638a:	f7fa fb7b 	bl	8000a84 <lfs_pair_cmp>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <lfs_fs_pred+0x94>
            return 0;
 8006394:	2300      	movs	r3, #0
 8006396:	e019      	b.n	80063cc <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3318      	adds	r3, #24
 800639c:	461a      	mov	r2, r3
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7fc f9f7 	bl	8002794 <lfs_dir_fetch>
 80063a6:	61f8      	str	r0, [r7, #28]
        if (err) {
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <lfs_fs_pred+0xae>
            return err;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	e00c      	b.n	80063cc <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3318      	adds	r3, #24
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fa fb4a 	bl	8000a50 <lfs_pair_isnull>
 80063bc:	4603      	mov	r3, r0
 80063be:	f083 0301 	eor.w	r3, r3, #1
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1b5      	bne.n	8006334 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 80063c8:	f06f 0301 	mvn.w	r3, #1
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3728      	adds	r7, #40	; 0x28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	0800b0c0 	.word	0x0800b0c0
 80063d8:	0800b07c 	.word	0x0800b07c
 80063dc:	0800af70 	.word	0x0800af70
 80063e0:	0800b72c 	.word	0x0800b72c

080063e4 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80063e4:	b5b0      	push	{r4, r5, r7, lr}
 80063e6:	b08e      	sub	sp, #56	; 0x38
 80063e8:	af04      	add	r7, sp, #16
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006404:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 800640a:	69dd      	ldr	r5, [r3, #28]
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	6852      	ldr	r2, [r2, #4]
 8006414:	2108      	movs	r1, #8
 8006416:	9103      	str	r1, [sp, #12]
 8006418:	f107 0110 	add.w	r1, r7, #16
 800641c:	9102      	str	r1, [sp, #8]
 800641e:	9201      	str	r2, [sp, #4]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	462b      	mov	r3, r5
 8006424:	4622      	mov	r2, r4
 8006426:	4601      	mov	r1, r0
 8006428:	6a38      	ldr	r0, [r7, #32]
 800642a:	f7f9 ff8d 	bl	8000348 <lfs_bd_read>
 800642e:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <lfs_fs_parent_match+0x56>
        return err;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	e012      	b.n	8006460 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800643a:	f107 0310 	add.w	r3, r7, #16
 800643e:	4618      	mov	r0, r3
 8006440:	f7fa fb75 	bl	8000b2e <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	f107 0310 	add.w	r3, r7, #16
 800644c:	4611      	mov	r1, r2
 800644e:	4618      	mov	r0, r3
 8006450:	f7fa fb18 	bl	8000a84 <lfs_pair_cmp>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	bf14      	ite	ne
 800645a:	2301      	movne	r3, #1
 800645c:	2300      	moveq	r3, #0
 800645e:	b2db      	uxtb	r3, r3
}
 8006460:	4618      	mov	r0, r3
 8006462:	3728      	adds	r7, #40	; 0x28
 8006464:	46bd      	mov	sp, r7
 8006466:	bdb0      	pop	{r4, r5, r7, pc}

08006468 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b090      	sub	sp, #64	; 0x40
 800646c:	af04      	add	r7, sp, #16
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006480:	4a33      	ldr	r2, [pc, #204]	; (8006550 <lfs_fs_parent+0xe8>)
 8006482:	f107 031c 	add.w	r3, r7, #28
 8006486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800648a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800648e:	2301      	movs	r3, #1
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8006492:	2301      	movs	r3, #1
 8006494:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8006496:	e049      	b.n	800652c <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3318      	adds	r3, #24
 800649c:	f107 021c 	add.w	r2, r7, #28
 80064a0:	4611      	mov	r1, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fa fb17 	bl	8000ad6 <lfs_pair_issync>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 80064ae:	4b29      	ldr	r3, [pc, #164]	; (8006554 <lfs_fs_parent+0xec>)
 80064b0:	f241 22ca 	movw	r2, #4810	; 0x12ca
 80064b4:	4928      	ldr	r1, [pc, #160]	; (8006558 <lfs_fs_parent+0xf0>)
 80064b6:	4829      	ldr	r0, [pc, #164]	; (800655c <lfs_fs_parent+0xf4>)
 80064b8:	f001 f85a 	bl	8007570 <myprintf>
            return LFS_ERR_CORRUPT;
 80064bc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80064c0:	e041      	b.n	8006546 <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 80064c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d10a      	bne.n	80064e0 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	3301      	adds	r3, #1
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80064fc:	f107 0310 	add.w	r3, r7, #16
 8006500:	9303      	str	r3, [sp, #12]
 8006502:	4b17      	ldr	r3, [pc, #92]	; (8006560 <lfs_fs_parent+0xf8>)
 8006504:	9302      	str	r3, [sp, #8]
 8006506:	2300      	movs	r3, #0
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	4b16      	ldr	r3, [pc, #88]	; (8006564 <lfs_fs_parent+0xfc>)
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	4b16      	ldr	r3, [pc, #88]	; (8006568 <lfs_fs_parent+0x100>)
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7fb fd76 	bl	8002004 <lfs_dir_fetchmatch>
 8006518:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <lfs_fs_parent+0xc4>
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	f113 0f02 	cmn.w	r3, #2
 8006526:	d001      	beq.n	800652c <lfs_fs_parent+0xc4>
            return tag;
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	e00c      	b.n	8006546 <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3318      	adds	r3, #24
 8006530:	4618      	mov	r0, r3
 8006532:	f7fa fa8d 	bl	8000a50 <lfs_pair_isnull>
 8006536:	4603      	mov	r3, r0
 8006538:	f083 0301 	eor.w	r3, r3, #1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1aa      	bne.n	8006498 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006542:	f06f 0301 	mvn.w	r3, #1
}
 8006546:	4618      	mov	r0, r3
 8006548:	3730      	adds	r7, #48	; 0x30
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	0800b0c0 	.word	0x0800b0c0
 8006554:	0800b07c 	.word	0x0800b07c
 8006558:	0800af70 	.word	0x0800af70
 800655c:	0800b72c 	.word	0x0800b72c
 8006560:	080063e5 	.word	0x080063e5
 8006564:	20000008 	.word	0x20000008
 8006568:	7ff003ff 	.word	0x7ff003ff

0800656c <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	025b      	lsls	r3, r3, #9
 8006584:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	631a      	str	r2, [r3, #48]	; 0x30
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006594:	b590      	push	{r4, r7, lr}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fa fb6a 	bl	8000c7e <lfs_tag_size>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <lfs_fs_preporphans+0x32>
 80065b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	da06      	bge.n	80065c6 <lfs_fs_preporphans+0x32>
 80065b8:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <lfs_fs_preporphans+0x90>)
 80065ba:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <lfs_fs_preporphans+0x94>)
 80065bc:	f241 21eb 	movw	r1, #4843	; 0x12eb
 80065c0:	481a      	ldr	r0, [pc, #104]	; (800662c <lfs_fs_preporphans+0x98>)
 80065c2:	f003 fa83 	bl	8009acc <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fa fb57 	bl	8000c7e <lfs_tag_size>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80065d6:	d90a      	bls.n	80065ee <lfs_fs_preporphans+0x5a>
 80065d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dd06      	ble.n	80065ee <lfs_fs_preporphans+0x5a>
 80065e0:	4b13      	ldr	r3, [pc, #76]	; (8006630 <lfs_fs_preporphans+0x9c>)
 80065e2:	4a11      	ldr	r2, [pc, #68]	; (8006628 <lfs_fs_preporphans+0x94>)
 80065e4:	f241 21ec 	movw	r1, #4844	; 0x12ec
 80065e8:	4810      	ldr	r0, [pc, #64]	; (800662c <lfs_fs_preporphans+0x98>)
 80065ea:	f003 fa6f 	bl	8009acc <__assert_func>
    lfs->gstate.tag += orphans;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f6:	441a      	add	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3330      	adds	r3, #48	; 0x30
 8006608:	4618      	mov	r0, r3
 800660a:	f7fa fb98 	bl	8000d3e <lfs_gstate_hasorphans>
 800660e:	4603      	mov	r3, r0
 8006610:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006612:	ea44 0203 	orr.w	r2, r4, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	bd90      	pop	{r4, r7, pc}
 8006624:	0800b908 	.word	0x0800b908
 8006628:	0800c91c 	.word	0x0800c91c
 800662c:	0800af70 	.word	0x0800af70
 8006630:	0800b940 	.word	0x0800b940

08006634 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	460b      	mov	r3, r1
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4a17      	ldr	r2, [pc, #92]	; (80066a4 <lfs_fs_prepmove+0x70>)
 8006648:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800664a:	897b      	ldrh	r3, [r7, #10]
 800664c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006650:	428b      	cmp	r3, r1
 8006652:	d006      	beq.n	8006662 <lfs_fs_prepmove+0x2e>
 8006654:	897b      	ldrh	r3, [r7, #10]
 8006656:	029b      	lsls	r3, r3, #10
 8006658:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800665c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006660:	e000      	b.n	8006664 <lfs_fs_prepmove+0x30>
 8006662:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006664:	431a      	orrs	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800666a:	897b      	ldrh	r3, [r7, #10]
 800666c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006670:	4293      	cmp	r3, r2
 8006672:	d002      	beq.n	800667a <lfs_fs_prepmove+0x46>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	e000      	b.n	800667c <lfs_fs_prepmove+0x48>
 800667a:	2300      	movs	r3, #0
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006680:	897b      	ldrh	r3, [r7, #10]
 8006682:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006686:	4293      	cmp	r3, r2
 8006688:	d003      	beq.n	8006692 <lfs_fs_prepmove+0x5e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3304      	adds	r3, #4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	e000      	b.n	8006694 <lfs_fs_prepmove+0x60>
 8006692:	2300      	movs	r3, #0
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	800003ff 	.word	0x800003ff

080066a8 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b098      	sub	sp, #96	; 0x60
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3330      	adds	r3, #48	; 0x30
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fa fb77 	bl	8000da8 <lfs_gstate_needssuperblock>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f083 0301 	eor.w	r3, r3, #1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <lfs_fs_desuperblock+0x22>
        return 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e04e      	b.n	8006768 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1a      	ldr	r2, [r3, #32]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	4927      	ldr	r1, [pc, #156]	; (8006770 <lfs_fs_desuperblock+0xc8>)
 80066d4:	9101      	str	r1, [sp, #4]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4613      	mov	r3, r2
 80066da:	f241 3205 	movw	r2, #4869	; 0x1305
 80066de:	4925      	ldr	r1, [pc, #148]	; (8006774 <lfs_fs_desuperblock+0xcc>)
 80066e0:	4825      	ldr	r0, [pc, #148]	; (8006778 <lfs_fs_desuperblock+0xd0>)
 80066e2:	f000 ff45 	bl	8007570 <myprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f103 0220 	add.w	r2, r3, #32
 80066ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fc f84e 	bl	8002794 <lfs_dir_fetch>
 80066f8:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 80066fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <lfs_fs_desuperblock+0x5c>
        return err;
 8006700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006702:	e031      	b.n	8006768 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7fa fce1 	bl	80010cc <lfs_fs_disk_version>
 800670a:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 800670c:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006712:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8006714:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 8006720:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 800672c:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 800672e:	f107 031c 	add.w	r3, r7, #28
 8006732:	4618      	mov	r0, r3
 8006734:	f7fa fc44 	bl	8000fc0 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006738:	4b10      	ldr	r3, [pc, #64]	; (800677c <lfs_fs_desuperblock+0xd4>)
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	f107 031c 	add.w	r3, r7, #28
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	f107 0214 	add.w	r2, r7, #20
 8006746:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800674a:	2301      	movs	r3, #1
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7fd fdbf 	bl	80042d0 <lfs_dir_commit>
 8006752:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8006754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <lfs_fs_desuperblock+0xb6>
        return err;
 800675a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800675c:	e004      	b.n	8006768 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800675e:	2100      	movs	r1, #0
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ff03 	bl	800656c <lfs_fs_prepsuperblock>
    return 0;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3758      	adds	r7, #88	; 0x58
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	0800b07c 	.word	0x0800b07c
 8006774:	0800af70 	.word	0x0800af70
 8006778:	0800b978 	.word	0x0800b978
 800677c:	20100018 	.word	0x20100018

08006780 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006780:	b5b0      	push	{r4, r5, r7, lr}
 8006782:	b094      	sub	sp, #80	; 0x50
 8006784:	af04      	add	r7, sp, #16
 8006786:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	333c      	adds	r3, #60	; 0x3c
 800678c:	4618      	mov	r0, r3
 800678e:	f7fa faf8 	bl	8000d82 <lfs_gstate_hasmove>
 8006792:	4603      	mov	r3, r0
 8006794:	f083 0301 	eor.w	r3, r3, #1
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <lfs_fs_demove+0x22>
        return 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	e05b      	b.n	800685a <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fa fa56 	bl	8000c60 <lfs_tag_id>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461a      	mov	r2, r3
 80067b8:	4b2a      	ldr	r3, [pc, #168]	; (8006864 <lfs_fs_demove+0xe4>)
 80067ba:	9302      	str	r3, [sp, #8]
 80067bc:	9201      	str	r2, [sp, #4]
 80067be:	9400      	str	r4, [sp, #0]
 80067c0:	462b      	mov	r3, r5
 80067c2:	f241 322d 	movw	r2, #4909	; 0x132d
 80067c6:	4928      	ldr	r1, [pc, #160]	; (8006868 <lfs_fs_demove+0xe8>)
 80067c8:	4828      	ldr	r0, [pc, #160]	; (800686c <lfs_fs_demove+0xec>)
 80067ca:	f000 fed1 	bl	8007570 <myprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fa fa1c 	bl	8000c10 <lfs_tag_type3>
 80067d8:	4603      	mov	r3, r0
 80067da:	461a      	mov	r2, r3
 80067dc:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d006      	beq.n	80067f2 <lfs_fs_demove+0x72>
 80067e4:	4b22      	ldr	r3, [pc, #136]	; (8006870 <lfs_fs_demove+0xf0>)
 80067e6:	4a23      	ldr	r2, [pc, #140]	; (8006874 <lfs_fs_demove+0xf4>)
 80067e8:	f241 3134 	movw	r1, #4916	; 0x1334
 80067ec:	481e      	ldr	r0, [pc, #120]	; (8006868 <lfs_fs_demove+0xe8>)
 80067ee:	f003 f96d 	bl	8009acc <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80067f8:	f107 0318 	add.w	r3, r7, #24
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fb ffc8 	bl	8002794 <lfs_dir_fetch>
 8006804:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8006806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <lfs_fs_demove+0x90>
        return err;
 800680c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680e:	e024      	b.n	800685a <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006814:	4618      	mov	r0, r3
 8006816:	f7fa fa23 	bl	8000c60 <lfs_tag_id>
 800681a:	4603      	mov	r3, r0
 800681c:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800681e:	2200      	movs	r2, #0
 8006820:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff ff05 	bl	8006634 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800682a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800682c:	029b      	lsls	r3, r3, #10
 800682e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006832:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006836:	613b      	str	r3, [r7, #16]
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	f107 0210 	add.w	r2, r7, #16
 8006840:	f107 0118 	add.w	r1, r7, #24
 8006844:	2301      	movs	r3, #1
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fd fd42 	bl	80042d0 <lfs_dir_commit>
 800684c:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800684e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <lfs_fs_demove+0xd8>
        return err;
 8006854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006856:	e000      	b.n	800685a <lfs_fs_demove+0xda>
    }

    return 0;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3740      	adds	r7, #64	; 0x40
 800685e:	46bd      	mov	sp, r7
 8006860:	bdb0      	pop	{r4, r5, r7, pc}
 8006862:	bf00      	nop
 8006864:	0800b07c 	.word	0x0800b07c
 8006868:	0800af70 	.word	0x0800af70
 800686c:	0800b9ac 	.word	0x0800b9ac
 8006870:	0800b9e0 	.word	0x0800b9e0
 8006874:	0800c930 	.word	0x0800c930

08006878 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8006878:	b5b0      	push	{r4, r5, r7, lr}
 800687a:	b0b2      	sub	sp, #200	; 0xc8
 800687c:	af04      	add	r7, sp, #16
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3330      	adds	r3, #48	; 0x30
 8006888:	4618      	mov	r0, r3
 800688a:	f7fa fa58 	bl	8000d3e <lfs_gstate_hasorphans>
 800688e:	4603      	mov	r3, r0
 8006890:	f083 0301 	eor.w	r3, r3, #1
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <lfs_fs_deorphan+0x26>
        return 0;
 800689a:	2300      	movs	r3, #0
 800689c:	e187      	b.n	8006bae <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 80068a4:	e170      	b.n	8006b88 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80068a6:	f107 0308 	add.w	r3, r7, #8
 80068aa:	2220      	movs	r2, #32
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f003 f992 	bl	8009bd8 <memset>
 80068b4:	2301      	movs	r3, #1
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	2301      	movs	r3, #1
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 80068c2:	e149      	b.n	8006b58 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80068c4:	f107 0308 	add.w	r3, r7, #8
 80068c8:	f103 0218 	add.w	r2, r3, #24
 80068cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fb ff5e 	bl	8002794 <lfs_dir_fetch>
 80068d8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 80068dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <lfs_fs_deorphan+0x72>
                return err;
 80068e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e8:	e161      	b.n	8006bae <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 80068ea:	7ffb      	ldrb	r3, [r7, #31]
 80068ec:	f083 0301 	eor.w	r3, r3, #1
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 8126 	beq.w	8006b44 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80068f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80068fc:	f107 0308 	add.w	r3, r7, #8
 8006900:	3318      	adds	r3, #24
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff fdaf 	bl	8006468 <lfs_fs_parent>
 800690a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800690e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006912:	2b00      	cmp	r3, #0
 8006914:	da07      	bge.n	8006926 <lfs_fs_deorphan+0xae>
 8006916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800691a:	f113 0f02 	cmn.w	r3, #2
 800691e:	d002      	beq.n	8006926 <lfs_fs_deorphan+0xae>
                    return tag;
 8006920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006924:	e143      	b.n	8006bae <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8006926:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800692a:	2b00      	cmp	r3, #0
 800692c:	f040 80ac 	bne.w	8006a88 <lfs_fs_deorphan+0x210>
 8006930:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006934:	f113 0f02 	cmn.w	r3, #2
 8006938:	f000 80a6 	beq.w	8006a88 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800693c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006940:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006944:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	4613      	mov	r3, r2
 800694c:	4a9a      	ldr	r2, [pc, #616]	; (8006bb8 <lfs_fs_deorphan+0x340>)
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fa fdf6 	bl	8001540 <lfs_dir_get>
 8006954:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8006958:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800695c:	2b00      	cmp	r3, #0
 800695e:	da02      	bge.n	8006966 <lfs_fs_deorphan+0xee>
                        return state;
 8006960:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006964:	e0eb      	b.n	8006b3e <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8006966:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800696a:	4618      	mov	r0, r3
 800696c:	f7fa f8df 	bl	8000b2e <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8006970:	f107 0308 	add.w	r3, r7, #8
 8006974:	f103 0218 	add.w	r2, r3, #24
 8006978:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800697c:	4611      	mov	r1, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f7fa f8a9 	bl	8000ad6 <lfs_pair_issync>
 8006984:	4603      	mov	r3, r0
 8006986:	f083 0301 	eor.w	r3, r3, #1
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d07b      	beq.n	8006a88 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8006990:	6a38      	ldr	r0, [r7, #32]
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006998:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800699c:	4c87      	ldr	r4, [pc, #540]	; (8006bbc <lfs_fs_deorphan+0x344>)
 800699e:	9403      	str	r4, [sp, #12]
 80069a0:	9102      	str	r1, [sp, #8]
 80069a2:	9201      	str	r2, [sp, #4]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	4603      	mov	r3, r0
 80069a8:	f241 327a 	movw	r2, #4986	; 0x137a
 80069ac:	4984      	ldr	r1, [pc, #528]	; (8006bc0 <lfs_fs_deorphan+0x348>)
 80069ae:	4885      	ldr	r0, [pc, #532]	; (8006bc4 <lfs_fs_deorphan+0x34c>)
 80069b0:	f000 fdde 	bl	8007570 <myprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80069b4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80069b8:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3330      	adds	r3, #48	; 0x30
 80069c0:	f107 0208 	add.w	r2, r7, #8
 80069c4:	4611      	mov	r1, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fa fa02 	bl	8000dd0 <lfs_gstate_hasmovehere>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d01c      	beq.n	8006a0c <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fa f942 	bl	8000c60 <lfs_tag_id>
 80069dc:	4603      	mov	r3, r0
 80069de:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80069ea:	4874      	ldr	r0, [pc, #464]	; (8006bbc <lfs_fs_deorphan+0x344>)
 80069ec:	9002      	str	r0, [sp, #8]
 80069ee:	9201      	str	r2, [sp, #4]
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	460b      	mov	r3, r1
 80069f4:	f241 3285 	movw	r2, #4997	; 0x1385
 80069f8:	4971      	ldr	r1, [pc, #452]	; (8006bc0 <lfs_fs_deorphan+0x348>)
 80069fa:	4873      	ldr	r0, [pc, #460]	; (8006bc8 <lfs_fs_deorphan+0x350>)
 80069fc:	f000 fdb8 	bl	8007570 <myprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8006a00:	2200      	movs	r2, #0
 8006a02:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff fe14 	bl	8006634 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8006a0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fa f8a6 	bl	8000b62 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006a16:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006a1a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d007      	beq.n	8006a32 <lfs_fs_deorphan+0x1ba>
 8006a22:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006a26:	029b      	lsls	r3, r3, #10
 8006a28:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006a2c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006a30:	e000      	b.n	8006a34 <lfs_fs_deorphan+0x1bc>
 8006a32:	2300      	movs	r3, #0
 8006a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a3e:	4b63      	ldr	r3, [pc, #396]	; (8006bcc <lfs_fs_deorphan+0x354>)
 8006a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a4c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006a50:	f107 0108 	add.w	r1, r7, #8
 8006a54:	2302      	movs	r3, #2
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fd f940 	bl	8003cdc <lfs_dir_orphaningcommit>
 8006a5c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8006a60:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fa f862 	bl	8000b2e <lfs_pair_fromle32>
                        if (state < 0) {
 8006a6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	da02      	bge.n	8006a78 <lfs_fs_deorphan+0x200>
                            return state;
 8006a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8006a76:	e062      	b.n	8006b3e <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8006a78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d16b      	bne.n	8006b58 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8006a80:	2301      	movs	r3, #1
 8006a82:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006a86:	e067      	b.n	8006b58 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8006a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d159      	bne.n	8006b44 <lfs_fs_deorphan+0x2cc>
 8006a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a94:	f113 0f02 	cmn.w	r3, #2
 8006a98:	d154      	bne.n	8006b44 <lfs_fs_deorphan+0x2cc>
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d051      	beq.n	8006b44 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8006aa0:	6a3a      	ldr	r2, [r7, #32]
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	4945      	ldr	r1, [pc, #276]	; (8006bbc <lfs_fs_deorphan+0x344>)
 8006aa6:	9101      	str	r1, [sp, #4]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	f241 32a5 	movw	r2, #5029	; 0x13a5
 8006ab0:	4943      	ldr	r1, [pc, #268]	; (8006bc0 <lfs_fs_deorphan+0x348>)
 8006ab2:	4847      	ldr	r0, [pc, #284]	; (8006bd0 <lfs_fs_deorphan+0x358>)
 8006ab4:	f000 fd5c 	bl	8007570 <myprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7fb fe81 	bl	80027cc <lfs_dir_getgstate>
 8006aca:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 8006ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <lfs_fs_deorphan+0x264>
                        return err;
 8006ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ada:	e030      	b.n	8006b3e <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8006adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ae0:	3318      	adds	r3, #24
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fa f83d 	bl	8000b62 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8006ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006aec:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006af0:	051a      	lsls	r2, r3, #20
 8006af2:	4b38      	ldr	r3, [pc, #224]	; (8006bd4 <lfs_fs_deorphan+0x35c>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	673b      	str	r3, [r7, #112]	; 0x70
 8006af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006afc:	3318      	adds	r3, #24
 8006afe:	677b      	str	r3, [r7, #116]	; 0x74
 8006b00:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006b04:	f107 0108 	add.w	r1, r7, #8
 8006b08:	2301      	movs	r3, #1
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fd f8e6 	bl	8003cdc <lfs_dir_orphaningcommit>
 8006b10:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8006b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b18:	3318      	adds	r3, #24
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fa f807 	bl	8000b2e <lfs_pair_fromle32>
                    if (state < 0) {
 8006b20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da02      	bge.n	8006b2e <lfs_fs_deorphan+0x2b6>
                        return state;
 8006b28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 8006b2c:	e03f      	b.n	8006bae <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8006b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d104      	bne.n	8006b40 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8006b3c:	e00c      	b.n	8006b58 <lfs_fs_deorphan+0x2e0>
                return err;
 8006b3e:	e036      	b.n	8006bae <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 8006b40:	bf00      	nop
 8006b42:	e009      	b.n	8006b58 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 8006b44:	f107 0408 	add.w	r4, r7, #8
 8006b48:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8006b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8006b58:	f107 0308 	add.w	r3, r7, #8
 8006b5c:	3318      	adds	r3, #24
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7f9 ff76 	bl	8000a50 <lfs_pair_isnull>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f083 0301 	eor.w	r3, r3, #1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f47f aea9 	bne.w	80068c4 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8006b72:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <lfs_fs_deorphan+0x306>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	e002      	b.n	8006b84 <lfs_fs_deorphan+0x30c>
 8006b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b82:	3301      	adds	r3, #1
 8006b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8006b88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	f77f ae8a 	ble.w	80068a6 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3330      	adds	r3, #48	; 0x30
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fa f8e4 	bl	8000d64 <lfs_gstate_getorphans>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	425b      	negs	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	b25b      	sxtb	r3, r3
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff fcf4 	bl	8006594 <lfs_fs_preporphans>
 8006bac:	4603      	mov	r3, r0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	37b8      	adds	r7, #184	; 0xb8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	7ffffc00 	.word	0x7ffffc00
 8006bbc:	0800b07c 	.word	0x0800b07c
 8006bc0:	0800af70 	.word	0x0800af70
 8006bc4:	0800ba14 	.word	0x0800ba14
 8006bc8:	0800ba58 	.word	0x0800ba58
 8006bcc:	600ffc08 	.word	0x600ffc08
 8006bd0:	0800baa0 	.word	0x0800baa0
 8006bd4:	000ffc08 	.word	0x000ffc08

08006bd8 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fd61 	bl	80066a8 <lfs_fs_desuperblock>
 8006be6:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <lfs_fs_forceconsistency+0x1a>
        return err;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	e013      	b.n	8006c1a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fdc4 	bl	8006780 <lfs_fs_demove>
 8006bf8:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <lfs_fs_forceconsistency+0x2c>
        return err;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	e00a      	b.n	8006c1a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8006c04:	2101      	movs	r1, #1
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fe36 	bl	8006878 <lfs_fs_deorphan>
 8006c0c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <lfs_fs_forceconsistency+0x40>
        return err;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	e000      	b.n	8006c1a <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	601a      	str	r2, [r3, #0]
    return 0;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr
	...

08006c48 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8006c54:	f107 0208 	add.w	r2, r7, #8
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4907      	ldr	r1, [pc, #28]	; (8006c78 <lfs_fs_size_+0x30>)
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff f9ff 	bl	8006060 <lfs_fs_traverse_>
 8006c62:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <lfs_fs_size_+0x26>
        return err;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	e000      	b.n	8006c70 <lfs_fs_size_+0x28>
    }

    return size;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	08006c23 	.word	0x08006c23

08006c7c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	b0a5      	sub	sp, #148	; 0x94
 8006c80:	af14      	add	r7, sp, #80	; 0x50
 8006c82:	6378      	str	r0, [r7, #52]	; 0x34
 8006c84:	6339      	str	r1, [r7, #48]	; 0x30
    int err = LFS_LOCK(cfg);
 8006c86:	2300      	movs	r3, #0
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err) {
 8006c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <lfs_format+0x18>
        return err;
 8006c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c92:	e061      	b.n	8006d58 <lfs_format+0xdc>
    }
    LFS_TRACE("lfs_format(%p, %p {.context=%p, "
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	681d      	ldr	r5, [r3, #0]
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	685e      	ldr	r6, [r3, #4]
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	68da      	ldr	r2, [r3, #12]
 8006ca6:	62ba      	str	r2, [r7, #40]	; 0x28
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	6919      	ldr	r1, [r3, #16]
 8006cac:	6279      	str	r1, [r7, #36]	; 0x24
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	6958      	ldr	r0, [r3, #20]
 8006cb2:	6238      	str	r0, [r7, #32]
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	699c      	ldr	r4, [r3, #24]
 8006cb8:	61fc      	str	r4, [r7, #28]
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	6a1a      	ldr	r2, [r3, #32]
 8006cc4:	617a      	str	r2, [r7, #20]
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006cca:	6139      	str	r1, [r7, #16]
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006cd6:	60bc      	str	r4, [r7, #8]
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cdc:	607b      	str	r3, [r7, #4]
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8006cf4:	9211      	str	r2, [sp, #68]	; 0x44
 8006cf6:	9110      	str	r1, [sp, #64]	; 0x40
 8006cf8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006cfa:	940e      	str	r4, [sp, #56]	; 0x38
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	930d      	str	r3, [sp, #52]	; 0x34
 8006d00:	68bc      	ldr	r4, [r7, #8]
 8006d02:	940c      	str	r4, [sp, #48]	; 0x30
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d08:	6939      	ldr	r1, [r7, #16]
 8006d0a:	910a      	str	r1, [sp, #40]	; 0x28
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	9308      	str	r3, [sp, #32]
 8006d14:	69fc      	ldr	r4, [r7, #28]
 8006d16:	9407      	str	r4, [sp, #28]
 8006d18:	6a38      	ldr	r0, [r7, #32]
 8006d1a:	9006      	str	r0, [sp, #24]
 8006d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d1e:	9105      	str	r1, [sp, #20]
 8006d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d22:	9204      	str	r2, [sp, #16]
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	9303      	str	r3, [sp, #12]
 8006d28:	9602      	str	r6, [sp, #8]
 8006d2a:	9501      	str	r5, [sp, #4]
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d32:	f241 720a 	movw	r2, #5898	; 0x170a
 8006d36:	490a      	ldr	r1, [pc, #40]	; (8006d60 <lfs_format+0xe4>)
 8006d38:	480a      	ldr	r0, [pc, #40]	; (8006d64 <lfs_format+0xe8>)
 8006d3a:	f000 fc19 	bl	8007570 <myprintf>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8006d3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d42:	f7fe feaf 	bl	8005aa4 <lfs_format_>
 8006d46:	63f8      	str	r0, [r7, #60]	; 0x3c

    LFS_TRACE("lfs_format -> %d", err);
 8006d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4a:	f241 721d 	movw	r2, #5917	; 0x171d
 8006d4e:	4904      	ldr	r1, [pc, #16]	; (8006d60 <lfs_format+0xe4>)
 8006d50:	4805      	ldr	r0, [pc, #20]	; (8006d68 <lfs_format+0xec>)
 8006d52:	f000 fc0d 	bl	8007570 <myprintf>
    LFS_UNLOCK(cfg);
    return err;
 8006d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3744      	adds	r7, #68	; 0x44
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d60:	0800af70 	.word	0x0800af70
 8006d64:	0800baf0 	.word	0x0800baf0
 8006d68:	0800bc2c 	.word	0x0800bc2c

08006d6c <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8006d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d6e:	b0a5      	sub	sp, #148	; 0x94
 8006d70:	af14      	add	r7, sp, #80	; 0x50
 8006d72:	6378      	str	r0, [r7, #52]	; 0x34
 8006d74:	6339      	str	r1, [r7, #48]	; 0x30
    int err = LFS_LOCK(cfg);
 8006d76:	2300      	movs	r3, #0
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err) {
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <lfs_mount+0x18>
        return err;
 8006d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d82:	e061      	b.n	8006e48 <lfs_mount+0xdc>
    }
    LFS_TRACE("lfs_mount(%p, %p {.context=%p, "
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	681d      	ldr	r5, [r3, #0]
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	685e      	ldr	r6, [r3, #4]
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	6919      	ldr	r1, [r3, #16]
 8006d9c:	6279      	str	r1, [r7, #36]	; 0x24
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	6958      	ldr	r0, [r3, #20]
 8006da2:	6238      	str	r0, [r7, #32]
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	699c      	ldr	r4, [r3, #24]
 8006da8:	61fc      	str	r4, [r7, #28]
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	6a1a      	ldr	r2, [r3, #32]
 8006db4:	617a      	str	r2, [r7, #20]
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006dba:	6139      	str	r1, [r7, #16]
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006dc6:	60bc      	str	r4, [r7, #8]
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dcc:	607b      	str	r3, [r7, #4]
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de2:	9312      	str	r3, [sp, #72]	; 0x48
 8006de4:	9211      	str	r2, [sp, #68]	; 0x44
 8006de6:	9110      	str	r1, [sp, #64]	; 0x40
 8006de8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006dea:	940e      	str	r4, [sp, #56]	; 0x38
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	930d      	str	r3, [sp, #52]	; 0x34
 8006df0:	68bc      	ldr	r4, [r7, #8]
 8006df2:	940c      	str	r4, [sp, #48]	; 0x30
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	900b      	str	r0, [sp, #44]	; 0x2c
 8006df8:	6939      	ldr	r1, [r7, #16]
 8006dfa:	910a      	str	r1, [sp, #40]	; 0x28
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	9308      	str	r3, [sp, #32]
 8006e04:	69fc      	ldr	r4, [r7, #28]
 8006e06:	9407      	str	r4, [sp, #28]
 8006e08:	6a38      	ldr	r0, [r7, #32]
 8006e0a:	9006      	str	r0, [sp, #24]
 8006e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e0e:	9105      	str	r1, [sp, #20]
 8006e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e12:	9204      	str	r2, [sp, #16]
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	9602      	str	r6, [sp, #8]
 8006e1a:	9501      	str	r5, [sp, #4]
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	f241 7228 	movw	r2, #5928	; 0x1728
 8006e26:	490a      	ldr	r1, [pc, #40]	; (8006e50 <lfs_mount+0xe4>)
 8006e28:	480a      	ldr	r0, [pc, #40]	; (8006e54 <lfs_mount+0xe8>)
 8006e2a:	f000 fba1 	bl	8007570 <myprintf>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 8006e2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e32:	f7fe fee9 	bl	8005c08 <lfs_mount_>
 8006e36:	63f8      	str	r0, [r7, #60]	; 0x3c

    LFS_TRACE("lfs_mount -> %d", err);
 8006e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3a:	f241 723b 	movw	r2, #5947	; 0x173b
 8006e3e:	4904      	ldr	r1, [pc, #16]	; (8006e50 <lfs_mount+0xe4>)
 8006e40:	4805      	ldr	r0, [pc, #20]	; (8006e58 <lfs_mount+0xec>)
 8006e42:	f000 fb95 	bl	8007570 <myprintf>
    LFS_UNLOCK(cfg);
    return err;
 8006e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3744      	adds	r7, #68	; 0x44
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e50:	0800af70 	.word	0x0800af70
 8006e54:	0800bc50 	.word	0x0800bc50
 8006e58:	0800bd8c 	.word	0x0800bd8c

08006e5c <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af04      	add	r7, sp, #16
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]
    if (err) {
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <lfs_file_open+0x1c>
        return err;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	e02e      	b.n	8006ed6 <lfs_file_open+0x7a>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	9302      	str	r3, [sp, #8]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f241 72b4 	movw	r2, #6068	; 0x17b4
 8006e8a:	4915      	ldr	r1, [pc, #84]	; (8006ee0 <lfs_file_open+0x84>)
 8006e8c:	4815      	ldr	r0, [pc, #84]	; (8006ee4 <lfs_file_open+0x88>)
 8006e8e:	f000 fb6f 	bl	8007570 <myprintf>
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fa f8c9 	bl	8001030 <lfs_mlist_isopen>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f083 0301 	eor.w	r3, r3, #1
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <lfs_file_open+0x5c>
 8006eaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <lfs_file_open+0x8c>)
 8006eac:	4a0f      	ldr	r2, [pc, #60]	; (8006eec <lfs_file_open+0x90>)
 8006eae:	f241 71b6 	movw	r1, #6070	; 0x17b6
 8006eb2:	480b      	ldr	r0, [pc, #44]	; (8006ee0 <lfs_file_open+0x84>)
 8006eb4:	f002 fe0a 	bl	8009acc <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7fd fe24 	bl	8004b0c <lfs_file_open_>
 8006ec4:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f241 72ba 	movw	r2, #6074	; 0x17ba
 8006ecc:	4904      	ldr	r1, [pc, #16]	; (8006ee0 <lfs_file_open+0x84>)
 8006ece:	4808      	ldr	r0, [pc, #32]	; (8006ef0 <lfs_file_open+0x94>)
 8006ed0:	f000 fb4e 	bl	8007570 <myprintf>
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006ed4:	697b      	ldr	r3, [r7, #20]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	0800af70 	.word	0x0800af70
 8006ee4:	0800bfe4 	.word	0x0800bfe4
 8006ee8:	0800c014 	.word	0x0800c014
 8006eec:	0800c940 	.word	0x0800c940
 8006ef0:	0800c04c 	.word	0x0800c04c

08006ef4 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
    if (err) {
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <lfs_file_close+0x18>
        return err;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	e025      	b.n	8006f58 <lfs_file_close+0x64>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f241 72d9 	movw	r2, #6105	; 0x17d9
 8006f16:	4912      	ldr	r1, [pc, #72]	; (8006f60 <lfs_file_close+0x6c>)
 8006f18:	4812      	ldr	r0, [pc, #72]	; (8006f64 <lfs_file_close+0x70>)
 8006f1a:	f000 fb29 	bl	8007570 <myprintf>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fa f883 	bl	8001030 <lfs_mlist_isopen>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <lfs_file_close+0x4a>
 8006f30:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <lfs_file_close+0x74>)
 8006f32:	4a0e      	ldr	r2, [pc, #56]	; (8006f6c <lfs_file_close+0x78>)
 8006f34:	f241 71da 	movw	r1, #6106	; 0x17da
 8006f38:	4809      	ldr	r0, [pc, #36]	; (8006f60 <lfs_file_close+0x6c>)
 8006f3a:	f002 fdc7 	bl	8009acc <__assert_func>

    err = lfs_file_close_(lfs, file);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7fd fdfb 	bl	8004b3c <lfs_file_close_>
 8006f46:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f241 72de 	movw	r2, #6110	; 0x17de
 8006f4e:	4904      	ldr	r1, [pc, #16]	; (8006f60 <lfs_file_close+0x6c>)
 8006f50:	4807      	ldr	r0, [pc, #28]	; (8006f70 <lfs_file_close+0x7c>)
 8006f52:	f000 fb0d 	bl	8007570 <myprintf>
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006f56:	68fb      	ldr	r3, [r7, #12]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	0800af70 	.word	0x0800af70
 8006f64:	0800c0f8 	.word	0x0800c0f8
 8006f68:	0800c120 	.word	0x0800c120
 8006f6c:	0800c950 	.word	0x0800c950
 8006f70:	0800c158 	.word	0x0800c158

08006f74 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	; 0x28
 8006f78:	af04      	add	r7, sp, #16
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
    if (err) {
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <lfs_file_read+0x1c>
        return err;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	e02b      	b.n	8006fe8 <lfs_file_read+0x74>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f241 72fa 	movw	r2, #6138	; 0x17fa
 8006fa2:	4913      	ldr	r1, [pc, #76]	; (8006ff0 <lfs_file_read+0x7c>)
 8006fa4:	4813      	ldr	r0, [pc, #76]	; (8006ff4 <lfs_file_read+0x80>)
 8006fa6:	f000 fae3 	bl	8007570 <myprintf>
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fa f83d 	bl	8001030 <lfs_mlist_isopen>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d106      	bne.n	8006fca <lfs_file_read+0x56>
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <lfs_file_read+0x84>)
 8006fbe:	4a0f      	ldr	r2, [pc, #60]	; (8006ffc <lfs_file_read+0x88>)
 8006fc0:	f241 71fc 	movw	r1, #6140	; 0x17fc
 8006fc4:	480a      	ldr	r0, [pc, #40]	; (8006ff0 <lfs_file_read+0x7c>)
 8006fc6:	f002 fd81 	bl	8009acc <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7fe f913 	bl	80051fc <lfs_file_read_>
 8006fd6:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006fde:	4904      	ldr	r1, [pc, #16]	; (8006ff0 <lfs_file_read+0x7c>)
 8006fe0:	4807      	ldr	r0, [pc, #28]	; (8007000 <lfs_file_read+0x8c>)
 8006fe2:	f000 fac5 	bl	8007570 <myprintf>
    LFS_UNLOCK(lfs->cfg);
    return res;
 8006fe6:	693b      	ldr	r3, [r7, #16]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	0800af70 	.word	0x0800af70
 8006ff4:	0800c1cc 	.word	0x0800c1cc
 8006ff8:	0800c120 	.word	0x0800c120
 8006ffc:	0800c960 	.word	0x0800c960
 8007000:	0800c1fc 	.word	0x0800c1fc

08007004 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	; 0x28
 8007008:	af04      	add	r7, sp, #16
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007012:	2300      	movs	r3, #0
 8007014:	617b      	str	r3, [r7, #20]
    if (err) {
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <lfs_file_write+0x1c>
        return err;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	e02b      	b.n	8007078 <lfs_file_write+0x74>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	9302      	str	r3, [sp, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f641 020c 	movw	r2, #6156	; 0x180c
 8007032:	4913      	ldr	r1, [pc, #76]	; (8007080 <lfs_file_write+0x7c>)
 8007034:	4813      	ldr	r0, [pc, #76]	; (8007084 <lfs_file_write+0x80>)
 8007036:	f000 fa9b 	bl	8007570 <myprintf>
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	4618      	mov	r0, r3
 8007042:	f7f9 fff5 	bl	8001030 <lfs_mlist_isopen>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <lfs_file_write+0x56>
 800704c:	4b0e      	ldr	r3, [pc, #56]	; (8007088 <lfs_file_write+0x84>)
 800704e:	4a0f      	ldr	r2, [pc, #60]	; (800708c <lfs_file_write+0x88>)
 8007050:	f641 010e 	movw	r1, #6158	; 0x180e
 8007054:	480a      	ldr	r0, [pc, #40]	; (8007080 <lfs_file_write+0x7c>)
 8007056:	f002 fd39 	bl	8009acc <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	68b9      	ldr	r1, [r7, #8]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f7fe fa11 	bl	8005488 <lfs_file_write_>
 8007066:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f641 0212 	movw	r2, #6162	; 0x1812
 800706e:	4904      	ldr	r1, [pc, #16]	; (8007080 <lfs_file_write+0x7c>)
 8007070:	4807      	ldr	r0, [pc, #28]	; (8007090 <lfs_file_write+0x8c>)
 8007072:	f000 fa7d 	bl	8007570 <myprintf>
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007076:	693b      	ldr	r3, [r7, #16]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	0800af70 	.word	0x0800af70
 8007084:	0800c224 	.word	0x0800c224
 8007088:	0800c120 	.word	0x0800c120
 800708c:	0800c970 	.word	0x0800c970
 8007090:	0800c254 	.word	0x0800c254

08007094 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	e024      	b.n	80070f4 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	091a      	lsrs	r2, r3, #4
 80070ae:	6939      	ldr	r1, [r7, #16]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	440b      	add	r3, r1
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	4619      	mov	r1, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	404b      	eors	r3, r1
 80070bc:	f003 030f 	and.w	r3, r3, #15
 80070c0:	4911      	ldr	r1, [pc, #68]	; (8007108 <lfs_crc+0x74>)
 80070c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80070c6:	4053      	eors	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	091a      	lsrs	r2, r3, #4
 80070ce:	6939      	ldr	r1, [r7, #16]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	440b      	add	r3, r1
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	091b      	lsrs	r3, r3, #4
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	4619      	mov	r1, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	404b      	eors	r3, r1
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	4908      	ldr	r1, [pc, #32]	; (8007108 <lfs_crc+0x74>)
 80070e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80070ea:	4053      	eors	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	3301      	adds	r3, #1
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d3d6      	bcc.n	80070aa <lfs_crc+0x16>
    }

    return crc;
 80070fc:	68fb      	ldr	r3, [r7, #12]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	371c      	adds	r7, #28
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr
 8007108:	0800c980 	.word	0x0800c980

0800710c <_flash_read>:
//    .block_cycles = 500,
//};

//internal
int _flash_read(const struct lfs_config *c, lfs_block_t block,
        lfs_off_t off, void *buffer, lfs_size_t size){
 800710c:	b480      	push	{r7}
 800710e:	b089      	sub	sp, #36	; 0x24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
 8007118:	603b      	str	r3, [r7, #0]

	uint32_t StartAddress, i;
	uint32_t *Bff;

	StartAddress = 0x0800D800 + (block*c->block_size) + off;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	fb02 f203 	mul.w	r2, r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800712c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007130:	61fb      	str	r3, [r7, #28]

	Bff = (uint32_t*)buffer;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	617b      	str	r3, [r7, #20]
	for (i=0 ; i<(size/4) ; i++){
 8007136:	2300      	movs	r3, #0
 8007138:	61bb      	str	r3, [r7, #24]
 800713a:	e00c      	b.n	8007156 <_flash_read+0x4a>
		*Bff = *(__IO uint32_t*)StartAddress;
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	601a      	str	r2, [r3, #0]
		StartAddress += 4;
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	3304      	adds	r3, #4
 8007148:	61fb      	str	r3, [r7, #28]
		Bff++;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	3304      	adds	r3, #4
 800714e:	617b      	str	r3, [r7, #20]
	for (i=0 ; i<(size/4) ; i++){
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	3301      	adds	r3, #1
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	089b      	lsrs	r3, r3, #2
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	429a      	cmp	r2, r3
 800715e:	d3ed      	bcc.n	800713c <_flash_read+0x30>
	}

	return LFS_ERR_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3724      	adds	r7, #36	; 0x24
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <_flash_prog>:

// Program a region in a block. The block must have previously
// been erased. Negative error codes are propagated to the user.
// May return LFS_ERR_CORRUPT if the block should be considered bad.
int _flash_prog(const struct lfs_config *c, lfs_block_t block,
        lfs_off_t off, const void *buffer, lfs_size_t size){
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
	uint32_t StartAddress, i;
	uint32_t *Bff;

	StartAddress = 0x0800D800 + (block*c->block_size) + off;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	fb02 f203 	mul.w	r2, r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4413      	add	r3, r2
 8007188:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800718c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007190:	61fb      	str	r3, [r7, #28]
	Bff = (uint32_t*)buffer;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	617b      	str	r3, [r7, #20]

	HAL_FLASH_Unlock();
 8007196:	f000 feb7 	bl	8007f08 <HAL_FLASH_Unlock>
	for (i=0 ; i<(size/4) ; i++){
 800719a:	2300      	movs	r3, #0
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	e011      	b.n	80071c4 <_flash_prog+0x58>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartAddress, (uint64_t)(*Bff));
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	69f9      	ldr	r1, [r7, #28]
 80071ac:	2002      	movs	r0, #2
 80071ae:	f000 fe3b 	bl	8007e28 <HAL_FLASH_Program>
		StartAddress += 4;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	3304      	adds	r3, #4
 80071b6:	61fb      	str	r3, [r7, #28]
		Bff++;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	3304      	adds	r3, #4
 80071bc:	617b      	str	r3, [r7, #20]
	for (i=0 ; i<(size/4) ; i++){
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	3301      	adds	r3, #1
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	089b      	lsrs	r3, r3, #2
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d3e8      	bcc.n	80071a0 <_flash_prog+0x34>
	}
	HAL_FLASH_Lock();
 80071ce:	f000 fec1 	bl	8007f54 <HAL_FLASH_Lock>

	return LFS_ERR_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3720      	adds	r7, #32
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <_flash_erase>:

// Erase a block. A block must be erased before being programmed.
// The state of an erased block is undefined. Negative error codes
// are propagated to the user.
// May return LFS_ERR_CORRUPT if the block should be considered bad.
int _flash_erase(const struct lfs_config *c, lfs_block_t block){
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
	uint32_t StartAddress;
	uint32_t PageErr;
	FLASH_EraseInitTypeDef EraseInitStruct;

	StartAddress = 0x0800D800 + (block*c->block_size);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	fb02 f303 	mul.w	r3, r2, r3
 80071f0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80071f4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80071f8:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80071fa:	2300      	movs	r3, #0
 80071fc:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.PageAddress = StartAddress;
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1;
 8007202:	2301      	movs	r3, #1
 8007204:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8007206:	2301      	movs	r3, #1
 8007208:	60fb      	str	r3, [r7, #12]
	HAL_FLASH_Unlock();
 800720a:	f000 fe7d 	bl	8007f08 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct, &PageErr);
 800720e:	f107 0218 	add.w	r2, r7, #24
 8007212:	f107 0308 	add.w	r3, r7, #8
 8007216:	4611      	mov	r1, r2
 8007218:	4618      	mov	r0, r3
 800721a:	f000 ff5d 	bl	80080d8 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800721e:	f000 fe99 	bl	8007f54 <HAL_FLASH_Lock>

	return LFS_ERR_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3720      	adds	r7, #32
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <_flash_sync>:

// Sync the state of the underlying block device. Negative error codes
// are propagated to the user.
int _flash_sync(const struct lfs_config *c){
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
	return LFS_ERR_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr

08007240 <__init_storage>:

void __init_storage(){
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
	int32_t error;

	LfsConfig.read_size = 64;
 8007246:	4b1f      	ldr	r3, [pc, #124]	; (80072c4 <__init_storage+0x84>)
 8007248:	2240      	movs	r2, #64	; 0x40
 800724a:	615a      	str	r2, [r3, #20]
	LfsConfig.prog_size = 64;
 800724c:	4b1d      	ldr	r3, [pc, #116]	; (80072c4 <__init_storage+0x84>)
 800724e:	2240      	movs	r2, #64	; 0x40
 8007250:	619a      	str	r2, [r3, #24]
	LfsConfig.block_size = 1024;
 8007252:	4b1c      	ldr	r3, [pc, #112]	; (80072c4 <__init_storage+0x84>)
 8007254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007258:	61da      	str	r2, [r3, #28]
	LfsConfig.block_count = 10;
 800725a:	4b1a      	ldr	r3, [pc, #104]	; (80072c4 <__init_storage+0x84>)
 800725c:	220a      	movs	r2, #10
 800725e:	621a      	str	r2, [r3, #32]
	LfsConfig.cache_size = 256;
 8007260:	4b18      	ldr	r3, [pc, #96]	; (80072c4 <__init_storage+0x84>)
 8007262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007266:	629a      	str	r2, [r3, #40]	; 0x28
	LfsConfig.lookahead_size = 8;
 8007268:	4b16      	ldr	r3, [pc, #88]	; (80072c4 <__init_storage+0x84>)
 800726a:	2208      	movs	r2, #8
 800726c:	62da      	str	r2, [r3, #44]	; 0x2c
	LfsConfig.block_cycles = 1000;
 800726e:	4b15      	ldr	r3, [pc, #84]	; (80072c4 <__init_storage+0x84>)
 8007270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007274:	625a      	str	r2, [r3, #36]	; 0x24

	LfsConfig.read = _flash_read;
 8007276:	4b13      	ldr	r3, [pc, #76]	; (80072c4 <__init_storage+0x84>)
 8007278:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <__init_storage+0x88>)
 800727a:	605a      	str	r2, [r3, #4]
	LfsConfig.prog = _flash_prog;
 800727c:	4b11      	ldr	r3, [pc, #68]	; (80072c4 <__init_storage+0x84>)
 800727e:	4a13      	ldr	r2, [pc, #76]	; (80072cc <__init_storage+0x8c>)
 8007280:	609a      	str	r2, [r3, #8]
	LfsConfig.erase = _flash_erase;
 8007282:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <__init_storage+0x84>)
 8007284:	4a12      	ldr	r2, [pc, #72]	; (80072d0 <__init_storage+0x90>)
 8007286:	60da      	str	r2, [r3, #12]
	LfsConfig.sync = _flash_sync;
 8007288:	4b0e      	ldr	r3, [pc, #56]	; (80072c4 <__init_storage+0x84>)
 800728a:	4a12      	ldr	r2, [pc, #72]	; (80072d4 <__init_storage+0x94>)
 800728c:	611a      	str	r2, [r3, #16]

	error = lfs_mount(&Lfs, &LfsConfig);
 800728e:	490d      	ldr	r1, [pc, #52]	; (80072c4 <__init_storage+0x84>)
 8007290:	4811      	ldr	r0, [pc, #68]	; (80072d8 <__init_storage+0x98>)
 8007292:	f7ff fd6b 	bl	8006d6c <lfs_mount>
 8007296:	6078      	str	r0, [r7, #4]
	if (error != LFS_ERR_OK){
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00d      	beq.n	80072ba <__init_storage+0x7a>
		lfs_format(&Lfs, &LfsConfig);
 800729e:	4909      	ldr	r1, [pc, #36]	; (80072c4 <__init_storage+0x84>)
 80072a0:	480d      	ldr	r0, [pc, #52]	; (80072d8 <__init_storage+0x98>)
 80072a2:	f7ff fceb 	bl	8006c7c <lfs_format>
		error = lfs_mount(&Lfs, &LfsConfig);
 80072a6:	4907      	ldr	r1, [pc, #28]	; (80072c4 <__init_storage+0x84>)
 80072a8:	480b      	ldr	r0, [pc, #44]	; (80072d8 <__init_storage+0x98>)
 80072aa:	f7ff fd5f 	bl	8006d6c <lfs_mount>
 80072ae:	6078      	str	r0, [r7, #4]
		if (error != LFS_ERR_OK){
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <__init_storage+0x7a>
			Error_Handler();
 80072b6:	f000 f97d 	bl	80075b4 <Error_Handler>
		}
	}
}
 80072ba:	bf00      	nop
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	200001d0 	.word	0x200001d0
 80072c8:	0800710d 	.word	0x0800710d
 80072cc:	0800716d 	.word	0x0800716d
 80072d0:	080071dd 	.word	0x080071dd
 80072d4:	0800722d 	.word	0x0800722d
 80072d8:	2000026c 	.word	0x2000026c

080072dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b096      	sub	sp, #88	; 0x58
 80072e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80072e2:	f000 fb5b 	bl	800799c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80072e6:	f000 f851 	bl	800738c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80072ea:	f000 f8f5 	bl	80074d8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80072ee:	f000 f893 	bl	8007418 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80072f2:	f000 f8c7 	bl	8007484 <MX_USART2_UART_Init>
//  int add = 0;
//  for(int i=0;i<300;i++){
//	  Sector_Erase_4B(&hspi2, add, 64);
//	  add+=65536;
//  }
  erase_done = 1;
 80072f6:	4b21      	ldr	r3, [pc, #132]	; (800737c <main+0xa0>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	601a      	str	r2, [r3, #0]
//  myprintf("Starting LittleFS application...\n");
  //internal
  HAL_Delay(100);
 80072fc:	2064      	movs	r0, #100	; 0x64
 80072fe:	f000 fbaf 	bl	8007a60 <HAL_Delay>
   __init_storage();
 8007302:	f7ff ff9d 	bl	8007240 <__init_storage>

   lfs_file_open(&Lfs, &File, "count.bin", LFS_O_RDONLY | LFS_O_CREAT);
 8007306:	4639      	mov	r1, r7
 8007308:	f240 1301 	movw	r3, #257	; 0x101
 800730c:	4a1c      	ldr	r2, [pc, #112]	; (8007380 <main+0xa4>)
 800730e:	481d      	ldr	r0, [pc, #116]	; (8007384 <main+0xa8>)
 8007310:	f7ff fda4 	bl	8006e5c <lfs_file_open>
   lfs_file_read(&Lfs, &File, &Counter, sizeof(app_count_t));
 8007314:	4639      	mov	r1, r7
 8007316:	2308      	movs	r3, #8
 8007318:	4a1b      	ldr	r2, [pc, #108]	; (8007388 <main+0xac>)
 800731a:	481a      	ldr	r0, [pc, #104]	; (8007384 <main+0xa8>)
 800731c:	f7ff fe2a 	bl	8006f74 <lfs_file_read>
   lfs_file_close(&Lfs, &File);
 8007320:	463b      	mov	r3, r7
 8007322:	4619      	mov	r1, r3
 8007324:	4817      	ldr	r0, [pc, #92]	; (8007384 <main+0xa8>)
 8007326:	f7ff fde5 	bl	8006ef4 <lfs_file_close>

   Counter.bootCount += 1;
 800732a:	4b17      	ldr	r3, [pc, #92]	; (8007388 <main+0xac>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	3301      	adds	r3, #1
 8007330:	4a15      	ldr	r2, [pc, #84]	; (8007388 <main+0xac>)
 8007332:	6053      	str	r3, [r2, #4]
//
//		// print the boot count
//		myprintf("boot_count: %d\n", (uint8_t)boot_count);
		//internal

		  HalTickAux = HAL_GetTick();
 8007334:	f000 fb8a 	bl	8007a4c <HAL_GetTick>
 8007338:	6578      	str	r0, [r7, #84]	; 0x54

		  lfs_file_open(&Lfs, &File, "count.bin", LFS_O_RDWR | LFS_O_CREAT);
 800733a:	4639      	mov	r1, r7
 800733c:	f240 1303 	movw	r3, #259	; 0x103
 8007340:	4a0f      	ldr	r2, [pc, #60]	; (8007380 <main+0xa4>)
 8007342:	4810      	ldr	r0, [pc, #64]	; (8007384 <main+0xa8>)
 8007344:	f7ff fd8a 	bl	8006e5c <lfs_file_open>
		  lfs_file_write(&Lfs, &File, &Counter, sizeof(app_count_t));
 8007348:	4639      	mov	r1, r7
 800734a:	2308      	movs	r3, #8
 800734c:	4a0e      	ldr	r2, [pc, #56]	; (8007388 <main+0xac>)
 800734e:	480d      	ldr	r0, [pc, #52]	; (8007384 <main+0xa8>)
 8007350:	f7ff fe58 	bl	8007004 <lfs_file_write>
		  lfs_file_close(&Lfs, &File);
 8007354:	463b      	mov	r3, r7
 8007356:	4619      	mov	r1, r3
 8007358:	480a      	ldr	r0, [pc, #40]	; (8007384 <main+0xa8>)
 800735a:	f7ff fdcb 	bl	8006ef4 <lfs_file_close>

		  while ((HAL_GetTick() - HalTickAux) < 1000);
 800735e:	bf00      	nop
 8007360:	f000 fb74 	bl	8007a4c <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800736e:	d3f7      	bcc.n	8007360 <main+0x84>

		  Counter.secCount += 1;
 8007370:	4b05      	ldr	r3, [pc, #20]	; (8007388 <main+0xac>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3301      	adds	r3, #1
 8007376:	4a04      	ldr	r2, [pc, #16]	; (8007388 <main+0xac>)
 8007378:	6013      	str	r3, [r2, #0]
		  HalTickAux = HAL_GetTick();
 800737a:	e7db      	b.n	8007334 <main+0x58>
 800737c:	2000008c 	.word	0x2000008c
 8007380:	0800c830 	.word	0x0800c830
 8007384:	2000026c 	.word	0x2000026c
 8007388:	20000090 	.word	0x20000090

0800738c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b090      	sub	sp, #64	; 0x40
 8007390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007392:	f107 0318 	add.w	r3, r7, #24
 8007396:	2228      	movs	r2, #40	; 0x28
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f002 fc1c 	bl	8009bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073a0:	1d3b      	adds	r3, r7, #4
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	605a      	str	r2, [r3, #4]
 80073a8:	609a      	str	r2, [r3, #8]
 80073aa:	60da      	str	r2, [r3, #12]
 80073ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80073ae:	2301      	movs	r3, #1
 80073b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80073b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80073b8:	2300      	movs	r3, #0
 80073ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073bc:	2301      	movs	r3, #1
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073c0:	2302      	movs	r3, #2
 80073c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80073c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80073ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073d0:	f107 0318 	add.w	r3, r7, #24
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 f8c3 	bl	8008560 <HAL_RCC_OscConfig>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80073e0:	f000 f8e8 	bl	80075b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073e4:	230f      	movs	r3, #15
 80073e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073e8:	2302      	movs	r3, #2
 80073ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073ec:	2300      	movs	r3, #0
 80073ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80073f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80073fa:	1d3b      	adds	r3, r7, #4
 80073fc:	2101      	movs	r1, #1
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 fb2e 	bl	8008a60 <HAL_RCC_ClockConfig>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800740a:	f000 f8d3 	bl	80075b4 <Error_Handler>
  }
}
 800740e:	bf00      	nop
 8007410:	3740      	adds	r7, #64	; 0x40
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800741c:	4b17      	ldr	r3, [pc, #92]	; (800747c <MX_SPI2_Init+0x64>)
 800741e:	4a18      	ldr	r2, [pc, #96]	; (8007480 <MX_SPI2_Init+0x68>)
 8007420:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007422:	4b16      	ldr	r3, [pc, #88]	; (800747c <MX_SPI2_Init+0x64>)
 8007424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007428:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800742a:	4b14      	ldr	r3, [pc, #80]	; (800747c <MX_SPI2_Init+0x64>)
 800742c:	2200      	movs	r2, #0
 800742e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007430:	4b12      	ldr	r3, [pc, #72]	; (800747c <MX_SPI2_Init+0x64>)
 8007432:	2200      	movs	r2, #0
 8007434:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007436:	4b11      	ldr	r3, [pc, #68]	; (800747c <MX_SPI2_Init+0x64>)
 8007438:	2200      	movs	r2, #0
 800743a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800743c:	4b0f      	ldr	r3, [pc, #60]	; (800747c <MX_SPI2_Init+0x64>)
 800743e:	2200      	movs	r2, #0
 8007440:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007442:	4b0e      	ldr	r3, [pc, #56]	; (800747c <MX_SPI2_Init+0x64>)
 8007444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007448:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800744a:	4b0c      	ldr	r3, [pc, #48]	; (800747c <MX_SPI2_Init+0x64>)
 800744c:	2200      	movs	r2, #0
 800744e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007450:	4b0a      	ldr	r3, [pc, #40]	; (800747c <MX_SPI2_Init+0x64>)
 8007452:	2200      	movs	r2, #0
 8007454:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007456:	4b09      	ldr	r3, [pc, #36]	; (800747c <MX_SPI2_Init+0x64>)
 8007458:	2200      	movs	r2, #0
 800745a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800745c:	4b07      	ldr	r3, [pc, #28]	; (800747c <MX_SPI2_Init+0x64>)
 800745e:	2200      	movs	r2, #0
 8007460:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007462:	4b06      	ldr	r3, [pc, #24]	; (800747c <MX_SPI2_Init+0x64>)
 8007464:	220a      	movs	r2, #10
 8007466:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007468:	4804      	ldr	r0, [pc, #16]	; (800747c <MX_SPI2_Init+0x64>)
 800746a:	f001 fc87 	bl	8008d7c <HAL_SPI_Init>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007474:	f000 f89e 	bl	80075b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007478:	bf00      	nop
 800747a:	bd80      	pop	{r7, pc}
 800747c:	200000a4 	.word	0x200000a4
 8007480:	40003800 	.word	0x40003800

08007484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007488:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <MX_USART2_UART_Init+0x4c>)
 800748a:	4a12      	ldr	r2, [pc, #72]	; (80074d4 <MX_USART2_UART_Init+0x50>)
 800748c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800748e:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <MX_USART2_UART_Init+0x4c>)
 8007490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007496:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <MX_USART2_UART_Init+0x4c>)
 8007498:	2200      	movs	r2, #0
 800749a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <MX_USART2_UART_Init+0x4c>)
 800749e:	2200      	movs	r2, #0
 80074a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80074a2:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <MX_USART2_UART_Init+0x4c>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80074a8:	4b09      	ldr	r3, [pc, #36]	; (80074d0 <MX_USART2_UART_Init+0x4c>)
 80074aa:	220c      	movs	r2, #12
 80074ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074ae:	4b08      	ldr	r3, [pc, #32]	; (80074d0 <MX_USART2_UART_Init+0x4c>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <MX_USART2_UART_Init+0x4c>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80074ba:	4805      	ldr	r0, [pc, #20]	; (80074d0 <MX_USART2_UART_Init+0x4c>)
 80074bc:	f001 fce2 	bl	8008e84 <HAL_UART_Init>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80074c6:	f000 f875 	bl	80075b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80074ca:	bf00      	nop
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20000224 	.word	0x20000224
 80074d4:	40004400 	.word	0x40004400

080074d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074de:	f107 0310 	add.w	r3, r7, #16
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	605a      	str	r2, [r3, #4]
 80074e8:	609a      	str	r2, [r3, #8]
 80074ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074ec:	4b1e      	ldr	r3, [pc, #120]	; (8007568 <MX_GPIO_Init+0x90>)
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	4a1d      	ldr	r2, [pc, #116]	; (8007568 <MX_GPIO_Init+0x90>)
 80074f2:	f043 0320 	orr.w	r3, r3, #32
 80074f6:	6193      	str	r3, [r2, #24]
 80074f8:	4b1b      	ldr	r3, [pc, #108]	; (8007568 <MX_GPIO_Init+0x90>)
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007504:	4b18      	ldr	r3, [pc, #96]	; (8007568 <MX_GPIO_Init+0x90>)
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	4a17      	ldr	r2, [pc, #92]	; (8007568 <MX_GPIO_Init+0x90>)
 800750a:	f043 0304 	orr.w	r3, r3, #4
 800750e:	6193      	str	r3, [r2, #24]
 8007510:	4b15      	ldr	r3, [pc, #84]	; (8007568 <MX_GPIO_Init+0x90>)
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	60bb      	str	r3, [r7, #8]
 800751a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800751c:	4b12      	ldr	r3, [pc, #72]	; (8007568 <MX_GPIO_Init+0x90>)
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	4a11      	ldr	r2, [pc, #68]	; (8007568 <MX_GPIO_Init+0x90>)
 8007522:	f043 0308 	orr.w	r3, r3, #8
 8007526:	6193      	str	r3, [r2, #24]
 8007528:	4b0f      	ldr	r3, [pc, #60]	; (8007568 <MX_GPIO_Init+0x90>)
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	607b      	str	r3, [r7, #4]
 8007532:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FM_CS_GPIO_Port, FM_CS_Pin, GPIO_PIN_RESET);
 8007534:	2200      	movs	r2, #0
 8007536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800753a:	480c      	ldr	r0, [pc, #48]	; (800756c <MX_GPIO_Init+0x94>)
 800753c:	f000 fff8 	bl	8008530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FM_CS_Pin */
  GPIO_InitStruct.Pin = FM_CS_Pin;
 8007540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007546:	2301      	movs	r3, #1
 8007548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754a:	2300      	movs	r3, #0
 800754c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800754e:	2302      	movs	r3, #2
 8007550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FM_CS_GPIO_Port, &GPIO_InitStruct);
 8007552:	f107 0310 	add.w	r3, r7, #16
 8007556:	4619      	mov	r1, r3
 8007558:	4804      	ldr	r0, [pc, #16]	; (800756c <MX_GPIO_Init+0x94>)
 800755a:	f000 fe65 	bl	8008228 <HAL_GPIO_Init>

}
 800755e:	bf00      	nop
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	40021000 	.word	0x40021000
 800756c:	40010c00 	.word	0x40010c00

08007570 <myprintf>:

/* USER CODE BEGIN 4 */
void myprintf(const char *fmt, ...) {
 8007570:	b40f      	push	{r0, r1, r2, r3}
 8007572:	b580      	push	{r7, lr}
 8007574:	b09a      	sub	sp, #104	; 0x68
 8007576:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8007578:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800757c:	667b      	str	r3, [r7, #100]	; 0x64
    char buffer[100];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 800757e:	4638      	mov	r0, r7
 8007580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007582:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007584:	2164      	movs	r1, #100	; 0x64
 8007586:	f002 ff2d 	bl	800a3e4 <vsniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 800758a:	463b      	mov	r3, r7
 800758c:	4618      	mov	r0, r3
 800758e:	f7f8 fddd 	bl	800014c <strlen>
 8007592:	4603      	mov	r3, r0
 8007594:	b29a      	uxth	r2, r3
 8007596:	4639      	mov	r1, r7
 8007598:	f04f 33ff 	mov.w	r3, #4294967295
 800759c:	4804      	ldr	r0, [pc, #16]	; (80075b0 <myprintf+0x40>)
 800759e:	f001 fcc1 	bl	8008f24 <HAL_UART_Transmit>
    va_end(args);
}
 80075a2:	bf00      	nop
 80075a4:	3768      	adds	r7, #104	; 0x68
 80075a6:	46bd      	mov	sp, r7
 80075a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075ac:	b004      	add	sp, #16
 80075ae:	4770      	bx	lr
 80075b0:	20000224 	.word	0x20000224

080075b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80075b8:	b672      	cpsid	i
}
 80075ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80075bc:	e7fe      	b.n	80075bc <Error_Handler+0x8>
	...

080075c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80075c6:	4b15      	ldr	r3, [pc, #84]	; (800761c <HAL_MspInit+0x5c>)
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	4a14      	ldr	r2, [pc, #80]	; (800761c <HAL_MspInit+0x5c>)
 80075cc:	f043 0301 	orr.w	r3, r3, #1
 80075d0:	6193      	str	r3, [r2, #24]
 80075d2:	4b12      	ldr	r3, [pc, #72]	; (800761c <HAL_MspInit+0x5c>)
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	60bb      	str	r3, [r7, #8]
 80075dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80075de:	4b0f      	ldr	r3, [pc, #60]	; (800761c <HAL_MspInit+0x5c>)
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	4a0e      	ldr	r2, [pc, #56]	; (800761c <HAL_MspInit+0x5c>)
 80075e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e8:	61d3      	str	r3, [r2, #28]
 80075ea:	4b0c      	ldr	r3, [pc, #48]	; (800761c <HAL_MspInit+0x5c>)
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f2:	607b      	str	r3, [r7, #4]
 80075f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80075f6:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <HAL_MspInit+0x60>)
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	4a04      	ldr	r2, [pc, #16]	; (8007620 <HAL_MspInit+0x60>)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007612:	bf00      	nop
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr
 800761c:	40021000 	.word	0x40021000
 8007620:	40010000 	.word	0x40010000

08007624 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800762c:	f107 0310 	add.w	r3, r7, #16
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	605a      	str	r2, [r3, #4]
 8007636:	609a      	str	r2, [r3, #8]
 8007638:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <HAL_SPI_MspInit+0x8c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d131      	bne.n	80076a8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007644:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <HAL_SPI_MspInit+0x90>)
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <HAL_SPI_MspInit+0x90>)
 800764a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800764e:	61d3      	str	r3, [r2, #28]
 8007650:	4b18      	ldr	r3, [pc, #96]	; (80076b4 <HAL_SPI_MspInit+0x90>)
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800765c:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <HAL_SPI_MspInit+0x90>)
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	4a14      	ldr	r2, [pc, #80]	; (80076b4 <HAL_SPI_MspInit+0x90>)
 8007662:	f043 0308 	orr.w	r3, r3, #8
 8007666:	6193      	str	r3, [r2, #24]
 8007668:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <HAL_SPI_MspInit+0x90>)
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	60bb      	str	r3, [r7, #8]
 8007672:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007674:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007678:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800767a:	2302      	movs	r3, #2
 800767c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800767e:	2303      	movs	r3, #3
 8007680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007682:	f107 0310 	add.w	r3, r7, #16
 8007686:	4619      	mov	r1, r3
 8007688:	480b      	ldr	r0, [pc, #44]	; (80076b8 <HAL_SPI_MspInit+0x94>)
 800768a:	f000 fdcd 	bl	8008228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800768e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007698:	2300      	movs	r3, #0
 800769a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800769c:	f107 0310 	add.w	r3, r7, #16
 80076a0:	4619      	mov	r1, r3
 80076a2:	4805      	ldr	r0, [pc, #20]	; (80076b8 <HAL_SPI_MspInit+0x94>)
 80076a4:	f000 fdc0 	bl	8008228 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80076a8:	bf00      	nop
 80076aa:	3720      	adds	r7, #32
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40003800 	.word	0x40003800
 80076b4:	40021000 	.word	0x40021000
 80076b8:	40010c00 	.word	0x40010c00

080076bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076c4:	f107 0310 	add.w	r3, r7, #16
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	605a      	str	r2, [r3, #4]
 80076ce:	609a      	str	r2, [r3, #8]
 80076d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <HAL_UART_MspInit+0x98>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d137      	bne.n	800774c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80076dc:	4b1e      	ldr	r3, [pc, #120]	; (8007758 <HAL_UART_MspInit+0x9c>)
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	4a1d      	ldr	r2, [pc, #116]	; (8007758 <HAL_UART_MspInit+0x9c>)
 80076e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e6:	61d3      	str	r3, [r2, #28]
 80076e8:	4b1b      	ldr	r3, [pc, #108]	; (8007758 <HAL_UART_MspInit+0x9c>)
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076f4:	4b18      	ldr	r3, [pc, #96]	; (8007758 <HAL_UART_MspInit+0x9c>)
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	4a17      	ldr	r2, [pc, #92]	; (8007758 <HAL_UART_MspInit+0x9c>)
 80076fa:	f043 0304 	orr.w	r3, r3, #4
 80076fe:	6193      	str	r3, [r2, #24]
 8007700:	4b15      	ldr	r3, [pc, #84]	; (8007758 <HAL_UART_MspInit+0x9c>)
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	60bb      	str	r3, [r7, #8]
 800770a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800770c:	2304      	movs	r3, #4
 800770e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007710:	2302      	movs	r3, #2
 8007712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007714:	2303      	movs	r3, #3
 8007716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007718:	f107 0310 	add.w	r3, r7, #16
 800771c:	4619      	mov	r1, r3
 800771e:	480f      	ldr	r0, [pc, #60]	; (800775c <HAL_UART_MspInit+0xa0>)
 8007720:	f000 fd82 	bl	8008228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007724:	2308      	movs	r3, #8
 8007726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800772c:	2300      	movs	r3, #0
 800772e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007730:	f107 0310 	add.w	r3, r7, #16
 8007734:	4619      	mov	r1, r3
 8007736:	4809      	ldr	r0, [pc, #36]	; (800775c <HAL_UART_MspInit+0xa0>)
 8007738:	f000 fd76 	bl	8008228 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800773c:	2200      	movs	r2, #0
 800773e:	2100      	movs	r1, #0
 8007740:	2026      	movs	r0, #38	; 0x26
 8007742:	f000 fa88 	bl	8007c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007746:	2026      	movs	r0, #38	; 0x26
 8007748:	f000 faa1 	bl	8007c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800774c:	bf00      	nop
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	40004400 	.word	0x40004400
 8007758:	40021000 	.word	0x40021000
 800775c:	40010800 	.word	0x40010800

08007760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007764:	e7fe      	b.n	8007764 <NMI_Handler+0x4>

08007766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007766:	b480      	push	{r7}
 8007768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800776a:	e7fe      	b.n	800776a <HardFault_Handler+0x4>

0800776c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007770:	e7fe      	b.n	8007770 <MemManage_Handler+0x4>

08007772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007772:	b480      	push	{r7}
 8007774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007776:	e7fe      	b.n	8007776 <BusFault_Handler+0x4>

08007778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800777c:	e7fe      	b.n	800777c <UsageFault_Handler+0x4>

0800777e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800777e:	b480      	push	{r7}
 8007780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007782:	bf00      	nop
 8007784:	46bd      	mov	sp, r7
 8007786:	bc80      	pop	{r7}
 8007788:	4770      	bx	lr

0800778a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800778a:	b480      	push	{r7}
 800778c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800778e:	bf00      	nop
 8007790:	46bd      	mov	sp, r7
 8007792:	bc80      	pop	{r7}
 8007794:	4770      	bx	lr

08007796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007796:	b480      	push	{r7}
 8007798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800779a:	bf00      	nop
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr

080077a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077a6:	f000 f93f 	bl	8007a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077aa:	bf00      	nop
 80077ac:	bd80      	pop	{r7, pc}
	...

080077b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80077b4:	4802      	ldr	r0, [pc, #8]	; (80077c0 <USART2_IRQHandler+0x10>)
 80077b6:	f001 fc39 	bl	800902c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80077ba:	bf00      	nop
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000224 	.word	0x20000224

080077c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
	return 1;
 80077c8:	2301      	movs	r3, #1
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr

080077d2 <_kill>:

int _kill(int pid, int sig)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80077dc:	f002 f994 	bl	8009b08 <__errno>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2216      	movs	r2, #22
 80077e4:	601a      	str	r2, [r3, #0]
	return -1;
 80077e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <_exit>:

void _exit (int status)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80077fa:	f04f 31ff 	mov.w	r1, #4294967295
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff ffe7 	bl	80077d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007804:	e7fe      	b.n	8007804 <_exit+0x12>

08007806 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	e00a      	b.n	800782e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007818:	f3af 8000 	nop.w
 800781c:	4601      	mov	r1, r0
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	60ba      	str	r2, [r7, #8]
 8007824:	b2ca      	uxtb	r2, r1
 8007826:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	3301      	adds	r3, #1
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	429a      	cmp	r2, r3
 8007834:	dbf0      	blt.n	8007818 <_read+0x12>
	}

return len;
 8007836:	687b      	ldr	r3, [r7, #4]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	e009      	b.n	8007866 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	60ba      	str	r2, [r7, #8]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	3301      	adds	r3, #1
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	429a      	cmp	r2, r3
 800786c:	dbf1      	blt.n	8007852 <_write+0x12>
	}
	return len;
 800786e:	687b      	ldr	r3, [r7, #4]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <_close>:

int _close(int file)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	return -1;
 8007880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr

0800788e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800789e:	605a      	str	r2, [r3, #4]
	return 0;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bc80      	pop	{r7}
 80078aa:	4770      	bx	lr

080078ac <_isatty>:

int _isatty(int file)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	return 1;
 80078b4:	2301      	movs	r3, #1
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr

080078c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
	return 0;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr

080078d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80078e0:	4a14      	ldr	r2, [pc, #80]	; (8007934 <_sbrk+0x5c>)
 80078e2:	4b15      	ldr	r3, [pc, #84]	; (8007938 <_sbrk+0x60>)
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078ec:	4b13      	ldr	r3, [pc, #76]	; (800793c <_sbrk+0x64>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078f4:	4b11      	ldr	r3, [pc, #68]	; (800793c <_sbrk+0x64>)
 80078f6:	4a12      	ldr	r2, [pc, #72]	; (8007940 <_sbrk+0x68>)
 80078f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078fa:	4b10      	ldr	r3, [pc, #64]	; (800793c <_sbrk+0x64>)
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4413      	add	r3, r2
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	429a      	cmp	r2, r3
 8007906:	d207      	bcs.n	8007918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007908:	f002 f8fe 	bl	8009b08 <__errno>
 800790c:	4603      	mov	r3, r0
 800790e:	220c      	movs	r2, #12
 8007910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007912:	f04f 33ff 	mov.w	r3, #4294967295
 8007916:	e009      	b.n	800792c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007918:	4b08      	ldr	r3, [pc, #32]	; (800793c <_sbrk+0x64>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800791e:	4b07      	ldr	r3, [pc, #28]	; (800793c <_sbrk+0x64>)
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4413      	add	r3, r2
 8007926:	4a05      	ldr	r2, [pc, #20]	; (800793c <_sbrk+0x64>)
 8007928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20005000 	.word	0x20005000
 8007938:	00000400 	.word	0x00000400
 800793c:	20000098 	.word	0x20000098
 8007940:	20000320 	.word	0x20000320

08007944 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007948:	bf00      	nop
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr

08007950 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007950:	f7ff fff8 	bl	8007944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007954:	480b      	ldr	r0, [pc, #44]	; (8007984 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007956:	490c      	ldr	r1, [pc, #48]	; (8007988 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007958:	4a0c      	ldr	r2, [pc, #48]	; (800798c <LoopFillZerobss+0x16>)
  movs r3, #0
 800795a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800795c:	e002      	b.n	8007964 <LoopCopyDataInit>

0800795e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800795e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007962:	3304      	adds	r3, #4

08007964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007968:	d3f9      	bcc.n	800795e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800796a:	4a09      	ldr	r2, [pc, #36]	; (8007990 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800796c:	4c09      	ldr	r4, [pc, #36]	; (8007994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800796e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007970:	e001      	b.n	8007976 <LoopFillZerobss>

08007972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007974:	3204      	adds	r2, #4

08007976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007978:	d3fb      	bcc.n	8007972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800797a:	f002 f8dd 	bl	8009b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800797e:	f7ff fcad 	bl	80072dc <main>
  bx lr
 8007982:	4770      	bx	lr
  ldr r0, =_sdata
 8007984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007988:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800798c:	0800cac8 	.word	0x0800cac8
  ldr r2, =_sbss
 8007990:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8007994:	20000320 	.word	0x20000320

08007998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007998:	e7fe      	b.n	8007998 <ADC1_2_IRQHandler>
	...

0800799c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079a0:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <HAL_Init+0x28>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <HAL_Init+0x28>)
 80079a6:	f043 0310 	orr.w	r3, r3, #16
 80079aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80079ac:	2003      	movs	r0, #3
 80079ae:	f000 f947 	bl	8007c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80079b2:	200f      	movs	r0, #15
 80079b4:	f000 f808 	bl	80079c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80079b8:	f7ff fe02 	bl	80075c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	40022000 	.word	0x40022000

080079c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80079d0:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <HAL_InitTick+0x54>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4b12      	ldr	r3, [pc, #72]	; (8007a20 <HAL_InitTick+0x58>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	4619      	mov	r1, r3
 80079da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079de:	fbb3 f3f1 	udiv	r3, r3, r1
 80079e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 f95f 	bl	8007caa <HAL_SYSTICK_Config>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e00e      	b.n	8007a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b0f      	cmp	r3, #15
 80079fa:	d80a      	bhi.n	8007a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079fc:	2200      	movs	r2, #0
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	f000 f927 	bl	8007c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a08:	4a06      	ldr	r2, [pc, #24]	; (8007a24 <HAL_InitTick+0x5c>)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e000      	b.n	8007a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000000 	.word	0x20000000
 8007a20:	20000008 	.word	0x20000008
 8007a24:	20000004 	.word	0x20000004

08007a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <HAL_IncTick+0x1c>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <HAL_IncTick+0x20>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4413      	add	r3, r2
 8007a38:	4a03      	ldr	r2, [pc, #12]	; (8007a48 <HAL_IncTick+0x20>)
 8007a3a:	6013      	str	r3, [r2, #0]
}
 8007a3c:	bf00      	nop
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr
 8007a44:	20000008 	.word	0x20000008
 8007a48:	200002ec 	.word	0x200002ec

08007a4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8007a50:	4b02      	ldr	r3, [pc, #8]	; (8007a5c <HAL_GetTick+0x10>)
 8007a52:	681b      	ldr	r3, [r3, #0]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bc80      	pop	{r7}
 8007a5a:	4770      	bx	lr
 8007a5c:	200002ec 	.word	0x200002ec

08007a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a68:	f7ff fff0 	bl	8007a4c <HAL_GetTick>
 8007a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a78:	d005      	beq.n	8007a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a7a:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <HAL_Delay+0x44>)
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007a86:	bf00      	nop
 8007a88:	f7ff ffe0 	bl	8007a4c <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d8f7      	bhi.n	8007a88 <HAL_Delay+0x28>
  {
  }
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000008 	.word	0x20000008

08007aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ab8:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <__NVIC_SetPriorityGrouping+0x44>)
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ada:	4a04      	ldr	r2, [pc, #16]	; (8007aec <__NVIC_SetPriorityGrouping+0x44>)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	60d3      	str	r3, [r2, #12]
}
 8007ae0:	bf00      	nop
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bc80      	pop	{r7}
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	e000ed00 	.word	0xe000ed00

08007af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007af4:	4b04      	ldr	r3, [pc, #16]	; (8007b08 <__NVIC_GetPriorityGrouping+0x18>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	0a1b      	lsrs	r3, r3, #8
 8007afa:	f003 0307 	and.w	r3, r3, #7
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	e000ed00 	.word	0xe000ed00

08007b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	db0b      	blt.n	8007b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	f003 021f 	and.w	r2, r3, #31
 8007b24:	4906      	ldr	r1, [pc, #24]	; (8007b40 <__NVIC_EnableIRQ+0x34>)
 8007b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b2a:	095b      	lsrs	r3, r3, #5
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8007b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr
 8007b40:	e000e100 	.word	0xe000e100

08007b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	db0a      	blt.n	8007b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	490c      	ldr	r1, [pc, #48]	; (8007b90 <__NVIC_SetPriority+0x4c>)
 8007b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b62:	0112      	lsls	r2, r2, #4
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	440b      	add	r3, r1
 8007b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b6c:	e00a      	b.n	8007b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	4908      	ldr	r1, [pc, #32]	; (8007b94 <__NVIC_SetPriority+0x50>)
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	3b04      	subs	r3, #4
 8007b7c:	0112      	lsls	r2, r2, #4
 8007b7e:	b2d2      	uxtb	r2, r2
 8007b80:	440b      	add	r3, r1
 8007b82:	761a      	strb	r2, [r3, #24]
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	e000e100 	.word	0xe000e100
 8007b94:	e000ed00 	.word	0xe000ed00

08007b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b089      	sub	sp, #36	; 0x24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f1c3 0307 	rsb	r3, r3, #7
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	bf28      	it	cs
 8007bb6:	2304      	movcs	r3, #4
 8007bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	2b06      	cmp	r3, #6
 8007bc0:	d902      	bls.n	8007bc8 <NVIC_EncodePriority+0x30>
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	3b03      	subs	r3, #3
 8007bc6:	e000      	b.n	8007bca <NVIC_EncodePriority+0x32>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43da      	mvns	r2, r3
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	401a      	ands	r2, r3
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007be0:	f04f 31ff 	mov.w	r1, #4294967295
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bea:	43d9      	mvns	r1, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bf0:	4313      	orrs	r3, r2
         );
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3724      	adds	r7, #36	; 0x24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr

08007bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c0c:	d301      	bcc.n	8007c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e00f      	b.n	8007c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c12:	4a0a      	ldr	r2, [pc, #40]	; (8007c3c <SysTick_Config+0x40>)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c1a:	210f      	movs	r1, #15
 8007c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c20:	f7ff ff90 	bl	8007b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c24:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <SysTick_Config+0x40>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c2a:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <SysTick_Config+0x40>)
 8007c2c:	2207      	movs	r2, #7
 8007c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	e000e010 	.word	0xe000e010

08007c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff ff2d 	bl	8007aa8 <__NVIC_SetPriorityGrouping>
}
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b086      	sub	sp, #24
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	607a      	str	r2, [r7, #4]
 8007c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c68:	f7ff ff42 	bl	8007af0 <__NVIC_GetPriorityGrouping>
 8007c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	6978      	ldr	r0, [r7, #20]
 8007c74:	f7ff ff90 	bl	8007b98 <NVIC_EncodePriority>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff ff5f 	bl	8007b44 <__NVIC_SetPriority>
}
 8007c86:	bf00      	nop
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	4603      	mov	r3, r0
 8007c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff ff35 	bl	8007b0c <__NVIC_EnableIRQ>
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff ffa2 	bl	8007bfc <SysTick_Config>
 8007cb8:	4603      	mov	r3, r0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d008      	beq.n	8007cec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2204      	movs	r2, #4
 8007cde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e020      	b.n	8007d2e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 020e 	bic.w	r2, r2, #14
 8007cfa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0201 	bic.w	r2, r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d14:	2101      	movs	r1, #1
 8007d16:	fa01 f202 	lsl.w	r2, r1, r2
 8007d1a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bc80      	pop	{r7}
 8007d36:	4770      	bx	lr

08007d38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d005      	beq.n	8007d5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2204      	movs	r2, #4
 8007d54:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	73fb      	strb	r3, [r7, #15]
 8007d5a:	e051      	b.n	8007e00 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 020e 	bic.w	r2, r2, #14
 8007d6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0201 	bic.w	r2, r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a22      	ldr	r2, [pc, #136]	; (8007e0c <HAL_DMA_Abort_IT+0xd4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d029      	beq.n	8007dda <HAL_DMA_Abort_IT+0xa2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a21      	ldr	r2, [pc, #132]	; (8007e10 <HAL_DMA_Abort_IT+0xd8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d022      	beq.n	8007dd6 <HAL_DMA_Abort_IT+0x9e>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a1f      	ldr	r2, [pc, #124]	; (8007e14 <HAL_DMA_Abort_IT+0xdc>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d01a      	beq.n	8007dd0 <HAL_DMA_Abort_IT+0x98>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <HAL_DMA_Abort_IT+0xe0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d012      	beq.n	8007dca <HAL_DMA_Abort_IT+0x92>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a1c      	ldr	r2, [pc, #112]	; (8007e1c <HAL_DMA_Abort_IT+0xe4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00a      	beq.n	8007dc4 <HAL_DMA_Abort_IT+0x8c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1b      	ldr	r2, [pc, #108]	; (8007e20 <HAL_DMA_Abort_IT+0xe8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d102      	bne.n	8007dbe <HAL_DMA_Abort_IT+0x86>
 8007db8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007dbc:	e00e      	b.n	8007ddc <HAL_DMA_Abort_IT+0xa4>
 8007dbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dc2:	e00b      	b.n	8007ddc <HAL_DMA_Abort_IT+0xa4>
 8007dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007dc8:	e008      	b.n	8007ddc <HAL_DMA_Abort_IT+0xa4>
 8007dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dce:	e005      	b.n	8007ddc <HAL_DMA_Abort_IT+0xa4>
 8007dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dd4:	e002      	b.n	8007ddc <HAL_DMA_Abort_IT+0xa4>
 8007dd6:	2310      	movs	r3, #16
 8007dd8:	e000      	b.n	8007ddc <HAL_DMA_Abort_IT+0xa4>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4a11      	ldr	r2, [pc, #68]	; (8007e24 <HAL_DMA_Abort_IT+0xec>)
 8007dde:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	4798      	blx	r3
    } 
  }
  return status;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40020008 	.word	0x40020008
 8007e10:	4002001c 	.word	0x4002001c
 8007e14:	40020030 	.word	0x40020030
 8007e18:	40020044 	.word	0x40020044
 8007e1c:	40020058 	.word	0x40020058
 8007e20:	4002006c 	.word	0x4002006c
 8007e24:	40020000 	.word	0x40020000

08007e28 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007e42:	4b2f      	ldr	r3, [pc, #188]	; (8007f00 <HAL_FLASH_Program+0xd8>)
 8007e44:	7e1b      	ldrb	r3, [r3, #24]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d101      	bne.n	8007e4e <HAL_FLASH_Program+0x26>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e054      	b.n	8007ef8 <HAL_FLASH_Program+0xd0>
 8007e4e:	4b2c      	ldr	r3, [pc, #176]	; (8007f00 <HAL_FLASH_Program+0xd8>)
 8007e50:	2201      	movs	r2, #1
 8007e52:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007e54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007e58:	f000 f8a8 	bl	8007fac <FLASH_WaitForLastOperation>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d144      	bne.n	8007ef0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d102      	bne.n	8007e72 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	757b      	strb	r3, [r7, #21]
 8007e70:	e007      	b.n	8007e82 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d102      	bne.n	8007e7e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8007e78:	2302      	movs	r3, #2
 8007e7a:	757b      	strb	r3, [r7, #21]
 8007e7c:	e001      	b.n	8007e82 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8007e7e:	2304      	movs	r3, #4
 8007e80:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8007e82:	2300      	movs	r3, #0
 8007e84:	75bb      	strb	r3, [r7, #22]
 8007e86:	e02d      	b.n	8007ee4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007e88:	7dbb      	ldrb	r3, [r7, #22]
 8007e8a:	005a      	lsls	r2, r3, #1
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	eb02 0c03 	add.w	ip, r2, r3
 8007e92:	7dbb      	ldrb	r3, [r7, #22]
 8007e94:	0119      	lsls	r1, r3, #4
 8007e96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e9a:	f1c1 0620 	rsb	r6, r1, #32
 8007e9e:	f1a1 0020 	sub.w	r0, r1, #32
 8007ea2:	fa22 f401 	lsr.w	r4, r2, r1
 8007ea6:	fa03 f606 	lsl.w	r6, r3, r6
 8007eaa:	4334      	orrs	r4, r6
 8007eac:	fa23 f000 	lsr.w	r0, r3, r0
 8007eb0:	4304      	orrs	r4, r0
 8007eb2:	fa23 f501 	lsr.w	r5, r3, r1
 8007eb6:	b2a3      	uxth	r3, r4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4660      	mov	r0, ip
 8007ebc:	f000 f85a 	bl	8007f74 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007ec0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007ec4:	f000 f872 	bl	8007fac <FLASH_WaitForLastOperation>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007ecc:	4b0d      	ldr	r3, [pc, #52]	; (8007f04 <HAL_FLASH_Program+0xdc>)
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	4a0c      	ldr	r2, [pc, #48]	; (8007f04 <HAL_FLASH_Program+0xdc>)
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d107      	bne.n	8007eee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8007ede:	7dbb      	ldrb	r3, [r7, #22]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	75bb      	strb	r3, [r7, #22]
 8007ee4:	7dba      	ldrb	r2, [r7, #22]
 8007ee6:	7d7b      	ldrb	r3, [r7, #21]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d3cd      	bcc.n	8007e88 <HAL_FLASH_Program+0x60>
 8007eec:	e000      	b.n	8007ef0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8007eee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007ef0:	4b03      	ldr	r3, [pc, #12]	; (8007f00 <HAL_FLASH_Program+0xd8>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	761a      	strb	r2, [r3, #24]

  return status;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f00:	200002f0 	.word	0x200002f0
 8007f04:	40022000 	.word	0x40022000

08007f08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007f12:	4b0d      	ldr	r3, [pc, #52]	; (8007f48 <HAL_FLASH_Unlock+0x40>)
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00d      	beq.n	8007f3a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <HAL_FLASH_Unlock+0x40>)
 8007f20:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <HAL_FLASH_Unlock+0x44>)
 8007f22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007f24:	4b08      	ldr	r3, [pc, #32]	; (8007f48 <HAL_FLASH_Unlock+0x40>)
 8007f26:	4a0a      	ldr	r2, [pc, #40]	; (8007f50 <HAL_FLASH_Unlock+0x48>)
 8007f28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007f2a:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <HAL_FLASH_Unlock+0x40>)
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bc80      	pop	{r7}
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40022000 	.word	0x40022000
 8007f4c:	45670123 	.word	0x45670123
 8007f50:	cdef89ab 	.word	0xcdef89ab

08007f54 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007f58:	4b05      	ldr	r3, [pc, #20]	; (8007f70 <HAL_FLASH_Lock+0x1c>)
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	4a04      	ldr	r2, [pc, #16]	; (8007f70 <HAL_FLASH_Lock+0x1c>)
 8007f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f62:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	40022000 	.word	0x40022000

08007f74 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007f80:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <FLASH_Program_HalfWord+0x30>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007f86:	4b08      	ldr	r3, [pc, #32]	; (8007fa8 <FLASH_Program_HalfWord+0x34>)
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	4a07      	ldr	r2, [pc, #28]	; (8007fa8 <FLASH_Program_HalfWord+0x34>)
 8007f8c:	f043 0301 	orr.w	r3, r3, #1
 8007f90:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	887a      	ldrh	r2, [r7, #2]
 8007f96:	801a      	strh	r2, [r3, #0]
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bc80      	pop	{r7}
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200002f0 	.word	0x200002f0
 8007fa8:	40022000 	.word	0x40022000

08007fac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007fb4:	f7ff fd4a 	bl	8007a4c <HAL_GetTick>
 8007fb8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007fba:	e010      	b.n	8007fde <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc2:	d00c      	beq.n	8007fde <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d007      	beq.n	8007fda <FLASH_WaitForLastOperation+0x2e>
 8007fca:	f7ff fd3f 	bl	8007a4c <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d201      	bcs.n	8007fde <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e025      	b.n	800802a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007fde:	4b15      	ldr	r3, [pc, #84]	; (8008034 <FLASH_WaitForLastOperation+0x88>)
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e8      	bne.n	8007fbc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <FLASH_WaitForLastOperation+0x88>)
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <FLASH_WaitForLastOperation+0x88>)
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <FLASH_WaitForLastOperation+0x88>)
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f003 0310 	and.w	r3, r3, #16
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10b      	bne.n	8008020 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008008:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <FLASH_WaitForLastOperation+0x88>)
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008014:	4b07      	ldr	r3, [pc, #28]	; (8008034 <FLASH_WaitForLastOperation+0x88>)
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008020:	f000 f80a 	bl	8008038 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	40022000 	.word	0x40022000

08008038 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008042:	4b23      	ldr	r3, [pc, #140]	; (80080d0 <FLASH_SetErrorCode+0x98>)
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f003 0310 	and.w	r3, r3, #16
 800804a:	2b00      	cmp	r3, #0
 800804c:	d009      	beq.n	8008062 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800804e:	4b21      	ldr	r3, [pc, #132]	; (80080d4 <FLASH_SetErrorCode+0x9c>)
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f043 0302 	orr.w	r3, r3, #2
 8008056:	4a1f      	ldr	r2, [pc, #124]	; (80080d4 <FLASH_SetErrorCode+0x9c>)
 8008058:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f043 0310 	orr.w	r3, r3, #16
 8008060:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008062:	4b1b      	ldr	r3, [pc, #108]	; (80080d0 <FLASH_SetErrorCode+0x98>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f003 0304 	and.w	r3, r3, #4
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800806e:	4b19      	ldr	r3, [pc, #100]	; (80080d4 <FLASH_SetErrorCode+0x9c>)
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f043 0301 	orr.w	r3, r3, #1
 8008076:	4a17      	ldr	r2, [pc, #92]	; (80080d4 <FLASH_SetErrorCode+0x9c>)
 8008078:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f043 0304 	orr.w	r3, r3, #4
 8008080:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8008082:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <FLASH_SetErrorCode+0x98>)
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800808e:	4b11      	ldr	r3, [pc, #68]	; (80080d4 <FLASH_SetErrorCode+0x9c>)
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f043 0304 	orr.w	r3, r3, #4
 8008096:	4a0f      	ldr	r2, [pc, #60]	; (80080d4 <FLASH_SetErrorCode+0x9c>)
 8008098:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800809a:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <FLASH_SetErrorCode+0x98>)
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	4a0c      	ldr	r2, [pc, #48]	; (80080d0 <FLASH_SetErrorCode+0x98>)
 80080a0:	f023 0301 	bic.w	r3, r3, #1
 80080a4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f240 1201 	movw	r2, #257	; 0x101
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d106      	bne.n	80080be <FLASH_SetErrorCode+0x86>
 80080b0:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <FLASH_SetErrorCode+0x98>)
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	4a06      	ldr	r2, [pc, #24]	; (80080d0 <FLASH_SetErrorCode+0x98>)
 80080b6:	f023 0301 	bic.w	r3, r3, #1
 80080ba:	61d3      	str	r3, [r2, #28]
}  
 80080bc:	e002      	b.n	80080c4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80080be:	4a04      	ldr	r2, [pc, #16]	; (80080d0 <FLASH_SetErrorCode+0x98>)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	60d3      	str	r3, [r2, #12]
}  
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	40022000 	.word	0x40022000
 80080d4:	200002f0 	.word	0x200002f0

080080d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80080ea:	4b2f      	ldr	r3, [pc, #188]	; (80081a8 <HAL_FLASHEx_Erase+0xd0>)
 80080ec:	7e1b      	ldrb	r3, [r3, #24]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d101      	bne.n	80080f6 <HAL_FLASHEx_Erase+0x1e>
 80080f2:	2302      	movs	r3, #2
 80080f4:	e053      	b.n	800819e <HAL_FLASHEx_Erase+0xc6>
 80080f6:	4b2c      	ldr	r3, [pc, #176]	; (80081a8 <HAL_FLASHEx_Erase+0xd0>)
 80080f8:	2201      	movs	r2, #1
 80080fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b02      	cmp	r3, #2
 8008102:	d116      	bne.n	8008132 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008104:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008108:	f7ff ff50 	bl	8007fac <FLASH_WaitForLastOperation>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d141      	bne.n	8008196 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8008112:	2001      	movs	r0, #1
 8008114:	f000 f84c 	bl	80081b0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008118:	f24c 3050 	movw	r0, #50000	; 0xc350
 800811c:	f7ff ff46 	bl	8007fac <FLASH_WaitForLastOperation>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8008124:	4b21      	ldr	r3, [pc, #132]	; (80081ac <HAL_FLASHEx_Erase+0xd4>)
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	4a20      	ldr	r2, [pc, #128]	; (80081ac <HAL_FLASHEx_Erase+0xd4>)
 800812a:	f023 0304 	bic.w	r3, r3, #4
 800812e:	6113      	str	r3, [r2, #16]
 8008130:	e031      	b.n	8008196 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008132:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008136:	f7ff ff39 	bl	8007fac <FLASH_WaitForLastOperation>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d12a      	bne.n	8008196 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	f04f 32ff 	mov.w	r2, #4294967295
 8008146:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	60bb      	str	r3, [r7, #8]
 800814e:	e019      	b.n	8008184 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8008150:	68b8      	ldr	r0, [r7, #8]
 8008152:	f000 f849 	bl	80081e8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008156:	f24c 3050 	movw	r0, #50000	; 0xc350
 800815a:	f7ff ff27 	bl	8007fac <FLASH_WaitForLastOperation>
 800815e:	4603      	mov	r3, r0
 8008160:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008162:	4b12      	ldr	r3, [pc, #72]	; (80081ac <HAL_FLASHEx_Erase+0xd4>)
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	4a11      	ldr	r2, [pc, #68]	; (80081ac <HAL_FLASHEx_Erase+0xd4>)
 8008168:	f023 0302 	bic.w	r3, r3, #2
 800816c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	601a      	str	r2, [r3, #0]
            break;
 800817a:	e00c      	b.n	8008196 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008182:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	029a      	lsls	r2, r3, #10
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	429a      	cmp	r2, r3
 8008194:	d3dc      	bcc.n	8008150 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008196:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <HAL_FLASHEx_Erase+0xd0>)
 8008198:	2200      	movs	r2, #0
 800819a:	761a      	strb	r2, [r3, #24]

  return status;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	200002f0 	.word	0x200002f0
 80081ac:	40022000 	.word	0x40022000

080081b0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80081b8:	4b09      	ldr	r3, [pc, #36]	; (80081e0 <FLASH_MassErase+0x30>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80081be:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <FLASH_MassErase+0x34>)
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	4a08      	ldr	r2, [pc, #32]	; (80081e4 <FLASH_MassErase+0x34>)
 80081c4:	f043 0304 	orr.w	r3, r3, #4
 80081c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80081ca:	4b06      	ldr	r3, [pc, #24]	; (80081e4 <FLASH_MassErase+0x34>)
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	4a05      	ldr	r2, [pc, #20]	; (80081e4 <FLASH_MassErase+0x34>)
 80081d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	bc80      	pop	{r7}
 80081de:	4770      	bx	lr
 80081e0:	200002f0 	.word	0x200002f0
 80081e4:	40022000 	.word	0x40022000

080081e8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80081f0:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <FLASH_PageErase+0x38>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80081f6:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <FLASH_PageErase+0x3c>)
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	4a0a      	ldr	r2, [pc, #40]	; (8008224 <FLASH_PageErase+0x3c>)
 80081fc:	f043 0302 	orr.w	r3, r3, #2
 8008200:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8008202:	4a08      	ldr	r2, [pc, #32]	; (8008224 <FLASH_PageErase+0x3c>)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008208:	4b06      	ldr	r3, [pc, #24]	; (8008224 <FLASH_PageErase+0x3c>)
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	4a05      	ldr	r2, [pc, #20]	; (8008224 <FLASH_PageErase+0x3c>)
 800820e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008212:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	200002f0 	.word	0x200002f0
 8008224:	40022000 	.word	0x40022000

08008228 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008228:	b480      	push	{r7}
 800822a:	b08b      	sub	sp, #44	; 0x2c
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008232:	2300      	movs	r3, #0
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008236:	2300      	movs	r3, #0
 8008238:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800823a:	e169      	b.n	8008510 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800823c:	2201      	movs	r2, #1
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	fa02 f303 	lsl.w	r3, r2, r3
 8008244:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	4013      	ands	r3, r2
 800824e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	429a      	cmp	r2, r3
 8008256:	f040 8158 	bne.w	800850a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	4a9a      	ldr	r2, [pc, #616]	; (80084c8 <HAL_GPIO_Init+0x2a0>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d05e      	beq.n	8008322 <HAL_GPIO_Init+0xfa>
 8008264:	4a98      	ldr	r2, [pc, #608]	; (80084c8 <HAL_GPIO_Init+0x2a0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d875      	bhi.n	8008356 <HAL_GPIO_Init+0x12e>
 800826a:	4a98      	ldr	r2, [pc, #608]	; (80084cc <HAL_GPIO_Init+0x2a4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d058      	beq.n	8008322 <HAL_GPIO_Init+0xfa>
 8008270:	4a96      	ldr	r2, [pc, #600]	; (80084cc <HAL_GPIO_Init+0x2a4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d86f      	bhi.n	8008356 <HAL_GPIO_Init+0x12e>
 8008276:	4a96      	ldr	r2, [pc, #600]	; (80084d0 <HAL_GPIO_Init+0x2a8>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d052      	beq.n	8008322 <HAL_GPIO_Init+0xfa>
 800827c:	4a94      	ldr	r2, [pc, #592]	; (80084d0 <HAL_GPIO_Init+0x2a8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d869      	bhi.n	8008356 <HAL_GPIO_Init+0x12e>
 8008282:	4a94      	ldr	r2, [pc, #592]	; (80084d4 <HAL_GPIO_Init+0x2ac>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d04c      	beq.n	8008322 <HAL_GPIO_Init+0xfa>
 8008288:	4a92      	ldr	r2, [pc, #584]	; (80084d4 <HAL_GPIO_Init+0x2ac>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d863      	bhi.n	8008356 <HAL_GPIO_Init+0x12e>
 800828e:	4a92      	ldr	r2, [pc, #584]	; (80084d8 <HAL_GPIO_Init+0x2b0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d046      	beq.n	8008322 <HAL_GPIO_Init+0xfa>
 8008294:	4a90      	ldr	r2, [pc, #576]	; (80084d8 <HAL_GPIO_Init+0x2b0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d85d      	bhi.n	8008356 <HAL_GPIO_Init+0x12e>
 800829a:	2b12      	cmp	r3, #18
 800829c:	d82a      	bhi.n	80082f4 <HAL_GPIO_Init+0xcc>
 800829e:	2b12      	cmp	r3, #18
 80082a0:	d859      	bhi.n	8008356 <HAL_GPIO_Init+0x12e>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <HAL_GPIO_Init+0x80>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	08008323 	.word	0x08008323
 80082ac:	080082fd 	.word	0x080082fd
 80082b0:	0800830f 	.word	0x0800830f
 80082b4:	08008351 	.word	0x08008351
 80082b8:	08008357 	.word	0x08008357
 80082bc:	08008357 	.word	0x08008357
 80082c0:	08008357 	.word	0x08008357
 80082c4:	08008357 	.word	0x08008357
 80082c8:	08008357 	.word	0x08008357
 80082cc:	08008357 	.word	0x08008357
 80082d0:	08008357 	.word	0x08008357
 80082d4:	08008357 	.word	0x08008357
 80082d8:	08008357 	.word	0x08008357
 80082dc:	08008357 	.word	0x08008357
 80082e0:	08008357 	.word	0x08008357
 80082e4:	08008357 	.word	0x08008357
 80082e8:	08008357 	.word	0x08008357
 80082ec:	08008305 	.word	0x08008305
 80082f0:	08008319 	.word	0x08008319
 80082f4:	4a79      	ldr	r2, [pc, #484]	; (80084dc <HAL_GPIO_Init+0x2b4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80082fa:	e02c      	b.n	8008356 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	623b      	str	r3, [r7, #32]
          break;
 8008302:	e029      	b.n	8008358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	3304      	adds	r3, #4
 800830a:	623b      	str	r3, [r7, #32]
          break;
 800830c:	e024      	b.n	8008358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	3308      	adds	r3, #8
 8008314:	623b      	str	r3, [r7, #32]
          break;
 8008316:	e01f      	b.n	8008358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	330c      	adds	r3, #12
 800831e:	623b      	str	r3, [r7, #32]
          break;
 8008320:	e01a      	b.n	8008358 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d102      	bne.n	8008330 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800832a:	2304      	movs	r3, #4
 800832c:	623b      	str	r3, [r7, #32]
          break;
 800832e:	e013      	b.n	8008358 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d105      	bne.n	8008344 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008338:	2308      	movs	r3, #8
 800833a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	611a      	str	r2, [r3, #16]
          break;
 8008342:	e009      	b.n	8008358 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008344:	2308      	movs	r3, #8
 8008346:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	615a      	str	r2, [r3, #20]
          break;
 800834e:	e003      	b.n	8008358 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008350:	2300      	movs	r3, #0
 8008352:	623b      	str	r3, [r7, #32]
          break;
 8008354:	e000      	b.n	8008358 <HAL_GPIO_Init+0x130>
          break;
 8008356:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	2bff      	cmp	r3, #255	; 0xff
 800835c:	d801      	bhi.n	8008362 <HAL_GPIO_Init+0x13a>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	e001      	b.n	8008366 <HAL_GPIO_Init+0x13e>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3304      	adds	r3, #4
 8008366:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	2bff      	cmp	r3, #255	; 0xff
 800836c:	d802      	bhi.n	8008374 <HAL_GPIO_Init+0x14c>
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	e002      	b.n	800837a <HAL_GPIO_Init+0x152>
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	3b08      	subs	r3, #8
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	210f      	movs	r1, #15
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	fa01 f303 	lsl.w	r3, r1, r3
 8008388:	43db      	mvns	r3, r3
 800838a:	401a      	ands	r2, r3
 800838c:	6a39      	ldr	r1, [r7, #32]
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	fa01 f303 	lsl.w	r3, r1, r3
 8008394:	431a      	orrs	r2, r3
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 80b1 	beq.w	800850a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80083a8:	4b4d      	ldr	r3, [pc, #308]	; (80084e0 <HAL_GPIO_Init+0x2b8>)
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	4a4c      	ldr	r2, [pc, #304]	; (80084e0 <HAL_GPIO_Init+0x2b8>)
 80083ae:	f043 0301 	orr.w	r3, r3, #1
 80083b2:	6193      	str	r3, [r2, #24]
 80083b4:	4b4a      	ldr	r3, [pc, #296]	; (80084e0 <HAL_GPIO_Init+0x2b8>)
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	60bb      	str	r3, [r7, #8]
 80083be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80083c0:	4a48      	ldr	r2, [pc, #288]	; (80084e4 <HAL_GPIO_Init+0x2bc>)
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	089b      	lsrs	r3, r3, #2
 80083c6:	3302      	adds	r3, #2
 80083c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	f003 0303 	and.w	r3, r3, #3
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	220f      	movs	r2, #15
 80083d8:	fa02 f303 	lsl.w	r3, r2, r3
 80083dc:	43db      	mvns	r3, r3
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4013      	ands	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a40      	ldr	r2, [pc, #256]	; (80084e8 <HAL_GPIO_Init+0x2c0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d013      	beq.n	8008414 <HAL_GPIO_Init+0x1ec>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a3f      	ldr	r2, [pc, #252]	; (80084ec <HAL_GPIO_Init+0x2c4>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00d      	beq.n	8008410 <HAL_GPIO_Init+0x1e8>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a3e      	ldr	r2, [pc, #248]	; (80084f0 <HAL_GPIO_Init+0x2c8>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d007      	beq.n	800840c <HAL_GPIO_Init+0x1e4>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a3d      	ldr	r2, [pc, #244]	; (80084f4 <HAL_GPIO_Init+0x2cc>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d101      	bne.n	8008408 <HAL_GPIO_Init+0x1e0>
 8008404:	2303      	movs	r3, #3
 8008406:	e006      	b.n	8008416 <HAL_GPIO_Init+0x1ee>
 8008408:	2304      	movs	r3, #4
 800840a:	e004      	b.n	8008416 <HAL_GPIO_Init+0x1ee>
 800840c:	2302      	movs	r3, #2
 800840e:	e002      	b.n	8008416 <HAL_GPIO_Init+0x1ee>
 8008410:	2301      	movs	r3, #1
 8008412:	e000      	b.n	8008416 <HAL_GPIO_Init+0x1ee>
 8008414:	2300      	movs	r3, #0
 8008416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008418:	f002 0203 	and.w	r2, r2, #3
 800841c:	0092      	lsls	r2, r2, #2
 800841e:	4093      	lsls	r3, r2
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008426:	492f      	ldr	r1, [pc, #188]	; (80084e4 <HAL_GPIO_Init+0x2bc>)
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	089b      	lsrs	r3, r3, #2
 800842c:	3302      	adds	r3, #2
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d006      	beq.n	800844e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008440:	4b2d      	ldr	r3, [pc, #180]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	492c      	ldr	r1, [pc, #176]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	4313      	orrs	r3, r2
 800844a:	608b      	str	r3, [r1, #8]
 800844c:	e006      	b.n	800845c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800844e:	4b2a      	ldr	r3, [pc, #168]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	43db      	mvns	r3, r3
 8008456:	4928      	ldr	r1, [pc, #160]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 8008458:	4013      	ands	r3, r2
 800845a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d006      	beq.n	8008476 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008468:	4b23      	ldr	r3, [pc, #140]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	4922      	ldr	r1, [pc, #136]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	4313      	orrs	r3, r2
 8008472:	60cb      	str	r3, [r1, #12]
 8008474:	e006      	b.n	8008484 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008476:	4b20      	ldr	r3, [pc, #128]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	43db      	mvns	r3, r3
 800847e:	491e      	ldr	r1, [pc, #120]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 8008480:	4013      	ands	r3, r2
 8008482:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d006      	beq.n	800849e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008490:	4b19      	ldr	r3, [pc, #100]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	4918      	ldr	r1, [pc, #96]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	4313      	orrs	r3, r2
 800849a:	604b      	str	r3, [r1, #4]
 800849c:	e006      	b.n	80084ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800849e:	4b16      	ldr	r3, [pc, #88]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	43db      	mvns	r3, r3
 80084a6:	4914      	ldr	r1, [pc, #80]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 80084a8:	4013      	ands	r3, r2
 80084aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d021      	beq.n	80084fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80084b8:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	490e      	ldr	r1, [pc, #56]	; (80084f8 <HAL_GPIO_Init+0x2d0>)
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	600b      	str	r3, [r1, #0]
 80084c4:	e021      	b.n	800850a <HAL_GPIO_Init+0x2e2>
 80084c6:	bf00      	nop
 80084c8:	10320000 	.word	0x10320000
 80084cc:	10310000 	.word	0x10310000
 80084d0:	10220000 	.word	0x10220000
 80084d4:	10210000 	.word	0x10210000
 80084d8:	10120000 	.word	0x10120000
 80084dc:	10110000 	.word	0x10110000
 80084e0:	40021000 	.word	0x40021000
 80084e4:	40010000 	.word	0x40010000
 80084e8:	40010800 	.word	0x40010800
 80084ec:	40010c00 	.word	0x40010c00
 80084f0:	40011000 	.word	0x40011000
 80084f4:	40011400 	.word	0x40011400
 80084f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80084fc:	4b0b      	ldr	r3, [pc, #44]	; (800852c <HAL_GPIO_Init+0x304>)
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	43db      	mvns	r3, r3
 8008504:	4909      	ldr	r1, [pc, #36]	; (800852c <HAL_GPIO_Init+0x304>)
 8008506:	4013      	ands	r3, r2
 8008508:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	3301      	adds	r3, #1
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	fa22 f303 	lsr.w	r3, r2, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	f47f ae8e 	bne.w	800823c <HAL_GPIO_Init+0x14>
  }
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	372c      	adds	r7, #44	; 0x2c
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr
 800852c:	40010400 	.word	0x40010400

08008530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	807b      	strh	r3, [r7, #2]
 800853c:	4613      	mov	r3, r2
 800853e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008540:	787b      	ldrb	r3, [r7, #1]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008546:	887a      	ldrh	r2, [r7, #2]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800854c:	e003      	b.n	8008556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800854e:	887b      	ldrh	r3, [r7, #2]
 8008550:	041a      	lsls	r2, r3, #16
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	611a      	str	r2, [r3, #16]
}
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	bc80      	pop	{r7}
 800855e:	4770      	bx	lr

08008560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e26c      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 8087 	beq.w	800868e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008580:	4b92      	ldr	r3, [pc, #584]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f003 030c 	and.w	r3, r3, #12
 8008588:	2b04      	cmp	r3, #4
 800858a:	d00c      	beq.n	80085a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800858c:	4b8f      	ldr	r3, [pc, #572]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f003 030c 	and.w	r3, r3, #12
 8008594:	2b08      	cmp	r3, #8
 8008596:	d112      	bne.n	80085be <HAL_RCC_OscConfig+0x5e>
 8008598:	4b8c      	ldr	r3, [pc, #560]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085a4:	d10b      	bne.n	80085be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a6:	4b89      	ldr	r3, [pc, #548]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d06c      	beq.n	800868c <HAL_RCC_OscConfig+0x12c>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d168      	bne.n	800868c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e246      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c6:	d106      	bne.n	80085d6 <HAL_RCC_OscConfig+0x76>
 80085c8:	4b80      	ldr	r3, [pc, #512]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a7f      	ldr	r2, [pc, #508]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80085ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	e02e      	b.n	8008634 <HAL_RCC_OscConfig+0xd4>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10c      	bne.n	80085f8 <HAL_RCC_OscConfig+0x98>
 80085de:	4b7b      	ldr	r3, [pc, #492]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a7a      	ldr	r2, [pc, #488]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80085e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	4b78      	ldr	r3, [pc, #480]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a77      	ldr	r2, [pc, #476]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80085f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	e01d      	b.n	8008634 <HAL_RCC_OscConfig+0xd4>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008600:	d10c      	bne.n	800861c <HAL_RCC_OscConfig+0xbc>
 8008602:	4b72      	ldr	r3, [pc, #456]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a71      	ldr	r2, [pc, #452]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	4b6f      	ldr	r3, [pc, #444]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a6e      	ldr	r2, [pc, #440]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	e00b      	b.n	8008634 <HAL_RCC_OscConfig+0xd4>
 800861c:	4b6b      	ldr	r3, [pc, #428]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a6a      	ldr	r2, [pc, #424]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	4b68      	ldr	r3, [pc, #416]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a67      	ldr	r2, [pc, #412]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 800862e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d013      	beq.n	8008664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800863c:	f7ff fa06 	bl	8007a4c <HAL_GetTick>
 8008640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008642:	e008      	b.n	8008656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008644:	f7ff fa02 	bl	8007a4c <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b64      	cmp	r3, #100	; 0x64
 8008650:	d901      	bls.n	8008656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e1fa      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008656:	4b5d      	ldr	r3, [pc, #372]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0f0      	beq.n	8008644 <HAL_RCC_OscConfig+0xe4>
 8008662:	e014      	b.n	800868e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008664:	f7ff f9f2 	bl	8007a4c <HAL_GetTick>
 8008668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800866a:	e008      	b.n	800867e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800866c:	f7ff f9ee 	bl	8007a4c <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b64      	cmp	r3, #100	; 0x64
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e1e6      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800867e:	4b53      	ldr	r3, [pc, #332]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1f0      	bne.n	800866c <HAL_RCC_OscConfig+0x10c>
 800868a:	e000      	b.n	800868e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800868c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0302 	and.w	r3, r3, #2
 8008696:	2b00      	cmp	r3, #0
 8008698:	d063      	beq.n	8008762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800869a:	4b4c      	ldr	r3, [pc, #304]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f003 030c 	and.w	r3, r3, #12
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00b      	beq.n	80086be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80086a6:	4b49      	ldr	r3, [pc, #292]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f003 030c 	and.w	r3, r3, #12
 80086ae:	2b08      	cmp	r3, #8
 80086b0:	d11c      	bne.n	80086ec <HAL_RCC_OscConfig+0x18c>
 80086b2:	4b46      	ldr	r3, [pc, #280]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d116      	bne.n	80086ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086be:	4b43      	ldr	r3, [pc, #268]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <HAL_RCC_OscConfig+0x176>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d001      	beq.n	80086d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e1ba      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086d6:	4b3d      	ldr	r3, [pc, #244]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4939      	ldr	r1, [pc, #228]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086ea:	e03a      	b.n	8008762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d020      	beq.n	8008736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086f4:	4b36      	ldr	r3, [pc, #216]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 80086f6:	2201      	movs	r2, #1
 80086f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086fa:	f7ff f9a7 	bl	8007a4c <HAL_GetTick>
 80086fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008700:	e008      	b.n	8008714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008702:	f7ff f9a3 	bl	8007a4c <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e19b      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008714:	4b2d      	ldr	r3, [pc, #180]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0f0      	beq.n	8008702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008720:	4b2a      	ldr	r3, [pc, #168]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	4927      	ldr	r1, [pc, #156]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008730:	4313      	orrs	r3, r2
 8008732:	600b      	str	r3, [r1, #0]
 8008734:	e015      	b.n	8008762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008736:	4b26      	ldr	r3, [pc, #152]	; (80087d0 <HAL_RCC_OscConfig+0x270>)
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800873c:	f7ff f986 	bl	8007a4c <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008744:	f7ff f982 	bl	8007a4c <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e17a      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008756:	4b1d      	ldr	r3, [pc, #116]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f0      	bne.n	8008744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0308 	and.w	r3, r3, #8
 800876a:	2b00      	cmp	r3, #0
 800876c:	d03a      	beq.n	80087e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d019      	beq.n	80087aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008776:	4b17      	ldr	r3, [pc, #92]	; (80087d4 <HAL_RCC_OscConfig+0x274>)
 8008778:	2201      	movs	r2, #1
 800877a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800877c:	f7ff f966 	bl	8007a4c <HAL_GetTick>
 8008780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008782:	e008      	b.n	8008796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008784:	f7ff f962 	bl	8007a4c <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d901      	bls.n	8008796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e15a      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008796:	4b0d      	ldr	r3, [pc, #52]	; (80087cc <HAL_RCC_OscConfig+0x26c>)
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d0f0      	beq.n	8008784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80087a2:	2001      	movs	r0, #1
 80087a4:	f000 facc 	bl	8008d40 <RCC_Delay>
 80087a8:	e01c      	b.n	80087e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087aa:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <HAL_RCC_OscConfig+0x274>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087b0:	f7ff f94c 	bl	8007a4c <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087b6:	e00f      	b.n	80087d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087b8:	f7ff f948 	bl	8007a4c <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d908      	bls.n	80087d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e140      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
 80087ca:	bf00      	nop
 80087cc:	40021000 	.word	0x40021000
 80087d0:	42420000 	.word	0x42420000
 80087d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087d8:	4b9e      	ldr	r3, [pc, #632]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e9      	bne.n	80087b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 80a6 	beq.w	800893e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087f6:	4b97      	ldr	r3, [pc, #604]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10d      	bne.n	800881e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008802:	4b94      	ldr	r3, [pc, #592]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	4a93      	ldr	r2, [pc, #588]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800880c:	61d3      	str	r3, [r2, #28]
 800880e:	4b91      	ldr	r3, [pc, #580]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008816:	60bb      	str	r3, [r7, #8]
 8008818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800881a:	2301      	movs	r3, #1
 800881c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800881e:	4b8e      	ldr	r3, [pc, #568]	; (8008a58 <HAL_RCC_OscConfig+0x4f8>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008826:	2b00      	cmp	r3, #0
 8008828:	d118      	bne.n	800885c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800882a:	4b8b      	ldr	r3, [pc, #556]	; (8008a58 <HAL_RCC_OscConfig+0x4f8>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a8a      	ldr	r2, [pc, #552]	; (8008a58 <HAL_RCC_OscConfig+0x4f8>)
 8008830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008836:	f7ff f909 	bl	8007a4c <HAL_GetTick>
 800883a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800883c:	e008      	b.n	8008850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800883e:	f7ff f905 	bl	8007a4c <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b64      	cmp	r3, #100	; 0x64
 800884a:	d901      	bls.n	8008850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e0fd      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008850:	4b81      	ldr	r3, [pc, #516]	; (8008a58 <HAL_RCC_OscConfig+0x4f8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0f0      	beq.n	800883e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d106      	bne.n	8008872 <HAL_RCC_OscConfig+0x312>
 8008864:	4b7b      	ldr	r3, [pc, #492]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	4a7a      	ldr	r2, [pc, #488]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 800886a:	f043 0301 	orr.w	r3, r3, #1
 800886e:	6213      	str	r3, [r2, #32]
 8008870:	e02d      	b.n	80088ce <HAL_RCC_OscConfig+0x36e>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10c      	bne.n	8008894 <HAL_RCC_OscConfig+0x334>
 800887a:	4b76      	ldr	r3, [pc, #472]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	4a75      	ldr	r2, [pc, #468]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	6213      	str	r3, [r2, #32]
 8008886:	4b73      	ldr	r3, [pc, #460]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	4a72      	ldr	r2, [pc, #456]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 800888c:	f023 0304 	bic.w	r3, r3, #4
 8008890:	6213      	str	r3, [r2, #32]
 8008892:	e01c      	b.n	80088ce <HAL_RCC_OscConfig+0x36e>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b05      	cmp	r3, #5
 800889a:	d10c      	bne.n	80088b6 <HAL_RCC_OscConfig+0x356>
 800889c:	4b6d      	ldr	r3, [pc, #436]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	4a6c      	ldr	r2, [pc, #432]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80088a2:	f043 0304 	orr.w	r3, r3, #4
 80088a6:	6213      	str	r3, [r2, #32]
 80088a8:	4b6a      	ldr	r3, [pc, #424]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	4a69      	ldr	r2, [pc, #420]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80088ae:	f043 0301 	orr.w	r3, r3, #1
 80088b2:	6213      	str	r3, [r2, #32]
 80088b4:	e00b      	b.n	80088ce <HAL_RCC_OscConfig+0x36e>
 80088b6:	4b67      	ldr	r3, [pc, #412]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	4a66      	ldr	r2, [pc, #408]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80088bc:	f023 0301 	bic.w	r3, r3, #1
 80088c0:	6213      	str	r3, [r2, #32]
 80088c2:	4b64      	ldr	r3, [pc, #400]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	4a63      	ldr	r2, [pc, #396]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80088c8:	f023 0304 	bic.w	r3, r3, #4
 80088cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d015      	beq.n	8008902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088d6:	f7ff f8b9 	bl	8007a4c <HAL_GetTick>
 80088da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088dc:	e00a      	b.n	80088f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088de:	f7ff f8b5 	bl	8007a4c <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d901      	bls.n	80088f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e0ab      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088f4:	4b57      	ldr	r3, [pc, #348]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0ee      	beq.n	80088de <HAL_RCC_OscConfig+0x37e>
 8008900:	e014      	b.n	800892c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008902:	f7ff f8a3 	bl	8007a4c <HAL_GetTick>
 8008906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008908:	e00a      	b.n	8008920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800890a:	f7ff f89f 	bl	8007a4c <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	f241 3288 	movw	r2, #5000	; 0x1388
 8008918:	4293      	cmp	r3, r2
 800891a:	d901      	bls.n	8008920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e095      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008920:	4b4c      	ldr	r3, [pc, #304]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1ee      	bne.n	800890a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d105      	bne.n	800893e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008932:	4b48      	ldr	r3, [pc, #288]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	4a47      	ldr	r2, [pc, #284]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800893c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 8081 	beq.w	8008a4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008948:	4b42      	ldr	r3, [pc, #264]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f003 030c 	and.w	r3, r3, #12
 8008950:	2b08      	cmp	r3, #8
 8008952:	d061      	beq.n	8008a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d146      	bne.n	80089ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800895c:	4b3f      	ldr	r3, [pc, #252]	; (8008a5c <HAL_RCC_OscConfig+0x4fc>)
 800895e:	2200      	movs	r2, #0
 8008960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008962:	f7ff f873 	bl	8007a4c <HAL_GetTick>
 8008966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008968:	e008      	b.n	800897c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800896a:	f7ff f86f 	bl	8007a4c <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	2b02      	cmp	r3, #2
 8008976:	d901      	bls.n	800897c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e067      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800897c:	4b35      	ldr	r3, [pc, #212]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1f0      	bne.n	800896a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008990:	d108      	bne.n	80089a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008992:	4b30      	ldr	r3, [pc, #192]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	492d      	ldr	r1, [pc, #180]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089a4:	4b2b      	ldr	r3, [pc, #172]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a19      	ldr	r1, [r3, #32]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	430b      	orrs	r3, r1
 80089b6:	4927      	ldr	r1, [pc, #156]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089bc:	4b27      	ldr	r3, [pc, #156]	; (8008a5c <HAL_RCC_OscConfig+0x4fc>)
 80089be:	2201      	movs	r2, #1
 80089c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089c2:	f7ff f843 	bl	8007a4c <HAL_GetTick>
 80089c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80089c8:	e008      	b.n	80089dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089ca:	f7ff f83f 	bl	8007a4c <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e037      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80089dc:	4b1d      	ldr	r3, [pc, #116]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0f0      	beq.n	80089ca <HAL_RCC_OscConfig+0x46a>
 80089e8:	e02f      	b.n	8008a4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ea:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <HAL_RCC_OscConfig+0x4fc>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f0:	f7ff f82c 	bl	8007a4c <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80089f6:	e008      	b.n	8008a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089f8:	f7ff f828 	bl	8007a4c <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e020      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a0a:	4b12      	ldr	r3, [pc, #72]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1f0      	bne.n	80089f8 <HAL_RCC_OscConfig+0x498>
 8008a16:	e018      	b.n	8008a4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e013      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008a24:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <HAL_RCC_OscConfig+0x4f4>)
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d106      	bne.n	8008a46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d001      	beq.n	8008a4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e000      	b.n	8008a4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	40021000 	.word	0x40021000
 8008a58:	40007000 	.word	0x40007000
 8008a5c:	42420060 	.word	0x42420060

08008a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0d0      	b.n	8008c16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a74:	4b6a      	ldr	r3, [pc, #424]	; (8008c20 <HAL_RCC_ClockConfig+0x1c0>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d910      	bls.n	8008aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a82:	4b67      	ldr	r3, [pc, #412]	; (8008c20 <HAL_RCC_ClockConfig+0x1c0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f023 0207 	bic.w	r2, r3, #7
 8008a8a:	4965      	ldr	r1, [pc, #404]	; (8008c20 <HAL_RCC_ClockConfig+0x1c0>)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a92:	4b63      	ldr	r3, [pc, #396]	; (8008c20 <HAL_RCC_ClockConfig+0x1c0>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d001      	beq.n	8008aa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e0b8      	b.n	8008c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0302 	and.w	r3, r3, #2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d020      	beq.n	8008af2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008abc:	4b59      	ldr	r3, [pc, #356]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	4a58      	ldr	r2, [pc, #352]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008ac6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0308 	and.w	r3, r3, #8
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ad4:	4b53      	ldr	r3, [pc, #332]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	4a52      	ldr	r2, [pc, #328]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008ada:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008ade:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ae0:	4b50      	ldr	r3, [pc, #320]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	494d      	ldr	r1, [pc, #308]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d040      	beq.n	8008b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d107      	bne.n	8008b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b06:	4b47      	ldr	r3, [pc, #284]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d115      	bne.n	8008b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e07f      	b.n	8008c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d107      	bne.n	8008b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b1e:	4b41      	ldr	r3, [pc, #260]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d109      	bne.n	8008b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e073      	b.n	8008c16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b2e:	4b3d      	ldr	r3, [pc, #244]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e06b      	b.n	8008c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b3e:	4b39      	ldr	r3, [pc, #228]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f023 0203 	bic.w	r2, r3, #3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	4936      	ldr	r1, [pc, #216]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b50:	f7fe ff7c 	bl	8007a4c <HAL_GetTick>
 8008b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b56:	e00a      	b.n	8008b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b58:	f7fe ff78 	bl	8007a4c <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e053      	b.n	8008c16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b6e:	4b2d      	ldr	r3, [pc, #180]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f003 020c 	and.w	r2, r3, #12
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d1eb      	bne.n	8008b58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b80:	4b27      	ldr	r3, [pc, #156]	; (8008c20 <HAL_RCC_ClockConfig+0x1c0>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0307 	and.w	r3, r3, #7
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d210      	bcs.n	8008bb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b8e:	4b24      	ldr	r3, [pc, #144]	; (8008c20 <HAL_RCC_ClockConfig+0x1c0>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f023 0207 	bic.w	r2, r3, #7
 8008b96:	4922      	ldr	r1, [pc, #136]	; (8008c20 <HAL_RCC_ClockConfig+0x1c0>)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b9e:	4b20      	ldr	r3, [pc, #128]	; (8008c20 <HAL_RCC_ClockConfig+0x1c0>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0307 	and.w	r3, r3, #7
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d001      	beq.n	8008bb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e032      	b.n	8008c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0304 	and.w	r3, r3, #4
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d008      	beq.n	8008bce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bbc:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	4916      	ldr	r1, [pc, #88]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0308 	and.w	r3, r3, #8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	490e      	ldr	r1, [pc, #56]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008bee:	f000 f821 	bl	8008c34 <HAL_RCC_GetSysClockFreq>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <HAL_RCC_ClockConfig+0x1c4>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	091b      	lsrs	r3, r3, #4
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	490a      	ldr	r1, [pc, #40]	; (8008c28 <HAL_RCC_ClockConfig+0x1c8>)
 8008c00:	5ccb      	ldrb	r3, [r1, r3]
 8008c02:	fa22 f303 	lsr.w	r3, r2, r3
 8008c06:	4a09      	ldr	r2, [pc, #36]	; (8008c2c <HAL_RCC_ClockConfig+0x1cc>)
 8008c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008c0a:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <HAL_RCC_ClockConfig+0x1d0>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe feda 	bl	80079c8 <HAL_InitTick>

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	40022000 	.word	0x40022000
 8008c24:	40021000 	.word	0x40021000
 8008c28:	0800c9c0 	.word	0x0800c9c0
 8008c2c:	20000000 	.word	0x20000000
 8008c30:	20000004 	.word	0x20000004

08008c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60bb      	str	r3, [r7, #8]
 8008c42:	2300      	movs	r3, #0
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	2300      	movs	r3, #0
 8008c48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008c4e:	4b1e      	ldr	r3, [pc, #120]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f003 030c 	and.w	r3, r3, #12
 8008c5a:	2b04      	cmp	r3, #4
 8008c5c:	d002      	beq.n	8008c64 <HAL_RCC_GetSysClockFreq+0x30>
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	d003      	beq.n	8008c6a <HAL_RCC_GetSysClockFreq+0x36>
 8008c62:	e027      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008c64:	4b19      	ldr	r3, [pc, #100]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8008c66:	613b      	str	r3, [r7, #16]
      break;
 8008c68:	e027      	b.n	8008cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	0c9b      	lsrs	r3, r3, #18
 8008c6e:	f003 030f 	and.w	r3, r3, #15
 8008c72:	4a17      	ldr	r2, [pc, #92]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008c74:	5cd3      	ldrb	r3, [r2, r3]
 8008c76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d010      	beq.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008c82:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	0c5b      	lsrs	r3, r3, #17
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	4a11      	ldr	r2, [pc, #68]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008c8e:	5cd3      	ldrb	r3, [r2, r3]
 8008c90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a0d      	ldr	r2, [pc, #52]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8008c96:	fb02 f203 	mul.w	r2, r2, r3
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca0:	617b      	str	r3, [r7, #20]
 8008ca2:	e004      	b.n	8008cae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a0c      	ldr	r2, [pc, #48]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008ca8:	fb02 f303 	mul.w	r3, r2, r3
 8008cac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	613b      	str	r3, [r7, #16]
      break;
 8008cb2:	e002      	b.n	8008cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008cb4:	4b05      	ldr	r3, [pc, #20]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8008cb6:	613b      	str	r3, [r7, #16]
      break;
 8008cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cba:	693b      	ldr	r3, [r7, #16]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	371c      	adds	r7, #28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bc80      	pop	{r7}
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	40021000 	.word	0x40021000
 8008ccc:	007a1200 	.word	0x007a1200
 8008cd0:	0800c9d8 	.word	0x0800c9d8
 8008cd4:	0800c9e8 	.word	0x0800c9e8
 8008cd8:	003d0900 	.word	0x003d0900

08008cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ce0:	4b02      	ldr	r3, [pc, #8]	; (8008cec <HAL_RCC_GetHCLKFreq+0x10>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bc80      	pop	{r7}
 8008cea:	4770      	bx	lr
 8008cec:	20000000 	.word	0x20000000

08008cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008cf4:	f7ff fff2 	bl	8008cdc <HAL_RCC_GetHCLKFreq>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	0a1b      	lsrs	r3, r3, #8
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	4903      	ldr	r1, [pc, #12]	; (8008d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d06:	5ccb      	ldrb	r3, [r1, r3]
 8008d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	40021000 	.word	0x40021000
 8008d14:	0800c9d0 	.word	0x0800c9d0

08008d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d1c:	f7ff ffde 	bl	8008cdc <HAL_RCC_GetHCLKFreq>
 8008d20:	4602      	mov	r2, r0
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	0adb      	lsrs	r3, r3, #11
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	4903      	ldr	r1, [pc, #12]	; (8008d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d2e:	5ccb      	ldrb	r3, [r1, r3]
 8008d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	40021000 	.word	0x40021000
 8008d3c:	0800c9d0 	.word	0x0800c9d0

08008d40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008d48:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <RCC_Delay+0x34>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a0a      	ldr	r2, [pc, #40]	; (8008d78 <RCC_Delay+0x38>)
 8008d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d52:	0a5b      	lsrs	r3, r3, #9
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008d5c:	bf00      	nop
  }
  while (Delay --);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	1e5a      	subs	r2, r3, #1
 8008d62:	60fa      	str	r2, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1f9      	bne.n	8008d5c <RCC_Delay+0x1c>
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bc80      	pop	{r7}
 8008d72:	4770      	bx	lr
 8008d74:	20000000 	.word	0x20000000
 8008d78:	10624dd3 	.word	0x10624dd3

08008d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e076      	b.n	8008e7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d108      	bne.n	8008da8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d9e:	d009      	beq.n	8008db4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	61da      	str	r2, [r3, #28]
 8008da6:	e005      	b.n	8008db4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d106      	bne.n	8008dd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fe fc28 	bl	8007624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008dfc:	431a      	orrs	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e06:	431a      	orrs	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	f003 0302 	and.w	r3, r3, #2
 8008e10:	431a      	orrs	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e24:	431a      	orrs	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e38:	ea42 0103 	orr.w	r1, r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	0c1a      	lsrs	r2, r3, #16
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f002 0204 	and.w	r2, r2, #4
 8008e5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	69da      	ldr	r2, [r3, #28]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e042      	b.n	8008f1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7fe fc06 	bl	80076bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2224      	movs	r2, #36	; 0x24
 8008eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ec6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fd71 	bl	80099b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	695a      	ldr	r2, [r3, #20]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008eec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008efc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08a      	sub	sp, #40	; 0x28
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	4613      	mov	r3, r2
 8008f32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b20      	cmp	r3, #32
 8008f42:	d16d      	bne.n	8009020 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d002      	beq.n	8008f50 <HAL_UART_Transmit+0x2c>
 8008f4a:	88fb      	ldrh	r3, [r7, #6]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e066      	b.n	8009022 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2221      	movs	r2, #33	; 0x21
 8008f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f62:	f7fe fd73 	bl	8007a4c <HAL_GetTick>
 8008f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	88fa      	ldrh	r2, [r7, #6]
 8008f6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	88fa      	ldrh	r2, [r7, #6]
 8008f72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f7c:	d108      	bne.n	8008f90 <HAL_UART_Transmit+0x6c>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d104      	bne.n	8008f90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	61bb      	str	r3, [r7, #24]
 8008f8e:	e003      	b.n	8008f98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f98:	e02a      	b.n	8008ff0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2180      	movs	r1, #128	; 0x80
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 faf9 	bl	800959c <UART_WaitOnFlagUntilTimeout>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e036      	b.n	8009022 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10b      	bne.n	8008fd2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	3302      	adds	r3, #2
 8008fce:	61bb      	str	r3, [r7, #24]
 8008fd0:	e007      	b.n	8008fe2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	781a      	ldrb	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1cf      	bne.n	8008f9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2200      	movs	r2, #0
 8009002:	2140      	movs	r1, #64	; 0x40
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 fac9 	bl	800959c <UART_WaitOnFlagUntilTimeout>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e006      	b.n	8009022 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2220      	movs	r2, #32
 8009018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	e000      	b.n	8009022 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009020:	2302      	movs	r3, #2
  }
}
 8009022:	4618      	mov	r0, r3
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b0ba      	sub	sp, #232	; 0xe8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009052:	2300      	movs	r3, #0
 8009054:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009058:	2300      	movs	r3, #0
 800905a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800905e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009062:	f003 030f 	and.w	r3, r3, #15
 8009066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800906a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10f      	bne.n	8009092 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009076:	f003 0320 	and.w	r3, r3, #32
 800907a:	2b00      	cmp	r3, #0
 800907c:	d009      	beq.n	8009092 <HAL_UART_IRQHandler+0x66>
 800907e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009082:	f003 0320 	and.w	r3, r3, #32
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fbd1 	bl	8009832 <UART_Receive_IT>
      return;
 8009090:	e25b      	b.n	800954a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 80de 	beq.w	8009258 <HAL_UART_IRQHandler+0x22c>
 800909c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d106      	bne.n	80090b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80d1 	beq.w	8009258 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80090b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00b      	beq.n	80090da <HAL_UART_IRQHandler+0xae>
 80090c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d005      	beq.n	80090da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d2:	f043 0201 	orr.w	r2, r3, #1
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00b      	beq.n	80090fe <HAL_UART_IRQHandler+0xd2>
 80090e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d005      	beq.n	80090fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f6:	f043 0202 	orr.w	r2, r3, #2
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009102:	f003 0302 	and.w	r3, r3, #2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00b      	beq.n	8009122 <HAL_UART_IRQHandler+0xf6>
 800910a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d005      	beq.n	8009122 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911a:	f043 0204 	orr.w	r2, r3, #4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009126:	f003 0308 	and.w	r3, r3, #8
 800912a:	2b00      	cmp	r3, #0
 800912c:	d011      	beq.n	8009152 <HAL_UART_IRQHandler+0x126>
 800912e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d105      	bne.n	8009146 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800913a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	d005      	beq.n	8009152 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800914a:	f043 0208 	orr.w	r2, r3, #8
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 81f2 	beq.w	8009540 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b00      	cmp	r3, #0
 8009166:	d008      	beq.n	800917a <HAL_UART_IRQHandler+0x14e>
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800916c:	f003 0320 	and.w	r3, r3, #32
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fb5c 	bl	8009832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009184:	2b00      	cmp	r3, #0
 8009186:	bf14      	ite	ne
 8009188:	2301      	movne	r3, #1
 800918a:	2300      	moveq	r3, #0
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d103      	bne.n	80091a6 <HAL_UART_IRQHandler+0x17a>
 800919e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d04f      	beq.n	8009246 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fa66 	bl	8009678 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d041      	beq.n	800923e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3314      	adds	r3, #20
 80091c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091c8:	e853 3f00 	ldrex	r3, [r3]
 80091cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3314      	adds	r3, #20
 80091e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091f6:	e841 2300 	strex	r3, r2, [r1]
 80091fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1d9      	bne.n	80091ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d013      	beq.n	8009236 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009212:	4a7e      	ldr	r2, [pc, #504]	; (800940c <HAL_UART_IRQHandler+0x3e0>)
 8009214:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fd8c 	bl	8007d38 <HAL_DMA_Abort_IT>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d016      	beq.n	8009254 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009230:	4610      	mov	r0, r2
 8009232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009234:	e00e      	b.n	8009254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f99c 	bl	8009574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923c:	e00a      	b.n	8009254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f998 	bl	8009574 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009244:	e006      	b.n	8009254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f994 	bl	8009574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009252:	e175      	b.n	8009540 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009254:	bf00      	nop
    return;
 8009256:	e173      	b.n	8009540 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925c:	2b01      	cmp	r3, #1
 800925e:	f040 814f 	bne.w	8009500 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009266:	f003 0310 	and.w	r3, r3, #16
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8148 	beq.w	8009500 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009274:	f003 0310 	and.w	r3, r3, #16
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 8141 	beq.w	8009500 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800927e:	2300      	movs	r3, #0
 8009280:	60bb      	str	r3, [r7, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	60bb      	str	r3, [r7, #8]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	60bb      	str	r3, [r7, #8]
 8009292:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f000 80b6 	beq.w	8009410 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8145 	beq.w	8009544 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092c2:	429a      	cmp	r2, r3
 80092c4:	f080 813e 	bcs.w	8009544 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	2b20      	cmp	r3, #32
 80092d8:	f000 8088 	beq.w	80093ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	330c      	adds	r3, #12
 80092e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ea:	e853 3f00 	ldrex	r3, [r3]
 80092ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80092f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	330c      	adds	r3, #12
 8009304:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009308:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800930c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009314:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1d9      	bne.n	80092dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3314      	adds	r3, #20
 800932e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009332:	e853 3f00 	ldrex	r3, [r3]
 8009336:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800933a:	f023 0301 	bic.w	r3, r3, #1
 800933e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3314      	adds	r3, #20
 8009348:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800934c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009350:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009354:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800935e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e1      	bne.n	8009328 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3314      	adds	r3, #20
 800936a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800937a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3314      	adds	r3, #20
 8009384:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009388:	66fa      	str	r2, [r7, #108]	; 0x6c
 800938a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800938e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009390:	e841 2300 	strex	r3, r2, [r1]
 8009394:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009396:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1e3      	bne.n	8009364 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2220      	movs	r2, #32
 80093a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	330c      	adds	r3, #12
 80093b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093bc:	f023 0310 	bic.w	r3, r3, #16
 80093c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	330c      	adds	r3, #12
 80093ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80093ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80093d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e3      	bne.n	80093aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fc6b 	bl	8007cc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	b29b      	uxth	r3, r3
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f8bf 	bl	8009586 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009408:	e09c      	b.n	8009544 <HAL_UART_IRQHandler+0x518>
 800940a:	bf00      	nop
 800940c:	0800973d 	.word	0x0800973d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009418:	b29b      	uxth	r3, r3
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009424:	b29b      	uxth	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 808e 	beq.w	8009548 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800942c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 8089 	beq.w	8009548 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	330c      	adds	r3, #12
 800943c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	e853 3f00 	ldrex	r3, [r3]
 8009444:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800944c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	330c      	adds	r3, #12
 8009456:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800945a:	647a      	str	r2, [r7, #68]	; 0x44
 800945c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e3      	bne.n	8009436 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3314      	adds	r3, #20
 8009474:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	623b      	str	r3, [r7, #32]
   return(result);
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	f023 0301 	bic.w	r3, r3, #1
 8009484:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3314      	adds	r3, #20
 800948e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009492:	633a      	str	r2, [r7, #48]	; 0x30
 8009494:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e3      	bne.n	800946e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	330c      	adds	r3, #12
 80094ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	e853 3f00 	ldrex	r3, [r3]
 80094c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f023 0310 	bic.w	r3, r3, #16
 80094ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	330c      	adds	r3, #12
 80094d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80094d8:	61fa      	str	r2, [r7, #28]
 80094da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	69b9      	ldr	r1, [r7, #24]
 80094de:	69fa      	ldr	r2, [r7, #28]
 80094e0:	e841 2300 	strex	r3, r2, [r1]
 80094e4:	617b      	str	r3, [r7, #20]
   return(result);
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e3      	bne.n	80094b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2202      	movs	r2, #2
 80094f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f844 	bl	8009586 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094fe:	e023      	b.n	8009548 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009508:	2b00      	cmp	r3, #0
 800950a:	d009      	beq.n	8009520 <HAL_UART_IRQHandler+0x4f4>
 800950c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f923 	bl	8009764 <UART_Transmit_IT>
    return;
 800951e:	e014      	b.n	800954a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00e      	beq.n	800954a <HAL_UART_IRQHandler+0x51e>
 800952c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009534:	2b00      	cmp	r3, #0
 8009536:	d008      	beq.n	800954a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f962 	bl	8009802 <UART_EndTransmit_IT>
    return;
 800953e:	e004      	b.n	800954a <HAL_UART_IRQHandler+0x51e>
    return;
 8009540:	bf00      	nop
 8009542:	e002      	b.n	800954a <HAL_UART_IRQHandler+0x51e>
      return;
 8009544:	bf00      	nop
 8009546:	e000      	b.n	800954a <HAL_UART_IRQHandler+0x51e>
      return;
 8009548:	bf00      	nop
  }
}
 800954a:	37e8      	adds	r7, #232	; 0xe8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	bc80      	pop	{r7}
 8009560:	4770      	bx	lr

08009562 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	bc80      	pop	{r7}
 8009584:	4770      	bx	lr

08009586 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009586:	b480      	push	{r7}
 8009588:	b083      	sub	sp, #12
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009592:	bf00      	nop
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	bc80      	pop	{r7}
 800959a:	4770      	bx	lr

0800959c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b090      	sub	sp, #64	; 0x40
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	4613      	mov	r3, r2
 80095aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ac:	e050      	b.n	8009650 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d04c      	beq.n	8009650 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80095b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <UART_WaitOnFlagUntilTimeout+0x30>
 80095bc:	f7fe fa46 	bl	8007a4c <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d241      	bcs.n	8009650 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	330c      	adds	r3, #12
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	330c      	adds	r3, #12
 80095ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095ec:	637a      	str	r2, [r7, #52]	; 0x34
 80095ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e5      	bne.n	80095cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3314      	adds	r3, #20
 8009606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	613b      	str	r3, [r7, #16]
   return(result);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f023 0301 	bic.w	r3, r3, #1
 8009616:	63bb      	str	r3, [r7, #56]	; 0x38
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3314      	adds	r3, #20
 800961e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009620:	623a      	str	r2, [r7, #32]
 8009622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	69f9      	ldr	r1, [r7, #28]
 8009626:	6a3a      	ldr	r2, [r7, #32]
 8009628:	e841 2300 	strex	r3, r2, [r1]
 800962c:	61bb      	str	r3, [r7, #24]
   return(result);
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e5      	bne.n	8009600 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2220      	movs	r2, #32
 8009638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2220      	movs	r2, #32
 8009640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e00f      	b.n	8009670 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	4013      	ands	r3, r2
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	429a      	cmp	r2, r3
 800965e:	bf0c      	ite	eq
 8009660:	2301      	moveq	r3, #1
 8009662:	2300      	movne	r3, #0
 8009664:	b2db      	uxtb	r3, r3
 8009666:	461a      	mov	r2, r3
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	429a      	cmp	r2, r3
 800966c:	d09f      	beq.n	80095ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3740      	adds	r7, #64	; 0x40
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b095      	sub	sp, #84	; 0x54
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	330c      	adds	r3, #12
 8009686:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968a:	e853 3f00 	ldrex	r3, [r3]
 800968e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	330c      	adds	r3, #12
 800969e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096a0:	643a      	str	r2, [r7, #64]	; 0x40
 80096a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096a8:	e841 2300 	strex	r3, r2, [r1]
 80096ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e5      	bne.n	8009680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3314      	adds	r3, #20
 80096ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	e853 3f00 	ldrex	r3, [r3]
 80096c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	f023 0301 	bic.w	r3, r3, #1
 80096ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3314      	adds	r3, #20
 80096d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096dc:	e841 2300 	strex	r3, r2, [r1]
 80096e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1e5      	bne.n	80096b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d119      	bne.n	8009724 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	330c      	adds	r3, #12
 80096f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f023 0310 	bic.w	r3, r3, #16
 8009706:	647b      	str	r3, [r7, #68]	; 0x44
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	330c      	adds	r3, #12
 800970e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009710:	61ba      	str	r2, [r7, #24]
 8009712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009714:	6979      	ldr	r1, [r7, #20]
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	e841 2300 	strex	r3, r2, [r1]
 800971c:	613b      	str	r3, [r7, #16]
   return(result);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1e5      	bne.n	80096f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2220      	movs	r2, #32
 8009728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009732:	bf00      	nop
 8009734:	3754      	adds	r7, #84	; 0x54
 8009736:	46bd      	mov	sp, r7
 8009738:	bc80      	pop	{r7}
 800973a:	4770      	bx	lr

0800973c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f7ff ff0c 	bl	8009574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800975c:	bf00      	nop
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b21      	cmp	r3, #33	; 0x21
 8009776:	d13e      	bne.n	80097f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009780:	d114      	bne.n	80097ac <UART_Transmit_IT+0x48>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d110      	bne.n	80097ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	461a      	mov	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800979e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	1c9a      	adds	r2, r3, #2
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	621a      	str	r2, [r3, #32]
 80097aa:	e008      	b.n	80097be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	1c59      	adds	r1, r3, #1
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	6211      	str	r1, [r2, #32]
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	3b01      	subs	r3, #1
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	4619      	mov	r1, r3
 80097cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10f      	bne.n	80097f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68da      	ldr	r2, [r3, #12]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	e000      	b.n	80097f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80097f6:	2302      	movs	r3, #2
  }
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bc80      	pop	{r7}
 8009800:	4770      	bx	lr

08009802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68da      	ldr	r2, [r3, #12]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2220      	movs	r2, #32
 800981e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7ff fe94 	bl	8009550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b08c      	sub	sp, #48	; 0x30
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b22      	cmp	r3, #34	; 0x22
 8009844:	f040 80ae 	bne.w	80099a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009850:	d117      	bne.n	8009882 <UART_Receive_IT+0x50>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d113      	bne.n	8009882 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800985a:	2300      	movs	r3, #0
 800985c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009862:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	b29b      	uxth	r3, r3
 800986c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009870:	b29a      	uxth	r2, r3
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987a:	1c9a      	adds	r2, r3, #2
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	629a      	str	r2, [r3, #40]	; 0x28
 8009880:	e026      	b.n	80098d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009886:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009888:	2300      	movs	r3, #0
 800988a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009894:	d007      	beq.n	80098a6 <UART_Receive_IT+0x74>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10a      	bne.n	80098b4 <UART_Receive_IT+0x82>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d106      	bne.n	80098b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	701a      	strb	r2, [r3, #0]
 80098b2:	e008      	b.n	80098c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	3b01      	subs	r3, #1
 80098d8:	b29b      	uxth	r3, r3
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	4619      	mov	r1, r3
 80098de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d15d      	bne.n	80099a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0220 	bic.w	r2, r2, #32
 80098f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68da      	ldr	r2, [r3, #12]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	695a      	ldr	r2, [r3, #20]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0201 	bic.w	r2, r2, #1
 8009912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2220      	movs	r2, #32
 8009918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009926:	2b01      	cmp	r3, #1
 8009928:	d135      	bne.n	8009996 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	330c      	adds	r3, #12
 8009936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	e853 3f00 	ldrex	r3, [r3]
 800993e:	613b      	str	r3, [r7, #16]
   return(result);
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f023 0310 	bic.w	r3, r3, #16
 8009946:	627b      	str	r3, [r7, #36]	; 0x24
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	330c      	adds	r3, #12
 800994e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009950:	623a      	str	r2, [r7, #32]
 8009952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009954:	69f9      	ldr	r1, [r7, #28]
 8009956:	6a3a      	ldr	r2, [r7, #32]
 8009958:	e841 2300 	strex	r3, r2, [r1]
 800995c:	61bb      	str	r3, [r7, #24]
   return(result);
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1e5      	bne.n	8009930 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 0310 	and.w	r3, r3, #16
 800996e:	2b10      	cmp	r3, #16
 8009970:	d10a      	bne.n	8009988 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009972:	2300      	movs	r3, #0
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60fb      	str	r3, [r7, #12]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff fdf9 	bl	8009586 <HAL_UARTEx_RxEventCallback>
 8009994:	e002      	b.n	800999c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff fde3 	bl	8009562 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	e002      	b.n	80099a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	e000      	b.n	80099a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80099a4:	2302      	movs	r3, #2
  }
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3730      	adds	r7, #48	; 0x30
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	689a      	ldr	r2, [r3, #8]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	431a      	orrs	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	4313      	orrs	r3, r2
 80099de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80099ea:	f023 030c 	bic.w	r3, r3, #12
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	6812      	ldr	r2, [r2, #0]
 80099f2:	68b9      	ldr	r1, [r7, #8]
 80099f4:	430b      	orrs	r3, r1
 80099f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	699a      	ldr	r2, [r3, #24]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a2c      	ldr	r2, [pc, #176]	; (8009ac4 <UART_SetConfig+0x114>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d103      	bne.n	8009a20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009a18:	f7ff f97e 	bl	8008d18 <HAL_RCC_GetPCLK2Freq>
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	e002      	b.n	8009a26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009a20:	f7ff f966 	bl	8008cf0 <HAL_RCC_GetPCLK1Freq>
 8009a24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009a      	lsls	r2, r3, #2
 8009a30:	441a      	add	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a3c:	4a22      	ldr	r2, [pc, #136]	; (8009ac8 <UART_SetConfig+0x118>)
 8009a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a42:	095b      	lsrs	r3, r3, #5
 8009a44:	0119      	lsls	r1, r3, #4
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009a      	lsls	r2, r3, #2
 8009a50:	441a      	add	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a5c:	4b1a      	ldr	r3, [pc, #104]	; (8009ac8 <UART_SetConfig+0x118>)
 8009a5e:	fba3 0302 	umull	r0, r3, r3, r2
 8009a62:	095b      	lsrs	r3, r3, #5
 8009a64:	2064      	movs	r0, #100	; 0x64
 8009a66:	fb00 f303 	mul.w	r3, r0, r3
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	011b      	lsls	r3, r3, #4
 8009a6e:	3332      	adds	r3, #50	; 0x32
 8009a70:	4a15      	ldr	r2, [pc, #84]	; (8009ac8 <UART_SetConfig+0x118>)
 8009a72:	fba2 2303 	umull	r2, r3, r2, r3
 8009a76:	095b      	lsrs	r3, r3, #5
 8009a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a7c:	4419      	add	r1, r3
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	009a      	lsls	r2, r3, #2
 8009a88:	441a      	add	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a94:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <UART_SetConfig+0x118>)
 8009a96:	fba3 0302 	umull	r0, r3, r3, r2
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	2064      	movs	r0, #100	; 0x64
 8009a9e:	fb00 f303 	mul.w	r3, r0, r3
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	011b      	lsls	r3, r3, #4
 8009aa6:	3332      	adds	r3, #50	; 0x32
 8009aa8:	4a07      	ldr	r2, [pc, #28]	; (8009ac8 <UART_SetConfig+0x118>)
 8009aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8009aae:	095b      	lsrs	r3, r3, #5
 8009ab0:	f003 020f 	and.w	r2, r3, #15
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	440a      	add	r2, r1
 8009aba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009abc:	bf00      	nop
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	40013800 	.word	0x40013800
 8009ac8:	51eb851f 	.word	0x51eb851f

08009acc <__assert_func>:
 8009acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ace:	4614      	mov	r4, r2
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <__assert_func+0x2c>)
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68d8      	ldr	r0, [r3, #12]
 8009ada:	b14c      	cbz	r4, 8009af0 <__assert_func+0x24>
 8009adc:	4b07      	ldr	r3, [pc, #28]	; (8009afc <__assert_func+0x30>)
 8009ade:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ae2:	9100      	str	r1, [sp, #0]
 8009ae4:	462b      	mov	r3, r5
 8009ae6:	4906      	ldr	r1, [pc, #24]	; (8009b00 <__assert_func+0x34>)
 8009ae8:	f000 f814 	bl	8009b14 <fiprintf>
 8009aec:	f000 fd48 	bl	800a580 <abort>
 8009af0:	4b04      	ldr	r3, [pc, #16]	; (8009b04 <__assert_func+0x38>)
 8009af2:	461c      	mov	r4, r3
 8009af4:	e7f3      	b.n	8009ade <__assert_func+0x12>
 8009af6:	bf00      	nop
 8009af8:	2000000c 	.word	0x2000000c
 8009afc:	0800c9ea 	.word	0x0800c9ea
 8009b00:	0800c9f7 	.word	0x0800c9f7
 8009b04:	0800ca25 	.word	0x0800ca25

08009b08 <__errno>:
 8009b08:	4b01      	ldr	r3, [pc, #4]	; (8009b10 <__errno+0x8>)
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	2000000c 	.word	0x2000000c

08009b14 <fiprintf>:
 8009b14:	b40e      	push	{r1, r2, r3}
 8009b16:	b503      	push	{r0, r1, lr}
 8009b18:	4601      	mov	r1, r0
 8009b1a:	ab03      	add	r3, sp, #12
 8009b1c:	4805      	ldr	r0, [pc, #20]	; (8009b34 <fiprintf+0x20>)
 8009b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b22:	6800      	ldr	r0, [r0, #0]
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	f000 f92d 	bl	8009d84 <_vfiprintf_r>
 8009b2a:	b002      	add	sp, #8
 8009b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b30:	b003      	add	sp, #12
 8009b32:	4770      	bx	lr
 8009b34:	2000000c 	.word	0x2000000c

08009b38 <__libc_init_array>:
 8009b38:	b570      	push	{r4, r5, r6, lr}
 8009b3a:	2600      	movs	r6, #0
 8009b3c:	4d0c      	ldr	r5, [pc, #48]	; (8009b70 <__libc_init_array+0x38>)
 8009b3e:	4c0d      	ldr	r4, [pc, #52]	; (8009b74 <__libc_init_array+0x3c>)
 8009b40:	1b64      	subs	r4, r4, r5
 8009b42:	10a4      	asrs	r4, r4, #2
 8009b44:	42a6      	cmp	r6, r4
 8009b46:	d109      	bne.n	8009b5c <__libc_init_array+0x24>
 8009b48:	f001 f9ee 	bl	800af28 <_init>
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	4d0a      	ldr	r5, [pc, #40]	; (8009b78 <__libc_init_array+0x40>)
 8009b50:	4c0a      	ldr	r4, [pc, #40]	; (8009b7c <__libc_init_array+0x44>)
 8009b52:	1b64      	subs	r4, r4, r5
 8009b54:	10a4      	asrs	r4, r4, #2
 8009b56:	42a6      	cmp	r6, r4
 8009b58:	d105      	bne.n	8009b66 <__libc_init_array+0x2e>
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b60:	4798      	blx	r3
 8009b62:	3601      	adds	r6, #1
 8009b64:	e7ee      	b.n	8009b44 <__libc_init_array+0xc>
 8009b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b6a:	4798      	blx	r3
 8009b6c:	3601      	adds	r6, #1
 8009b6e:	e7f2      	b.n	8009b56 <__libc_init_array+0x1e>
 8009b70:	0800cac0 	.word	0x0800cac0
 8009b74:	0800cac0 	.word	0x0800cac0
 8009b78:	0800cac0 	.word	0x0800cac0
 8009b7c:	0800cac4 	.word	0x0800cac4

08009b80 <malloc>:
 8009b80:	4b02      	ldr	r3, [pc, #8]	; (8009b8c <malloc+0xc>)
 8009b82:	4601      	mov	r1, r0
 8009b84:	6818      	ldr	r0, [r3, #0]
 8009b86:	f000 b87b 	b.w	8009c80 <_malloc_r>
 8009b8a:	bf00      	nop
 8009b8c:	2000000c 	.word	0x2000000c

08009b90 <free>:
 8009b90:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <free+0xc>)
 8009b92:	4601      	mov	r1, r0
 8009b94:	6818      	ldr	r0, [r3, #0]
 8009b96:	f000 b827 	b.w	8009be8 <_free_r>
 8009b9a:	bf00      	nop
 8009b9c:	2000000c 	.word	0x2000000c

08009ba0 <memcmp>:
 8009ba0:	b530      	push	{r4, r5, lr}
 8009ba2:	2400      	movs	r4, #0
 8009ba4:	3901      	subs	r1, #1
 8009ba6:	42a2      	cmp	r2, r4
 8009ba8:	d101      	bne.n	8009bae <memcmp+0xe>
 8009baa:	2000      	movs	r0, #0
 8009bac:	e005      	b.n	8009bba <memcmp+0x1a>
 8009bae:	5d03      	ldrb	r3, [r0, r4]
 8009bb0:	3401      	adds	r4, #1
 8009bb2:	5d0d      	ldrb	r5, [r1, r4]
 8009bb4:	42ab      	cmp	r3, r5
 8009bb6:	d0f6      	beq.n	8009ba6 <memcmp+0x6>
 8009bb8:	1b58      	subs	r0, r3, r5
 8009bba:	bd30      	pop	{r4, r5, pc}

08009bbc <memcpy>:
 8009bbc:	440a      	add	r2, r1
 8009bbe:	4291      	cmp	r1, r2
 8009bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bc4:	d100      	bne.n	8009bc8 <memcpy+0xc>
 8009bc6:	4770      	bx	lr
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bce:	4291      	cmp	r1, r2
 8009bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bd4:	d1f9      	bne.n	8009bca <memcpy+0xe>
 8009bd6:	bd10      	pop	{r4, pc}

08009bd8 <memset>:
 8009bd8:	4603      	mov	r3, r0
 8009bda:	4402      	add	r2, r0
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d100      	bne.n	8009be2 <memset+0xa>
 8009be0:	4770      	bx	lr
 8009be2:	f803 1b01 	strb.w	r1, [r3], #1
 8009be6:	e7f9      	b.n	8009bdc <memset+0x4>

08009be8 <_free_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4605      	mov	r5, r0
 8009bec:	2900      	cmp	r1, #0
 8009bee:	d043      	beq.n	8009c78 <_free_r+0x90>
 8009bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf4:	1f0c      	subs	r4, r1, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	bfb8      	it	lt
 8009bfa:	18e4      	addlt	r4, r4, r3
 8009bfc:	f000 ff0e 	bl	800aa1c <__malloc_lock>
 8009c00:	4a1e      	ldr	r2, [pc, #120]	; (8009c7c <_free_r+0x94>)
 8009c02:	6813      	ldr	r3, [r2, #0]
 8009c04:	4610      	mov	r0, r2
 8009c06:	b933      	cbnz	r3, 8009c16 <_free_r+0x2e>
 8009c08:	6063      	str	r3, [r4, #4]
 8009c0a:	6014      	str	r4, [r2, #0]
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c12:	f000 bf09 	b.w	800aa28 <__malloc_unlock>
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	d90a      	bls.n	8009c30 <_free_r+0x48>
 8009c1a:	6821      	ldr	r1, [r4, #0]
 8009c1c:	1862      	adds	r2, r4, r1
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	bf01      	itttt	eq
 8009c22:	681a      	ldreq	r2, [r3, #0]
 8009c24:	685b      	ldreq	r3, [r3, #4]
 8009c26:	1852      	addeq	r2, r2, r1
 8009c28:	6022      	streq	r2, [r4, #0]
 8009c2a:	6063      	str	r3, [r4, #4]
 8009c2c:	6004      	str	r4, [r0, #0]
 8009c2e:	e7ed      	b.n	8009c0c <_free_r+0x24>
 8009c30:	461a      	mov	r2, r3
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	b10b      	cbz	r3, 8009c3a <_free_r+0x52>
 8009c36:	42a3      	cmp	r3, r4
 8009c38:	d9fa      	bls.n	8009c30 <_free_r+0x48>
 8009c3a:	6811      	ldr	r1, [r2, #0]
 8009c3c:	1850      	adds	r0, r2, r1
 8009c3e:	42a0      	cmp	r0, r4
 8009c40:	d10b      	bne.n	8009c5a <_free_r+0x72>
 8009c42:	6820      	ldr	r0, [r4, #0]
 8009c44:	4401      	add	r1, r0
 8009c46:	1850      	adds	r0, r2, r1
 8009c48:	4283      	cmp	r3, r0
 8009c4a:	6011      	str	r1, [r2, #0]
 8009c4c:	d1de      	bne.n	8009c0c <_free_r+0x24>
 8009c4e:	6818      	ldr	r0, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	4401      	add	r1, r0
 8009c54:	6011      	str	r1, [r2, #0]
 8009c56:	6053      	str	r3, [r2, #4]
 8009c58:	e7d8      	b.n	8009c0c <_free_r+0x24>
 8009c5a:	d902      	bls.n	8009c62 <_free_r+0x7a>
 8009c5c:	230c      	movs	r3, #12
 8009c5e:	602b      	str	r3, [r5, #0]
 8009c60:	e7d4      	b.n	8009c0c <_free_r+0x24>
 8009c62:	6820      	ldr	r0, [r4, #0]
 8009c64:	1821      	adds	r1, r4, r0
 8009c66:	428b      	cmp	r3, r1
 8009c68:	bf01      	itttt	eq
 8009c6a:	6819      	ldreq	r1, [r3, #0]
 8009c6c:	685b      	ldreq	r3, [r3, #4]
 8009c6e:	1809      	addeq	r1, r1, r0
 8009c70:	6021      	streq	r1, [r4, #0]
 8009c72:	6063      	str	r3, [r4, #4]
 8009c74:	6054      	str	r4, [r2, #4]
 8009c76:	e7c9      	b.n	8009c0c <_free_r+0x24>
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
 8009c7a:	bf00      	nop
 8009c7c:	2000009c 	.word	0x2000009c

08009c80 <_malloc_r>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	1ccd      	adds	r5, r1, #3
 8009c84:	f025 0503 	bic.w	r5, r5, #3
 8009c88:	3508      	adds	r5, #8
 8009c8a:	2d0c      	cmp	r5, #12
 8009c8c:	bf38      	it	cc
 8009c8e:	250c      	movcc	r5, #12
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	4606      	mov	r6, r0
 8009c94:	db01      	blt.n	8009c9a <_malloc_r+0x1a>
 8009c96:	42a9      	cmp	r1, r5
 8009c98:	d903      	bls.n	8009ca2 <_malloc_r+0x22>
 8009c9a:	230c      	movs	r3, #12
 8009c9c:	6033      	str	r3, [r6, #0]
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca2:	f000 febb 	bl	800aa1c <__malloc_lock>
 8009ca6:	4921      	ldr	r1, [pc, #132]	; (8009d2c <_malloc_r+0xac>)
 8009ca8:	680a      	ldr	r2, [r1, #0]
 8009caa:	4614      	mov	r4, r2
 8009cac:	b99c      	cbnz	r4, 8009cd6 <_malloc_r+0x56>
 8009cae:	4f20      	ldr	r7, [pc, #128]	; (8009d30 <_malloc_r+0xb0>)
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	b923      	cbnz	r3, 8009cbe <_malloc_r+0x3e>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f000 fb2a 	bl	800a310 <_sbrk_r>
 8009cbc:	6038      	str	r0, [r7, #0]
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f000 fb25 	bl	800a310 <_sbrk_r>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	d123      	bne.n	8009d12 <_malloc_r+0x92>
 8009cca:	230c      	movs	r3, #12
 8009ccc:	4630      	mov	r0, r6
 8009cce:	6033      	str	r3, [r6, #0]
 8009cd0:	f000 feaa 	bl	800aa28 <__malloc_unlock>
 8009cd4:	e7e3      	b.n	8009c9e <_malloc_r+0x1e>
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	1b5b      	subs	r3, r3, r5
 8009cda:	d417      	bmi.n	8009d0c <_malloc_r+0x8c>
 8009cdc:	2b0b      	cmp	r3, #11
 8009cde:	d903      	bls.n	8009ce8 <_malloc_r+0x68>
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	441c      	add	r4, r3
 8009ce4:	6025      	str	r5, [r4, #0]
 8009ce6:	e004      	b.n	8009cf2 <_malloc_r+0x72>
 8009ce8:	6863      	ldr	r3, [r4, #4]
 8009cea:	42a2      	cmp	r2, r4
 8009cec:	bf0c      	ite	eq
 8009cee:	600b      	streq	r3, [r1, #0]
 8009cf0:	6053      	strne	r3, [r2, #4]
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f000 fe98 	bl	800aa28 <__malloc_unlock>
 8009cf8:	f104 000b 	add.w	r0, r4, #11
 8009cfc:	1d23      	adds	r3, r4, #4
 8009cfe:	f020 0007 	bic.w	r0, r0, #7
 8009d02:	1ac2      	subs	r2, r0, r3
 8009d04:	d0cc      	beq.n	8009ca0 <_malloc_r+0x20>
 8009d06:	1a1b      	subs	r3, r3, r0
 8009d08:	50a3      	str	r3, [r4, r2]
 8009d0a:	e7c9      	b.n	8009ca0 <_malloc_r+0x20>
 8009d0c:	4622      	mov	r2, r4
 8009d0e:	6864      	ldr	r4, [r4, #4]
 8009d10:	e7cc      	b.n	8009cac <_malloc_r+0x2c>
 8009d12:	1cc4      	adds	r4, r0, #3
 8009d14:	f024 0403 	bic.w	r4, r4, #3
 8009d18:	42a0      	cmp	r0, r4
 8009d1a:	d0e3      	beq.n	8009ce4 <_malloc_r+0x64>
 8009d1c:	1a21      	subs	r1, r4, r0
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f000 faf6 	bl	800a310 <_sbrk_r>
 8009d24:	3001      	adds	r0, #1
 8009d26:	d1dd      	bne.n	8009ce4 <_malloc_r+0x64>
 8009d28:	e7cf      	b.n	8009cca <_malloc_r+0x4a>
 8009d2a:	bf00      	nop
 8009d2c:	2000009c 	.word	0x2000009c
 8009d30:	200000a0 	.word	0x200000a0

08009d34 <__sfputc_r>:
 8009d34:	6893      	ldr	r3, [r2, #8]
 8009d36:	b410      	push	{r4}
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	6093      	str	r3, [r2, #8]
 8009d3e:	da07      	bge.n	8009d50 <__sfputc_r+0x1c>
 8009d40:	6994      	ldr	r4, [r2, #24]
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	db01      	blt.n	8009d4a <__sfputc_r+0x16>
 8009d46:	290a      	cmp	r1, #10
 8009d48:	d102      	bne.n	8009d50 <__sfputc_r+0x1c>
 8009d4a:	bc10      	pop	{r4}
 8009d4c:	f000 bb58 	b.w	800a400 <__swbuf_r>
 8009d50:	6813      	ldr	r3, [r2, #0]
 8009d52:	1c58      	adds	r0, r3, #1
 8009d54:	6010      	str	r0, [r2, #0]
 8009d56:	7019      	strb	r1, [r3, #0]
 8009d58:	4608      	mov	r0, r1
 8009d5a:	bc10      	pop	{r4}
 8009d5c:	4770      	bx	lr

08009d5e <__sfputs_r>:
 8009d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d60:	4606      	mov	r6, r0
 8009d62:	460f      	mov	r7, r1
 8009d64:	4614      	mov	r4, r2
 8009d66:	18d5      	adds	r5, r2, r3
 8009d68:	42ac      	cmp	r4, r5
 8009d6a:	d101      	bne.n	8009d70 <__sfputs_r+0x12>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	e007      	b.n	8009d80 <__sfputs_r+0x22>
 8009d70:	463a      	mov	r2, r7
 8009d72:	4630      	mov	r0, r6
 8009d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d78:	f7ff ffdc 	bl	8009d34 <__sfputc_r>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d1f3      	bne.n	8009d68 <__sfputs_r+0xa>
 8009d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d84 <_vfiprintf_r>:
 8009d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	460d      	mov	r5, r1
 8009d8a:	4614      	mov	r4, r2
 8009d8c:	4698      	mov	r8, r3
 8009d8e:	4606      	mov	r6, r0
 8009d90:	b09d      	sub	sp, #116	; 0x74
 8009d92:	b118      	cbz	r0, 8009d9c <_vfiprintf_r+0x18>
 8009d94:	6983      	ldr	r3, [r0, #24]
 8009d96:	b90b      	cbnz	r3, 8009d9c <_vfiprintf_r+0x18>
 8009d98:	f000 fd14 	bl	800a7c4 <__sinit>
 8009d9c:	4b89      	ldr	r3, [pc, #548]	; (8009fc4 <_vfiprintf_r+0x240>)
 8009d9e:	429d      	cmp	r5, r3
 8009da0:	d11b      	bne.n	8009dda <_vfiprintf_r+0x56>
 8009da2:	6875      	ldr	r5, [r6, #4]
 8009da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009da6:	07d9      	lsls	r1, r3, #31
 8009da8:	d405      	bmi.n	8009db6 <_vfiprintf_r+0x32>
 8009daa:	89ab      	ldrh	r3, [r5, #12]
 8009dac:	059a      	lsls	r2, r3, #22
 8009dae:	d402      	bmi.n	8009db6 <_vfiprintf_r+0x32>
 8009db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009db2:	f000 fda5 	bl	800a900 <__retarget_lock_acquire_recursive>
 8009db6:	89ab      	ldrh	r3, [r5, #12]
 8009db8:	071b      	lsls	r3, r3, #28
 8009dba:	d501      	bpl.n	8009dc0 <_vfiprintf_r+0x3c>
 8009dbc:	692b      	ldr	r3, [r5, #16]
 8009dbe:	b9eb      	cbnz	r3, 8009dfc <_vfiprintf_r+0x78>
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f000 fb6e 	bl	800a4a4 <__swsetup_r>
 8009dc8:	b1c0      	cbz	r0, 8009dfc <_vfiprintf_r+0x78>
 8009dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dcc:	07dc      	lsls	r4, r3, #31
 8009dce:	d50e      	bpl.n	8009dee <_vfiprintf_r+0x6a>
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	b01d      	add	sp, #116	; 0x74
 8009dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dda:	4b7b      	ldr	r3, [pc, #492]	; (8009fc8 <_vfiprintf_r+0x244>)
 8009ddc:	429d      	cmp	r5, r3
 8009dde:	d101      	bne.n	8009de4 <_vfiprintf_r+0x60>
 8009de0:	68b5      	ldr	r5, [r6, #8]
 8009de2:	e7df      	b.n	8009da4 <_vfiprintf_r+0x20>
 8009de4:	4b79      	ldr	r3, [pc, #484]	; (8009fcc <_vfiprintf_r+0x248>)
 8009de6:	429d      	cmp	r5, r3
 8009de8:	bf08      	it	eq
 8009dea:	68f5      	ldreq	r5, [r6, #12]
 8009dec:	e7da      	b.n	8009da4 <_vfiprintf_r+0x20>
 8009dee:	89ab      	ldrh	r3, [r5, #12]
 8009df0:	0598      	lsls	r0, r3, #22
 8009df2:	d4ed      	bmi.n	8009dd0 <_vfiprintf_r+0x4c>
 8009df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009df6:	f000 fd84 	bl	800a902 <__retarget_lock_release_recursive>
 8009dfa:	e7e9      	b.n	8009dd0 <_vfiprintf_r+0x4c>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009e00:	2320      	movs	r3, #32
 8009e02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e06:	2330      	movs	r3, #48	; 0x30
 8009e08:	f04f 0901 	mov.w	r9, #1
 8009e0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009fd0 <_vfiprintf_r+0x24c>
 8009e14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e18:	4623      	mov	r3, r4
 8009e1a:	469a      	mov	sl, r3
 8009e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e20:	b10a      	cbz	r2, 8009e26 <_vfiprintf_r+0xa2>
 8009e22:	2a25      	cmp	r2, #37	; 0x25
 8009e24:	d1f9      	bne.n	8009e1a <_vfiprintf_r+0x96>
 8009e26:	ebba 0b04 	subs.w	fp, sl, r4
 8009e2a:	d00b      	beq.n	8009e44 <_vfiprintf_r+0xc0>
 8009e2c:	465b      	mov	r3, fp
 8009e2e:	4622      	mov	r2, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	4630      	mov	r0, r6
 8009e34:	f7ff ff93 	bl	8009d5e <__sfputs_r>
 8009e38:	3001      	adds	r0, #1
 8009e3a:	f000 80aa 	beq.w	8009f92 <_vfiprintf_r+0x20e>
 8009e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e40:	445a      	add	r2, fp
 8009e42:	9209      	str	r2, [sp, #36]	; 0x24
 8009e44:	f89a 3000 	ldrb.w	r3, [sl]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80a2 	beq.w	8009f92 <_vfiprintf_r+0x20e>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f04f 32ff 	mov.w	r2, #4294967295
 8009e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e58:	f10a 0a01 	add.w	sl, sl, #1
 8009e5c:	9304      	str	r3, [sp, #16]
 8009e5e:	9307      	str	r3, [sp, #28]
 8009e60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e64:	931a      	str	r3, [sp, #104]	; 0x68
 8009e66:	4654      	mov	r4, sl
 8009e68:	2205      	movs	r2, #5
 8009e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e6e:	4858      	ldr	r0, [pc, #352]	; (8009fd0 <_vfiprintf_r+0x24c>)
 8009e70:	f000 fdac 	bl	800a9cc <memchr>
 8009e74:	9a04      	ldr	r2, [sp, #16]
 8009e76:	b9d8      	cbnz	r0, 8009eb0 <_vfiprintf_r+0x12c>
 8009e78:	06d1      	lsls	r1, r2, #27
 8009e7a:	bf44      	itt	mi
 8009e7c:	2320      	movmi	r3, #32
 8009e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e82:	0713      	lsls	r3, r2, #28
 8009e84:	bf44      	itt	mi
 8009e86:	232b      	movmi	r3, #43	; 0x2b
 8009e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e90:	2b2a      	cmp	r3, #42	; 0x2a
 8009e92:	d015      	beq.n	8009ec0 <_vfiprintf_r+0x13c>
 8009e94:	4654      	mov	r4, sl
 8009e96:	2000      	movs	r0, #0
 8009e98:	f04f 0c0a 	mov.w	ip, #10
 8009e9c:	9a07      	ldr	r2, [sp, #28]
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ea4:	3b30      	subs	r3, #48	; 0x30
 8009ea6:	2b09      	cmp	r3, #9
 8009ea8:	d94e      	bls.n	8009f48 <_vfiprintf_r+0x1c4>
 8009eaa:	b1b0      	cbz	r0, 8009eda <_vfiprintf_r+0x156>
 8009eac:	9207      	str	r2, [sp, #28]
 8009eae:	e014      	b.n	8009eda <_vfiprintf_r+0x156>
 8009eb0:	eba0 0308 	sub.w	r3, r0, r8
 8009eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	46a2      	mov	sl, r4
 8009ebc:	9304      	str	r3, [sp, #16]
 8009ebe:	e7d2      	b.n	8009e66 <_vfiprintf_r+0xe2>
 8009ec0:	9b03      	ldr	r3, [sp, #12]
 8009ec2:	1d19      	adds	r1, r3, #4
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	9103      	str	r1, [sp, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	bfbb      	ittet	lt
 8009ecc:	425b      	neglt	r3, r3
 8009ece:	f042 0202 	orrlt.w	r2, r2, #2
 8009ed2:	9307      	strge	r3, [sp, #28]
 8009ed4:	9307      	strlt	r3, [sp, #28]
 8009ed6:	bfb8      	it	lt
 8009ed8:	9204      	strlt	r2, [sp, #16]
 8009eda:	7823      	ldrb	r3, [r4, #0]
 8009edc:	2b2e      	cmp	r3, #46	; 0x2e
 8009ede:	d10c      	bne.n	8009efa <_vfiprintf_r+0x176>
 8009ee0:	7863      	ldrb	r3, [r4, #1]
 8009ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee4:	d135      	bne.n	8009f52 <_vfiprintf_r+0x1ce>
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	3402      	adds	r4, #2
 8009eea:	1d1a      	adds	r2, r3, #4
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	9203      	str	r2, [sp, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	bfb8      	it	lt
 8009ef4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ef8:	9305      	str	r3, [sp, #20]
 8009efa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fe0 <_vfiprintf_r+0x25c>
 8009efe:	2203      	movs	r2, #3
 8009f00:	4650      	mov	r0, sl
 8009f02:	7821      	ldrb	r1, [r4, #0]
 8009f04:	f000 fd62 	bl	800a9cc <memchr>
 8009f08:	b140      	cbz	r0, 8009f1c <_vfiprintf_r+0x198>
 8009f0a:	2340      	movs	r3, #64	; 0x40
 8009f0c:	eba0 000a 	sub.w	r0, r0, sl
 8009f10:	fa03 f000 	lsl.w	r0, r3, r0
 8009f14:	9b04      	ldr	r3, [sp, #16]
 8009f16:	3401      	adds	r4, #1
 8009f18:	4303      	orrs	r3, r0
 8009f1a:	9304      	str	r3, [sp, #16]
 8009f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f20:	2206      	movs	r2, #6
 8009f22:	482c      	ldr	r0, [pc, #176]	; (8009fd4 <_vfiprintf_r+0x250>)
 8009f24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f28:	f000 fd50 	bl	800a9cc <memchr>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d03f      	beq.n	8009fb0 <_vfiprintf_r+0x22c>
 8009f30:	4b29      	ldr	r3, [pc, #164]	; (8009fd8 <_vfiprintf_r+0x254>)
 8009f32:	bb1b      	cbnz	r3, 8009f7c <_vfiprintf_r+0x1f8>
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	3307      	adds	r3, #7
 8009f38:	f023 0307 	bic.w	r3, r3, #7
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	9303      	str	r3, [sp, #12]
 8009f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f42:	443b      	add	r3, r7
 8009f44:	9309      	str	r3, [sp, #36]	; 0x24
 8009f46:	e767      	b.n	8009e18 <_vfiprintf_r+0x94>
 8009f48:	460c      	mov	r4, r1
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f50:	e7a5      	b.n	8009e9e <_vfiprintf_r+0x11a>
 8009f52:	2300      	movs	r3, #0
 8009f54:	f04f 0c0a 	mov.w	ip, #10
 8009f58:	4619      	mov	r1, r3
 8009f5a:	3401      	adds	r4, #1
 8009f5c:	9305      	str	r3, [sp, #20]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f64:	3a30      	subs	r2, #48	; 0x30
 8009f66:	2a09      	cmp	r2, #9
 8009f68:	d903      	bls.n	8009f72 <_vfiprintf_r+0x1ee>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d0c5      	beq.n	8009efa <_vfiprintf_r+0x176>
 8009f6e:	9105      	str	r1, [sp, #20]
 8009f70:	e7c3      	b.n	8009efa <_vfiprintf_r+0x176>
 8009f72:	4604      	mov	r4, r0
 8009f74:	2301      	movs	r3, #1
 8009f76:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f7a:	e7f0      	b.n	8009f5e <_vfiprintf_r+0x1da>
 8009f7c:	ab03      	add	r3, sp, #12
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	462a      	mov	r2, r5
 8009f82:	4630      	mov	r0, r6
 8009f84:	4b15      	ldr	r3, [pc, #84]	; (8009fdc <_vfiprintf_r+0x258>)
 8009f86:	a904      	add	r1, sp, #16
 8009f88:	f3af 8000 	nop.w
 8009f8c:	4607      	mov	r7, r0
 8009f8e:	1c78      	adds	r0, r7, #1
 8009f90:	d1d6      	bne.n	8009f40 <_vfiprintf_r+0x1bc>
 8009f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f94:	07d9      	lsls	r1, r3, #31
 8009f96:	d405      	bmi.n	8009fa4 <_vfiprintf_r+0x220>
 8009f98:	89ab      	ldrh	r3, [r5, #12]
 8009f9a:	059a      	lsls	r2, r3, #22
 8009f9c:	d402      	bmi.n	8009fa4 <_vfiprintf_r+0x220>
 8009f9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fa0:	f000 fcaf 	bl	800a902 <__retarget_lock_release_recursive>
 8009fa4:	89ab      	ldrh	r3, [r5, #12]
 8009fa6:	065b      	lsls	r3, r3, #25
 8009fa8:	f53f af12 	bmi.w	8009dd0 <_vfiprintf_r+0x4c>
 8009fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fae:	e711      	b.n	8009dd4 <_vfiprintf_r+0x50>
 8009fb0:	ab03      	add	r3, sp, #12
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	462a      	mov	r2, r5
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	4b08      	ldr	r3, [pc, #32]	; (8009fdc <_vfiprintf_r+0x258>)
 8009fba:	a904      	add	r1, sp, #16
 8009fbc:	f000 f882 	bl	800a0c4 <_printf_i>
 8009fc0:	e7e4      	b.n	8009f8c <_vfiprintf_r+0x208>
 8009fc2:	bf00      	nop
 8009fc4:	0800ca80 	.word	0x0800ca80
 8009fc8:	0800caa0 	.word	0x0800caa0
 8009fcc:	0800ca60 	.word	0x0800ca60
 8009fd0:	0800ca2c 	.word	0x0800ca2c
 8009fd4:	0800ca36 	.word	0x0800ca36
 8009fd8:	00000000 	.word	0x00000000
 8009fdc:	08009d5f 	.word	0x08009d5f
 8009fe0:	0800ca32 	.word	0x0800ca32

08009fe4 <_printf_common>:
 8009fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe8:	4616      	mov	r6, r2
 8009fea:	4699      	mov	r9, r3
 8009fec:	688a      	ldr	r2, [r1, #8]
 8009fee:	690b      	ldr	r3, [r1, #16]
 8009ff0:	4607      	mov	r7, r0
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	bfb8      	it	lt
 8009ff6:	4613      	movlt	r3, r2
 8009ff8:	6033      	str	r3, [r6, #0]
 8009ffa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ffe:	460c      	mov	r4, r1
 800a000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a004:	b10a      	cbz	r2, 800a00a <_printf_common+0x26>
 800a006:	3301      	adds	r3, #1
 800a008:	6033      	str	r3, [r6, #0]
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	0699      	lsls	r1, r3, #26
 800a00e:	bf42      	ittt	mi
 800a010:	6833      	ldrmi	r3, [r6, #0]
 800a012:	3302      	addmi	r3, #2
 800a014:	6033      	strmi	r3, [r6, #0]
 800a016:	6825      	ldr	r5, [r4, #0]
 800a018:	f015 0506 	ands.w	r5, r5, #6
 800a01c:	d106      	bne.n	800a02c <_printf_common+0x48>
 800a01e:	f104 0a19 	add.w	sl, r4, #25
 800a022:	68e3      	ldr	r3, [r4, #12]
 800a024:	6832      	ldr	r2, [r6, #0]
 800a026:	1a9b      	subs	r3, r3, r2
 800a028:	42ab      	cmp	r3, r5
 800a02a:	dc28      	bgt.n	800a07e <_printf_common+0x9a>
 800a02c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a030:	1e13      	subs	r3, r2, #0
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	bf18      	it	ne
 800a036:	2301      	movne	r3, #1
 800a038:	0692      	lsls	r2, r2, #26
 800a03a:	d42d      	bmi.n	800a098 <_printf_common+0xb4>
 800a03c:	4649      	mov	r1, r9
 800a03e:	4638      	mov	r0, r7
 800a040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a044:	47c0      	blx	r8
 800a046:	3001      	adds	r0, #1
 800a048:	d020      	beq.n	800a08c <_printf_common+0xa8>
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	68e5      	ldr	r5, [r4, #12]
 800a04e:	f003 0306 	and.w	r3, r3, #6
 800a052:	2b04      	cmp	r3, #4
 800a054:	bf18      	it	ne
 800a056:	2500      	movne	r5, #0
 800a058:	6832      	ldr	r2, [r6, #0]
 800a05a:	f04f 0600 	mov.w	r6, #0
 800a05e:	68a3      	ldr	r3, [r4, #8]
 800a060:	bf08      	it	eq
 800a062:	1aad      	subeq	r5, r5, r2
 800a064:	6922      	ldr	r2, [r4, #16]
 800a066:	bf08      	it	eq
 800a068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a06c:	4293      	cmp	r3, r2
 800a06e:	bfc4      	itt	gt
 800a070:	1a9b      	subgt	r3, r3, r2
 800a072:	18ed      	addgt	r5, r5, r3
 800a074:	341a      	adds	r4, #26
 800a076:	42b5      	cmp	r5, r6
 800a078:	d11a      	bne.n	800a0b0 <_printf_common+0xcc>
 800a07a:	2000      	movs	r0, #0
 800a07c:	e008      	b.n	800a090 <_printf_common+0xac>
 800a07e:	2301      	movs	r3, #1
 800a080:	4652      	mov	r2, sl
 800a082:	4649      	mov	r1, r9
 800a084:	4638      	mov	r0, r7
 800a086:	47c0      	blx	r8
 800a088:	3001      	adds	r0, #1
 800a08a:	d103      	bne.n	800a094 <_printf_common+0xb0>
 800a08c:	f04f 30ff 	mov.w	r0, #4294967295
 800a090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a094:	3501      	adds	r5, #1
 800a096:	e7c4      	b.n	800a022 <_printf_common+0x3e>
 800a098:	2030      	movs	r0, #48	; 0x30
 800a09a:	18e1      	adds	r1, r4, r3
 800a09c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0a6:	4422      	add	r2, r4
 800a0a8:	3302      	adds	r3, #2
 800a0aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0ae:	e7c5      	b.n	800a03c <_printf_common+0x58>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	47c0      	blx	r8
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	d0e6      	beq.n	800a08c <_printf_common+0xa8>
 800a0be:	3601      	adds	r6, #1
 800a0c0:	e7d9      	b.n	800a076 <_printf_common+0x92>
	...

0800a0c4 <_printf_i>:
 800a0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	7e27      	ldrb	r7, [r4, #24]
 800a0cc:	4691      	mov	r9, r2
 800a0ce:	2f78      	cmp	r7, #120	; 0x78
 800a0d0:	4680      	mov	r8, r0
 800a0d2:	469a      	mov	sl, r3
 800a0d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a0d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0da:	d807      	bhi.n	800a0ec <_printf_i+0x28>
 800a0dc:	2f62      	cmp	r7, #98	; 0x62
 800a0de:	d80a      	bhi.n	800a0f6 <_printf_i+0x32>
 800a0e0:	2f00      	cmp	r7, #0
 800a0e2:	f000 80d9 	beq.w	800a298 <_printf_i+0x1d4>
 800a0e6:	2f58      	cmp	r7, #88	; 0x58
 800a0e8:	f000 80a4 	beq.w	800a234 <_printf_i+0x170>
 800a0ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0f4:	e03a      	b.n	800a16c <_printf_i+0xa8>
 800a0f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0fa:	2b15      	cmp	r3, #21
 800a0fc:	d8f6      	bhi.n	800a0ec <_printf_i+0x28>
 800a0fe:	a001      	add	r0, pc, #4	; (adr r0, 800a104 <_printf_i+0x40>)
 800a100:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a104:	0800a15d 	.word	0x0800a15d
 800a108:	0800a171 	.word	0x0800a171
 800a10c:	0800a0ed 	.word	0x0800a0ed
 800a110:	0800a0ed 	.word	0x0800a0ed
 800a114:	0800a0ed 	.word	0x0800a0ed
 800a118:	0800a0ed 	.word	0x0800a0ed
 800a11c:	0800a171 	.word	0x0800a171
 800a120:	0800a0ed 	.word	0x0800a0ed
 800a124:	0800a0ed 	.word	0x0800a0ed
 800a128:	0800a0ed 	.word	0x0800a0ed
 800a12c:	0800a0ed 	.word	0x0800a0ed
 800a130:	0800a27f 	.word	0x0800a27f
 800a134:	0800a1a1 	.word	0x0800a1a1
 800a138:	0800a261 	.word	0x0800a261
 800a13c:	0800a0ed 	.word	0x0800a0ed
 800a140:	0800a0ed 	.word	0x0800a0ed
 800a144:	0800a2a1 	.word	0x0800a2a1
 800a148:	0800a0ed 	.word	0x0800a0ed
 800a14c:	0800a1a1 	.word	0x0800a1a1
 800a150:	0800a0ed 	.word	0x0800a0ed
 800a154:	0800a0ed 	.word	0x0800a0ed
 800a158:	0800a269 	.word	0x0800a269
 800a15c:	680b      	ldr	r3, [r1, #0]
 800a15e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a162:	1d1a      	adds	r2, r3, #4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	600a      	str	r2, [r1, #0]
 800a168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a16c:	2301      	movs	r3, #1
 800a16e:	e0a4      	b.n	800a2ba <_printf_i+0x1f6>
 800a170:	6825      	ldr	r5, [r4, #0]
 800a172:	6808      	ldr	r0, [r1, #0]
 800a174:	062e      	lsls	r6, r5, #24
 800a176:	f100 0304 	add.w	r3, r0, #4
 800a17a:	d50a      	bpl.n	800a192 <_printf_i+0xce>
 800a17c:	6805      	ldr	r5, [r0, #0]
 800a17e:	600b      	str	r3, [r1, #0]
 800a180:	2d00      	cmp	r5, #0
 800a182:	da03      	bge.n	800a18c <_printf_i+0xc8>
 800a184:	232d      	movs	r3, #45	; 0x2d
 800a186:	426d      	negs	r5, r5
 800a188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a18c:	230a      	movs	r3, #10
 800a18e:	485e      	ldr	r0, [pc, #376]	; (800a308 <_printf_i+0x244>)
 800a190:	e019      	b.n	800a1c6 <_printf_i+0x102>
 800a192:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a196:	6805      	ldr	r5, [r0, #0]
 800a198:	600b      	str	r3, [r1, #0]
 800a19a:	bf18      	it	ne
 800a19c:	b22d      	sxthne	r5, r5
 800a19e:	e7ef      	b.n	800a180 <_printf_i+0xbc>
 800a1a0:	680b      	ldr	r3, [r1, #0]
 800a1a2:	6825      	ldr	r5, [r4, #0]
 800a1a4:	1d18      	adds	r0, r3, #4
 800a1a6:	6008      	str	r0, [r1, #0]
 800a1a8:	0628      	lsls	r0, r5, #24
 800a1aa:	d501      	bpl.n	800a1b0 <_printf_i+0xec>
 800a1ac:	681d      	ldr	r5, [r3, #0]
 800a1ae:	e002      	b.n	800a1b6 <_printf_i+0xf2>
 800a1b0:	0669      	lsls	r1, r5, #25
 800a1b2:	d5fb      	bpl.n	800a1ac <_printf_i+0xe8>
 800a1b4:	881d      	ldrh	r5, [r3, #0]
 800a1b6:	2f6f      	cmp	r7, #111	; 0x6f
 800a1b8:	bf0c      	ite	eq
 800a1ba:	2308      	moveq	r3, #8
 800a1bc:	230a      	movne	r3, #10
 800a1be:	4852      	ldr	r0, [pc, #328]	; (800a308 <_printf_i+0x244>)
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1c6:	6866      	ldr	r6, [r4, #4]
 800a1c8:	2e00      	cmp	r6, #0
 800a1ca:	bfa8      	it	ge
 800a1cc:	6821      	ldrge	r1, [r4, #0]
 800a1ce:	60a6      	str	r6, [r4, #8]
 800a1d0:	bfa4      	itt	ge
 800a1d2:	f021 0104 	bicge.w	r1, r1, #4
 800a1d6:	6021      	strge	r1, [r4, #0]
 800a1d8:	b90d      	cbnz	r5, 800a1de <_printf_i+0x11a>
 800a1da:	2e00      	cmp	r6, #0
 800a1dc:	d04d      	beq.n	800a27a <_printf_i+0x1b6>
 800a1de:	4616      	mov	r6, r2
 800a1e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1e4:	fb03 5711 	mls	r7, r3, r1, r5
 800a1e8:	5dc7      	ldrb	r7, [r0, r7]
 800a1ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1ee:	462f      	mov	r7, r5
 800a1f0:	42bb      	cmp	r3, r7
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	d9f4      	bls.n	800a1e0 <_printf_i+0x11c>
 800a1f6:	2b08      	cmp	r3, #8
 800a1f8:	d10b      	bne.n	800a212 <_printf_i+0x14e>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	07df      	lsls	r7, r3, #31
 800a1fe:	d508      	bpl.n	800a212 <_printf_i+0x14e>
 800a200:	6923      	ldr	r3, [r4, #16]
 800a202:	6861      	ldr	r1, [r4, #4]
 800a204:	4299      	cmp	r1, r3
 800a206:	bfde      	ittt	le
 800a208:	2330      	movle	r3, #48	; 0x30
 800a20a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a20e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a212:	1b92      	subs	r2, r2, r6
 800a214:	6122      	str	r2, [r4, #16]
 800a216:	464b      	mov	r3, r9
 800a218:	4621      	mov	r1, r4
 800a21a:	4640      	mov	r0, r8
 800a21c:	f8cd a000 	str.w	sl, [sp]
 800a220:	aa03      	add	r2, sp, #12
 800a222:	f7ff fedf 	bl	8009fe4 <_printf_common>
 800a226:	3001      	adds	r0, #1
 800a228:	d14c      	bne.n	800a2c4 <_printf_i+0x200>
 800a22a:	f04f 30ff 	mov.w	r0, #4294967295
 800a22e:	b004      	add	sp, #16
 800a230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a234:	4834      	ldr	r0, [pc, #208]	; (800a308 <_printf_i+0x244>)
 800a236:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a23a:	680e      	ldr	r6, [r1, #0]
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a242:	061f      	lsls	r7, r3, #24
 800a244:	600e      	str	r6, [r1, #0]
 800a246:	d514      	bpl.n	800a272 <_printf_i+0x1ae>
 800a248:	07d9      	lsls	r1, r3, #31
 800a24a:	bf44      	itt	mi
 800a24c:	f043 0320 	orrmi.w	r3, r3, #32
 800a250:	6023      	strmi	r3, [r4, #0]
 800a252:	b91d      	cbnz	r5, 800a25c <_printf_i+0x198>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	f023 0320 	bic.w	r3, r3, #32
 800a25a:	6023      	str	r3, [r4, #0]
 800a25c:	2310      	movs	r3, #16
 800a25e:	e7af      	b.n	800a1c0 <_printf_i+0xfc>
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	f043 0320 	orr.w	r3, r3, #32
 800a266:	6023      	str	r3, [r4, #0]
 800a268:	2378      	movs	r3, #120	; 0x78
 800a26a:	4828      	ldr	r0, [pc, #160]	; (800a30c <_printf_i+0x248>)
 800a26c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a270:	e7e3      	b.n	800a23a <_printf_i+0x176>
 800a272:	065e      	lsls	r6, r3, #25
 800a274:	bf48      	it	mi
 800a276:	b2ad      	uxthmi	r5, r5
 800a278:	e7e6      	b.n	800a248 <_printf_i+0x184>
 800a27a:	4616      	mov	r6, r2
 800a27c:	e7bb      	b.n	800a1f6 <_printf_i+0x132>
 800a27e:	680b      	ldr	r3, [r1, #0]
 800a280:	6826      	ldr	r6, [r4, #0]
 800a282:	1d1d      	adds	r5, r3, #4
 800a284:	6960      	ldr	r0, [r4, #20]
 800a286:	600d      	str	r5, [r1, #0]
 800a288:	0635      	lsls	r5, r6, #24
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	d501      	bpl.n	800a292 <_printf_i+0x1ce>
 800a28e:	6018      	str	r0, [r3, #0]
 800a290:	e002      	b.n	800a298 <_printf_i+0x1d4>
 800a292:	0671      	lsls	r1, r6, #25
 800a294:	d5fb      	bpl.n	800a28e <_printf_i+0x1ca>
 800a296:	8018      	strh	r0, [r3, #0]
 800a298:	2300      	movs	r3, #0
 800a29a:	4616      	mov	r6, r2
 800a29c:	6123      	str	r3, [r4, #16]
 800a29e:	e7ba      	b.n	800a216 <_printf_i+0x152>
 800a2a0:	680b      	ldr	r3, [r1, #0]
 800a2a2:	1d1a      	adds	r2, r3, #4
 800a2a4:	600a      	str	r2, [r1, #0]
 800a2a6:	681e      	ldr	r6, [r3, #0]
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	6862      	ldr	r2, [r4, #4]
 800a2ae:	f000 fb8d 	bl	800a9cc <memchr>
 800a2b2:	b108      	cbz	r0, 800a2b8 <_printf_i+0x1f4>
 800a2b4:	1b80      	subs	r0, r0, r6
 800a2b6:	6060      	str	r0, [r4, #4]
 800a2b8:	6863      	ldr	r3, [r4, #4]
 800a2ba:	6123      	str	r3, [r4, #16]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2c2:	e7a8      	b.n	800a216 <_printf_i+0x152>
 800a2c4:	4632      	mov	r2, r6
 800a2c6:	4649      	mov	r1, r9
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	6923      	ldr	r3, [r4, #16]
 800a2cc:	47d0      	blx	sl
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d0ab      	beq.n	800a22a <_printf_i+0x166>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	079b      	lsls	r3, r3, #30
 800a2d6:	d413      	bmi.n	800a300 <_printf_i+0x23c>
 800a2d8:	68e0      	ldr	r0, [r4, #12]
 800a2da:	9b03      	ldr	r3, [sp, #12]
 800a2dc:	4298      	cmp	r0, r3
 800a2de:	bfb8      	it	lt
 800a2e0:	4618      	movlt	r0, r3
 800a2e2:	e7a4      	b.n	800a22e <_printf_i+0x16a>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	4632      	mov	r2, r6
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	4640      	mov	r0, r8
 800a2ec:	47d0      	blx	sl
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d09b      	beq.n	800a22a <_printf_i+0x166>
 800a2f2:	3501      	adds	r5, #1
 800a2f4:	68e3      	ldr	r3, [r4, #12]
 800a2f6:	9903      	ldr	r1, [sp, #12]
 800a2f8:	1a5b      	subs	r3, r3, r1
 800a2fa:	42ab      	cmp	r3, r5
 800a2fc:	dcf2      	bgt.n	800a2e4 <_printf_i+0x220>
 800a2fe:	e7eb      	b.n	800a2d8 <_printf_i+0x214>
 800a300:	2500      	movs	r5, #0
 800a302:	f104 0619 	add.w	r6, r4, #25
 800a306:	e7f5      	b.n	800a2f4 <_printf_i+0x230>
 800a308:	0800ca3d 	.word	0x0800ca3d
 800a30c:	0800ca4e 	.word	0x0800ca4e

0800a310 <_sbrk_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	2300      	movs	r3, #0
 800a314:	4d05      	ldr	r5, [pc, #20]	; (800a32c <_sbrk_r+0x1c>)
 800a316:	4604      	mov	r4, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	602b      	str	r3, [r5, #0]
 800a31c:	f7fd fadc 	bl	80078d8 <_sbrk>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	d102      	bne.n	800a32a <_sbrk_r+0x1a>
 800a324:	682b      	ldr	r3, [r5, #0]
 800a326:	b103      	cbz	r3, 800a32a <_sbrk_r+0x1a>
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	2000031c 	.word	0x2000031c

0800a330 <strchr>:
 800a330:	4603      	mov	r3, r0
 800a332:	b2c9      	uxtb	r1, r1
 800a334:	4618      	mov	r0, r3
 800a336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a33a:	b112      	cbz	r2, 800a342 <strchr+0x12>
 800a33c:	428a      	cmp	r2, r1
 800a33e:	d1f9      	bne.n	800a334 <strchr+0x4>
 800a340:	4770      	bx	lr
 800a342:	2900      	cmp	r1, #0
 800a344:	bf18      	it	ne
 800a346:	2000      	movne	r0, #0
 800a348:	4770      	bx	lr

0800a34a <strcspn>:
 800a34a:	4603      	mov	r3, r0
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	461e      	mov	r6, r3
 800a350:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a354:	b144      	cbz	r4, 800a368 <strcspn+0x1e>
 800a356:	1e4a      	subs	r2, r1, #1
 800a358:	e001      	b.n	800a35e <strcspn+0x14>
 800a35a:	42a5      	cmp	r5, r4
 800a35c:	d004      	beq.n	800a368 <strcspn+0x1e>
 800a35e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a362:	2d00      	cmp	r5, #0
 800a364:	d1f9      	bne.n	800a35a <strcspn+0x10>
 800a366:	e7f2      	b.n	800a34e <strcspn+0x4>
 800a368:	1a30      	subs	r0, r6, r0
 800a36a:	bd70      	pop	{r4, r5, r6, pc}

0800a36c <strspn>:
 800a36c:	4603      	mov	r3, r0
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	461e      	mov	r6, r3
 800a372:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a376:	b13c      	cbz	r4, 800a388 <strspn+0x1c>
 800a378:	1e4a      	subs	r2, r1, #1
 800a37a:	e001      	b.n	800a380 <strspn+0x14>
 800a37c:	42a5      	cmp	r5, r4
 800a37e:	d0f7      	beq.n	800a370 <strspn+0x4>
 800a380:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a384:	2d00      	cmp	r5, #0
 800a386:	d1f9      	bne.n	800a37c <strspn+0x10>
 800a388:	1a30      	subs	r0, r6, r0
 800a38a:	bd70      	pop	{r4, r5, r6, pc}

0800a38c <_vsniprintf_r>:
 800a38c:	b530      	push	{r4, r5, lr}
 800a38e:	1e14      	subs	r4, r2, #0
 800a390:	4605      	mov	r5, r0
 800a392:	b09b      	sub	sp, #108	; 0x6c
 800a394:	4618      	mov	r0, r3
 800a396:	da05      	bge.n	800a3a4 <_vsniprintf_r+0x18>
 800a398:	238b      	movs	r3, #139	; 0x8b
 800a39a:	f04f 30ff 	mov.w	r0, #4294967295
 800a39e:	602b      	str	r3, [r5, #0]
 800a3a0:	b01b      	add	sp, #108	; 0x6c
 800a3a2:	bd30      	pop	{r4, r5, pc}
 800a3a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a3a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a3ac:	bf0c      	ite	eq
 800a3ae:	4623      	moveq	r3, r4
 800a3b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a3b4:	9302      	str	r3, [sp, #8]
 800a3b6:	9305      	str	r3, [sp, #20]
 800a3b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3bc:	4602      	mov	r2, r0
 800a3be:	9100      	str	r1, [sp, #0]
 800a3c0:	9104      	str	r1, [sp, #16]
 800a3c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a3c6:	4669      	mov	r1, sp
 800a3c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 fbb4 	bl	800ab38 <_svfiprintf_r>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	bfbc      	itt	lt
 800a3d4:	238b      	movlt	r3, #139	; 0x8b
 800a3d6:	602b      	strlt	r3, [r5, #0]
 800a3d8:	2c00      	cmp	r4, #0
 800a3da:	d0e1      	beq.n	800a3a0 <_vsniprintf_r+0x14>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	9b00      	ldr	r3, [sp, #0]
 800a3e0:	701a      	strb	r2, [r3, #0]
 800a3e2:	e7dd      	b.n	800a3a0 <_vsniprintf_r+0x14>

0800a3e4 <vsniprintf>:
 800a3e4:	b507      	push	{r0, r1, r2, lr}
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	460a      	mov	r2, r1
 800a3ec:	4601      	mov	r1, r0
 800a3ee:	4803      	ldr	r0, [pc, #12]	; (800a3fc <vsniprintf+0x18>)
 800a3f0:	6800      	ldr	r0, [r0, #0]
 800a3f2:	f7ff ffcb 	bl	800a38c <_vsniprintf_r>
 800a3f6:	b003      	add	sp, #12
 800a3f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3fc:	2000000c 	.word	0x2000000c

0800a400 <__swbuf_r>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	460e      	mov	r6, r1
 800a404:	4614      	mov	r4, r2
 800a406:	4605      	mov	r5, r0
 800a408:	b118      	cbz	r0, 800a412 <__swbuf_r+0x12>
 800a40a:	6983      	ldr	r3, [r0, #24]
 800a40c:	b90b      	cbnz	r3, 800a412 <__swbuf_r+0x12>
 800a40e:	f000 f9d9 	bl	800a7c4 <__sinit>
 800a412:	4b21      	ldr	r3, [pc, #132]	; (800a498 <__swbuf_r+0x98>)
 800a414:	429c      	cmp	r4, r3
 800a416:	d12b      	bne.n	800a470 <__swbuf_r+0x70>
 800a418:	686c      	ldr	r4, [r5, #4]
 800a41a:	69a3      	ldr	r3, [r4, #24]
 800a41c:	60a3      	str	r3, [r4, #8]
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	071a      	lsls	r2, r3, #28
 800a422:	d52f      	bpl.n	800a484 <__swbuf_r+0x84>
 800a424:	6923      	ldr	r3, [r4, #16]
 800a426:	b36b      	cbz	r3, 800a484 <__swbuf_r+0x84>
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	6820      	ldr	r0, [r4, #0]
 800a42c:	b2f6      	uxtb	r6, r6
 800a42e:	1ac0      	subs	r0, r0, r3
 800a430:	6963      	ldr	r3, [r4, #20]
 800a432:	4637      	mov	r7, r6
 800a434:	4283      	cmp	r3, r0
 800a436:	dc04      	bgt.n	800a442 <__swbuf_r+0x42>
 800a438:	4621      	mov	r1, r4
 800a43a:	4628      	mov	r0, r5
 800a43c:	f000 f92e 	bl	800a69c <_fflush_r>
 800a440:	bb30      	cbnz	r0, 800a490 <__swbuf_r+0x90>
 800a442:	68a3      	ldr	r3, [r4, #8]
 800a444:	3001      	adds	r0, #1
 800a446:	3b01      	subs	r3, #1
 800a448:	60a3      	str	r3, [r4, #8]
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	6022      	str	r2, [r4, #0]
 800a450:	701e      	strb	r6, [r3, #0]
 800a452:	6963      	ldr	r3, [r4, #20]
 800a454:	4283      	cmp	r3, r0
 800a456:	d004      	beq.n	800a462 <__swbuf_r+0x62>
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	07db      	lsls	r3, r3, #31
 800a45c:	d506      	bpl.n	800a46c <__swbuf_r+0x6c>
 800a45e:	2e0a      	cmp	r6, #10
 800a460:	d104      	bne.n	800a46c <__swbuf_r+0x6c>
 800a462:	4621      	mov	r1, r4
 800a464:	4628      	mov	r0, r5
 800a466:	f000 f919 	bl	800a69c <_fflush_r>
 800a46a:	b988      	cbnz	r0, 800a490 <__swbuf_r+0x90>
 800a46c:	4638      	mov	r0, r7
 800a46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a470:	4b0a      	ldr	r3, [pc, #40]	; (800a49c <__swbuf_r+0x9c>)
 800a472:	429c      	cmp	r4, r3
 800a474:	d101      	bne.n	800a47a <__swbuf_r+0x7a>
 800a476:	68ac      	ldr	r4, [r5, #8]
 800a478:	e7cf      	b.n	800a41a <__swbuf_r+0x1a>
 800a47a:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <__swbuf_r+0xa0>)
 800a47c:	429c      	cmp	r4, r3
 800a47e:	bf08      	it	eq
 800a480:	68ec      	ldreq	r4, [r5, #12]
 800a482:	e7ca      	b.n	800a41a <__swbuf_r+0x1a>
 800a484:	4621      	mov	r1, r4
 800a486:	4628      	mov	r0, r5
 800a488:	f000 f80c 	bl	800a4a4 <__swsetup_r>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d0cb      	beq.n	800a428 <__swbuf_r+0x28>
 800a490:	f04f 37ff 	mov.w	r7, #4294967295
 800a494:	e7ea      	b.n	800a46c <__swbuf_r+0x6c>
 800a496:	bf00      	nop
 800a498:	0800ca80 	.word	0x0800ca80
 800a49c:	0800caa0 	.word	0x0800caa0
 800a4a0:	0800ca60 	.word	0x0800ca60

0800a4a4 <__swsetup_r>:
 800a4a4:	4b32      	ldr	r3, [pc, #200]	; (800a570 <__swsetup_r+0xcc>)
 800a4a6:	b570      	push	{r4, r5, r6, lr}
 800a4a8:	681d      	ldr	r5, [r3, #0]
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	b125      	cbz	r5, 800a4ba <__swsetup_r+0x16>
 800a4b0:	69ab      	ldr	r3, [r5, #24]
 800a4b2:	b913      	cbnz	r3, 800a4ba <__swsetup_r+0x16>
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f000 f985 	bl	800a7c4 <__sinit>
 800a4ba:	4b2e      	ldr	r3, [pc, #184]	; (800a574 <__swsetup_r+0xd0>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	d10f      	bne.n	800a4e0 <__swsetup_r+0x3c>
 800a4c0:	686c      	ldr	r4, [r5, #4]
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4c8:	0719      	lsls	r1, r3, #28
 800a4ca:	d42c      	bmi.n	800a526 <__swsetup_r+0x82>
 800a4cc:	06dd      	lsls	r5, r3, #27
 800a4ce:	d411      	bmi.n	800a4f4 <__swsetup_r+0x50>
 800a4d0:	2309      	movs	r3, #9
 800a4d2:	6033      	str	r3, [r6, #0]
 800a4d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	e03e      	b.n	800a55e <__swsetup_r+0xba>
 800a4e0:	4b25      	ldr	r3, [pc, #148]	; (800a578 <__swsetup_r+0xd4>)
 800a4e2:	429c      	cmp	r4, r3
 800a4e4:	d101      	bne.n	800a4ea <__swsetup_r+0x46>
 800a4e6:	68ac      	ldr	r4, [r5, #8]
 800a4e8:	e7eb      	b.n	800a4c2 <__swsetup_r+0x1e>
 800a4ea:	4b24      	ldr	r3, [pc, #144]	; (800a57c <__swsetup_r+0xd8>)
 800a4ec:	429c      	cmp	r4, r3
 800a4ee:	bf08      	it	eq
 800a4f0:	68ec      	ldreq	r4, [r5, #12]
 800a4f2:	e7e6      	b.n	800a4c2 <__swsetup_r+0x1e>
 800a4f4:	0758      	lsls	r0, r3, #29
 800a4f6:	d512      	bpl.n	800a51e <__swsetup_r+0x7a>
 800a4f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4fa:	b141      	cbz	r1, 800a50e <__swsetup_r+0x6a>
 800a4fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a500:	4299      	cmp	r1, r3
 800a502:	d002      	beq.n	800a50a <__swsetup_r+0x66>
 800a504:	4630      	mov	r0, r6
 800a506:	f7ff fb6f 	bl	8009be8 <_free_r>
 800a50a:	2300      	movs	r3, #0
 800a50c:	6363      	str	r3, [r4, #52]	; 0x34
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	2300      	movs	r3, #0
 800a518:	6063      	str	r3, [r4, #4]
 800a51a:	6923      	ldr	r3, [r4, #16]
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	89a3      	ldrh	r3, [r4, #12]
 800a520:	f043 0308 	orr.w	r3, r3, #8
 800a524:	81a3      	strh	r3, [r4, #12]
 800a526:	6923      	ldr	r3, [r4, #16]
 800a528:	b94b      	cbnz	r3, 800a53e <__swsetup_r+0x9a>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a534:	d003      	beq.n	800a53e <__swsetup_r+0x9a>
 800a536:	4621      	mov	r1, r4
 800a538:	4630      	mov	r0, r6
 800a53a:	f000 fa07 	bl	800a94c <__smakebuf_r>
 800a53e:	89a0      	ldrh	r0, [r4, #12]
 800a540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a544:	f010 0301 	ands.w	r3, r0, #1
 800a548:	d00a      	beq.n	800a560 <__swsetup_r+0xbc>
 800a54a:	2300      	movs	r3, #0
 800a54c:	60a3      	str	r3, [r4, #8]
 800a54e:	6963      	ldr	r3, [r4, #20]
 800a550:	425b      	negs	r3, r3
 800a552:	61a3      	str	r3, [r4, #24]
 800a554:	6923      	ldr	r3, [r4, #16]
 800a556:	b943      	cbnz	r3, 800a56a <__swsetup_r+0xc6>
 800a558:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a55c:	d1ba      	bne.n	800a4d4 <__swsetup_r+0x30>
 800a55e:	bd70      	pop	{r4, r5, r6, pc}
 800a560:	0781      	lsls	r1, r0, #30
 800a562:	bf58      	it	pl
 800a564:	6963      	ldrpl	r3, [r4, #20]
 800a566:	60a3      	str	r3, [r4, #8]
 800a568:	e7f4      	b.n	800a554 <__swsetup_r+0xb0>
 800a56a:	2000      	movs	r0, #0
 800a56c:	e7f7      	b.n	800a55e <__swsetup_r+0xba>
 800a56e:	bf00      	nop
 800a570:	2000000c 	.word	0x2000000c
 800a574:	0800ca80 	.word	0x0800ca80
 800a578:	0800caa0 	.word	0x0800caa0
 800a57c:	0800ca60 	.word	0x0800ca60

0800a580 <abort>:
 800a580:	2006      	movs	r0, #6
 800a582:	b508      	push	{r3, lr}
 800a584:	f000 fc00 	bl	800ad88 <raise>
 800a588:	2001      	movs	r0, #1
 800a58a:	f7fd f932 	bl	80077f2 <_exit>
	...

0800a590 <__sflush_r>:
 800a590:	898a      	ldrh	r2, [r1, #12]
 800a592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a596:	4605      	mov	r5, r0
 800a598:	0710      	lsls	r0, r2, #28
 800a59a:	460c      	mov	r4, r1
 800a59c:	d458      	bmi.n	800a650 <__sflush_r+0xc0>
 800a59e:	684b      	ldr	r3, [r1, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	dc05      	bgt.n	800a5b0 <__sflush_r+0x20>
 800a5a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	dc02      	bgt.n	800a5b0 <__sflush_r+0x20>
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5b2:	2e00      	cmp	r6, #0
 800a5b4:	d0f9      	beq.n	800a5aa <__sflush_r+0x1a>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5bc:	682f      	ldr	r7, [r5, #0]
 800a5be:	602b      	str	r3, [r5, #0]
 800a5c0:	d032      	beq.n	800a628 <__sflush_r+0x98>
 800a5c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	075a      	lsls	r2, r3, #29
 800a5c8:	d505      	bpl.n	800a5d6 <__sflush_r+0x46>
 800a5ca:	6863      	ldr	r3, [r4, #4]
 800a5cc:	1ac0      	subs	r0, r0, r3
 800a5ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5d0:	b10b      	cbz	r3, 800a5d6 <__sflush_r+0x46>
 800a5d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5d4:	1ac0      	subs	r0, r0, r3
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	4602      	mov	r2, r0
 800a5da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5dc:	4628      	mov	r0, r5
 800a5de:	6a21      	ldr	r1, [r4, #32]
 800a5e0:	47b0      	blx	r6
 800a5e2:	1c43      	adds	r3, r0, #1
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	d106      	bne.n	800a5f6 <__sflush_r+0x66>
 800a5e8:	6829      	ldr	r1, [r5, #0]
 800a5ea:	291d      	cmp	r1, #29
 800a5ec:	d82c      	bhi.n	800a648 <__sflush_r+0xb8>
 800a5ee:	4a2a      	ldr	r2, [pc, #168]	; (800a698 <__sflush_r+0x108>)
 800a5f0:	40ca      	lsrs	r2, r1
 800a5f2:	07d6      	lsls	r6, r2, #31
 800a5f4:	d528      	bpl.n	800a648 <__sflush_r+0xb8>
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	6062      	str	r2, [r4, #4]
 800a5fa:	6922      	ldr	r2, [r4, #16]
 800a5fc:	04d9      	lsls	r1, r3, #19
 800a5fe:	6022      	str	r2, [r4, #0]
 800a600:	d504      	bpl.n	800a60c <__sflush_r+0x7c>
 800a602:	1c42      	adds	r2, r0, #1
 800a604:	d101      	bne.n	800a60a <__sflush_r+0x7a>
 800a606:	682b      	ldr	r3, [r5, #0]
 800a608:	b903      	cbnz	r3, 800a60c <__sflush_r+0x7c>
 800a60a:	6560      	str	r0, [r4, #84]	; 0x54
 800a60c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a60e:	602f      	str	r7, [r5, #0]
 800a610:	2900      	cmp	r1, #0
 800a612:	d0ca      	beq.n	800a5aa <__sflush_r+0x1a>
 800a614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a618:	4299      	cmp	r1, r3
 800a61a:	d002      	beq.n	800a622 <__sflush_r+0x92>
 800a61c:	4628      	mov	r0, r5
 800a61e:	f7ff fae3 	bl	8009be8 <_free_r>
 800a622:	2000      	movs	r0, #0
 800a624:	6360      	str	r0, [r4, #52]	; 0x34
 800a626:	e7c1      	b.n	800a5ac <__sflush_r+0x1c>
 800a628:	6a21      	ldr	r1, [r4, #32]
 800a62a:	2301      	movs	r3, #1
 800a62c:	4628      	mov	r0, r5
 800a62e:	47b0      	blx	r6
 800a630:	1c41      	adds	r1, r0, #1
 800a632:	d1c7      	bne.n	800a5c4 <__sflush_r+0x34>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0c4      	beq.n	800a5c4 <__sflush_r+0x34>
 800a63a:	2b1d      	cmp	r3, #29
 800a63c:	d001      	beq.n	800a642 <__sflush_r+0xb2>
 800a63e:	2b16      	cmp	r3, #22
 800a640:	d101      	bne.n	800a646 <__sflush_r+0xb6>
 800a642:	602f      	str	r7, [r5, #0]
 800a644:	e7b1      	b.n	800a5aa <__sflush_r+0x1a>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	e7ad      	b.n	800a5ac <__sflush_r+0x1c>
 800a650:	690f      	ldr	r7, [r1, #16]
 800a652:	2f00      	cmp	r7, #0
 800a654:	d0a9      	beq.n	800a5aa <__sflush_r+0x1a>
 800a656:	0793      	lsls	r3, r2, #30
 800a658:	bf18      	it	ne
 800a65a:	2300      	movne	r3, #0
 800a65c:	680e      	ldr	r6, [r1, #0]
 800a65e:	bf08      	it	eq
 800a660:	694b      	ldreq	r3, [r1, #20]
 800a662:	eba6 0807 	sub.w	r8, r6, r7
 800a666:	600f      	str	r7, [r1, #0]
 800a668:	608b      	str	r3, [r1, #8]
 800a66a:	f1b8 0f00 	cmp.w	r8, #0
 800a66e:	dd9c      	ble.n	800a5aa <__sflush_r+0x1a>
 800a670:	4643      	mov	r3, r8
 800a672:	463a      	mov	r2, r7
 800a674:	4628      	mov	r0, r5
 800a676:	6a21      	ldr	r1, [r4, #32]
 800a678:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a67a:	47b0      	blx	r6
 800a67c:	2800      	cmp	r0, #0
 800a67e:	dc06      	bgt.n	800a68e <__sflush_r+0xfe>
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	f04f 30ff 	mov.w	r0, #4294967295
 800a686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	e78e      	b.n	800a5ac <__sflush_r+0x1c>
 800a68e:	4407      	add	r7, r0
 800a690:	eba8 0800 	sub.w	r8, r8, r0
 800a694:	e7e9      	b.n	800a66a <__sflush_r+0xda>
 800a696:	bf00      	nop
 800a698:	20400001 	.word	0x20400001

0800a69c <_fflush_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	690b      	ldr	r3, [r1, #16]
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	b913      	cbnz	r3, 800a6ac <_fflush_r+0x10>
 800a6a6:	2500      	movs	r5, #0
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	b118      	cbz	r0, 800a6b6 <_fflush_r+0x1a>
 800a6ae:	6983      	ldr	r3, [r0, #24]
 800a6b0:	b90b      	cbnz	r3, 800a6b6 <_fflush_r+0x1a>
 800a6b2:	f000 f887 	bl	800a7c4 <__sinit>
 800a6b6:	4b14      	ldr	r3, [pc, #80]	; (800a708 <_fflush_r+0x6c>)
 800a6b8:	429c      	cmp	r4, r3
 800a6ba:	d11b      	bne.n	800a6f4 <_fflush_r+0x58>
 800a6bc:	686c      	ldr	r4, [r5, #4]
 800a6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0ef      	beq.n	800a6a6 <_fflush_r+0xa>
 800a6c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6c8:	07d0      	lsls	r0, r2, #31
 800a6ca:	d404      	bmi.n	800a6d6 <_fflush_r+0x3a>
 800a6cc:	0599      	lsls	r1, r3, #22
 800a6ce:	d402      	bmi.n	800a6d6 <_fflush_r+0x3a>
 800a6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6d2:	f000 f915 	bl	800a900 <__retarget_lock_acquire_recursive>
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	4621      	mov	r1, r4
 800a6da:	f7ff ff59 	bl	800a590 <__sflush_r>
 800a6de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	07da      	lsls	r2, r3, #31
 800a6e4:	d4e0      	bmi.n	800a6a8 <_fflush_r+0xc>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	059b      	lsls	r3, r3, #22
 800a6ea:	d4dd      	bmi.n	800a6a8 <_fflush_r+0xc>
 800a6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ee:	f000 f908 	bl	800a902 <__retarget_lock_release_recursive>
 800a6f2:	e7d9      	b.n	800a6a8 <_fflush_r+0xc>
 800a6f4:	4b05      	ldr	r3, [pc, #20]	; (800a70c <_fflush_r+0x70>)
 800a6f6:	429c      	cmp	r4, r3
 800a6f8:	d101      	bne.n	800a6fe <_fflush_r+0x62>
 800a6fa:	68ac      	ldr	r4, [r5, #8]
 800a6fc:	e7df      	b.n	800a6be <_fflush_r+0x22>
 800a6fe:	4b04      	ldr	r3, [pc, #16]	; (800a710 <_fflush_r+0x74>)
 800a700:	429c      	cmp	r4, r3
 800a702:	bf08      	it	eq
 800a704:	68ec      	ldreq	r4, [r5, #12]
 800a706:	e7da      	b.n	800a6be <_fflush_r+0x22>
 800a708:	0800ca80 	.word	0x0800ca80
 800a70c:	0800caa0 	.word	0x0800caa0
 800a710:	0800ca60 	.word	0x0800ca60

0800a714 <std>:
 800a714:	2300      	movs	r3, #0
 800a716:	b510      	push	{r4, lr}
 800a718:	4604      	mov	r4, r0
 800a71a:	e9c0 3300 	strd	r3, r3, [r0]
 800a71e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a722:	6083      	str	r3, [r0, #8]
 800a724:	8181      	strh	r1, [r0, #12]
 800a726:	6643      	str	r3, [r0, #100]	; 0x64
 800a728:	81c2      	strh	r2, [r0, #14]
 800a72a:	6183      	str	r3, [r0, #24]
 800a72c:	4619      	mov	r1, r3
 800a72e:	2208      	movs	r2, #8
 800a730:	305c      	adds	r0, #92	; 0x5c
 800a732:	f7ff fa51 	bl	8009bd8 <memset>
 800a736:	4b05      	ldr	r3, [pc, #20]	; (800a74c <std+0x38>)
 800a738:	6224      	str	r4, [r4, #32]
 800a73a:	6263      	str	r3, [r4, #36]	; 0x24
 800a73c:	4b04      	ldr	r3, [pc, #16]	; (800a750 <std+0x3c>)
 800a73e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a740:	4b04      	ldr	r3, [pc, #16]	; (800a754 <std+0x40>)
 800a742:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a744:	4b04      	ldr	r3, [pc, #16]	; (800a758 <std+0x44>)
 800a746:	6323      	str	r3, [r4, #48]	; 0x30
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	bf00      	nop
 800a74c:	0800adc1 	.word	0x0800adc1
 800a750:	0800ade3 	.word	0x0800ade3
 800a754:	0800ae1b 	.word	0x0800ae1b
 800a758:	0800ae3f 	.word	0x0800ae3f

0800a75c <_cleanup_r>:
 800a75c:	4901      	ldr	r1, [pc, #4]	; (800a764 <_cleanup_r+0x8>)
 800a75e:	f000 b8af 	b.w	800a8c0 <_fwalk_reent>
 800a762:	bf00      	nop
 800a764:	0800a69d 	.word	0x0800a69d

0800a768 <__sfmoreglue>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	2568      	movs	r5, #104	; 0x68
 800a76c:	1e4a      	subs	r2, r1, #1
 800a76e:	4355      	muls	r5, r2
 800a770:	460e      	mov	r6, r1
 800a772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a776:	f7ff fa83 	bl	8009c80 <_malloc_r>
 800a77a:	4604      	mov	r4, r0
 800a77c:	b140      	cbz	r0, 800a790 <__sfmoreglue+0x28>
 800a77e:	2100      	movs	r1, #0
 800a780:	e9c0 1600 	strd	r1, r6, [r0]
 800a784:	300c      	adds	r0, #12
 800a786:	60a0      	str	r0, [r4, #8]
 800a788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a78c:	f7ff fa24 	bl	8009bd8 <memset>
 800a790:	4620      	mov	r0, r4
 800a792:	bd70      	pop	{r4, r5, r6, pc}

0800a794 <__sfp_lock_acquire>:
 800a794:	4801      	ldr	r0, [pc, #4]	; (800a79c <__sfp_lock_acquire+0x8>)
 800a796:	f000 b8b3 	b.w	800a900 <__retarget_lock_acquire_recursive>
 800a79a:	bf00      	nop
 800a79c:	20000318 	.word	0x20000318

0800a7a0 <__sfp_lock_release>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	; (800a7a8 <__sfp_lock_release+0x8>)
 800a7a2:	f000 b8ae 	b.w	800a902 <__retarget_lock_release_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	20000318 	.word	0x20000318

0800a7ac <__sinit_lock_acquire>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	; (800a7b4 <__sinit_lock_acquire+0x8>)
 800a7ae:	f000 b8a7 	b.w	800a900 <__retarget_lock_acquire_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	20000313 	.word	0x20000313

0800a7b8 <__sinit_lock_release>:
 800a7b8:	4801      	ldr	r0, [pc, #4]	; (800a7c0 <__sinit_lock_release+0x8>)
 800a7ba:	f000 b8a2 	b.w	800a902 <__retarget_lock_release_recursive>
 800a7be:	bf00      	nop
 800a7c0:	20000313 	.word	0x20000313

0800a7c4 <__sinit>:
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	f7ff fff0 	bl	800a7ac <__sinit_lock_acquire>
 800a7cc:	69a3      	ldr	r3, [r4, #24]
 800a7ce:	b11b      	cbz	r3, 800a7d8 <__sinit+0x14>
 800a7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7d4:	f7ff bff0 	b.w	800a7b8 <__sinit_lock_release>
 800a7d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7dc:	6523      	str	r3, [r4, #80]	; 0x50
 800a7de:	4b13      	ldr	r3, [pc, #76]	; (800a82c <__sinit+0x68>)
 800a7e0:	4a13      	ldr	r2, [pc, #76]	; (800a830 <__sinit+0x6c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7e6:	42a3      	cmp	r3, r4
 800a7e8:	bf08      	it	eq
 800a7ea:	2301      	moveq	r3, #1
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	bf08      	it	eq
 800a7f0:	61a3      	streq	r3, [r4, #24]
 800a7f2:	f000 f81f 	bl	800a834 <__sfp>
 800a7f6:	6060      	str	r0, [r4, #4]
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f000 f81b 	bl	800a834 <__sfp>
 800a7fe:	60a0      	str	r0, [r4, #8]
 800a800:	4620      	mov	r0, r4
 800a802:	f000 f817 	bl	800a834 <__sfp>
 800a806:	2200      	movs	r2, #0
 800a808:	2104      	movs	r1, #4
 800a80a:	60e0      	str	r0, [r4, #12]
 800a80c:	6860      	ldr	r0, [r4, #4]
 800a80e:	f7ff ff81 	bl	800a714 <std>
 800a812:	2201      	movs	r2, #1
 800a814:	2109      	movs	r1, #9
 800a816:	68a0      	ldr	r0, [r4, #8]
 800a818:	f7ff ff7c 	bl	800a714 <std>
 800a81c:	2202      	movs	r2, #2
 800a81e:	2112      	movs	r1, #18
 800a820:	68e0      	ldr	r0, [r4, #12]
 800a822:	f7ff ff77 	bl	800a714 <std>
 800a826:	2301      	movs	r3, #1
 800a828:	61a3      	str	r3, [r4, #24]
 800a82a:	e7d1      	b.n	800a7d0 <__sinit+0xc>
 800a82c:	0800ca28 	.word	0x0800ca28
 800a830:	0800a75d 	.word	0x0800a75d

0800a834 <__sfp>:
 800a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a836:	4607      	mov	r7, r0
 800a838:	f7ff ffac 	bl	800a794 <__sfp_lock_acquire>
 800a83c:	4b1e      	ldr	r3, [pc, #120]	; (800a8b8 <__sfp+0x84>)
 800a83e:	681e      	ldr	r6, [r3, #0]
 800a840:	69b3      	ldr	r3, [r6, #24]
 800a842:	b913      	cbnz	r3, 800a84a <__sfp+0x16>
 800a844:	4630      	mov	r0, r6
 800a846:	f7ff ffbd 	bl	800a7c4 <__sinit>
 800a84a:	3648      	adds	r6, #72	; 0x48
 800a84c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a850:	3b01      	subs	r3, #1
 800a852:	d503      	bpl.n	800a85c <__sfp+0x28>
 800a854:	6833      	ldr	r3, [r6, #0]
 800a856:	b30b      	cbz	r3, 800a89c <__sfp+0x68>
 800a858:	6836      	ldr	r6, [r6, #0]
 800a85a:	e7f7      	b.n	800a84c <__sfp+0x18>
 800a85c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a860:	b9d5      	cbnz	r5, 800a898 <__sfp+0x64>
 800a862:	4b16      	ldr	r3, [pc, #88]	; (800a8bc <__sfp+0x88>)
 800a864:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a868:	60e3      	str	r3, [r4, #12]
 800a86a:	6665      	str	r5, [r4, #100]	; 0x64
 800a86c:	f000 f847 	bl	800a8fe <__retarget_lock_init_recursive>
 800a870:	f7ff ff96 	bl	800a7a0 <__sfp_lock_release>
 800a874:	2208      	movs	r2, #8
 800a876:	4629      	mov	r1, r5
 800a878:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a87c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a880:	6025      	str	r5, [r4, #0]
 800a882:	61a5      	str	r5, [r4, #24]
 800a884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a888:	f7ff f9a6 	bl	8009bd8 <memset>
 800a88c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a894:	4620      	mov	r0, r4
 800a896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a898:	3468      	adds	r4, #104	; 0x68
 800a89a:	e7d9      	b.n	800a850 <__sfp+0x1c>
 800a89c:	2104      	movs	r1, #4
 800a89e:	4638      	mov	r0, r7
 800a8a0:	f7ff ff62 	bl	800a768 <__sfmoreglue>
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	6030      	str	r0, [r6, #0]
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d1d5      	bne.n	800a858 <__sfp+0x24>
 800a8ac:	f7ff ff78 	bl	800a7a0 <__sfp_lock_release>
 800a8b0:	230c      	movs	r3, #12
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	e7ee      	b.n	800a894 <__sfp+0x60>
 800a8b6:	bf00      	nop
 800a8b8:	0800ca28 	.word	0x0800ca28
 800a8bc:	ffff0001 	.word	0xffff0001

0800a8c0 <_fwalk_reent>:
 800a8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	4688      	mov	r8, r1
 800a8c8:	2700      	movs	r7, #0
 800a8ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8d2:	f1b9 0901 	subs.w	r9, r9, #1
 800a8d6:	d505      	bpl.n	800a8e4 <_fwalk_reent+0x24>
 800a8d8:	6824      	ldr	r4, [r4, #0]
 800a8da:	2c00      	cmp	r4, #0
 800a8dc:	d1f7      	bne.n	800a8ce <_fwalk_reent+0xe>
 800a8de:	4638      	mov	r0, r7
 800a8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e4:	89ab      	ldrh	r3, [r5, #12]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d907      	bls.n	800a8fa <_fwalk_reent+0x3a>
 800a8ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	d003      	beq.n	800a8fa <_fwalk_reent+0x3a>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	47c0      	blx	r8
 800a8f8:	4307      	orrs	r7, r0
 800a8fa:	3568      	adds	r5, #104	; 0x68
 800a8fc:	e7e9      	b.n	800a8d2 <_fwalk_reent+0x12>

0800a8fe <__retarget_lock_init_recursive>:
 800a8fe:	4770      	bx	lr

0800a900 <__retarget_lock_acquire_recursive>:
 800a900:	4770      	bx	lr

0800a902 <__retarget_lock_release_recursive>:
 800a902:	4770      	bx	lr

0800a904 <__swhatbuf_r>:
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	460e      	mov	r6, r1
 800a908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90c:	4614      	mov	r4, r2
 800a90e:	2900      	cmp	r1, #0
 800a910:	461d      	mov	r5, r3
 800a912:	b096      	sub	sp, #88	; 0x58
 800a914:	da07      	bge.n	800a926 <__swhatbuf_r+0x22>
 800a916:	2300      	movs	r3, #0
 800a918:	602b      	str	r3, [r5, #0]
 800a91a:	89b3      	ldrh	r3, [r6, #12]
 800a91c:	061a      	lsls	r2, r3, #24
 800a91e:	d410      	bmi.n	800a942 <__swhatbuf_r+0x3e>
 800a920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a924:	e00e      	b.n	800a944 <__swhatbuf_r+0x40>
 800a926:	466a      	mov	r2, sp
 800a928:	f000 fab0 	bl	800ae8c <_fstat_r>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	dbf2      	blt.n	800a916 <__swhatbuf_r+0x12>
 800a930:	9a01      	ldr	r2, [sp, #4]
 800a932:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a936:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a93a:	425a      	negs	r2, r3
 800a93c:	415a      	adcs	r2, r3
 800a93e:	602a      	str	r2, [r5, #0]
 800a940:	e7ee      	b.n	800a920 <__swhatbuf_r+0x1c>
 800a942:	2340      	movs	r3, #64	; 0x40
 800a944:	2000      	movs	r0, #0
 800a946:	6023      	str	r3, [r4, #0]
 800a948:	b016      	add	sp, #88	; 0x58
 800a94a:	bd70      	pop	{r4, r5, r6, pc}

0800a94c <__smakebuf_r>:
 800a94c:	898b      	ldrh	r3, [r1, #12]
 800a94e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a950:	079d      	lsls	r5, r3, #30
 800a952:	4606      	mov	r6, r0
 800a954:	460c      	mov	r4, r1
 800a956:	d507      	bpl.n	800a968 <__smakebuf_r+0x1c>
 800a958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	6123      	str	r3, [r4, #16]
 800a960:	2301      	movs	r3, #1
 800a962:	6163      	str	r3, [r4, #20]
 800a964:	b002      	add	sp, #8
 800a966:	bd70      	pop	{r4, r5, r6, pc}
 800a968:	466a      	mov	r2, sp
 800a96a:	ab01      	add	r3, sp, #4
 800a96c:	f7ff ffca 	bl	800a904 <__swhatbuf_r>
 800a970:	9900      	ldr	r1, [sp, #0]
 800a972:	4605      	mov	r5, r0
 800a974:	4630      	mov	r0, r6
 800a976:	f7ff f983 	bl	8009c80 <_malloc_r>
 800a97a:	b948      	cbnz	r0, 800a990 <__smakebuf_r+0x44>
 800a97c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a980:	059a      	lsls	r2, r3, #22
 800a982:	d4ef      	bmi.n	800a964 <__smakebuf_r+0x18>
 800a984:	f023 0303 	bic.w	r3, r3, #3
 800a988:	f043 0302 	orr.w	r3, r3, #2
 800a98c:	81a3      	strh	r3, [r4, #12]
 800a98e:	e7e3      	b.n	800a958 <__smakebuf_r+0xc>
 800a990:	4b0d      	ldr	r3, [pc, #52]	; (800a9c8 <__smakebuf_r+0x7c>)
 800a992:	62b3      	str	r3, [r6, #40]	; 0x28
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	6020      	str	r0, [r4, #0]
 800a998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a99c:	81a3      	strh	r3, [r4, #12]
 800a99e:	9b00      	ldr	r3, [sp, #0]
 800a9a0:	6120      	str	r0, [r4, #16]
 800a9a2:	6163      	str	r3, [r4, #20]
 800a9a4:	9b01      	ldr	r3, [sp, #4]
 800a9a6:	b15b      	cbz	r3, 800a9c0 <__smakebuf_r+0x74>
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ae:	f000 fa7f 	bl	800aeb0 <_isatty_r>
 800a9b2:	b128      	cbz	r0, 800a9c0 <__smakebuf_r+0x74>
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	89a0      	ldrh	r0, [r4, #12]
 800a9c2:	4305      	orrs	r5, r0
 800a9c4:	81a5      	strh	r5, [r4, #12]
 800a9c6:	e7cd      	b.n	800a964 <__smakebuf_r+0x18>
 800a9c8:	0800a75d 	.word	0x0800a75d

0800a9cc <memchr>:
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	b2c9      	uxtb	r1, r1
 800a9d2:	4402      	add	r2, r0
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	d101      	bne.n	800a9de <memchr+0x12>
 800a9da:	2000      	movs	r0, #0
 800a9dc:	e003      	b.n	800a9e6 <memchr+0x1a>
 800a9de:	7804      	ldrb	r4, [r0, #0]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	428c      	cmp	r4, r1
 800a9e4:	d1f6      	bne.n	800a9d4 <memchr+0x8>
 800a9e6:	bd10      	pop	{r4, pc}

0800a9e8 <memmove>:
 800a9e8:	4288      	cmp	r0, r1
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	eb01 0402 	add.w	r4, r1, r2
 800a9f0:	d902      	bls.n	800a9f8 <memmove+0x10>
 800a9f2:	4284      	cmp	r4, r0
 800a9f4:	4623      	mov	r3, r4
 800a9f6:	d807      	bhi.n	800aa08 <memmove+0x20>
 800a9f8:	1e43      	subs	r3, r0, #1
 800a9fa:	42a1      	cmp	r1, r4
 800a9fc:	d008      	beq.n	800aa10 <memmove+0x28>
 800a9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa06:	e7f8      	b.n	800a9fa <memmove+0x12>
 800aa08:	4601      	mov	r1, r0
 800aa0a:	4402      	add	r2, r0
 800aa0c:	428a      	cmp	r2, r1
 800aa0e:	d100      	bne.n	800aa12 <memmove+0x2a>
 800aa10:	bd10      	pop	{r4, pc}
 800aa12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa1a:	e7f7      	b.n	800aa0c <memmove+0x24>

0800aa1c <__malloc_lock>:
 800aa1c:	4801      	ldr	r0, [pc, #4]	; (800aa24 <__malloc_lock+0x8>)
 800aa1e:	f7ff bf6f 	b.w	800a900 <__retarget_lock_acquire_recursive>
 800aa22:	bf00      	nop
 800aa24:	20000314 	.word	0x20000314

0800aa28 <__malloc_unlock>:
 800aa28:	4801      	ldr	r0, [pc, #4]	; (800aa30 <__malloc_unlock+0x8>)
 800aa2a:	f7ff bf6a 	b.w	800a902 <__retarget_lock_release_recursive>
 800aa2e:	bf00      	nop
 800aa30:	20000314 	.word	0x20000314

0800aa34 <_realloc_r>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	4607      	mov	r7, r0
 800aa38:	4614      	mov	r4, r2
 800aa3a:	460e      	mov	r6, r1
 800aa3c:	b921      	cbnz	r1, 800aa48 <_realloc_r+0x14>
 800aa3e:	4611      	mov	r1, r2
 800aa40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa44:	f7ff b91c 	b.w	8009c80 <_malloc_r>
 800aa48:	b922      	cbnz	r2, 800aa54 <_realloc_r+0x20>
 800aa4a:	f7ff f8cd 	bl	8009be8 <_free_r>
 800aa4e:	4625      	mov	r5, r4
 800aa50:	4628      	mov	r0, r5
 800aa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa54:	f000 fa4e 	bl	800aef4 <_malloc_usable_size_r>
 800aa58:	42a0      	cmp	r0, r4
 800aa5a:	d20f      	bcs.n	800aa7c <_realloc_r+0x48>
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	4638      	mov	r0, r7
 800aa60:	f7ff f90e 	bl	8009c80 <_malloc_r>
 800aa64:	4605      	mov	r5, r0
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d0f2      	beq.n	800aa50 <_realloc_r+0x1c>
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	f7ff f8a5 	bl	8009bbc <memcpy>
 800aa72:	4631      	mov	r1, r6
 800aa74:	4638      	mov	r0, r7
 800aa76:	f7ff f8b7 	bl	8009be8 <_free_r>
 800aa7a:	e7e9      	b.n	800aa50 <_realloc_r+0x1c>
 800aa7c:	4635      	mov	r5, r6
 800aa7e:	e7e7      	b.n	800aa50 <_realloc_r+0x1c>

0800aa80 <__ssputs_r>:
 800aa80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa84:	688e      	ldr	r6, [r1, #8]
 800aa86:	4682      	mov	sl, r0
 800aa88:	429e      	cmp	r6, r3
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	4690      	mov	r8, r2
 800aa8e:	461f      	mov	r7, r3
 800aa90:	d838      	bhi.n	800ab04 <__ssputs_r+0x84>
 800aa92:	898a      	ldrh	r2, [r1, #12]
 800aa94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa98:	d032      	beq.n	800ab00 <__ssputs_r+0x80>
 800aa9a:	6825      	ldr	r5, [r4, #0]
 800aa9c:	6909      	ldr	r1, [r1, #16]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	eba5 0901 	sub.w	r9, r5, r1
 800aaa4:	6965      	ldr	r5, [r4, #20]
 800aaa6:	444b      	add	r3, r9
 800aaa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aab0:	106d      	asrs	r5, r5, #1
 800aab2:	429d      	cmp	r5, r3
 800aab4:	bf38      	it	cc
 800aab6:	461d      	movcc	r5, r3
 800aab8:	0553      	lsls	r3, r2, #21
 800aaba:	d531      	bpl.n	800ab20 <__ssputs_r+0xa0>
 800aabc:	4629      	mov	r1, r5
 800aabe:	f7ff f8df 	bl	8009c80 <_malloc_r>
 800aac2:	4606      	mov	r6, r0
 800aac4:	b950      	cbnz	r0, 800aadc <__ssputs_r+0x5c>
 800aac6:	230c      	movs	r3, #12
 800aac8:	f04f 30ff 	mov.w	r0, #4294967295
 800aacc:	f8ca 3000 	str.w	r3, [sl]
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aadc:	464a      	mov	r2, r9
 800aade:	6921      	ldr	r1, [r4, #16]
 800aae0:	f7ff f86c 	bl	8009bbc <memcpy>
 800aae4:	89a3      	ldrh	r3, [r4, #12]
 800aae6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aaea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaee:	81a3      	strh	r3, [r4, #12]
 800aaf0:	6126      	str	r6, [r4, #16]
 800aaf2:	444e      	add	r6, r9
 800aaf4:	6026      	str	r6, [r4, #0]
 800aaf6:	463e      	mov	r6, r7
 800aaf8:	6165      	str	r5, [r4, #20]
 800aafa:	eba5 0509 	sub.w	r5, r5, r9
 800aafe:	60a5      	str	r5, [r4, #8]
 800ab00:	42be      	cmp	r6, r7
 800ab02:	d900      	bls.n	800ab06 <__ssputs_r+0x86>
 800ab04:	463e      	mov	r6, r7
 800ab06:	4632      	mov	r2, r6
 800ab08:	4641      	mov	r1, r8
 800ab0a:	6820      	ldr	r0, [r4, #0]
 800ab0c:	f7ff ff6c 	bl	800a9e8 <memmove>
 800ab10:	68a3      	ldr	r3, [r4, #8]
 800ab12:	6822      	ldr	r2, [r4, #0]
 800ab14:	1b9b      	subs	r3, r3, r6
 800ab16:	4432      	add	r2, r6
 800ab18:	2000      	movs	r0, #0
 800ab1a:	60a3      	str	r3, [r4, #8]
 800ab1c:	6022      	str	r2, [r4, #0]
 800ab1e:	e7db      	b.n	800aad8 <__ssputs_r+0x58>
 800ab20:	462a      	mov	r2, r5
 800ab22:	f7ff ff87 	bl	800aa34 <_realloc_r>
 800ab26:	4606      	mov	r6, r0
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d1e1      	bne.n	800aaf0 <__ssputs_r+0x70>
 800ab2c:	4650      	mov	r0, sl
 800ab2e:	6921      	ldr	r1, [r4, #16]
 800ab30:	f7ff f85a 	bl	8009be8 <_free_r>
 800ab34:	e7c7      	b.n	800aac6 <__ssputs_r+0x46>
	...

0800ab38 <_svfiprintf_r>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	4698      	mov	r8, r3
 800ab3e:	898b      	ldrh	r3, [r1, #12]
 800ab40:	4607      	mov	r7, r0
 800ab42:	061b      	lsls	r3, r3, #24
 800ab44:	460d      	mov	r5, r1
 800ab46:	4614      	mov	r4, r2
 800ab48:	b09d      	sub	sp, #116	; 0x74
 800ab4a:	d50e      	bpl.n	800ab6a <_svfiprintf_r+0x32>
 800ab4c:	690b      	ldr	r3, [r1, #16]
 800ab4e:	b963      	cbnz	r3, 800ab6a <_svfiprintf_r+0x32>
 800ab50:	2140      	movs	r1, #64	; 0x40
 800ab52:	f7ff f895 	bl	8009c80 <_malloc_r>
 800ab56:	6028      	str	r0, [r5, #0]
 800ab58:	6128      	str	r0, [r5, #16]
 800ab5a:	b920      	cbnz	r0, 800ab66 <_svfiprintf_r+0x2e>
 800ab5c:	230c      	movs	r3, #12
 800ab5e:	603b      	str	r3, [r7, #0]
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	e0d1      	b.n	800ad0a <_svfiprintf_r+0x1d2>
 800ab66:	2340      	movs	r3, #64	; 0x40
 800ab68:	616b      	str	r3, [r5, #20]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6e:	2320      	movs	r3, #32
 800ab70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab74:	2330      	movs	r3, #48	; 0x30
 800ab76:	f04f 0901 	mov.w	r9, #1
 800ab7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ad24 <_svfiprintf_r+0x1ec>
 800ab82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab86:	4623      	mov	r3, r4
 800ab88:	469a      	mov	sl, r3
 800ab8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab8e:	b10a      	cbz	r2, 800ab94 <_svfiprintf_r+0x5c>
 800ab90:	2a25      	cmp	r2, #37	; 0x25
 800ab92:	d1f9      	bne.n	800ab88 <_svfiprintf_r+0x50>
 800ab94:	ebba 0b04 	subs.w	fp, sl, r4
 800ab98:	d00b      	beq.n	800abb2 <_svfiprintf_r+0x7a>
 800ab9a:	465b      	mov	r3, fp
 800ab9c:	4622      	mov	r2, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	4638      	mov	r0, r7
 800aba2:	f7ff ff6d 	bl	800aa80 <__ssputs_r>
 800aba6:	3001      	adds	r0, #1
 800aba8:	f000 80aa 	beq.w	800ad00 <_svfiprintf_r+0x1c8>
 800abac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abae:	445a      	add	r2, fp
 800abb0:	9209      	str	r2, [sp, #36]	; 0x24
 800abb2:	f89a 3000 	ldrb.w	r3, [sl]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 80a2 	beq.w	800ad00 <_svfiprintf_r+0x1c8>
 800abbc:	2300      	movs	r3, #0
 800abbe:	f04f 32ff 	mov.w	r2, #4294967295
 800abc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc6:	f10a 0a01 	add.w	sl, sl, #1
 800abca:	9304      	str	r3, [sp, #16]
 800abcc:	9307      	str	r3, [sp, #28]
 800abce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abd2:	931a      	str	r3, [sp, #104]	; 0x68
 800abd4:	4654      	mov	r4, sl
 800abd6:	2205      	movs	r2, #5
 800abd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abdc:	4851      	ldr	r0, [pc, #324]	; (800ad24 <_svfiprintf_r+0x1ec>)
 800abde:	f7ff fef5 	bl	800a9cc <memchr>
 800abe2:	9a04      	ldr	r2, [sp, #16]
 800abe4:	b9d8      	cbnz	r0, 800ac1e <_svfiprintf_r+0xe6>
 800abe6:	06d0      	lsls	r0, r2, #27
 800abe8:	bf44      	itt	mi
 800abea:	2320      	movmi	r3, #32
 800abec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abf0:	0711      	lsls	r1, r2, #28
 800abf2:	bf44      	itt	mi
 800abf4:	232b      	movmi	r3, #43	; 0x2b
 800abf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abfa:	f89a 3000 	ldrb.w	r3, [sl]
 800abfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ac00:	d015      	beq.n	800ac2e <_svfiprintf_r+0xf6>
 800ac02:	4654      	mov	r4, sl
 800ac04:	2000      	movs	r0, #0
 800ac06:	f04f 0c0a 	mov.w	ip, #10
 800ac0a:	9a07      	ldr	r2, [sp, #28]
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac12:	3b30      	subs	r3, #48	; 0x30
 800ac14:	2b09      	cmp	r3, #9
 800ac16:	d94e      	bls.n	800acb6 <_svfiprintf_r+0x17e>
 800ac18:	b1b0      	cbz	r0, 800ac48 <_svfiprintf_r+0x110>
 800ac1a:	9207      	str	r2, [sp, #28]
 800ac1c:	e014      	b.n	800ac48 <_svfiprintf_r+0x110>
 800ac1e:	eba0 0308 	sub.w	r3, r0, r8
 800ac22:	fa09 f303 	lsl.w	r3, r9, r3
 800ac26:	4313      	orrs	r3, r2
 800ac28:	46a2      	mov	sl, r4
 800ac2a:	9304      	str	r3, [sp, #16]
 800ac2c:	e7d2      	b.n	800abd4 <_svfiprintf_r+0x9c>
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	1d19      	adds	r1, r3, #4
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	9103      	str	r1, [sp, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	bfbb      	ittet	lt
 800ac3a:	425b      	neglt	r3, r3
 800ac3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ac40:	9307      	strge	r3, [sp, #28]
 800ac42:	9307      	strlt	r3, [sp, #28]
 800ac44:	bfb8      	it	lt
 800ac46:	9204      	strlt	r2, [sp, #16]
 800ac48:	7823      	ldrb	r3, [r4, #0]
 800ac4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ac4c:	d10c      	bne.n	800ac68 <_svfiprintf_r+0x130>
 800ac4e:	7863      	ldrb	r3, [r4, #1]
 800ac50:	2b2a      	cmp	r3, #42	; 0x2a
 800ac52:	d135      	bne.n	800acc0 <_svfiprintf_r+0x188>
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	3402      	adds	r4, #2
 800ac58:	1d1a      	adds	r2, r3, #4
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	9203      	str	r2, [sp, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	bfb8      	it	lt
 800ac62:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac66:	9305      	str	r3, [sp, #20]
 800ac68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad34 <_svfiprintf_r+0x1fc>
 800ac6c:	2203      	movs	r2, #3
 800ac6e:	4650      	mov	r0, sl
 800ac70:	7821      	ldrb	r1, [r4, #0]
 800ac72:	f7ff feab 	bl	800a9cc <memchr>
 800ac76:	b140      	cbz	r0, 800ac8a <_svfiprintf_r+0x152>
 800ac78:	2340      	movs	r3, #64	; 0x40
 800ac7a:	eba0 000a 	sub.w	r0, r0, sl
 800ac7e:	fa03 f000 	lsl.w	r0, r3, r0
 800ac82:	9b04      	ldr	r3, [sp, #16]
 800ac84:	3401      	adds	r4, #1
 800ac86:	4303      	orrs	r3, r0
 800ac88:	9304      	str	r3, [sp, #16]
 800ac8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8e:	2206      	movs	r2, #6
 800ac90:	4825      	ldr	r0, [pc, #148]	; (800ad28 <_svfiprintf_r+0x1f0>)
 800ac92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac96:	f7ff fe99 	bl	800a9cc <memchr>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d038      	beq.n	800ad10 <_svfiprintf_r+0x1d8>
 800ac9e:	4b23      	ldr	r3, [pc, #140]	; (800ad2c <_svfiprintf_r+0x1f4>)
 800aca0:	bb1b      	cbnz	r3, 800acea <_svfiprintf_r+0x1b2>
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	3307      	adds	r3, #7
 800aca6:	f023 0307 	bic.w	r3, r3, #7
 800acaa:	3308      	adds	r3, #8
 800acac:	9303      	str	r3, [sp, #12]
 800acae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb0:	4433      	add	r3, r6
 800acb2:	9309      	str	r3, [sp, #36]	; 0x24
 800acb4:	e767      	b.n	800ab86 <_svfiprintf_r+0x4e>
 800acb6:	460c      	mov	r4, r1
 800acb8:	2001      	movs	r0, #1
 800acba:	fb0c 3202 	mla	r2, ip, r2, r3
 800acbe:	e7a5      	b.n	800ac0c <_svfiprintf_r+0xd4>
 800acc0:	2300      	movs	r3, #0
 800acc2:	f04f 0c0a 	mov.w	ip, #10
 800acc6:	4619      	mov	r1, r3
 800acc8:	3401      	adds	r4, #1
 800acca:	9305      	str	r3, [sp, #20]
 800accc:	4620      	mov	r0, r4
 800acce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acd2:	3a30      	subs	r2, #48	; 0x30
 800acd4:	2a09      	cmp	r2, #9
 800acd6:	d903      	bls.n	800ace0 <_svfiprintf_r+0x1a8>
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0c5      	beq.n	800ac68 <_svfiprintf_r+0x130>
 800acdc:	9105      	str	r1, [sp, #20]
 800acde:	e7c3      	b.n	800ac68 <_svfiprintf_r+0x130>
 800ace0:	4604      	mov	r4, r0
 800ace2:	2301      	movs	r3, #1
 800ace4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ace8:	e7f0      	b.n	800accc <_svfiprintf_r+0x194>
 800acea:	ab03      	add	r3, sp, #12
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	462a      	mov	r2, r5
 800acf0:	4638      	mov	r0, r7
 800acf2:	4b0f      	ldr	r3, [pc, #60]	; (800ad30 <_svfiprintf_r+0x1f8>)
 800acf4:	a904      	add	r1, sp, #16
 800acf6:	f3af 8000 	nop.w
 800acfa:	1c42      	adds	r2, r0, #1
 800acfc:	4606      	mov	r6, r0
 800acfe:	d1d6      	bne.n	800acae <_svfiprintf_r+0x176>
 800ad00:	89ab      	ldrh	r3, [r5, #12]
 800ad02:	065b      	lsls	r3, r3, #25
 800ad04:	f53f af2c 	bmi.w	800ab60 <_svfiprintf_r+0x28>
 800ad08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad0a:	b01d      	add	sp, #116	; 0x74
 800ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad10:	ab03      	add	r3, sp, #12
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	462a      	mov	r2, r5
 800ad16:	4638      	mov	r0, r7
 800ad18:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <_svfiprintf_r+0x1f8>)
 800ad1a:	a904      	add	r1, sp, #16
 800ad1c:	f7ff f9d2 	bl	800a0c4 <_printf_i>
 800ad20:	e7eb      	b.n	800acfa <_svfiprintf_r+0x1c2>
 800ad22:	bf00      	nop
 800ad24:	0800ca2c 	.word	0x0800ca2c
 800ad28:	0800ca36 	.word	0x0800ca36
 800ad2c:	00000000 	.word	0x00000000
 800ad30:	0800aa81 	.word	0x0800aa81
 800ad34:	0800ca32 	.word	0x0800ca32

0800ad38 <_raise_r>:
 800ad38:	291f      	cmp	r1, #31
 800ad3a:	b538      	push	{r3, r4, r5, lr}
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	460d      	mov	r5, r1
 800ad40:	d904      	bls.n	800ad4c <_raise_r+0x14>
 800ad42:	2316      	movs	r3, #22
 800ad44:	6003      	str	r3, [r0, #0]
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad4e:	b112      	cbz	r2, 800ad56 <_raise_r+0x1e>
 800ad50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad54:	b94b      	cbnz	r3, 800ad6a <_raise_r+0x32>
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 f830 	bl	800adbc <_getpid_r>
 800ad5c:	462a      	mov	r2, r5
 800ad5e:	4601      	mov	r1, r0
 800ad60:	4620      	mov	r0, r4
 800ad62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad66:	f000 b817 	b.w	800ad98 <_kill_r>
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d00a      	beq.n	800ad84 <_raise_r+0x4c>
 800ad6e:	1c59      	adds	r1, r3, #1
 800ad70:	d103      	bne.n	800ad7a <_raise_r+0x42>
 800ad72:	2316      	movs	r3, #22
 800ad74:	6003      	str	r3, [r0, #0]
 800ad76:	2001      	movs	r0, #1
 800ad78:	e7e7      	b.n	800ad4a <_raise_r+0x12>
 800ad7a:	2400      	movs	r4, #0
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad82:	4798      	blx	r3
 800ad84:	2000      	movs	r0, #0
 800ad86:	e7e0      	b.n	800ad4a <_raise_r+0x12>

0800ad88 <raise>:
 800ad88:	4b02      	ldr	r3, [pc, #8]	; (800ad94 <raise+0xc>)
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	f7ff bfd3 	b.w	800ad38 <_raise_r>
 800ad92:	bf00      	nop
 800ad94:	2000000c 	.word	0x2000000c

0800ad98 <_kill_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4d06      	ldr	r5, [pc, #24]	; (800adb8 <_kill_r+0x20>)
 800ad9e:	4604      	mov	r4, r0
 800ada0:	4608      	mov	r0, r1
 800ada2:	4611      	mov	r1, r2
 800ada4:	602b      	str	r3, [r5, #0]
 800ada6:	f7fc fd14 	bl	80077d2 <_kill>
 800adaa:	1c43      	adds	r3, r0, #1
 800adac:	d102      	bne.n	800adb4 <_kill_r+0x1c>
 800adae:	682b      	ldr	r3, [r5, #0]
 800adb0:	b103      	cbz	r3, 800adb4 <_kill_r+0x1c>
 800adb2:	6023      	str	r3, [r4, #0]
 800adb4:	bd38      	pop	{r3, r4, r5, pc}
 800adb6:	bf00      	nop
 800adb8:	2000031c 	.word	0x2000031c

0800adbc <_getpid_r>:
 800adbc:	f7fc bd02 	b.w	80077c4 <_getpid>

0800adc0 <__sread>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	460c      	mov	r4, r1
 800adc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc8:	f000 f89c 	bl	800af04 <_read_r>
 800adcc:	2800      	cmp	r0, #0
 800adce:	bfab      	itete	ge
 800add0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800add2:	89a3      	ldrhlt	r3, [r4, #12]
 800add4:	181b      	addge	r3, r3, r0
 800add6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adda:	bfac      	ite	ge
 800addc:	6563      	strge	r3, [r4, #84]	; 0x54
 800adde:	81a3      	strhlt	r3, [r4, #12]
 800ade0:	bd10      	pop	{r4, pc}

0800ade2 <__swrite>:
 800ade2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade6:	461f      	mov	r7, r3
 800ade8:	898b      	ldrh	r3, [r1, #12]
 800adea:	4605      	mov	r5, r0
 800adec:	05db      	lsls	r3, r3, #23
 800adee:	460c      	mov	r4, r1
 800adf0:	4616      	mov	r6, r2
 800adf2:	d505      	bpl.n	800ae00 <__swrite+0x1e>
 800adf4:	2302      	movs	r3, #2
 800adf6:	2200      	movs	r2, #0
 800adf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adfc:	f000 f868 	bl	800aed0 <_lseek_r>
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	4632      	mov	r2, r6
 800ae04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	463b      	mov	r3, r7
 800ae0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae16:	f000 b817 	b.w	800ae48 <_write_r>

0800ae1a <__sseek>:
 800ae1a:	b510      	push	{r4, lr}
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae22:	f000 f855 	bl	800aed0 <_lseek_r>
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	bf15      	itete	ne
 800ae2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae36:	81a3      	strheq	r3, [r4, #12]
 800ae38:	bf18      	it	ne
 800ae3a:	81a3      	strhne	r3, [r4, #12]
 800ae3c:	bd10      	pop	{r4, pc}

0800ae3e <__sclose>:
 800ae3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae42:	f000 b813 	b.w	800ae6c <_close_r>
	...

0800ae48 <_write_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	4611      	mov	r1, r2
 800ae50:	2200      	movs	r2, #0
 800ae52:	4d05      	ldr	r5, [pc, #20]	; (800ae68 <_write_r+0x20>)
 800ae54:	602a      	str	r2, [r5, #0]
 800ae56:	461a      	mov	r2, r3
 800ae58:	f7fc fcf2 	bl	8007840 <_write>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_write_r+0x1e>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_write_r+0x1e>
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	2000031c 	.word	0x2000031c

0800ae6c <_close_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4d05      	ldr	r5, [pc, #20]	; (800ae88 <_close_r+0x1c>)
 800ae72:	4604      	mov	r4, r0
 800ae74:	4608      	mov	r0, r1
 800ae76:	602b      	str	r3, [r5, #0]
 800ae78:	f7fc fcfe 	bl	8007878 <_close>
 800ae7c:	1c43      	adds	r3, r0, #1
 800ae7e:	d102      	bne.n	800ae86 <_close_r+0x1a>
 800ae80:	682b      	ldr	r3, [r5, #0]
 800ae82:	b103      	cbz	r3, 800ae86 <_close_r+0x1a>
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	2000031c 	.word	0x2000031c

0800ae8c <_fstat_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	2300      	movs	r3, #0
 800ae90:	4d06      	ldr	r5, [pc, #24]	; (800aeac <_fstat_r+0x20>)
 800ae92:	4604      	mov	r4, r0
 800ae94:	4608      	mov	r0, r1
 800ae96:	4611      	mov	r1, r2
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	f7fc fcf8 	bl	800788e <_fstat>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d102      	bne.n	800aea8 <_fstat_r+0x1c>
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	b103      	cbz	r3, 800aea8 <_fstat_r+0x1c>
 800aea6:	6023      	str	r3, [r4, #0]
 800aea8:	bd38      	pop	{r3, r4, r5, pc}
 800aeaa:	bf00      	nop
 800aeac:	2000031c 	.word	0x2000031c

0800aeb0 <_isatty_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	4d05      	ldr	r5, [pc, #20]	; (800aecc <_isatty_r+0x1c>)
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	602b      	str	r3, [r5, #0]
 800aebc:	f7fc fcf6 	bl	80078ac <_isatty>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_isatty_r+0x1a>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_isatty_r+0x1a>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	2000031c 	.word	0x2000031c

0800aed0 <_lseek_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4604      	mov	r4, r0
 800aed4:	4608      	mov	r0, r1
 800aed6:	4611      	mov	r1, r2
 800aed8:	2200      	movs	r2, #0
 800aeda:	4d05      	ldr	r5, [pc, #20]	; (800aef0 <_lseek_r+0x20>)
 800aedc:	602a      	str	r2, [r5, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	f7fc fcee 	bl	80078c0 <_lseek>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_lseek_r+0x1e>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_lseek_r+0x1e>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	2000031c 	.word	0x2000031c

0800aef4 <_malloc_usable_size_r>:
 800aef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aef8:	1f18      	subs	r0, r3, #4
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	bfbc      	itt	lt
 800aefe:	580b      	ldrlt	r3, [r1, r0]
 800af00:	18c0      	addlt	r0, r0, r3
 800af02:	4770      	bx	lr

0800af04 <_read_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4604      	mov	r4, r0
 800af08:	4608      	mov	r0, r1
 800af0a:	4611      	mov	r1, r2
 800af0c:	2200      	movs	r2, #0
 800af0e:	4d05      	ldr	r5, [pc, #20]	; (800af24 <_read_r+0x20>)
 800af10:	602a      	str	r2, [r5, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	f7fc fc77 	bl	8007806 <_read>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_read_r+0x1e>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_read_r+0x1e>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	2000031c 	.word	0x2000031c

0800af28 <_init>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	bf00      	nop
 800af2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2e:	bc08      	pop	{r3}
 800af30:	469e      	mov	lr, r3
 800af32:	4770      	bx	lr

0800af34 <_fini>:
 800af34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af36:	bf00      	nop
 800af38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af3a:	bc08      	pop	{r3}
 800af3c:	469e      	mov	lr, r3
 800af3e:	4770      	bx	lr
