
internal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ffc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d68  0800a108  0800a108  0001a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae70  0800ae70  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae70  0800ae70  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae70  0800ae70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae70  0800ae70  0001ae70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae74  0800ae74  0001ae74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ae78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000070  0800aee8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  0800aee8  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f19  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002326  00000000  00000000  00033fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  000362d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  00037258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000030b2  00000000  00000000  000383c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff92  00000000  00000000  0003b472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000889b9  00000000  00000000  0004b404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3dbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e08  00000000  00000000  000d3e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a0f0 	.word	0x0800a0f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800a0f0 	.word	0x0800a0f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__popcountsi2>:
 800015c:	0843      	lsrs	r3, r0, #1
 800015e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000162:	1ac0      	subs	r0, r0, r3
 8000164:	0883      	lsrs	r3, r0, #2
 8000166:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800016a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 800016e:	4418      	add	r0, r3
 8000170:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000174:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000178:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800017c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000180:	0e00      	lsrs	r0, r0, #24
 8000182:	4770      	bx	lr

08000184 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800018e:	683a      	ldr	r2, [r7, #0]
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4293      	cmp	r3, r2
 8000194:	bf38      	it	cc
 8000196:	4613      	movcc	r3, r2
}
 8000198:	4618      	mov	r0, r3
 800019a:	370c      	adds	r7, #12
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr

080001a2 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80001a2:	b480      	push	{r7}
 80001a4:	b083      	sub	sp, #12
 80001a6:	af00      	add	r7, sp, #0
 80001a8:	6078      	str	r0, [r7, #4]
 80001aa:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80001ac:	683a      	ldr	r2, [r7, #0]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4293      	cmp	r3, r2
 80001b2:	bf28      	it	cs
 80001b4:	4613      	movcs	r3, r2
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
 80001c8:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	683a      	ldr	r2, [r7, #0]
 80001ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80001d2:	6839      	ldr	r1, [r7, #0]
 80001d4:	fb01 f202 	mul.w	r2, r1, r2
 80001d8:	1a9b      	subs	r3, r3, r2
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	1ad3      	subs	r3, r2, r3
}
 80001de:	4618      	mov	r0, r3
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr

080001e8 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	3b01      	subs	r3, #1
 80001fa:	6839      	ldr	r1, [r7, #0]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffdf 	bl	80001c0 <lfs_aligndown>
 8000202:	4603      	mov	r3, r0
}
 8000204:	4618      	mov	r0, r3
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}

0800020c <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3b01      	subs	r3, #1
 8000218:	fab3 f383 	clz	r3, r3
 800021c:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8000220:	4618      	mov	r0, r3
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr

0800022a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800022a:	b480      	push	{r7}
 800022c:	b083      	sub	sp, #12
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	fa93 f3a3 	rbit	r3, r3
 8000238:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800023c:	4618      	mov	r0, r3
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f7ff ff84 	bl	800015c <__popcountsi2>
 8000254:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8000256:	4618      	mov	r0, r3
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}

0800025e <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800025e:	b480      	push	{r7}
 8000260:	b083      	sub	sp, #12
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
 8000266:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	1ad3      	subs	r3, r2, r3
}
 800026e:	4618      	mov	r0, r3
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8000280:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000282:	4618      	mov	r0, r3
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f7ff ffef 	bl	8000278 <lfs_fromle32>
 800029a:	4603      	mov	r3, r0
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr

080002ba <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b082      	sub	sp, #8
 80002be:	af00      	add	r7, sp, #0
 80002c0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80002c2:	6878      	ldr	r0, [r7, #4]
 80002c4:	f7ff ffee 	bl	80002a4 <lfs_frombe32>
 80002c8:	4603      	mov	r3, r0
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f008 fd36 	bl	8008d4c <malloc>
 80002e0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b082      	sub	sp, #8
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f008 fd32 	bl	8008d5c <free>
#else
    (void)p;
#endif
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	f04f 32ff 	mov.w	r2, #4294967295
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	68d8      	ldr	r0, [r3, #12]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800032e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000330:	461a      	mov	r2, r3
 8000332:	21ff      	movs	r1, #255	; 0xff
 8000334:	f008 fd36 	bl	8008da4 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f04f 32ff 	mov.w	r2, #4294967295
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000348:	b5b0      	push	{r4, r5, r7, lr}
 800034a:	b08a      	sub	sp, #40	; 0x28
 800034c:	af02      	add	r7, sp, #8
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
 8000354:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000358:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 800035a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800035c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800035e:	441a      	add	r2, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	429a      	cmp	r2, r3
 8000368:	d80a      	bhi.n	8000380 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800036e:	2b00      	cmp	r3, #0
 8000370:	f000 8124 	beq.w	80005bc <lfs_bd_read+0x274>
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800037a:	429a      	cmp	r2, r3
 800037c:	f0c0 811e 	bcc.w	80005bc <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8000380:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000384:	e11f      	b.n	80005c6 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000388:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d03f      	beq.n	8000410 <lfs_bd_read+0xc8>
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000396:	429a      	cmp	r2, r3
 8000398:	d13a      	bne.n	8000410 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	685a      	ldr	r2, [r3, #4]
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 80003a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d232      	bcs.n	8000410 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d324      	bcc.n	80003fe <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	689a      	ldr	r2, [r3, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	6859      	ldr	r1, [r3, #4]
 80003bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003be:	1acb      	subs	r3, r1, r3
 80003c0:	4413      	add	r3, r2
 80003c2:	4619      	mov	r1, r3
 80003c4:	69b8      	ldr	r0, [r7, #24]
 80003c6:	f7ff feec 	bl	80001a2 <lfs_min>
 80003ca:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	68da      	ldr	r2, [r3, #12]
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80003d6:	1acb      	subs	r3, r1, r3
 80003d8:	4413      	add	r3, r2
 80003da:	69ba      	ldr	r2, [r7, #24]
 80003dc:	4619      	mov	r1, r3
 80003de:	69f8      	ldr	r0, [r7, #28]
 80003e0:	f008 fcd2 	bl	8008d88 <memcpy>

                data += diff;
 80003e4:	69fa      	ldr	r2, [r7, #28]
 80003e6:	69bb      	ldr	r3, [r7, #24]
 80003e8:	4413      	add	r3, r2
 80003ea:	61fb      	str	r3, [r7, #28]
                off += diff;
 80003ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80003ee:	69bb      	ldr	r3, [r7, #24]
 80003f0:	4413      	add	r3, r2
 80003f2:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80003f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80003f6:	69bb      	ldr	r3, [r7, #24]
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80003fc:	e0de      	b.n	80005bc <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	685a      	ldr	r2, [r3, #4]
 8000402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	4619      	mov	r1, r3
 8000408:	69b8      	ldr	r0, [r7, #24]
 800040a:	f7ff feca 	bl	80001a2 <lfs_min>
 800040e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000416:	429a      	cmp	r2, r3
 8000418:	d13a      	bne.n	8000490 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000426:	429a      	cmp	r2, r3
 8000428:	d232      	bcs.n	8000490 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000430:	429a      	cmp	r2, r3
 8000432:	d324      	bcc.n	800047e <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	689a      	ldr	r2, [r3, #8]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6859      	ldr	r1, [r3, #4]
 800043c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800043e:	1acb      	subs	r3, r1, r3
 8000440:	4413      	add	r3, r2
 8000442:	4619      	mov	r1, r3
 8000444:	69b8      	ldr	r0, [r7, #24]
 8000446:	f7ff feac 	bl	80001a2 <lfs_min>
 800044a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	68da      	ldr	r2, [r3, #12]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	4413      	add	r3, r2
 800045a:	69ba      	ldr	r2, [r7, #24]
 800045c:	4619      	mov	r1, r3
 800045e:	69f8      	ldr	r0, [r7, #28]
 8000460:	f008 fc92 	bl	8008d88 <memcpy>

                data += diff;
 8000464:	69fa      	ldr	r2, [r7, #28]
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	4413      	add	r3, r2
 800046a:	61fb      	str	r3, [r7, #28]
                off += diff;
 800046c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800046e:	69bb      	ldr	r3, [r7, #24]
 8000470:	4413      	add	r3, r2
 8000472:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800047c:	e09e      	b.n	80005bc <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685a      	ldr	r2, [r3, #4]
 8000482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	4619      	mov	r1, r3
 8000488:	69b8      	ldr	r0, [r7, #24]
 800048a:	f7ff fe8a 	bl	80001a2 <lfs_min>
 800048e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	429a      	cmp	r2, r3
 8000496:	d336      	bcc.n	8000506 <lfs_bd_read+0x1be>
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80004a4:	fb02 f201 	mul.w	r2, r2, r1
 80004a8:	1a9b      	subs	r3, r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d12b      	bne.n	8000506 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80004b2:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80004b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d325      	bcc.n	8000506 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4619      	mov	r1, r3
 80004c2:	69b8      	ldr	r0, [r7, #24]
 80004c4:	f7ff fe7c 	bl	80001c0 <lfs_aligndown>
 80004c8:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80004ce:	685c      	ldr	r4, [r3, #4]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80004d4:	69bb      	ldr	r3, [r7, #24]
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80004de:	47a0      	blx	r4
 80004e0:	6178      	str	r0, [r7, #20]
            if (err) {
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <lfs_bd_read+0x1a4>
                return err;
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	e06c      	b.n	80005c6 <lfs_bd_read+0x27e>
            }

            data += diff;
 80004ec:	69fa      	ldr	r2, [r7, #28]
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	4413      	add	r3, r2
 80004f2:	61fb      	str	r3, [r7, #28]
            off += diff;
 80004f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	4413      	add	r3, r2
 80004fa:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 80004fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000504:	e05a      	b.n	80005bc <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00a      	beq.n	8000524 <lfs_bd_read+0x1dc>
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000514:	429a      	cmp	r2, r3
 8000516:	d305      	bcc.n	8000524 <lfs_bd_read+0x1dc>
 8000518:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <lfs_bd_read+0x288>)
 800051a:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <lfs_bd_read+0x28c>)
 800051c:	216b      	movs	r1, #107	; 0x6b
 800051e:	482e      	ldr	r0, [pc, #184]	; (80005d8 <lfs_bd_read+0x290>)
 8000520:	f008 fbba 	bl	8008c98 <__assert_func>
        rcache->block = block;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000528:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	4619      	mov	r1, r3
 8000532:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000534:	f7ff fe44 	bl	80001c0 <lfs_aligndown>
 8000538:	4602      	mov	r2, r0
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800053e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4619      	mov	r1, r3
 800054c:	4610      	mov	r0, r2
 800054e:	f7ff fe4b 	bl	80001e8 <lfs_alignup>
 8000552:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4619      	mov	r1, r3
 800055c:	4610      	mov	r0, r2
 800055e:	f7ff fe20 	bl	80001a2 <lfs_min>
 8000562:	4602      	mov	r2, r0
                - rcache->off,
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000568:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 800056e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000570:	4619      	mov	r1, r3
 8000572:	4610      	mov	r0, r2
 8000574:	f7ff fe15 	bl	80001a2 <lfs_min>
 8000578:	4602      	mov	r2, r0
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000582:	685c      	ldr	r4, [r3, #4]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6819      	ldr	r1, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	462b      	mov	r3, r5
 800059c:	47a0      	blx	r4
 800059e:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	dd05      	ble.n	80005b2 <lfs_bd_read+0x26a>
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <lfs_bd_read+0x294>)
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <lfs_bd_read+0x28c>)
 80005aa:	2176      	movs	r1, #118	; 0x76
 80005ac:	480a      	ldr	r0, [pc, #40]	; (80005d8 <lfs_bd_read+0x290>)
 80005ae:	f008 fb73 	bl	8008c98 <__assert_func>
        if (err) {
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <lfs_bd_read+0x274>
            return err;
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	e004      	b.n	80005c6 <lfs_bd_read+0x27e>
    while (size > 0) {
 80005bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f47f aee1 	bne.w	8000386 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3720      	adds	r7, #32
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}
 80005ce:	bf00      	nop
 80005d0:	0800a108 	.word	0x0800a108
 80005d4:	0800abfc 	.word	0x0800abfc
 80005d8:	0800a138 	.word	0x0800a138
 80005dc:	0800a14c 	.word	0x0800a14c

080005e0 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b090      	sub	sp, #64	; 0x40
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80005ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 80005f6:	2300      	movs	r3, #0
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005fa:	e039      	b.n	8000670 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80005fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	2108      	movs	r1, #8
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fdcc 	bl	80001a2 <lfs_min>
 800060a:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000610:	1ad1      	subs	r1, r2, r3
 8000612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000616:	4413      	add	r3, r2
 8000618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800061a:	9203      	str	r2, [sp, #12]
 800061c:	f107 0214 	add.w	r2, r7, #20
 8000620:	9202      	str	r2, [sp, #8]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	460b      	mov	r3, r1
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	68b9      	ldr	r1, [r7, #8]
 800062e:	68f8      	ldr	r0, [r7, #12]
 8000630:	f7ff fe8a 	bl	8000348 <lfs_bd_read>
 8000634:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000636:	6a3b      	ldr	r3, [r7, #32]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <lfs_bd_cmp+0x60>
            return err;
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	e01c      	b.n	800067a <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000644:	18d1      	adds	r1, r2, r3
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800064c:	4618      	mov	r0, r3
 800064e:	f008 fb8d 	bl	8008d6c <memcmp>
 8000652:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d006      	beq.n	8000668 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	2b00      	cmp	r3, #0
 800065e:	da01      	bge.n	8000664 <lfs_bd_cmp+0x84>
 8000660:	2301      	movs	r3, #1
 8000662:	e00a      	b.n	800067a <lfs_bd_cmp+0x9a>
 8000664:	2302      	movs	r3, #2
 8000666:	e008      	b.n	800067a <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066c:	4413      	add	r3, r2
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000674:	429a      	cmp	r2, r3
 8000676:	d3c1      	bcc.n	80005fc <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3730      	adds	r7, #48	; 0x30
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000682:	b580      	push	{r7, lr}
 8000684:	b08e      	sub	sp, #56	; 0x38
 8000686:	af04      	add	r7, sp, #16
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
 8000698:	e030      	b.n	80006fc <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800069a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	2108      	movs	r1, #8
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fd7d 	bl	80001a2 <lfs_min>
 80006a8:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ae:	1ad1      	subs	r1, r2, r3
 80006b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	4413      	add	r3, r2
 80006b6:	6a3a      	ldr	r2, [r7, #32]
 80006b8:	9203      	str	r2, [sp, #12]
 80006ba:	f107 0214 	add.w	r2, r7, #20
 80006be:	9202      	str	r2, [sp, #8]
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	460b      	mov	r3, r1
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	68b9      	ldr	r1, [r7, #8]
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f7ff fe3b 	bl	8000348 <lfs_bd_read>
 80006d2:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <lfs_bd_crc+0x5c>
            return err;
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	e013      	b.n	8000706 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 80006de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f107 0114 	add.w	r1, r7, #20
 80006e6:	6a3a      	ldr	r2, [r7, #32]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f005 fdad 	bl	8006248 <lfs_crc>
 80006ee:	4602      	mov	r2, r0
 80006f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006f2:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 80006f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	4413      	add	r3, r2
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
 80006fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000700:	429a      	cmp	r2, r3
 8000702:	d3ca      	bcc.n	800069a <lfs_bd_crc+0x18>
    }

    return 0;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af04      	add	r7, sp, #16
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000726:	d060      	beq.n	80007ea <lfs_bd_flush+0xda>
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f113 0f02 	cmn.w	r3, #2
 8000730:	d05b      	beq.n	80007ea <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800073a:	429a      	cmp	r2, r3
 800073c:	d305      	bcc.n	800074a <lfs_bd_flush+0x3a>
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <lfs_bd_flush+0xe4>)
 8000740:	4a2d      	ldr	r2, [pc, #180]	; (80007f8 <lfs_bd_flush+0xe8>)
 8000742:	21b3      	movs	r1, #179	; 0xb3
 8000744:	482d      	ldr	r0, [pc, #180]	; (80007fc <lfs_bd_flush+0xec>)
 8000746:	f008 faa7 	bl	8008c98 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4619      	mov	r1, r3
 8000756:	4610      	mov	r0, r2
 8000758:	f7ff fd46 	bl	80001e8 <lfs_alignup>
 800075c:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000762:	689c      	ldr	r4, [r3, #8]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	6819      	ldr	r1, [r3, #0]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	462b      	mov	r3, r5
 800077a:	47a0      	blx	r4
 800077c:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dd05      	ble.n	8000790 <lfs_bd_flush+0x80>
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <lfs_bd_flush+0xf0>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <lfs_bd_flush+0xe8>)
 8000788:	21b7      	movs	r1, #183	; 0xb7
 800078a:	481c      	ldr	r0, [pc, #112]	; (80007fc <lfs_bd_flush+0xec>)
 800078c:	f008 fa84 	bl	8008c98 <__assert_func>
        if (err) {
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <lfs_bd_flush+0x8a>
            return err;
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	e028      	b.n	80007ec <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d020      	beq.n	80007e2 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f7ff fdac 	bl	8000300 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 80007b4:	69f8      	ldr	r0, [r7, #28]
 80007b6:	9003      	str	r0, [sp, #12]
 80007b8:	9102      	str	r1, [sp, #8]
 80007ba:	9201      	str	r2, [sp, #4]
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	2100      	movs	r1, #0
 80007c4:	68f8      	ldr	r0, [r7, #12]
 80007c6:	f7ff ff0b 	bl	80005e0 <lfs_bd_cmp>
 80007ca:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	da01      	bge.n	80007d6 <lfs_bd_flush+0xc6>
                return res;
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	e00a      	b.n	80007ec <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 80007dc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80007e0:	e004      	b.n	80007ec <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80007e2:	68b9      	ldr	r1, [r7, #8]
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff fd99 	bl	800031c <lfs_cache_zero>
    }

    return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bdb0      	pop	{r4, r5, r7, pc}
 80007f4:	0800a158 	.word	0x0800a158
 80007f8:	0800ac08 	.word	0x0800ac08
 80007fc:	0800a138 	.word	0x0800a138
 8000800:	0800a14c 	.word	0x0800a14c

08000804 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff fd73 	bl	8000300 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	68b9      	ldr	r1, [r7, #8]
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f7ff ff75 	bl	8000710 <lfs_bd_flush>
 8000826:	6178      	str	r0, [r7, #20]
    if (err) {
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <lfs_bd_sync+0x2e>
        return err;
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	e011      	b.n	8000856 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000836:	691b      	ldr	r3, [r3, #16]
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800083c:	4610      	mov	r0, r2
 800083e:	4798      	blx	r3
 8000840:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	2b00      	cmp	r3, #0
 8000846:	dd05      	ble.n	8000854 <lfs_bd_sync+0x50>
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <lfs_bd_sync+0x5c>)
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <lfs_bd_sync+0x60>)
 800084c:	21dd      	movs	r1, #221	; 0xdd
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <lfs_bd_sync+0x64>)
 8000850:	f008 fa22 	bl	8008c98 <__assert_func>
    return err;
 8000854:	697b      	ldr	r3, [r7, #20]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	0800a14c 	.word	0x0800a14c
 8000864:	0800ac18 	.word	0x0800ac18
 8000868:	0800a138 	.word	0x0800a138

0800086c <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000880:	f113 0f02 	cmn.w	r3, #2
 8000884:	d00a      	beq.n	800089c <lfs_bd_prog+0x30>
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800088a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800088c:	429a      	cmp	r2, r3
 800088e:	d305      	bcc.n	800089c <lfs_bd_prog+0x30>
 8000890:	4b47      	ldr	r3, [pc, #284]	; (80009b0 <lfs_bd_prog+0x144>)
 8000892:	4a48      	ldr	r2, [pc, #288]	; (80009b4 <lfs_bd_prog+0x148>)
 8000894:	21e8      	movs	r1, #232	; 0xe8
 8000896:	4848      	ldr	r0, [pc, #288]	; (80009b8 <lfs_bd_prog+0x14c>)
 8000898:	f008 f9fe 	bl	8008c98 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800089c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008a0:	441a      	add	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d978      	bls.n	800099e <lfs_bd_prog+0x132>
 80008ac:	4b43      	ldr	r3, [pc, #268]	; (80009bc <lfs_bd_prog+0x150>)
 80008ae:	4a41      	ldr	r2, [pc, #260]	; (80009b4 <lfs_bd_prog+0x148>)
 80008b0:	21e9      	movs	r1, #233	; 0xe9
 80008b2:	4841      	ldr	r0, [pc, #260]	; (80009b8 <lfs_bd_prog+0x14c>)
 80008b4:	f008 f9f0 	bl	8008c98 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008be:	429a      	cmp	r2, r3
 80008c0:	d151      	bne.n	8000966 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80008c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d34c      	bcc.n	8000966 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d6:	4413      	add	r3, r2
                off >= pcache->off &&
 80008d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008da:	429a      	cmp	r2, r3
 80008dc:	d243      	bcs.n	8000966 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80008e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	6859      	ldr	r1, [r3, #4]
 80008e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ea:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80008ec:	4413      	add	r3, r2
 80008ee:	4619      	mov	r1, r3
 80008f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80008f2:	f7ff fc56 	bl	80001a2 <lfs_min>
 80008f6:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000902:	1acb      	subs	r3, r1, r3
 8000904:	4413      	add	r3, r2
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	69f9      	ldr	r1, [r7, #28]
 800090a:	4618      	mov	r0, r3
 800090c:	f008 fa3c 	bl	8008d88 <memcpy>

            data += diff;
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	4413      	add	r3, r2
 8000916:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	4413      	add	r3, r2
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8000920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	6898      	ldr	r0, [r3, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	4619      	mov	r1, r3
 8000936:	f7ff fc25 	bl	8000184 <lfs_max>
 800093a:	4602      	mov	r2, r0
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094a:	429a      	cmp	r2, r3
 800094c:	d127      	bne.n	800099e <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800094e:	78fb      	ldrb	r3, [r7, #3]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	68b9      	ldr	r1, [r7, #8]
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f7ff fedb 	bl	8000710 <lfs_bd_flush>
 800095a:	6178      	str	r0, [r7, #20]
                if (err) {
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d01d      	beq.n	800099e <lfs_bd_prog+0x132>
                    return err;
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	e01f      	b.n	80009a6 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096e:	d006      	beq.n	800097e <lfs_bd_prog+0x112>
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <lfs_bd_prog+0x154>)
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <lfs_bd_prog+0x148>)
 8000974:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000978:	480f      	ldr	r0, [pc, #60]	; (80009b8 <lfs_bd_prog+0x14c>)
 800097a:	f008 f98d 	bl	8008c98 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000982:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4619      	mov	r1, r3
 800098c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800098e:	f7ff fc17 	bl	80001c0 <lfs_aligndown>
 8000992:	4602      	mov	r2, r0
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800099e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d189      	bne.n	80008b8 <lfs_bd_prog+0x4c>
    }

    return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	0800a17c 	.word	0x0800a17c
 80009b4:	0800ac24 	.word	0x0800ac24
 80009b8:	0800a138 	.word	0x0800a138
 80009bc:	0800a1b4 	.word	0x0800a1b4
 80009c0:	0800a1d8 	.word	0x0800a1d8

080009c4 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d306      	bcc.n	80009e6 <lfs_bd_erase+0x22>
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <lfs_bd_erase+0x54>)
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <lfs_bd_erase+0x58>)
 80009dc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009e0:	480f      	ldr	r0, [pc, #60]	; (8000a20 <lfs_bd_erase+0x5c>)
 80009e2:	f008 f959 	bl	8008c98 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80009f0:	6839      	ldr	r1, [r7, #0]
 80009f2:	4610      	mov	r0, r2
 80009f4:	4798      	blx	r3
 80009f6:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	dd06      	ble.n	8000a0c <lfs_bd_erase+0x48>
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <lfs_bd_erase+0x60>)
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <lfs_bd_erase+0x58>)
 8000a02:	f44f 718b 	mov.w	r1, #278	; 0x116
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <lfs_bd_erase+0x5c>)
 8000a08:	f008 f946 	bl	8008c98 <__assert_func>
    return err;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	0800a1fc 	.word	0x0800a1fc
 8000a1c:	0800ac30 	.word	0x0800ac30
 8000a20:	0800a138 	.word	0x0800a138
 8000a24:	0800a14c 	.word	0x0800a14c

08000a28 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3304      	adds	r3, #4
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	601a      	str	r2, [r3, #0]
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	d005      	beq.n	8000a6e <lfs_pair_isnull+0x1e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3304      	adds	r3, #4
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d101      	bne.n	8000a72 <lfs_pair_isnull+0x22>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <lfs_pair_isnull+0x24>
 8000a72:	2300      	movs	r3, #0
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	b2db      	uxtb	r3, r3
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d017      	beq.n	8000aca <lfs_pair_cmp+0x46>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d00f      	beq.n	8000aca <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d008      	beq.n	8000aca <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3304      	adds	r3, #4
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d001      	beq.n	8000aca <lfs_pair_cmp+0x46>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <lfs_pair_cmp+0x48>
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d107      	bne.n	8000afc <lfs_pair_issync+0x26>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3304      	adds	r3, #4
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	3304      	adds	r3, #4
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d00d      	beq.n	8000b18 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3304      	adds	r3, #4
 8000b04:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d108      	bne.n	8000b1c <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d101      	bne.n	8000b1c <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e000      	b.n	8000b1e <lfs_pair_issync+0x48>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	b2db      	uxtb	r3, r3
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr

08000b2e <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8000b2e:	b590      	push	{r4, r7, lr}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fb9c 	bl	8000278 <lfs_fromle32>
 8000b40:	4602      	mov	r2, r0
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	1d1c      	adds	r4, r3, #4
 8000b50:	4610      	mov	r0, r2
 8000b52:	f7ff fb91 	bl	8000278 <lfs_fromle32>
 8000b56:	4603      	mov	r3, r0
 8000b58:	6023      	str	r3, [r4, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}

08000b62 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8000b62:	b590      	push	{r4, r7, lr}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fb8c 	bl	800028c <lfs_tole32>
 8000b74:	4602      	mov	r2, r0
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1d1c      	adds	r4, r3, #4
 8000b84:	4610      	mov	r0, r2
 8000b86:	f7ff fb81 	bl	800028c <lfs_tole32>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6023      	str	r3, [r4, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}

08000b96 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	0fdb      	lsrs	r3, r3, #31
 8000ba4:	b2db      	uxtb	r3, r3
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	059b      	lsls	r3, r3, #22
 8000bbc:	159b      	asrs	r3, r3, #22
 8000bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc2:	bf0c      	ite	eq
 8000bc4:	2301      	moveq	r3, #1
 8000bc6:	2300      	movne	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	0d1b      	lsrs	r3, r3, #20
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000be6:	b29b      	uxth	r3, r3
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	0d1b      	lsrs	r3, r3, #20
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8000c04:	b29b      	uxth	r3, r3
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	0d1b      	lsrs	r3, r3, #20
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c22:	b29b      	uxth	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr

08000c2e <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	0d1b      	lsrs	r3, r3, #20
 8000c3a:	b2db      	uxtb	r3, r3
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr

08000c46 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffed 	bl	8000c2e <lfs_tag_chunk>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b25b      	sxtb	r3, r3
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	0a9b      	lsrs	r3, r3, #10
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c72:	b29b      	uxth	r3, r3
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff86 	bl	8000bb0 <lfs_tag_isdelete>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ffe6 	bl	8000c7e <lfs_tag_size>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	3304      	adds	r3, #4
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8000cbe:	b480      	push	{r7}
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	e012      	b.n	8000cf4 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	6819      	ldr	r1, [r3, #0]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	4403      	add	r3, r0
 8000cea:	404a      	eors	r2, r1
 8000cec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	dde9      	ble.n	8000cce <lfs_gstate_xor+0x10>
    }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e00b      	b.n	8000d2c <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <lfs_gstate_iszero+0x20>
            return false;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e006      	b.n	8000d34 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	ddf0      	ble.n	8000d14 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr

08000d3e <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff97 	bl	8000c7e <lfs_tag_size>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf14      	ite	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	2300      	moveq	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff84 	bl	8000c7e <lfs_tag_size>
 8000d76:	4603      	mov	r3, r0
 8000d78:	b2db      	uxtb	r3, r3
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff20 	bl	8000bd4 <lfs_tag_type1>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff62 	bl	8000c7e <lfs_tag_size>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	0a5b      	lsrs	r3, r3, #9
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf14      	ite	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	2300      	moveq	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fef8 	bl	8000bd4 <lfs_tag_type1>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00a      	beq.n	8000e00 <lfs_gstate_hasmovehere+0x30>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3304      	adds	r3, #4
 8000dee:	6839      	ldr	r1, [r7, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fe47 	bl	8000a84 <lfs_pair_cmp>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <lfs_gstate_hasmovehere+0x30>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <lfs_gstate_hasmovehere+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fa2b 	bl	8000278 <lfs_fromle32>
 8000e22:	4602      	mov	r2, r0
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fa23 	bl	8000278 <lfs_fromle32>
 8000e32:	4602      	mov	r2, r0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fa1b 	bl	8000278 <lfs_fromle32>
 8000e42:	4602      	mov	r2, r0
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	609a      	str	r2, [r3, #8]
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fa15 	bl	800028c <lfs_tole32>
 8000e62:	4602      	mov	r2, r0
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fa0d 	bl	800028c <lfs_tole32>
 8000e72:	4602      	mov	r2, r0
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fa05 	bl	800028c <lfs_tole32>
 8000e82:	4602      	mov	r2, r0
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	609a      	str	r2, [r3, #8]
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff f9eb 	bl	8000278 <lfs_fromle32>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff f9e3 	bl	8000278 <lfs_fromle32>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	605a      	str	r2, [r3, #4]
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff f9dd 	bl	800028c <lfs_tole32>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff f9d5 	bl	800028c <lfs_tole32>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	605a      	str	r2, [r3, #4]
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff f9bb 	bl	8000278 <lfs_fromle32>
 8000f02:	4602      	mov	r2, r0
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f9b3 	bl	8000278 <lfs_fromle32>
 8000f12:	4602      	mov	r2, r0
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	605a      	str	r2, [r3, #4]
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f9ad 	bl	800028c <lfs_tole32>
 8000f32:	4602      	mov	r2, r0
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f9a5 	bl	800028c <lfs_tole32>
 8000f42:	4602      	mov	r2, r0
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	605a      	str	r2, [r3, #4]
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <lfs_superblock_tole32>:
    superblock->file_max    = lfs_fromle32(superblock->file_max);
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
}

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f995 	bl	800028c <lfs_tole32>
 8000f62:	4602      	mov	r2, r0
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f98d 	bl	800028c <lfs_tole32>
 8000f72:	4602      	mov	r2, r0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff f985 	bl	800028c <lfs_tole32>
 8000f82:	4602      	mov	r2, r0
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f97d 	bl	800028c <lfs_tole32>
 8000f92:	4602      	mov	r2, r0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f975 	bl	800028c <lfs_tole32>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f96d 	bl	800028c <lfs_tole32>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	615a      	str	r2, [r3, #20]
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e009      	b.n	8000fe4 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d101      	bne.n	8000fde <lfs_mlist_isopen+0x1e>
            return true;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e007      	b.n	8000fee <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f1      	bne.n	8000fd0 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3328      	adds	r3, #40	; 0x28
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	e00d      	b.n	8001026 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d105      	bne.n	8001020 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]
            break;
 800101e:	e007      	b.n	8001030 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ed      	bne.n	800100a <lfs_mlist_remove+0x12>
        }
    }
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <lfs_fs_disk_version+0x14>)
    }
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	00020001 	.word	0x00020001

08001074 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800108e:	4413      	add	r3, r2
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->free.off)
 8001094:	fbb3 f1f2 	udiv	r1, r3, r2
 8001098:	fb02 f201 	mul.w	r2, r2, r1
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d212      	bcs.n	80010d0 <lfs_alloc_lookahead+0x5c>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	095b      	lsrs	r3, r3, #5
 80010b2:	009a      	lsls	r2, r3, #2
 80010b4:	440a      	add	r2, r1
 80010b6:	6811      	ldr	r1, [r2, #0]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	f002 021f 	and.w	r2, r2, #31
 80010be:	2001      	movs	r0, #1
 80010c0:	fa00 f202 	lsl.w	r2, r0, r2
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4403      	add	r3, r0
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->block_count;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	661a      	str	r2, [r3, #96]	; 0x60
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffe6 	bl	80010dc <lfs_alloc_ack>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <lfs_fs_rawgc>:

#ifndef LFS_READONLY
static int lfs_fs_rawgc(lfs_t *lfs) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    // Move free offset at the first unused block (lfs->free.i)
    // lfs->free.i is equal lfs->free.size when all blocks are used
    lfs->free.off = (lfs->free.off + lfs->free.i) % lfs->block_count;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	4413      	add	r3, r2
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800112e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001132:	fb02 f201 	mul.w	r2, r2, r1
 8001136:	1a9a      	subs	r2, r3, r2
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	00da      	lsls	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001148:	4619      	mov	r1, r3
 800114a:	4610      	mov	r0, r2
 800114c:	f7ff f829 	bl	80001a2 <lfs_min>
 8001150:	4602      	mov	r2, r0
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	65da      	str	r2, [r3, #92]	; 0x5c

    // find mask of free blocks from tree
    memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	461a      	mov	r2, r3
 8001168:	2100      	movs	r1, #0
 800116a:	f007 fe1b 	bl	8008da4 <memset>
    int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800116e:	2301      	movs	r3, #1
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4909      	ldr	r1, [pc, #36]	; (8001198 <lfs_fs_rawgc+0x80>)
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f004 f999 	bl	80054ac <lfs_fs_rawtraverse>
 800117a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <lfs_fs_rawgc+0x74>
        lfs_alloc_drop(lfs);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffb7 	bl	80010f6 <lfs_alloc_drop>
        return err;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	e000      	b.n	800118e <lfs_fs_rawgc+0x76>
    }

    return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	08001075 	.word	0x08001075

0800119c <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80011a6:	e04e      	b.n	8001246 <lfs_alloc+0xaa>
            lfs_block_t off = lfs->free.i;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ac:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	095b      	lsrs	r3, r3, #5
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	2101      	movs	r1, #1
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	4013      	ands	r3, r2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d131      	bne.n	8001246 <lfs_alloc+0xaa>
                // found a free block
                *block = (lfs->free.off + off) % lfs->block_count;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80011ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80011f2:	fb02 f201 	mul.w	r2, r2, r1
 80011f6:	1a9a      	subs	r2, r3, r2
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80011fc:	e009      	b.n	8001212 <lfs_alloc+0x76>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	429a      	cmp	r2, r3
 800121c:	d011      	beq.n	8001242 <lfs_alloc+0xa6>
                        (lfs->free.buffer[lfs->free.i / 32]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001232:	f003 031f 	and.w	r3, r3, #31
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1dd      	bne.n	80011fe <lfs_alloc+0x62>
                }

                return 0;
 8001242:	2300      	movs	r3, #0
 8001244:	e021      	b.n	800128a <lfs_alloc+0xee>
        while (lfs->free.i != lfs->free.size) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	429a      	cmp	r2, r3
 8001250:	d1aa      	bne.n	80011a8 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10f      	bne.n	800127a <lfs_alloc+0xde>
            LFS_ERROR("No more free space %"PRIu32,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001262:	4413      	add	r3, r2
 8001264:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <lfs_alloc+0xf8>)
 8001266:	9200      	str	r2, [sp, #0]
 8001268:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800126c:	490a      	ldr	r1, [pc, #40]	; (8001298 <lfs_alloc+0xfc>)
 800126e:	480b      	ldr	r0, [pc, #44]	; (800129c <lfs_alloc+0x100>)
 8001270:	f008 f934 	bl	80094dc <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8001274:	f06f 031b 	mvn.w	r3, #27
 8001278:	e007      	b.n	800128a <lfs_alloc+0xee>
        }

        int err = lfs_fs_rawgc(lfs);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff4c 	bl	8001118 <lfs_fs_rawgc>
 8001280:	60f8      	str	r0, [r7, #12]
        if(err) {
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d08e      	beq.n	80011a6 <lfs_alloc+0xa>
            return err;
 8001288:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	0800a240 	.word	0x0800a240
 8001298:	0800a138 	.word	0x0800a138
 800129c:	0800a218 	.word	0x0800a218

080012a0 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b08f      	sub	sp, #60	; 0x3c
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	333c      	adds	r3, #60	; 0x3c
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fd82 	bl	8000dd0 <lfs_gstate_hasmovehere>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80b9 	beq.w	8001446 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(gmask) != 0 &&
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fcc3 	bl	8000c60 <lfs_tag_id>
 80012da:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80b2 	beq.w	8001446 <lfs_dir_getslice+0x1a6>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fcba 	bl	8000c60 <lfs_tag_id>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461c      	mov	r4, r3
 80012f0:	6838      	ldr	r0, [r7, #0]
 80012f2:	f7ff fcb5 	bl	8000c60 <lfs_tag_id>
 80012f6:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 80012f8:	429c      	cmp	r4, r3
 80012fa:	f200 80a4 	bhi.w	8001446 <lfs_dir_getslice+0x1a6>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001304:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001306:	e09e      	b.n	8001446 <lfs_dir_getslice+0x1a6>
        off -= lfs_tag_dsize(ntag);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fcc3 	bl	8000c96 <lfs_tag_dsize>
 8001310:	4602      	mov	r2, r0
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2204      	movs	r2, #4
 8001324:	9203      	str	r2, [sp, #12]
 8001326:	f107 0210 	add.w	r2, r7, #16
 800132a:	9202      	str	r2, [sp, #8]
 800132c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2304      	movs	r3, #4
 8001334:	460a      	mov	r2, r1
 8001336:	2100      	movs	r1, #0
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f7ff f805 	bl	8000348 <lfs_bd_read>
 800133e:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <lfs_dir_getslice+0xaa>
            return err;
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	e089      	b.n	800145e <lfs_dir_getslice+0x1be>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ffa9 	bl	80002a4 <lfs_frombe32>
 8001352:	4602      	mov	r2, r0
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	4053      	eors	r3, r2
 8001358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800135c:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fc7e 	bl	8000c60 <lfs_tag_id>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02b      	beq.n	80013c2 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800136a:	69f8      	ldr	r0, [r7, #28]
 800136c:	f7ff fc32 	bl	8000bd4 <lfs_tag_type1>
 8001370:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001376:	d124      	bne.n	80013c2 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001378:	69f8      	ldr	r0, [r7, #28]
 800137a:	f7ff fc71 	bl	8000c60 <lfs_tag_id>
 800137e:	4603      	mov	r3, r0
 8001380:	461c      	mov	r4, r3
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc69 	bl	8000c60 <lfs_tag_id>
 800138e:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001390:	429c      	cmp	r4, r3
 8001392:	d816      	bhi.n	80013c2 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	1ad2      	subs	r2, r2, r3
 800139a:	4b33      	ldr	r3, [pc, #204]	; (8001468 <lfs_dir_getslice+0x1c8>)
 800139c:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800139e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d102      	bne.n	80013b2 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 80013ac:	f06f 0301 	mvn.w	r3, #1
 80013b0:	e055      	b.n	800145e <lfs_dir_getslice+0x1be>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80013b2:	69f8      	ldr	r0, [r7, #28]
 80013b4:	f7ff fc47 	bl	8000c46 <lfs_tag_splice>
 80013b8:	4603      	mov	r3, r0
 80013ba:	029a      	lsls	r2, r3, #10
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	4413      	add	r3, r2
 80013c0:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	1ad2      	subs	r2, r2, r3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	405a      	eors	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d138      	bne.n	8001446 <lfs_dir_getslice+0x1a6>
            if (lfs_tag_isdelete(tag)) {
 80013d4:	69f8      	ldr	r0, [r7, #28]
 80013d6:	f7ff fbeb 	bl	8000bb0 <lfs_tag_isdelete>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <lfs_dir_getslice+0x146>
                return LFS_ERR_NOENT;
 80013e0:	f06f 0301 	mvn.w	r3, #1
 80013e4:	e03b      	b.n	800145e <lfs_dir_getslice+0x1be>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 80013e6:	69f8      	ldr	r0, [r7, #28]
 80013e8:	f7ff fc49 	bl	8000c7e <lfs_tag_size>
 80013ec:	4603      	mov	r3, r0
 80013ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7fe fed6 	bl	80001a2 <lfs_min>
 80013f6:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 80013fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001402:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001404:	3204      	adds	r2, #4
 8001406:	6979      	ldr	r1, [r7, #20]
 8001408:	9103      	str	r1, [sp, #12]
 800140a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800140c:	9102      	str	r1, [sp, #8]
 800140e:	9201      	str	r2, [sp, #4]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4602      	mov	r2, r0
 8001416:	2100      	movs	r1, #0
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7fe ff95 	bl	8000348 <lfs_bd_read>
 800141e:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <lfs_dir_getslice+0x18a>
                return err;
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	e019      	b.n	800145e <lfs_dir_getslice+0x1be>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800142a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	18d0      	adds	r0, r2, r3
 8001430:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	461a      	mov	r2, r3
 8001438:	2100      	movs	r1, #0
 800143a:	f007 fcb3 	bl	8008da4 <memset>

            return tag + gdiff;
 800143e:	6a3a      	ldr	r2, [r7, #32]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	4413      	add	r3, r2
 8001444:	e00b      	b.n	800145e <lfs_dir_getslice+0x1be>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fc24 	bl	8000c96 <lfs_tag_dsize>
 800144e:	4603      	mov	r3, r0
 8001450:	3304      	adds	r3, #4
 8001452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001454:	429a      	cmp	r2, r3
 8001456:	f4bf af57 	bcs.w	8001308 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800145a:	f06f 0301 	mvn.w	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	372c      	adds	r7, #44	; 0x2c
 8001462:	46bd      	mov	sp, r7
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	bf00      	nop
 8001468:	000ffc00 	.word	0x000ffc00

0800146c <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af04      	add	r7, sp, #16
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800147a:	6838      	ldr	r0, [r7, #0]
 800147c:	f7ff fbff 	bl	8000c7e <lfs_tag_size>
 8001480:	4603      	mov	r3, r0
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	2300      	movs	r3, #0
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7ff ff04 	bl	80012a0 <lfs_dir_getslice>
 8001498:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b08c      	sub	sp, #48	; 0x30
 80014a6:	af04      	add	r7, sp, #16
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80014b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b2:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 80014b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014b8:	441a      	add	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f240 80c0 	bls.w	8001646 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 80014c6:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80014ca:	e0c1      	b.n	8001650 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80014cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ce:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d03f      	beq.n	8001556 <lfs_dir_getread+0xb4>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f113 0f02 	cmn.w	r3, #2
 80014de:	d13a      	bne.n	8001556 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80014ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d232      	bcs.n	8001556 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d324      	bcc.n	8001544 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6859      	ldr	r1, [r3, #4]
 8001502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001504:	1acb      	subs	r3, r1, r3
 8001506:	4413      	add	r3, r2
 8001508:	4619      	mov	r1, r3
 800150a:	69b8      	ldr	r0, [r7, #24]
 800150c:	f7fe fe49 	bl	80001a2 <lfs_min>
 8001510:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800151c:	1acb      	subs	r3, r1, r3
 800151e:	4413      	add	r3, r2
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4619      	mov	r1, r3
 8001524:	69f8      	ldr	r0, [r7, #28]
 8001526:	f007 fc2f 	bl	8008d88 <memcpy>

                data += diff;
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	4413      	add	r3, r2
 8001530:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	4413      	add	r3, r2
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800153a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001542:	e080      	b.n	8001646 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	4619      	mov	r1, r3
 800154e:	69b8      	ldr	r0, [r7, #24]
 8001550:	f7fe fe27 	bl	80001a2 <lfs_min>
 8001554:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f113 0f02 	cmn.w	r3, #2
 800155e:	d13a      	bne.n	80015d6 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800156a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800156c:	429a      	cmp	r2, r3
 800156e:	d232      	bcs.n	80015d6 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001576:	429a      	cmp	r2, r3
 8001578:	d324      	bcc.n	80015c4 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001584:	1acb      	subs	r3, r1, r3
 8001586:	4413      	add	r3, r2
 8001588:	4619      	mov	r1, r3
 800158a:	69b8      	ldr	r0, [r7, #24]
 800158c:	f7fe fe09 	bl	80001a2 <lfs_min>
 8001590:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800159c:	1acb      	subs	r3, r1, r3
 800159e:	4413      	add	r3, r2
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4619      	mov	r1, r3
 80015a4:	69f8      	ldr	r0, [r7, #28]
 80015a6:	f007 fbef 	bl	8008d88 <memcpy>

                data += diff;
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	4413      	add	r3, r2
 80015b0:	61fb      	str	r3, [r7, #28]
                off += diff;
 80015b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	4413      	add	r3, r2
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80015ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80015c2:	e040      	b.n	8001646 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	69b8      	ldr	r0, [r7, #24]
 80015d0:	f7fe fde7 	bl	80001a2 <lfs_min>
 80015d4:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f06f 0201 	mvn.w	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	4619      	mov	r1, r3
 80015e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015e8:	f7fe fdea 	bl	80001c0 <lfs_aligndown>
 80015ec:	4602      	mov	r2, r0
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 80015f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	441a      	add	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4619      	mov	r1, r3
 8001600:	4610      	mov	r0, r2
 8001602:	f7fe fdf1 	bl	80001e8 <lfs_alignup>
 8001606:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f7fe fdc6 	bl	80001a2 <lfs_min>
 8001616:	4602      	mov	r2, r0
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	6889      	ldr	r1, [r1, #8]
 8001628:	9102      	str	r1, [sp, #8]
 800162a:	9201      	str	r2, [sp, #4]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001632:	68b9      	ldr	r1, [r7, #8]
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff fe33 	bl	80012a0 <lfs_dir_getslice>
 800163a:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	da01      	bge.n	8001646 <lfs_dir_getread+0x1a4>
            return err;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	e004      	b.n	8001650 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001648:	2b00      	cmp	r3, #0
 800164a:	f47f af3f 	bne.w	80014cc <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <lfs_dir_traverse_filter+0x1e>
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <lfs_dir_traverse_filter+0xac>)
 8001674:	e000      	b.n	8001678 <lfs_dir_traverse_filter+0x20>
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001678:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	405a      	eors	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d014      	beq.n	80016b4 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fa8e 	bl	8000bb0 <lfs_tag_isdelete>
 8001694:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <lfs_dir_traverse_filter+0xac>)
 800169e:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <lfs_dir_traverse_filter+0xb4>)
 80016a6:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80016a8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80016ac:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d104      	bne.n	80016be <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
        return true;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e01e      	b.n	80016fc <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f7ff fa88 	bl	8000bd4 <lfs_tag_type1>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d116      	bne.n	80016fa <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 80016cc:	68b8      	ldr	r0, [r7, #8]
 80016ce:	f7ff fac7 	bl	8000c60 <lfs_tag_id>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461c      	mov	r4, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fac0 	bl	8000c60 <lfs_tag_id>
 80016e0:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80016e2:	429c      	cmp	r4, r3
 80016e4:	d809      	bhi.n	80016fa <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80016e6:	68b8      	ldr	r0, [r7, #8]
 80016e8:	f7ff faad 	bl	8000c46 <lfs_tag_splice>
 80016ec:	4603      	mov	r3, r0
 80016ee:	029a      	lsls	r2, r3, #10
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	441a      	add	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	601a      	str	r2, [r3, #0]
    }

    return false;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	371c      	adds	r7, #28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	7ffffc00 	.word	0x7ffffc00
 8001708:	700ffc00 	.word	0x700ffc00
 800170c:	000ffc00 	.word	0x000ffc00

08001710 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b0c1      	sub	sp, #260	; 0x104
 8001714:	af04      	add	r7, sp, #16
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8001724:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800172e:	6838      	ldr	r0, [r7, #0]
 8001730:	f7ff fab1 	bl	8000c96 <lfs_tag_dsize>
 8001734:	4602      	mov	r2, r0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	441a      	add	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	429a      	cmp	r2, r3
 8001740:	d237      	bcs.n	80017b2 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8001742:	6838      	ldr	r0, [r7, #0]
 8001744:	f7ff faa7 	bl	8000c96 <lfs_tag_dsize>
 8001748:	4602      	mov	r2, r0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001750:	68f9      	ldr	r1, [r7, #12]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2204      	movs	r2, #4
 8001758:	9203      	str	r2, [sp, #12]
 800175a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800175e:	9202      	str	r2, [sp, #8]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	9201      	str	r2, [sp, #4]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2304      	movs	r3, #4
 8001768:	460a      	mov	r2, r1
 800176a:	2100      	movs	r1, #0
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f7fe fdeb 	bl	8000348 <lfs_bd_read>
 8001772:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
                if (err) {
 8001776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <lfs_dir_traverse+0x74>
                    return err;
 800177e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001782:	e3d0      	b.n	8001f26 <lfs_dir_traverse+0x816>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fd8c 	bl	80002a4 <lfs_frombe32>
 800178c:	4602      	mov	r2, r0
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	4053      	eors	r3, r2
 8001792:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001796:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3304      	adds	r3, #4
 80017a2:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 80017a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 80017ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	e01b      	b.n	80017ea <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 80017b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dd13      	ble.n	80017e2 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 80017ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 80017c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 80017cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80017d0:	3308      	adds	r3, #8
 80017d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 80017d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017da:	3b01      	subs	r3, #1
 80017dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017e0:	e003      	b.n	80017ea <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 80017e8:	e2bd      	b.n	8001d66 <lfs_dir_traverse+0x656>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 80017ea:	4b86      	ldr	r3, [pc, #536]	; (8001a04 <lfs_dir_traverse+0x2f4>)
 80017ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 80017f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017f6:	405a      	eors	r2, r3
 80017f8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80017fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001800:	400b      	ands	r3, r1
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	f040 82a1 	bne.w	8001d4c <lfs_dir_traverse+0x63c>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800180a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800180e:	f7ff fa27 	bl	8000c60 <lfs_tag_id>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80ff 	beq.w	8001a18 <lfs_dir_traverse+0x308>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800181a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800181e:	2b02      	cmp	r3, #2
 8001820:	d906      	bls.n	8001830 <lfs_dir_traverse+0x120>
 8001822:	4b79      	ldr	r3, [pc, #484]	; (8001a08 <lfs_dir_traverse+0x2f8>)
 8001824:	4a79      	ldr	r2, [pc, #484]	; (8001a0c <lfs_dir_traverse+0x2fc>)
 8001826:	f240 319f 	movw	r1, #927	; 0x39f
 800182a:	4879      	ldr	r0, [pc, #484]	; (8001a10 <lfs_dir_traverse+0x300>)
 800182c:	f007 fa34 	bl	8008c98 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8001830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001832:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001836:	4613      	mov	r3, r2
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001842:	4413      	add	r3, r2
 8001844:	3b98      	subs	r3, #152	; 0x98
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800185a:	4413      	add	r3, r2
 800185c:	3b94      	subs	r3, #148	; 0x94
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001866:	4613      	mov	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001872:	4413      	add	r3, r2
 8001874:	3b90      	subs	r3, #144	; 0x90
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800187e:	4613      	mov	r3, r2
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800188a:	4413      	add	r3, r2
 800188c:	3b8c      	subs	r3, #140	; 0x8c
 800188e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80018a4:	4413      	add	r3, r2
 80018a6:	3b88      	subs	r3, #136	; 0x88
 80018a8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80018be:	4413      	add	r3, r2
 80018c0:	3b84      	subs	r3, #132	; 0x84
 80018c2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80018d8:	4413      	add	r3, r2
 80018da:	3b80      	subs	r3, #128	; 0x80
 80018dc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80018f2:	4413      	add	r3, r2
 80018f4:	3b7c      	subs	r3, #124	; 0x7c
 80018f6:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80018fa:	801a      	strh	r2, [r3, #0]
 80018fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001900:	4613      	mov	r3, r2
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800190c:	4413      	add	r3, r2
 800190e:	3b7a      	subs	r3, #122	; 0x7a
 8001910:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001914:	801a      	strh	r2, [r3, #0]
 8001916:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800191a:	4613      	mov	r3, r2
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001926:	4413      	add	r3, r2
 8001928:	3b78      	subs	r3, #120	; 0x78
 800192a:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800192e:	801a      	strh	r2, [r3, #0]
 8001930:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001934:	4613      	mov	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001940:	4413      	add	r3, r2
 8001942:	3b74      	subs	r3, #116	; 0x74
 8001944:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800195a:	4413      	add	r3, r2
 800195c:	3b70      	subs	r3, #112	; 0x70
 800195e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001968:	4613      	mov	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001974:	4413      	add	r3, r2
 8001976:	3b6c      	subs	r3, #108	; 0x6c
 8001978:	6019      	str	r1, [r3, #0]
 800197a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800197e:	4613      	mov	r3, r2
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800198a:	4413      	add	r3, r2
 800198c:	3b68      	subs	r3, #104	; 0x68
 800198e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80019a4:	4413      	add	r3, r2
 80019a6:	3b68      	subs	r3, #104	; 0x68
 80019a8:	3304      	adds	r3, #4
 80019aa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80019ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019b2:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80019b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80019ba:	3301      	adds	r3, #1
 80019bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <lfs_dir_traverse+0x304>)
 80019e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 80019e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80019e8:	1e5a      	subs	r2, r3, #1
 80019ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80019ee:	4613      	mov	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	3328      	adds	r3, #40	; 0x28
 80019f8:	440b      	add	r3, r1
 80019fa:	3304      	adds	r3, #4
 80019fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a00:	e695      	b.n	800172e <lfs_dir_traverse+0x1e>
 8001a02:	bf00      	nop
 8001a04:	7ff00000 	.word	0x7ff00000
 8001a08:	0800a244 	.word	0x0800a244
 8001a0c:	0800ac40 	.word	0x0800ac40
 8001a10:	0800a138 	.word	0x0800a138
 8001a14:	08001659 	.word	0x08001659
                continue;
            }
        }

popped:
 8001a18:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8001a1a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001a1e:	f7ff f91f 	bl	8000c60 <lfs_tag_id>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d015      	beq.n	8001a54 <lfs_dir_traverse+0x344>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f918 	bl	8000c60 <lfs_tag_id>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8001a34:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	f200 8189 	bhi.w	8001d50 <lfs_dir_traverse+0x640>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8001a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff f90d 	bl	8000c60 <lfs_tag_id>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	f240 817e 	bls.w	8001d50 <lfs_dir_traverse+0x640>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8001a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f8da 	bl	8000c10 <lfs_tag_type3>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f43f ae65 	beq.w	800172e <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8001a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f8d2 	bl	8000c10 <lfs_tag_type3>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f240 1301 	movw	r3, #257	; 0x101
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 80ed 	bne.w	8001c54 <lfs_dir_traverse+0x544>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8001a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a7e:	4ab7      	ldr	r2, [pc, #732]	; (8001d5c <lfs_dir_traverse+0x64c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	f000 8167 	beq.w	8001d54 <lfs_dir_traverse+0x644>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8001a86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	1a9b      	subs	r3, r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001a96:	4413      	add	r3, r2
 8001a98:	3b98      	subs	r3, #152	; 0x98
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	233c      	movs	r3, #60	; 0x3c
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	f007 f97f 	bl	8008da4 <memset>
 8001aa6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b98      	subs	r3, #152	; 0x98
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	011b      	lsls	r3, r3, #4
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b94      	subs	r3, #148	; 0x94
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ada:	4613      	mov	r3, r2
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b90      	subs	r3, #144	; 0x90
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001af2:	4613      	mov	r3, r2
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001afe:	4413      	add	r3, r2
 8001b00:	3b8c      	subs	r3, #140	; 0x8c
 8001b02:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001b18:	4413      	add	r3, r2
 8001b1a:	3b88      	subs	r3, #136	; 0x88
 8001b1c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001b26:	4613      	mov	r3, r2
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001b32:	4413      	add	r3, r2
 8001b34:	3b84      	subs	r3, #132	; 0x84
 8001b36:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001b40:	4613      	mov	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3b80      	subs	r3, #128	; 0x80
 8001b50:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001b66:	4413      	add	r3, r2
 8001b68:	3b7c      	subs	r3, #124	; 0x7c
 8001b6a:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001b80:	4413      	add	r3, r2
 8001b82:	3b7a      	subs	r3, #122	; 0x7a
 8001b84:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001b88:	801a      	strh	r2, [r3, #0]
 8001b8a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3b78      	subs	r3, #120	; 0x78
 8001b9e:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8001ba2:	801a      	strh	r2, [r3, #0]
 8001ba4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001ba8:	4613      	mov	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3b74      	subs	r3, #116	; 0x74
 8001bb8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b70      	subs	r3, #112	; 0x70
 8001bd2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001bd6:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8001bd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8001be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff f84a 	bl	8000c7e <lfs_tag_size>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8001bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f834 	bl	8000c60 <lfs_tag_id>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8001bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c02:	60bb      	str	r3, [r7, #8]
            off = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0c:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8001c1a:	4b51      	ldr	r3, [pc, #324]	; (8001d60 <lfs_dir_traverse+0x650>)
 8001c1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8001c20:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8001c28:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001c2c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8001c30:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001c34:	3301      	adds	r3, #1
 8001c36:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8001c3a:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8001c3e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8001c52:	e56c      	b.n	800172e <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8001c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe ffda 	bl	8000c10 <lfs_tag_type3>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001c62:	d159      	bne.n	8001d18 <lfs_dir_traverse+0x608>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c6a:	e04b      	b.n	8001d04 <lfs_dir_traverse+0x5f4>
                const struct lfs_attr *a = buffer;
 8001c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8001c74:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	461a      	mov	r2, r3
 8001c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c86:	4413      	add	r3, r2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c8e:	051c      	lsls	r4, r3, #20
 8001c90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe ffe4 	bl	8000c60 <lfs_tag_id>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8001ca0:	4413      	add	r3, r2
 8001ca2:	029b      	lsls	r3, r3, #10
 8001ca4:	ea44 0103 	orr.w	r1, r4, r3
 8001ca8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001cba:	4413      	add	r3, r2
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8001cc0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8001cd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001cda:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001cde:	4798      	blx	r3
 8001ce0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8001ce4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	da02      	bge.n	8001cf2 <lfs_dir_traverse+0x5e2>
                    return res;
 8001cec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cf0:	e119      	b.n	8001f26 <lfs_dir_traverse+0x816>
                }

                if (res) {
 8001cf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d12e      	bne.n	8001d58 <lfs_dir_traverse+0x648>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8001cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe ffb9 	bl	8000c7e <lfs_tag_size>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d3aa      	bcc.n	8001c6c <lfs_dir_traverse+0x55c>
 8001d16:	e50a      	b.n	800172e <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8001d18:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8001d1c:	029a      	lsls	r2, r3, #10
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d20:	18d1      	adds	r1, r2, r3
 8001d22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001d26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001d2a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001d2e:	4798      	blx	r3
 8001d30:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8001d34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	da02      	bge.n	8001d42 <lfs_dir_traverse+0x632>
                return res;
 8001d3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d40:	e0f1      	b.n	8001f26 <lfs_dir_traverse+0x816>
            }

            if (res) {
 8001d42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <lfs_dir_traverse+0x654>
 8001d4a:	e4f0      	b.n	800172e <lfs_dir_traverse+0x1e>
                continue;
 8001d4c:	bf00      	nop
 8001d4e:	e4ee      	b.n	800172e <lfs_dir_traverse+0x1e>
            continue;
 8001d50:	bf00      	nop
 8001d52:	e4ec      	b.n	800172e <lfs_dir_traverse+0x1e>
                continue;
 8001d54:	bf00      	nop
 8001d56:	e4ea      	b.n	800172e <lfs_dir_traverse+0x1e>
                    break;
 8001d58:	bf00      	nop
        {
 8001d5a:	e4e8      	b.n	800172e <lfs_dir_traverse+0x1e>
 8001d5c:	08001659 	.word	0x08001659
 8001d60:	600ffc00 	.word	0x600ffc00
                break;
 8001d64:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8001d66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80d9 	beq.w	8001f22 <lfs_dir_traverse+0x812>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8001d70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	4613      	mov	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d82:	4413      	add	r3, r2
 8001d84:	3b98      	subs	r3, #152	; 0x98
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8001d8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001d8e:	1e5a      	subs	r2, r3, #1
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3b94      	subs	r3, #148	; 0x94
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8001da4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001da8:	1e5a      	subs	r2, r3, #1
 8001daa:	4613      	mov	r3, r2
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001db6:	4413      	add	r3, r2
 8001db8:	3b90      	subs	r3, #144	; 0x90
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8001dbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001dc2:	1e5a      	subs	r2, r3, #1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3b8c      	subs	r3, #140	; 0x8c
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8001dda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001dde:	1e5a      	subs	r2, r3, #1
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001dec:	4413      	add	r3, r2
 8001dee:	3b88      	subs	r3, #136	; 0x88
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8001df6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b84      	subs	r3, #132	; 0x84
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8001e12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e16:	1e5a      	subs	r2, r3, #1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e24:	4413      	add	r3, r2
 8001e26:	3b80      	subs	r3, #128	; 0x80
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8001e2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e32:	1e5a      	subs	r2, r3, #1
 8001e34:	4613      	mov	r3, r2
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e40:	4413      	add	r3, r2
 8001e42:	3b7c      	subs	r3, #124	; 0x7c
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8001e4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e4e:	1e5a      	subs	r2, r3, #1
 8001e50:	4613      	mov	r3, r2
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b7a      	subs	r3, #122	; 0x7a
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8001e66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b78      	subs	r3, #120	; 0x78
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8001e82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e86:	1e5a      	subs	r2, r3, #1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001e94:	4413      	add	r3, r2
 8001e96:	3b74      	subs	r3, #116	; 0x74
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8001e9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ea2:	1e5a      	subs	r2, r3, #1
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b70      	subs	r3, #112	; 0x70
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 8001eba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b6c      	subs	r3, #108	; 0x6c
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8001ed4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	4613      	mov	r3, r2
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b68      	subs	r3, #104	; 0x68
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 8001ef0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001f02:	4413      	add	r3, r2
 8001f04:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8001f08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f0c:	3204      	adds	r2, #4
 8001f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f12:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8001f16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 8001f20:	e57b      	b.n	8001a1a <lfs_dir_traverse+0x30a>
    } else {
        return res;
 8001f22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	37f4      	adds	r7, #244	; 0xf4
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd90      	pop	{r4, r7, pc}
 8001f2e:	bf00      	nop

08001f30 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f32:	b0a5      	sub	sp, #148	; 0x94
 8001f34:	af04      	add	r7, sp, #16
 8001f36:	6178      	str	r0, [r7, #20]
 8001f38:	6139      	str	r1, [r7, #16]
 8001f3a:	60fa      	str	r2, [r7, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00f      	beq.n	8001f6c <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d206      	bcs.n	8001f66 <lfs_dir_fetchmatch+0x36>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d302      	bcc.n	8001f6c <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 8001f66:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001f6a:	e39d      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f70:	2300      	movs	r3, #0
 8001f72:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8001f78:	2300      	movs	r3, #0
 8001f7a:	677b      	str	r3, [r7, #116]	; 0x74
 8001f7c:	e056      	b.n	800202c <lfs_dir_fetchmatch+0xfc>
        int err = lfs_bd_read(lfs,
 8001f7e:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8001f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8001f88:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8001f8a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001f8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8001f94:	2104      	movs	r1, #4
 8001f96:	9103      	str	r1, [sp, #12]
 8001f98:	9202      	str	r2, [sp, #8]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	9201      	str	r2, [sp, #4]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7fe f9ce 	bl	8000348 <lfs_bd_read>
 8001fac:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8001fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe f95b 	bl	8000278 <lfs_fromle32>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001fcc:	440b      	add	r3, r1
 8001fce:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 8001fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <lfs_dir_fetchmatch+0xb4>
 8001fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fda:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8001fde:	d001      	beq.n	8001fe4 <lfs_dir_fetchmatch+0xb4>
            return err;
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe2:	e361      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
        }

        if (err != LFS_ERR_CORRUPT &&
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8001fea:	d01c      	beq.n	8002026 <lfs_dir_fetchmatch+0xf6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 8001fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8001ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	bfb8      	it	lt
 8002006:	425b      	neglt	r3, r3
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800200e:	440b      	add	r3, r1
 8002010:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f7fe f921 	bl	800025e <lfs_scmp>
 800201c:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	dd01      	ble.n	8002026 <lfs_dir_fetchmatch+0xf6>
            r = i;
 8002022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002024:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8002026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002028:	3301      	adds	r3, #1
 800202a:	677b      	str	r3, [r7, #116]	; 0x74
 800202c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800202e:	2b01      	cmp	r3, #1
 8002030:	dda5      	ble.n	8001f7e <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002034:	2b00      	cmp	r3, #0
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	bfb8      	it	lt
 800203c:	425b      	neglt	r3, r3
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800204a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800204c:	3301      	adds	r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	bfb8      	it	lt
 8002056:	425b      	neglt	r3, r3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002066:	2b00      	cmp	r3, #0
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	bfb8      	it	lt
 800206e:	425b      	neglt	r3, r3
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002076:	4413      	add	r3, r2
 8002078:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002086:	2300      	movs	r3, #0
 8002088:	673b      	str	r3, [r7, #112]	; 0x70
 800208a:	e2f9      	b.n	8002680 <lfs_dir_fetchmatch+0x750>
        lfs_off_t off = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800209c:	4aa8      	ldr	r2, [pc, #672]	; (8002340 <lfs_dir_fetchmatch+0x410>)
 800209e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a6:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 80020b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020b2:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe f8e1 	bl	800028c <lfs_tole32>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	3308      	adds	r3, #8
 80020d4:	2204      	movs	r2, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f004 f8b4 	bl	8006248 <lfs_crc>
 80020e0:	4603      	mov	r3, r0
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe f8c5 	bl	8000278 <lfs_fromle32>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80020f4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80020f6:	f7fe fdce 	bl	8000c96 <lfs_tag_dsize>
 80020fa:	4602      	mov	r2, r0
 80020fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fe:	4413      	add	r3, r2
 8002100:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 8002102:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002108:	69d8      	ldr	r0, [r3, #28]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2204      	movs	r2, #4
 8002110:	9203      	str	r2, [sp, #12]
 8002112:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002116:	9202      	str	r2, [sp, #8]
 8002118:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800211a:	9201      	str	r2, [sp, #4]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	4603      	mov	r3, r0
 8002120:	460a      	mov	r2, r1
 8002122:	2100      	movs	r1, #0
 8002124:	6978      	ldr	r0, [r7, #20]
 8002126:	f7fe f90f 	bl	8000348 <lfs_bd_read>
 800212a:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800212c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800212e:	2b00      	cmp	r3, #0
 8002130:	d006      	beq.n	8002140 <lfs_dir_fetchmatch+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8002132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002134:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002138:	f000 81d5 	beq.w	80024e6 <lfs_dir_fetchmatch+0x5b6>
                    // can't continue?
                    break;
                }
                return err;
 800213c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213e:	e2b3      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002146:	2204      	movs	r2, #4
 8002148:	4618      	mov	r0, r3
 800214a:	f004 f87d 	bl	8006248 <lfs_crc>
 800214e:	4603      	mov	r3, r0
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8002152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f8a5 	bl	80002a4 <lfs_frombe32>
 800215a:	4602      	mov	r2, r0
 800215c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800215e:	4053      	eors	r3, r2
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fd16 	bl	8000b96 <lfs_tag_isvalid>
 800216a:	4603      	mov	r3, r0
 800216c:	f083 0301 	eor.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <lfs_dir_fetchmatch+0x25e>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8002176:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002178:	f7fe fd3b 	bl	8000bf2 <lfs_tag_type2>
 800217c:	4603      	mov	r3, r0
 800217e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 800218c:	e1ba      	b.n	8002504 <lfs_dir_fetchmatch+0x5d4>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fd80 	bl	8000c96 <lfs_tag_dsize>
 8002196:	4602      	mov	r2, r0
 8002198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219a:	441a      	add	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	f200 81a1 	bhi.w	80024ea <lfs_dir_fetchmatch+0x5ba>
                break;
            }

            ptag = tag;
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 80021ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fd1f 	bl	8000bf2 <lfs_tag_type2>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80021ba:	d15e      	bne.n	800227a <lfs_dir_fetchmatch+0x34a>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80021bc:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80021c2:	69dc      	ldr	r4, [r3, #28]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021ca:	3204      	adds	r2, #4
 80021cc:	2104      	movs	r1, #4
 80021ce:	9103      	str	r1, [sp, #12]
 80021d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021d4:	9102      	str	r1, [sp, #8]
 80021d6:	9201      	str	r2, [sp, #4]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	4623      	mov	r3, r4
 80021dc:	4602      	mov	r2, r0
 80021de:	2100      	movs	r1, #0
 80021e0:	6978      	ldr	r0, [r7, #20]
 80021e2:	f7fe f8b1 	bl	8000348 <lfs_bd_read>
 80021e6:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80021e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <lfs_dir_fetchmatch+0x2cc>
                    if (err == LFS_ERR_CORRUPT) {
 80021ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021f0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80021f4:	f000 817b 	beq.w	80024ee <lfs_dir_fetchmatch+0x5be>
                        break;
                    }
                    return err;
 80021f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 80021fa:	e255      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
                }
                dcrc = lfs_fromle32(dcrc);
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe f83a 	bl	8000278 <lfs_fromle32>
 8002204:	4603      	mov	r3, r0
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 8002208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8170 	bne.w	80024f2 <lfs_dir_fetchmatch+0x5c2>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe fd0a 	bl	8000c2e <lfs_tag_chunk>
 800221a:	4603      	mov	r3, r0
 800221c:	07db      	lsls	r3, r3, #31
 800221e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002220:	4053      	eors	r3, r2
 8002222:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800222c:	2204      	movs	r2, #4
 800222e:	4618      	mov	r0, r3
 8002230:	f004 f80a 	bl	8006248 <lfs_crc>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800223a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800223c:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fd28 	bl	8000c96 <lfs_tag_dsize>
 8002246:	4602      	mov	r2, r0
 8002248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800224a:	441a      	add	r2, r3
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002254:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800225c:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800225e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8002270:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002272:	f04f 33ff 	mov.w	r3, #4294967295
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
 8002278:	e73c      	b.n	80020f4 <lfs_dir_fetchmatch+0x1c4>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800227a:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            err = lfs_bd_crc(lfs,
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	681c      	ldr	r4, [r3, #0]
 8002288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228a:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fd01 	bl	8000c96 <lfs_tag_dsize>
 8002294:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8002296:	3b04      	subs	r3, #4
 8002298:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800229c:	9203      	str	r2, [sp, #12]
 800229e:	9302      	str	r3, [sp, #8]
 80022a0:	9501      	str	r5, [sp, #4]
 80022a2:	9400      	str	r4, [sp, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4632      	mov	r2, r6
 80022a8:	2100      	movs	r1, #0
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7fe f9e9 	bl	8000682 <lfs_bd_crc>
 80022b0:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 80022b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <lfs_dir_fetchmatch+0x396>
                if (err == LFS_ERR_CORRUPT) {
 80022b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80022be:	f000 811a 	beq.w	80024f6 <lfs_dir_fetchmatch+0x5c6>
                    break;
                }
                return err;
 80022c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c4:	e1f0      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fc83 	bl	8000bd4 <lfs_tag_type1>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d113      	bne.n	80022fc <lfs_dir_fetchmatch+0x3cc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fcc2 	bl	8000c60 <lfs_tag_id>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80022e4:	4293      	cmp	r3, r2
 80022e6:	f200 80b5 	bhi.w	8002454 <lfs_dir_fetchmatch+0x524>
                    tempcount = lfs_tag_id(tag) + 1;
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fcb7 	bl	8000c60 <lfs_tag_id>
 80022f2:	4603      	mov	r3, r0
 80022f4:	3301      	adds	r3, #1
 80022f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80022fa:	e0ab      	b.n	8002454 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fc68 	bl	8000bd4 <lfs_tag_type1>
 8002304:	4603      	mov	r3, r0
 8002306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230a:	d139      	bne.n	8002380 <lfs_dir_fetchmatch+0x450>
                tempcount += lfs_tag_splice(tag);
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fc99 	bl	8000c46 <lfs_tag_splice>
 8002314:	4603      	mov	r3, r0
 8002316:	b29a      	uxth	r2, r3
 8002318:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800231c:	4413      	add	r3, r2
 800231e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002322:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <lfs_dir_fetchmatch+0x414>)
 8002326:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002328:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800232c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002332:	4293      	cmp	r3, r2
 8002334:	d108      	bne.n	8002348 <lfs_dir_fetchmatch+0x418>
                    tempbesttag |= 0x80000000;
 8002336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800233c:	663b      	str	r3, [r7, #96]	; 0x60
 800233e:	e089      	b.n	8002454 <lfs_dir_fetchmatch+0x524>
 8002340:	0800a284 	.word	0x0800a284
 8002344:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8002348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	f000 8081 	beq.w	8002454 <lfs_dir_fetchmatch+0x524>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fc83 	bl	8000c60 <lfs_tag_id>
 800235a:	4603      	mov	r3, r0
 800235c:	461c      	mov	r4, r3
 800235e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fc7d 	bl	8000c60 <lfs_tag_id>
 8002366:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002368:	429c      	cmp	r4, r3
 800236a:	d873      	bhi.n	8002454 <lfs_dir_fetchmatch+0x524>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fc69 	bl	8000c46 <lfs_tag_splice>
 8002374:	4603      	mov	r3, r0
 8002376:	029a      	lsls	r2, r3, #10
 8002378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800237a:	4413      	add	r3, r2
 800237c:	663b      	str	r3, [r7, #96]	; 0x60
 800237e:	e069      	b.n	8002454 <lfs_dir_fetchmatch+0x524>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fc26 	bl	8000bd4 <lfs_tag_type1>
 8002388:	4603      	mov	r3, r0
 800238a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800238e:	d132      	bne.n	80023f6 <lfs_dir_fetchmatch+0x4c6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fc4b 	bl	8000c2e <lfs_tag_chunk>
 8002398:	4603      	mov	r3, r0
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 80023aa:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 80023b0:	69dc      	ldr	r4, [r3, #28]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023b8:	3204      	adds	r2, #4
 80023ba:	2108      	movs	r1, #8
 80023bc:	9103      	str	r1, [sp, #12]
 80023be:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80023c2:	9102      	str	r1, [sp, #8]
 80023c4:	9201      	str	r2, [sp, #4]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4623      	mov	r3, r4
 80023ca:	4602      	mov	r2, r0
 80023cc:	2100      	movs	r1, #0
 80023ce:	6978      	ldr	r0, [r7, #20]
 80023d0:	f7fd ffba 	bl	8000348 <lfs_bd_read>
 80023d4:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80023d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <lfs_dir_fetchmatch+0x4ba>
                    if (err == LFS_ERR_CORRUPT) {
 80023dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023de:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80023e2:	f000 808a 	beq.w	80024fa <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 80023e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e8:	e15e      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
                }
                lfs_pair_fromle32(temptail);
 80023ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fb9d 	bl	8000b2e <lfs_pair_fromle32>
 80023f4:	e02e      	b.n	8002454 <lfs_dir_fetchmatch+0x524>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fc09 	bl	8000c10 <lfs_tag_type3>
 80023fe:	4603      	mov	r3, r0
 8002400:	461a      	mov	r2, r3
 8002402:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002406:	429a      	cmp	r2, r3
 8002408:	d124      	bne.n	8002454 <lfs_dir_fetchmatch+0x524>
                err = lfs_bd_read(lfs,
 800240a:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8002410:	69dc      	ldr	r4, [r3, #28]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002418:	3204      	adds	r2, #4
 800241a:	2108      	movs	r1, #8
 800241c:	9103      	str	r1, [sp, #12]
 800241e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002422:	9102      	str	r1, [sp, #8]
 8002424:	9201      	str	r2, [sp, #4]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4623      	mov	r3, r4
 800242a:	4602      	mov	r2, r0
 800242c:	2100      	movs	r1, #0
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7fd ff8a 	bl	8000348 <lfs_bd_read>
 8002434:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8002436:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <lfs_dir_fetchmatch+0x514>
                    if (err == LFS_ERR_CORRUPT) {
 800243c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800243e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002442:	d05c      	beq.n	80024fe <lfs_dir_fetchmatch+0x5ce>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002444:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fd21 	bl	8000e90 <lfs_fcrc_fromle32>
                hasfcrc = true;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002456:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800245a:	405a      	eors	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	f47f ae47 	bne.w	80020f4 <lfs_dir_fetchmatch+0x1c4>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800246c:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800246e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002470:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
 8002474:	f107 0220 	add.w	r2, r7, #32
 8002478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800247c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002480:	4798      	blx	r3
 8002482:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8002484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002486:	2b00      	cmp	r3, #0
 8002488:	da05      	bge.n	8002496 <lfs_dir_fetchmatch+0x566>
                    if (res == LFS_ERR_CORRUPT) {
 800248a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002490:	d037      	beq.n	8002502 <lfs_dir_fetchmatch+0x5d2>
                        break;
                    }
                    return res;
 8002492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8002494:	e108      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
                }

                if (res == LFS_CMP_EQ) {
 8002496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002498:	2b00      	cmp	r3, #0
 800249a:	d102      	bne.n	80024a2 <lfs_dir_fetchmatch+0x572>
                    // found a match
                    tempbesttag = tag;
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	663b      	str	r3, [r7, #96]	; 0x60
 80024a0:	e628      	b.n	80020f4 <lfs_dir_fetchmatch+0x1c4>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 80024a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a6:	405a      	eors	r2, r3
 80024a8:	4b81      	ldr	r3, [pc, #516]	; (80026b0 <lfs_dir_fetchmatch+0x780>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d103      	bne.n	80024b8 <lfs_dir_fetchmatch+0x588>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	663b      	str	r3, [r7, #96]	; 0x60
 80024b6:	e61d      	b.n	80020f4 <lfs_dir_fetchmatch+0x1c4>
                } else if (res == LFS_CMP_GT &&
 80024b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f47f ae1a 	bne.w	80020f4 <lfs_dir_fetchmatch+0x1c4>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fbcc 	bl	8000c60 <lfs_tag_id>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461c      	mov	r4, r3
 80024cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fbc6 	bl	8000c60 <lfs_tag_id>
 80024d4:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 80024d6:	429c      	cmp	r4, r3
 80024d8:	f63f ae0c 	bhi.w	80020f4 <lfs_dir_fetchmatch+0x1c4>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024e2:	663b      	str	r3, [r7, #96]	; 0x60
 80024e4:	e606      	b.n	80020f4 <lfs_dir_fetchmatch+0x1c4>
                    break;
 80024e6:	bf00      	nop
 80024e8:	e00c      	b.n	8002504 <lfs_dir_fetchmatch+0x5d4>
                break;
 80024ea:	bf00      	nop
 80024ec:	e00a      	b.n	8002504 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80024ee:	bf00      	nop
 80024f0:	e008      	b.n	8002504 <lfs_dir_fetchmatch+0x5d4>
                    break;
 80024f2:	bf00      	nop
 80024f4:	e006      	b.n	8002504 <lfs_dir_fetchmatch+0x5d4>
                    break;
 80024f6:	bf00      	nop
 80024f8:	e004      	b.n	8002504 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80024fa:	bf00      	nop
 80024fc:	e002      	b.n	8002504 <lfs_dir_fetchmatch+0x5d4>
                        break;
 80024fe:	bf00      	nop
 8002500:	e000      	b.n	8002504 <lfs_dir_fetchmatch+0x5d4>
                        break;
 8002502:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d000      	beq.n	800250e <lfs_dir_fetchmatch+0x5de>
 800250c:	e016      	b.n	800253c <lfs_dir_fetchmatch+0x60c>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fa89 	bl	8000a28 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002518:	3301      	adds	r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	bfb8      	it	lt
 8002522:	425b      	neglt	r3, r3
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800252a:	4413      	add	r3, r2
 800252c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002536:	3301      	adds	r3, #1
 8002538:	673b      	str	r3, [r7, #112]	; 0x70
 800253a:	e0a1      	b.n	8002680 <lfs_dir_fetchmatch+0x750>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	2200      	movs	r2, #0
 8002540:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03a      	beq.n	80025c0 <lfs_dir_fetchmatch+0x690>
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002552:	6992      	ldr	r2, [r2, #24]
 8002554:	fbb3 f1f2 	udiv	r1, r3, r2
 8002558:	fb02 f201 	mul.w	r2, r2, r1
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d12e      	bne.n	80025c0 <lfs_dir_fetchmatch+0x690>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002562:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002566:	2b00      	cmp	r3, #0
 8002568:	d02a      	beq.n	80025c0 <lfs_dir_fetchmatch+0x690>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
 800256e:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8002570:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                int err = lfs_bd_crc(lfs,
 8002576:	69dd      	ldr	r5, [r3, #28]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	68d2      	ldr	r2, [r2, #12]
 8002580:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002582:	f107 001c 	add.w	r0, r7, #28
 8002586:	9003      	str	r0, [sp, #12]
 8002588:	9102      	str	r1, [sp, #8]
 800258a:	9201      	str	r2, [sp, #4]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	462b      	mov	r3, r5
 8002590:	4622      	mov	r2, r4
 8002592:	2100      	movs	r1, #0
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	f7fe f874 	bl	8000682 <lfs_bd_crc>
 800259a:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 800259c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <lfs_dir_fetchmatch+0x67e>
 80025a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025a4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80025a8:	d001      	beq.n	80025ae <lfs_dir_fetchmatch+0x67e>
                    return err;
 80025aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ac:	e07c      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 80025ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	333c      	adds	r3, #60	; 0x3c
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fc01 	bl	8000dd0 <lfs_gstate_hasmovehere>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d028      	beq.n	8002626 <lfs_dir_fetchmatch+0x6f6>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fb41 	bl	8000c60 <lfs_tag_id>
 80025de:	4603      	mov	r3, r0
 80025e0:	461c      	mov	r4, r3
 80025e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fb3b 	bl	8000c60 <lfs_tag_id>
 80025ea:	4603      	mov	r3, r0
 80025ec:	429c      	cmp	r4, r3
 80025ee:	d104      	bne.n	80025fa <lfs_dir_fetchmatch+0x6ca>
                besttag |= 0x80000000;
 80025f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025f8:	e015      	b.n	8002626 <lfs_dir_fetchmatch+0x6f6>
            } else if (besttag != -1 &&
 80025fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d011      	beq.n	8002626 <lfs_dir_fetchmatch+0x6f6>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fb2a 	bl	8000c60 <lfs_tag_id>
 800260c:	4603      	mov	r3, r0
 800260e:	461c      	mov	r4, r3
 8002610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fb24 	bl	8000c60 <lfs_tag_id>
 8002618:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 800261a:	429c      	cmp	r4, r3
 800261c:	d203      	bcs.n	8002626 <lfs_dir_fetchmatch+0x6f6>
                besttag -= LFS_MKTAG(0, 1, 0);
 800261e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002620:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002624:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d010      	beq.n	8002650 <lfs_dir_fetchmatch+0x720>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800262e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fb15 	bl	8000c60 <lfs_tag_id>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	8a9b      	ldrh	r3, [r3, #20]
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f7fd fdae 	bl	80001a2 <lfs_min>
 8002646:	4603      	mov	r3, r0
 8002648:	b29a      	uxth	r2, r3
 800264a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800264e:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fa9f 	bl	8000b96 <lfs_tag_isvalid>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <lfs_dir_fetchmatch+0x732>
            return besttag;
 800265e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002660:	e022      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe fafb 	bl	8000c60 <lfs_tag_id>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	8a9b      	ldrh	r3, [r3, #20]
 8002672:	429a      	cmp	r2, r3
 8002674:	d202      	bcs.n	800267c <lfs_dir_fetchmatch+0x74c>
            return LFS_ERR_NOENT;
 8002676:	f06f 0301 	mvn.w	r3, #1
 800267a:	e015      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
        } else {
            return 0;
 800267c:	2300      	movs	r3, #0
 800267e:	e013      	b.n	80026a8 <lfs_dir_fetchmatch+0x778>
    for (int i = 0; i < 2; i++) {
 8002680:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002682:	2b01      	cmp	r3, #1
 8002684:	f77f ad02 	ble.w	800208c <lfs_dir_fetchmatch+0x15c>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4908      	ldr	r1, [pc, #32]	; (80026b4 <lfs_dir_fetchmatch+0x784>)
 8002692:	9101      	str	r1, [sp, #4]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4613      	mov	r3, r2
 8002698:	f240 5242 	movw	r2, #1346	; 0x542
 800269c:	4906      	ldr	r1, [pc, #24]	; (80026b8 <lfs_dir_fetchmatch+0x788>)
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <lfs_dir_fetchmatch+0x78c>)
 80026a0:	f006 ff1c 	bl	80094dc <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 80026a4:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3784      	adds	r7, #132	; 0x84
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026b0:	7ffffc00 	.word	0x7ffffc00
 80026b4:	0800a240 	.word	0x0800a240
 80026b8:	0800a138 	.word	0x0800a138
 80026bc:	0800a24c 	.word	0x0800a24c

080026c0 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af04      	add	r7, sp, #16
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80026cc:	2300      	movs	r3, #0
 80026ce:	9303      	str	r3, [sp, #12]
 80026d0:	2300      	movs	r3, #0
 80026d2:	9302      	str	r3, [sp, #8]
 80026d4:	2300      	movs	r3, #0
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7ff fc22 	bl	8001f30 <lfs_dir_fetchmatch>
 80026ec:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <lfs_dir_getgstate+0x5c>)
 800270c:	4a12      	ldr	r2, [pc, #72]	; (8002758 <lfs_dir_getgstate+0x60>)
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7fe feab 	bl	800146c <lfs_dir_get>
 8002716:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	da05      	bge.n	800272a <lfs_dir_getgstate+0x32>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f113 0f02 	cmn.w	r3, #2
 8002724:	d001      	beq.n	800272a <lfs_dir_getgstate+0x32>
        return res;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	e00f      	b.n	800274a <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f113 0f02 	cmn.w	r3, #2
 8002730:	d00a      	beq.n	8002748 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fb6a 	bl	8000e10 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	4619      	mov	r1, r3
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fabb 	bl	8000cbe <lfs_gstate_xor>
    }

    return 0;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	7ff0000c 	.word	0x7ff0000c
 8002758:	7ff00000 	.word	0x7ff00000

0800275c <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b08f      	sub	sp, #60	; 0x3c
 8002760:	af04      	add	r7, sp, #16
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	689c      	ldr	r4, [r3, #8]
 800277a:	68b8      	ldr	r0, [r7, #8]
 800277c:	f7fe fa7f 	bl	8000c7e <lfs_tag_size>
 8002780:	4603      	mov	r3, r0
 8002782:	4619      	mov	r1, r3
 8002784:	4620      	mov	r0, r4
 8002786:	f7fd fd0c 	bl	80001a2 <lfs_min>
 800278a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800278c:	6a3c      	ldr	r4, [r7, #32]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	6852      	ldr	r2, [r2, #4]
 8002796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002798:	6849      	ldr	r1, [r1, #4]
 800279a:	69b8      	ldr	r0, [r7, #24]
 800279c:	9003      	str	r0, [sp, #12]
 800279e:	9102      	str	r1, [sp, #8]
 80027a0:	9201      	str	r2, [sp, #4]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	4622      	mov	r2, r4
 80027a8:	2100      	movs	r1, #0
 80027aa:	6a38      	ldr	r0, [r7, #32]
 80027ac:	f7fd ff18 	bl	80005e0 <lfs_bd_cmp>
 80027b0:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <lfs_dir_find_match+0x60>
        return res;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	e014      	b.n	80027e6 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	689c      	ldr	r4, [r3, #8]
 80027c0:	68b8      	ldr	r0, [r7, #8]
 80027c2:	f7fe fa5c 	bl	8000c7e <lfs_tag_size>
 80027c6:	4603      	mov	r3, r0
 80027c8:	429c      	cmp	r4, r3
 80027ca:	d00b      	beq.n	80027e4 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	689c      	ldr	r4, [r3, #8]
 80027d0:	68b8      	ldr	r0, [r7, #8]
 80027d2:	f7fe fa54 	bl	8000c7e <lfs_tag_size>
 80027d6:	4603      	mov	r3, r0
 80027d8:	429c      	cmp	r4, r3
 80027da:	d201      	bcs.n	80027e0 <lfs_dir_find_match+0x84>
 80027dc:	2301      	movs	r3, #1
 80027de:	e002      	b.n	80027e6 <lfs_dir_find_match+0x8a>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e000      	b.n	80027e6 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	372c      	adds	r7, #44	; 0x2c
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd90      	pop	{r4, r7, pc}
	...

080027f0 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b093      	sub	sp, #76	; 0x4c
 80027f4:	af04      	add	r7, sp, #16
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002810:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8002812:	4b6e      	ldr	r3, [pc, #440]	; (80029cc <lfs_dir_find+0x1dc>)
 8002814:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8002826:	496a      	ldr	r1, [pc, #424]	; (80029d0 <lfs_dir_find+0x1e0>)
 8002828:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800282a:	f006 febd 	bl	80095a8 <strspn>
 800282e:	4602      	mov	r2, r0
 8002830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002832:	4413      	add	r3, r2
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8002836:	4966      	ldr	r1, [pc, #408]	; (80029d0 <lfs_dir_find+0x1e0>)
 8002838:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800283a:	f006 fea4 	bl	8009586 <strcspn>
 800283e:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <lfs_dir_find+0x62>
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <lfs_dir_find+0x1e4>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d00a      	beq.n	8002868 <lfs_dir_find+0x78>
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	2b02      	cmp	r3, #2
 8002856:	d10c      	bne.n	8002872 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8002858:	2202      	movs	r2, #2
 800285a:	495f      	ldr	r1, [pc, #380]	; (80029d8 <lfs_dir_find+0x1e8>)
 800285c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800285e:	f006 fa85 	bl	8008d6c <memcmp>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d104      	bne.n	8002872 <lfs_dir_find+0x82>
            name += namelen;
 8002868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	4413      	add	r3, r2
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8002870:	e7d9      	b.n	8002826 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	4413      	add	r3, r2
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800287e:	4954      	ldr	r1, [pc, #336]	; (80029d0 <lfs_dir_find+0x1e0>)
 8002880:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002882:	f006 fe91 	bl	80095a8 <strspn>
 8002886:	4602      	mov	r2, r0
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	4413      	add	r3, r2
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800288e:	4950      	ldr	r1, [pc, #320]	; (80029d0 <lfs_dir_find+0x1e0>)
 8002890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002892:	f006 fe78 	bl	8009586 <strcspn>
 8002896:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01d      	beq.n	80028da <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d112      	bne.n	80028ca <lfs_dir_find+0xda>
 80028a4:	2202      	movs	r2, #2
 80028a6:	494c      	ldr	r1, [pc, #304]	; (80029d8 <lfs_dir_find+0x1e8>)
 80028a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028aa:	f006 fa5f 	bl	8008d6c <memcmp>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <lfs_dir_find+0xda>
                depth -= 1;
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	3b01      	subs	r3, #1
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 80028c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	4413      	add	r3, r2
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 80028c8:	e7ad      	b.n	8002826 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	3301      	adds	r3, #1
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 80028d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	4413      	add	r3, r2
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 80028d8:	e7d1      	b.n	800287e <lfs_dir_find+0x8e>
                break;
 80028da:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 80028dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <lfs_dir_find+0xf8>
            return tag;
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	e06c      	b.n	80029c2 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ec:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe f98d 	bl	8000c10 <lfs_tag_type3>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d002      	beq.n	8002902 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80028fc:	f06f 0313 	mvn.w	r3, #19
 8002900:	e05f      	b.n	80029c2 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe f9ab 	bl	8000c60 <lfs_tag_id>
 800290a:	4603      	mov	r3, r0
 800290c:	461a      	mov	r2, r3
 800290e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002912:	429a      	cmp	r2, r3
 8002914:	d01c      	beq.n	8002950 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe f9a1 	bl	8000c60 <lfs_tag_id>
 800291e:	4603      	mov	r3, r0
 8002920:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8002922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002926:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800292e:	9200      	str	r2, [sp, #0]
 8002930:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <lfs_dir_find+0x1ec>)
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7fe fd99 	bl	800146c <lfs_dir_get>
 800293a:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	da01      	bge.n	8002946 <lfs_dir_find+0x156>
                return res;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	e03d      	b.n	80029c2 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	3318      	adds	r3, #24
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe f8ef 	bl	8000b2e <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8002956:	212f      	movs	r1, #47	; 0x2f
 8002958:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800295a:	f006 fe07 	bl	800956c <strchr>
 800295e:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <lfs_dir_find+0x178>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	e000      	b.n	800296a <lfs_dir_find+0x17a>
 8002968:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	613a      	str	r2, [r7, #16]
 800296e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002970:	617a      	str	r2, [r7, #20]
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8002976:	f107 0210 	add.w	r2, r7, #16
 800297a:	9203      	str	r2, [sp, #12]
 800297c:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <lfs_dir_find+0x1f0>)
 800297e:	9202      	str	r2, [sp, #8]
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800298a:	4622      	mov	r2, r4
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff face 	bl	8001f30 <lfs_dir_fetchmatch>
 8002994:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	2b00      	cmp	r3, #0
 800299a:	da01      	bge.n	80029a0 <lfs_dir_find+0x1b0>
                return tag;
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	e010      	b.n	80029c2 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d004      	beq.n	80029b0 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80029a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	4413      	add	r3, r2
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 80029ae:	e73a      	b.n	8002826 <lfs_dir_find+0x36>
            if (!dir->split) {
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	7ddb      	ldrb	r3, [r3, #23]
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0c8      	beq.n	8002950 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80029be:	f06f 0301 	mvn.w	r3, #1
    }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	373c      	adds	r7, #60	; 0x3c
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd90      	pop	{r4, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	002ffc00 	.word	0x002ffc00
 80029d0:	0800a28c 	.word	0x0800a28c
 80029d4:	0800a290 	.word	0x0800a290
 80029d8:	0800a294 	.word	0x0800a294
 80029dc:	700ffc00 	.word	0x700ffc00
 80029e0:	0800275d 	.word	0x0800275d

080029e4 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b08b      	sub	sp, #44	; 0x2c
 80029e8:	af04      	add	r7, sp, #16
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f103 0010 	add.w	r0, r3, #16
 80029f8:	68fc      	ldr	r4, [r7, #12]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	6852      	ldr	r2, [r2, #4]
 8002a02:	6839      	ldr	r1, [r7, #0]
 8002a04:	9103      	str	r1, [sp, #12]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	9102      	str	r1, [sp, #8]
 8002a0a:	9201      	str	r2, [sp, #4]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	4622      	mov	r2, r4
 8002a12:	4601      	mov	r1, r0
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7fd ff29 	bl	800086c <lfs_bd_prog>
 8002a1a:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <lfs_dir_commitprog+0x42>
        return err;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	e010      	b.n	8002a48 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fc0a 	bl	8006248 <lfs_crc>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	441a      	add	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	605a      	str	r2, [r3, #4]
    return 0;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}

08002a50 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b08f      	sub	sp, #60	; 0x3c
 8002a54:	af04      	add	r7, sp, #16
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe f919 	bl	8000c96 <lfs_tag_dsize>
 8002a64:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	441a      	add	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d902      	bls.n	8002a7c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8002a76:	f06f 031b 	mvn.w	r3, #27
 8002a7a:	e065      	b.n	8002b48 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4053      	eors	r3, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fc16 	bl	80002ba <lfs_tobe32>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8002a92:	f107 0214 	add.w	r2, r7, #20
 8002a96:	2304      	movs	r3, #4
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff ffa2 	bl	80029e4 <lfs_dir_commitprog>
 8002aa0:	61f8      	str	r0, [r7, #28]
    if (err) {
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <lfs_dir_commitattr+0x5c>
        return err;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	e04d      	b.n	8002b48 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0c      	blt.n	8002acc <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	3b04      	subs	r3, #4
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f7ff ff92 	bl	80029e4 <lfs_dir_commitprog>
 8002ac0:	61f8      	str	r0, [r7, #28]
        if (err) {
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d039      	beq.n	8002b3c <lfs_dir_commitattr+0xec>
            return err;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	e03d      	b.n	8002b48 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	e02d      	b.n	8002b32 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8002ad6:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8002ad8:	6a3a      	ldr	r2, [r7, #32]
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8002ade:	1f1c      	subs	r4, r3, #4
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aea:	440a      	add	r2, r1
 8002aec:	2101      	movs	r1, #1
 8002aee:	9103      	str	r1, [sp, #12]
 8002af0:	f107 0113 	add.w	r1, r7, #19
 8002af4:	9102      	str	r1, [sp, #8]
 8002af6:	9201      	str	r2, [sp, #4]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4623      	mov	r3, r4
 8002afc:	4602      	mov	r2, r0
 8002afe:	2100      	movs	r1, #0
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7fd fc21 	bl	8000348 <lfs_bd_read>
 8002b06:	61f8      	str	r0, [r7, #28]
            if (err) {
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <lfs_dir_commitattr+0xc2>
                return err;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	e01a      	b.n	8002b48 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8002b12:	f107 0213 	add.w	r2, r7, #19
 8002b16:	2301      	movs	r3, #1
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff ff62 	bl	80029e4 <lfs_dir_commitprog>
 8002b20:	61f8      	str	r0, [r7, #28]
            if (err) {
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <lfs_dir_commitattr+0xdc>
                return err;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	e00d      	b.n	8002b48 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	3301      	adds	r3, #1
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	3b04      	subs	r3, #4
 8002b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d3cc      	bcc.n	8002ad6 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	609a      	str	r2, [r3, #8]
    return 0;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	372c      	adds	r7, #44	; 0x2c
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd90      	pop	{r4, r7, pc}

08002b50 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b097      	sub	sp, #92	; 0x5c
 8002b54:	af04      	add	r7, sp, #16
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8002b5e:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f7fd fb19 	bl	80001a2 <lfs_min>
 8002b70:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f7fd fb34 	bl	80001e8 <lfs_alignup>
 8002b80:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8002b8a:	e0fe      	b.n	8002d8a <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	3b04      	subs	r3, #4
 8002b96:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fb01 	bl	80001a2 <lfs_min>
 8002ba0:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4413      	add	r3, r2
        lfs_off_t noff = (
 8002ba8:	3304      	adds	r3, #4
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 8002bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d206      	bcs.n	8002bc2 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb6:	3b14      	subs	r3, #20
 8002bb8:	4619      	mov	r1, r3
 8002bba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002bbc:	f7fd faf1 	bl	80001a2 <lfs_min>
 8002bc0:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 8002bc2:	23ff      	movs	r3, #255	; 0xff
 8002bc4:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8002bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d35f      	bcc.n	8002c8e <lfs_dir_commitcrc+0x13e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd2:	69da      	ldr	r2, [r3, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d855      	bhi.n	8002c8e <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 8002be2:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8002be8:	6998      	ldr	r0, [r3, #24]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	9203      	str	r2, [sp, #12]
 8002bf2:	f107 021b 	add.w	r2, r7, #27
 8002bf6:	9202      	str	r2, [sp, #8]
 8002bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bfa:	9201      	str	r2, [sp, #4]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4603      	mov	r3, r0
 8002c00:	460a      	mov	r2, r1
 8002c02:	2100      	movs	r1, #0
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7fd fb9f 	bl	8000348 <lfs_bd_read>
 8002c0a:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <lfs_dir_commitcrc+0xce>
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c18:	d001      	beq.n	8002c1e <lfs_dir_commitcrc+0xce>
                return err;
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	e101      	b.n	8002e22 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c22:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8002c2c:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_crc(lfs,
 8002c32:	699c      	ldr	r4, [r3, #24]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	f107 0108 	add.w	r1, r7, #8
 8002c3e:	3104      	adds	r1, #4
 8002c40:	9103      	str	r1, [sp, #12]
 8002c42:	9202      	str	r2, [sp, #8]
 8002c44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c46:	9201      	str	r2, [sp, #4]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	2100      	movs	r1, #0
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fd fd16 	bl	8000682 <lfs_bd_crc>
 8002c56:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <lfs_dir_commitcrc+0x11a>
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c64:	d001      	beq.n	8002c6a <lfs_dir_commitcrc+0x11a>
                    return err;
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	e0db      	b.n	8002e22 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe f926 	bl	8000ec0 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8002c74:	f107 0308 	add.w	r3, r7, #8
 8002c78:	4a6c      	ldr	r2, [pc, #432]	; (8002e2c <lfs_dir_commitcrc+0x2dc>)
 8002c7a:	6839      	ldr	r1, [r7, #0]
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fee7 	bl	8002a50 <lfs_dir_commitattr>
 8002c82:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <lfs_dir_commitcrc+0x13e>
                    return err;
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	e0c9      	b.n	8002e22 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8002c8e:	7efb      	ldrb	r3, [r7, #27]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	09db      	lsrs	r3, r3, #7
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	051a      	lsls	r2, r3, #20
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ca4:	1acb      	subs	r3, r1, r3
 8002ca6:	3b04      	subs	r3, #4
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8002cae:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	4053      	eors	r3, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fafc 	bl	80002ba <lfs_tobe32>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f107 0110 	add.w	r1, r7, #16
 8002cce:	2204      	movs	r2, #4
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 fab9 	bl	8006248 <lfs_crc>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fad3 	bl	800028c <lfs_tole32>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f103 0010 	add.w	r0, r3, #16
 8002cf0:	687c      	ldr	r4, [r7, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	6852      	ldr	r2, [r2, #4]
 8002cfa:	2108      	movs	r1, #8
 8002cfc:	9103      	str	r1, [sp, #12]
 8002cfe:	f107 0110 	add.w	r1, r7, #16
 8002d02:	9102      	str	r1, [sp, #8]
 8002d04:	9201      	str	r2, [sp, #4]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fd fdac 	bl	800086c <lfs_bd_prog>
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <lfs_dir_commitcrc+0x1d0>
            return err;
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	e080      	b.n	8002e22 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8002d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d38:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8002d3a:	7efb      	ldrb	r3, [r7, #27]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	061b      	lsls	r3, r3, #24
 8002d40:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	405a      	eors	r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d52:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8002d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d208      	bcs.n	8002d6e <lfs_dir_commitcrc+0x21e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	4413      	add	r3, r2
 8002d68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d30d      	bcc.n	8002d8a <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f103 0110 	add.w	r1, r3, #16
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	2300      	movs	r3, #0
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fd fd43 	bl	8000804 <lfs_bd_sync>
 8002d7e:	6238      	str	r0, [r7, #32]
            if (err) {
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <lfs_dir_commitcrc+0x23a>
                return err;
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	e04b      	b.n	8002e22 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d90:	429a      	cmp	r2, r3
 8002d92:	f63f aefb 	bhi.w	8002b8c <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002da0:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da6:	1d1c      	adds	r4, r3, #4
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db0:	1a8a      	subs	r2, r1, r2
 8002db2:	f107 011c 	add.w	r1, r7, #28
 8002db6:	9103      	str	r1, [sp, #12]
 8002db8:	9202      	str	r2, [sp, #8]
 8002dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dbc:	9201      	str	r2, [sp, #4]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	4623      	mov	r3, r4
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fd fc5b 	bl	8000682 <lfs_bd_crc>
 8002dcc:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <lfs_dir_commitcrc+0x288>
        return err;
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	e024      	b.n	8002e22 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d002      	beq.n	8002de6 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 8002de0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002de4:	e01d      	b.n	8002e22 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f107 021c 	add.w	r2, r7, #28
 8002df0:	9203      	str	r2, [sp, #12]
 8002df2:	2204      	movs	r2, #4
 8002df4:	9202      	str	r2, [sp, #8]
 8002df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df8:	9201      	str	r2, [sp, #4]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	460a      	mov	r2, r1
 8002e00:	2100      	movs	r1, #0
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fd fc3d 	bl	8000682 <lfs_bd_crc>
 8002e08:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <lfs_dir_commitcrc+0x2c4>
        return err;
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	e006      	b.n	8002e22 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8002e1a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002e1e:	e000      	b.n	8002e22 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	374c      	adds	r7, #76	; 0x4c
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd90      	pop	{r4, r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	5ffffc08 	.word	0x5ffffc08

08002e30 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af04      	add	r7, sp, #16
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e016      	b.n	8002e6e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3301      	adds	r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	bfb8      	it	lt
 8002e4c:	425b      	neglt	r3, r3
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe f9a0 	bl	800119c <lfs_alloc>
 8002e5c:	60f8      	str	r0, [r7, #12]
        if (err) {
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <lfs_dir_alloc+0x38>
            return err;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	e058      	b.n	8002f1a <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	dde5      	ble.n	8002e40 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8002e84:	2004      	movs	r0, #4
 8002e86:	9003      	str	r0, [sp, #12]
 8002e88:	9202      	str	r2, [sp, #8]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	9201      	str	r2, [sp, #4]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2304      	movs	r3, #4
 8002e92:	460a      	mov	r2, r1
 8002e94:	2100      	movs	r1, #0
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fa56 	bl	8000348 <lfs_bd_read>
 8002e9c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd f9e8 	bl	8000278 <lfs_fromle32>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <lfs_dir_alloc+0x90>
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002eba:	d001      	beq.n	8002ec0 <lfs_dir_alloc+0x90>
        return err;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	e02c      	b.n	8002f1a <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	dd0e      	ble.n	8002ee8 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f7fd f983 	bl	80001e8 <lfs_alignup>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2204      	movs	r2, #4
 8002eec:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef4:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f04f 32ff 	mov.w	r2, #4294967295
 8002f02:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b092      	sub	sp, #72	; 0x48
 8002f26:	af04      	add	r7, sp, #16
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	4619      	mov	r1, r3
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff7a 	bl	8002e30 <lfs_dir_alloc>
 8002f3c:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <lfs_dir_split+0x26>
        return err;
 8002f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f46:	e03c      	b.n	8002fc2 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	7ddb      	ldrb	r3, [r3, #23]
 8002f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8002f5c:	f107 0110 	add.w	r1, r7, #16
 8002f60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f64:	9302      	str	r3, [sp, #8]
 8002f66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f879 	bl	800306c <lfs_dir_compact>
 8002f7a:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	da01      	bge.n	8002f86 <lfs_dir_split+0x64>
        return res;
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	e01d      	b.n	8002fc2 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2201      	movs	r2, #1
 8002f96:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3320      	adds	r3, #32
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f7fd fd6f 	bl	8000a84 <lfs_pair_cmp>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <lfs_dir_split+0x9e>
 8002fac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3738      	adds	r7, #56	; 0x38
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8002fda:	68b8      	ldr	r0, [r7, #8]
 8002fdc:	f7fd fe5b 	bl	8000c96 <lfs_tag_dsize>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	441a      	add	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	601a      	str	r2, [r3, #0]
    return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b086      	sub	sp, #24
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	f7ff fd1d 	bl	8002a50 <lfs_dir_commitattr>
 8003016:	4603      	mov	r3, r0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8003030:	2b00      	cmp	r3, #0
 8003032:	dd11      	ble.n	8003058 <lfs_dir_needsrelocation+0x38>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	3301      	adds	r3, #1
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800303e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003040:	3201      	adds	r2, #1
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	fbb3 f1f2 	udiv	r1, r3, r2
 800304a:	fb02 f201 	mul.w	r2, r2, r1
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <lfs_dir_needsrelocation+0x38>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <lfs_dir_needsrelocation+0x3a>
 8003058:	2300      	movs	r3, #0
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	b2db      	uxtb	r3, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
	...

0800306c <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b0a4      	sub	sp, #144	; 0x90
 8003070:	af0a      	add	r7, sp, #40	; 0x28
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800307a:	2300      	movs	r3, #0
 800307c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff ffcc 	bl	8003020 <lfs_dir_needsrelocation>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003098:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00e      	beq.n	80030be <lfs_dir_compact+0x52>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	657a      	str	r2, [r7, #84]	; 0x54
 80030a6:	2201      	movs	r2, #1
 80030a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80030aa:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fce7 	bl	8000a84 <lfs_pair_cmp>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 8155 	bne.w	8003368 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80030c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c4:	2300      	movs	r3, #0
 80030c6:	643b      	str	r3, [r7, #64]	; 0x40
 80030c8:	f04f 33ff 	mov.w	r3, #4294967295
 80030cc:	647b      	str	r3, [r7, #68]	; 0x44
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295
 80030d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d4:	2300      	movs	r3, #0
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <lfs_dir_compact+0x80>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e8:	3b08      	subs	r3, #8
 80030ea:	e003      	b.n	80030f4 <lfs_dir_compact+0x88>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80030f4:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4619      	mov	r1, r3
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7fd fc61 	bl	80009c4 <lfs_bd_erase>
 8003102:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800310a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800310c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003110:	f000 812c 	beq.w	800336c <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003116:	e187      	b.n	8003428 <lfs_dir_compact+0x3bc>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd f8b5 	bl	800028c <lfs_tole32>
 8003122:	4602      	mov	r2, r0
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800312e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003132:	2304      	movs	r3, #4
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff fc55 	bl	80029e4 <lfs_dir_commitprog>
 800313a:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd f899 	bl	8000278 <lfs_fromle32>
 8003146:	4602      	mov	r2, r0
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]
            if (err) {
 800314c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8003152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003154:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003158:	f000 810a 	beq.w	8003370 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 800315c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800315e:	e163      	b.n	8003428 <lfs_dir_compact+0x3bc>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8003160:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003164:	425b      	negs	r3, r3
 8003166:	b29b      	uxth	r3, r3
 8003168:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	637a      	str	r2, [r7, #52]	; 0x34
 800316e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003172:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8003174:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003178:	9208      	str	r2, [sp, #32]
 800317a:	4aad      	ldr	r2, [pc, #692]	; (8003430 <lfs_dir_compact+0x3c4>)
 800317c:	9207      	str	r2, [sp, #28]
 800317e:	9306      	str	r3, [sp, #24]
 8003180:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003184:	9305      	str	r3, [sp, #20]
 8003186:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800318a:	9304      	str	r3, [sp, #16]
 800318c:	2300      	movs	r3, #0
 800318e:	9303      	str	r3, [sp, #12]
 8003190:	4ba8      	ldr	r3, [pc, #672]	; (8003434 <lfs_dir_compact+0x3c8>)
 8003192:	9302      	str	r3, [sp, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
 80031a0:	2200      	movs	r2, #0
 80031a2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7fe fab3 	bl	8001710 <lfs_dir_traverse>
 80031aa:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80031ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d006      	beq.n	80031c0 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80031b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80031b8:	f000 80dc 	beq.w	8003374 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80031bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031be:	e133      	b.n	8003428 <lfs_dir_compact+0x3bc>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	3318      	adds	r3, #24
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd fc43 	bl	8000a50 <lfs_pair_isnull>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f083 0301 	eor.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d022      	beq.n	800321c <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	3318      	adds	r3, #24
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd fcc1 	bl	8000b62 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	7ddb      	ldrb	r3, [r3, #23]
 80031e4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80031e8:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80031ea:	4a93      	ldr	r2, [pc, #588]	; (8003438 <lfs_dir_compact+0x3cc>)
 80031ec:	431a      	orrs	r2, r3
                        dir->tail);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80031f2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff fc2a 	bl	8002a50 <lfs_dir_commitattr>
 80031fc:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3318      	adds	r3, #24
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fc93 	bl	8000b2e <lfs_pair_fromle32>
                if (err) {
 8003208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d006      	beq.n	800321c <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800320e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003210:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003214:	f000 80b0 	beq.w	8003378 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321a:	e105      	b.n	8003428 <lfs_dir_compact+0x3bc>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800321c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003228:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800322c:	f083 0301 	eor.w	r3, r3, #1
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d011      	beq.n	800325a <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800323c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd fd3b 	bl	8000cbe <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800324e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd fd32 	bl	8000cbe <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fd29 	bl	8000cbe <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800327c:	461a      	mov	r2, r3
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7ff fa39 	bl	80026f8 <lfs_dir_getgstate>
 8003286:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <lfs_dir_compact+0x226>
                return err;
 800328e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003290:	e0ca      	b.n	8003428 <lfs_dir_compact+0x3bc>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fd35 	bl	8000d06 <lfs_gstate_iszero>
 800329c:	4603      	mov	r3, r0
 800329e:	f083 0301 	eor.w	r3, r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d016      	beq.n	80032d6 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80032a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fdcf 	bl	8000e50 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80032b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032b6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80032ba:	4a60      	ldr	r2, [pc, #384]	; (800343c <lfs_dir_compact+0x3d0>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff fbc7 	bl	8002a50 <lfs_dir_commitattr>
 80032c2:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80032c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80032ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032cc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80032d0:	d054      	beq.n	800337c <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80032d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d4:	e0a8      	b.n	8003428 <lfs_dir_compact+0x3bc>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80032d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80032da:	4619      	mov	r1, r3
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff fc37 	bl	8002b50 <lfs_dir_commitcrc>
 80032e2:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80032e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80032ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80032f0:	d046      	beq.n	8003380 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80032f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f4:	e098      	b.n	8003428 <lfs_dir_compact+0x3bc>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80032f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032fc:	6992      	ldr	r2, [r2, #24]
 80032fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003302:	fb02 f201 	mul.w	r2, r2, r1
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <lfs_dir_compact+0x2ae>
 800330c:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <lfs_dir_compact+0x3d4>)
 800330e:	4a4d      	ldr	r2, [pc, #308]	; (8003444 <lfs_dir_compact+0x3d8>)
 8003310:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8003314:	484c      	ldr	r0, [pc, #304]	; (8003448 <lfs_dir_compact+0x3dc>)
 8003316:	f005 fcbf 	bl	8008c98 <__assert_func>
            lfs_pair_swap(dir->pair);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd fb83 	bl	8000a28 <lfs_pair_swap>
            dir->count = end - begin;
 8003322:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003326:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	b29a      	uxth	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3348      	adds	r3, #72	; 0x48
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800334a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800334e:	f083 0301 	eor.w	r3, r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d064      	beq.n	8003422 <lfs_dir_compact+0x3b6>
                lfs->gdisk = lfs->gstate;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	333c      	adds	r3, #60	; 0x3c
 800335e:	3230      	adds	r2, #48	; 0x30
 8003360:	ca07      	ldmia	r2, {r0, r1, r2}
 8003362:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003366:	e05c      	b.n	8003422 <lfs_dir_compact+0x3b6>
        goto relocate;
 8003368:	bf00      	nop
 800336a:	e00a      	b.n	8003382 <lfs_dir_compact+0x316>
                    goto relocate;
 800336c:	bf00      	nop
 800336e:	e008      	b.n	8003382 <lfs_dir_compact+0x316>
                    goto relocate;
 8003370:	bf00      	nop
 8003372:	e006      	b.n	8003382 <lfs_dir_compact+0x316>
                    goto relocate;
 8003374:	bf00      	nop
 8003376:	e004      	b.n	8003382 <lfs_dir_compact+0x316>
                        goto relocate;
 8003378:	bf00      	nop
 800337a:	e002      	b.n	8003382 <lfs_dir_compact+0x316>
                        goto relocate;
 800337c:	bf00      	nop
 800337e:	e000      	b.n	8003382 <lfs_dir_compact+0x316>
                    goto relocate;
 8003380:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3310      	adds	r3, #16
 800338c:	4619      	mov	r1, r3
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7fc ffb6 	bl	8000300 <lfs_cache_drop>
        if (!tired) {
 8003394:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003398:	f083 0301 	eor.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4a29      	ldr	r2, [pc, #164]	; (800344c <lfs_dir_compact+0x3e0>)
 80033a8:	9200      	str	r2, [sp, #0]
 80033aa:	f640 0201 	movw	r2, #2049	; 0x801
 80033ae:	4926      	ldr	r1, [pc, #152]	; (8003448 <lfs_dir_compact+0x3dc>)
 80033b0:	4827      	ldr	r0, [pc, #156]	; (8003450 <lfs_dir_compact+0x3e4>)
 80033b2:	f006 f893 	bl	80094dc <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2200      	movs	r2, #0
 80033ba:	617a      	str	r2, [r7, #20]
 80033bc:	2201      	movs	r2, #1
 80033be:	61ba      	str	r2, [r7, #24]
 80033c0:	f107 0214 	add.w	r2, r7, #20
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fb5c 	bl	8000a84 <lfs_pair_cmp>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4a1d      	ldr	r2, [pc, #116]	; (800344c <lfs_dir_compact+0x3e0>)
 80033d8:	9200      	str	r2, [sp, #0]
 80033da:	f640 0206 	movw	r2, #2054	; 0x806
 80033de:	491a      	ldr	r1, [pc, #104]	; (8003448 <lfs_dir_compact+0x3dc>)
 80033e0:	481c      	ldr	r0, [pc, #112]	; (8003454 <lfs_dir_compact+0x3e8>)
 80033e2:	f006 f87b 	bl	80094dc <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80033e6:	f06f 031b 	mvn.w	r3, #27
 80033ea:	e01d      	b.n	8003428 <lfs_dir_compact+0x3bc>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7fd fed2 	bl	800119c <lfs_alloc>
 80033f8:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80033fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00c      	beq.n	800341a <lfs_dir_compact+0x3ae>
 8003400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003402:	f113 0f1c 	cmn.w	r3, #28
 8003406:	d106      	bne.n	8003416 <lfs_dir_compact+0x3aa>
 8003408:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <lfs_dir_compact+0x3ae>
            return err;
 8003416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003418:	e006      	b.n	8003428 <lfs_dir_compact+0x3bc>
        }

        tired = false;
 800341a:	2300      	movs	r3, #0
 800341c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    while (true) {
 8003420:	e64d      	b.n	80030be <lfs_dir_compact+0x52>
        break;
 8003422:	bf00      	nop
        continue;
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003424:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003428:	4618      	mov	r0, r3
 800342a:	3768      	adds	r7, #104	; 0x68
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	08002ff7 	.word	0x08002ff7
 8003434:	400ffc00 	.word	0x400ffc00
 8003438:	000ffc08 	.word	0x000ffc08
 800343c:	7ffffc0c 	.word	0x7ffffc0c
 8003440:	0800a298 	.word	0x0800a298
 8003444:	0800ac54 	.word	0x0800ac54
 8003448:	0800a138 	.word	0x0800a138
 800344c:	0800a240 	.word	0x0800a240
 8003450:	0800a2c0 	.word	0x0800a2c0
 8003454:	0800a2e4 	.word	0x0800a2e4

08003458 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b097      	sub	sp, #92	; 0x5c
 800345c:	af0a      	add	r7, sp, #40	; 0x28
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003466:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 800346c:	e058      	b.n	8003520 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	b29b      	uxth	r3, r3
 8003476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003478:	b292      	uxth	r2, r2
 800347a:	4252      	negs	r2, r2
 800347c:	b292      	uxth	r2, r2
 800347e:	b212      	sxth	r2, r2
 8003480:	f107 0118 	add.w	r1, r7, #24
 8003484:	9108      	str	r1, [sp, #32]
 8003486:	4978      	ldr	r1, [pc, #480]	; (8003668 <lfs_dir_splittingcompact+0x210>)
 8003488:	9107      	str	r1, [sp, #28]
 800348a:	9206      	str	r2, [sp, #24]
 800348c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003490:	9205      	str	r2, [sp, #20]
 8003492:	9304      	str	r3, [sp, #16]
 8003494:	2300      	movs	r3, #0
 8003496:	9303      	str	r3, [sp, #12]
 8003498:	4b74      	ldr	r3, [pc, #464]	; (800366c <lfs_dir_splittingcompact+0x214>)
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	f04f 33ff 	mov.w	r3, #4294967295
 80034a8:	2200      	movs	r2, #0
 80034aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7fe f92f 	bl	8001710 <lfs_dir_traverse>
 80034b2:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <lfs_dir_splittingcompact+0x66>
                return err;
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	e0d0      	b.n	8003660 <lfs_dir_splittingcompact+0x208>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 80034be:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2bfe      	cmp	r3, #254	; 0xfe
 80034c8:	d822      	bhi.n	8003510 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ce:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 80034d0:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	e003      	b.n	80034f0 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ec:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 80034ee:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
                    && size <= lfs_min(
 80034f4:	6992      	ldr	r2, [r2, #24]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fc fe75 	bl	80001e8 <lfs_alignup>
 80034fe:	4603      	mov	r3, r0
 8003500:	4619      	mov	r1, r3
 8003502:	4620      	mov	r0, r4
 8003504:	f7fc fe4d 	bl	80001a2 <lfs_min>
 8003508:	4602      	mov	r2, r0
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	429a      	cmp	r2, r3
 800350e:	d20e      	bcs.n	800352e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003510:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800351c:	4413      	add	r3, r2
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003520:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d8a0      	bhi.n	800346e <lfs_dir_splittingcompact+0x16>
 800352c:	e000      	b.n	8003530 <lfs_dir_splittingcompact+0xd8>
                break;
 800352e:	bf00      	nop
        }

        if (split == begin) {
 8003530:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003536:	429a      	cmp	r2, r3
 8003538:	d02d      	beq.n	8003596 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353c:	b29b      	uxth	r3, r3
 800353e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003542:	9202      	str	r2, [sp, #8]
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7ff fce6 	bl	8002f22 <lfs_dir_split>
 8003556:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <lfs_dir_splittingcompact+0x112>
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	f113 0f1c 	cmn.w	r3, #28
 8003564:	d001      	beq.n	800356a <lfs_dir_splittingcompact+0x112>
            return err;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	e07a      	b.n	8003660 <lfs_dir_splittingcompact+0x208>
        }

        if (err) {
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	493d      	ldr	r1, [pc, #244]	; (8003670 <lfs_dir_splittingcompact+0x218>)
 800357a:	9101      	str	r1, [sp, #4]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	4613      	mov	r3, r2
 8003580:	f640 0259 	movw	r2, #2137	; 0x859
 8003584:	493b      	ldr	r1, [pc, #236]	; (8003674 <lfs_dir_splittingcompact+0x21c>)
 8003586:	483c      	ldr	r0, [pc, #240]	; (8003678 <lfs_dir_splittingcompact+0x220>)
 8003588:	f005 ffa8 	bl	80094dc <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 800358c:	e004      	b.n	8003598 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003594:	e767      	b.n	8003466 <lfs_dir_splittingcompact+0xe>
            break;
 8003596:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff fd40 	bl	8003020 <lfs_dir_needsrelocation>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d04d      	beq.n	8003642 <lfs_dir_splittingcompact+0x1ea>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2200      	movs	r2, #0
 80035aa:	613a      	str	r2, [r7, #16]
 80035ac:	2201      	movs	r2, #1
 80035ae:	617a      	str	r2, [r7, #20]
 80035b0:	f107 0210 	add.w	r2, r7, #16
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fa64 	bl	8000a84 <lfs_pair_cmp>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d13f      	bne.n	8003642 <lfs_dir_splittingcompact+0x1ea>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f002 fd66 	bl	8006094 <lfs_fs_rawsize>
 80035c8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da01      	bge.n	80035d4 <lfs_dir_splittingcompact+0x17c>
            return size;
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	e045      	b.n	8003660 <lfs_dir_splittingcompact+0x208>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->block_count/2) {
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d8:	085a      	lsrs	r2, r3, #1
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d930      	bls.n	8003642 <lfs_dir_splittingcompact+0x1ea>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a22      	ldr	r2, [pc, #136]	; (8003670 <lfs_dir_splittingcompact+0x218>)
 80035e6:	9200      	str	r2, [sp, #0]
 80035e8:	f640 026d 	movw	r2, #2157	; 0x86d
 80035ec:	4921      	ldr	r1, [pc, #132]	; (8003674 <lfs_dir_splittingcompact+0x21c>)
 80035ee:	4823      	ldr	r0, [pc, #140]	; (800367c <lfs_dir_splittingcompact+0x224>)
 80035f0:	f005 ff74 	bl	80094dc <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80035f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80035f8:	9302      	str	r3, [sp, #8]
 80035fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff fc89 	bl	8002f22 <lfs_dir_split>
 8003610:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <lfs_dir_splittingcompact+0x1cc>
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f113 0f1c 	cmn.w	r3, #28
 800361e:	d001      	beq.n	8003624 <lfs_dir_splittingcompact+0x1cc>
                return err;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	e01d      	b.n	8003660 <lfs_dir_splittingcompact+0x208>
            }

            if (err) {
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <lfs_dir_splittingcompact+0x1e2>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <lfs_dir_splittingcompact+0x218>)
 800362c:	f640 0277 	movw	r2, #2167	; 0x877
 8003630:	4910      	ldr	r1, [pc, #64]	; (8003674 <lfs_dir_splittingcompact+0x21c>)
 8003632:	4813      	ldr	r0, [pc, #76]	; (8003680 <lfs_dir_splittingcompact+0x228>)
 8003634:	f005 ff52 	bl	80094dc <iprintf>
 8003638:	e003      	b.n	8003642 <lfs_dir_splittingcompact+0x1ea>
            } else {
                end = begin;
 800363a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800363e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003642:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003646:	9302      	str	r3, [sp, #8]
 8003648:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f7ff fd07 	bl	800306c <lfs_dir_compact>
 800365e:	4603      	mov	r3, r0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3734      	adds	r7, #52	; 0x34
 8003664:	46bd      	mov	sp, r7
 8003666:	bd90      	pop	{r4, r7, pc}
 8003668:	08002fcb 	.word	0x08002fcb
 800366c:	400ffc00 	.word	0x400ffc00
 8003670:	0800a240 	.word	0x0800a240
 8003674:	0800a138 	.word	0x0800a138
 8003678:	0800a31c 	.word	0x0800a31c
 800367c:	0800a34c 	.word	0x0800a34c
 8003680:	0800a37c 	.word	0x0800a37c

08003684 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003684:	b5b0      	push	{r4, r5, r7, lr}
 8003686:	b0a6      	sub	sp, #152	; 0x98
 8003688:	af0a      	add	r7, sp, #40	; 0x28
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 800369c:	2300      	movs	r3, #0
 800369e:	667b      	str	r3, [r7, #100]	; 0x64
 80036a0:	e06d      	b.n	800377e <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 80036a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	4413      	add	r3, r2
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd faaf 	bl	8000c10 <lfs_tag_type3>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	f240 4301 	movw	r3, #1025	; 0x401
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d106      	bne.n	80036cc <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	8a9b      	ldrh	r3, [r3, #20]
 80036c2:	3301      	adds	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	829a      	strh	r2, [r3, #20]
 80036ca:	e055      	b.n	8003778 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80036cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd fa9a 	bl	8000c10 <lfs_tag_type3>
 80036dc:	4603      	mov	r3, r0
 80036de:	461a      	mov	r2, r3
 80036e0:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d114      	bne.n	8003712 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	8a9b      	ldrh	r3, [r3, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <lfs_dir_relocatingcommit+0x7a>
 80036f0:	4ba4      	ldr	r3, [pc, #656]	; (8003984 <lfs_dir_relocatingcommit+0x300>)
 80036f2:	4aa5      	ldr	r2, [pc, #660]	; (8003988 <lfs_dir_relocatingcommit+0x304>)
 80036f4:	f640 018f 	movw	r1, #2191	; 0x88f
 80036f8:	48a4      	ldr	r0, [pc, #656]	; (800398c <lfs_dir_relocatingcommit+0x308>)
 80036fa:	f005 facd 	bl	8008c98 <__assert_func>
            dir->count -= 1;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	8a9b      	ldrh	r3, [r3, #20]
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003710:	e032      	b.n	8003778 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003712:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	4413      	add	r3, r2
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd fa59 	bl	8000bd4 <lfs_tag_type1>
 8003722:	4603      	mov	r3, r0
 8003724:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003728:	d126      	bne.n	8003778 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800372a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	4413      	add	r3, r2
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800373a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	4413      	add	r3, r2
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800374a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	4413      	add	r3, r2
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fa6a 	bl	8000c2e <lfs_tag_chunk>
 800375a:	4603      	mov	r3, r0
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3318      	adds	r3, #24
 8003772:	4618      	mov	r0, r3
 8003774:	f7fd f9db 	bl	8000b2e <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800377a:	3301      	adds	r3, #1
 800377c:	667b      	str	r3, [r7, #100]	; 0x64
 800377e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003780:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003784:	429a      	cmp	r2, r3
 8003786:	db8c      	blt.n	80036a2 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003788:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800378c:	2b00      	cmp	r3, #0
 800378e:	d02b      	beq.n	80037e8 <lfs_dir_relocatingcommit+0x164>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	8a9b      	ldrh	r3, [r3, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d127      	bne.n	80037e8 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <lfs_dir_relocatingcommit+0x12a>
 80037a0:	4b7b      	ldr	r3, [pc, #492]	; (8003990 <lfs_dir_relocatingcommit+0x30c>)
 80037a2:	4a79      	ldr	r2, [pc, #484]	; (8003988 <lfs_dir_relocatingcommit+0x304>)
 80037a4:	f640 019c 	movw	r1, #2204	; 0x89c
 80037a8:	4878      	ldr	r0, [pc, #480]	; (800398c <lfs_dir_relocatingcommit+0x308>)
 80037aa:	f005 fa75 	bl	8008c98 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80037b4:	4619      	mov	r1, r3
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f001 ffca 	bl	8005750 <lfs_fs_pred>
 80037bc:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 80037be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <lfs_dir_relocatingcommit+0x14c>
 80037c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037c6:	f113 0f02 	cmn.w	r3, #2
 80037ca:	d001      	beq.n	80037d0 <lfs_dir_relocatingcommit+0x14c>
            return err;
 80037cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037ce:	e203      	b.n	8003bd8 <lfs_dir_relocatingcommit+0x554>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80037d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037d2:	f113 0f02 	cmn.w	r3, #2
 80037d6:	d007      	beq.n	80037e8 <lfs_dir_relocatingcommit+0x164>
 80037d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037dc:	7ddb      	ldrb	r3, [r3, #23]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 80037e2:	2302      	movs	r3, #2
 80037e4:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 80037e6:	e121      	b.n	8003a2c <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	7d9b      	ldrb	r3, [r3, #22]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80fb 	beq.w	80039e8 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80037fc:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8003802:	63bb      	str	r3, [r7, #56]	; 0x38
 8003804:	f04f 33ff 	mov.w	r3, #4294967295
 8003808:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800380e:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003816:	2b00      	cmp	r3, #0
 8003818:	d004      	beq.n	8003824 <lfs_dir_relocatingcommit+0x1a0>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800381e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003820:	3b08      	subs	r3, #8
 8003822:	e003      	b.n	800382c <lfs_dir_relocatingcommit+0x1a8>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800382c:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3318      	adds	r3, #24
 8003832:	4618      	mov	r0, r3
 8003834:	f7fd f995 	bl	8000b62 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
 8003844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 800384a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800384e:	9308      	str	r3, [sp, #32]
 8003850:	4b50      	ldr	r3, [pc, #320]	; (8003994 <lfs_dir_relocatingcommit+0x310>)
 8003852:	9307      	str	r3, [sp, #28]
 8003854:	2300      	movs	r3, #0
 8003856:	9306      	str	r3, [sp, #24]
 8003858:	2300      	movs	r3, #0
 800385a:	9305      	str	r3, [sp, #20]
 800385c:	2300      	movs	r3, #0
 800385e:	9304      	str	r3, [sp, #16]
 8003860:	2300      	movs	r3, #0
 8003862:	9303      	str	r3, [sp, #12]
 8003864:	2300      	movs	r3, #0
 8003866:	9302      	str	r3, [sp, #8]
 8003868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	460b      	mov	r3, r1
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7fd ff4a 	bl	8001710 <lfs_dir_traverse>
 800387c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3318      	adds	r3, #24
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd f953 	bl	8000b2e <lfs_pair_fromle32>
        if (err) {
 8003888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800388e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003890:	f113 0f1c 	cmn.w	r3, #28
 8003894:	f000 80aa 	beq.w	80039ec <lfs_dir_relocatingcommit+0x368>
 8003898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800389e:	f000 80a5 	beq.w	80039ec <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 80038a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a4:	e198      	b.n	8003bd8 <lfs_dir_relocatingcommit+0x554>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80038a6:	f107 031c 	add.w	r3, r7, #28
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80038b8:	f107 031c 	add.w	r3, r7, #28
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd f9fd 	bl	8000cbe <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd f9f4 	bl	8000cbe <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd f9eb 	bl	8000cbe <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038ee:	f023 0303 	bic.w	r3, r3, #3
 80038f2:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 80038f4:	f107 031c 	add.w	r3, r7, #28
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd fa04 	bl	8000d06 <lfs_gstate_iszero>
 80038fe:	4603      	mov	r3, r0
 8003900:	f083 0301 	eor.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d027      	beq.n	800395a <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800390a:	f107 031c 	add.w	r3, r7, #28
 800390e:	461a      	mov	r2, r3
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7fe fef0 	bl	80026f8 <lfs_dir_getgstate>
 8003918:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 800391a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8003920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003922:	e159      	b.n	8003bd8 <lfs_dir_relocatingcommit+0x554>
            }

            lfs_gstate_tole32(&delta);
 8003924:	f107 031c 	add.w	r3, r7, #28
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd fa91 	bl	8000e50 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800392e:	f107 031c 	add.w	r3, r7, #28
 8003932:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <lfs_dir_relocatingcommit+0x314>)
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f7ff f889 	bl	8002a50 <lfs_dir_commitattr>
 800393e:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8003940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003948:	f113 0f1c 	cmn.w	r3, #28
 800394c:	d050      	beq.n	80039f0 <lfs_dir_relocatingcommit+0x36c>
 800394e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003950:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003954:	d04c      	beq.n	80039f0 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8003956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003958:	e13e      	b.n	8003bd8 <lfs_dir_relocatingcommit+0x554>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800395a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800395e:	4619      	mov	r1, r3
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7ff f8f5 	bl	8002b50 <lfs_dir_commitcrc>
 8003966:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8003968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396a:	2b00      	cmp	r3, #0
 800396c:	d016      	beq.n	800399c <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800396e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003970:	f113 0f1c 	cmn.w	r3, #28
 8003974:	d03e      	beq.n	80039f4 <lfs_dir_relocatingcommit+0x370>
 8003976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003978:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800397c:	d03a      	beq.n	80039f4 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 800397e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003980:	e12a      	b.n	8003bd8 <lfs_dir_relocatingcommit+0x554>
 8003982:	bf00      	nop
 8003984:	0800a3a8 	.word	0x0800a3a8
 8003988:	0800ac64 	.word	0x0800ac64
 800398c:	0800a138 	.word	0x0800a138
 8003990:	0800a3b8 	.word	0x0800a3b8
 8003994:	08002ff7 	.word	0x08002ff7
 8003998:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039a2:	6992      	ldr	r2, [r2, #24]
 80039a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80039a8:	fb02 f201 	mul.w	r2, r2, r1
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d006      	beq.n	80039c0 <lfs_dir_relocatingcommit+0x33c>
 80039b2:	4b8b      	ldr	r3, [pc, #556]	; (8003be0 <lfs_dir_relocatingcommit+0x55c>)
 80039b4:	4a8b      	ldr	r2, [pc, #556]	; (8003be4 <lfs_dir_relocatingcommit+0x560>)
 80039b6:	f640 01e6 	movw	r1, #2278	; 0x8e6
 80039ba:	488b      	ldr	r0, [pc, #556]	; (8003be8 <lfs_dir_relocatingcommit+0x564>)
 80039bc:	f005 f96c 	bl	8008c98 <__assert_func>
        dir->off = commit.off;
 80039c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80039c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	333c      	adds	r3, #60	; 0x3c
 80039d2:	3230      	adds	r2, #48	; 0x30
 80039d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80039d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3348      	adds	r3, #72	; 0x48
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	e021      	b.n	8003a2c <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80039e8:	bf00      	nop
 80039ea:	e004      	b.n	80039f6 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80039ec:	bf00      	nop
 80039ee:	e002      	b.n	80039f6 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 80039f0:	bf00      	nop
 80039f2:	e000      	b.n	80039f6 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80039f4:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3310      	adds	r3, #16
 80039fa:	4619      	mov	r1, r3
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7fc fc7f 	bl	8000300 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	8a9b      	ldrh	r3, [r3, #20]
 8003a06:	9302      	str	r3, [sp, #8]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7ff fd1d 	bl	8003458 <lfs_dir_splittingcompact>
 8003a1e:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8003a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da01      	bge.n	8003a2a <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a28:	e0d6      	b.n	8003bd8 <lfs_dir_relocatingcommit+0x554>
    }

    goto fixmlist;
 8003a2a:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a3e:	e0c6      	b.n	8003bce <lfs_dir_relocatingcommit+0x54a>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8003a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a42:	3308      	adds	r3, #8
 8003a44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd f81a 	bl	8000a84 <lfs_pair_cmp>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 80b8 	bne.w	8003bc8 <lfs_dir_relocatingcommit+0x544>
            d->m = *dir;
 8003a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	f103 0408 	add.w	r4, r3, #8
 8003a60:	4615      	mov	r5, r2
 8003a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8003a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a70:	3308      	adds	r3, #8
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	f000 809d 	beq.w	8003bb4 <lfs_dir_relocatingcommit+0x530>
                for (int i = 0; i < attrcount; i++) {
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a7e:	e07b      	b.n	8003b78 <lfs_dir_relocatingcommit+0x4f4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	4413      	add	r3, r2
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd f8c0 	bl	8000c10 <lfs_tag_type3>
 8003a90:	4603      	mov	r3, r0
 8003a92:	461a      	mov	r2, r3
 8003a94:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d115      	bne.n	8003ac8 <lfs_dir_relocatingcommit+0x444>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8003a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a9e:	889c      	ldrh	r4, [r3, #4]
 8003aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd f8d8 	bl	8000c60 <lfs_tag_id>
 8003ab0:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003ab2:	429c      	cmp	r4, r3
 8003ab4:	d108      	bne.n	8003ac8 <lfs_dir_relocatingcommit+0x444>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8003ab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8003abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	e054      	b.n	8003b72 <lfs_dir_relocatingcommit+0x4ee>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	4413      	add	r3, r2
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd f89c 	bl	8000c10 <lfs_tag_type3>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d11c      	bne.n	8003b1e <lfs_dir_relocatingcommit+0x49a>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8003ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ae6:	889c      	ldrh	r4, [r3, #4]
 8003ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	4413      	add	r3, r2
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd f8b4 	bl	8000c60 <lfs_tag_id>
 8003af8:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8003afa:	429c      	cmp	r4, r3
 8003afc:	d90f      	bls.n	8003b1e <lfs_dir_relocatingcommit+0x49a>
                        d->id -= 1;
 8003afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b00:	889b      	ldrh	r3, [r3, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b08:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8003b0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b0c:	799b      	ldrb	r3, [r3, #6]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d12f      	bne.n	8003b72 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos -= 1;
 8003b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	1e5a      	subs	r2, r3, #1
 8003b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8003b1c:	e029      	b.n	8003b72 <lfs_dir_relocatingcommit+0x4ee>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8003b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	4413      	add	r3, r2
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fd f871 	bl	8000c10 <lfs_tag_type3>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	461a      	mov	r2, r3
 8003b32:	f240 4301 	movw	r3, #1025	; 0x401
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d11b      	bne.n	8003b72 <lfs_dir_relocatingcommit+0x4ee>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8003b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b3c:	889c      	ldrh	r4, [r3, #4]
 8003b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	4413      	add	r3, r2
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd f889 	bl	8000c60 <lfs_tag_id>
 8003b4e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8003b50:	429c      	cmp	r4, r3
 8003b52:	d30e      	bcc.n	8003b72 <lfs_dir_relocatingcommit+0x4ee>
                        d->id += 1;
 8003b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b56:	889b      	ldrh	r3, [r3, #4]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b5e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8003b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b62:	799b      	ldrb	r3, [r3, #6]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d104      	bne.n	8003b72 <lfs_dir_relocatingcommit+0x4ee>
                            ((lfs_dir_t*)d)->pos += 1;
 8003b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b70:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8003b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b74:	3301      	adds	r3, #1
 8003b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	f6ff af7e 	blt.w	8003a80 <lfs_dir_relocatingcommit+0x3fc>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8003b84:	e016      	b.n	8003bb4 <lfs_dir_relocatingcommit+0x530>
                // we split and id is on tail now
                d->id -= d->m.count;
 8003b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b88:	889a      	ldrh	r2, [r3, #4]
 8003b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b8c:	8b9b      	ldrh	r3, [r3, #28]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b94:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8003b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b98:	f103 0108 	add.w	r1, r3, #8
 8003b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9e:	3320      	adds	r3, #32
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7fe fd8c 	bl	80026c0 <lfs_dir_fetch>
 8003ba8:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8003baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <lfs_dir_relocatingcommit+0x530>
                    return err;
 8003bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb2:	e011      	b.n	8003bd8 <lfs_dir_relocatingcommit+0x554>
            while (d->id >= d->m.count && d->m.split) {
 8003bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb6:	889a      	ldrh	r2, [r3, #4]
 8003bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bba:	8b9b      	ldrh	r3, [r3, #28]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d303      	bcc.n	8003bc8 <lfs_dir_relocatingcommit+0x544>
 8003bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc2:	7fdb      	ldrb	r3, [r3, #31]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1de      	bne.n	8003b86 <lfs_dir_relocatingcommit+0x502>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f47f af35 	bne.w	8003a40 <lfs_dir_relocatingcommit+0x3bc>
                }
            }
        }
    }

    return state;
 8003bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3770      	adds	r7, #112	; 0x70
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bdb0      	pop	{r4, r5, r7, pc}
 8003be0:	0800a298 	.word	0x0800a298
 8003be4:	0800ac64 	.word	0x0800ac64
 8003be8:	0800a138 	.word	0x0800a138

08003bec <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8003bec:	b5b0      	push	{r4, r5, r7, lr}
 8003bee:	b0bc      	sub	sp, #240	; 0xf0
 8003bf0:	af04      	add	r7, sp, #16
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c02:	e045      	b.n	8003c90 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8003c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c08:	3308      	adds	r3, #8
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d03a      	beq.n	8003c86 <lfs_dir_orphaningcommit+0x9a>
 8003c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c14:	3308      	adds	r3, #8
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fc ff32 	bl	8000a84 <lfs_pair_cmp>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d12f      	bne.n	8003c86 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8003c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d12a      	bne.n	8003c86 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8003c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d023      	beq.n	8003c86 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8003c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d91b      	bls.n	8003c86 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8003c4e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fff2 	bl	8004c3c <lfs_file_outline>
 8003c58:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8003c5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <lfs_dir_orphaningcommit+0x7e>
                return err;
 8003c64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c68:	e2ad      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8003c6a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f001 f806 	bl	8004c80 <lfs_file_flush>
 8003c74:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8003c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <lfs_dir_orphaningcommit+0x9a>
                return err;
 8003c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c84:	e29f      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8003c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1b5      	bne.n	8003c04 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003cae:	461d      	mov	r5, r3
 8003cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8003cc2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff fcd8 	bl	8003684 <lfs_dir_relocatingcommit>
 8003cd4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8003cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da02      	bge.n	8003ce6 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8003ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ce4:	e26f      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fc fec8 	bl	8000a84 <lfs_pair_cmp>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	461d      	mov	r5, r3
 8003cfe:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8003d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d14a      	bne.n	8003dac <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3348      	adds	r3, #72	; 0x48
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7fe fcea 	bl	80026f8 <lfs_dir_getgstate>
 8003d24:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8003d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <lfs_dir_orphaningcommit+0x14a>
            return err;
 8003d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d34:	e247      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8003d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	3318      	adds	r3, #24
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fc ff0b 	bl	8000b62 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	7ddb      	ldrb	r3, [r3, #23]
 8003d50:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003d54:	051a      	lsls	r2, r3, #20
 8003d56:	4bc2      	ldr	r3, [pc, #776]	; (8004060 <lfs_dir_orphaningcommit+0x474>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	3318      	adds	r3, #24
 8003d60:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d62:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d66:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003d6a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003d6e:	2000      	movs	r0, #0
 8003d70:	9001      	str	r0, [sp, #4]
 8003d72:	2001      	movs	r0, #1
 8003d74:	9000      	str	r0, [sp, #0]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff fc84 	bl	8003684 <lfs_dir_relocatingcommit>
 8003d7c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	3318      	adds	r3, #24
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fc fed2 	bl	8000b2e <lfs_pair_fromle32>
        if (state < 0) {
 8003d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	da02      	bge.n	8003d98 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8003d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d96:	e216      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8003d98:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003d9c:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8003da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8003db2:	e1fc      	b.n	80041ae <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8003db4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003db8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003dbc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003dc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dc4:	4ca7      	ldr	r4, [pc, #668]	; (8004064 <lfs_dir_orphaningcommit+0x478>)
 8003dc6:	9403      	str	r4, [sp, #12]
 8003dc8:	9102      	str	r1, [sp, #8]
 8003dca:	9201      	str	r2, [sp, #4]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f44f 6217 	mov.w	r2, #2416	; 0x970
 8003dd4:	49a4      	ldr	r1, [pc, #656]	; (8004068 <lfs_dir_orphaningcommit+0x47c>)
 8003dd6:	48a5      	ldr	r0, [pc, #660]	; (800406c <lfs_dir_orphaningcommit+0x480>)
 8003dd8:	f005 fb80 	bl	80094dc <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f103 0220 	add.w	r2, r3, #32
 8003de8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fc fe48 	bl	8000a84 <lfs_pair_cmp>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8003dfa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8003e02:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e12:	e037      	b.n	8003e84 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8003e14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e18:	f103 0208 	add.w	r2, r3, #8
 8003e1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fe2e 	bl	8000a84 <lfs_pair_cmp>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8003e2e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003e32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e36:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8003e38:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003e3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e40:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8003e42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e46:	799b      	ldrb	r3, [r3, #6]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d116      	bne.n	8003e7a <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8003e4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e50:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003e54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc fe12 	bl	8000a84 <lfs_pair_cmp>
 8003e60:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8003e66:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003e6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8003e70:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003e74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8003e7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1c3      	bne.n	8003e14 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8003e8c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003e90:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e94:	4619      	mov	r1, r3
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f001 fd0c 	bl	80058b4 <lfs_fs_parent>
 8003e9c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8003ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da07      	bge.n	8003eb8 <lfs_dir_orphaningcommit+0x2cc>
 8003ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eac:	f113 0f02 	cmn.w	r3, #2
 8003eb0:	d002      	beq.n	8003eb8 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8003eb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eb6:	e186      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8003eb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ebc:	f113 0f02 	cmn.w	r3, #2
 8003ec0:	bf14      	ite	ne
 8003ec2:	2301      	movne	r3, #1
 8003ec4:	2300      	moveq	r3, #0
 8003ec6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8003eca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ece:	f113 0f02 	cmn.w	r3, #2
 8003ed2:	f000 809e 	beq.w	8004012 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f001 fd81 	bl	80059e0 <lfs_fs_preporphans>
 8003ede:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8003ee2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <lfs_dir_orphaningcommit+0x304>
                return err;
 8003eea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003eee:	e16a      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8003ef0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003ef4:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3330      	adds	r3, #48	; 0x30
 8003efc:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003f00:	4611      	mov	r1, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fc ff64 	bl	8000dd0 <lfs_gstate_hasmovehere>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02d      	beq.n	8003f6a <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fc fea4 	bl	8000c60 <lfs_tag_id>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8003f1e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003f20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f22:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8003f26:	484f      	ldr	r0, [pc, #316]	; (8004064 <lfs_dir_orphaningcommit+0x478>)
 8003f28:	9002      	str	r0, [sp, #8]
 8003f2a:	9201      	str	r2, [sp, #4]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	f640 129d 	movw	r2, #2461	; 0x99d
 8003f34:	494c      	ldr	r1, [pc, #304]	; (8004068 <lfs_dir_orphaningcommit+0x47c>)
 8003f36:	484e      	ldr	r0, [pc, #312]	; (8004070 <lfs_dir_orphaningcommit+0x484>)
 8003f38:	f005 fad0 	bl	80094dc <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f001 fd9c 	bl	8005a80 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8003f48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fc fe87 	bl	8000c60 <lfs_tag_id>
 8003f52:	4603      	mov	r3, r0
 8003f54:	461a      	mov	r2, r3
 8003f56:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d205      	bcs.n	8003f6a <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8003f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f62:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003f66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8003f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6c:	657b      	str	r3, [r7, #84]	; 0x54
 8003f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f70:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 8003f72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc fdf3 	bl	8000b62 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8003f7c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8003f80:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d007      	beq.n	8003f98 <lfs_dir_orphaningcommit+0x3ac>
 8003f88:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8003f8c:	029b      	lsls	r3, r3, #10
 8003f8e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8003f92:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8003f96:	e000      	b.n	8003f9a <lfs_dir_orphaningcommit+0x3ae>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003faa:	653b      	str	r3, [r7, #80]	; 0x50
 8003fac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fb0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003fb4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003fb8:	2000      	movs	r0, #0
 8003fba:	9001      	str	r0, [sp, #4]
 8003fbc:	2002      	movs	r0, #2
 8003fbe:	9000      	str	r0, [sp, #0]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f7ff fb5f 	bl	8003684 <lfs_dir_relocatingcommit>
 8003fc6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8003fca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc fdad 	bl	8000b2e <lfs_pair_fromle32>
            if (state < 0) {
 8003fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	da02      	bge.n	8003fe2 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8003fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fe0:	e0f1      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8003fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d113      	bne.n	8004012 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8003fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8003ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8003ff6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003ffa:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8003ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004002:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004010:	e0cd      	b.n	80041ae <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004012:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004016:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800401a:	4619      	mov	r1, r3
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f001 fb97 	bl	8005750 <lfs_fs_pred>
 8004022:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8004026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d007      	beq.n	800403e <lfs_dir_orphaningcommit+0x452>
 800402e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004032:	f113 0f02 	cmn.w	r3, #2
 8004036:	d002      	beq.n	800403e <lfs_dir_orphaningcommit+0x452>
            return err;
 8004038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800403c:	e0c3      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800403e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01a      	beq.n	800407c <lfs_dir_orphaningcommit+0x490>
 8004046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800404a:	f113 0f02 	cmn.w	r3, #2
 800404e:	d115      	bne.n	800407c <lfs_dir_orphaningcommit+0x490>
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <lfs_dir_orphaningcommit+0x488>)
 8004052:	4a09      	ldr	r2, [pc, #36]	; (8004078 <lfs_dir_orphaningcommit+0x48c>)
 8004054:	f44f 611c 	mov.w	r1, #2496	; 0x9c0
 8004058:	4803      	ldr	r0, [pc, #12]	; (8004068 <lfs_dir_orphaningcommit+0x47c>)
 800405a:	f004 fe1d 	bl	8008c98 <__assert_func>
 800405e:	bf00      	nop
 8004060:	000ffc08 	.word	0x000ffc08
 8004064:	0800a240 	.word	0x0800a240
 8004068:	0800a138 	.word	0x0800a138
 800406c:	0800a3c0 	.word	0x0800a3c0
 8004070:	0800a3fc 	.word	0x0800a3fc
 8004074:	0800a440 	.word	0x0800a440
 8004078:	0800ac80 	.word	0x0800ac80

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 800407c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004080:	f113 0f02 	cmn.w	r3, #2
 8004084:	f000 8093 	beq.w	80041ae <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3330      	adds	r3, #48	; 0x30
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc fe56 	bl	8000d3e <lfs_gstate_hasorphans>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8004098:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800409c:	425b      	negs	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	b25b      	sxtb	r3, r3
 80040a2:	4619      	mov	r1, r3
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f001 fc9b 	bl	80059e0 <lfs_fs_preporphans>
 80040aa:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80040ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80040b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040ba:	e084      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80040bc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80040c0:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3330      	adds	r3, #48	; 0x30
 80040c8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fe7e 	bl	8000dd0 <lfs_gstate_hasmovehere>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01c      	beq.n	8004114 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fc fdbe 	bl	8000c60 <lfs_tag_id>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 80040ea:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80040ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ee:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80040f2:	4837      	ldr	r0, [pc, #220]	; (80041d0 <lfs_dir_orphaningcommit+0x5e4>)
 80040f4:	9002      	str	r0, [sp, #8]
 80040f6:	9201      	str	r2, [sp, #4]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	460b      	mov	r3, r1
 80040fc:	f640 12d1 	movw	r2, #2513	; 0x9d1
 8004100:	4934      	ldr	r1, [pc, #208]	; (80041d4 <lfs_dir_orphaningcommit+0x5e8>)
 8004102:	4835      	ldr	r0, [pc, #212]	; (80041d8 <lfs_dir_orphaningcommit+0x5ec>)
 8004104:	f005 f9ea 	bl	80094dc <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004108:	2200      	movs	r2, #0
 800410a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f001 fcb6 	bl	8005a80 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 800411a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800411c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8004120:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004124:	4618      	mov	r0, r3
 8004126:	f7fc fd1c 	bl	8000b62 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800412a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800412e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <lfs_dir_orphaningcommit+0x55a>
 8004136:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800413a:	029b      	lsls	r3, r3, #10
 800413c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004140:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004144:	e000      	b.n	8004148 <lfs_dir_orphaningcommit+0x55c>
 8004146:	2300      	movs	r3, #0
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
 800414a:	2300      	movs	r3, #0
 800414c:	62bb      	str	r3, [r7, #40]	; 0x28
 800414e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004152:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004156:	051a      	lsls	r2, r3, #20
 8004158:	4b20      	ldr	r3, [pc, #128]	; (80041dc <lfs_dir_orphaningcommit+0x5f0>)
 800415a:	4313      	orrs	r3, r2
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800415e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004162:	633b      	str	r3, [r7, #48]	; 0x30
 8004164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004168:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800416c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004170:	2000      	movs	r0, #0
 8004172:	9001      	str	r0, [sp, #4]
 8004174:	2002      	movs	r0, #2
 8004176:	9000      	str	r0, [sp, #0]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f7ff fa83 	bl	8003684 <lfs_dir_relocatingcommit>
 800417e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004182:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc fcd1 	bl	8000b2e <lfs_pair_fromle32>
            if (state < 0) {
 800418c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004190:	2b00      	cmp	r3, #0
 8004192:	da02      	bge.n	800419a <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8004194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004198:	e015      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 800419a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800419e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80041a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80041aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80041ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	f43f adfe 	beq.w	8003db4 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80041b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <lfs_dir_orphaningcommit+0x5d8>
 80041c0:	2303      	movs	r3, #3
 80041c2:	e000      	b.n	80041c6 <lfs_dir_orphaningcommit+0x5da>
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	37e0      	adds	r7, #224	; 0xe0
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bdb0      	pop	{r4, r5, r7, pc}
 80041ce:	bf00      	nop
 80041d0:	0800a240 	.word	0x0800a240
 80041d4:	0800a138 	.word	0x0800a138
 80041d8:	0800a3fc 	.word	0x0800a3fc
 80041dc:	000ffc08 	.word	0x000ffc08

080041e0 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7ff fcf9 	bl	8003bec <lfs_dir_orphaningcommit>
 80041fa:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	da01      	bge.n	8004206 <lfs_dir_commit+0x26>
        return orphans;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	e00d      	b.n	8004222 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 800420c:	2100      	movs	r1, #0
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f001 fd58 	bl	8005cc4 <lfs_fs_deorphan>
 8004214:	6138      	str	r0, [r7, #16]
        if (err) {
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <lfs_dir_commit+0x40>
            return err;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	e000      	b.n	8004222 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800422a:	b590      	push	{r4, r7, lr}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	3b08      	subs	r3, #8
 8004242:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	fbb2 f3f3 	udiv	r3, r2, r3
 800424c:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <lfs_ctz_index+0x2e>
        return 0;
 8004254:	2300      	movs	r3, #0
 8004256:	e01c      	b.n	8004292 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	3b01      	subs	r3, #1
 800425c:	4618      	mov	r0, r3
 800425e:	f7fb fff2 	bl	8000246 <lfs_popc>
 8004262:	4603      	mov	r3, r0
 8004264:	3302      	adds	r3, #2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	1ad2      	subs	r2, r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	1ad4      	subs	r4, r2, r3
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7fb ffe0 	bl	8000246 <lfs_popc>
 8004286:	4603      	mov	r3, r0
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	1ae2      	subs	r2, r4, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	601a      	str	r2, [r3, #0]
    return i;
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	4618      	mov	r0, r3
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	bd90      	pop	{r4, r7, pc}

0800429a <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800429a:	b590      	push	{r4, r7, lr}
 800429c:	b08f      	sub	sp, #60	; 0x3c
 800429e:	af04      	add	r7, sp, #16
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 80042ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b0:	f04f 32ff 	mov.w	r2, #4294967295
 80042b4:	601a      	str	r2, [r3, #0]
        *off = 0;
 80042b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
        return 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	e053      	b.n	8004368 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80042c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c2:	3b01      	subs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	4619      	mov	r1, r3
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff ffac 	bl	800422a <lfs_ctz_index>
 80042d2:	4603      	mov	r3, r0
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80042d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80042da:	4619      	mov	r1, r3
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f7ff ffa4 	bl	800422a <lfs_ctz_index>
 80042e2:	4603      	mov	r3, r0
 80042e4:	623b      	str	r3, [r7, #32]

    while (current > target) {
 80042e6:	e034      	b.n	8004352 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 80042e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	3301      	adds	r3, #1
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fb ff8b 	bl	800020c <lfs_npw2>
 80042f6:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80042f8:	1e5c      	subs	r4, r3, #1
 80042fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042fc:	f7fb ff95 	bl	800022a <lfs_ctz>
 8004300:	4603      	mov	r3, r0
 8004302:	4619      	mov	r1, r3
 8004304:	4620      	mov	r0, r4
 8004306:	f7fb ff4c 	bl	80001a2 <lfs_min>
 800430a:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	0092      	lsls	r2, r2, #2
 8004312:	2104      	movs	r1, #4
 8004314:	9103      	str	r1, [sp, #12]
 8004316:	4639      	mov	r1, r7
 8004318:	9102      	str	r1, [sp, #8]
 800431a:	9201      	str	r2, [sp, #4]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2304      	movs	r3, #4
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7fc f80f 	bl	8000348 <lfs_bd_read>
 800432a:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fb ffa2 	bl	8000278 <lfs_fromle32>
 8004334:	4603      	mov	r3, r0
 8004336:	603b      	str	r3, [r7, #0]
        if (err) {
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <lfs_ctz_find+0xa8>
            return err;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	e012      	b.n	8004368 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004342:	2201      	movs	r2, #1
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	461a      	mov	r2, r3
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	429a      	cmp	r2, r3
 8004358:	d8c6      	bhi.n	80042e8 <lfs_ctz_find+0x4e>
    }

    *block = head;
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435e:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004360:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004364:	601a      	str	r2, [r3, #0]
    return 0;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	372c      	adds	r7, #44	; 0x2c
 800436c:	46bd      	mov	sp, r7
 800436e:	bd90      	pop	{r4, r7, pc}

08004370 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b092      	sub	sp, #72	; 0x48
 8004374:	af04      	add	r7, sp, #16
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800437e:	f107 0320 	add.w	r3, r7, #32
 8004382:	4619      	mov	r1, r3
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7fc ff09 	bl	800119c <lfs_alloc>
 800438a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <lfs_ctz_extend+0x26>
            return err;
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	e0e9      	b.n	800456a <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	4619      	mov	r1, r3
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f7fc fb12 	bl	80009c4 <lfs_bd_erase>
 80043a0:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 80043a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d006      	beq.n	80043b6 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80043ae:	f000 80cb 	beq.w	8004548 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	e0d9      	b.n	800456a <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 80043b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d107      	bne.n	80043cc <lfs_ctz_extend+0x5c>
                *block = nblock;
 80043bc:	6a3a      	ldr	r2, [r7, #32]
 80043be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c0:	601a      	str	r2, [r3, #0]
                *off = 0;
 80043c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
                return 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e0ce      	b.n	800456a <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 80043cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ce:	3b01      	subs	r3, #1
 80043d0:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 80043d2:	f107 031c 	add.w	r3, r7, #28
 80043d6:	4619      	mov	r1, r3
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7ff ff26 	bl	800422a <lfs_ctz_index>
 80043de:	4603      	mov	r3, r0
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	3301      	adds	r3, #1
 80043e6:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d044      	beq.n	800447e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 80043f4:	2300      	movs	r3, #0
 80043f6:	637b      	str	r3, [r7, #52]	; 0x34
 80043f8:	e035      	b.n	8004466 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fe:	1ad2      	subs	r2, r2, r3
 8004400:	2301      	movs	r3, #1
 8004402:	9303      	str	r3, [sp, #12]
 8004404:	f107 0317 	add.w	r3, r7, #23
 8004408:	9302      	str	r3, [sp, #8]
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	4613      	mov	r3, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	2100      	movs	r1, #0
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7fb ff95 	bl	8000348 <lfs_bd_read>
 800441e:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <lfs_ctz_extend+0xba>
                        return err;
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	e09f      	b.n	800456a <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	2201      	movs	r2, #1
 800442e:	9203      	str	r2, [sp, #12]
 8004430:	f107 0217 	add.w	r2, r7, #23
 8004434:	9202      	str	r2, [sp, #8]
 8004436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004438:	9201      	str	r2, [sp, #4]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2301      	movs	r3, #1
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f7fc fa12 	bl	800086c <lfs_bd_prog>
 8004448:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004456:	d101      	bne.n	800445c <lfs_ctz_extend+0xec>
                            goto relocate;
 8004458:	bf00      	nop
                    goto relocate;
 800445a:	e075      	b.n	8004548 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800445e:	e084      	b.n	800456a <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004462:	3301      	adds	r3, #1
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800446a:	429a      	cmp	r2, r3
 800446c:	d3c5      	bcc.n	80043fa <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004472:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004478:	601a      	str	r2, [r3, #0]
                return 0;
 800447a:	2300      	movs	r3, #0
 800447c:	e075      	b.n	800456a <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800447e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004480:	3301      	adds	r3, #1
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004486:	f7fb fed0 	bl	800022a <lfs_ctz>
 800448a:	4603      	mov	r3, r0
 800448c:	3301      	adds	r3, #1
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004494:	2300      	movs	r3, #0
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
 8004498:	e049      	b.n	800452e <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4618      	mov	r0, r3
 800449e:	f7fb fef5 	bl	800028c <lfs_tole32>
 80044a2:	4603      	mov	r3, r0
 80044a4:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044aa:	0092      	lsls	r2, r2, #2
 80044ac:	2104      	movs	r1, #4
 80044ae:	9103      	str	r1, [sp, #12]
 80044b0:	f107 0118 	add.w	r1, r7, #24
 80044b4:	9102      	str	r1, [sp, #8]
 80044b6:	9201      	str	r2, [sp, #4]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	2301      	movs	r3, #1
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f7fc f9d3 	bl	800086c <lfs_bd_prog>
 80044c6:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fb fed4 	bl	8000278 <lfs_fromle32>
 80044d0:	4603      	mov	r3, r0
 80044d2:	61bb      	str	r3, [r7, #24]
                if (err) {
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 80044da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044dc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80044e0:	d034      	beq.n	800454c <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	e041      	b.n	800456a <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	3b01      	subs	r3, #1
 80044ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d01b      	beq.n	8004528 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f4:	0092      	lsls	r2, r2, #2
 80044f6:	2104      	movs	r1, #4
 80044f8:	9103      	str	r1, [sp, #12]
 80044fa:	f107 0118 	add.w	r1, r7, #24
 80044fe:	9102      	str	r1, [sp, #8]
 8004500:	9201      	str	r2, [sp, #4]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2304      	movs	r3, #4
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	2100      	movs	r1, #0
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7fb ff1c 	bl	8000348 <lfs_bd_read>
 8004510:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4618      	mov	r0, r3
 8004516:	f7fb feaf 	bl	8000278 <lfs_fromle32>
 800451a:	4603      	mov	r3, r0
 800451c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <lfs_ctz_extend+0x1b8>
                        return err;
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	e020      	b.n	800456a <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	3301      	adds	r3, #1
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
 800452e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	429a      	cmp	r2, r3
 8004534:	d3b1      	bcc.n	800449a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8004536:	6a3a      	ldr	r2, [r7, #32]
 8004538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453a:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	009a      	lsls	r2, r3, #2
 8004540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004542:	601a      	str	r2, [r3, #0]
            return 0;
 8004544:	2300      	movs	r3, #0
 8004546:	e010      	b.n	800456a <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8004548:	bf00      	nop
 800454a:	e000      	b.n	800454e <lfs_ctz_extend+0x1de>
                        goto relocate;
 800454c:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	4a08      	ldr	r2, [pc, #32]	; (8004574 <lfs_ctz_extend+0x204>)
 8004552:	9200      	str	r2, [sp, #0]
 8004554:	f640 328a 	movw	r2, #2954	; 0xb8a
 8004558:	4907      	ldr	r1, [pc, #28]	; (8004578 <lfs_ctz_extend+0x208>)
 800455a:	4808      	ldr	r0, [pc, #32]	; (800457c <lfs_ctz_extend+0x20c>)
 800455c:	f004 ffbe 	bl	80094dc <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7fb fecc 	bl	8000300 <lfs_cache_drop>
    while (true) {
 8004568:	e709      	b.n	800437e <lfs_ctz_extend+0xe>
    }
}
 800456a:	4618      	mov	r0, r3
 800456c:	3738      	adds	r7, #56	; 0x38
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	0800a240 	.word	0x0800a240
 8004578:	0800a138 	.word	0x0800a138
 800457c:	0800a2c0 	.word	0x0800a2c0

08004580 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b090      	sub	sp, #64	; 0x40
 8004584:	af04      	add	r7, sp, #16
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <lfs_ctz_traverse+0x18>
        return 0;
 8004594:	2300      	movs	r3, #0
 8004596:	e06d      	b.n	8004674 <lfs_ctz_traverse+0xf4>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	3b01      	subs	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	f107 031c 	add.w	r3, r7, #28
 80045a2:	4619      	mov	r1, r3
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff fe40 	bl	800422a <lfs_ctz_index>
 80045aa:	4603      	mov	r3, r0
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80045ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80045b4:	4798      	blx	r3
 80045b6:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <lfs_ctz_traverse+0x42>
            return err;
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	e058      	b.n	8004674 <lfs_ctz_traverse+0xf4>
        }

        if (index == 0) {
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <lfs_ctz_traverse+0x4c>
            return 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e053      	b.n	8004674 <lfs_ctz_traverse+0xf4>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	f1c3 0302 	rsb	r3, r3, #2
 80045d6:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80045d8:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80045da:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80045dc:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80045de:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80045e0:	9303      	str	r3, [sp, #12]
 80045e2:	f107 0314 	add.w	r3, r7, #20
 80045e6:	9302      	str	r3, [sp, #8]
 80045e8:	2300      	movs	r3, #0
 80045ea:	9301      	str	r3, [sp, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7fb fea6 	bl	8000348 <lfs_bd_read>
 80045fc:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb fe39 	bl	8000278 <lfs_fromle32>
 8004606:	4603      	mov	r3, r0
 8004608:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fb fe33 	bl	8000278 <lfs_fromle32>
 8004612:	4603      	mov	r3, r0
 8004614:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <lfs_ctz_traverse+0xa0>
            return err;
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	e029      	b.n	8004674 <lfs_ctz_traverse+0xf4>
        }

        for (int i = 0; i < count-1; i++) {
 8004620:	2300      	movs	r3, #0
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
 8004624:	e013      	b.n	800464e <lfs_ctz_traverse+0xce>
            err = cb(data, heads[i]);
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800462e:	4413      	add	r3, r2
 8004630:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004636:	4611      	mov	r1, r2
 8004638:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800463a:	4798      	blx	r3
 800463c:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <lfs_ctz_traverse+0xc8>
                return err;
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	e015      	b.n	8004674 <lfs_ctz_traverse+0xf4>
        for (int i = 0; i < count-1; i++) {
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	3301      	adds	r3, #1
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	3b01      	subs	r3, #1
 8004652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004654:	429a      	cmp	r2, r3
 8004656:	dbe6      	blt.n	8004626 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	3b01      	subs	r3, #1
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004662:	4413      	add	r3, r2
 8004664:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004668:	603b      	str	r3, [r7, #0]
        index -= count;
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004672:	e79c      	b.n	80045ae <lfs_ctz_traverse+0x2e>
    }
}
 8004674:	4618      	mov	r0, r3
 8004676:	3730      	adds	r7, #48	; 0x30
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800467c:	b5b0      	push	{r4, r5, r7, lr}
 800467e:	b09a      	sub	sp, #104	; 0x68
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f001 fcc5 	bl	8006024 <lfs_fs_forceconsistency>
 800469a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 800469c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <lfs_file_rawopencfg+0x2a>
            return err;
 80046a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a4:	e1b0      	b.n	8004a08 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80046aa:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2200      	movs	r2, #0
 80046b6:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f103 0108 	add.w	r1, r3, #8
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3304      	adds	r3, #4
 80046ce:	1d3a      	adds	r2, r7, #4
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7fe f88d 	bl	80027f0 <lfs_dir_find>
 80046d6:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 80046d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046da:	2b00      	cmp	r3, #0
 80046dc:	da0c      	bge.n	80046f8 <lfs_file_rawopencfg+0x7c>
 80046de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046e0:	f113 0f02 	cmn.w	r3, #2
 80046e4:	d105      	bne.n	80046f2 <lfs_file_rawopencfg+0x76>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	889b      	ldrh	r3, [r3, #4]
 80046ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d102      	bne.n	80046f8 <lfs_file_rawopencfg+0x7c>
        err = tag;
 80046f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80046f6:	e17c      	b.n	80049f2 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2201      	movs	r2, #1
 80046fc:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80046fe:	68b9      	ldr	r1, [r7, #8]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7fc fc9a 	bl	800103a <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8004706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004708:	f113 0f02 	cmn.w	r3, #2
 800470c:	d14e      	bne.n	80047ac <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8004718:	f06f 0301 	mvn.w	r3, #1
 800471c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800471e:	e168      	b.n	80049f2 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fb fd12 	bl	800014c <strlen>
 8004728:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004730:	429a      	cmp	r2, r3
 8004732:	d903      	bls.n	800473c <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8004734:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004738:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800473a:	e15a      	b.n	80049f2 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f103 0108 	add.w	r1, r3, #8
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	889b      	ldrh	r3, [r3, #4]
 8004746:	029b      	lsls	r3, r3, #10
 8004748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800474c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004752:	2300      	movs	r3, #0
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	889b      	ldrh	r3, [r3, #4]
 800475a:	029a      	lsls	r2, r3, #10
 800475c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475e:	4313      	orrs	r3, r2
 8004760:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	63bb      	str	r3, [r7, #56]	; 0x38
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	889b      	ldrh	r3, [r3, #4]
 800476e:	029b      	lsls	r3, r3, #10
 8004770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800477a:	2300      	movs	r3, #0
 800477c:	643b      	str	r3, [r7, #64]	; 0x40
 800477e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004782:	2303      	movs	r3, #3
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7ff fd2b 	bl	80041e0 <lfs_dir_commit>
 800478a:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 800478c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478e:	f113 0f1c 	cmn.w	r3, #28
 8004792:	d001      	beq.n	8004798 <lfs_file_rawopencfg+0x11c>
 8004794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004796:	e001      	b.n	800479c <lfs_file_rawopencfg+0x120>
 8004798:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800479c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 800479e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f040 8125 	bne.w	80049f0 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80047a6:	4b9a      	ldr	r3, [pc, #616]	; (8004a10 <lfs_file_rawopencfg+0x394>)
 80047a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80047aa:	e044      	b.n	8004836 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80047b6:	f06f 0310 	mvn.w	r3, #16
 80047ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80047bc:	e119      	b.n	80049f2 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80047be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fc fa25 	bl	8000c10 <lfs_tag_type3>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d003      	beq.n	80047d4 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 80047cc:	f06f 0314 	mvn.w	r3, #20
 80047d0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80047d2:	e10e      	b.n	80049f2 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00e      	beq.n	80047fc <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	889b      	ldrh	r3, [r3, #4]
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ec:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
 80047fa:	e01c      	b.n	8004836 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	889b      	ldrh	r3, [r3, #4]
 8004806:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800480c:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8004814:	9200      	str	r2, [sp, #0]
 8004816:	4a7f      	ldr	r2, [pc, #508]	; (8004a14 <lfs_file_rawopencfg+0x398>)
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7fc fe27 	bl	800146c <lfs_dir_get>
 800481e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8004820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004822:	2b00      	cmp	r3, #0
 8004824:	da02      	bge.n	800482c <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8004826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004828:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800482a:	e0e2      	b.n	80049f2 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	3328      	adds	r3, #40	; 0x28
 8004830:	4618      	mov	r0, r3
 8004832:	f7fc fb5d 	bl	8000ef0 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8004836:	2300      	movs	r3, #0
 8004838:	657b      	str	r3, [r7, #84]	; 0x54
 800483a:	e063      	b.n	8004904 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d03c      	beq.n	80048c2 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004856:	4613      	mov	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004866:	051a      	lsls	r2, r3, #20
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	889b      	ldrh	r3, [r3, #4]
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	ea42 0103 	orr.w	r1, r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004876:	6858      	ldr	r0, [r3, #4]
 8004878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800487a:	4613      	mov	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4403      	add	r3, r0
 8004884:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8004886:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004892:	4613      	mov	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	4603      	mov	r3, r0
 80048a2:	4a5d      	ldr	r2, [pc, #372]	; (8004a18 <lfs_file_rawopencfg+0x39c>)
 80048a4:	4621      	mov	r1, r4
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7fc fde0 	bl	800146c <lfs_dir_get>
 80048ac:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80048ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da06      	bge.n	80048c2 <lfs_file_rawopencfg+0x246>
 80048b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b6:	f113 0f02 	cmn.w	r3, #2
 80048ba:	d002      	beq.n	80048c2 <lfs_file_rawopencfg+0x246>
                err = res;
 80048bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048be:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80048c0:	e097      	b.n	80049f2 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d017      	beq.n	80048fe <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048d6:	4613      	mov	r3, r2
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d903      	bls.n	80048f2 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 80048ea:	f06f 031b 	mvn.w	r3, #27
 80048ee:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80048f0:	e07f      	b.n	80049f2 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80048fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004900:	3301      	adds	r3, #1
 8004902:	657b      	str	r3, [r7, #84]	; 0x54
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800490c:	429a      	cmp	r2, r3
 800490e:	d395      	bcc.n	800483c <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	64da      	str	r2, [r3, #76]	; 0x4c
 8004924:	e010      	b.n	8004948 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	4618      	mov	r0, r3
 800492e:	f7fb fcd0 	bl	80002d2 <lfs_malloc>
 8004932:	4602      	mov	r2, r0
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8004940:	f06f 030b 	mvn.w	r3, #11
 8004944:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8004946:	e054      	b.n	80049f2 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	3340      	adds	r3, #64	; 0x40
 800494c:	4619      	mov	r1, r3
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7fb fce4 	bl	800031c <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8004954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc f95a 	bl	8000c10 <lfs_tag_type3>
 800495c:	4603      	mov	r3, r0
 800495e:	461a      	mov	r2, r3
 8004960:	f240 2301 	movw	r3, #513	; 0x201
 8004964:	429a      	cmp	r2, r3
 8004966:	d141      	bne.n	80049ec <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f06f 0201 	mvn.w	r2, #1
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8004970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc f983 	bl	8000c7e <lfs_tag_size>
 8004978:	4602      	mov	r2, r0
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2200      	movs	r2, #0
 8004996:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800499c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d020      	beq.n	80049ec <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	889b      	ldrh	r3, [r3, #4]
 80049b4:	029c      	lsls	r4, r3, #10
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ba:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fb fbef 	bl	80001a2 <lfs_min>
 80049c4:	4603      	mov	r3, r0
 80049c6:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80049c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	4a0f      	ldr	r2, [pc, #60]	; (8004a14 <lfs_file_rawopencfg+0x398>)
 80049d6:	4629      	mov	r1, r5
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7fc fd47 	bl	800146c <lfs_dir_get>
 80049de:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 80049e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da02      	bge.n	80049ec <lfs_file_rawopencfg+0x370>
                err = res;
 80049e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80049ea:	e002      	b.n	80049f2 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e00b      	b.n	8004a08 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 80049f0:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f823 	bl	8004a4c <lfs_file_rawclose>
    return err;
 8004a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3760      	adds	r7, #96	; 0x60
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a10:	20100000 	.word	0x20100000
 8004a14:	700ffc00 	.word	0x700ffc00
 8004a18:	7ffffc00 	.word	0x7ffffc00

08004a1c <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <lfs_file_rawopen+0x2c>)
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff fe21 	bl	800467c <lfs_file_rawopencfg>
 8004a3a:	6178      	str	r0, [r7, #20]
    return err;
 8004a3c:	697b      	ldr	r3, [r7, #20]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	0800ac98 	.word	0x0800ac98

08004a4c <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8004a56:	6839      	ldr	r1, [r7, #0]
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9e5 	bl	8004e28 <lfs_file_rawsync>
 8004a5e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc fac8 	bl	8000ff8 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d104      	bne.n	8004a7c <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fb fc37 	bl	80002ea <lfs_free>
    }

    return err;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b08d      	sub	sp, #52	; 0x34
 8004a8c:	af06      	add	r7, sp, #24
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004a92:	f107 030c 	add.w	r3, r7, #12
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7fc fb7f 	bl	800119c <lfs_alloc>
 8004a9e:	6138      	str	r0, [r7, #16]
        if (err) {
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <lfs_file_relocate+0x22>
            return err;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	e0bb      	b.n	8004c22 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fb ff88 	bl	80009c4 <lfs_bd_erase>
 8004ab4:	6138      	str	r0, [r7, #16]
        if (err) {
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d006      	beq.n	8004aca <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004ac2:	f000 809b 	beq.w	8004bfc <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	e0ab      	b.n	8004c22 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e069      	b.n	8004ba4 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d027      	beq.n	8004b2c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f103 0008 	add.w	r0, r3, #8
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	889b      	ldrh	r3, [r3, #4]
 8004af4:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8004af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004afe:	2101      	movs	r1, #1
 8004b00:	9105      	str	r1, [sp, #20]
 8004b02:	f107 010b 	add.w	r1, r7, #11
 8004b06:	9104      	str	r1, [sp, #16]
 8004b08:	6979      	ldr	r1, [r7, #20]
 8004b0a:	9103      	str	r1, [sp, #12]
 8004b0c:	9302      	str	r3, [sp, #8]
 8004b0e:	4b47      	ldr	r3, [pc, #284]	; (8004c2c <lfs_file_relocate+0x1a4>)
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	9200      	str	r2, [sp, #0]
 8004b14:	4623      	mov	r3, r4
 8004b16:	2200      	movs	r2, #0
 8004b18:	4601      	mov	r1, r0
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc fcc1 	bl	80014a2 <lfs_dir_getread>
 8004b20:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01e      	beq.n	8004b66 <lfs_file_relocate+0xde>
                    return err;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	e07a      	b.n	8004c22 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8004b32:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad4      	subs	r4, r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	2201      	movs	r2, #1
 8004b42:	9203      	str	r2, [sp, #12]
 8004b44:	f107 020b 	add.w	r2, r7, #11
 8004b48:	9202      	str	r2, [sp, #8]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	9201      	str	r2, [sp, #4]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	4623      	mov	r3, r4
 8004b52:	4602      	mov	r2, r0
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7fb fbf7 	bl	8000348 <lfs_bd_read>
 8004b5a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <lfs_file_relocate+0xde>
                    return err;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	e05d      	b.n	8004c22 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f103 0110 	add.w	r1, r3, #16
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	9203      	str	r2, [sp, #12]
 8004b74:	f107 020b 	add.w	r2, r7, #11
 8004b78:	9202      	str	r2, [sp, #8]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	9201      	str	r2, [sp, #4]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	2301      	movs	r3, #1
 8004b82:	4602      	mov	r2, r0
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fb fe71 	bl	800086c <lfs_bd_prog>
 8004b8a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004b98:	d032      	beq.n	8004c00 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	e041      	b.n	8004c22 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d390      	bcc.n	8004ad0 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69d9      	ldr	r1, [r3, #28]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f004 f8e3 	bl	8008d88 <memcpy>
        file->cache.block = lfs->pcache.block;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3310      	adds	r3, #16
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fb fb9b 	bl	800031c <lfs_cache_zero>

        file->block = nblock;
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e012      	b.n	8004c22 <lfs_file_relocate+0x19a>
                goto relocate;
 8004bfc:	bf00      	nop
 8004bfe:	e000      	b.n	8004c02 <lfs_file_relocate+0x17a>
                    goto relocate;
 8004c00:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <lfs_file_relocate+0x1a8>)
 8004c06:	9200      	str	r2, [sp, #0]
 8004c08:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8004c0c:	4909      	ldr	r1, [pc, #36]	; (8004c34 <lfs_file_relocate+0x1ac>)
 8004c0e:	480a      	ldr	r0, [pc, #40]	; (8004c38 <lfs_file_relocate+0x1b0>)
 8004c10:	f004 fc64 	bl	80094dc <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3310      	adds	r3, #16
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fb fb70 	bl	8000300 <lfs_cache_drop>
    while (true) {
 8004c20:	e737      	b.n	8004a92 <lfs_file_relocate+0xa>
    }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd90      	pop	{r4, r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	fff7fc00 	.word	0xfff7fc00
 8004c30:	0800a240 	.word	0x0800a240
 8004c34:	0800a138 	.word	0x0800a138
 8004c38:	0800a2c0 	.word	0x0800a2c0

08004c3c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fa44 	bl	80010dc <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff ff16 	bl	8004a88 <lfs_file_relocate>
 8004c5c:	60f8      	str	r0, [r7, #12]
    if (err) {
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <lfs_file_outline+0x2c>
        return err;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	e006      	b.n	8004c76 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8004c80:	b590      	push	{r4, r7, lr}
 8004c82:	b09f      	sub	sp, #124	; 0x7c
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d011      	beq.n	8004cba <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d105      	bne.n	8004cae <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	3340      	adds	r3, #64	; 0x40
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7fb fb29 	bl	8000300 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80a4 	beq.w	8004e10 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d176      	bne.n	8004dc8 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8004cda:	f107 030c 	add.w	r3, r7, #12
 8004cde:	2254      	movs	r2, #84	; 0x54
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f004 f85e 	bl	8008da4 <memset>
                .ctz.head = file->ctz.head,
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8004cec:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8004cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8004cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8004d04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fb faf6 	bl	8000300 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8004d14:	e02b      	b.n	8004d6e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8004d16:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8004d1a:	f107 010c 	add.w	r1, r7, #12
 8004d1e:	2301      	movs	r3, #1
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f90d 	bl	8004f40 <lfs_file_flushedread>
 8004d26:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8004d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	da01      	bge.n	8004d32 <lfs_file_flush+0xb2>
                    return res;
 8004d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d30:	e06f      	b.n	8004e12 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8004d32:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8004d36:	2301      	movs	r3, #1
 8004d38:	6839      	ldr	r1, [r7, #0]
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa08 	bl	8005150 <lfs_file_flushedwrite>
 8004d40:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8004d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da01      	bge.n	8004d4c <lfs_file_flush+0xcc>
                    return res;
 8004d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d4a:	e062      	b.n	8004e12 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d00b      	beq.n	8004d6e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8004d56:	f107 030c 	add.w	r3, r7, #12
 8004d5a:	3340      	adds	r3, #64	; 0x40
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fb face 	bl	8000300 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4619      	mov	r1, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fb fac9 	bl	8000300 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d3cd      	bcc.n	8004d16 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	2301      	movs	r3, #1
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fb fcc3 	bl	8000710 <lfs_bd_flush>
 8004d8a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8004d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d026      	beq.n	8004de0 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8004d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d94:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004d98:	d001      	beq.n	8004d9e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8004d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d9c:	e039      	b.n	8004e12 <lfs_file_flush+0x192>
                        goto relocate;
 8004d9e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <lfs_file_flush+0x19c>)
 8004da6:	9200      	str	r2, [sp, #0]
 8004da8:	f640 520f 	movw	r2, #3343	; 0xd0f
 8004dac:	491c      	ldr	r1, [pc, #112]	; (8004e20 <lfs_file_flush+0x1a0>)
 8004dae:	481d      	ldr	r0, [pc, #116]	; (8004e24 <lfs_file_flush+0x1a4>)
 8004db0:	f004 fb94 	bl	80094dc <iprintf>
                err = lfs_file_relocate(lfs, file);
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff fe66 	bl	8004a88 <lfs_file_relocate>
 8004dbc:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8004dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0da      	beq.n	8004d7a <lfs_file_flush+0xfa>
                    return err;
 8004dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dc6:	e024      	b.n	8004e12 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f7fb f9d6 	bl	8000184 <lfs_max>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8004dde:	e000      	b.n	8004de2 <lfs_file_flush+0x162>
                break;
 8004de0:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e0e:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3774      	adds	r7, #116	; 0x74
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd90      	pop	{r4, r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	0800a240 	.word	0x0800a240
 8004e20:	0800a138 	.word	0x0800a138
 8004e24:	0800a2c0 	.word	0x0800a2c0

08004e28 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b090      	sub	sp, #64	; 0x40
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e07a      	b.n	8004f38 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff ff1b 	bl	8004c80 <lfs_file_flush>
 8004e4a:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	e06a      	b.n	8004f38 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d063      	beq.n	8004f36 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	3308      	adds	r3, #8
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fb fdec 	bl	8000a50 <lfs_pair_isnull>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f083 0301 	eor.w	r3, r3, #1
 8004e7e:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d058      	beq.n	8004f36 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8004e90:	f240 2301 	movw	r3, #513	; 0x201
 8004e94:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea2:	e014      	b.n	8004ece <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8004ea4:	f240 2302 	movw	r3, #514	; 0x202
 8004ea8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eb0:	3228      	adds	r2, #40	; 0x28
 8004eb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004eb6:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8004eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fc f82e 	bl	8000f20 <lfs_ctz_tole32>
            buffer = &ctz;
 8004ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ec8:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8004eca:	2308      	movs	r3, #8
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	f103 0108 	add.w	r1, r3, #8
 8004ed4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ed6:	051a      	lsls	r2, r3, #20
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	889b      	ldrh	r3, [r3, #4]
 8004edc:	029b      	lsls	r3, r3, #10
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	61fb      	str	r3, [r7, #28]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	889b      	ldrh	r3, [r3, #4]
 8004eee:	029a      	lsls	r2, r3, #10
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8004efc:	623b      	str	r3, [r7, #32]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
 8004f06:	f107 0218 	add.w	r2, r7, #24
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff f967 	bl	80041e0 <lfs_dir_commit>
 8004f12:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d007      	beq.n	8004f2a <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	e006      	b.n	8004f38 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3740      	adds	r7, #64	; 0x40
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8004f40:	b5b0      	push	{r4, r5, r7, lr}
 8004f42:	b090      	sub	sp, #64	; 0x40
 8004f44:	af06      	add	r7, sp, #24
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d301      	bcc.n	8004f66 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e0b7      	b.n	80050d6 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	4619      	mov	r1, r3
 8004f72:	6838      	ldr	r0, [r7, #0]
 8004f74:	f7fb f915 	bl	80001a2 <lfs_min>
 8004f78:	6038      	str	r0, [r7, #0]
    nsize = size;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8004f7e:	e0a5      	b.n	80050cc <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d006      	beq.n	8004f9a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f94:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d130      	bne.n	8004ffc <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11c      	bne.n	8004fe0 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	3138      	adds	r1, #56	; 0x38
 8004fbc:	68b8      	ldr	r0, [r7, #8]
 8004fbe:	303c      	adds	r0, #60	; 0x3c
 8004fc0:	9003      	str	r0, [sp, #12]
 8004fc2:	9102      	str	r1, [sp, #8]
 8004fc4:	9201      	str	r2, [sp, #4]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	462b      	mov	r3, r5
 8004fca:	4622      	mov	r2, r4
 8004fcc:	2100      	movs	r1, #0
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff f963 	bl	800429a <lfs_ctz_find>
 8004fd4:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d009      	beq.n	8004ff0 <lfs_file_flushedread+0xb0>
                    return err;
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	e07a      	b.n	80050d6 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f06f 0201 	mvn.w	r2, #1
 8004fe6:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	4619      	mov	r1, r3
 800500a:	6a38      	ldr	r0, [r7, #32]
 800500c:	f7fb f8c9 	bl	80001a2 <lfs_min>
 8005010:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d026      	beq.n	800506c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f103 0408 	add.w	r4, r3, #8
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 800502e:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	889b      	ldrh	r3, [r3, #4]
 8005034:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8005036:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800503a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005042:	69b8      	ldr	r0, [r7, #24]
 8005044:	9005      	str	r0, [sp, #20]
 8005046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005048:	9004      	str	r0, [sp, #16]
 800504a:	9103      	str	r1, [sp, #12]
 800504c:	9302      	str	r3, [sp, #8]
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <lfs_file_flushedread+0x1a0>)
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	9200      	str	r2, [sp, #0]
 8005054:	462b      	mov	r3, r5
 8005056:	2200      	movs	r2, #0
 8005058:	4621      	mov	r1, r4
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7fc fa21 	bl	80014a2 <lfs_dir_getread>
 8005060:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01d      	beq.n	80050a4 <lfs_file_flushedread+0x164>
                return err;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	e034      	b.n	80050d6 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8005076:	69dc      	ldr	r4, [r3, #28]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005080:	69b9      	ldr	r1, [r7, #24]
 8005082:	9103      	str	r1, [sp, #12]
 8005084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005086:	9102      	str	r1, [sp, #8]
 8005088:	9201      	str	r2, [sp, #4]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	4623      	mov	r3, r4
 800508e:	4602      	mov	r2, r0
 8005090:	2100      	movs	r1, #0
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7fb f958 	bl	8000348 <lfs_bd_read>
 8005098:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <lfs_file_flushedread+0x164>
                return err;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	e018      	b.n	80050d6 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	441a      	add	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	441a      	add	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 80050bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	4413      	add	r3, r2
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f47f af56 	bne.w	8004f80 <lfs_file_flushedread+0x40>
    }

    return size;
 80050d4:	683b      	ldr	r3, [r7, #0]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3728      	adds	r7, #40	; 0x28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bdb0      	pop	{r4, r5, r7, pc}
 80050de:	bf00      	nop
 80050e0:	fff7fc00 	.word	0xfff7fc00

080050e4 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <lfs_file_rawread+0x28>
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <lfs_file_rawread+0x60>)
 8005100:	4a11      	ldr	r2, [pc, #68]	; (8005148 <lfs_file_rawread+0x64>)
 8005102:	f640 519a 	movw	r1, #3482	; 0xd9a
 8005106:	4811      	ldr	r0, [pc, #68]	; (800514c <lfs_file_rawread+0x68>)
 8005108:	f003 fdc6 	bl	8008c98 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d009      	beq.n	800512c <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8005118:	68b9      	ldr	r1, [r7, #8]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7ff fdb0 	bl	8004c80 <lfs_file_flush>
 8005120:	6178      	str	r0, [r7, #20]
        if (err) {
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <lfs_file_rawread+0x48>
            return err;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	e006      	b.n	800513a <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff ff04 	bl	8004f40 <lfs_file_flushedread>
 8005138:	4603      	mov	r3, r0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	0800a468 	.word	0x0800a468
 8005148:	0800aca4 	.word	0x0800aca4
 800514c:	0800a138 	.word	0x0800a138

08005150 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005150:	b5b0      	push	{r4, r5, r7, lr}
 8005152:	b090      	sub	sp, #64	; 0x40
 8005154:	af04      	add	r7, sp, #16
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 810e 	beq.w	8005390 <lfs_file_flushedwrite+0x240>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	441a      	add	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f7fa fffe 	bl	8000184 <lfs_max>
 8005188:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 800518e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80051a0:	08db      	lsrs	r3, r3, #3
 80051a2:	e003      	b.n	80051ac <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a8:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80051aa:	08db      	lsrs	r3, r3, #3
 80051ac:	4619      	mov	r1, r3
 80051ae:	4610      	mov	r0, r2
 80051b0:	f7fa fff7 	bl	80001a2 <lfs_min>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4619      	mov	r1, r3
 80051b8:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80051bc:	f7fa fff1 	bl	80001a2 <lfs_min>
 80051c0:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80051c2:	429c      	cmp	r4, r3
 80051c4:	f240 80e4 	bls.w	8005390 <lfs_file_flushedwrite+0x240>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80051c8:	68b9      	ldr	r1, [r7, #8]
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f7ff fd36 	bl	8004c3c <lfs_file_outline>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80db 	beq.w	8005390 <lfs_file_flushedwrite+0x240>
            file->flags |= LFS_F_ERRED;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	e0d7      	b.n	800539a <lfs_file_flushedwrite+0x24a>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051fe:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d16d      	bne.n	80052e0 <lfs_file_flushedwrite+0x190>
            if (!(file->flags & LFS_F_INLINE)) {
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d159      	bne.n	80052c4 <lfs_file_flushedwrite+0x174>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d12f      	bne.n	800527c <lfs_file_flushedwrite+0x12c>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02b      	beq.n	800527c <lfs_file_flushedwrite+0x12c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005236:	3a01      	subs	r2, #1
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 800523c:	2000      	movs	r0, #0
 800523e:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005240:	f107 0010 	add.w	r0, r7, #16
 8005244:	9003      	str	r0, [sp, #12]
 8005246:	9102      	str	r1, [sp, #8]
 8005248:	9201      	str	r2, [sp, #4]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	462b      	mov	r3, r5
 800524e:	4622      	mov	r2, r4
 8005250:	2100      	movs	r1, #0
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7ff f821 	bl	800429a <lfs_ctz_find>
 8005258:	6238      	str	r0, [r7, #32]
                    if (err) {
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <lfs_file_flushedwrite+0x120>
                        file->flags |= LFS_F_ERRED;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	e094      	b.n	800539a <lfs_file_flushedwrite+0x24a>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	3340      	adds	r3, #64	; 0x40
 8005274:	4619      	mov	r1, r3
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7fb f850 	bl	800031c <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7fb ff2d 	bl	80010dc <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005288:	68fc      	ldr	r4, [r7, #12]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	3238      	adds	r2, #56	; 0x38
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	313c      	adds	r1, #60	; 0x3c
 800529a:	9102      	str	r1, [sp, #8]
 800529c:	9201      	str	r2, [sp, #4]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	462b      	mov	r3, r5
 80052a2:	4622      	mov	r2, r4
 80052a4:	4601      	mov	r1, r0
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff f862 	bl	8004370 <lfs_ctz_extend>
 80052ac:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00f      	beq.n	80052d4 <lfs_file_flushedwrite+0x184>
                    file->flags |= LFS_F_ERRED;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	e06a      	b.n	800539a <lfs_file_flushedwrite+0x24a>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f06f 0201 	mvn.w	r2, #1
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052e4:	69da      	ldr	r2, [r3, #28]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	4619      	mov	r1, r3
 80052ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052f0:	f7fa ff57 	bl	80001a2 <lfs_min>
 80052f4:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80052fc:	68fc      	ldr	r4, [r7, #12]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005306:	69b9      	ldr	r1, [r7, #24]
 8005308:	9103      	str	r1, [sp, #12]
 800530a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800530c:	9102      	str	r1, [sp, #8]
 800530e:	9201      	str	r2, [sp, #4]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	2301      	movs	r3, #1
 8005314:	4622      	mov	r2, r4
 8005316:	4601      	mov	r1, r0
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7fb faa7 	bl	800086c <lfs_bd_prog>
 800531e:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01c      	beq.n	8005360 <lfs_file_flushedwrite+0x210>
                if (err == LFS_ERR_CORRUPT) {
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800532c:	d007      	beq.n	800533e <lfs_file_flushedwrite+0x1ee>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	e02d      	b.n	800539a <lfs_file_flushedwrite+0x24a>
                    goto relocate;
 800533e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff fba0 	bl	8004a88 <lfs_file_relocate>
 8005348:	6178      	str	r0, [r7, #20]
            if (err) {
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0d2      	beq.n	80052f6 <lfs_file_flushedwrite+0x1a6>
                file->flags |= LFS_F_ERRED;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	e01c      	b.n	800539a <lfs_file_flushedwrite+0x24a>
            break;
 8005360:	bf00      	nop
            }
        }

        file->pos += diff;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	441a      	add	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	441a      	add	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800537a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	4413      	add	r3, r2
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7fb fea6 	bl	80010dc <lfs_alloc_ack>
    while (nsize > 0) {
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2b00      	cmp	r3, #0
 8005394:	f47f af29 	bne.w	80051ea <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8005398:	683b      	ldr	r3, [r7, #0]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3730      	adds	r7, #48	; 0x30
 800539e:	46bd      	mov	sp, r7
 80053a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080053a4 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <lfs_file_rawwrite+0x28>
 80053be:	4b38      	ldr	r3, [pc, #224]	; (80054a0 <lfs_file_rawwrite+0xfc>)
 80053c0:	4a38      	ldr	r2, [pc, #224]	; (80054a4 <lfs_file_rawwrite+0x100>)
 80053c2:	f640 6105 	movw	r1, #3589	; 0xe05
 80053c6:	4838      	ldr	r0, [pc, #224]	; (80054a8 <lfs_file_rawwrite+0x104>)
 80053c8:	f003 fc66 	bl	8008c98 <__assert_func>

    if (file->flags & LFS_F_READING) {
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d009      	beq.n	80053ec <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff fc50 	bl	8004c80 <lfs_file_flush>
 80053e0:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <lfs_file_rawwrite+0x48>
            return err;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	e055      	b.n	8005498 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d009      	beq.n	800540c <lfs_file_rawwrite+0x68>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	429a      	cmp	r2, r3
 8005402:	d203      	bcs.n	800540c <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	441a      	add	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005418:	429a      	cmp	r2, r3
 800541a:	d902      	bls.n	8005422 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 800541c:	f06f 031a 	mvn.w	r3, #26
 8005420:	e03a      	b.n	8005498 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d121      	bne.n	8005472 <lfs_file_rawwrite+0xce>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	429a      	cmp	r2, r3
 8005438:	d91b      	bls.n	8005472 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543e:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8005448:	e00e      	b.n	8005468 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]
 800544e:	f107 0217 	add.w	r2, r7, #23
 8005452:	2301      	movs	r3, #1
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff fe7a 	bl	8005150 <lfs_file_flushedwrite>
 800545c:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2b00      	cmp	r3, #0
 8005462:	da01      	bge.n	8005468 <lfs_file_rawwrite+0xc4>
                return res;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	e017      	b.n	8005498 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	429a      	cmp	r2, r3
 8005470:	d8eb      	bhi.n	800544a <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f7ff fe69 	bl	8005150 <lfs_file_flushedwrite>
 800547e:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	da01      	bge.n	800548a <lfs_file_rawwrite+0xe6>
        return nsize;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	e006      	b.n	8005498 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8005496:	69bb      	ldr	r3, [r7, #24]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3728      	adds	r7, #40	; 0x28
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	0800a498 	.word	0x0800a498
 80054a4:	0800acb8 	.word	0x0800acb8
 80054a8:	0800a138 	.word	0x0800a138

080054ac <lfs_fs_rawtraverse>:
    return 0;
}

int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b0a1      	sub	sp, #132	; 0x84
 80054b0:	af04      	add	r7, sp, #16
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80054ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054be:	2220      	movs	r2, #32
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f003 fc6e 	bl	8008da4 <memset>
 80054c8:	2301      	movs	r3, #1
 80054ca:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80054cc:	4a9b      	ldr	r2, [pc, #620]	; (800573c <lfs_fs_rawtraverse+0x290>)
 80054ce:	f107 031c 	add.w	r3, r7, #28
 80054d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054d6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80054da:	2301      	movs	r3, #1
 80054dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 80054e2:	e0c1      	b.n	8005668 <lfs_fs_rawtraverse+0x1bc>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80054e4:	f107 021c 	add.w	r2, r7, #28
 80054e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ec:	3318      	adds	r3, #24
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fb faf0 	bl	8000ad6 <lfs_pair_issync>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <lfs_fs_rawtraverse+0x64>
            LFS_WARN("Cycle detected in tail list");
 80054fc:	4b90      	ldr	r3, [pc, #576]	; (8005740 <lfs_fs_rawtraverse+0x294>)
 80054fe:	f241 12d2 	movw	r2, #4562	; 0x11d2
 8005502:	4990      	ldr	r1, [pc, #576]	; (8005744 <lfs_fs_rawtraverse+0x298>)
 8005504:	4890      	ldr	r0, [pc, #576]	; (8005748 <lfs_fs_rawtraverse+0x29c>)
 8005506:	f003 ffe9 	bl	80094dc <iprintf>
            return LFS_ERR_CORRUPT;
 800550a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800550e:	e110      	b.n	8005732 <lfs_fs_rawtraverse+0x286>
        }
        if (tortoise_i == tortoise_period) {
 8005510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005514:	429a      	cmp	r2, r3
 8005516:	d108      	bne.n	800552a <lfs_fs_rawtraverse+0x7e>
            tortoise[0] = dir.tail[0];
 8005518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551a:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 800551c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551e:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 8005524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552c:	3301      	adds	r3, #1
 800552e:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 8005530:	2300      	movs	r3, #0
 8005532:	667b      	str	r3, [r7, #100]	; 0x64
 8005534:	e014      	b.n	8005560 <lfs_fs_rawtraverse+0xb4>
            int err = cb(data, dir.tail[i]);
 8005536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005538:	3306      	adds	r3, #6
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005540:	4413      	add	r3, r2
 8005542:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4611      	mov	r1, r2
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
 800554e:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8005550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <lfs_fs_rawtraverse+0xae>
                return err;
 8005556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005558:	e0eb      	b.n	8005732 <lfs_fs_rawtraverse+0x286>
        for (int i = 0; i < 2; i++) {
 800555a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800555c:	3301      	adds	r3, #1
 800555e:	667b      	str	r3, [r7, #100]	; 0x64
 8005560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005562:	2b01      	cmp	r3, #1
 8005564:	dde7      	ble.n	8005536 <lfs_fs_rawtraverse+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8005566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800556a:	f103 0218 	add.w	r2, r3, #24
 800556e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005572:	4619      	mov	r1, r3
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7fd f8a3 	bl	80026c0 <lfs_dir_fetch>
 800557a:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 800557c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <lfs_fs_rawtraverse+0xda>
            return err;
 8005582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005584:	e0d5      	b.n	8005732 <lfs_fs_rawtraverse+0x286>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8005586:	2300      	movs	r3, #0
 8005588:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800558c:	e067      	b.n	800565e <lfs_fs_rawtraverse+0x1b2>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800558e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005592:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8005594:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005598:	f043 0308 	orr.w	r3, r3, #8
 800559c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80055a0:	f107 0214 	add.w	r2, r7, #20
 80055a4:	9200      	str	r2, [sp, #0]
 80055a6:	4a69      	ldr	r2, [pc, #420]	; (800574c <lfs_fs_rawtraverse+0x2a0>)
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7fb ff5f 	bl	800146c <lfs_dir_get>
 80055ae:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 80055b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	da05      	bge.n	80055c2 <lfs_fs_rawtraverse+0x116>
                if (tag == LFS_ERR_NOENT) {
 80055b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b8:	f113 0f02 	cmn.w	r3, #2
 80055bc:	d049      	beq.n	8005652 <lfs_fs_rawtraverse+0x1a6>
                    continue;
                }
                return tag;
 80055be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c0:	e0b7      	b.n	8005732 <lfs_fs_rawtraverse+0x286>
            }
            lfs_ctz_fromle32(&ctz);
 80055c2:	f107 0314 	add.w	r3, r7, #20
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fb fc92 	bl	8000ef0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80055cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fb fb1e 	bl	8000c10 <lfs_tag_type3>
 80055d4:	4603      	mov	r3, r0
 80055d6:	461a      	mov	r2, r3
 80055d8:	f240 2302 	movw	r3, #514	; 0x202
 80055dc:	429a      	cmp	r2, r3
 80055de:	d113      	bne.n	8005608 <lfs_fs_rawtraverse+0x15c>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	6978      	ldr	r0, [r7, #20]
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	9202      	str	r2, [sp, #8]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	9201      	str	r2, [sp, #4]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	4603      	mov	r3, r0
 80055f2:	460a      	mov	r2, r1
 80055f4:	2100      	movs	r1, #0
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7fe ffc2 	bl	8004580 <lfs_ctz_traverse>
 80055fc:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80055fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005600:	2b00      	cmp	r3, #0
 8005602:	d027      	beq.n	8005654 <lfs_fs_rawtraverse+0x1a8>
                    return err;
 8005604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005606:	e094      	b.n	8005732 <lfs_fs_rawtraverse+0x286>
                }
            } else if (includeorphans &&
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d022      	beq.n	8005654 <lfs_fs_rawtraverse+0x1a8>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800560e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005610:	4618      	mov	r0, r3
 8005612:	f7fb fafd 	bl	8000c10 <lfs_tag_type3>
 8005616:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8005618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800561c:	d11a      	bne.n	8005654 <lfs_fs_rawtraverse+0x1a8>
                for (int i = 0; i < 2; i++) {
 800561e:	2300      	movs	r3, #0
 8005620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005622:	e012      	b.n	800564a <lfs_fs_rawtraverse+0x19e>
                    err = cb(data, (&ctz.head)[i]);
 8005624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	f107 0214 	add.w	r2, r7, #20
 800562c:	4413      	add	r3, r2
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4611      	mov	r1, r2
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	4798      	blx	r3
 8005638:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 800563a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <lfs_fs_rawtraverse+0x198>
                        return err;
 8005640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005642:	e076      	b.n	8005732 <lfs_fs_rawtraverse+0x286>
                for (int i = 0; i < 2; i++) {
 8005644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005646:	3301      	adds	r3, #1
 8005648:	65fb      	str	r3, [r7, #92]	; 0x5c
 800564a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800564c:	2b01      	cmp	r3, #1
 800564e:	dde9      	ble.n	8005624 <lfs_fs_rawtraverse+0x178>
 8005650:	e000      	b.n	8005654 <lfs_fs_rawtraverse+0x1a8>
                    continue;
 8005652:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8005654:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005658:	3301      	adds	r3, #1
 800565a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800565e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005660:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8005664:	429a      	cmp	r2, r3
 8005666:	d392      	bcc.n	800558e <lfs_fs_rawtraverse+0xe2>
    while (!lfs_pair_isnull(dir.tail)) {
 8005668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800566c:	3318      	adds	r3, #24
 800566e:	4618      	mov	r0, r3
 8005670:	f7fb f9ee 	bl	8000a50 <lfs_pair_isnull>
 8005674:	4603      	mov	r3, r0
 8005676:	f083 0301 	eor.w	r3, r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	f47f af31 	bne.w	80054e4 <lfs_fs_rawtraverse+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	65bb      	str	r3, [r7, #88]	; 0x58
 8005688:	e04f      	b.n	800572a <lfs_fs_rawtraverse+0x27e>
        if (f->type != LFS_TYPE_REG) {
 800568a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800568c:	799b      	ldrb	r3, [r3, #6]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d147      	bne.n	8005722 <lfs_fs_rawtraverse+0x276>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8005692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01d      	beq.n	80056da <lfs_fs_rawtraverse+0x22e>
 800569e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d117      	bne.n	80056da <lfs_fs_rawtraverse+0x22e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80056aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ac:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80056b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	9202      	str	r2, [sp, #8]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	9201      	str	r2, [sp, #4]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	4623      	mov	r3, r4
 80056c6:	4602      	mov	r2, r0
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7fe ff59 	bl	8004580 <lfs_ctz_traverse>
 80056ce:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80056d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <lfs_fs_rawtraverse+0x22e>
                return err;
 80056d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d8:	e02b      	b.n	8005732 <lfs_fs_rawtraverse+0x286>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80056da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01e      	beq.n	8005724 <lfs_fs_rawtraverse+0x278>
 80056e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d118      	bne.n	8005724 <lfs_fs_rawtraverse+0x278>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80056f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056f4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056fc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80056fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	9202      	str	r2, [sp, #8]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	9201      	str	r2, [sp, #4]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	4623      	mov	r3, r4
 800570e:	4602      	mov	r2, r0
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7fe ff35 	bl	8004580 <lfs_ctz_traverse>
 8005716:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8005718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <lfs_fs_rawtraverse+0x278>
                return err;
 800571e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005720:	e007      	b.n	8005732 <lfs_fs_rawtraverse+0x286>
            continue;
 8005722:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8005724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	65bb      	str	r3, [r7, #88]	; 0x58
 800572a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1ac      	bne.n	800568a <lfs_fs_rawtraverse+0x1de>
            }
        }
    }
#endif

    return 0;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3774      	adds	r7, #116	; 0x74
 8005736:	46bd      	mov	sp, r7
 8005738:	bd90      	pop	{r4, r7, pc}
 800573a:	bf00      	nop
 800573c:	0800a284 	.word	0x0800a284
 8005740:	0800a240 	.word	0x0800a240
 8005744:	0800a138 	.word	0x0800a138
 8005748:	0800a758 	.word	0x0800a758
 800574c:	700ffc00 	.word	0x700ffc00

08005750 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8005768:	4a2d      	ldr	r2, [pc, #180]	; (8005820 <lfs_fs_pred+0xd0>)
 800576a:	f107 0314 	add.w	r3, r7, #20
 800576e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005772:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8005776:	2301      	movs	r3, #1
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 800577a:	2301      	movs	r3, #1
 800577c:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 800577e:	e03e      	b.n	80057fe <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3318      	adds	r3, #24
 8005784:	f107 0214 	add.w	r2, r7, #20
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f7fb f9a3 	bl	8000ad6 <lfs_pair_issync>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8005796:	4b23      	ldr	r3, [pc, #140]	; (8005824 <lfs_fs_pred+0xd4>)
 8005798:	f241 2230 	movw	r2, #4656	; 0x1230
 800579c:	4922      	ldr	r1, [pc, #136]	; (8005828 <lfs_fs_pred+0xd8>)
 800579e:	4823      	ldr	r0, [pc, #140]	; (800582c <lfs_fs_pred+0xdc>)
 80057a0:	f003 fe9c 	bl	80094dc <iprintf>
            return LFS_ERR_CORRUPT;
 80057a4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80057a8:	e036      	b.n	8005818 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 80057aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d10a      	bne.n	80057c8 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	3301      	adds	r3, #1
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3318      	adds	r3, #24
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fb f955 	bl	8000a84 <lfs_pair_cmp>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <lfs_fs_pred+0x94>
            return 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e019      	b.n	8005818 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3318      	adds	r3, #24
 80057e8:	461a      	mov	r2, r3
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f7fc ff67 	bl	80026c0 <lfs_dir_fetch>
 80057f2:	61f8      	str	r0, [r7, #28]
        if (err) {
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <lfs_fs_pred+0xae>
            return err;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	e00c      	b.n	8005818 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3318      	adds	r3, #24
 8005802:	4618      	mov	r0, r3
 8005804:	f7fb f924 	bl	8000a50 <lfs_pair_isnull>
 8005808:	4603      	mov	r3, r0
 800580a:	f083 0301 	eor.w	r3, r3, #1
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1b5      	bne.n	8005780 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8005814:	f06f 0301 	mvn.w	r3, #1
}
 8005818:	4618      	mov	r0, r3
 800581a:	3728      	adds	r7, #40	; 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	0800a284 	.word	0x0800a284
 8005824:	0800a240 	.word	0x0800a240
 8005828:	0800a138 	.word	0x0800a138
 800582c:	0800a758 	.word	0x0800a758

08005830 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8005830:	b5b0      	push	{r4, r5, r7, lr}
 8005832:	b08e      	sub	sp, #56	; 0x38
 8005834:	af04      	add	r7, sp, #16
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8005850:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8005856:	69dd      	ldr	r5, [r3, #28]
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	6852      	ldr	r2, [r2, #4]
 8005860:	2108      	movs	r1, #8
 8005862:	9103      	str	r1, [sp, #12]
 8005864:	f107 0110 	add.w	r1, r7, #16
 8005868:	9102      	str	r1, [sp, #8]
 800586a:	9201      	str	r2, [sp, #4]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	462b      	mov	r3, r5
 8005870:	4622      	mov	r2, r4
 8005872:	4601      	mov	r1, r0
 8005874:	6a38      	ldr	r0, [r7, #32]
 8005876:	f7fa fd67 	bl	8000348 <lfs_bd_read>
 800587a:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <lfs_fs_parent_match+0x56>
        return err;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	e012      	b.n	80058ac <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8005886:	f107 0310 	add.w	r3, r7, #16
 800588a:	4618      	mov	r0, r3
 800588c:	f7fb f94f 	bl	8000b2e <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	1d1a      	adds	r2, r3, #4
 8005894:	f107 0310 	add.w	r3, r7, #16
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f7fb f8f2 	bl	8000a84 <lfs_pair_cmp>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bf14      	ite	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	2300      	moveq	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3728      	adds	r7, #40	; 0x28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bdb0      	pop	{r4, r5, r7, pc}

080058b4 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b090      	sub	sp, #64	; 0x40
 80058b8:	af04      	add	r7, sp, #16
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80058cc:	4a33      	ldr	r2, [pc, #204]	; (800599c <lfs_fs_parent+0xe8>)
 80058ce:	f107 031c 	add.w	r3, r7, #28
 80058d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058d6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80058da:	2301      	movs	r3, #1
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 80058de:	2301      	movs	r3, #1
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 80058e2:	e049      	b.n	8005978 <lfs_fs_parent+0xc4>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3318      	adds	r3, #24
 80058e8:	f107 021c 	add.w	r2, r7, #28
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fb f8f1 	bl	8000ad6 <lfs_pair_issync>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 80058fa:	4b29      	ldr	r3, [pc, #164]	; (80059a0 <lfs_fs_parent+0xec>)
 80058fc:	f241 2271 	movw	r2, #4721	; 0x1271
 8005900:	4928      	ldr	r1, [pc, #160]	; (80059a4 <lfs_fs_parent+0xf0>)
 8005902:	4829      	ldr	r0, [pc, #164]	; (80059a8 <lfs_fs_parent+0xf4>)
 8005904:	f003 fdea 	bl	80094dc <iprintf>
            return LFS_ERR_CORRUPT;
 8005908:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800590c:	e041      	b.n	8005992 <lfs_fs_parent+0xde>
        }
        if (tortoise_i == tortoise_period) {
 800590e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	429a      	cmp	r2, r3
 8005914:	d10a      	bne.n	800592c <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	3301      	adds	r3, #1
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8005948:	f107 0310 	add.w	r3, r7, #16
 800594c:	9303      	str	r3, [sp, #12]
 800594e:	4b17      	ldr	r3, [pc, #92]	; (80059ac <lfs_fs_parent+0xf8>)
 8005950:	9302      	str	r3, [sp, #8]
 8005952:	2300      	movs	r3, #0
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	4b16      	ldr	r3, [pc, #88]	; (80059b0 <lfs_fs_parent+0xfc>)
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	4b16      	ldr	r3, [pc, #88]	; (80059b4 <lfs_fs_parent+0x100>)
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7fc fae6 	bl	8001f30 <lfs_dir_fetchmatch>
 8005964:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <lfs_fs_parent+0xc4>
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	f113 0f02 	cmn.w	r3, #2
 8005972:	d001      	beq.n	8005978 <lfs_fs_parent+0xc4>
            return tag;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	e00c      	b.n	8005992 <lfs_fs_parent+0xde>
    while (!lfs_pair_isnull(parent->tail)) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3318      	adds	r3, #24
 800597c:	4618      	mov	r0, r3
 800597e:	f7fb f867 	bl	8000a50 <lfs_pair_isnull>
 8005982:	4603      	mov	r3, r0
 8005984:	f083 0301 	eor.w	r3, r3, #1
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1aa      	bne.n	80058e4 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 800598e:	f06f 0301 	mvn.w	r3, #1
}
 8005992:	4618      	mov	r0, r3
 8005994:	3730      	adds	r7, #48	; 0x30
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	0800a284 	.word	0x0800a284
 80059a0:	0800a240 	.word	0x0800a240
 80059a4:	0800a138 	.word	0x0800a138
 80059a8:	0800a758 	.word	0x0800a758
 80059ac:	08005831 	.word	0x08005831
 80059b0:	20000008 	.word	0x20000008
 80059b4:	7ff003ff 	.word	0x7ff003ff

080059b8 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	025b      	lsls	r3, r3, #9
 80059d0:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fb f944 	bl	8000c7e <lfs_tag_size>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <lfs_fs_preporphans+0x32>
 80059fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da06      	bge.n	8005a12 <lfs_fs_preporphans+0x32>
 8005a04:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <lfs_fs_preporphans+0x90>)
 8005a06:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <lfs_fs_preporphans+0x94>)
 8005a08:	f241 2192 	movw	r1, #4754	; 0x1292
 8005a0c:	481a      	ldr	r0, [pc, #104]	; (8005a78 <lfs_fs_preporphans+0x98>)
 8005a0e:	f003 f943 	bl	8008c98 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fb f931 	bl	8000c7e <lfs_tag_size>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8005a22:	d90a      	bls.n	8005a3a <lfs_fs_preporphans+0x5a>
 8005a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	dd06      	ble.n	8005a3a <lfs_fs_preporphans+0x5a>
 8005a2c:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <lfs_fs_preporphans+0x9c>)
 8005a2e:	4a11      	ldr	r2, [pc, #68]	; (8005a74 <lfs_fs_preporphans+0x94>)
 8005a30:	f241 2193 	movw	r1, #4755	; 0x1293
 8005a34:	4810      	ldr	r0, [pc, #64]	; (8005a78 <lfs_fs_preporphans+0x98>)
 8005a36:	f003 f92f 	bl	8008c98 <__assert_func>
    lfs->gstate.tag += orphans;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a42:	441a      	add	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3330      	adds	r3, #48	; 0x30
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fb f972 	bl	8000d3e <lfs_gstate_hasorphans>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8005a5e:	ea44 0203 	orr.w	r2, r4, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd90      	pop	{r4, r7, pc}
 8005a70:	0800a934 	.word	0x0800a934
 8005a74:	0800accc 	.word	0x0800accc
 8005a78:	0800a138 	.word	0x0800a138
 8005a7c:	0800a96c 	.word	0x0800a96c

08005a80 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	4a17      	ldr	r2, [pc, #92]	; (8005af0 <lfs_fs_prepmove+0x70>)
 8005a94:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8005a96:	897b      	ldrh	r3, [r7, #10]
 8005a98:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	d006      	beq.n	8005aae <lfs_fs_prepmove+0x2e>
 8005aa0:	897b      	ldrh	r3, [r7, #10]
 8005aa2:	029b      	lsls	r3, r3, #10
 8005aa4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8005aa8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8005aac:	e000      	b.n	8005ab0 <lfs_fs_prepmove+0x30>
 8005aae:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8005ab6:	897b      	ldrh	r3, [r7, #10]
 8005ab8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d002      	beq.n	8005ac6 <lfs_fs_prepmove+0x46>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	e000      	b.n	8005ac8 <lfs_fs_prepmove+0x48>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8005acc:	897b      	ldrh	r3, [r7, #10]
 8005ace:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <lfs_fs_prepmove+0x5e>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	e000      	b.n	8005ae0 <lfs_fs_prepmove+0x60>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	800003ff 	.word	0x800003ff

08005af4 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b098      	sub	sp, #96	; 0x60
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3330      	adds	r3, #48	; 0x30
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fb f951 	bl	8000da8 <lfs_gstate_needssuperblock>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f083 0301 	eor.w	r3, r3, #1
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <lfs_fs_desuperblock+0x22>
        return 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e04e      	b.n	8005bb4 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1a      	ldr	r2, [r3, #32]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	4927      	ldr	r1, [pc, #156]	; (8005bbc <lfs_fs_desuperblock+0xc8>)
 8005b20:	9101      	str	r1, [sp, #4]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	f241 22ac 	movw	r2, #4780	; 0x12ac
 8005b2a:	4925      	ldr	r1, [pc, #148]	; (8005bc0 <lfs_fs_desuperblock+0xcc>)
 8005b2c:	4825      	ldr	r0, [pc, #148]	; (8005bc4 <lfs_fs_desuperblock+0xd0>)
 8005b2e:	f003 fcd5 	bl	80094dc <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f103 0220 	add.w	r2, r3, #32
 8005b38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc fdbe 	bl	80026c0 <lfs_dir_fetch>
 8005b44:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8005b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <lfs_fs_desuperblock+0x5c>
        return err;
 8005b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b4e:	e031      	b.n	8005bb4 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7fb fa83 	bl	800105c <lfs_fs_disk_version>
 8005b56:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8005b58:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b5e:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8005b60:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 8005b78:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 8005b7a:	f107 031c 	add.w	r3, r7, #28
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fb f9e6 	bl	8000f50 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8005b84:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <lfs_fs_desuperblock+0xd4>)
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	f107 031c 	add.w	r3, r7, #28
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	f107 0214 	add.w	r2, r7, #20
 8005b92:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005b96:	2301      	movs	r3, #1
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fe fb21 	bl	80041e0 <lfs_dir_commit>
 8005b9e:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <lfs_fs_desuperblock+0xb6>
        return err;
 8005ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba8:	e004      	b.n	8005bb4 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8005baa:	2100      	movs	r1, #0
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff ff03 	bl	80059b8 <lfs_fs_prepsuperblock>
    return 0;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3758      	adds	r7, #88	; 0x58
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	0800a240 	.word	0x0800a240
 8005bc0:	0800a138 	.word	0x0800a138
 8005bc4:	0800a9a4 	.word	0x0800a9a4
 8005bc8:	20100018 	.word	0x20100018

08005bcc <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8005bcc:	b5b0      	push	{r4, r5, r7, lr}
 8005bce:	b094      	sub	sp, #80	; 0x50
 8005bd0:	af04      	add	r7, sp, #16
 8005bd2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	333c      	adds	r3, #60	; 0x3c
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fb f8d2 	bl	8000d82 <lfs_gstate_hasmove>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f083 0301 	eor.w	r3, r3, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <lfs_fs_demove+0x22>
        return 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e05b      	b.n	8005ca6 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fb f830 	bl	8000c60 <lfs_tag_id>
 8005c00:	4603      	mov	r3, r0
 8005c02:	461a      	mov	r2, r3
 8005c04:	4b2a      	ldr	r3, [pc, #168]	; (8005cb0 <lfs_fs_demove+0xe4>)
 8005c06:	9302      	str	r3, [sp, #8]
 8005c08:	9201      	str	r2, [sp, #4]
 8005c0a:	9400      	str	r4, [sp, #0]
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	f241 22d4 	movw	r2, #4820	; 0x12d4
 8005c12:	4928      	ldr	r1, [pc, #160]	; (8005cb4 <lfs_fs_demove+0xe8>)
 8005c14:	4828      	ldr	r0, [pc, #160]	; (8005cb8 <lfs_fs_demove+0xec>)
 8005c16:	f003 fc61 	bl	80094dc <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fa fff6 	bl	8000c10 <lfs_tag_type3>
 8005c24:	4603      	mov	r3, r0
 8005c26:	461a      	mov	r2, r3
 8005c28:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d006      	beq.n	8005c3e <lfs_fs_demove+0x72>
 8005c30:	4b22      	ldr	r3, [pc, #136]	; (8005cbc <lfs_fs_demove+0xf0>)
 8005c32:	4a23      	ldr	r2, [pc, #140]	; (8005cc0 <lfs_fs_demove+0xf4>)
 8005c34:	f241 21db 	movw	r1, #4827	; 0x12db
 8005c38:	481e      	ldr	r0, [pc, #120]	; (8005cb4 <lfs_fs_demove+0xe8>)
 8005c3a:	f003 f82d 	bl	8008c98 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005c44:	f107 0318 	add.w	r3, r7, #24
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fc fd38 	bl	80026c0 <lfs_dir_fetch>
 8005c50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8005c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <lfs_fs_demove+0x90>
        return err;
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	e024      	b.n	8005ca6 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fa fffd 	bl	8000c60 <lfs_tag_id>
 8005c66:	4603      	mov	r3, r0
 8005c68:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ff05 	bl	8005a80 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8005c76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c78:	029b      	lsls	r3, r3, #10
 8005c7a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8005c7e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	f107 0210 	add.w	r2, r7, #16
 8005c8c:	f107 0118 	add.w	r1, r7, #24
 8005c90:	2301      	movs	r3, #1
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fe faa4 	bl	80041e0 <lfs_dir_commit>
 8005c98:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <lfs_fs_demove+0xd8>
        return err;
 8005ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca2:	e000      	b.n	8005ca6 <lfs_fs_demove+0xda>
    }

    return 0;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3740      	adds	r7, #64	; 0x40
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bdb0      	pop	{r4, r5, r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	0800a240 	.word	0x0800a240
 8005cb4:	0800a138 	.word	0x0800a138
 8005cb8:	0800a9d8 	.word	0x0800a9d8
 8005cbc:	0800aa0c 	.word	0x0800aa0c
 8005cc0:	0800ace0 	.word	0x0800ace0

08005cc4 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8005cc4:	b5b0      	push	{r4, r5, r7, lr}
 8005cc6:	b0b2      	sub	sp, #200	; 0xc8
 8005cc8:	af04      	add	r7, sp, #16
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3330      	adds	r3, #48	; 0x30
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fb f832 	bl	8000d3e <lfs_gstate_hasorphans>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f083 0301 	eor.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <lfs_fs_deorphan+0x26>
        return 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e187      	b.n	8005ffa <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8005cf0:	e170      	b.n	8005fd4 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8005cf2:	f107 0308 	add.w	r3, r7, #8
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f003 f852 	bl	8008da4 <memset>
 8005d00:	2301      	movs	r3, #1
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	2301      	movs	r3, #1
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8005d0e:	e149      	b.n	8005fa4 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8005d10:	f107 0308 	add.w	r3, r7, #8
 8005d14:	f103 0218 	add.w	r2, r3, #24
 8005d18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fc fcce 	bl	80026c0 <lfs_dir_fetch>
 8005d24:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 8005d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <lfs_fs_deorphan+0x72>
                return err;
 8005d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d34:	e161      	b.n	8005ffa <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8005d36:	7ffb      	ldrb	r3, [r7, #31]
 8005d38:	f083 0301 	eor.w	r3, r3, #1
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8126 	beq.w	8005f90 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8005d44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005d48:	f107 0308 	add.w	r3, r7, #8
 8005d4c:	3318      	adds	r3, #24
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff fdaf 	bl	80058b4 <lfs_fs_parent>
 8005d56:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8005d5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	da07      	bge.n	8005d72 <lfs_fs_deorphan+0xae>
 8005d62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d66:	f113 0f02 	cmn.w	r3, #2
 8005d6a:	d002      	beq.n	8005d72 <lfs_fs_deorphan+0xae>
                    return tag;
 8005d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d70:	e143      	b.n	8005ffa <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8005d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f040 80ac 	bne.w	8005ed4 <lfs_fs_deorphan+0x210>
 8005d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d80:	f113 0f02 	cmn.w	r3, #2
 8005d84:	f000 80a6 	beq.w	8005ed4 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8005d88:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d8c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005d90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	4613      	mov	r3, r2
 8005d98:	4a9a      	ldr	r2, [pc, #616]	; (8006004 <lfs_fs_deorphan+0x340>)
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fb fb66 	bl	800146c <lfs_dir_get>
 8005da0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8005da4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da02      	bge.n	8005db2 <lfs_fs_deorphan+0xee>
                        return state;
 8005dac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005db0:	e0eb      	b.n	8005f8a <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8005db2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fa feb9 	bl	8000b2e <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8005dbc:	f107 0308 	add.w	r3, r7, #8
 8005dc0:	f103 0218 	add.w	r2, r3, #24
 8005dc4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fa fe83 	bl	8000ad6 <lfs_pair_issync>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f083 0301 	eor.w	r3, r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d07b      	beq.n	8005ed4 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8005ddc:	6a38      	ldr	r0, [r7, #32]
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005de4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8005de8:	4c87      	ldr	r4, [pc, #540]	; (8006008 <lfs_fs_deorphan+0x344>)
 8005dea:	9403      	str	r4, [sp, #12]
 8005dec:	9102      	str	r1, [sp, #8]
 8005dee:	9201      	str	r2, [sp, #4]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	4603      	mov	r3, r0
 8005df4:	f241 3221 	movw	r2, #4897	; 0x1321
 8005df8:	4984      	ldr	r1, [pc, #528]	; (800600c <lfs_fs_deorphan+0x348>)
 8005dfa:	4885      	ldr	r0, [pc, #532]	; (8006010 <lfs_fs_deorphan+0x34c>)
 8005dfc:	f003 fb6e 	bl	80094dc <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8005e00:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8005e04:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3330      	adds	r3, #48	; 0x30
 8005e0c:	f107 0208 	add.w	r2, r7, #8
 8005e10:	4611      	mov	r1, r2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fa ffdc 	bl	8000dd0 <lfs_gstate_hasmovehere>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01c      	beq.n	8005e58 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa ff1c 	bl	8000c60 <lfs_tag_id>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8005e36:	4874      	ldr	r0, [pc, #464]	; (8006008 <lfs_fs_deorphan+0x344>)
 8005e38:	9002      	str	r0, [sp, #8]
 8005e3a:	9201      	str	r2, [sp, #4]
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	f241 322c 	movw	r2, #4908	; 0x132c
 8005e44:	4971      	ldr	r1, [pc, #452]	; (800600c <lfs_fs_deorphan+0x348>)
 8005e46:	4873      	ldr	r0, [pc, #460]	; (8006014 <lfs_fs_deorphan+0x350>)
 8005e48:	f003 fb48 	bl	80094dc <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff fe14 	bl	8005a80 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8005e58:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fa fe80 	bl	8000b62 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8005e62:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8005e66:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <lfs_fs_deorphan+0x1ba>
 8005e6e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8005e72:	029b      	lsls	r3, r3, #10
 8005e74:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8005e78:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8005e7c:	e000      	b.n	8005e80 <lfs_fs_deorphan+0x1bc>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e84:	2300      	movs	r3, #0
 8005e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e8a:	4b63      	ldr	r3, [pc, #396]	; (8006018 <lfs_fs_deorphan+0x354>)
 8005e8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005e94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e98:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005e9c:	f107 0108 	add.w	r1, r7, #8
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fd fea2 	bl	8003bec <lfs_dir_orphaningcommit>
 8005ea8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8005eac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fa fe3c 	bl	8000b2e <lfs_pair_fromle32>
                        if (state < 0) {
 8005eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da02      	bge.n	8005ec4 <lfs_fs_deorphan+0x200>
                            return state;
 8005ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8005ec2:	e062      	b.n	8005f8a <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8005ec4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d16b      	bne.n	8005fa4 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8005ed2:	e067      	b.n	8005fa4 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8005ed4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d159      	bne.n	8005f90 <lfs_fs_deorphan+0x2cc>
 8005edc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ee0:	f113 0f02 	cmn.w	r3, #2
 8005ee4:	d154      	bne.n	8005f90 <lfs_fs_deorphan+0x2cc>
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d051      	beq.n	8005f90 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8005eec:	6a3a      	ldr	r2, [r7, #32]
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	4945      	ldr	r1, [pc, #276]	; (8006008 <lfs_fs_deorphan+0x344>)
 8005ef2:	9101      	str	r1, [sp, #4]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	f241 324c 	movw	r2, #4940	; 0x134c
 8005efc:	4943      	ldr	r1, [pc, #268]	; (800600c <lfs_fs_deorphan+0x348>)
 8005efe:	4847      	ldr	r0, [pc, #284]	; (800601c <lfs_fs_deorphan+0x358>)
 8005f00:	f003 faec 	bl	80094dc <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7fc fbf1 	bl	80026f8 <lfs_dir_getgstate>
 8005f16:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 8005f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <lfs_fs_deorphan+0x264>
                        return err;
 8005f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f26:	e030      	b.n	8005f8a <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8005f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f2c:	3318      	adds	r3, #24
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fa fe17 	bl	8000b62 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8005f34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f38:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8005f3c:	051a      	lsls	r2, r3, #20
 8005f3e:	4b38      	ldr	r3, [pc, #224]	; (8006020 <lfs_fs_deorphan+0x35c>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	673b      	str	r3, [r7, #112]	; 0x70
 8005f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f48:	3318      	adds	r3, #24
 8005f4a:	677b      	str	r3, [r7, #116]	; 0x74
 8005f4c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005f50:	f107 0108 	add.w	r1, r7, #8
 8005f54:	2301      	movs	r3, #1
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fd fe48 	bl	8003bec <lfs_dir_orphaningcommit>
 8005f5c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8005f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f64:	3318      	adds	r3, #24
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fa fde1 	bl	8000b2e <lfs_pair_fromle32>
                    if (state < 0) {
 8005f6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	da02      	bge.n	8005f7a <lfs_fs_deorphan+0x2b6>
                        return state;
 8005f74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 8005f78:	e03f      	b.n	8005ffa <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8005f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d104      	bne.n	8005f8c <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8005f88:	e00c      	b.n	8005fa4 <lfs_fs_deorphan+0x2e0>
                return err;
 8005f8a:	e036      	b.n	8005ffa <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 8005f8c:	bf00      	nop
 8005f8e:	e009      	b.n	8005fa4 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 8005f90:	f107 0408 	add.w	r4, r7, #8
 8005f94:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8005f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8005fa4:	f107 0308 	add.w	r3, r7, #8
 8005fa8:	3318      	adds	r3, #24
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fa fd50 	bl	8000a50 <lfs_pair_isnull>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f083 0301 	eor.w	r3, r3, #1
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f47f aea9 	bne.w	8005d10 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8005fbe:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <lfs_fs_deorphan+0x306>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e002      	b.n	8005fd0 <lfs_fs_deorphan+0x30c>
 8005fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fce:	3301      	adds	r3, #1
 8005fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8005fd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	f77f ae8a 	ble.w	8005cf2 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3330      	adds	r3, #48	; 0x30
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fa febe 	bl	8000d64 <lfs_gstate_getorphans>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	425b      	negs	r3, r3
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	b25b      	sxtb	r3, r3
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff fcf4 	bl	80059e0 <lfs_fs_preporphans>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	37b8      	adds	r7, #184	; 0xb8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bdb0      	pop	{r4, r5, r7, pc}
 8006002:	bf00      	nop
 8006004:	7ffffc00 	.word	0x7ffffc00
 8006008:	0800a240 	.word	0x0800a240
 800600c:	0800a138 	.word	0x0800a138
 8006010:	0800aa40 	.word	0x0800aa40
 8006014:	0800aa84 	.word	0x0800aa84
 8006018:	600ffc08 	.word	0x600ffc08
 800601c:	0800aacc 	.word	0x0800aacc
 8006020:	000ffc08 	.word	0x000ffc08

08006024 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff fd61 	bl	8005af4 <lfs_fs_desuperblock>
 8006032:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <lfs_fs_forceconsistency+0x1a>
        return err;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	e013      	b.n	8006066 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff fdc4 	bl	8005bcc <lfs_fs_demove>
 8006044:	60f8      	str	r0, [r7, #12]
    if (err) {
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <lfs_fs_forceconsistency+0x2c>
        return err;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	e00a      	b.n	8006066 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8006050:	2101      	movs	r1, #1
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fe36 	bl	8005cc4 <lfs_fs_deorphan>
 8006058:	60f8      	str	r0, [r7, #12]
    if (err) {
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <lfs_fs_forceconsistency+0x40>
        return err;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	e000      	b.n	8006066 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	601a      	str	r2, [r3, #0]
    return 0;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr
	...

08006094 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 80060a0:	f107 0208 	add.w	r2, r7, #8
 80060a4:	2300      	movs	r3, #0
 80060a6:	4907      	ldr	r1, [pc, #28]	; (80060c4 <lfs_fs_rawsize+0x30>)
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff f9ff 	bl	80054ac <lfs_fs_rawtraverse>
 80060ae:	60f8      	str	r0, [r7, #12]
    if (err) {
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <lfs_fs_rawsize+0x26>
        return err;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	e000      	b.n	80060bc <lfs_fs_rawsize+0x28>
    }

    return size;
 80060ba:	68bb      	ldr	r3, [r7, #8]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	0800606f 	.word	0x0800606f

080060c8 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
    if (err) {
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <lfs_file_open+0x1c>
        return err;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	e01a      	b.n	800611a <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fa ff68 	bl	8000fc0 <lfs_mlist_isopen>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f083 0301 	eor.w	r3, r3, #1
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <lfs_file_open+0x42>
 80060fc:	4b09      	ldr	r3, [pc, #36]	; (8006124 <lfs_file_open+0x5c>)
 80060fe:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <lfs_file_open+0x60>)
 8006100:	f241 712a 	movw	r1, #5930	; 0x172a
 8006104:	4809      	ldr	r0, [pc, #36]	; (800612c <lfs_file_open+0x64>)
 8006106:	f002 fdc7 	bl	8008c98 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7fe fc83 	bl	8004a1c <lfs_file_rawopen>
 8006116:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006118:	697b      	ldr	r3, [r7, #20]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	0800ab1c 	.word	0x0800ab1c
 8006128:	0800acf0 	.word	0x0800acf0
 800612c:	0800a138 	.word	0x0800a138

08006130 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
    if (err) {
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <lfs_file_close+0x18>
        return err;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	e015      	b.n	8006174 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7fa ff36 	bl	8000fc0 <lfs_mlist_isopen>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <lfs_file_close+0x38>
 800615a:	4b08      	ldr	r3, [pc, #32]	; (800617c <lfs_file_close+0x4c>)
 800615c:	4a08      	ldr	r2, [pc, #32]	; (8006180 <lfs_file_close+0x50>)
 800615e:	f241 714e 	movw	r1, #5966	; 0x174e
 8006162:	4808      	ldr	r0, [pc, #32]	; (8006184 <lfs_file_close+0x54>)
 8006164:	f002 fd98 	bl	8008c98 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fe fc6e 	bl	8004a4c <lfs_file_rawclose>
 8006170:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	0800ab54 	.word	0x0800ab54
 8006180:	0800ad00 	.word	0x0800ad00
 8006184:	0800a138 	.word	0x0800a138

08006188 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
    if (err) {
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <lfs_file_read+0x1c>
        return err;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	e017      	b.n	80061d4 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fa ff08 	bl	8000fc0 <lfs_mlist_isopen>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <lfs_file_read+0x3c>
 80061b6:	4b09      	ldr	r3, [pc, #36]	; (80061dc <lfs_file_read+0x54>)
 80061b8:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <lfs_file_read+0x58>)
 80061ba:	f241 7170 	movw	r1, #6000	; 0x1770
 80061be:	4809      	ldr	r0, [pc, #36]	; (80061e4 <lfs_file_read+0x5c>)
 80061c0:	f002 fd6a 	bl	8008c98 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f7fe ff8a 	bl	80050e4 <lfs_file_rawread>
 80061d0:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80061d2:	693b      	ldr	r3, [r7, #16]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	0800ab54 	.word	0x0800ab54
 80061e0:	0800ad10 	.word	0x0800ad10
 80061e4:	0800a138 	.word	0x0800a138

080061e8 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
    if (err) {
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <lfs_file_write+0x1c>
        return err;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	e017      	b.n	8006234 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fa fed8 	bl	8000fc0 <lfs_mlist_isopen>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <lfs_file_write+0x3c>
 8006216:	4b09      	ldr	r3, [pc, #36]	; (800623c <lfs_file_write+0x54>)
 8006218:	4a09      	ldr	r2, [pc, #36]	; (8006240 <lfs_file_write+0x58>)
 800621a:	f241 7182 	movw	r1, #6018	; 0x1782
 800621e:	4809      	ldr	r0, [pc, #36]	; (8006244 <lfs_file_write+0x5c>)
 8006220:	f002 fd3a 	bl	8008c98 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff f8ba 	bl	80053a4 <lfs_file_rawwrite>
 8006230:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8006232:	693b      	ldr	r3, [r7, #16]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	0800ab54 	.word	0x0800ab54
 8006240:	0800ad20 	.word	0x0800ad20
 8006244:	0800a138 	.word	0x0800a138

08006248 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e024      	b.n	80062a8 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	091a      	lsrs	r2, r3, #4
 8006262:	6939      	ldr	r1, [r7, #16]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	440b      	add	r3, r1
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	4619      	mov	r1, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	404b      	eors	r3, r1
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	4911      	ldr	r1, [pc, #68]	; (80062bc <lfs_crc+0x74>)
 8006276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800627a:	4053      	eors	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	091a      	lsrs	r2, r3, #4
 8006282:	6939      	ldr	r1, [r7, #16]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	440b      	add	r3, r1
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	091b      	lsrs	r3, r3, #4
 800628c:	b2db      	uxtb	r3, r3
 800628e:	4619      	mov	r1, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	404b      	eors	r3, r1
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	4908      	ldr	r1, [pc, #32]	; (80062bc <lfs_crc+0x74>)
 800629a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800629e:	4053      	eors	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	3301      	adds	r3, #1
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d3d6      	bcc.n	800625e <lfs_crc+0x16>
    }

    return crc;
 80062b0:	68fb      	ldr	r3, [r7, #12]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr
 80062bc:	0800ad30 	.word	0x0800ad30

080062c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80062c4:	f000 fbec 	bl	8006aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80062c8:	f000 f862 	bl	8006390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80062cc:	f000 f92c 	bl	8006528 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80062d0:	f000 f8da 	bl	8006488 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80062d4:	f000 f902 	bl	80064dc <MX_DMA_Init>
  MX_SPI2_Init();
 80062d8:	f000 f8a0 	bl	800641c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80062dc:	2064      	movs	r0, #100	; 0x64
 80062de:	f000 fc41 	bl	8006b64 <HAL_Delay>

  HAL_UART_Transmit(&huart2,"EPDM is starting *********\n", sizeof("EPDM is starting *********\n"),1000);
 80062e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062e6:	221c      	movs	r2, #28
 80062e8:	4921      	ldr	r1, [pc, #132]	; (8006370 <main+0xb0>)
 80062ea:	4822      	ldr	r0, [pc, #136]	; (8006374 <main+0xb4>)
 80062ec:	f001 ff01 	bl	80080f2 <HAL_UART_Transmit>

   lfs_file_open(&Lfs, &File, "count.bin", LFS_O_RDWR | LFS_O_CREAT);
 80062f0:	f240 1303 	movw	r3, #259	; 0x103
 80062f4:	4a20      	ldr	r2, [pc, #128]	; (8006378 <main+0xb8>)
 80062f6:	4921      	ldr	r1, [pc, #132]	; (800637c <main+0xbc>)
 80062f8:	4821      	ldr	r0, [pc, #132]	; (8006380 <main+0xc0>)
 80062fa:	f7ff fee5 	bl	80060c8 <lfs_file_open>
   lfs_file_read(&Lfs, &File, &Counter, sizeof(app_count_t));
 80062fe:	2308      	movs	r3, #8
 8006300:	4a20      	ldr	r2, [pc, #128]	; (8006384 <main+0xc4>)
 8006302:	491e      	ldr	r1, [pc, #120]	; (800637c <main+0xbc>)
 8006304:	481e      	ldr	r0, [pc, #120]	; (8006380 <main+0xc0>)
 8006306:	f7ff ff3f 	bl	8006188 <lfs_file_read>
   lfs_file_close(&Lfs, &File);
 800630a:	491c      	ldr	r1, [pc, #112]	; (800637c <main+0xbc>)
 800630c:	481c      	ldr	r0, [pc, #112]	; (8006380 <main+0xc0>)
 800630e:	f7ff ff0f 	bl	8006130 <lfs_file_close>

   Counter.bootCount += 1;
 8006312:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <main+0xc4>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	3301      	adds	r3, #1
 8006318:	4a1a      	ldr	r2, [pc, #104]	; (8006384 <main+0xc4>)
 800631a:	6053      	str	r3, [r2, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(Text, "Bt %lu |Ct %lu", Counter.bootCount, Counter.secCount);
 800631c:	4b19      	ldr	r3, [pc, #100]	; (8006384 <main+0xc4>)
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	4b18      	ldr	r3, [pc, #96]	; (8006384 <main+0xc4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4918      	ldr	r1, [pc, #96]	; (8006388 <main+0xc8>)
 8006326:	4819      	ldr	r0, [pc, #100]	; (800638c <main+0xcc>)
 8006328:	f003 f900 	bl	800952c <siprintf>
	  HAL_UART_Transmit(&huart2,Text, sizeof(Text),1000);
 800632c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006330:	2214      	movs	r2, #20
 8006332:	4916      	ldr	r1, [pc, #88]	; (800638c <main+0xcc>)
 8006334:	480f      	ldr	r0, [pc, #60]	; (8006374 <main+0xb4>)
 8006336:	f001 fedc 	bl	80080f2 <HAL_UART_Transmit>

		  lfs_file_open(&Lfs, &File, "count.bin", LFS_O_RDWR | LFS_O_CREAT);
 800633a:	f240 1303 	movw	r3, #259	; 0x103
 800633e:	4a0e      	ldr	r2, [pc, #56]	; (8006378 <main+0xb8>)
 8006340:	490e      	ldr	r1, [pc, #56]	; (800637c <main+0xbc>)
 8006342:	480f      	ldr	r0, [pc, #60]	; (8006380 <main+0xc0>)
 8006344:	f7ff fec0 	bl	80060c8 <lfs_file_open>
		  lfs_file_write(&Lfs, &File, &Counter, sizeof(app_count_t));
 8006348:	2308      	movs	r3, #8
 800634a:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <main+0xc4>)
 800634c:	490b      	ldr	r1, [pc, #44]	; (800637c <main+0xbc>)
 800634e:	480c      	ldr	r0, [pc, #48]	; (8006380 <main+0xc0>)
 8006350:	f7ff ff4a 	bl	80061e8 <lfs_file_write>
		  lfs_file_close(&Lfs, &File);
 8006354:	4909      	ldr	r1, [pc, #36]	; (800637c <main+0xbc>)
 8006356:	480a      	ldr	r0, [pc, #40]	; (8006380 <main+0xc0>)
 8006358:	f7ff feea 	bl	8006130 <lfs_file_close>

//		  while ((HAL_GetTick() - HalTickAux) < 1000);
		  HAL_Delay(1000);
 800635c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006360:	f000 fc00 	bl	8006b64 <HAL_Delay>

		  Counter.secCount += 1;
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <main+0xc4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	4a06      	ldr	r2, [pc, #24]	; (8006384 <main+0xc4>)
 800636c:	6013      	str	r3, [r2, #0]
	  sprintf(Text, "Bt %lu |Ct %lu", Counter.bootCount, Counter.secCount);
 800636e:	e7d5      	b.n	800631c <main+0x5c>
 8006370:	0800abc4 	.word	0x0800abc4
 8006374:	200001e0 	.word	0x200001e0
 8006378:	0800abe0 	.word	0x0800abe0
 800637c:	2000013c 	.word	0x2000013c
 8006380:	2000026c 	.word	0x2000026c
 8006384:	2000008c 	.word	0x2000008c
 8006388:	0800abec 	.word	0x0800abec
 800638c:	200002e8 	.word	0x200002e8

08006390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b090      	sub	sp, #64	; 0x40
 8006394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006396:	f107 0318 	add.w	r3, r7, #24
 800639a:	2228      	movs	r2, #40	; 0x28
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f002 fd00 	bl	8008da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80063a4:	1d3b      	adds	r3, r7, #4
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	605a      	str	r2, [r3, #4]
 80063ac:	609a      	str	r2, [r3, #8]
 80063ae:	60da      	str	r2, [r3, #12]
 80063b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80063b2:	2301      	movs	r3, #1
 80063b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80063b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80063bc:	2300      	movs	r3, #0
 80063be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80063c0:	2301      	movs	r3, #1
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80063c4:	2302      	movs	r3, #2
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80063c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80063ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80063d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063d4:	f107 0318 	add.w	r3, r7, #24
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 f8a5 	bl	8007528 <HAL_RCC_OscConfig>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80063e4:	f000 f8ec 	bl	80065c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063e8:	230f      	movs	r3, #15
 80063ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063ec:	2302      	movs	r3, #2
 80063ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80063f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80063fe:	1d3b      	adds	r3, r7, #4
 8006400:	2102      	movs	r1, #2
 8006402:	4618      	mov	r0, r3
 8006404:	f001 fb10 	bl	8007a28 <HAL_RCC_ClockConfig>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800640e:	f000 f8d7 	bl	80065c0 <Error_Handler>
  }
}
 8006412:	bf00      	nop
 8006414:	3740      	adds	r7, #64	; 0x40
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006420:	4b17      	ldr	r3, [pc, #92]	; (8006480 <MX_SPI2_Init+0x64>)
 8006422:	4a18      	ldr	r2, [pc, #96]	; (8006484 <MX_SPI2_Init+0x68>)
 8006424:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006426:	4b16      	ldr	r3, [pc, #88]	; (8006480 <MX_SPI2_Init+0x64>)
 8006428:	f44f 7282 	mov.w	r2, #260	; 0x104
 800642c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800642e:	4b14      	ldr	r3, [pc, #80]	; (8006480 <MX_SPI2_Init+0x64>)
 8006430:	2200      	movs	r2, #0
 8006432:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006434:	4b12      	ldr	r3, [pc, #72]	; (8006480 <MX_SPI2_Init+0x64>)
 8006436:	2200      	movs	r2, #0
 8006438:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800643a:	4b11      	ldr	r3, [pc, #68]	; (8006480 <MX_SPI2_Init+0x64>)
 800643c:	2200      	movs	r2, #0
 800643e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006440:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <MX_SPI2_Init+0x64>)
 8006442:	2200      	movs	r2, #0
 8006444:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006446:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <MX_SPI2_Init+0x64>)
 8006448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800644c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800644e:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <MX_SPI2_Init+0x64>)
 8006450:	2200      	movs	r2, #0
 8006452:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006454:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <MX_SPI2_Init+0x64>)
 8006456:	2200      	movs	r2, #0
 8006458:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800645a:	4b09      	ldr	r3, [pc, #36]	; (8006480 <MX_SPI2_Init+0x64>)
 800645c:	2200      	movs	r2, #0
 800645e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <MX_SPI2_Init+0x64>)
 8006462:	2200      	movs	r2, #0
 8006464:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006466:	4b06      	ldr	r3, [pc, #24]	; (8006480 <MX_SPI2_Init+0x64>)
 8006468:	220a      	movs	r2, #10
 800646a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800646c:	4804      	ldr	r0, [pc, #16]	; (8006480 <MX_SPI2_Init+0x64>)
 800646e:	f001 fc69 	bl	8007d44 <HAL_SPI_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006478:	f000 f8a2 	bl	80065c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800647c:	bf00      	nop
 800647e:	bd80      	pop	{r7, pc}
 8006480:	200000a0 	.word	0x200000a0
 8006484:	40003800 	.word	0x40003800

08006488 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800648c:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <MX_USART2_UART_Init+0x4c>)
 800648e:	4a12      	ldr	r2, [pc, #72]	; (80064d8 <MX_USART2_UART_Init+0x50>)
 8006490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006492:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <MX_USART2_UART_Init+0x4c>)
 8006494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800649a:	4b0e      	ldr	r3, [pc, #56]	; (80064d4 <MX_USART2_UART_Init+0x4c>)
 800649c:	2200      	movs	r2, #0
 800649e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <MX_USART2_UART_Init+0x4c>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80064a6:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <MX_USART2_UART_Init+0x4c>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <MX_USART2_UART_Init+0x4c>)
 80064ae:	220c      	movs	r2, #12
 80064b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064b2:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <MX_USART2_UART_Init+0x4c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <MX_USART2_UART_Init+0x4c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80064be:	4805      	ldr	r0, [pc, #20]	; (80064d4 <MX_USART2_UART_Init+0x4c>)
 80064c0:	f001 fdc7 	bl	8008052 <HAL_UART_Init>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80064ca:	f000 f879 	bl	80065c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80064ce:	bf00      	nop
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	200001e0 	.word	0x200001e0
 80064d8:	40004400 	.word	0x40004400

080064dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <MX_DMA_Init+0x48>)
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	4a0f      	ldr	r2, [pc, #60]	; (8006524 <MX_DMA_Init+0x48>)
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	6153      	str	r3, [r2, #20]
 80064ee:	4b0d      	ldr	r3, [pc, #52]	; (8006524 <MX_DMA_Init+0x48>)
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80064fa:	2200      	movs	r2, #0
 80064fc:	2100      	movs	r1, #0
 80064fe:	200e      	movs	r0, #14
 8006500:	f000 fc2b 	bl	8006d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8006504:	200e      	movs	r0, #14
 8006506:	f000 fc44 	bl	8006d92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800650a:	2200      	movs	r2, #0
 800650c:	2100      	movs	r1, #0
 800650e:	200f      	movs	r0, #15
 8006510:	f000 fc23 	bl	8006d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006514:	200f      	movs	r0, #15
 8006516:	f000 fc3c 	bl	8006d92 <HAL_NVIC_EnableIRQ>

}
 800651a:	bf00      	nop
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	40021000 	.word	0x40021000

08006528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800652e:	f107 0310 	add.w	r3, r7, #16
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	605a      	str	r2, [r3, #4]
 8006538:	609a      	str	r2, [r3, #8]
 800653a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800653c:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <MX_GPIO_Init+0x90>)
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	4a1d      	ldr	r2, [pc, #116]	; (80065b8 <MX_GPIO_Init+0x90>)
 8006542:	f043 0320 	orr.w	r3, r3, #32
 8006546:	6193      	str	r3, [r2, #24]
 8006548:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <MX_GPIO_Init+0x90>)
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006554:	4b18      	ldr	r3, [pc, #96]	; (80065b8 <MX_GPIO_Init+0x90>)
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	4a17      	ldr	r2, [pc, #92]	; (80065b8 <MX_GPIO_Init+0x90>)
 800655a:	f043 0304 	orr.w	r3, r3, #4
 800655e:	6193      	str	r3, [r2, #24]
 8006560:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <MX_GPIO_Init+0x90>)
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	60bb      	str	r3, [r7, #8]
 800656a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800656c:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <MX_GPIO_Init+0x90>)
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	4a11      	ldr	r2, [pc, #68]	; (80065b8 <MX_GPIO_Init+0x90>)
 8006572:	f043 0308 	orr.w	r3, r3, #8
 8006576:	6193      	str	r3, [r2, #24]
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <MX_GPIO_Init+0x90>)
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	607b      	str	r3, [r7, #4]
 8006582:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8006584:	2200      	movs	r2, #0
 8006586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800658a:	480c      	ldr	r0, [pc, #48]	; (80065bc <MX_GPIO_Init+0x94>)
 800658c:	f000 ffb4 	bl	80074f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8006590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006596:	2301      	movs	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659a:	2300      	movs	r3, #0
 800659c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800659e:	2302      	movs	r3, #2
 80065a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80065a2:	f107 0310 	add.w	r3, r7, #16
 80065a6:	4619      	mov	r1, r3
 80065a8:	4804      	ldr	r0, [pc, #16]	; (80065bc <MX_GPIO_Init+0x94>)
 80065aa:	f000 fe21 	bl	80071f0 <HAL_GPIO_Init>

}
 80065ae:	bf00      	nop
 80065b0:	3720      	adds	r7, #32
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
 80065bc:	40010c00 	.word	0x40010c00

080065c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065c4:	b672      	cpsid	i
}
 80065c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80065c8:	e7fe      	b.n	80065c8 <Error_Handler+0x8>
	...

080065cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80065d2:	4b15      	ldr	r3, [pc, #84]	; (8006628 <HAL_MspInit+0x5c>)
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	4a14      	ldr	r2, [pc, #80]	; (8006628 <HAL_MspInit+0x5c>)
 80065d8:	f043 0301 	orr.w	r3, r3, #1
 80065dc:	6193      	str	r3, [r2, #24]
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <HAL_MspInit+0x5c>)
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	60bb      	str	r3, [r7, #8]
 80065e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065ea:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <HAL_MspInit+0x5c>)
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	4a0e      	ldr	r2, [pc, #56]	; (8006628 <HAL_MspInit+0x5c>)
 80065f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f4:	61d3      	str	r3, [r2, #28]
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <HAL_MspInit+0x5c>)
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fe:	607b      	str	r3, [r7, #4]
 8006600:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006602:	4b0a      	ldr	r3, [pc, #40]	; (800662c <HAL_MspInit+0x60>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	4a04      	ldr	r2, [pc, #16]	; (800662c <HAL_MspInit+0x60>)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr
 8006628:	40021000 	.word	0x40021000
 800662c:	40010000 	.word	0x40010000

08006630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006638:	f107 0310 	add.w	r3, r7, #16
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	605a      	str	r2, [r3, #4]
 8006642:	609a      	str	r2, [r3, #8]
 8006644:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a47      	ldr	r2, [pc, #284]	; (8006768 <HAL_SPI_MspInit+0x138>)
 800664c:	4293      	cmp	r3, r2
 800664e:	f040 8086 	bne.w	800675e <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006652:	4b46      	ldr	r3, [pc, #280]	; (800676c <HAL_SPI_MspInit+0x13c>)
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	4a45      	ldr	r2, [pc, #276]	; (800676c <HAL_SPI_MspInit+0x13c>)
 8006658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800665c:	61d3      	str	r3, [r2, #28]
 800665e:	4b43      	ldr	r3, [pc, #268]	; (800676c <HAL_SPI_MspInit+0x13c>)
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800666a:	4b40      	ldr	r3, [pc, #256]	; (800676c <HAL_SPI_MspInit+0x13c>)
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	4a3f      	ldr	r2, [pc, #252]	; (800676c <HAL_SPI_MspInit+0x13c>)
 8006670:	f043 0308 	orr.w	r3, r3, #8
 8006674:	6193      	str	r3, [r2, #24]
 8006676:	4b3d      	ldr	r3, [pc, #244]	; (800676c <HAL_SPI_MspInit+0x13c>)
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	60bb      	str	r3, [r7, #8]
 8006680:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8006682:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006688:	2302      	movs	r3, #2
 800668a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800668c:	2303      	movs	r3, #3
 800668e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006690:	f107 0310 	add.w	r3, r7, #16
 8006694:	4619      	mov	r1, r3
 8006696:	4836      	ldr	r0, [pc, #216]	; (8006770 <HAL_SPI_MspInit+0x140>)
 8006698:	f000 fdaa 	bl	80071f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800669c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066aa:	f107 0310 	add.w	r3, r7, #16
 80066ae:	4619      	mov	r1, r3
 80066b0:	482f      	ldr	r0, [pc, #188]	; (8006770 <HAL_SPI_MspInit+0x140>)
 80066b2:	f000 fd9d 	bl	80071f0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80066b6:	4b2f      	ldr	r3, [pc, #188]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066b8:	4a2f      	ldr	r2, [pc, #188]	; (8006778 <HAL_SPI_MspInit+0x148>)
 80066ba:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066bc:	4b2d      	ldr	r3, [pc, #180]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066be:	2200      	movs	r2, #0
 80066c0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066c2:	4b2c      	ldr	r3, [pc, #176]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066c8:	4b2a      	ldr	r3, [pc, #168]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066ca:	2280      	movs	r2, #128	; 0x80
 80066cc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066ce:	4b29      	ldr	r3, [pc, #164]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066d4:	4b27      	ldr	r3, [pc, #156]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80066da:	4b26      	ldr	r3, [pc, #152]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066dc:	2200      	movs	r2, #0
 80066de:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80066e0:	4b24      	ldr	r3, [pc, #144]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80066e6:	4823      	ldr	r0, [pc, #140]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066e8:	f000 fb6e 	bl	8006dc8 <HAL_DMA_Init>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80066f2:	f7ff ff65 	bl	80065c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a1e      	ldr	r2, [pc, #120]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80066fc:	4a1d      	ldr	r2, [pc, #116]	; (8006774 <HAL_SPI_MspInit+0x144>)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8006702:	4b1e      	ldr	r3, [pc, #120]	; (800677c <HAL_SPI_MspInit+0x14c>)
 8006704:	4a1e      	ldr	r2, [pc, #120]	; (8006780 <HAL_SPI_MspInit+0x150>)
 8006706:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006708:	4b1c      	ldr	r3, [pc, #112]	; (800677c <HAL_SPI_MspInit+0x14c>)
 800670a:	2210      	movs	r2, #16
 800670c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800670e:	4b1b      	ldr	r3, [pc, #108]	; (800677c <HAL_SPI_MspInit+0x14c>)
 8006710:	2200      	movs	r2, #0
 8006712:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006714:	4b19      	ldr	r3, [pc, #100]	; (800677c <HAL_SPI_MspInit+0x14c>)
 8006716:	2280      	movs	r2, #128	; 0x80
 8006718:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800671a:	4b18      	ldr	r3, [pc, #96]	; (800677c <HAL_SPI_MspInit+0x14c>)
 800671c:	2200      	movs	r2, #0
 800671e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006720:	4b16      	ldr	r3, [pc, #88]	; (800677c <HAL_SPI_MspInit+0x14c>)
 8006722:	2200      	movs	r2, #0
 8006724:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006726:	4b15      	ldr	r3, [pc, #84]	; (800677c <HAL_SPI_MspInit+0x14c>)
 8006728:	2200      	movs	r2, #0
 800672a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800672c:	4b13      	ldr	r3, [pc, #76]	; (800677c <HAL_SPI_MspInit+0x14c>)
 800672e:	2200      	movs	r2, #0
 8006730:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006732:	4812      	ldr	r0, [pc, #72]	; (800677c <HAL_SPI_MspInit+0x14c>)
 8006734:	f000 fb48 	bl	8006dc8 <HAL_DMA_Init>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 800673e:	f7ff ff3f 	bl	80065c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a0d      	ldr	r2, [pc, #52]	; (800677c <HAL_SPI_MspInit+0x14c>)
 8006746:	649a      	str	r2, [r3, #72]	; 0x48
 8006748:	4a0c      	ldr	r2, [pc, #48]	; (800677c <HAL_SPI_MspInit+0x14c>)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800674e:	2200      	movs	r2, #0
 8006750:	2100      	movs	r1, #0
 8006752:	2024      	movs	r0, #36	; 0x24
 8006754:	f000 fb01 	bl	8006d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006758:	2024      	movs	r0, #36	; 0x24
 800675a:	f000 fb1a 	bl	8006d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800675e:	bf00      	nop
 8006760:	3720      	adds	r7, #32
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40003800 	.word	0x40003800
 800676c:	40021000 	.word	0x40021000
 8006770:	40010c00 	.word	0x40010c00
 8006774:	200000f8 	.word	0x200000f8
 8006778:	40020044 	.word	0x40020044
 800677c:	20000228 	.word	0x20000228
 8006780:	40020058 	.word	0x40020058

08006784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1f      	ldr	r2, [pc, #124]	; (800681c <HAL_UART_MspInit+0x98>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d137      	bne.n	8006814 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80067a4:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <HAL_UART_MspInit+0x9c>)
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <HAL_UART_MspInit+0x9c>)
 80067aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ae:	61d3      	str	r3, [r2, #28]
 80067b0:	4b1b      	ldr	r3, [pc, #108]	; (8006820 <HAL_UART_MspInit+0x9c>)
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067bc:	4b18      	ldr	r3, [pc, #96]	; (8006820 <HAL_UART_MspInit+0x9c>)
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	4a17      	ldr	r2, [pc, #92]	; (8006820 <HAL_UART_MspInit+0x9c>)
 80067c2:	f043 0304 	orr.w	r3, r3, #4
 80067c6:	6193      	str	r3, [r2, #24]
 80067c8:	4b15      	ldr	r3, [pc, #84]	; (8006820 <HAL_UART_MspInit+0x9c>)
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80067d4:	2304      	movs	r3, #4
 80067d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067d8:	2302      	movs	r3, #2
 80067da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067dc:	2303      	movs	r3, #3
 80067de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067e0:	f107 0310 	add.w	r3, r7, #16
 80067e4:	4619      	mov	r1, r3
 80067e6:	480f      	ldr	r0, [pc, #60]	; (8006824 <HAL_UART_MspInit+0xa0>)
 80067e8:	f000 fd02 	bl	80071f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80067ec:	2308      	movs	r3, #8
 80067ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067f8:	f107 0310 	add.w	r3, r7, #16
 80067fc:	4619      	mov	r1, r3
 80067fe:	4809      	ldr	r0, [pc, #36]	; (8006824 <HAL_UART_MspInit+0xa0>)
 8006800:	f000 fcf6 	bl	80071f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006804:	2200      	movs	r2, #0
 8006806:	2100      	movs	r1, #0
 8006808:	2026      	movs	r0, #38	; 0x26
 800680a:	f000 faa6 	bl	8006d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800680e:	2026      	movs	r0, #38	; 0x26
 8006810:	f000 fabf 	bl	8006d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006814:	bf00      	nop
 8006816:	3720      	adds	r7, #32
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40004400 	.word	0x40004400
 8006820:	40021000 	.word	0x40021000
 8006824:	40010800 	.word	0x40010800

08006828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800682c:	e7fe      	b.n	800682c <NMI_Handler+0x4>

0800682e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800682e:	b480      	push	{r7}
 8006830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006832:	e7fe      	b.n	8006832 <HardFault_Handler+0x4>

08006834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006838:	e7fe      	b.n	8006838 <MemManage_Handler+0x4>

0800683a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800683a:	b480      	push	{r7}
 800683c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800683e:	e7fe      	b.n	800683e <BusFault_Handler+0x4>

08006840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006844:	e7fe      	b.n	8006844 <UsageFault_Handler+0x4>

08006846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006846:	b480      	push	{r7}
 8006848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800684a:	bf00      	nop
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr

08006852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006852:	b480      	push	{r7}
 8006854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006856:	bf00      	nop
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr

0800685e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800685e:	b480      	push	{r7}
 8006860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006862:	bf00      	nop
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr

0800686a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800686e:	f000 f95d 	bl	8006b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006872:	bf00      	nop
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800687c:	4802      	ldr	r0, [pc, #8]	; (8006888 <DMA1_Channel4_IRQHandler+0x10>)
 800687e:	f000 fbb1 	bl	8006fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006882:	bf00      	nop
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	200000f8 	.word	0x200000f8

0800688c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006890:	4802      	ldr	r0, [pc, #8]	; (800689c <DMA1_Channel5_IRQHandler+0x10>)
 8006892:	f000 fba7 	bl	8006fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006896:	bf00      	nop
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000228 	.word	0x20000228

080068a0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80068a4:	4802      	ldr	r0, [pc, #8]	; (80068b0 <SPI2_IRQHandler+0x10>)
 80068a6:	f001 fad1 	bl	8007e4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80068aa:	bf00      	nop
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	200000a0 	.word	0x200000a0

080068b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80068b8:	4802      	ldr	r0, [pc, #8]	; (80068c4 <USART2_IRQHandler+0x10>)
 80068ba:	f001 fc9d 	bl	80081f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	200001e0 	.word	0x200001e0

080068c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
	return 1;
 80068cc:	2301      	movs	r3, #1
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr

080068d6 <_kill>:

int _kill(int pid, int sig)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80068e0:	f002 f9f8 	bl	8008cd4 <__errno>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2216      	movs	r2, #22
 80068e8:	601a      	str	r2, [r3, #0]
	return -1;
 80068ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <_exit>:

void _exit (int status)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80068fe:	f04f 31ff 	mov.w	r1, #4294967295
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff ffe7 	bl	80068d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006908:	e7fe      	b.n	8006908 <_exit+0x12>

0800690a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	e00a      	b.n	8006932 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800691c:	f3af 8000 	nop.w
 8006920:	4601      	mov	r1, r0
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	60ba      	str	r2, [r7, #8]
 8006928:	b2ca      	uxtb	r2, r1
 800692a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	3301      	adds	r3, #1
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	dbf0      	blt.n	800691c <_read+0x12>
	}

return len;
 800693a:	687b      	ldr	r3, [r7, #4]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e009      	b.n	800696a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	60ba      	str	r2, [r7, #8]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	3301      	adds	r3, #1
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	429a      	cmp	r2, r3
 8006970:	dbf1      	blt.n	8006956 <_write+0x12>
	}
	return len;
 8006972:	687b      	ldr	r3, [r7, #4]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <_close>:

int _close(int file)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	return -1;
 8006984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr

08006992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069a2:	605a      	str	r2, [r3, #4]
	return 0;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr

080069b0 <_isatty>:

int _isatty(int file)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	return 1;
 80069b8:	2301      	movs	r3, #1
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
	return 0;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069e4:	4a14      	ldr	r2, [pc, #80]	; (8006a38 <_sbrk+0x5c>)
 80069e6:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <_sbrk+0x60>)
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069f0:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <_sbrk+0x64>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d102      	bne.n	80069fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069f8:	4b11      	ldr	r3, [pc, #68]	; (8006a40 <_sbrk+0x64>)
 80069fa:	4a12      	ldr	r2, [pc, #72]	; (8006a44 <_sbrk+0x68>)
 80069fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069fe:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <_sbrk+0x64>)
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4413      	add	r3, r2
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d207      	bcs.n	8006a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a0c:	f002 f962 	bl	8008cd4 <__errno>
 8006a10:	4603      	mov	r3, r0
 8006a12:	220c      	movs	r2, #12
 8006a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a16:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1a:	e009      	b.n	8006a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a1c:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <_sbrk+0x64>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a22:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <_sbrk+0x64>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4413      	add	r3, r2
 8006a2a:	4a05      	ldr	r2, [pc, #20]	; (8006a40 <_sbrk+0x64>)
 8006a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20005000 	.word	0x20005000
 8006a3c:	00000400 	.word	0x00000400
 8006a40:	20000094 	.word	0x20000094
 8006a44:	20000310 	.word	0x20000310

08006a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a4c:	bf00      	nop
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc80      	pop	{r7}
 8006a52:	4770      	bx	lr

08006a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006a54:	f7ff fff8 	bl	8006a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a58:	480b      	ldr	r0, [pc, #44]	; (8006a88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006a5a:	490c      	ldr	r1, [pc, #48]	; (8006a8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006a5c:	4a0c      	ldr	r2, [pc, #48]	; (8006a90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a60:	e002      	b.n	8006a68 <LoopCopyDataInit>

08006a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a66:	3304      	adds	r3, #4

08006a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a6c:	d3f9      	bcc.n	8006a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a6e:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006a70:	4c09      	ldr	r4, [pc, #36]	; (8006a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a74:	e001      	b.n	8006a7a <LoopFillZerobss>

08006a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a78:	3204      	adds	r2, #4

08006a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a7c:	d3fb      	bcc.n	8006a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006a7e:	f002 f941 	bl	8008d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006a82:	f7ff fc1d 	bl	80062c0 <main>
  bx lr
 8006a86:	4770      	bx	lr
  ldr r0, =_sdata
 8006a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8006a90:	0800ae78 	.word	0x0800ae78
  ldr r2, =_sbss
 8006a94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8006a98:	20000310 	.word	0x20000310

08006a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a9c:	e7fe      	b.n	8006a9c <ADC1_2_IRQHandler>
	...

08006aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006aa4:	4b08      	ldr	r3, [pc, #32]	; (8006ac8 <HAL_Init+0x28>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a07      	ldr	r2, [pc, #28]	; (8006ac8 <HAL_Init+0x28>)
 8006aaa:	f043 0310 	orr.w	r3, r3, #16
 8006aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ab0:	2003      	movs	r0, #3
 8006ab2:	f000 f947 	bl	8006d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ab6:	200f      	movs	r0, #15
 8006ab8:	f000 f808 	bl	8006acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006abc:	f7ff fd86 	bl	80065cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40022000 	.word	0x40022000

08006acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ad4:	4b12      	ldr	r3, [pc, #72]	; (8006b20 <HAL_InitTick+0x54>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <HAL_InitTick+0x58>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	4619      	mov	r1, r3
 8006ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 f95f 	bl	8006dae <HAL_SYSTICK_Config>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e00e      	b.n	8006b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b0f      	cmp	r3, #15
 8006afe:	d80a      	bhi.n	8006b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b00:	2200      	movs	r2, #0
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	f000 f927 	bl	8006d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b0c:	4a06      	ldr	r2, [pc, #24]	; (8006b28 <HAL_InitTick+0x5c>)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e000      	b.n	8006b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000000 	.word	0x20000000
 8006b24:	20000008 	.word	0x20000008
 8006b28:	20000004 	.word	0x20000004

08006b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b30:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <HAL_IncTick+0x1c>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	461a      	mov	r2, r3
 8006b36:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <HAL_IncTick+0x20>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	4a03      	ldr	r2, [pc, #12]	; (8006b4c <HAL_IncTick+0x20>)
 8006b3e:	6013      	str	r3, [r2, #0]
}
 8006b40:	bf00      	nop
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr
 8006b48:	20000008 	.word	0x20000008
 8006b4c:	200002fc 	.word	0x200002fc

08006b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  return uwTick;
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <HAL_GetTick+0x10>)
 8006b56:	681b      	ldr	r3, [r3, #0]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr
 8006b60:	200002fc 	.word	0x200002fc

08006b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b6c:	f7ff fff0 	bl	8006b50 <HAL_GetTick>
 8006b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d005      	beq.n	8006b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <HAL_Delay+0x44>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b8a:	bf00      	nop
 8006b8c:	f7ff ffe0 	bl	8006b50 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d8f7      	bhi.n	8006b8c <HAL_Delay+0x28>
  {
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000008 	.word	0x20000008

08006bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006bc8:	4013      	ands	r3, r2
 8006bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bde:	4a04      	ldr	r2, [pc, #16]	; (8006bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	60d3      	str	r3, [r2, #12]
}
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	e000ed00 	.word	0xe000ed00

08006bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bf8:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <__NVIC_GetPriorityGrouping+0x18>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	0a1b      	lsrs	r3, r3, #8
 8006bfe:	f003 0307 	and.w	r3, r3, #7
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	e000ed00 	.word	0xe000ed00

08006c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	db0b      	blt.n	8006c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	f003 021f 	and.w	r2, r3, #31
 8006c28:	4906      	ldr	r1, [pc, #24]	; (8006c44 <__NVIC_EnableIRQ+0x34>)
 8006c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	2001      	movs	r0, #1
 8006c32:	fa00 f202 	lsl.w	r2, r0, r2
 8006c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c3a:	bf00      	nop
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr
 8006c44:	e000e100 	.word	0xe000e100

08006c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	6039      	str	r1, [r7, #0]
 8006c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	db0a      	blt.n	8006c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	490c      	ldr	r1, [pc, #48]	; (8006c94 <__NVIC_SetPriority+0x4c>)
 8006c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c66:	0112      	lsls	r2, r2, #4
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c70:	e00a      	b.n	8006c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	4908      	ldr	r1, [pc, #32]	; (8006c98 <__NVIC_SetPriority+0x50>)
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	3b04      	subs	r3, #4
 8006c80:	0112      	lsls	r2, r2, #4
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	440b      	add	r3, r1
 8006c86:	761a      	strb	r2, [r3, #24]
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	e000e100 	.word	0xe000e100
 8006c98:	e000ed00 	.word	0xe000ed00

08006c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b089      	sub	sp, #36	; 0x24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	f1c3 0307 	rsb	r3, r3, #7
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	bf28      	it	cs
 8006cba:	2304      	movcs	r3, #4
 8006cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	2b06      	cmp	r3, #6
 8006cc4:	d902      	bls.n	8006ccc <NVIC_EncodePriority+0x30>
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	3b03      	subs	r3, #3
 8006cca:	e000      	b.n	8006cce <NVIC_EncodePriority+0x32>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	43da      	mvns	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	401a      	ands	r2, r3
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	fa01 f303 	lsl.w	r3, r1, r3
 8006cee:	43d9      	mvns	r1, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cf4:	4313      	orrs	r3, r2
         );
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3724      	adds	r7, #36	; 0x24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bc80      	pop	{r7}
 8006cfe:	4770      	bx	lr

08006d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d10:	d301      	bcc.n	8006d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d12:	2301      	movs	r3, #1
 8006d14:	e00f      	b.n	8006d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d16:	4a0a      	ldr	r2, [pc, #40]	; (8006d40 <SysTick_Config+0x40>)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d1e:	210f      	movs	r1, #15
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295
 8006d24:	f7ff ff90 	bl	8006c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <SysTick_Config+0x40>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <SysTick_Config+0x40>)
 8006d30:	2207      	movs	r2, #7
 8006d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	e000e010 	.word	0xe000e010

08006d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff ff2d 	bl	8006bac <__NVIC_SetPriorityGrouping>
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b086      	sub	sp, #24
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	4603      	mov	r3, r0
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d6c:	f7ff ff42 	bl	8006bf4 <__NVIC_GetPriorityGrouping>
 8006d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	6978      	ldr	r0, [r7, #20]
 8006d78:	f7ff ff90 	bl	8006c9c <NVIC_EncodePriority>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d82:	4611      	mov	r1, r2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff ff5f 	bl	8006c48 <__NVIC_SetPriority>
}
 8006d8a:	bf00      	nop
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	4603      	mov	r3, r0
 8006d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ff35 	bl	8006c10 <__NVIC_EnableIRQ>
}
 8006da6:	bf00      	nop
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff ffa2 	bl	8006d00 <SysTick_Config>
 8006dbc:	4603      	mov	r3, r0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e043      	b.n	8006e66 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	4b22      	ldr	r3, [pc, #136]	; (8006e70 <HAL_DMA_Init+0xa8>)
 8006de6:	4413      	add	r3, r2
 8006de8:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <HAL_DMA_Init+0xac>)
 8006dea:	fba2 2303 	umull	r2, r3, r2, r3
 8006dee:	091b      	lsrs	r3, r3, #4
 8006df0:	009a      	lsls	r2, r3, #2
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a1f      	ldr	r2, [pc, #124]	; (8006e78 <HAL_DMA_Init+0xb0>)
 8006dfa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006e12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006e16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr
 8006e70:	bffdfff8 	.word	0xbffdfff8
 8006e74:	cccccccd 	.word	0xcccccccd
 8006e78:	40020000 	.word	0x40020000

08006e7c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d008      	beq.n	8006ea6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2204      	movs	r2, #4
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e020      	b.n	8006ee8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 020e 	bic.w	r2, r2, #14
 8006eb4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0201 	bic.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ece:	2101      	movs	r1, #1
 8006ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ed4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr
	...

08006ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d005      	beq.n	8006f18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2204      	movs	r2, #4
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	73fb      	strb	r3, [r7, #15]
 8006f16:	e051      	b.n	8006fbc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 020e 	bic.w	r2, r2, #14
 8006f26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a22      	ldr	r2, [pc, #136]	; (8006fc8 <HAL_DMA_Abort_IT+0xd4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d029      	beq.n	8006f96 <HAL_DMA_Abort_IT+0xa2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <HAL_DMA_Abort_IT+0xd8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d022      	beq.n	8006f92 <HAL_DMA_Abort_IT+0x9e>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1f      	ldr	r2, [pc, #124]	; (8006fd0 <HAL_DMA_Abort_IT+0xdc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d01a      	beq.n	8006f8c <HAL_DMA_Abort_IT+0x98>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1e      	ldr	r2, [pc, #120]	; (8006fd4 <HAL_DMA_Abort_IT+0xe0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d012      	beq.n	8006f86 <HAL_DMA_Abort_IT+0x92>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <HAL_DMA_Abort_IT+0xe4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00a      	beq.n	8006f80 <HAL_DMA_Abort_IT+0x8c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1b      	ldr	r2, [pc, #108]	; (8006fdc <HAL_DMA_Abort_IT+0xe8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d102      	bne.n	8006f7a <HAL_DMA_Abort_IT+0x86>
 8006f74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f78:	e00e      	b.n	8006f98 <HAL_DMA_Abort_IT+0xa4>
 8006f7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f7e:	e00b      	b.n	8006f98 <HAL_DMA_Abort_IT+0xa4>
 8006f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f84:	e008      	b.n	8006f98 <HAL_DMA_Abort_IT+0xa4>
 8006f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f8a:	e005      	b.n	8006f98 <HAL_DMA_Abort_IT+0xa4>
 8006f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f90:	e002      	b.n	8006f98 <HAL_DMA_Abort_IT+0xa4>
 8006f92:	2310      	movs	r3, #16
 8006f94:	e000      	b.n	8006f98 <HAL_DMA_Abort_IT+0xa4>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4a11      	ldr	r2, [pc, #68]	; (8006fe0 <HAL_DMA_Abort_IT+0xec>)
 8006f9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
    } 
  }
  return status;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40020008 	.word	0x40020008
 8006fcc:	4002001c 	.word	0x4002001c
 8006fd0:	40020030 	.word	0x40020030
 8006fd4:	40020044 	.word	0x40020044
 8006fd8:	40020058 	.word	0x40020058
 8006fdc:	4002006c 	.word	0x4002006c
 8006fe0:	40020000 	.word	0x40020000

08006fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	2204      	movs	r2, #4
 8007002:	409a      	lsls	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d04f      	beq.n	80070ac <HAL_DMA_IRQHandler+0xc8>
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	d04a      	beq.n	80070ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d107      	bne.n	8007034 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0204 	bic.w	r2, r2, #4
 8007032:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a66      	ldr	r2, [pc, #408]	; (80071d4 <HAL_DMA_IRQHandler+0x1f0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d029      	beq.n	8007092 <HAL_DMA_IRQHandler+0xae>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a65      	ldr	r2, [pc, #404]	; (80071d8 <HAL_DMA_IRQHandler+0x1f4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d022      	beq.n	800708e <HAL_DMA_IRQHandler+0xaa>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a63      	ldr	r2, [pc, #396]	; (80071dc <HAL_DMA_IRQHandler+0x1f8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01a      	beq.n	8007088 <HAL_DMA_IRQHandler+0xa4>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a62      	ldr	r2, [pc, #392]	; (80071e0 <HAL_DMA_IRQHandler+0x1fc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d012      	beq.n	8007082 <HAL_DMA_IRQHandler+0x9e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a60      	ldr	r2, [pc, #384]	; (80071e4 <HAL_DMA_IRQHandler+0x200>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00a      	beq.n	800707c <HAL_DMA_IRQHandler+0x98>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a5f      	ldr	r2, [pc, #380]	; (80071e8 <HAL_DMA_IRQHandler+0x204>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d102      	bne.n	8007076 <HAL_DMA_IRQHandler+0x92>
 8007070:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007074:	e00e      	b.n	8007094 <HAL_DMA_IRQHandler+0xb0>
 8007076:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800707a:	e00b      	b.n	8007094 <HAL_DMA_IRQHandler+0xb0>
 800707c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007080:	e008      	b.n	8007094 <HAL_DMA_IRQHandler+0xb0>
 8007082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007086:	e005      	b.n	8007094 <HAL_DMA_IRQHandler+0xb0>
 8007088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800708c:	e002      	b.n	8007094 <HAL_DMA_IRQHandler+0xb0>
 800708e:	2340      	movs	r3, #64	; 0x40
 8007090:	e000      	b.n	8007094 <HAL_DMA_IRQHandler+0xb0>
 8007092:	2304      	movs	r3, #4
 8007094:	4a55      	ldr	r2, [pc, #340]	; (80071ec <HAL_DMA_IRQHandler+0x208>)
 8007096:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8094 	beq.w	80071ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80070aa:	e08e      	b.n	80071ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	2202      	movs	r2, #2
 80070b2:	409a      	lsls	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4013      	ands	r3, r2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d056      	beq.n	800716a <HAL_DMA_IRQHandler+0x186>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d051      	beq.n	800716a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 020a 	bic.w	r2, r2, #10
 80070e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a38      	ldr	r2, [pc, #224]	; (80071d4 <HAL_DMA_IRQHandler+0x1f0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d029      	beq.n	800714a <HAL_DMA_IRQHandler+0x166>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a37      	ldr	r2, [pc, #220]	; (80071d8 <HAL_DMA_IRQHandler+0x1f4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d022      	beq.n	8007146 <HAL_DMA_IRQHandler+0x162>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a35      	ldr	r2, [pc, #212]	; (80071dc <HAL_DMA_IRQHandler+0x1f8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d01a      	beq.n	8007140 <HAL_DMA_IRQHandler+0x15c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a34      	ldr	r2, [pc, #208]	; (80071e0 <HAL_DMA_IRQHandler+0x1fc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d012      	beq.n	800713a <HAL_DMA_IRQHandler+0x156>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a32      	ldr	r2, [pc, #200]	; (80071e4 <HAL_DMA_IRQHandler+0x200>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00a      	beq.n	8007134 <HAL_DMA_IRQHandler+0x150>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a31      	ldr	r2, [pc, #196]	; (80071e8 <HAL_DMA_IRQHandler+0x204>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d102      	bne.n	800712e <HAL_DMA_IRQHandler+0x14a>
 8007128:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800712c:	e00e      	b.n	800714c <HAL_DMA_IRQHandler+0x168>
 800712e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007132:	e00b      	b.n	800714c <HAL_DMA_IRQHandler+0x168>
 8007134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007138:	e008      	b.n	800714c <HAL_DMA_IRQHandler+0x168>
 800713a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800713e:	e005      	b.n	800714c <HAL_DMA_IRQHandler+0x168>
 8007140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007144:	e002      	b.n	800714c <HAL_DMA_IRQHandler+0x168>
 8007146:	2320      	movs	r3, #32
 8007148:	e000      	b.n	800714c <HAL_DMA_IRQHandler+0x168>
 800714a:	2302      	movs	r3, #2
 800714c:	4a27      	ldr	r2, [pc, #156]	; (80071ec <HAL_DMA_IRQHandler+0x208>)
 800714e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	2b00      	cmp	r3, #0
 800715e:	d034      	beq.n	80071ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007168:	e02f      	b.n	80071ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	2208      	movs	r2, #8
 8007170:	409a      	lsls	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4013      	ands	r3, r2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d028      	beq.n	80071cc <HAL_DMA_IRQHandler+0x1e8>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d023      	beq.n	80071cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 020e 	bic.w	r2, r2, #14
 8007192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719c:	2101      	movs	r1, #1
 800719e:	fa01 f202 	lsl.w	r2, r1, r2
 80071a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d004      	beq.n	80071cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
    }
  }
  return;
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
}
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40020008 	.word	0x40020008
 80071d8:	4002001c 	.word	0x4002001c
 80071dc:	40020030 	.word	0x40020030
 80071e0:	40020044 	.word	0x40020044
 80071e4:	40020058 	.word	0x40020058
 80071e8:	4002006c 	.word	0x4002006c
 80071ec:	40020000 	.word	0x40020000

080071f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b08b      	sub	sp, #44	; 0x2c
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80071fa:	2300      	movs	r3, #0
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80071fe:	2300      	movs	r3, #0
 8007200:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007202:	e169      	b.n	80074d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007204:	2201      	movs	r2, #1
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	4013      	ands	r3, r2
 8007216:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	429a      	cmp	r2, r3
 800721e:	f040 8158 	bne.w	80074d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	4a9a      	ldr	r2, [pc, #616]	; (8007490 <HAL_GPIO_Init+0x2a0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d05e      	beq.n	80072ea <HAL_GPIO_Init+0xfa>
 800722c:	4a98      	ldr	r2, [pc, #608]	; (8007490 <HAL_GPIO_Init+0x2a0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d875      	bhi.n	800731e <HAL_GPIO_Init+0x12e>
 8007232:	4a98      	ldr	r2, [pc, #608]	; (8007494 <HAL_GPIO_Init+0x2a4>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d058      	beq.n	80072ea <HAL_GPIO_Init+0xfa>
 8007238:	4a96      	ldr	r2, [pc, #600]	; (8007494 <HAL_GPIO_Init+0x2a4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d86f      	bhi.n	800731e <HAL_GPIO_Init+0x12e>
 800723e:	4a96      	ldr	r2, [pc, #600]	; (8007498 <HAL_GPIO_Init+0x2a8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d052      	beq.n	80072ea <HAL_GPIO_Init+0xfa>
 8007244:	4a94      	ldr	r2, [pc, #592]	; (8007498 <HAL_GPIO_Init+0x2a8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d869      	bhi.n	800731e <HAL_GPIO_Init+0x12e>
 800724a:	4a94      	ldr	r2, [pc, #592]	; (800749c <HAL_GPIO_Init+0x2ac>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d04c      	beq.n	80072ea <HAL_GPIO_Init+0xfa>
 8007250:	4a92      	ldr	r2, [pc, #584]	; (800749c <HAL_GPIO_Init+0x2ac>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d863      	bhi.n	800731e <HAL_GPIO_Init+0x12e>
 8007256:	4a92      	ldr	r2, [pc, #584]	; (80074a0 <HAL_GPIO_Init+0x2b0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d046      	beq.n	80072ea <HAL_GPIO_Init+0xfa>
 800725c:	4a90      	ldr	r2, [pc, #576]	; (80074a0 <HAL_GPIO_Init+0x2b0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d85d      	bhi.n	800731e <HAL_GPIO_Init+0x12e>
 8007262:	2b12      	cmp	r3, #18
 8007264:	d82a      	bhi.n	80072bc <HAL_GPIO_Init+0xcc>
 8007266:	2b12      	cmp	r3, #18
 8007268:	d859      	bhi.n	800731e <HAL_GPIO_Init+0x12e>
 800726a:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <HAL_GPIO_Init+0x80>)
 800726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007270:	080072eb 	.word	0x080072eb
 8007274:	080072c5 	.word	0x080072c5
 8007278:	080072d7 	.word	0x080072d7
 800727c:	08007319 	.word	0x08007319
 8007280:	0800731f 	.word	0x0800731f
 8007284:	0800731f 	.word	0x0800731f
 8007288:	0800731f 	.word	0x0800731f
 800728c:	0800731f 	.word	0x0800731f
 8007290:	0800731f 	.word	0x0800731f
 8007294:	0800731f 	.word	0x0800731f
 8007298:	0800731f 	.word	0x0800731f
 800729c:	0800731f 	.word	0x0800731f
 80072a0:	0800731f 	.word	0x0800731f
 80072a4:	0800731f 	.word	0x0800731f
 80072a8:	0800731f 	.word	0x0800731f
 80072ac:	0800731f 	.word	0x0800731f
 80072b0:	0800731f 	.word	0x0800731f
 80072b4:	080072cd 	.word	0x080072cd
 80072b8:	080072e1 	.word	0x080072e1
 80072bc:	4a79      	ldr	r2, [pc, #484]	; (80074a4 <HAL_GPIO_Init+0x2b4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80072c2:	e02c      	b.n	800731e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	623b      	str	r3, [r7, #32]
          break;
 80072ca:	e029      	b.n	8007320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	3304      	adds	r3, #4
 80072d2:	623b      	str	r3, [r7, #32]
          break;
 80072d4:	e024      	b.n	8007320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	3308      	adds	r3, #8
 80072dc:	623b      	str	r3, [r7, #32]
          break;
 80072de:	e01f      	b.n	8007320 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	330c      	adds	r3, #12
 80072e6:	623b      	str	r3, [r7, #32]
          break;
 80072e8:	e01a      	b.n	8007320 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80072f2:	2304      	movs	r3, #4
 80072f4:	623b      	str	r3, [r7, #32]
          break;
 80072f6:	e013      	b.n	8007320 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d105      	bne.n	800730c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007300:	2308      	movs	r3, #8
 8007302:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	611a      	str	r2, [r3, #16]
          break;
 800730a:	e009      	b.n	8007320 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800730c:	2308      	movs	r3, #8
 800730e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	615a      	str	r2, [r3, #20]
          break;
 8007316:	e003      	b.n	8007320 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007318:	2300      	movs	r3, #0
 800731a:	623b      	str	r3, [r7, #32]
          break;
 800731c:	e000      	b.n	8007320 <HAL_GPIO_Init+0x130>
          break;
 800731e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2bff      	cmp	r3, #255	; 0xff
 8007324:	d801      	bhi.n	800732a <HAL_GPIO_Init+0x13a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	e001      	b.n	800732e <HAL_GPIO_Init+0x13e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3304      	adds	r3, #4
 800732e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	2bff      	cmp	r3, #255	; 0xff
 8007334:	d802      	bhi.n	800733c <HAL_GPIO_Init+0x14c>
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	e002      	b.n	8007342 <HAL_GPIO_Init+0x152>
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	3b08      	subs	r3, #8
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	210f      	movs	r1, #15
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	fa01 f303 	lsl.w	r3, r1, r3
 8007350:	43db      	mvns	r3, r3
 8007352:	401a      	ands	r2, r3
 8007354:	6a39      	ldr	r1, [r7, #32]
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	fa01 f303 	lsl.w	r3, r1, r3
 800735c:	431a      	orrs	r2, r3
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 80b1 	beq.w	80074d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007370:	4b4d      	ldr	r3, [pc, #308]	; (80074a8 <HAL_GPIO_Init+0x2b8>)
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	4a4c      	ldr	r2, [pc, #304]	; (80074a8 <HAL_GPIO_Init+0x2b8>)
 8007376:	f043 0301 	orr.w	r3, r3, #1
 800737a:	6193      	str	r3, [r2, #24]
 800737c:	4b4a      	ldr	r3, [pc, #296]	; (80074a8 <HAL_GPIO_Init+0x2b8>)
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	60bb      	str	r3, [r7, #8]
 8007386:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007388:	4a48      	ldr	r2, [pc, #288]	; (80074ac <HAL_GPIO_Init+0x2bc>)
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	089b      	lsrs	r3, r3, #2
 800738e:	3302      	adds	r3, #2
 8007390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007394:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	f003 0303 	and.w	r3, r3, #3
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	220f      	movs	r2, #15
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	43db      	mvns	r3, r3
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4013      	ands	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a40      	ldr	r2, [pc, #256]	; (80074b0 <HAL_GPIO_Init+0x2c0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d013      	beq.n	80073dc <HAL_GPIO_Init+0x1ec>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a3f      	ldr	r2, [pc, #252]	; (80074b4 <HAL_GPIO_Init+0x2c4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00d      	beq.n	80073d8 <HAL_GPIO_Init+0x1e8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a3e      	ldr	r2, [pc, #248]	; (80074b8 <HAL_GPIO_Init+0x2c8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d007      	beq.n	80073d4 <HAL_GPIO_Init+0x1e4>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a3d      	ldr	r2, [pc, #244]	; (80074bc <HAL_GPIO_Init+0x2cc>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d101      	bne.n	80073d0 <HAL_GPIO_Init+0x1e0>
 80073cc:	2303      	movs	r3, #3
 80073ce:	e006      	b.n	80073de <HAL_GPIO_Init+0x1ee>
 80073d0:	2304      	movs	r3, #4
 80073d2:	e004      	b.n	80073de <HAL_GPIO_Init+0x1ee>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e002      	b.n	80073de <HAL_GPIO_Init+0x1ee>
 80073d8:	2301      	movs	r3, #1
 80073da:	e000      	b.n	80073de <HAL_GPIO_Init+0x1ee>
 80073dc:	2300      	movs	r3, #0
 80073de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e0:	f002 0203 	and.w	r2, r2, #3
 80073e4:	0092      	lsls	r2, r2, #2
 80073e6:	4093      	lsls	r3, r2
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80073ee:	492f      	ldr	r1, [pc, #188]	; (80074ac <HAL_GPIO_Init+0x2bc>)
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	089b      	lsrs	r3, r3, #2
 80073f4:	3302      	adds	r3, #2
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d006      	beq.n	8007416 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007408:	4b2d      	ldr	r3, [pc, #180]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	492c      	ldr	r1, [pc, #176]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	4313      	orrs	r3, r2
 8007412:	608b      	str	r3, [r1, #8]
 8007414:	e006      	b.n	8007424 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007416:	4b2a      	ldr	r3, [pc, #168]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	43db      	mvns	r3, r3
 800741e:	4928      	ldr	r1, [pc, #160]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 8007420:	4013      	ands	r3, r2
 8007422:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d006      	beq.n	800743e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007430:	4b23      	ldr	r3, [pc, #140]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	4922      	ldr	r1, [pc, #136]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	4313      	orrs	r3, r2
 800743a:	60cb      	str	r3, [r1, #12]
 800743c:	e006      	b.n	800744c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800743e:	4b20      	ldr	r3, [pc, #128]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	43db      	mvns	r3, r3
 8007446:	491e      	ldr	r1, [pc, #120]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 8007448:	4013      	ands	r3, r2
 800744a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d006      	beq.n	8007466 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007458:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	4918      	ldr	r1, [pc, #96]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	4313      	orrs	r3, r2
 8007462:	604b      	str	r3, [r1, #4]
 8007464:	e006      	b.n	8007474 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007466:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	43db      	mvns	r3, r3
 800746e:	4914      	ldr	r1, [pc, #80]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 8007470:	4013      	ands	r3, r2
 8007472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d021      	beq.n	80074c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	490e      	ldr	r1, [pc, #56]	; (80074c0 <HAL_GPIO_Init+0x2d0>)
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	4313      	orrs	r3, r2
 800748a:	600b      	str	r3, [r1, #0]
 800748c:	e021      	b.n	80074d2 <HAL_GPIO_Init+0x2e2>
 800748e:	bf00      	nop
 8007490:	10320000 	.word	0x10320000
 8007494:	10310000 	.word	0x10310000
 8007498:	10220000 	.word	0x10220000
 800749c:	10210000 	.word	0x10210000
 80074a0:	10120000 	.word	0x10120000
 80074a4:	10110000 	.word	0x10110000
 80074a8:	40021000 	.word	0x40021000
 80074ac:	40010000 	.word	0x40010000
 80074b0:	40010800 	.word	0x40010800
 80074b4:	40010c00 	.word	0x40010c00
 80074b8:	40011000 	.word	0x40011000
 80074bc:	40011400 	.word	0x40011400
 80074c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80074c4:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <HAL_GPIO_Init+0x304>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	43db      	mvns	r3, r3
 80074cc:	4909      	ldr	r1, [pc, #36]	; (80074f4 <HAL_GPIO_Init+0x304>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	3301      	adds	r3, #1
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	fa22 f303 	lsr.w	r3, r2, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f47f ae8e 	bne.w	8007204 <HAL_GPIO_Init+0x14>
  }
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	372c      	adds	r7, #44	; 0x2c
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr
 80074f4:	40010400 	.word	0x40010400

080074f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	807b      	strh	r3, [r7, #2]
 8007504:	4613      	mov	r3, r2
 8007506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007508:	787b      	ldrb	r3, [r7, #1]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800750e:	887a      	ldrh	r2, [r7, #2]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007514:	e003      	b.n	800751e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007516:	887b      	ldrh	r3, [r7, #2]
 8007518:	041a      	lsls	r2, r3, #16
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	611a      	str	r2, [r3, #16]
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr

08007528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e26c      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 8087 	beq.w	8007656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007548:	4b92      	ldr	r3, [pc, #584]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f003 030c 	and.w	r3, r3, #12
 8007550:	2b04      	cmp	r3, #4
 8007552:	d00c      	beq.n	800756e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007554:	4b8f      	ldr	r3, [pc, #572]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f003 030c 	and.w	r3, r3, #12
 800755c:	2b08      	cmp	r3, #8
 800755e:	d112      	bne.n	8007586 <HAL_RCC_OscConfig+0x5e>
 8007560:	4b8c      	ldr	r3, [pc, #560]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756c:	d10b      	bne.n	8007586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800756e:	4b89      	ldr	r3, [pc, #548]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d06c      	beq.n	8007654 <HAL_RCC_OscConfig+0x12c>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d168      	bne.n	8007654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e246      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800758e:	d106      	bne.n	800759e <HAL_RCC_OscConfig+0x76>
 8007590:	4b80      	ldr	r3, [pc, #512]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a7f      	ldr	r2, [pc, #508]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	e02e      	b.n	80075fc <HAL_RCC_OscConfig+0xd4>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10c      	bne.n	80075c0 <HAL_RCC_OscConfig+0x98>
 80075a6:	4b7b      	ldr	r3, [pc, #492]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a7a      	ldr	r2, [pc, #488]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	4b78      	ldr	r3, [pc, #480]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a77      	ldr	r2, [pc, #476]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	e01d      	b.n	80075fc <HAL_RCC_OscConfig+0xd4>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075c8:	d10c      	bne.n	80075e4 <HAL_RCC_OscConfig+0xbc>
 80075ca:	4b72      	ldr	r3, [pc, #456]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a71      	ldr	r2, [pc, #452]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	4b6f      	ldr	r3, [pc, #444]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a6e      	ldr	r2, [pc, #440]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e00b      	b.n	80075fc <HAL_RCC_OscConfig+0xd4>
 80075e4:	4b6b      	ldr	r3, [pc, #428]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a6a      	ldr	r2, [pc, #424]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	4b68      	ldr	r3, [pc, #416]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a67      	ldr	r2, [pc, #412]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80075f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d013      	beq.n	800762c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007604:	f7ff faa4 	bl	8006b50 <HAL_GetTick>
 8007608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800760a:	e008      	b.n	800761e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800760c:	f7ff faa0 	bl	8006b50 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b64      	cmp	r3, #100	; 0x64
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e1fa      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800761e:	4b5d      	ldr	r3, [pc, #372]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0f0      	beq.n	800760c <HAL_RCC_OscConfig+0xe4>
 800762a:	e014      	b.n	8007656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800762c:	f7ff fa90 	bl	8006b50 <HAL_GetTick>
 8007630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007632:	e008      	b.n	8007646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007634:	f7ff fa8c 	bl	8006b50 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b64      	cmp	r3, #100	; 0x64
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e1e6      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007646:	4b53      	ldr	r3, [pc, #332]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1f0      	bne.n	8007634 <HAL_RCC_OscConfig+0x10c>
 8007652:	e000      	b.n	8007656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d063      	beq.n	800772a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007662:	4b4c      	ldr	r3, [pc, #304]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f003 030c 	and.w	r3, r3, #12
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800766e:	4b49      	ldr	r3, [pc, #292]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f003 030c 	and.w	r3, r3, #12
 8007676:	2b08      	cmp	r3, #8
 8007678:	d11c      	bne.n	80076b4 <HAL_RCC_OscConfig+0x18c>
 800767a:	4b46      	ldr	r3, [pc, #280]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d116      	bne.n	80076b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007686:	4b43      	ldr	r3, [pc, #268]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <HAL_RCC_OscConfig+0x176>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d001      	beq.n	800769e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e1ba      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800769e:	4b3d      	ldr	r3, [pc, #244]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	4939      	ldr	r1, [pc, #228]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076b2:	e03a      	b.n	800772a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d020      	beq.n	80076fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076bc:	4b36      	ldr	r3, [pc, #216]	; (8007798 <HAL_RCC_OscConfig+0x270>)
 80076be:	2201      	movs	r2, #1
 80076c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c2:	f7ff fa45 	bl	8006b50 <HAL_GetTick>
 80076c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076c8:	e008      	b.n	80076dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076ca:	f7ff fa41 	bl	8006b50 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d901      	bls.n	80076dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e19b      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076dc:	4b2d      	ldr	r3, [pc, #180]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0f0      	beq.n	80076ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076e8:	4b2a      	ldr	r3, [pc, #168]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	4927      	ldr	r1, [pc, #156]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	600b      	str	r3, [r1, #0]
 80076fc:	e015      	b.n	800772a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076fe:	4b26      	ldr	r3, [pc, #152]	; (8007798 <HAL_RCC_OscConfig+0x270>)
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007704:	f7ff fa24 	bl	8006b50 <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800770c:	f7ff fa20 	bl	8006b50 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e17a      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800771e:	4b1d      	ldr	r3, [pc, #116]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f0      	bne.n	800770c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d03a      	beq.n	80077ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d019      	beq.n	8007772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800773e:	4b17      	ldr	r3, [pc, #92]	; (800779c <HAL_RCC_OscConfig+0x274>)
 8007740:	2201      	movs	r2, #1
 8007742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007744:	f7ff fa04 	bl	8006b50 <HAL_GetTick>
 8007748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800774c:	f7ff fa00 	bl	8006b50 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e15a      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800775e:	4b0d      	ldr	r3, [pc, #52]	; (8007794 <HAL_RCC_OscConfig+0x26c>)
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0f0      	beq.n	800774c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800776a:	2001      	movs	r0, #1
 800776c:	f000 facc 	bl	8007d08 <RCC_Delay>
 8007770:	e01c      	b.n	80077ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007772:	4b0a      	ldr	r3, [pc, #40]	; (800779c <HAL_RCC_OscConfig+0x274>)
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007778:	f7ff f9ea 	bl	8006b50 <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800777e:	e00f      	b.n	80077a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007780:	f7ff f9e6 	bl	8006b50 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d908      	bls.n	80077a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e140      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
 8007792:	bf00      	nop
 8007794:	40021000 	.word	0x40021000
 8007798:	42420000 	.word	0x42420000
 800779c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077a0:	4b9e      	ldr	r3, [pc, #632]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e9      	bne.n	8007780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80a6 	beq.w	8007906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077be:	4b97      	ldr	r3, [pc, #604]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10d      	bne.n	80077e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ca:	4b94      	ldr	r3, [pc, #592]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	4a93      	ldr	r2, [pc, #588]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80077d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d4:	61d3      	str	r3, [r2, #28]
 80077d6:	4b91      	ldr	r3, [pc, #580]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077de:	60bb      	str	r3, [r7, #8]
 80077e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077e2:	2301      	movs	r3, #1
 80077e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077e6:	4b8e      	ldr	r3, [pc, #568]	; (8007a20 <HAL_RCC_OscConfig+0x4f8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d118      	bne.n	8007824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077f2:	4b8b      	ldr	r3, [pc, #556]	; (8007a20 <HAL_RCC_OscConfig+0x4f8>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a8a      	ldr	r2, [pc, #552]	; (8007a20 <HAL_RCC_OscConfig+0x4f8>)
 80077f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077fe:	f7ff f9a7 	bl	8006b50 <HAL_GetTick>
 8007802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007804:	e008      	b.n	8007818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007806:	f7ff f9a3 	bl	8006b50 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b64      	cmp	r3, #100	; 0x64
 8007812:	d901      	bls.n	8007818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e0fd      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007818:	4b81      	ldr	r3, [pc, #516]	; (8007a20 <HAL_RCC_OscConfig+0x4f8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0f0      	beq.n	8007806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d106      	bne.n	800783a <HAL_RCC_OscConfig+0x312>
 800782c:	4b7b      	ldr	r3, [pc, #492]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	4a7a      	ldr	r2, [pc, #488]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007832:	f043 0301 	orr.w	r3, r3, #1
 8007836:	6213      	str	r3, [r2, #32]
 8007838:	e02d      	b.n	8007896 <HAL_RCC_OscConfig+0x36e>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10c      	bne.n	800785c <HAL_RCC_OscConfig+0x334>
 8007842:	4b76      	ldr	r3, [pc, #472]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	4a75      	ldr	r2, [pc, #468]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007848:	f023 0301 	bic.w	r3, r3, #1
 800784c:	6213      	str	r3, [r2, #32]
 800784e:	4b73      	ldr	r3, [pc, #460]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	4a72      	ldr	r2, [pc, #456]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007854:	f023 0304 	bic.w	r3, r3, #4
 8007858:	6213      	str	r3, [r2, #32]
 800785a:	e01c      	b.n	8007896 <HAL_RCC_OscConfig+0x36e>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	2b05      	cmp	r3, #5
 8007862:	d10c      	bne.n	800787e <HAL_RCC_OscConfig+0x356>
 8007864:	4b6d      	ldr	r3, [pc, #436]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	4a6c      	ldr	r2, [pc, #432]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 800786a:	f043 0304 	orr.w	r3, r3, #4
 800786e:	6213      	str	r3, [r2, #32]
 8007870:	4b6a      	ldr	r3, [pc, #424]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	4a69      	ldr	r2, [pc, #420]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	6213      	str	r3, [r2, #32]
 800787c:	e00b      	b.n	8007896 <HAL_RCC_OscConfig+0x36e>
 800787e:	4b67      	ldr	r3, [pc, #412]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	4a66      	ldr	r2, [pc, #408]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	6213      	str	r3, [r2, #32]
 800788a:	4b64      	ldr	r3, [pc, #400]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	4a63      	ldr	r2, [pc, #396]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007890:	f023 0304 	bic.w	r3, r3, #4
 8007894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d015      	beq.n	80078ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800789e:	f7ff f957 	bl	8006b50 <HAL_GetTick>
 80078a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a4:	e00a      	b.n	80078bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a6:	f7ff f953 	bl	8006b50 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d901      	bls.n	80078bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e0ab      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078bc:	4b57      	ldr	r3, [pc, #348]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d0ee      	beq.n	80078a6 <HAL_RCC_OscConfig+0x37e>
 80078c8:	e014      	b.n	80078f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078ca:	f7ff f941 	bl	8006b50 <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078d0:	e00a      	b.n	80078e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078d2:	f7ff f93d 	bl	8006b50 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d901      	bls.n	80078e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e095      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e8:	4b4c      	ldr	r3, [pc, #304]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1ee      	bne.n	80078d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d105      	bne.n	8007906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078fa:	4b48      	ldr	r3, [pc, #288]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	4a47      	ldr	r2, [pc, #284]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8081 	beq.w	8007a12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007910:	4b42      	ldr	r3, [pc, #264]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f003 030c 	and.w	r3, r3, #12
 8007918:	2b08      	cmp	r3, #8
 800791a:	d061      	beq.n	80079e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d146      	bne.n	80079b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007924:	4b3f      	ldr	r3, [pc, #252]	; (8007a24 <HAL_RCC_OscConfig+0x4fc>)
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800792a:	f7ff f911 	bl	8006b50 <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007930:	e008      	b.n	8007944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007932:	f7ff f90d 	bl	8006b50 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e067      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007944:	4b35      	ldr	r3, [pc, #212]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1f0      	bne.n	8007932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007958:	d108      	bne.n	800796c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800795a:	4b30      	ldr	r3, [pc, #192]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	492d      	ldr	r1, [pc, #180]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007968:	4313      	orrs	r3, r2
 800796a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800796c:	4b2b      	ldr	r3, [pc, #172]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a19      	ldr	r1, [r3, #32]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	430b      	orrs	r3, r1
 800797e:	4927      	ldr	r1, [pc, #156]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 8007980:	4313      	orrs	r3, r2
 8007982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007984:	4b27      	ldr	r3, [pc, #156]	; (8007a24 <HAL_RCC_OscConfig+0x4fc>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798a:	f7ff f8e1 	bl	8006b50 <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007992:	f7ff f8dd 	bl	8006b50 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e037      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079a4:	4b1d      	ldr	r3, [pc, #116]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d0f0      	beq.n	8007992 <HAL_RCC_OscConfig+0x46a>
 80079b0:	e02f      	b.n	8007a12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079b2:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <HAL_RCC_OscConfig+0x4fc>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079b8:	f7ff f8ca 	bl	8006b50 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079be:	e008      	b.n	80079d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079c0:	f7ff f8c6 	bl	8006b50 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e020      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079d2:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1f0      	bne.n	80079c0 <HAL_RCC_OscConfig+0x498>
 80079de:	e018      	b.n	8007a12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e013      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80079ec:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <HAL_RCC_OscConfig+0x4f4>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d106      	bne.n	8007a0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d001      	beq.n	8007a12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40021000 	.word	0x40021000
 8007a20:	40007000 	.word	0x40007000
 8007a24:	42420060 	.word	0x42420060

08007a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e0d0      	b.n	8007bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a3c:	4b6a      	ldr	r3, [pc, #424]	; (8007be8 <HAL_RCC_ClockConfig+0x1c0>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d910      	bls.n	8007a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a4a:	4b67      	ldr	r3, [pc, #412]	; (8007be8 <HAL_RCC_ClockConfig+0x1c0>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f023 0207 	bic.w	r2, r3, #7
 8007a52:	4965      	ldr	r1, [pc, #404]	; (8007be8 <HAL_RCC_ClockConfig+0x1c0>)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a5a:	4b63      	ldr	r3, [pc, #396]	; (8007be8 <HAL_RCC_ClockConfig+0x1c0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d001      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0b8      	b.n	8007bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d020      	beq.n	8007aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a84:	4b59      	ldr	r3, [pc, #356]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	4a58      	ldr	r2, [pc, #352]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0308 	and.w	r3, r3, #8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a9c:	4b53      	ldr	r3, [pc, #332]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	4a52      	ldr	r2, [pc, #328]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007aa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007aa8:	4b50      	ldr	r3, [pc, #320]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	494d      	ldr	r1, [pc, #308]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d040      	beq.n	8007b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d107      	bne.n	8007ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ace:	4b47      	ldr	r3, [pc, #284]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d115      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e07f      	b.n	8007bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d107      	bne.n	8007af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ae6:	4b41      	ldr	r3, [pc, #260]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e073      	b.n	8007bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af6:	4b3d      	ldr	r3, [pc, #244]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e06b      	b.n	8007bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b06:	4b39      	ldr	r3, [pc, #228]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f023 0203 	bic.w	r2, r3, #3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	4936      	ldr	r1, [pc, #216]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b18:	f7ff f81a 	bl	8006b50 <HAL_GetTick>
 8007b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b1e:	e00a      	b.n	8007b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b20:	f7ff f816 	bl	8006b50 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e053      	b.n	8007bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b36:	4b2d      	ldr	r3, [pc, #180]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f003 020c 	and.w	r2, r3, #12
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d1eb      	bne.n	8007b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b48:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d210      	bcs.n	8007b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b56:	4b24      	ldr	r3, [pc, #144]	; (8007be8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f023 0207 	bic.w	r2, r3, #7
 8007b5e:	4922      	ldr	r1, [pc, #136]	; (8007be8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b66:	4b20      	ldr	r3, [pc, #128]	; (8007be8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d001      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e032      	b.n	8007bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b84:	4b19      	ldr	r3, [pc, #100]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	4916      	ldr	r1, [pc, #88]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	490e      	ldr	r1, [pc, #56]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007bb6:	f000 f821 	bl	8007bfc <HAL_RCC_GetSysClockFreq>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	091b      	lsrs	r3, r3, #4
 8007bc2:	f003 030f 	and.w	r3, r3, #15
 8007bc6:	490a      	ldr	r1, [pc, #40]	; (8007bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8007bc8:	5ccb      	ldrb	r3, [r1, r3]
 8007bca:	fa22 f303 	lsr.w	r3, r2, r3
 8007bce:	4a09      	ldr	r2, [pc, #36]	; (8007bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8007bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007bd2:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe ff78 	bl	8006acc <HAL_InitTick>

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	40022000 	.word	0x40022000
 8007bec:	40021000 	.word	0x40021000
 8007bf0:	0800ad70 	.word	0x0800ad70
 8007bf4:	20000000 	.word	0x20000000
 8007bf8:	20000004 	.word	0x20000004

08007bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	2300      	movs	r3, #0
 8007c08:	60bb      	str	r3, [r7, #8]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007c16:	4b1e      	ldr	r3, [pc, #120]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f003 030c 	and.w	r3, r3, #12
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d002      	beq.n	8007c2c <HAL_RCC_GetSysClockFreq+0x30>
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d003      	beq.n	8007c32 <HAL_RCC_GetSysClockFreq+0x36>
 8007c2a:	e027      	b.n	8007c7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007c2c:	4b19      	ldr	r3, [pc, #100]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8007c2e:	613b      	str	r3, [r7, #16]
      break;
 8007c30:	e027      	b.n	8007c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	0c9b      	lsrs	r3, r3, #18
 8007c36:	f003 030f 	and.w	r3, r3, #15
 8007c3a:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007c3c:	5cd3      	ldrb	r3, [r2, r3]
 8007c3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d010      	beq.n	8007c6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007c4a:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x94>)
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	0c5b      	lsrs	r3, r3, #17
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	4a11      	ldr	r2, [pc, #68]	; (8007c9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007c56:	5cd3      	ldrb	r3, [r2, r3]
 8007c58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a0d      	ldr	r2, [pc, #52]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8007c5e:	fb02 f203 	mul.w	r2, r2, r3
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	e004      	b.n	8007c76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ca0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	613b      	str	r3, [r7, #16]
      break;
 8007c7a:	e002      	b.n	8007c82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c7c:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x98>)
 8007c7e:	613b      	str	r3, [r7, #16]
      break;
 8007c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c82:	693b      	ldr	r3, [r7, #16]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	40021000 	.word	0x40021000
 8007c94:	007a1200 	.word	0x007a1200
 8007c98:	0800ad88 	.word	0x0800ad88
 8007c9c:	0800ad98 	.word	0x0800ad98
 8007ca0:	003d0900 	.word	0x003d0900

08007ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ca8:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8007caa:	681b      	ldr	r3, [r3, #0]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr
 8007cb4:	20000000 	.word	0x20000000

08007cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007cbc:	f7ff fff2 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	0a1b      	lsrs	r3, r3, #8
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	4903      	ldr	r1, [pc, #12]	; (8007cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cce:	5ccb      	ldrb	r3, [r1, r3]
 8007cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40021000 	.word	0x40021000
 8007cdc:	0800ad80 	.word	0x0800ad80

08007ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ce4:	f7ff ffde 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	0adb      	lsrs	r3, r3, #11
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	4903      	ldr	r1, [pc, #12]	; (8007d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cf6:	5ccb      	ldrb	r3, [r1, r3]
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40021000 	.word	0x40021000
 8007d04:	0800ad80 	.word	0x0800ad80

08007d08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007d10:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <RCC_Delay+0x34>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <RCC_Delay+0x38>)
 8007d16:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1a:	0a5b      	lsrs	r3, r3, #9
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	fb02 f303 	mul.w	r3, r2, r3
 8007d22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007d24:	bf00      	nop
  }
  while (Delay --);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	1e5a      	subs	r2, r3, #1
 8007d2a:	60fa      	str	r2, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1f9      	bne.n	8007d24 <RCC_Delay+0x1c>
}
 8007d30:	bf00      	nop
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr
 8007d3c:	20000000 	.word	0x20000000
 8007d40:	10624dd3 	.word	0x10624dd3

08007d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e076      	b.n	8007e44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d108      	bne.n	8007d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d66:	d009      	beq.n	8007d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	61da      	str	r2, [r3, #28]
 8007d6e:	e005      	b.n	8007d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7fe fc4a 	bl	8006630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dec:	431a      	orrs	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e00:	ea42 0103 	orr.w	r1, r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	0c1a      	lsrs	r2, r3, #16
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f002 0204 	and.w	r2, r2, #4
 8007e22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69da      	ldr	r2, [r3, #28]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	099b      	lsrs	r3, r3, #6
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10f      	bne.n	8007e90 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	099b      	lsrs	r3, r3, #6
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d004      	beq.n	8007e90 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
    return;
 8007e8e:	e0be      	b.n	800800e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	085b      	lsrs	r3, r3, #1
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <HAL_SPI_IRQHandler+0x66>
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	09db      	lsrs	r3, r3, #7
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d004      	beq.n	8007eb2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
    return;
 8007eb0:	e0ad      	b.n	800800e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <HAL_SPI_IRQHandler+0x80>
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	099b      	lsrs	r3, r3, #6
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 80a1 	beq.w	800800e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	095b      	lsrs	r3, r3, #5
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 809a 	beq.w	800800e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	099b      	lsrs	r3, r3, #6
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d023      	beq.n	8007f2e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d011      	beq.n	8007f16 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef6:	f043 0204 	orr.w	r2, r3, #4
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	617b      	str	r3, [r7, #20]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	e00b      	b.n	8007f2e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f16:	2300      	movs	r3, #0
 8007f18:	613b      	str	r3, [r7, #16]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	613b      	str	r3, [r7, #16]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	613b      	str	r3, [r7, #16]
 8007f2a:	693b      	ldr	r3, [r7, #16]
        return;
 8007f2c:	e06f      	b.n	800800e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	095b      	lsrs	r3, r3, #5
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d014      	beq.n	8007f64 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3e:	f043 0201 	orr.w	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	60fb      	str	r3, [r7, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d04f      	beq.n	800800c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f7a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d104      	bne.n	8007f98 <HAL_SPI_IRQHandler+0x14c>
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d034      	beq.n	8008002 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0203 	bic.w	r2, r2, #3
 8007fa6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d011      	beq.n	8007fd4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb4:	4a17      	ldr	r2, [pc, #92]	; (8008014 <HAL_SPI_IRQHandler+0x1c8>)
 8007fb6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe ff99 	bl	8006ef4 <HAL_DMA_Abort_IT>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d016      	beq.n	800800a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe0:	4a0c      	ldr	r2, [pc, #48]	; (8008014 <HAL_SPI_IRQHandler+0x1c8>)
 8007fe2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe ff83 	bl	8006ef4 <HAL_DMA_Abort_IT>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008000:	e003      	b.n	800800a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f808 	bl	8008018 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008008:	e000      	b.n	800800c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800800a:	bf00      	nop
    return;
 800800c:	bf00      	nop
  }
}
 800800e:	3720      	adds	r7, #32
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	0800802b 	.word	0x0800802b

08008018 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr

0800802a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b084      	sub	sp, #16
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff ffe7 	bl	8008018 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e042      	b.n	80080ea <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d106      	bne.n	800807e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7fe fb83 	bl	8006784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2224      	movs	r2, #36	; 0x24
 8008082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008094:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fd70 	bl	8008b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695a      	ldr	r2, [r3, #20]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b08a      	sub	sp, #40	; 0x28
 80080f6:	af02      	add	r7, sp, #8
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	603b      	str	r3, [r7, #0]
 80080fe:	4613      	mov	r3, r2
 8008100:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b20      	cmp	r3, #32
 8008110:	d16d      	bne.n	80081ee <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d002      	beq.n	800811e <HAL_UART_Transmit+0x2c>
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e066      	b.n	80081f0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2221      	movs	r2, #33	; 0x21
 800812c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008130:	f7fe fd0e 	bl	8006b50 <HAL_GetTick>
 8008134:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	88fa      	ldrh	r2, [r7, #6]
 800813a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	88fa      	ldrh	r2, [r7, #6]
 8008140:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814a:	d108      	bne.n	800815e <HAL_UART_Transmit+0x6c>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d104      	bne.n	800815e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008154:	2300      	movs	r3, #0
 8008156:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	61bb      	str	r3, [r7, #24]
 800815c:	e003      	b.n	8008166 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008162:	2300      	movs	r3, #0
 8008164:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008166:	e02a      	b.n	80081be <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2200      	movs	r2, #0
 8008170:	2180      	movs	r1, #128	; 0x80
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 faf8 	bl	8008768 <UART_WaitOnFlagUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e036      	b.n	80081f0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10b      	bne.n	80081a0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	461a      	mov	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008196:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	3302      	adds	r3, #2
 800819c:	61bb      	str	r3, [r7, #24]
 800819e:	e007      	b.n	80081b0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	3301      	adds	r3, #1
 80081ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1cf      	bne.n	8008168 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2140      	movs	r1, #64	; 0x40
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fac8 	bl	8008768 <UART_WaitOnFlagUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e006      	b.n	80081f0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80081ee:	2302      	movs	r3, #2
  }
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3720      	adds	r7, #32
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b0ba      	sub	sp, #232	; 0xe8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800821e:	2300      	movs	r3, #0
 8008220:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008224:	2300      	movs	r3, #0
 8008226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800822a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10f      	bne.n	800825e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800823e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <HAL_UART_IRQHandler+0x66>
 800824a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fbd1 	bl	80089fe <UART_Receive_IT>
      return;
 800825c:	e25b      	b.n	8008716 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800825e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 80de 	beq.w	8008424 <HAL_UART_IRQHandler+0x22c>
 8008268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008278:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80d1 	beq.w	8008424 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <HAL_UART_IRQHandler+0xae>
 800828e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829e:	f043 0201 	orr.w	r2, r3, #1
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <HAL_UART_IRQHandler+0xd2>
 80082b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c2:	f043 0202 	orr.w	r2, r3, #2
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00b      	beq.n	80082ee <HAL_UART_IRQHandler+0xf6>
 80082d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e6:	f043 0204 	orr.w	r2, r3, #4
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f2:	f003 0308 	and.w	r3, r3, #8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d011      	beq.n	800831e <HAL_UART_IRQHandler+0x126>
 80082fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b00      	cmp	r3, #0
 8008304:	d105      	bne.n	8008312 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008316:	f043 0208 	orr.w	r2, r3, #8
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 81f2 	beq.w	800870c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <HAL_UART_IRQHandler+0x14e>
 8008334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fb5c 	bl	80089fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008350:	2b00      	cmp	r3, #0
 8008352:	bf14      	ite	ne
 8008354:	2301      	movne	r3, #1
 8008356:	2300      	moveq	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008362:	f003 0308 	and.w	r3, r3, #8
 8008366:	2b00      	cmp	r3, #0
 8008368:	d103      	bne.n	8008372 <HAL_UART_IRQHandler+0x17a>
 800836a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800836e:	2b00      	cmp	r3, #0
 8008370:	d04f      	beq.n	8008412 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa66 	bl	8008844 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008382:	2b00      	cmp	r3, #0
 8008384:	d041      	beq.n	800840a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3314      	adds	r3, #20
 800838c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008394:	e853 3f00 	ldrex	r3, [r3]
 8008398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800839c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3314      	adds	r3, #20
 80083ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1d9      	bne.n	8008386 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d013      	beq.n	8008402 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083de:	4a7e      	ldr	r2, [pc, #504]	; (80085d8 <HAL_UART_IRQHandler+0x3e0>)
 80083e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fd84 	bl	8006ef4 <HAL_DMA_Abort_IT>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d016      	beq.n	8008420 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008400:	e00e      	b.n	8008420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f99c 	bl	8008740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008408:	e00a      	b.n	8008420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f998 	bl	8008740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008410:	e006      	b.n	8008420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f994 	bl	8008740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800841e:	e175      	b.n	800870c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008420:	bf00      	nop
    return;
 8008422:	e173      	b.n	800870c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	2b01      	cmp	r3, #1
 800842a:	f040 814f 	bne.w	80086cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800842e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008432:	f003 0310 	and.w	r3, r3, #16
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 8148 	beq.w	80086cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800843c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008440:	f003 0310 	and.w	r3, r3, #16
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 8141 	beq.w	80086cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800844a:	2300      	movs	r3, #0
 800844c:	60bb      	str	r3, [r7, #8]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60bb      	str	r3, [r7, #8]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	60bb      	str	r3, [r7, #8]
 800845e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 80b6 	beq.w	80085dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800847c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 8145 	beq.w	8008710 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800848a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800848e:	429a      	cmp	r2, r3
 8008490:	f080 813e 	bcs.w	8008710 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800849a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	f000 8088 	beq.w	80085b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	330c      	adds	r3, #12
 80084d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084d4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1d9      	bne.n	80084a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3314      	adds	r3, #20
 80084fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008506:	f023 0301 	bic.w	r3, r3, #1
 800850a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3314      	adds	r3, #20
 8008514:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008518:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800851c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008520:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008524:	e841 2300 	strex	r3, r2, [r1]
 8008528:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800852a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e1      	bne.n	80084f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3314      	adds	r3, #20
 8008536:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800853a:	e853 3f00 	ldrex	r3, [r3]
 800853e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3314      	adds	r3, #20
 8008550:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008554:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008556:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800855a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e3      	bne.n	8008530 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2220      	movs	r2, #32
 800856c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	330c      	adds	r3, #12
 800857c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008588:	f023 0310 	bic.w	r3, r3, #16
 800858c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	330c      	adds	r3, #12
 8008596:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800859a:	65ba      	str	r2, [r7, #88]	; 0x58
 800859c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085a2:	e841 2300 	strex	r3, r2, [r1]
 80085a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1e3      	bne.n	8008576 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe fc62 	bl	8006e7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f8bf 	bl	8008752 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085d4:	e09c      	b.n	8008710 <HAL_UART_IRQHandler+0x518>
 80085d6:	bf00      	nop
 80085d8:	08008909 	.word	0x08008909
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 808e 	beq.w	8008714 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80085f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 8089 	beq.w	8008714 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	330c      	adds	r3, #12
 8008608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	330c      	adds	r3, #12
 8008622:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008626:	647a      	str	r2, [r7, #68]	; 0x44
 8008628:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800862c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e3      	bne.n	8008602 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3314      	adds	r3, #20
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	623b      	str	r3, [r7, #32]
   return(result);
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	f023 0301 	bic.w	r3, r3, #1
 8008650:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3314      	adds	r3, #20
 800865a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800865e:	633a      	str	r2, [r7, #48]	; 0x30
 8008660:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e3      	bne.n	800863a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2220      	movs	r2, #32
 8008676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	330c      	adds	r3, #12
 8008686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 0310 	bic.w	r3, r3, #16
 8008696:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	330c      	adds	r3, #12
 80086a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80086a4:	61fa      	str	r2, [r7, #28]
 80086a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	69b9      	ldr	r1, [r7, #24]
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	617b      	str	r3, [r7, #20]
   return(result);
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e3      	bne.n	8008680 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2202      	movs	r2, #2
 80086bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f844 	bl	8008752 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086ca:	e023      	b.n	8008714 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d009      	beq.n	80086ec <HAL_UART_IRQHandler+0x4f4>
 80086d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f923 	bl	8008930 <UART_Transmit_IT>
    return;
 80086ea:	e014      	b.n	8008716 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00e      	beq.n	8008716 <HAL_UART_IRQHandler+0x51e>
 80086f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d008      	beq.n	8008716 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f962 	bl	80089ce <UART_EndTransmit_IT>
    return;
 800870a:	e004      	b.n	8008716 <HAL_UART_IRQHandler+0x51e>
    return;
 800870c:	bf00      	nop
 800870e:	e002      	b.n	8008716 <HAL_UART_IRQHandler+0x51e>
      return;
 8008710:	bf00      	nop
 8008712:	e000      	b.n	8008716 <HAL_UART_IRQHandler+0x51e>
      return;
 8008714:	bf00      	nop
  }
}
 8008716:	37e8      	adds	r7, #232	; 0xe8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr

0800872e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr

08008740 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	bc80      	pop	{r7}
 8008750:	4770      	bx	lr

08008752 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	460b      	mov	r3, r1
 800875c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800875e:	bf00      	nop
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr

08008768 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b090      	sub	sp, #64	; 0x40
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	4613      	mov	r3, r2
 8008776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008778:	e050      	b.n	800881c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800877a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008780:	d04c      	beq.n	800881c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <UART_WaitOnFlagUntilTimeout+0x30>
 8008788:	f7fe f9e2 	bl	8006b50 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008794:	429a      	cmp	r2, r3
 8008796:	d241      	bcs.n	800881c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	330c      	adds	r3, #12
 800879e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	330c      	adds	r3, #12
 80087b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087b8:	637a      	str	r2, [r7, #52]	; 0x34
 80087ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e5      	bne.n	8008798 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3314      	adds	r3, #20
 80087d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	613b      	str	r3, [r7, #16]
   return(result);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f023 0301 	bic.w	r3, r3, #1
 80087e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3314      	adds	r3, #20
 80087ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ec:	623a      	str	r2, [r7, #32]
 80087ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	69f9      	ldr	r1, [r7, #28]
 80087f2:	6a3a      	ldr	r2, [r7, #32]
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e5      	bne.n	80087cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e00f      	b.n	800883c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	4013      	ands	r3, r2
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	429a      	cmp	r2, r3
 800882a:	bf0c      	ite	eq
 800882c:	2301      	moveq	r3, #1
 800882e:	2300      	movne	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	429a      	cmp	r2, r3
 8008838:	d09f      	beq.n	800877a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3740      	adds	r7, #64	; 0x40
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008844:	b480      	push	{r7}
 8008846:	b095      	sub	sp, #84	; 0x54
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	330c      	adds	r3, #12
 8008852:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	330c      	adds	r3, #12
 800886a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800886c:	643a      	str	r2, [r7, #64]	; 0x40
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e5      	bne.n	800884c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3314      	adds	r3, #20
 8008886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	f023 0301 	bic.w	r3, r3, #1
 8008896:	64bb      	str	r3, [r7, #72]	; 0x48
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3314      	adds	r3, #20
 800889e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e5      	bne.n	8008880 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d119      	bne.n	80088f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	330c      	adds	r3, #12
 80088c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f023 0310 	bic.w	r3, r3, #16
 80088d2:	647b      	str	r3, [r7, #68]	; 0x44
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088dc:	61ba      	str	r2, [r7, #24]
 80088de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6979      	ldr	r1, [r7, #20]
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	613b      	str	r3, [r7, #16]
   return(result);
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e5      	bne.n	80088bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088fe:	bf00      	nop
 8008900:	3754      	adds	r7, #84	; 0x54
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr

08008908 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff ff0c 	bl	8008740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008928:	bf00      	nop
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b21      	cmp	r3, #33	; 0x21
 8008942:	d13e      	bne.n	80089c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800894c:	d114      	bne.n	8008978 <UART_Transmit_IT+0x48>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d110      	bne.n	8008978 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800896a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	1c9a      	adds	r2, r3, #2
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	621a      	str	r2, [r3, #32]
 8008976:	e008      	b.n	800898a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	1c59      	adds	r1, r3, #1
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6211      	str	r1, [r2, #32]
 8008982:	781a      	ldrb	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800898e:	b29b      	uxth	r3, r3
 8008990:	3b01      	subs	r3, #1
 8008992:	b29b      	uxth	r3, r3
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	4619      	mov	r1, r3
 8008998:	84d1      	strh	r1, [r2, #38]	; 0x26
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10f      	bne.n	80089be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	e000      	b.n	80089c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089c2:	2302      	movs	r3, #2
  }
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr

080089ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff fe94 	bl	800871c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b08c      	sub	sp, #48	; 0x30
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b22      	cmp	r3, #34	; 0x22
 8008a10:	f040 80ae 	bne.w	8008b70 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a1c:	d117      	bne.n	8008a4e <UART_Receive_IT+0x50>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d113      	bne.n	8008a4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	1c9a      	adds	r2, r3, #2
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	629a      	str	r2, [r3, #40]	; 0x28
 8008a4c:	e026      	b.n	8008a9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a60:	d007      	beq.n	8008a72 <UART_Receive_IT+0x74>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <UART_Receive_IT+0x82>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	701a      	strb	r2, [r3, #0]
 8008a7e:	e008      	b.n	8008a92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d15d      	bne.n	8008b6c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0220 	bic.w	r2, r2, #32
 8008abe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68da      	ldr	r2, [r3, #12]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	695a      	ldr	r2, [r3, #20]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f022 0201 	bic.w	r2, r2, #1
 8008ade:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d135      	bne.n	8008b62 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	330c      	adds	r3, #12
 8008b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	e853 3f00 	ldrex	r3, [r3]
 8008b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f023 0310 	bic.w	r3, r3, #16
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b1c:	623a      	str	r2, [r7, #32]
 8008b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	69f9      	ldr	r1, [r7, #28]
 8008b22:	6a3a      	ldr	r2, [r7, #32]
 8008b24:	e841 2300 	strex	r3, r2, [r1]
 8008b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e5      	bne.n	8008afc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0310 	and.w	r3, r3, #16
 8008b3a:	2b10      	cmp	r3, #16
 8008b3c:	d10a      	bne.n	8008b54 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60fb      	str	r3, [r7, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff fdf9 	bl	8008752 <HAL_UARTEx_RxEventCallback>
 8008b60:	e002      	b.n	8008b68 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7ff fde3 	bl	800872e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e002      	b.n	8008b72 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e000      	b.n	8008b72 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008b70:	2302      	movs	r3, #2
  }
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3730      	adds	r7, #48	; 0x30
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689a      	ldr	r2, [r3, #8]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008bb6:	f023 030c 	bic.w	r3, r3, #12
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	68b9      	ldr	r1, [r7, #8]
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699a      	ldr	r2, [r3, #24]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a2c      	ldr	r2, [pc, #176]	; (8008c90 <UART_SetConfig+0x114>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d103      	bne.n	8008bec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008be4:	f7ff f87c 	bl	8007ce0 <HAL_RCC_GetPCLK2Freq>
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	e002      	b.n	8008bf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008bec:	f7ff f864 	bl	8007cb8 <HAL_RCC_GetPCLK1Freq>
 8008bf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009a      	lsls	r2, r3, #2
 8008bfc:	441a      	add	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c08:	4a22      	ldr	r2, [pc, #136]	; (8008c94 <UART_SetConfig+0x118>)
 8008c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0e:	095b      	lsrs	r3, r3, #5
 8008c10:	0119      	lsls	r1, r3, #4
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	4613      	mov	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	009a      	lsls	r2, r3, #2
 8008c1c:	441a      	add	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c28:	4b1a      	ldr	r3, [pc, #104]	; (8008c94 <UART_SetConfig+0x118>)
 8008c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8008c2e:	095b      	lsrs	r3, r3, #5
 8008c30:	2064      	movs	r0, #100	; 0x64
 8008c32:	fb00 f303 	mul.w	r3, r0, r3
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	3332      	adds	r3, #50	; 0x32
 8008c3c:	4a15      	ldr	r2, [pc, #84]	; (8008c94 <UART_SetConfig+0x118>)
 8008c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c42:	095b      	lsrs	r3, r3, #5
 8008c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c48:	4419      	add	r1, r3
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	009a      	lsls	r2, r3, #2
 8008c54:	441a      	add	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c60:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <UART_SetConfig+0x118>)
 8008c62:	fba3 0302 	umull	r0, r3, r3, r2
 8008c66:	095b      	lsrs	r3, r3, #5
 8008c68:	2064      	movs	r0, #100	; 0x64
 8008c6a:	fb00 f303 	mul.w	r3, r0, r3
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	011b      	lsls	r3, r3, #4
 8008c72:	3332      	adds	r3, #50	; 0x32
 8008c74:	4a07      	ldr	r2, [pc, #28]	; (8008c94 <UART_SetConfig+0x118>)
 8008c76:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7a:	095b      	lsrs	r3, r3, #5
 8008c7c:	f003 020f 	and.w	r2, r3, #15
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	440a      	add	r2, r1
 8008c86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008c88:	bf00      	nop
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	40013800 	.word	0x40013800
 8008c94:	51eb851f 	.word	0x51eb851f

08008c98 <__assert_func>:
 8008c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c9a:	4614      	mov	r4, r2
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <__assert_func+0x2c>)
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68d8      	ldr	r0, [r3, #12]
 8008ca6:	b14c      	cbz	r4, 8008cbc <__assert_func+0x24>
 8008ca8:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <__assert_func+0x30>)
 8008caa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cae:	9100      	str	r1, [sp, #0]
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	4906      	ldr	r1, [pc, #24]	; (8008ccc <__assert_func+0x34>)
 8008cb4:	f000 f814 	bl	8008ce0 <fiprintf>
 8008cb8:	f000 fd46 	bl	8009748 <abort>
 8008cbc:	4b04      	ldr	r3, [pc, #16]	; (8008cd0 <__assert_func+0x38>)
 8008cbe:	461c      	mov	r4, r3
 8008cc0:	e7f3      	b.n	8008caa <__assert_func+0x12>
 8008cc2:	bf00      	nop
 8008cc4:	2000000c 	.word	0x2000000c
 8008cc8:	0800ad9a 	.word	0x0800ad9a
 8008ccc:	0800ada7 	.word	0x0800ada7
 8008cd0:	0800add5 	.word	0x0800add5

08008cd4 <__errno>:
 8008cd4:	4b01      	ldr	r3, [pc, #4]	; (8008cdc <__errno+0x8>)
 8008cd6:	6818      	ldr	r0, [r3, #0]
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	2000000c 	.word	0x2000000c

08008ce0 <fiprintf>:
 8008ce0:	b40e      	push	{r1, r2, r3}
 8008ce2:	b503      	push	{r0, r1, lr}
 8008ce4:	4601      	mov	r1, r0
 8008ce6:	ab03      	add	r3, sp, #12
 8008ce8:	4805      	ldr	r0, [pc, #20]	; (8008d00 <fiprintf+0x20>)
 8008cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cee:	6800      	ldr	r0, [r0, #0]
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	f000 f92d 	bl	8008f50 <_vfiprintf_r>
 8008cf6:	b002      	add	sp, #8
 8008cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cfc:	b003      	add	sp, #12
 8008cfe:	4770      	bx	lr
 8008d00:	2000000c 	.word	0x2000000c

08008d04 <__libc_init_array>:
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	2600      	movs	r6, #0
 8008d08:	4d0c      	ldr	r5, [pc, #48]	; (8008d3c <__libc_init_array+0x38>)
 8008d0a:	4c0d      	ldr	r4, [pc, #52]	; (8008d40 <__libc_init_array+0x3c>)
 8008d0c:	1b64      	subs	r4, r4, r5
 8008d0e:	10a4      	asrs	r4, r4, #2
 8008d10:	42a6      	cmp	r6, r4
 8008d12:	d109      	bne.n	8008d28 <__libc_init_array+0x24>
 8008d14:	f001 f9ec 	bl	800a0f0 <_init>
 8008d18:	2600      	movs	r6, #0
 8008d1a:	4d0a      	ldr	r5, [pc, #40]	; (8008d44 <__libc_init_array+0x40>)
 8008d1c:	4c0a      	ldr	r4, [pc, #40]	; (8008d48 <__libc_init_array+0x44>)
 8008d1e:	1b64      	subs	r4, r4, r5
 8008d20:	10a4      	asrs	r4, r4, #2
 8008d22:	42a6      	cmp	r6, r4
 8008d24:	d105      	bne.n	8008d32 <__libc_init_array+0x2e>
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d2c:	4798      	blx	r3
 8008d2e:	3601      	adds	r6, #1
 8008d30:	e7ee      	b.n	8008d10 <__libc_init_array+0xc>
 8008d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d36:	4798      	blx	r3
 8008d38:	3601      	adds	r6, #1
 8008d3a:	e7f2      	b.n	8008d22 <__libc_init_array+0x1e>
 8008d3c:	0800ae70 	.word	0x0800ae70
 8008d40:	0800ae70 	.word	0x0800ae70
 8008d44:	0800ae70 	.word	0x0800ae70
 8008d48:	0800ae74 	.word	0x0800ae74

08008d4c <malloc>:
 8008d4c:	4b02      	ldr	r3, [pc, #8]	; (8008d58 <malloc+0xc>)
 8008d4e:	4601      	mov	r1, r0
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	f000 b87b 	b.w	8008e4c <_malloc_r>
 8008d56:	bf00      	nop
 8008d58:	2000000c 	.word	0x2000000c

08008d5c <free>:
 8008d5c:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <free+0xc>)
 8008d5e:	4601      	mov	r1, r0
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	f000 b827 	b.w	8008db4 <_free_r>
 8008d66:	bf00      	nop
 8008d68:	2000000c 	.word	0x2000000c

08008d6c <memcmp>:
 8008d6c:	b530      	push	{r4, r5, lr}
 8008d6e:	2400      	movs	r4, #0
 8008d70:	3901      	subs	r1, #1
 8008d72:	42a2      	cmp	r2, r4
 8008d74:	d101      	bne.n	8008d7a <memcmp+0xe>
 8008d76:	2000      	movs	r0, #0
 8008d78:	e005      	b.n	8008d86 <memcmp+0x1a>
 8008d7a:	5d03      	ldrb	r3, [r0, r4]
 8008d7c:	3401      	adds	r4, #1
 8008d7e:	5d0d      	ldrb	r5, [r1, r4]
 8008d80:	42ab      	cmp	r3, r5
 8008d82:	d0f6      	beq.n	8008d72 <memcmp+0x6>
 8008d84:	1b58      	subs	r0, r3, r5
 8008d86:	bd30      	pop	{r4, r5, pc}

08008d88 <memcpy>:
 8008d88:	440a      	add	r2, r1
 8008d8a:	4291      	cmp	r1, r2
 8008d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d90:	d100      	bne.n	8008d94 <memcpy+0xc>
 8008d92:	4770      	bx	lr
 8008d94:	b510      	push	{r4, lr}
 8008d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d9a:	4291      	cmp	r1, r2
 8008d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008da0:	d1f9      	bne.n	8008d96 <memcpy+0xe>
 8008da2:	bd10      	pop	{r4, pc}

08008da4 <memset>:
 8008da4:	4603      	mov	r3, r0
 8008da6:	4402      	add	r2, r0
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d100      	bne.n	8008dae <memset+0xa>
 8008dac:	4770      	bx	lr
 8008dae:	f803 1b01 	strb.w	r1, [r3], #1
 8008db2:	e7f9      	b.n	8008da8 <memset+0x4>

08008db4 <_free_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4605      	mov	r5, r0
 8008db8:	2900      	cmp	r1, #0
 8008dba:	d043      	beq.n	8008e44 <_free_r+0x90>
 8008dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc0:	1f0c      	subs	r4, r1, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfb8      	it	lt
 8008dc6:	18e4      	addlt	r4, r4, r3
 8008dc8:	f000 ff0c 	bl	8009be4 <__malloc_lock>
 8008dcc:	4a1e      	ldr	r2, [pc, #120]	; (8008e48 <_free_r+0x94>)
 8008dce:	6813      	ldr	r3, [r2, #0]
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	b933      	cbnz	r3, 8008de2 <_free_r+0x2e>
 8008dd4:	6063      	str	r3, [r4, #4]
 8008dd6:	6014      	str	r4, [r2, #0]
 8008dd8:	4628      	mov	r0, r5
 8008dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dde:	f000 bf07 	b.w	8009bf0 <__malloc_unlock>
 8008de2:	42a3      	cmp	r3, r4
 8008de4:	d90a      	bls.n	8008dfc <_free_r+0x48>
 8008de6:	6821      	ldr	r1, [r4, #0]
 8008de8:	1862      	adds	r2, r4, r1
 8008dea:	4293      	cmp	r3, r2
 8008dec:	bf01      	itttt	eq
 8008dee:	681a      	ldreq	r2, [r3, #0]
 8008df0:	685b      	ldreq	r3, [r3, #4]
 8008df2:	1852      	addeq	r2, r2, r1
 8008df4:	6022      	streq	r2, [r4, #0]
 8008df6:	6063      	str	r3, [r4, #4]
 8008df8:	6004      	str	r4, [r0, #0]
 8008dfa:	e7ed      	b.n	8008dd8 <_free_r+0x24>
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	b10b      	cbz	r3, 8008e06 <_free_r+0x52>
 8008e02:	42a3      	cmp	r3, r4
 8008e04:	d9fa      	bls.n	8008dfc <_free_r+0x48>
 8008e06:	6811      	ldr	r1, [r2, #0]
 8008e08:	1850      	adds	r0, r2, r1
 8008e0a:	42a0      	cmp	r0, r4
 8008e0c:	d10b      	bne.n	8008e26 <_free_r+0x72>
 8008e0e:	6820      	ldr	r0, [r4, #0]
 8008e10:	4401      	add	r1, r0
 8008e12:	1850      	adds	r0, r2, r1
 8008e14:	4283      	cmp	r3, r0
 8008e16:	6011      	str	r1, [r2, #0]
 8008e18:	d1de      	bne.n	8008dd8 <_free_r+0x24>
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	4401      	add	r1, r0
 8008e20:	6011      	str	r1, [r2, #0]
 8008e22:	6053      	str	r3, [r2, #4]
 8008e24:	e7d8      	b.n	8008dd8 <_free_r+0x24>
 8008e26:	d902      	bls.n	8008e2e <_free_r+0x7a>
 8008e28:	230c      	movs	r3, #12
 8008e2a:	602b      	str	r3, [r5, #0]
 8008e2c:	e7d4      	b.n	8008dd8 <_free_r+0x24>
 8008e2e:	6820      	ldr	r0, [r4, #0]
 8008e30:	1821      	adds	r1, r4, r0
 8008e32:	428b      	cmp	r3, r1
 8008e34:	bf01      	itttt	eq
 8008e36:	6819      	ldreq	r1, [r3, #0]
 8008e38:	685b      	ldreq	r3, [r3, #4]
 8008e3a:	1809      	addeq	r1, r1, r0
 8008e3c:	6021      	streq	r1, [r4, #0]
 8008e3e:	6063      	str	r3, [r4, #4]
 8008e40:	6054      	str	r4, [r2, #4]
 8008e42:	e7c9      	b.n	8008dd8 <_free_r+0x24>
 8008e44:	bd38      	pop	{r3, r4, r5, pc}
 8008e46:	bf00      	nop
 8008e48:	20000098 	.word	0x20000098

08008e4c <_malloc_r>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	1ccd      	adds	r5, r1, #3
 8008e50:	f025 0503 	bic.w	r5, r5, #3
 8008e54:	3508      	adds	r5, #8
 8008e56:	2d0c      	cmp	r5, #12
 8008e58:	bf38      	it	cc
 8008e5a:	250c      	movcc	r5, #12
 8008e5c:	2d00      	cmp	r5, #0
 8008e5e:	4606      	mov	r6, r0
 8008e60:	db01      	blt.n	8008e66 <_malloc_r+0x1a>
 8008e62:	42a9      	cmp	r1, r5
 8008e64:	d903      	bls.n	8008e6e <_malloc_r+0x22>
 8008e66:	230c      	movs	r3, #12
 8008e68:	6033      	str	r3, [r6, #0]
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e6e:	f000 feb9 	bl	8009be4 <__malloc_lock>
 8008e72:	4921      	ldr	r1, [pc, #132]	; (8008ef8 <_malloc_r+0xac>)
 8008e74:	680a      	ldr	r2, [r1, #0]
 8008e76:	4614      	mov	r4, r2
 8008e78:	b99c      	cbnz	r4, 8008ea2 <_malloc_r+0x56>
 8008e7a:	4f20      	ldr	r7, [pc, #128]	; (8008efc <_malloc_r+0xb0>)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	b923      	cbnz	r3, 8008e8a <_malloc_r+0x3e>
 8008e80:	4621      	mov	r1, r4
 8008e82:	4630      	mov	r0, r6
 8008e84:	f000 fb42 	bl	800950c <_sbrk_r>
 8008e88:	6038      	str	r0, [r7, #0]
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f000 fb3d 	bl	800950c <_sbrk_r>
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	d123      	bne.n	8008ede <_malloc_r+0x92>
 8008e96:	230c      	movs	r3, #12
 8008e98:	4630      	mov	r0, r6
 8008e9a:	6033      	str	r3, [r6, #0]
 8008e9c:	f000 fea8 	bl	8009bf0 <__malloc_unlock>
 8008ea0:	e7e3      	b.n	8008e6a <_malloc_r+0x1e>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	1b5b      	subs	r3, r3, r5
 8008ea6:	d417      	bmi.n	8008ed8 <_malloc_r+0x8c>
 8008ea8:	2b0b      	cmp	r3, #11
 8008eaa:	d903      	bls.n	8008eb4 <_malloc_r+0x68>
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	441c      	add	r4, r3
 8008eb0:	6025      	str	r5, [r4, #0]
 8008eb2:	e004      	b.n	8008ebe <_malloc_r+0x72>
 8008eb4:	6863      	ldr	r3, [r4, #4]
 8008eb6:	42a2      	cmp	r2, r4
 8008eb8:	bf0c      	ite	eq
 8008eba:	600b      	streq	r3, [r1, #0]
 8008ebc:	6053      	strne	r3, [r2, #4]
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f000 fe96 	bl	8009bf0 <__malloc_unlock>
 8008ec4:	f104 000b 	add.w	r0, r4, #11
 8008ec8:	1d23      	adds	r3, r4, #4
 8008eca:	f020 0007 	bic.w	r0, r0, #7
 8008ece:	1ac2      	subs	r2, r0, r3
 8008ed0:	d0cc      	beq.n	8008e6c <_malloc_r+0x20>
 8008ed2:	1a1b      	subs	r3, r3, r0
 8008ed4:	50a3      	str	r3, [r4, r2]
 8008ed6:	e7c9      	b.n	8008e6c <_malloc_r+0x20>
 8008ed8:	4622      	mov	r2, r4
 8008eda:	6864      	ldr	r4, [r4, #4]
 8008edc:	e7cc      	b.n	8008e78 <_malloc_r+0x2c>
 8008ede:	1cc4      	adds	r4, r0, #3
 8008ee0:	f024 0403 	bic.w	r4, r4, #3
 8008ee4:	42a0      	cmp	r0, r4
 8008ee6:	d0e3      	beq.n	8008eb0 <_malloc_r+0x64>
 8008ee8:	1a21      	subs	r1, r4, r0
 8008eea:	4630      	mov	r0, r6
 8008eec:	f000 fb0e 	bl	800950c <_sbrk_r>
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d1dd      	bne.n	8008eb0 <_malloc_r+0x64>
 8008ef4:	e7cf      	b.n	8008e96 <_malloc_r+0x4a>
 8008ef6:	bf00      	nop
 8008ef8:	20000098 	.word	0x20000098
 8008efc:	2000009c 	.word	0x2000009c

08008f00 <__sfputc_r>:
 8008f00:	6893      	ldr	r3, [r2, #8]
 8008f02:	b410      	push	{r4}
 8008f04:	3b01      	subs	r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	6093      	str	r3, [r2, #8]
 8008f0a:	da07      	bge.n	8008f1c <__sfputc_r+0x1c>
 8008f0c:	6994      	ldr	r4, [r2, #24]
 8008f0e:	42a3      	cmp	r3, r4
 8008f10:	db01      	blt.n	8008f16 <__sfputc_r+0x16>
 8008f12:	290a      	cmp	r1, #10
 8008f14:	d102      	bne.n	8008f1c <__sfputc_r+0x1c>
 8008f16:	bc10      	pop	{r4}
 8008f18:	f000 bb56 	b.w	80095c8 <__swbuf_r>
 8008f1c:	6813      	ldr	r3, [r2, #0]
 8008f1e:	1c58      	adds	r0, r3, #1
 8008f20:	6010      	str	r0, [r2, #0]
 8008f22:	7019      	strb	r1, [r3, #0]
 8008f24:	4608      	mov	r0, r1
 8008f26:	bc10      	pop	{r4}
 8008f28:	4770      	bx	lr

08008f2a <__sfputs_r>:
 8008f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	460f      	mov	r7, r1
 8008f30:	4614      	mov	r4, r2
 8008f32:	18d5      	adds	r5, r2, r3
 8008f34:	42ac      	cmp	r4, r5
 8008f36:	d101      	bne.n	8008f3c <__sfputs_r+0x12>
 8008f38:	2000      	movs	r0, #0
 8008f3a:	e007      	b.n	8008f4c <__sfputs_r+0x22>
 8008f3c:	463a      	mov	r2, r7
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f44:	f7ff ffdc 	bl	8008f00 <__sfputc_r>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d1f3      	bne.n	8008f34 <__sfputs_r+0xa>
 8008f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f50 <_vfiprintf_r>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	460d      	mov	r5, r1
 8008f56:	4614      	mov	r4, r2
 8008f58:	4698      	mov	r8, r3
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	b09d      	sub	sp, #116	; 0x74
 8008f5e:	b118      	cbz	r0, 8008f68 <_vfiprintf_r+0x18>
 8008f60:	6983      	ldr	r3, [r0, #24]
 8008f62:	b90b      	cbnz	r3, 8008f68 <_vfiprintf_r+0x18>
 8008f64:	f000 fd12 	bl	800998c <__sinit>
 8008f68:	4b89      	ldr	r3, [pc, #548]	; (8009190 <_vfiprintf_r+0x240>)
 8008f6a:	429d      	cmp	r5, r3
 8008f6c:	d11b      	bne.n	8008fa6 <_vfiprintf_r+0x56>
 8008f6e:	6875      	ldr	r5, [r6, #4]
 8008f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f72:	07d9      	lsls	r1, r3, #31
 8008f74:	d405      	bmi.n	8008f82 <_vfiprintf_r+0x32>
 8008f76:	89ab      	ldrh	r3, [r5, #12]
 8008f78:	059a      	lsls	r2, r3, #22
 8008f7a:	d402      	bmi.n	8008f82 <_vfiprintf_r+0x32>
 8008f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f7e:	f000 fda3 	bl	8009ac8 <__retarget_lock_acquire_recursive>
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	071b      	lsls	r3, r3, #28
 8008f86:	d501      	bpl.n	8008f8c <_vfiprintf_r+0x3c>
 8008f88:	692b      	ldr	r3, [r5, #16]
 8008f8a:	b9eb      	cbnz	r3, 8008fc8 <_vfiprintf_r+0x78>
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f000 fb6c 	bl	800966c <__swsetup_r>
 8008f94:	b1c0      	cbz	r0, 8008fc8 <_vfiprintf_r+0x78>
 8008f96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f98:	07dc      	lsls	r4, r3, #31
 8008f9a:	d50e      	bpl.n	8008fba <_vfiprintf_r+0x6a>
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	b01d      	add	sp, #116	; 0x74
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	4b7b      	ldr	r3, [pc, #492]	; (8009194 <_vfiprintf_r+0x244>)
 8008fa8:	429d      	cmp	r5, r3
 8008faa:	d101      	bne.n	8008fb0 <_vfiprintf_r+0x60>
 8008fac:	68b5      	ldr	r5, [r6, #8]
 8008fae:	e7df      	b.n	8008f70 <_vfiprintf_r+0x20>
 8008fb0:	4b79      	ldr	r3, [pc, #484]	; (8009198 <_vfiprintf_r+0x248>)
 8008fb2:	429d      	cmp	r5, r3
 8008fb4:	bf08      	it	eq
 8008fb6:	68f5      	ldreq	r5, [r6, #12]
 8008fb8:	e7da      	b.n	8008f70 <_vfiprintf_r+0x20>
 8008fba:	89ab      	ldrh	r3, [r5, #12]
 8008fbc:	0598      	lsls	r0, r3, #22
 8008fbe:	d4ed      	bmi.n	8008f9c <_vfiprintf_r+0x4c>
 8008fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fc2:	f000 fd82 	bl	8009aca <__retarget_lock_release_recursive>
 8008fc6:	e7e9      	b.n	8008f9c <_vfiprintf_r+0x4c>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	9309      	str	r3, [sp, #36]	; 0x24
 8008fcc:	2320      	movs	r3, #32
 8008fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fd2:	2330      	movs	r3, #48	; 0x30
 8008fd4:	f04f 0901 	mov.w	r9, #1
 8008fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fdc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800919c <_vfiprintf_r+0x24c>
 8008fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	469a      	mov	sl, r3
 8008fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fec:	b10a      	cbz	r2, 8008ff2 <_vfiprintf_r+0xa2>
 8008fee:	2a25      	cmp	r2, #37	; 0x25
 8008ff0:	d1f9      	bne.n	8008fe6 <_vfiprintf_r+0x96>
 8008ff2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ff6:	d00b      	beq.n	8009010 <_vfiprintf_r+0xc0>
 8008ff8:	465b      	mov	r3, fp
 8008ffa:	4622      	mov	r2, r4
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	4630      	mov	r0, r6
 8009000:	f7ff ff93 	bl	8008f2a <__sfputs_r>
 8009004:	3001      	adds	r0, #1
 8009006:	f000 80aa 	beq.w	800915e <_vfiprintf_r+0x20e>
 800900a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800900c:	445a      	add	r2, fp
 800900e:	9209      	str	r2, [sp, #36]	; 0x24
 8009010:	f89a 3000 	ldrb.w	r3, [sl]
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 80a2 	beq.w	800915e <_vfiprintf_r+0x20e>
 800901a:	2300      	movs	r3, #0
 800901c:	f04f 32ff 	mov.w	r2, #4294967295
 8009020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009024:	f10a 0a01 	add.w	sl, sl, #1
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009030:	931a      	str	r3, [sp, #104]	; 0x68
 8009032:	4654      	mov	r4, sl
 8009034:	2205      	movs	r2, #5
 8009036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800903a:	4858      	ldr	r0, [pc, #352]	; (800919c <_vfiprintf_r+0x24c>)
 800903c:	f000 fdaa 	bl	8009b94 <memchr>
 8009040:	9a04      	ldr	r2, [sp, #16]
 8009042:	b9d8      	cbnz	r0, 800907c <_vfiprintf_r+0x12c>
 8009044:	06d1      	lsls	r1, r2, #27
 8009046:	bf44      	itt	mi
 8009048:	2320      	movmi	r3, #32
 800904a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800904e:	0713      	lsls	r3, r2, #28
 8009050:	bf44      	itt	mi
 8009052:	232b      	movmi	r3, #43	; 0x2b
 8009054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009058:	f89a 3000 	ldrb.w	r3, [sl]
 800905c:	2b2a      	cmp	r3, #42	; 0x2a
 800905e:	d015      	beq.n	800908c <_vfiprintf_r+0x13c>
 8009060:	4654      	mov	r4, sl
 8009062:	2000      	movs	r0, #0
 8009064:	f04f 0c0a 	mov.w	ip, #10
 8009068:	9a07      	ldr	r2, [sp, #28]
 800906a:	4621      	mov	r1, r4
 800906c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009070:	3b30      	subs	r3, #48	; 0x30
 8009072:	2b09      	cmp	r3, #9
 8009074:	d94e      	bls.n	8009114 <_vfiprintf_r+0x1c4>
 8009076:	b1b0      	cbz	r0, 80090a6 <_vfiprintf_r+0x156>
 8009078:	9207      	str	r2, [sp, #28]
 800907a:	e014      	b.n	80090a6 <_vfiprintf_r+0x156>
 800907c:	eba0 0308 	sub.w	r3, r0, r8
 8009080:	fa09 f303 	lsl.w	r3, r9, r3
 8009084:	4313      	orrs	r3, r2
 8009086:	46a2      	mov	sl, r4
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	e7d2      	b.n	8009032 <_vfiprintf_r+0xe2>
 800908c:	9b03      	ldr	r3, [sp, #12]
 800908e:	1d19      	adds	r1, r3, #4
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	9103      	str	r1, [sp, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	bfbb      	ittet	lt
 8009098:	425b      	neglt	r3, r3
 800909a:	f042 0202 	orrlt.w	r2, r2, #2
 800909e:	9307      	strge	r3, [sp, #28]
 80090a0:	9307      	strlt	r3, [sp, #28]
 80090a2:	bfb8      	it	lt
 80090a4:	9204      	strlt	r2, [sp, #16]
 80090a6:	7823      	ldrb	r3, [r4, #0]
 80090a8:	2b2e      	cmp	r3, #46	; 0x2e
 80090aa:	d10c      	bne.n	80090c6 <_vfiprintf_r+0x176>
 80090ac:	7863      	ldrb	r3, [r4, #1]
 80090ae:	2b2a      	cmp	r3, #42	; 0x2a
 80090b0:	d135      	bne.n	800911e <_vfiprintf_r+0x1ce>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	3402      	adds	r4, #2
 80090b6:	1d1a      	adds	r2, r3, #4
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	9203      	str	r2, [sp, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bfb8      	it	lt
 80090c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80090c4:	9305      	str	r3, [sp, #20]
 80090c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091ac <_vfiprintf_r+0x25c>
 80090ca:	2203      	movs	r2, #3
 80090cc:	4650      	mov	r0, sl
 80090ce:	7821      	ldrb	r1, [r4, #0]
 80090d0:	f000 fd60 	bl	8009b94 <memchr>
 80090d4:	b140      	cbz	r0, 80090e8 <_vfiprintf_r+0x198>
 80090d6:	2340      	movs	r3, #64	; 0x40
 80090d8:	eba0 000a 	sub.w	r0, r0, sl
 80090dc:	fa03 f000 	lsl.w	r0, r3, r0
 80090e0:	9b04      	ldr	r3, [sp, #16]
 80090e2:	3401      	adds	r4, #1
 80090e4:	4303      	orrs	r3, r0
 80090e6:	9304      	str	r3, [sp, #16]
 80090e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ec:	2206      	movs	r2, #6
 80090ee:	482c      	ldr	r0, [pc, #176]	; (80091a0 <_vfiprintf_r+0x250>)
 80090f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090f4:	f000 fd4e 	bl	8009b94 <memchr>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d03f      	beq.n	800917c <_vfiprintf_r+0x22c>
 80090fc:	4b29      	ldr	r3, [pc, #164]	; (80091a4 <_vfiprintf_r+0x254>)
 80090fe:	bb1b      	cbnz	r3, 8009148 <_vfiprintf_r+0x1f8>
 8009100:	9b03      	ldr	r3, [sp, #12]
 8009102:	3307      	adds	r3, #7
 8009104:	f023 0307 	bic.w	r3, r3, #7
 8009108:	3308      	adds	r3, #8
 800910a:	9303      	str	r3, [sp, #12]
 800910c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910e:	443b      	add	r3, r7
 8009110:	9309      	str	r3, [sp, #36]	; 0x24
 8009112:	e767      	b.n	8008fe4 <_vfiprintf_r+0x94>
 8009114:	460c      	mov	r4, r1
 8009116:	2001      	movs	r0, #1
 8009118:	fb0c 3202 	mla	r2, ip, r2, r3
 800911c:	e7a5      	b.n	800906a <_vfiprintf_r+0x11a>
 800911e:	2300      	movs	r3, #0
 8009120:	f04f 0c0a 	mov.w	ip, #10
 8009124:	4619      	mov	r1, r3
 8009126:	3401      	adds	r4, #1
 8009128:	9305      	str	r3, [sp, #20]
 800912a:	4620      	mov	r0, r4
 800912c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009130:	3a30      	subs	r2, #48	; 0x30
 8009132:	2a09      	cmp	r2, #9
 8009134:	d903      	bls.n	800913e <_vfiprintf_r+0x1ee>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0c5      	beq.n	80090c6 <_vfiprintf_r+0x176>
 800913a:	9105      	str	r1, [sp, #20]
 800913c:	e7c3      	b.n	80090c6 <_vfiprintf_r+0x176>
 800913e:	4604      	mov	r4, r0
 8009140:	2301      	movs	r3, #1
 8009142:	fb0c 2101 	mla	r1, ip, r1, r2
 8009146:	e7f0      	b.n	800912a <_vfiprintf_r+0x1da>
 8009148:	ab03      	add	r3, sp, #12
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	462a      	mov	r2, r5
 800914e:	4630      	mov	r0, r6
 8009150:	4b15      	ldr	r3, [pc, #84]	; (80091a8 <_vfiprintf_r+0x258>)
 8009152:	a904      	add	r1, sp, #16
 8009154:	f3af 8000 	nop.w
 8009158:	4607      	mov	r7, r0
 800915a:	1c78      	adds	r0, r7, #1
 800915c:	d1d6      	bne.n	800910c <_vfiprintf_r+0x1bc>
 800915e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009160:	07d9      	lsls	r1, r3, #31
 8009162:	d405      	bmi.n	8009170 <_vfiprintf_r+0x220>
 8009164:	89ab      	ldrh	r3, [r5, #12]
 8009166:	059a      	lsls	r2, r3, #22
 8009168:	d402      	bmi.n	8009170 <_vfiprintf_r+0x220>
 800916a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800916c:	f000 fcad 	bl	8009aca <__retarget_lock_release_recursive>
 8009170:	89ab      	ldrh	r3, [r5, #12]
 8009172:	065b      	lsls	r3, r3, #25
 8009174:	f53f af12 	bmi.w	8008f9c <_vfiprintf_r+0x4c>
 8009178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800917a:	e711      	b.n	8008fa0 <_vfiprintf_r+0x50>
 800917c:	ab03      	add	r3, sp, #12
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	462a      	mov	r2, r5
 8009182:	4630      	mov	r0, r6
 8009184:	4b08      	ldr	r3, [pc, #32]	; (80091a8 <_vfiprintf_r+0x258>)
 8009186:	a904      	add	r1, sp, #16
 8009188:	f000 f882 	bl	8009290 <_printf_i>
 800918c:	e7e4      	b.n	8009158 <_vfiprintf_r+0x208>
 800918e:	bf00      	nop
 8009190:	0800ae30 	.word	0x0800ae30
 8009194:	0800ae50 	.word	0x0800ae50
 8009198:	0800ae10 	.word	0x0800ae10
 800919c:	0800addc 	.word	0x0800addc
 80091a0:	0800ade6 	.word	0x0800ade6
 80091a4:	00000000 	.word	0x00000000
 80091a8:	08008f2b 	.word	0x08008f2b
 80091ac:	0800ade2 	.word	0x0800ade2

080091b0 <_printf_common>:
 80091b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b4:	4616      	mov	r6, r2
 80091b6:	4699      	mov	r9, r3
 80091b8:	688a      	ldr	r2, [r1, #8]
 80091ba:	690b      	ldr	r3, [r1, #16]
 80091bc:	4607      	mov	r7, r0
 80091be:	4293      	cmp	r3, r2
 80091c0:	bfb8      	it	lt
 80091c2:	4613      	movlt	r3, r2
 80091c4:	6033      	str	r3, [r6, #0]
 80091c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091ca:	460c      	mov	r4, r1
 80091cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091d0:	b10a      	cbz	r2, 80091d6 <_printf_common+0x26>
 80091d2:	3301      	adds	r3, #1
 80091d4:	6033      	str	r3, [r6, #0]
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	0699      	lsls	r1, r3, #26
 80091da:	bf42      	ittt	mi
 80091dc:	6833      	ldrmi	r3, [r6, #0]
 80091de:	3302      	addmi	r3, #2
 80091e0:	6033      	strmi	r3, [r6, #0]
 80091e2:	6825      	ldr	r5, [r4, #0]
 80091e4:	f015 0506 	ands.w	r5, r5, #6
 80091e8:	d106      	bne.n	80091f8 <_printf_common+0x48>
 80091ea:	f104 0a19 	add.w	sl, r4, #25
 80091ee:	68e3      	ldr	r3, [r4, #12]
 80091f0:	6832      	ldr	r2, [r6, #0]
 80091f2:	1a9b      	subs	r3, r3, r2
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	dc28      	bgt.n	800924a <_printf_common+0x9a>
 80091f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091fc:	1e13      	subs	r3, r2, #0
 80091fe:	6822      	ldr	r2, [r4, #0]
 8009200:	bf18      	it	ne
 8009202:	2301      	movne	r3, #1
 8009204:	0692      	lsls	r2, r2, #26
 8009206:	d42d      	bmi.n	8009264 <_printf_common+0xb4>
 8009208:	4649      	mov	r1, r9
 800920a:	4638      	mov	r0, r7
 800920c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009210:	47c0      	blx	r8
 8009212:	3001      	adds	r0, #1
 8009214:	d020      	beq.n	8009258 <_printf_common+0xa8>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	68e5      	ldr	r5, [r4, #12]
 800921a:	f003 0306 	and.w	r3, r3, #6
 800921e:	2b04      	cmp	r3, #4
 8009220:	bf18      	it	ne
 8009222:	2500      	movne	r5, #0
 8009224:	6832      	ldr	r2, [r6, #0]
 8009226:	f04f 0600 	mov.w	r6, #0
 800922a:	68a3      	ldr	r3, [r4, #8]
 800922c:	bf08      	it	eq
 800922e:	1aad      	subeq	r5, r5, r2
 8009230:	6922      	ldr	r2, [r4, #16]
 8009232:	bf08      	it	eq
 8009234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009238:	4293      	cmp	r3, r2
 800923a:	bfc4      	itt	gt
 800923c:	1a9b      	subgt	r3, r3, r2
 800923e:	18ed      	addgt	r5, r5, r3
 8009240:	341a      	adds	r4, #26
 8009242:	42b5      	cmp	r5, r6
 8009244:	d11a      	bne.n	800927c <_printf_common+0xcc>
 8009246:	2000      	movs	r0, #0
 8009248:	e008      	b.n	800925c <_printf_common+0xac>
 800924a:	2301      	movs	r3, #1
 800924c:	4652      	mov	r2, sl
 800924e:	4649      	mov	r1, r9
 8009250:	4638      	mov	r0, r7
 8009252:	47c0      	blx	r8
 8009254:	3001      	adds	r0, #1
 8009256:	d103      	bne.n	8009260 <_printf_common+0xb0>
 8009258:	f04f 30ff 	mov.w	r0, #4294967295
 800925c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009260:	3501      	adds	r5, #1
 8009262:	e7c4      	b.n	80091ee <_printf_common+0x3e>
 8009264:	2030      	movs	r0, #48	; 0x30
 8009266:	18e1      	adds	r1, r4, r3
 8009268:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009272:	4422      	add	r2, r4
 8009274:	3302      	adds	r3, #2
 8009276:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800927a:	e7c5      	b.n	8009208 <_printf_common+0x58>
 800927c:	2301      	movs	r3, #1
 800927e:	4622      	mov	r2, r4
 8009280:	4649      	mov	r1, r9
 8009282:	4638      	mov	r0, r7
 8009284:	47c0      	blx	r8
 8009286:	3001      	adds	r0, #1
 8009288:	d0e6      	beq.n	8009258 <_printf_common+0xa8>
 800928a:	3601      	adds	r6, #1
 800928c:	e7d9      	b.n	8009242 <_printf_common+0x92>
	...

08009290 <_printf_i>:
 8009290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009294:	460c      	mov	r4, r1
 8009296:	7e27      	ldrb	r7, [r4, #24]
 8009298:	4691      	mov	r9, r2
 800929a:	2f78      	cmp	r7, #120	; 0x78
 800929c:	4680      	mov	r8, r0
 800929e:	469a      	mov	sl, r3
 80092a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092a6:	d807      	bhi.n	80092b8 <_printf_i+0x28>
 80092a8:	2f62      	cmp	r7, #98	; 0x62
 80092aa:	d80a      	bhi.n	80092c2 <_printf_i+0x32>
 80092ac:	2f00      	cmp	r7, #0
 80092ae:	f000 80d9 	beq.w	8009464 <_printf_i+0x1d4>
 80092b2:	2f58      	cmp	r7, #88	; 0x58
 80092b4:	f000 80a4 	beq.w	8009400 <_printf_i+0x170>
 80092b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092c0:	e03a      	b.n	8009338 <_printf_i+0xa8>
 80092c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092c6:	2b15      	cmp	r3, #21
 80092c8:	d8f6      	bhi.n	80092b8 <_printf_i+0x28>
 80092ca:	a001      	add	r0, pc, #4	; (adr r0, 80092d0 <_printf_i+0x40>)
 80092cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80092d0:	08009329 	.word	0x08009329
 80092d4:	0800933d 	.word	0x0800933d
 80092d8:	080092b9 	.word	0x080092b9
 80092dc:	080092b9 	.word	0x080092b9
 80092e0:	080092b9 	.word	0x080092b9
 80092e4:	080092b9 	.word	0x080092b9
 80092e8:	0800933d 	.word	0x0800933d
 80092ec:	080092b9 	.word	0x080092b9
 80092f0:	080092b9 	.word	0x080092b9
 80092f4:	080092b9 	.word	0x080092b9
 80092f8:	080092b9 	.word	0x080092b9
 80092fc:	0800944b 	.word	0x0800944b
 8009300:	0800936d 	.word	0x0800936d
 8009304:	0800942d 	.word	0x0800942d
 8009308:	080092b9 	.word	0x080092b9
 800930c:	080092b9 	.word	0x080092b9
 8009310:	0800946d 	.word	0x0800946d
 8009314:	080092b9 	.word	0x080092b9
 8009318:	0800936d 	.word	0x0800936d
 800931c:	080092b9 	.word	0x080092b9
 8009320:	080092b9 	.word	0x080092b9
 8009324:	08009435 	.word	0x08009435
 8009328:	680b      	ldr	r3, [r1, #0]
 800932a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800932e:	1d1a      	adds	r2, r3, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	600a      	str	r2, [r1, #0]
 8009334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009338:	2301      	movs	r3, #1
 800933a:	e0a4      	b.n	8009486 <_printf_i+0x1f6>
 800933c:	6825      	ldr	r5, [r4, #0]
 800933e:	6808      	ldr	r0, [r1, #0]
 8009340:	062e      	lsls	r6, r5, #24
 8009342:	f100 0304 	add.w	r3, r0, #4
 8009346:	d50a      	bpl.n	800935e <_printf_i+0xce>
 8009348:	6805      	ldr	r5, [r0, #0]
 800934a:	600b      	str	r3, [r1, #0]
 800934c:	2d00      	cmp	r5, #0
 800934e:	da03      	bge.n	8009358 <_printf_i+0xc8>
 8009350:	232d      	movs	r3, #45	; 0x2d
 8009352:	426d      	negs	r5, r5
 8009354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009358:	230a      	movs	r3, #10
 800935a:	485e      	ldr	r0, [pc, #376]	; (80094d4 <_printf_i+0x244>)
 800935c:	e019      	b.n	8009392 <_printf_i+0x102>
 800935e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009362:	6805      	ldr	r5, [r0, #0]
 8009364:	600b      	str	r3, [r1, #0]
 8009366:	bf18      	it	ne
 8009368:	b22d      	sxthne	r5, r5
 800936a:	e7ef      	b.n	800934c <_printf_i+0xbc>
 800936c:	680b      	ldr	r3, [r1, #0]
 800936e:	6825      	ldr	r5, [r4, #0]
 8009370:	1d18      	adds	r0, r3, #4
 8009372:	6008      	str	r0, [r1, #0]
 8009374:	0628      	lsls	r0, r5, #24
 8009376:	d501      	bpl.n	800937c <_printf_i+0xec>
 8009378:	681d      	ldr	r5, [r3, #0]
 800937a:	e002      	b.n	8009382 <_printf_i+0xf2>
 800937c:	0669      	lsls	r1, r5, #25
 800937e:	d5fb      	bpl.n	8009378 <_printf_i+0xe8>
 8009380:	881d      	ldrh	r5, [r3, #0]
 8009382:	2f6f      	cmp	r7, #111	; 0x6f
 8009384:	bf0c      	ite	eq
 8009386:	2308      	moveq	r3, #8
 8009388:	230a      	movne	r3, #10
 800938a:	4852      	ldr	r0, [pc, #328]	; (80094d4 <_printf_i+0x244>)
 800938c:	2100      	movs	r1, #0
 800938e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009392:	6866      	ldr	r6, [r4, #4]
 8009394:	2e00      	cmp	r6, #0
 8009396:	bfa8      	it	ge
 8009398:	6821      	ldrge	r1, [r4, #0]
 800939a:	60a6      	str	r6, [r4, #8]
 800939c:	bfa4      	itt	ge
 800939e:	f021 0104 	bicge.w	r1, r1, #4
 80093a2:	6021      	strge	r1, [r4, #0]
 80093a4:	b90d      	cbnz	r5, 80093aa <_printf_i+0x11a>
 80093a6:	2e00      	cmp	r6, #0
 80093a8:	d04d      	beq.n	8009446 <_printf_i+0x1b6>
 80093aa:	4616      	mov	r6, r2
 80093ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80093b0:	fb03 5711 	mls	r7, r3, r1, r5
 80093b4:	5dc7      	ldrb	r7, [r0, r7]
 80093b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093ba:	462f      	mov	r7, r5
 80093bc:	42bb      	cmp	r3, r7
 80093be:	460d      	mov	r5, r1
 80093c0:	d9f4      	bls.n	80093ac <_printf_i+0x11c>
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	d10b      	bne.n	80093de <_printf_i+0x14e>
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	07df      	lsls	r7, r3, #31
 80093ca:	d508      	bpl.n	80093de <_printf_i+0x14e>
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	6861      	ldr	r1, [r4, #4]
 80093d0:	4299      	cmp	r1, r3
 80093d2:	bfde      	ittt	le
 80093d4:	2330      	movle	r3, #48	; 0x30
 80093d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093de:	1b92      	subs	r2, r2, r6
 80093e0:	6122      	str	r2, [r4, #16]
 80093e2:	464b      	mov	r3, r9
 80093e4:	4621      	mov	r1, r4
 80093e6:	4640      	mov	r0, r8
 80093e8:	f8cd a000 	str.w	sl, [sp]
 80093ec:	aa03      	add	r2, sp, #12
 80093ee:	f7ff fedf 	bl	80091b0 <_printf_common>
 80093f2:	3001      	adds	r0, #1
 80093f4:	d14c      	bne.n	8009490 <_printf_i+0x200>
 80093f6:	f04f 30ff 	mov.w	r0, #4294967295
 80093fa:	b004      	add	sp, #16
 80093fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009400:	4834      	ldr	r0, [pc, #208]	; (80094d4 <_printf_i+0x244>)
 8009402:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009406:	680e      	ldr	r6, [r1, #0]
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	f856 5b04 	ldr.w	r5, [r6], #4
 800940e:	061f      	lsls	r7, r3, #24
 8009410:	600e      	str	r6, [r1, #0]
 8009412:	d514      	bpl.n	800943e <_printf_i+0x1ae>
 8009414:	07d9      	lsls	r1, r3, #31
 8009416:	bf44      	itt	mi
 8009418:	f043 0320 	orrmi.w	r3, r3, #32
 800941c:	6023      	strmi	r3, [r4, #0]
 800941e:	b91d      	cbnz	r5, 8009428 <_printf_i+0x198>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	f023 0320 	bic.w	r3, r3, #32
 8009426:	6023      	str	r3, [r4, #0]
 8009428:	2310      	movs	r3, #16
 800942a:	e7af      	b.n	800938c <_printf_i+0xfc>
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	f043 0320 	orr.w	r3, r3, #32
 8009432:	6023      	str	r3, [r4, #0]
 8009434:	2378      	movs	r3, #120	; 0x78
 8009436:	4828      	ldr	r0, [pc, #160]	; (80094d8 <_printf_i+0x248>)
 8009438:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800943c:	e7e3      	b.n	8009406 <_printf_i+0x176>
 800943e:	065e      	lsls	r6, r3, #25
 8009440:	bf48      	it	mi
 8009442:	b2ad      	uxthmi	r5, r5
 8009444:	e7e6      	b.n	8009414 <_printf_i+0x184>
 8009446:	4616      	mov	r6, r2
 8009448:	e7bb      	b.n	80093c2 <_printf_i+0x132>
 800944a:	680b      	ldr	r3, [r1, #0]
 800944c:	6826      	ldr	r6, [r4, #0]
 800944e:	1d1d      	adds	r5, r3, #4
 8009450:	6960      	ldr	r0, [r4, #20]
 8009452:	600d      	str	r5, [r1, #0]
 8009454:	0635      	lsls	r5, r6, #24
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	d501      	bpl.n	800945e <_printf_i+0x1ce>
 800945a:	6018      	str	r0, [r3, #0]
 800945c:	e002      	b.n	8009464 <_printf_i+0x1d4>
 800945e:	0671      	lsls	r1, r6, #25
 8009460:	d5fb      	bpl.n	800945a <_printf_i+0x1ca>
 8009462:	8018      	strh	r0, [r3, #0]
 8009464:	2300      	movs	r3, #0
 8009466:	4616      	mov	r6, r2
 8009468:	6123      	str	r3, [r4, #16]
 800946a:	e7ba      	b.n	80093e2 <_printf_i+0x152>
 800946c:	680b      	ldr	r3, [r1, #0]
 800946e:	1d1a      	adds	r2, r3, #4
 8009470:	600a      	str	r2, [r1, #0]
 8009472:	681e      	ldr	r6, [r3, #0]
 8009474:	2100      	movs	r1, #0
 8009476:	4630      	mov	r0, r6
 8009478:	6862      	ldr	r2, [r4, #4]
 800947a:	f000 fb8b 	bl	8009b94 <memchr>
 800947e:	b108      	cbz	r0, 8009484 <_printf_i+0x1f4>
 8009480:	1b80      	subs	r0, r0, r6
 8009482:	6060      	str	r0, [r4, #4]
 8009484:	6863      	ldr	r3, [r4, #4]
 8009486:	6123      	str	r3, [r4, #16]
 8009488:	2300      	movs	r3, #0
 800948a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800948e:	e7a8      	b.n	80093e2 <_printf_i+0x152>
 8009490:	4632      	mov	r2, r6
 8009492:	4649      	mov	r1, r9
 8009494:	4640      	mov	r0, r8
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	47d0      	blx	sl
 800949a:	3001      	adds	r0, #1
 800949c:	d0ab      	beq.n	80093f6 <_printf_i+0x166>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	079b      	lsls	r3, r3, #30
 80094a2:	d413      	bmi.n	80094cc <_printf_i+0x23c>
 80094a4:	68e0      	ldr	r0, [r4, #12]
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	4298      	cmp	r0, r3
 80094aa:	bfb8      	it	lt
 80094ac:	4618      	movlt	r0, r3
 80094ae:	e7a4      	b.n	80093fa <_printf_i+0x16a>
 80094b0:	2301      	movs	r3, #1
 80094b2:	4632      	mov	r2, r6
 80094b4:	4649      	mov	r1, r9
 80094b6:	4640      	mov	r0, r8
 80094b8:	47d0      	blx	sl
 80094ba:	3001      	adds	r0, #1
 80094bc:	d09b      	beq.n	80093f6 <_printf_i+0x166>
 80094be:	3501      	adds	r5, #1
 80094c0:	68e3      	ldr	r3, [r4, #12]
 80094c2:	9903      	ldr	r1, [sp, #12]
 80094c4:	1a5b      	subs	r3, r3, r1
 80094c6:	42ab      	cmp	r3, r5
 80094c8:	dcf2      	bgt.n	80094b0 <_printf_i+0x220>
 80094ca:	e7eb      	b.n	80094a4 <_printf_i+0x214>
 80094cc:	2500      	movs	r5, #0
 80094ce:	f104 0619 	add.w	r6, r4, #25
 80094d2:	e7f5      	b.n	80094c0 <_printf_i+0x230>
 80094d4:	0800aded 	.word	0x0800aded
 80094d8:	0800adfe 	.word	0x0800adfe

080094dc <iprintf>:
 80094dc:	b40f      	push	{r0, r1, r2, r3}
 80094de:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <iprintf+0x2c>)
 80094e0:	b513      	push	{r0, r1, r4, lr}
 80094e2:	681c      	ldr	r4, [r3, #0]
 80094e4:	b124      	cbz	r4, 80094f0 <iprintf+0x14>
 80094e6:	69a3      	ldr	r3, [r4, #24]
 80094e8:	b913      	cbnz	r3, 80094f0 <iprintf+0x14>
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 fa4e 	bl	800998c <__sinit>
 80094f0:	ab05      	add	r3, sp, #20
 80094f2:	4620      	mov	r0, r4
 80094f4:	9a04      	ldr	r2, [sp, #16]
 80094f6:	68a1      	ldr	r1, [r4, #8]
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	f7ff fd29 	bl	8008f50 <_vfiprintf_r>
 80094fe:	b002      	add	sp, #8
 8009500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009504:	b004      	add	sp, #16
 8009506:	4770      	bx	lr
 8009508:	2000000c 	.word	0x2000000c

0800950c <_sbrk_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	2300      	movs	r3, #0
 8009510:	4d05      	ldr	r5, [pc, #20]	; (8009528 <_sbrk_r+0x1c>)
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	f7fd fa60 	bl	80069dc <_sbrk>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_sbrk_r+0x1a>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_sbrk_r+0x1a>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	2000030c 	.word	0x2000030c

0800952c <siprintf>:
 800952c:	b40e      	push	{r1, r2, r3}
 800952e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009532:	b500      	push	{lr}
 8009534:	b09c      	sub	sp, #112	; 0x70
 8009536:	ab1d      	add	r3, sp, #116	; 0x74
 8009538:	9002      	str	r0, [sp, #8]
 800953a:	9006      	str	r0, [sp, #24]
 800953c:	9107      	str	r1, [sp, #28]
 800953e:	9104      	str	r1, [sp, #16]
 8009540:	4808      	ldr	r0, [pc, #32]	; (8009564 <siprintf+0x38>)
 8009542:	4909      	ldr	r1, [pc, #36]	; (8009568 <siprintf+0x3c>)
 8009544:	f853 2b04 	ldr.w	r2, [r3], #4
 8009548:	9105      	str	r1, [sp, #20]
 800954a:	6800      	ldr	r0, [r0, #0]
 800954c:	a902      	add	r1, sp, #8
 800954e:	9301      	str	r3, [sp, #4]
 8009550:	f000 fbd6 	bl	8009d00 <_svfiprintf_r>
 8009554:	2200      	movs	r2, #0
 8009556:	9b02      	ldr	r3, [sp, #8]
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	b01c      	add	sp, #112	; 0x70
 800955c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009560:	b003      	add	sp, #12
 8009562:	4770      	bx	lr
 8009564:	2000000c 	.word	0x2000000c
 8009568:	ffff0208 	.word	0xffff0208

0800956c <strchr>:
 800956c:	4603      	mov	r3, r0
 800956e:	b2c9      	uxtb	r1, r1
 8009570:	4618      	mov	r0, r3
 8009572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009576:	b112      	cbz	r2, 800957e <strchr+0x12>
 8009578:	428a      	cmp	r2, r1
 800957a:	d1f9      	bne.n	8009570 <strchr+0x4>
 800957c:	4770      	bx	lr
 800957e:	2900      	cmp	r1, #0
 8009580:	bf18      	it	ne
 8009582:	2000      	movne	r0, #0
 8009584:	4770      	bx	lr

08009586 <strcspn>:
 8009586:	4603      	mov	r3, r0
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	461e      	mov	r6, r3
 800958c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009590:	b144      	cbz	r4, 80095a4 <strcspn+0x1e>
 8009592:	1e4a      	subs	r2, r1, #1
 8009594:	e001      	b.n	800959a <strcspn+0x14>
 8009596:	42a5      	cmp	r5, r4
 8009598:	d004      	beq.n	80095a4 <strcspn+0x1e>
 800959a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800959e:	2d00      	cmp	r5, #0
 80095a0:	d1f9      	bne.n	8009596 <strcspn+0x10>
 80095a2:	e7f2      	b.n	800958a <strcspn+0x4>
 80095a4:	1a30      	subs	r0, r6, r0
 80095a6:	bd70      	pop	{r4, r5, r6, pc}

080095a8 <strspn>:
 80095a8:	4603      	mov	r3, r0
 80095aa:	b570      	push	{r4, r5, r6, lr}
 80095ac:	461e      	mov	r6, r3
 80095ae:	f813 4b01 	ldrb.w	r4, [r3], #1
 80095b2:	b13c      	cbz	r4, 80095c4 <strspn+0x1c>
 80095b4:	1e4a      	subs	r2, r1, #1
 80095b6:	e001      	b.n	80095bc <strspn+0x14>
 80095b8:	42a5      	cmp	r5, r4
 80095ba:	d0f7      	beq.n	80095ac <strspn+0x4>
 80095bc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80095c0:	2d00      	cmp	r5, #0
 80095c2:	d1f9      	bne.n	80095b8 <strspn+0x10>
 80095c4:	1a30      	subs	r0, r6, r0
 80095c6:	bd70      	pop	{r4, r5, r6, pc}

080095c8 <__swbuf_r>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	460e      	mov	r6, r1
 80095cc:	4614      	mov	r4, r2
 80095ce:	4605      	mov	r5, r0
 80095d0:	b118      	cbz	r0, 80095da <__swbuf_r+0x12>
 80095d2:	6983      	ldr	r3, [r0, #24]
 80095d4:	b90b      	cbnz	r3, 80095da <__swbuf_r+0x12>
 80095d6:	f000 f9d9 	bl	800998c <__sinit>
 80095da:	4b21      	ldr	r3, [pc, #132]	; (8009660 <__swbuf_r+0x98>)
 80095dc:	429c      	cmp	r4, r3
 80095de:	d12b      	bne.n	8009638 <__swbuf_r+0x70>
 80095e0:	686c      	ldr	r4, [r5, #4]
 80095e2:	69a3      	ldr	r3, [r4, #24]
 80095e4:	60a3      	str	r3, [r4, #8]
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	071a      	lsls	r2, r3, #28
 80095ea:	d52f      	bpl.n	800964c <__swbuf_r+0x84>
 80095ec:	6923      	ldr	r3, [r4, #16]
 80095ee:	b36b      	cbz	r3, 800964c <__swbuf_r+0x84>
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	6820      	ldr	r0, [r4, #0]
 80095f4:	b2f6      	uxtb	r6, r6
 80095f6:	1ac0      	subs	r0, r0, r3
 80095f8:	6963      	ldr	r3, [r4, #20]
 80095fa:	4637      	mov	r7, r6
 80095fc:	4283      	cmp	r3, r0
 80095fe:	dc04      	bgt.n	800960a <__swbuf_r+0x42>
 8009600:	4621      	mov	r1, r4
 8009602:	4628      	mov	r0, r5
 8009604:	f000 f92e 	bl	8009864 <_fflush_r>
 8009608:	bb30      	cbnz	r0, 8009658 <__swbuf_r+0x90>
 800960a:	68a3      	ldr	r3, [r4, #8]
 800960c:	3001      	adds	r0, #1
 800960e:	3b01      	subs	r3, #1
 8009610:	60a3      	str	r3, [r4, #8]
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	1c5a      	adds	r2, r3, #1
 8009616:	6022      	str	r2, [r4, #0]
 8009618:	701e      	strb	r6, [r3, #0]
 800961a:	6963      	ldr	r3, [r4, #20]
 800961c:	4283      	cmp	r3, r0
 800961e:	d004      	beq.n	800962a <__swbuf_r+0x62>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	07db      	lsls	r3, r3, #31
 8009624:	d506      	bpl.n	8009634 <__swbuf_r+0x6c>
 8009626:	2e0a      	cmp	r6, #10
 8009628:	d104      	bne.n	8009634 <__swbuf_r+0x6c>
 800962a:	4621      	mov	r1, r4
 800962c:	4628      	mov	r0, r5
 800962e:	f000 f919 	bl	8009864 <_fflush_r>
 8009632:	b988      	cbnz	r0, 8009658 <__swbuf_r+0x90>
 8009634:	4638      	mov	r0, r7
 8009636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009638:	4b0a      	ldr	r3, [pc, #40]	; (8009664 <__swbuf_r+0x9c>)
 800963a:	429c      	cmp	r4, r3
 800963c:	d101      	bne.n	8009642 <__swbuf_r+0x7a>
 800963e:	68ac      	ldr	r4, [r5, #8]
 8009640:	e7cf      	b.n	80095e2 <__swbuf_r+0x1a>
 8009642:	4b09      	ldr	r3, [pc, #36]	; (8009668 <__swbuf_r+0xa0>)
 8009644:	429c      	cmp	r4, r3
 8009646:	bf08      	it	eq
 8009648:	68ec      	ldreq	r4, [r5, #12]
 800964a:	e7ca      	b.n	80095e2 <__swbuf_r+0x1a>
 800964c:	4621      	mov	r1, r4
 800964e:	4628      	mov	r0, r5
 8009650:	f000 f80c 	bl	800966c <__swsetup_r>
 8009654:	2800      	cmp	r0, #0
 8009656:	d0cb      	beq.n	80095f0 <__swbuf_r+0x28>
 8009658:	f04f 37ff 	mov.w	r7, #4294967295
 800965c:	e7ea      	b.n	8009634 <__swbuf_r+0x6c>
 800965e:	bf00      	nop
 8009660:	0800ae30 	.word	0x0800ae30
 8009664:	0800ae50 	.word	0x0800ae50
 8009668:	0800ae10 	.word	0x0800ae10

0800966c <__swsetup_r>:
 800966c:	4b32      	ldr	r3, [pc, #200]	; (8009738 <__swsetup_r+0xcc>)
 800966e:	b570      	push	{r4, r5, r6, lr}
 8009670:	681d      	ldr	r5, [r3, #0]
 8009672:	4606      	mov	r6, r0
 8009674:	460c      	mov	r4, r1
 8009676:	b125      	cbz	r5, 8009682 <__swsetup_r+0x16>
 8009678:	69ab      	ldr	r3, [r5, #24]
 800967a:	b913      	cbnz	r3, 8009682 <__swsetup_r+0x16>
 800967c:	4628      	mov	r0, r5
 800967e:	f000 f985 	bl	800998c <__sinit>
 8009682:	4b2e      	ldr	r3, [pc, #184]	; (800973c <__swsetup_r+0xd0>)
 8009684:	429c      	cmp	r4, r3
 8009686:	d10f      	bne.n	80096a8 <__swsetup_r+0x3c>
 8009688:	686c      	ldr	r4, [r5, #4]
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009690:	0719      	lsls	r1, r3, #28
 8009692:	d42c      	bmi.n	80096ee <__swsetup_r+0x82>
 8009694:	06dd      	lsls	r5, r3, #27
 8009696:	d411      	bmi.n	80096bc <__swsetup_r+0x50>
 8009698:	2309      	movs	r3, #9
 800969a:	6033      	str	r3, [r6, #0]
 800969c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096a0:	f04f 30ff 	mov.w	r0, #4294967295
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	e03e      	b.n	8009726 <__swsetup_r+0xba>
 80096a8:	4b25      	ldr	r3, [pc, #148]	; (8009740 <__swsetup_r+0xd4>)
 80096aa:	429c      	cmp	r4, r3
 80096ac:	d101      	bne.n	80096b2 <__swsetup_r+0x46>
 80096ae:	68ac      	ldr	r4, [r5, #8]
 80096b0:	e7eb      	b.n	800968a <__swsetup_r+0x1e>
 80096b2:	4b24      	ldr	r3, [pc, #144]	; (8009744 <__swsetup_r+0xd8>)
 80096b4:	429c      	cmp	r4, r3
 80096b6:	bf08      	it	eq
 80096b8:	68ec      	ldreq	r4, [r5, #12]
 80096ba:	e7e6      	b.n	800968a <__swsetup_r+0x1e>
 80096bc:	0758      	lsls	r0, r3, #29
 80096be:	d512      	bpl.n	80096e6 <__swsetup_r+0x7a>
 80096c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096c2:	b141      	cbz	r1, 80096d6 <__swsetup_r+0x6a>
 80096c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096c8:	4299      	cmp	r1, r3
 80096ca:	d002      	beq.n	80096d2 <__swsetup_r+0x66>
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7ff fb71 	bl	8008db4 <_free_r>
 80096d2:	2300      	movs	r3, #0
 80096d4:	6363      	str	r3, [r4, #52]	; 0x34
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096dc:	81a3      	strh	r3, [r4, #12]
 80096de:	2300      	movs	r3, #0
 80096e0:	6063      	str	r3, [r4, #4]
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	f043 0308 	orr.w	r3, r3, #8
 80096ec:	81a3      	strh	r3, [r4, #12]
 80096ee:	6923      	ldr	r3, [r4, #16]
 80096f0:	b94b      	cbnz	r3, 8009706 <__swsetup_r+0x9a>
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096fc:	d003      	beq.n	8009706 <__swsetup_r+0x9a>
 80096fe:	4621      	mov	r1, r4
 8009700:	4630      	mov	r0, r6
 8009702:	f000 fa07 	bl	8009b14 <__smakebuf_r>
 8009706:	89a0      	ldrh	r0, [r4, #12]
 8009708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800970c:	f010 0301 	ands.w	r3, r0, #1
 8009710:	d00a      	beq.n	8009728 <__swsetup_r+0xbc>
 8009712:	2300      	movs	r3, #0
 8009714:	60a3      	str	r3, [r4, #8]
 8009716:	6963      	ldr	r3, [r4, #20]
 8009718:	425b      	negs	r3, r3
 800971a:	61a3      	str	r3, [r4, #24]
 800971c:	6923      	ldr	r3, [r4, #16]
 800971e:	b943      	cbnz	r3, 8009732 <__swsetup_r+0xc6>
 8009720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009724:	d1ba      	bne.n	800969c <__swsetup_r+0x30>
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	0781      	lsls	r1, r0, #30
 800972a:	bf58      	it	pl
 800972c:	6963      	ldrpl	r3, [r4, #20]
 800972e:	60a3      	str	r3, [r4, #8]
 8009730:	e7f4      	b.n	800971c <__swsetup_r+0xb0>
 8009732:	2000      	movs	r0, #0
 8009734:	e7f7      	b.n	8009726 <__swsetup_r+0xba>
 8009736:	bf00      	nop
 8009738:	2000000c 	.word	0x2000000c
 800973c:	0800ae30 	.word	0x0800ae30
 8009740:	0800ae50 	.word	0x0800ae50
 8009744:	0800ae10 	.word	0x0800ae10

08009748 <abort>:
 8009748:	2006      	movs	r0, #6
 800974a:	b508      	push	{r3, lr}
 800974c:	f000 fc00 	bl	8009f50 <raise>
 8009750:	2001      	movs	r0, #1
 8009752:	f7fd f8d0 	bl	80068f6 <_exit>
	...

08009758 <__sflush_r>:
 8009758:	898a      	ldrh	r2, [r1, #12]
 800975a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800975e:	4605      	mov	r5, r0
 8009760:	0710      	lsls	r0, r2, #28
 8009762:	460c      	mov	r4, r1
 8009764:	d458      	bmi.n	8009818 <__sflush_r+0xc0>
 8009766:	684b      	ldr	r3, [r1, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	dc05      	bgt.n	8009778 <__sflush_r+0x20>
 800976c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800976e:	2b00      	cmp	r3, #0
 8009770:	dc02      	bgt.n	8009778 <__sflush_r+0x20>
 8009772:	2000      	movs	r0, #0
 8009774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800977a:	2e00      	cmp	r6, #0
 800977c:	d0f9      	beq.n	8009772 <__sflush_r+0x1a>
 800977e:	2300      	movs	r3, #0
 8009780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009784:	682f      	ldr	r7, [r5, #0]
 8009786:	602b      	str	r3, [r5, #0]
 8009788:	d032      	beq.n	80097f0 <__sflush_r+0x98>
 800978a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	075a      	lsls	r2, r3, #29
 8009790:	d505      	bpl.n	800979e <__sflush_r+0x46>
 8009792:	6863      	ldr	r3, [r4, #4]
 8009794:	1ac0      	subs	r0, r0, r3
 8009796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009798:	b10b      	cbz	r3, 800979e <__sflush_r+0x46>
 800979a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800979c:	1ac0      	subs	r0, r0, r3
 800979e:	2300      	movs	r3, #0
 80097a0:	4602      	mov	r2, r0
 80097a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097a4:	4628      	mov	r0, r5
 80097a6:	6a21      	ldr	r1, [r4, #32]
 80097a8:	47b0      	blx	r6
 80097aa:	1c43      	adds	r3, r0, #1
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	d106      	bne.n	80097be <__sflush_r+0x66>
 80097b0:	6829      	ldr	r1, [r5, #0]
 80097b2:	291d      	cmp	r1, #29
 80097b4:	d82c      	bhi.n	8009810 <__sflush_r+0xb8>
 80097b6:	4a2a      	ldr	r2, [pc, #168]	; (8009860 <__sflush_r+0x108>)
 80097b8:	40ca      	lsrs	r2, r1
 80097ba:	07d6      	lsls	r6, r2, #31
 80097bc:	d528      	bpl.n	8009810 <__sflush_r+0xb8>
 80097be:	2200      	movs	r2, #0
 80097c0:	6062      	str	r2, [r4, #4]
 80097c2:	6922      	ldr	r2, [r4, #16]
 80097c4:	04d9      	lsls	r1, r3, #19
 80097c6:	6022      	str	r2, [r4, #0]
 80097c8:	d504      	bpl.n	80097d4 <__sflush_r+0x7c>
 80097ca:	1c42      	adds	r2, r0, #1
 80097cc:	d101      	bne.n	80097d2 <__sflush_r+0x7a>
 80097ce:	682b      	ldr	r3, [r5, #0]
 80097d0:	b903      	cbnz	r3, 80097d4 <__sflush_r+0x7c>
 80097d2:	6560      	str	r0, [r4, #84]	; 0x54
 80097d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097d6:	602f      	str	r7, [r5, #0]
 80097d8:	2900      	cmp	r1, #0
 80097da:	d0ca      	beq.n	8009772 <__sflush_r+0x1a>
 80097dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097e0:	4299      	cmp	r1, r3
 80097e2:	d002      	beq.n	80097ea <__sflush_r+0x92>
 80097e4:	4628      	mov	r0, r5
 80097e6:	f7ff fae5 	bl	8008db4 <_free_r>
 80097ea:	2000      	movs	r0, #0
 80097ec:	6360      	str	r0, [r4, #52]	; 0x34
 80097ee:	e7c1      	b.n	8009774 <__sflush_r+0x1c>
 80097f0:	6a21      	ldr	r1, [r4, #32]
 80097f2:	2301      	movs	r3, #1
 80097f4:	4628      	mov	r0, r5
 80097f6:	47b0      	blx	r6
 80097f8:	1c41      	adds	r1, r0, #1
 80097fa:	d1c7      	bne.n	800978c <__sflush_r+0x34>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d0c4      	beq.n	800978c <__sflush_r+0x34>
 8009802:	2b1d      	cmp	r3, #29
 8009804:	d001      	beq.n	800980a <__sflush_r+0xb2>
 8009806:	2b16      	cmp	r3, #22
 8009808:	d101      	bne.n	800980e <__sflush_r+0xb6>
 800980a:	602f      	str	r7, [r5, #0]
 800980c:	e7b1      	b.n	8009772 <__sflush_r+0x1a>
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009814:	81a3      	strh	r3, [r4, #12]
 8009816:	e7ad      	b.n	8009774 <__sflush_r+0x1c>
 8009818:	690f      	ldr	r7, [r1, #16]
 800981a:	2f00      	cmp	r7, #0
 800981c:	d0a9      	beq.n	8009772 <__sflush_r+0x1a>
 800981e:	0793      	lsls	r3, r2, #30
 8009820:	bf18      	it	ne
 8009822:	2300      	movne	r3, #0
 8009824:	680e      	ldr	r6, [r1, #0]
 8009826:	bf08      	it	eq
 8009828:	694b      	ldreq	r3, [r1, #20]
 800982a:	eba6 0807 	sub.w	r8, r6, r7
 800982e:	600f      	str	r7, [r1, #0]
 8009830:	608b      	str	r3, [r1, #8]
 8009832:	f1b8 0f00 	cmp.w	r8, #0
 8009836:	dd9c      	ble.n	8009772 <__sflush_r+0x1a>
 8009838:	4643      	mov	r3, r8
 800983a:	463a      	mov	r2, r7
 800983c:	4628      	mov	r0, r5
 800983e:	6a21      	ldr	r1, [r4, #32]
 8009840:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009842:	47b0      	blx	r6
 8009844:	2800      	cmp	r0, #0
 8009846:	dc06      	bgt.n	8009856 <__sflush_r+0xfe>
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	f04f 30ff 	mov.w	r0, #4294967295
 800984e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009852:	81a3      	strh	r3, [r4, #12]
 8009854:	e78e      	b.n	8009774 <__sflush_r+0x1c>
 8009856:	4407      	add	r7, r0
 8009858:	eba8 0800 	sub.w	r8, r8, r0
 800985c:	e7e9      	b.n	8009832 <__sflush_r+0xda>
 800985e:	bf00      	nop
 8009860:	20400001 	.word	0x20400001

08009864 <_fflush_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	690b      	ldr	r3, [r1, #16]
 8009868:	4605      	mov	r5, r0
 800986a:	460c      	mov	r4, r1
 800986c:	b913      	cbnz	r3, 8009874 <_fflush_r+0x10>
 800986e:	2500      	movs	r5, #0
 8009870:	4628      	mov	r0, r5
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	b118      	cbz	r0, 800987e <_fflush_r+0x1a>
 8009876:	6983      	ldr	r3, [r0, #24]
 8009878:	b90b      	cbnz	r3, 800987e <_fflush_r+0x1a>
 800987a:	f000 f887 	bl	800998c <__sinit>
 800987e:	4b14      	ldr	r3, [pc, #80]	; (80098d0 <_fflush_r+0x6c>)
 8009880:	429c      	cmp	r4, r3
 8009882:	d11b      	bne.n	80098bc <_fflush_r+0x58>
 8009884:	686c      	ldr	r4, [r5, #4]
 8009886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0ef      	beq.n	800986e <_fflush_r+0xa>
 800988e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009890:	07d0      	lsls	r0, r2, #31
 8009892:	d404      	bmi.n	800989e <_fflush_r+0x3a>
 8009894:	0599      	lsls	r1, r3, #22
 8009896:	d402      	bmi.n	800989e <_fflush_r+0x3a>
 8009898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800989a:	f000 f915 	bl	8009ac8 <__retarget_lock_acquire_recursive>
 800989e:	4628      	mov	r0, r5
 80098a0:	4621      	mov	r1, r4
 80098a2:	f7ff ff59 	bl	8009758 <__sflush_r>
 80098a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098a8:	4605      	mov	r5, r0
 80098aa:	07da      	lsls	r2, r3, #31
 80098ac:	d4e0      	bmi.n	8009870 <_fflush_r+0xc>
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	059b      	lsls	r3, r3, #22
 80098b2:	d4dd      	bmi.n	8009870 <_fflush_r+0xc>
 80098b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098b6:	f000 f908 	bl	8009aca <__retarget_lock_release_recursive>
 80098ba:	e7d9      	b.n	8009870 <_fflush_r+0xc>
 80098bc:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <_fflush_r+0x70>)
 80098be:	429c      	cmp	r4, r3
 80098c0:	d101      	bne.n	80098c6 <_fflush_r+0x62>
 80098c2:	68ac      	ldr	r4, [r5, #8]
 80098c4:	e7df      	b.n	8009886 <_fflush_r+0x22>
 80098c6:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <_fflush_r+0x74>)
 80098c8:	429c      	cmp	r4, r3
 80098ca:	bf08      	it	eq
 80098cc:	68ec      	ldreq	r4, [r5, #12]
 80098ce:	e7da      	b.n	8009886 <_fflush_r+0x22>
 80098d0:	0800ae30 	.word	0x0800ae30
 80098d4:	0800ae50 	.word	0x0800ae50
 80098d8:	0800ae10 	.word	0x0800ae10

080098dc <std>:
 80098dc:	2300      	movs	r3, #0
 80098de:	b510      	push	{r4, lr}
 80098e0:	4604      	mov	r4, r0
 80098e2:	e9c0 3300 	strd	r3, r3, [r0]
 80098e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098ea:	6083      	str	r3, [r0, #8]
 80098ec:	8181      	strh	r1, [r0, #12]
 80098ee:	6643      	str	r3, [r0, #100]	; 0x64
 80098f0:	81c2      	strh	r2, [r0, #14]
 80098f2:	6183      	str	r3, [r0, #24]
 80098f4:	4619      	mov	r1, r3
 80098f6:	2208      	movs	r2, #8
 80098f8:	305c      	adds	r0, #92	; 0x5c
 80098fa:	f7ff fa53 	bl	8008da4 <memset>
 80098fe:	4b05      	ldr	r3, [pc, #20]	; (8009914 <std+0x38>)
 8009900:	6224      	str	r4, [r4, #32]
 8009902:	6263      	str	r3, [r4, #36]	; 0x24
 8009904:	4b04      	ldr	r3, [pc, #16]	; (8009918 <std+0x3c>)
 8009906:	62a3      	str	r3, [r4, #40]	; 0x28
 8009908:	4b04      	ldr	r3, [pc, #16]	; (800991c <std+0x40>)
 800990a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800990c:	4b04      	ldr	r3, [pc, #16]	; (8009920 <std+0x44>)
 800990e:	6323      	str	r3, [r4, #48]	; 0x30
 8009910:	bd10      	pop	{r4, pc}
 8009912:	bf00      	nop
 8009914:	08009f89 	.word	0x08009f89
 8009918:	08009fab 	.word	0x08009fab
 800991c:	08009fe3 	.word	0x08009fe3
 8009920:	0800a007 	.word	0x0800a007

08009924 <_cleanup_r>:
 8009924:	4901      	ldr	r1, [pc, #4]	; (800992c <_cleanup_r+0x8>)
 8009926:	f000 b8af 	b.w	8009a88 <_fwalk_reent>
 800992a:	bf00      	nop
 800992c:	08009865 	.word	0x08009865

08009930 <__sfmoreglue>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	2568      	movs	r5, #104	; 0x68
 8009934:	1e4a      	subs	r2, r1, #1
 8009936:	4355      	muls	r5, r2
 8009938:	460e      	mov	r6, r1
 800993a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800993e:	f7ff fa85 	bl	8008e4c <_malloc_r>
 8009942:	4604      	mov	r4, r0
 8009944:	b140      	cbz	r0, 8009958 <__sfmoreglue+0x28>
 8009946:	2100      	movs	r1, #0
 8009948:	e9c0 1600 	strd	r1, r6, [r0]
 800994c:	300c      	adds	r0, #12
 800994e:	60a0      	str	r0, [r4, #8]
 8009950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009954:	f7ff fa26 	bl	8008da4 <memset>
 8009958:	4620      	mov	r0, r4
 800995a:	bd70      	pop	{r4, r5, r6, pc}

0800995c <__sfp_lock_acquire>:
 800995c:	4801      	ldr	r0, [pc, #4]	; (8009964 <__sfp_lock_acquire+0x8>)
 800995e:	f000 b8b3 	b.w	8009ac8 <__retarget_lock_acquire_recursive>
 8009962:	bf00      	nop
 8009964:	20000308 	.word	0x20000308

08009968 <__sfp_lock_release>:
 8009968:	4801      	ldr	r0, [pc, #4]	; (8009970 <__sfp_lock_release+0x8>)
 800996a:	f000 b8ae 	b.w	8009aca <__retarget_lock_release_recursive>
 800996e:	bf00      	nop
 8009970:	20000308 	.word	0x20000308

08009974 <__sinit_lock_acquire>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__sinit_lock_acquire+0x8>)
 8009976:	f000 b8a7 	b.w	8009ac8 <__retarget_lock_acquire_recursive>
 800997a:	bf00      	nop
 800997c:	20000303 	.word	0x20000303

08009980 <__sinit_lock_release>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__sinit_lock_release+0x8>)
 8009982:	f000 b8a2 	b.w	8009aca <__retarget_lock_release_recursive>
 8009986:	bf00      	nop
 8009988:	20000303 	.word	0x20000303

0800998c <__sinit>:
 800998c:	b510      	push	{r4, lr}
 800998e:	4604      	mov	r4, r0
 8009990:	f7ff fff0 	bl	8009974 <__sinit_lock_acquire>
 8009994:	69a3      	ldr	r3, [r4, #24]
 8009996:	b11b      	cbz	r3, 80099a0 <__sinit+0x14>
 8009998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800999c:	f7ff bff0 	b.w	8009980 <__sinit_lock_release>
 80099a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099a4:	6523      	str	r3, [r4, #80]	; 0x50
 80099a6:	4b13      	ldr	r3, [pc, #76]	; (80099f4 <__sinit+0x68>)
 80099a8:	4a13      	ldr	r2, [pc, #76]	; (80099f8 <__sinit+0x6c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80099ae:	42a3      	cmp	r3, r4
 80099b0:	bf08      	it	eq
 80099b2:	2301      	moveq	r3, #1
 80099b4:	4620      	mov	r0, r4
 80099b6:	bf08      	it	eq
 80099b8:	61a3      	streq	r3, [r4, #24]
 80099ba:	f000 f81f 	bl	80099fc <__sfp>
 80099be:	6060      	str	r0, [r4, #4]
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 f81b 	bl	80099fc <__sfp>
 80099c6:	60a0      	str	r0, [r4, #8]
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 f817 	bl	80099fc <__sfp>
 80099ce:	2200      	movs	r2, #0
 80099d0:	2104      	movs	r1, #4
 80099d2:	60e0      	str	r0, [r4, #12]
 80099d4:	6860      	ldr	r0, [r4, #4]
 80099d6:	f7ff ff81 	bl	80098dc <std>
 80099da:	2201      	movs	r2, #1
 80099dc:	2109      	movs	r1, #9
 80099de:	68a0      	ldr	r0, [r4, #8]
 80099e0:	f7ff ff7c 	bl	80098dc <std>
 80099e4:	2202      	movs	r2, #2
 80099e6:	2112      	movs	r1, #18
 80099e8:	68e0      	ldr	r0, [r4, #12]
 80099ea:	f7ff ff77 	bl	80098dc <std>
 80099ee:	2301      	movs	r3, #1
 80099f0:	61a3      	str	r3, [r4, #24]
 80099f2:	e7d1      	b.n	8009998 <__sinit+0xc>
 80099f4:	0800add8 	.word	0x0800add8
 80099f8:	08009925 	.word	0x08009925

080099fc <__sfp>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	4607      	mov	r7, r0
 8009a00:	f7ff ffac 	bl	800995c <__sfp_lock_acquire>
 8009a04:	4b1e      	ldr	r3, [pc, #120]	; (8009a80 <__sfp+0x84>)
 8009a06:	681e      	ldr	r6, [r3, #0]
 8009a08:	69b3      	ldr	r3, [r6, #24]
 8009a0a:	b913      	cbnz	r3, 8009a12 <__sfp+0x16>
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f7ff ffbd 	bl	800998c <__sinit>
 8009a12:	3648      	adds	r6, #72	; 0x48
 8009a14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	d503      	bpl.n	8009a24 <__sfp+0x28>
 8009a1c:	6833      	ldr	r3, [r6, #0]
 8009a1e:	b30b      	cbz	r3, 8009a64 <__sfp+0x68>
 8009a20:	6836      	ldr	r6, [r6, #0]
 8009a22:	e7f7      	b.n	8009a14 <__sfp+0x18>
 8009a24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a28:	b9d5      	cbnz	r5, 8009a60 <__sfp+0x64>
 8009a2a:	4b16      	ldr	r3, [pc, #88]	; (8009a84 <__sfp+0x88>)
 8009a2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a30:	60e3      	str	r3, [r4, #12]
 8009a32:	6665      	str	r5, [r4, #100]	; 0x64
 8009a34:	f000 f847 	bl	8009ac6 <__retarget_lock_init_recursive>
 8009a38:	f7ff ff96 	bl	8009968 <__sfp_lock_release>
 8009a3c:	2208      	movs	r2, #8
 8009a3e:	4629      	mov	r1, r5
 8009a40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a48:	6025      	str	r5, [r4, #0]
 8009a4a:	61a5      	str	r5, [r4, #24]
 8009a4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a50:	f7ff f9a8 	bl	8008da4 <memset>
 8009a54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a60:	3468      	adds	r4, #104	; 0x68
 8009a62:	e7d9      	b.n	8009a18 <__sfp+0x1c>
 8009a64:	2104      	movs	r1, #4
 8009a66:	4638      	mov	r0, r7
 8009a68:	f7ff ff62 	bl	8009930 <__sfmoreglue>
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	6030      	str	r0, [r6, #0]
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d1d5      	bne.n	8009a20 <__sfp+0x24>
 8009a74:	f7ff ff78 	bl	8009968 <__sfp_lock_release>
 8009a78:	230c      	movs	r3, #12
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	e7ee      	b.n	8009a5c <__sfp+0x60>
 8009a7e:	bf00      	nop
 8009a80:	0800add8 	.word	0x0800add8
 8009a84:	ffff0001 	.word	0xffff0001

08009a88 <_fwalk_reent>:
 8009a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a8c:	4606      	mov	r6, r0
 8009a8e:	4688      	mov	r8, r1
 8009a90:	2700      	movs	r7, #0
 8009a92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a9a:	f1b9 0901 	subs.w	r9, r9, #1
 8009a9e:	d505      	bpl.n	8009aac <_fwalk_reent+0x24>
 8009aa0:	6824      	ldr	r4, [r4, #0]
 8009aa2:	2c00      	cmp	r4, #0
 8009aa4:	d1f7      	bne.n	8009a96 <_fwalk_reent+0xe>
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aac:	89ab      	ldrh	r3, [r5, #12]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d907      	bls.n	8009ac2 <_fwalk_reent+0x3a>
 8009ab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	d003      	beq.n	8009ac2 <_fwalk_reent+0x3a>
 8009aba:	4629      	mov	r1, r5
 8009abc:	4630      	mov	r0, r6
 8009abe:	47c0      	blx	r8
 8009ac0:	4307      	orrs	r7, r0
 8009ac2:	3568      	adds	r5, #104	; 0x68
 8009ac4:	e7e9      	b.n	8009a9a <_fwalk_reent+0x12>

08009ac6 <__retarget_lock_init_recursive>:
 8009ac6:	4770      	bx	lr

08009ac8 <__retarget_lock_acquire_recursive>:
 8009ac8:	4770      	bx	lr

08009aca <__retarget_lock_release_recursive>:
 8009aca:	4770      	bx	lr

08009acc <__swhatbuf_r>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	460e      	mov	r6, r1
 8009ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad4:	4614      	mov	r4, r2
 8009ad6:	2900      	cmp	r1, #0
 8009ad8:	461d      	mov	r5, r3
 8009ada:	b096      	sub	sp, #88	; 0x58
 8009adc:	da07      	bge.n	8009aee <__swhatbuf_r+0x22>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	602b      	str	r3, [r5, #0]
 8009ae2:	89b3      	ldrh	r3, [r6, #12]
 8009ae4:	061a      	lsls	r2, r3, #24
 8009ae6:	d410      	bmi.n	8009b0a <__swhatbuf_r+0x3e>
 8009ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aec:	e00e      	b.n	8009b0c <__swhatbuf_r+0x40>
 8009aee:	466a      	mov	r2, sp
 8009af0:	f000 fab0 	bl	800a054 <_fstat_r>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	dbf2      	blt.n	8009ade <__swhatbuf_r+0x12>
 8009af8:	9a01      	ldr	r2, [sp, #4]
 8009afa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009afe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b02:	425a      	negs	r2, r3
 8009b04:	415a      	adcs	r2, r3
 8009b06:	602a      	str	r2, [r5, #0]
 8009b08:	e7ee      	b.n	8009ae8 <__swhatbuf_r+0x1c>
 8009b0a:	2340      	movs	r3, #64	; 0x40
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	b016      	add	sp, #88	; 0x58
 8009b12:	bd70      	pop	{r4, r5, r6, pc}

08009b14 <__smakebuf_r>:
 8009b14:	898b      	ldrh	r3, [r1, #12]
 8009b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b18:	079d      	lsls	r5, r3, #30
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	d507      	bpl.n	8009b30 <__smakebuf_r+0x1c>
 8009b20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	6123      	str	r3, [r4, #16]
 8009b28:	2301      	movs	r3, #1
 8009b2a:	6163      	str	r3, [r4, #20]
 8009b2c:	b002      	add	sp, #8
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	466a      	mov	r2, sp
 8009b32:	ab01      	add	r3, sp, #4
 8009b34:	f7ff ffca 	bl	8009acc <__swhatbuf_r>
 8009b38:	9900      	ldr	r1, [sp, #0]
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f7ff f985 	bl	8008e4c <_malloc_r>
 8009b42:	b948      	cbnz	r0, 8009b58 <__smakebuf_r+0x44>
 8009b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b48:	059a      	lsls	r2, r3, #22
 8009b4a:	d4ef      	bmi.n	8009b2c <__smakebuf_r+0x18>
 8009b4c:	f023 0303 	bic.w	r3, r3, #3
 8009b50:	f043 0302 	orr.w	r3, r3, #2
 8009b54:	81a3      	strh	r3, [r4, #12]
 8009b56:	e7e3      	b.n	8009b20 <__smakebuf_r+0xc>
 8009b58:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <__smakebuf_r+0x7c>)
 8009b5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	6020      	str	r0, [r4, #0]
 8009b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b64:	81a3      	strh	r3, [r4, #12]
 8009b66:	9b00      	ldr	r3, [sp, #0]
 8009b68:	6120      	str	r0, [r4, #16]
 8009b6a:	6163      	str	r3, [r4, #20]
 8009b6c:	9b01      	ldr	r3, [sp, #4]
 8009b6e:	b15b      	cbz	r3, 8009b88 <__smakebuf_r+0x74>
 8009b70:	4630      	mov	r0, r6
 8009b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b76:	f000 fa7f 	bl	800a078 <_isatty_r>
 8009b7a:	b128      	cbz	r0, 8009b88 <__smakebuf_r+0x74>
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	f023 0303 	bic.w	r3, r3, #3
 8009b82:	f043 0301 	orr.w	r3, r3, #1
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	89a0      	ldrh	r0, [r4, #12]
 8009b8a:	4305      	orrs	r5, r0
 8009b8c:	81a5      	strh	r5, [r4, #12]
 8009b8e:	e7cd      	b.n	8009b2c <__smakebuf_r+0x18>
 8009b90:	08009925 	.word	0x08009925

08009b94 <memchr>:
 8009b94:	4603      	mov	r3, r0
 8009b96:	b510      	push	{r4, lr}
 8009b98:	b2c9      	uxtb	r1, r1
 8009b9a:	4402      	add	r2, r0
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	d101      	bne.n	8009ba6 <memchr+0x12>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	e003      	b.n	8009bae <memchr+0x1a>
 8009ba6:	7804      	ldrb	r4, [r0, #0]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	428c      	cmp	r4, r1
 8009bac:	d1f6      	bne.n	8009b9c <memchr+0x8>
 8009bae:	bd10      	pop	{r4, pc}

08009bb0 <memmove>:
 8009bb0:	4288      	cmp	r0, r1
 8009bb2:	b510      	push	{r4, lr}
 8009bb4:	eb01 0402 	add.w	r4, r1, r2
 8009bb8:	d902      	bls.n	8009bc0 <memmove+0x10>
 8009bba:	4284      	cmp	r4, r0
 8009bbc:	4623      	mov	r3, r4
 8009bbe:	d807      	bhi.n	8009bd0 <memmove+0x20>
 8009bc0:	1e43      	subs	r3, r0, #1
 8009bc2:	42a1      	cmp	r1, r4
 8009bc4:	d008      	beq.n	8009bd8 <memmove+0x28>
 8009bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bce:	e7f8      	b.n	8009bc2 <memmove+0x12>
 8009bd0:	4601      	mov	r1, r0
 8009bd2:	4402      	add	r2, r0
 8009bd4:	428a      	cmp	r2, r1
 8009bd6:	d100      	bne.n	8009bda <memmove+0x2a>
 8009bd8:	bd10      	pop	{r4, pc}
 8009bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009be2:	e7f7      	b.n	8009bd4 <memmove+0x24>

08009be4 <__malloc_lock>:
 8009be4:	4801      	ldr	r0, [pc, #4]	; (8009bec <__malloc_lock+0x8>)
 8009be6:	f7ff bf6f 	b.w	8009ac8 <__retarget_lock_acquire_recursive>
 8009bea:	bf00      	nop
 8009bec:	20000304 	.word	0x20000304

08009bf0 <__malloc_unlock>:
 8009bf0:	4801      	ldr	r0, [pc, #4]	; (8009bf8 <__malloc_unlock+0x8>)
 8009bf2:	f7ff bf6a 	b.w	8009aca <__retarget_lock_release_recursive>
 8009bf6:	bf00      	nop
 8009bf8:	20000304 	.word	0x20000304

08009bfc <_realloc_r>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	4607      	mov	r7, r0
 8009c00:	4614      	mov	r4, r2
 8009c02:	460e      	mov	r6, r1
 8009c04:	b921      	cbnz	r1, 8009c10 <_realloc_r+0x14>
 8009c06:	4611      	mov	r1, r2
 8009c08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c0c:	f7ff b91e 	b.w	8008e4c <_malloc_r>
 8009c10:	b922      	cbnz	r2, 8009c1c <_realloc_r+0x20>
 8009c12:	f7ff f8cf 	bl	8008db4 <_free_r>
 8009c16:	4625      	mov	r5, r4
 8009c18:	4628      	mov	r0, r5
 8009c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1c:	f000 fa4e 	bl	800a0bc <_malloc_usable_size_r>
 8009c20:	42a0      	cmp	r0, r4
 8009c22:	d20f      	bcs.n	8009c44 <_realloc_r+0x48>
 8009c24:	4621      	mov	r1, r4
 8009c26:	4638      	mov	r0, r7
 8009c28:	f7ff f910 	bl	8008e4c <_malloc_r>
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	d0f2      	beq.n	8009c18 <_realloc_r+0x1c>
 8009c32:	4631      	mov	r1, r6
 8009c34:	4622      	mov	r2, r4
 8009c36:	f7ff f8a7 	bl	8008d88 <memcpy>
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	f7ff f8b9 	bl	8008db4 <_free_r>
 8009c42:	e7e9      	b.n	8009c18 <_realloc_r+0x1c>
 8009c44:	4635      	mov	r5, r6
 8009c46:	e7e7      	b.n	8009c18 <_realloc_r+0x1c>

08009c48 <__ssputs_r>:
 8009c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4c:	688e      	ldr	r6, [r1, #8]
 8009c4e:	4682      	mov	sl, r0
 8009c50:	429e      	cmp	r6, r3
 8009c52:	460c      	mov	r4, r1
 8009c54:	4690      	mov	r8, r2
 8009c56:	461f      	mov	r7, r3
 8009c58:	d838      	bhi.n	8009ccc <__ssputs_r+0x84>
 8009c5a:	898a      	ldrh	r2, [r1, #12]
 8009c5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c60:	d032      	beq.n	8009cc8 <__ssputs_r+0x80>
 8009c62:	6825      	ldr	r5, [r4, #0]
 8009c64:	6909      	ldr	r1, [r1, #16]
 8009c66:	3301      	adds	r3, #1
 8009c68:	eba5 0901 	sub.w	r9, r5, r1
 8009c6c:	6965      	ldr	r5, [r4, #20]
 8009c6e:	444b      	add	r3, r9
 8009c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c78:	106d      	asrs	r5, r5, #1
 8009c7a:	429d      	cmp	r5, r3
 8009c7c:	bf38      	it	cc
 8009c7e:	461d      	movcc	r5, r3
 8009c80:	0553      	lsls	r3, r2, #21
 8009c82:	d531      	bpl.n	8009ce8 <__ssputs_r+0xa0>
 8009c84:	4629      	mov	r1, r5
 8009c86:	f7ff f8e1 	bl	8008e4c <_malloc_r>
 8009c8a:	4606      	mov	r6, r0
 8009c8c:	b950      	cbnz	r0, 8009ca4 <__ssputs_r+0x5c>
 8009c8e:	230c      	movs	r3, #12
 8009c90:	f04f 30ff 	mov.w	r0, #4294967295
 8009c94:	f8ca 3000 	str.w	r3, [sl]
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca4:	464a      	mov	r2, r9
 8009ca6:	6921      	ldr	r1, [r4, #16]
 8009ca8:	f7ff f86e 	bl	8008d88 <memcpy>
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb6:	81a3      	strh	r3, [r4, #12]
 8009cb8:	6126      	str	r6, [r4, #16]
 8009cba:	444e      	add	r6, r9
 8009cbc:	6026      	str	r6, [r4, #0]
 8009cbe:	463e      	mov	r6, r7
 8009cc0:	6165      	str	r5, [r4, #20]
 8009cc2:	eba5 0509 	sub.w	r5, r5, r9
 8009cc6:	60a5      	str	r5, [r4, #8]
 8009cc8:	42be      	cmp	r6, r7
 8009cca:	d900      	bls.n	8009cce <__ssputs_r+0x86>
 8009ccc:	463e      	mov	r6, r7
 8009cce:	4632      	mov	r2, r6
 8009cd0:	4641      	mov	r1, r8
 8009cd2:	6820      	ldr	r0, [r4, #0]
 8009cd4:	f7ff ff6c 	bl	8009bb0 <memmove>
 8009cd8:	68a3      	ldr	r3, [r4, #8]
 8009cda:	6822      	ldr	r2, [r4, #0]
 8009cdc:	1b9b      	subs	r3, r3, r6
 8009cde:	4432      	add	r2, r6
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	60a3      	str	r3, [r4, #8]
 8009ce4:	6022      	str	r2, [r4, #0]
 8009ce6:	e7db      	b.n	8009ca0 <__ssputs_r+0x58>
 8009ce8:	462a      	mov	r2, r5
 8009cea:	f7ff ff87 	bl	8009bfc <_realloc_r>
 8009cee:	4606      	mov	r6, r0
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d1e1      	bne.n	8009cb8 <__ssputs_r+0x70>
 8009cf4:	4650      	mov	r0, sl
 8009cf6:	6921      	ldr	r1, [r4, #16]
 8009cf8:	f7ff f85c 	bl	8008db4 <_free_r>
 8009cfc:	e7c7      	b.n	8009c8e <__ssputs_r+0x46>
	...

08009d00 <_svfiprintf_r>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	4698      	mov	r8, r3
 8009d06:	898b      	ldrh	r3, [r1, #12]
 8009d08:	4607      	mov	r7, r0
 8009d0a:	061b      	lsls	r3, r3, #24
 8009d0c:	460d      	mov	r5, r1
 8009d0e:	4614      	mov	r4, r2
 8009d10:	b09d      	sub	sp, #116	; 0x74
 8009d12:	d50e      	bpl.n	8009d32 <_svfiprintf_r+0x32>
 8009d14:	690b      	ldr	r3, [r1, #16]
 8009d16:	b963      	cbnz	r3, 8009d32 <_svfiprintf_r+0x32>
 8009d18:	2140      	movs	r1, #64	; 0x40
 8009d1a:	f7ff f897 	bl	8008e4c <_malloc_r>
 8009d1e:	6028      	str	r0, [r5, #0]
 8009d20:	6128      	str	r0, [r5, #16]
 8009d22:	b920      	cbnz	r0, 8009d2e <_svfiprintf_r+0x2e>
 8009d24:	230c      	movs	r3, #12
 8009d26:	603b      	str	r3, [r7, #0]
 8009d28:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2c:	e0d1      	b.n	8009ed2 <_svfiprintf_r+0x1d2>
 8009d2e:	2340      	movs	r3, #64	; 0x40
 8009d30:	616b      	str	r3, [r5, #20]
 8009d32:	2300      	movs	r3, #0
 8009d34:	9309      	str	r3, [sp, #36]	; 0x24
 8009d36:	2320      	movs	r3, #32
 8009d38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d3c:	2330      	movs	r3, #48	; 0x30
 8009d3e:	f04f 0901 	mov.w	r9, #1
 8009d42:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009eec <_svfiprintf_r+0x1ec>
 8009d4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d4e:	4623      	mov	r3, r4
 8009d50:	469a      	mov	sl, r3
 8009d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d56:	b10a      	cbz	r2, 8009d5c <_svfiprintf_r+0x5c>
 8009d58:	2a25      	cmp	r2, #37	; 0x25
 8009d5a:	d1f9      	bne.n	8009d50 <_svfiprintf_r+0x50>
 8009d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d60:	d00b      	beq.n	8009d7a <_svfiprintf_r+0x7a>
 8009d62:	465b      	mov	r3, fp
 8009d64:	4622      	mov	r2, r4
 8009d66:	4629      	mov	r1, r5
 8009d68:	4638      	mov	r0, r7
 8009d6a:	f7ff ff6d 	bl	8009c48 <__ssputs_r>
 8009d6e:	3001      	adds	r0, #1
 8009d70:	f000 80aa 	beq.w	8009ec8 <_svfiprintf_r+0x1c8>
 8009d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d76:	445a      	add	r2, fp
 8009d78:	9209      	str	r2, [sp, #36]	; 0x24
 8009d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 80a2 	beq.w	8009ec8 <_svfiprintf_r+0x1c8>
 8009d84:	2300      	movs	r3, #0
 8009d86:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d8e:	f10a 0a01 	add.w	sl, sl, #1
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	9307      	str	r3, [sp, #28]
 8009d96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d9a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d9c:	4654      	mov	r4, sl
 8009d9e:	2205      	movs	r2, #5
 8009da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da4:	4851      	ldr	r0, [pc, #324]	; (8009eec <_svfiprintf_r+0x1ec>)
 8009da6:	f7ff fef5 	bl	8009b94 <memchr>
 8009daa:	9a04      	ldr	r2, [sp, #16]
 8009dac:	b9d8      	cbnz	r0, 8009de6 <_svfiprintf_r+0xe6>
 8009dae:	06d0      	lsls	r0, r2, #27
 8009db0:	bf44      	itt	mi
 8009db2:	2320      	movmi	r3, #32
 8009db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009db8:	0711      	lsls	r1, r2, #28
 8009dba:	bf44      	itt	mi
 8009dbc:	232b      	movmi	r3, #43	; 0x2b
 8009dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc8:	d015      	beq.n	8009df6 <_svfiprintf_r+0xf6>
 8009dca:	4654      	mov	r4, sl
 8009dcc:	2000      	movs	r0, #0
 8009dce:	f04f 0c0a 	mov.w	ip, #10
 8009dd2:	9a07      	ldr	r2, [sp, #28]
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dda:	3b30      	subs	r3, #48	; 0x30
 8009ddc:	2b09      	cmp	r3, #9
 8009dde:	d94e      	bls.n	8009e7e <_svfiprintf_r+0x17e>
 8009de0:	b1b0      	cbz	r0, 8009e10 <_svfiprintf_r+0x110>
 8009de2:	9207      	str	r2, [sp, #28]
 8009de4:	e014      	b.n	8009e10 <_svfiprintf_r+0x110>
 8009de6:	eba0 0308 	sub.w	r3, r0, r8
 8009dea:	fa09 f303 	lsl.w	r3, r9, r3
 8009dee:	4313      	orrs	r3, r2
 8009df0:	46a2      	mov	sl, r4
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	e7d2      	b.n	8009d9c <_svfiprintf_r+0x9c>
 8009df6:	9b03      	ldr	r3, [sp, #12]
 8009df8:	1d19      	adds	r1, r3, #4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	9103      	str	r1, [sp, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	bfbb      	ittet	lt
 8009e02:	425b      	neglt	r3, r3
 8009e04:	f042 0202 	orrlt.w	r2, r2, #2
 8009e08:	9307      	strge	r3, [sp, #28]
 8009e0a:	9307      	strlt	r3, [sp, #28]
 8009e0c:	bfb8      	it	lt
 8009e0e:	9204      	strlt	r2, [sp, #16]
 8009e10:	7823      	ldrb	r3, [r4, #0]
 8009e12:	2b2e      	cmp	r3, #46	; 0x2e
 8009e14:	d10c      	bne.n	8009e30 <_svfiprintf_r+0x130>
 8009e16:	7863      	ldrb	r3, [r4, #1]
 8009e18:	2b2a      	cmp	r3, #42	; 0x2a
 8009e1a:	d135      	bne.n	8009e88 <_svfiprintf_r+0x188>
 8009e1c:	9b03      	ldr	r3, [sp, #12]
 8009e1e:	3402      	adds	r4, #2
 8009e20:	1d1a      	adds	r2, r3, #4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	9203      	str	r2, [sp, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	bfb8      	it	lt
 8009e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e2e:	9305      	str	r3, [sp, #20]
 8009e30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009efc <_svfiprintf_r+0x1fc>
 8009e34:	2203      	movs	r2, #3
 8009e36:	4650      	mov	r0, sl
 8009e38:	7821      	ldrb	r1, [r4, #0]
 8009e3a:	f7ff feab 	bl	8009b94 <memchr>
 8009e3e:	b140      	cbz	r0, 8009e52 <_svfiprintf_r+0x152>
 8009e40:	2340      	movs	r3, #64	; 0x40
 8009e42:	eba0 000a 	sub.w	r0, r0, sl
 8009e46:	fa03 f000 	lsl.w	r0, r3, r0
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	3401      	adds	r4, #1
 8009e4e:	4303      	orrs	r3, r0
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e56:	2206      	movs	r2, #6
 8009e58:	4825      	ldr	r0, [pc, #148]	; (8009ef0 <_svfiprintf_r+0x1f0>)
 8009e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e5e:	f7ff fe99 	bl	8009b94 <memchr>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d038      	beq.n	8009ed8 <_svfiprintf_r+0x1d8>
 8009e66:	4b23      	ldr	r3, [pc, #140]	; (8009ef4 <_svfiprintf_r+0x1f4>)
 8009e68:	bb1b      	cbnz	r3, 8009eb2 <_svfiprintf_r+0x1b2>
 8009e6a:	9b03      	ldr	r3, [sp, #12]
 8009e6c:	3307      	adds	r3, #7
 8009e6e:	f023 0307 	bic.w	r3, r3, #7
 8009e72:	3308      	adds	r3, #8
 8009e74:	9303      	str	r3, [sp, #12]
 8009e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e78:	4433      	add	r3, r6
 8009e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e7c:	e767      	b.n	8009d4e <_svfiprintf_r+0x4e>
 8009e7e:	460c      	mov	r4, r1
 8009e80:	2001      	movs	r0, #1
 8009e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e86:	e7a5      	b.n	8009dd4 <_svfiprintf_r+0xd4>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f04f 0c0a 	mov.w	ip, #10
 8009e8e:	4619      	mov	r1, r3
 8009e90:	3401      	adds	r4, #1
 8009e92:	9305      	str	r3, [sp, #20]
 8009e94:	4620      	mov	r0, r4
 8009e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e9a:	3a30      	subs	r2, #48	; 0x30
 8009e9c:	2a09      	cmp	r2, #9
 8009e9e:	d903      	bls.n	8009ea8 <_svfiprintf_r+0x1a8>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0c5      	beq.n	8009e30 <_svfiprintf_r+0x130>
 8009ea4:	9105      	str	r1, [sp, #20]
 8009ea6:	e7c3      	b.n	8009e30 <_svfiprintf_r+0x130>
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	2301      	movs	r3, #1
 8009eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eb0:	e7f0      	b.n	8009e94 <_svfiprintf_r+0x194>
 8009eb2:	ab03      	add	r3, sp, #12
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	462a      	mov	r2, r5
 8009eb8:	4638      	mov	r0, r7
 8009eba:	4b0f      	ldr	r3, [pc, #60]	; (8009ef8 <_svfiprintf_r+0x1f8>)
 8009ebc:	a904      	add	r1, sp, #16
 8009ebe:	f3af 8000 	nop.w
 8009ec2:	1c42      	adds	r2, r0, #1
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	d1d6      	bne.n	8009e76 <_svfiprintf_r+0x176>
 8009ec8:	89ab      	ldrh	r3, [r5, #12]
 8009eca:	065b      	lsls	r3, r3, #25
 8009ecc:	f53f af2c 	bmi.w	8009d28 <_svfiprintf_r+0x28>
 8009ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ed2:	b01d      	add	sp, #116	; 0x74
 8009ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed8:	ab03      	add	r3, sp, #12
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	462a      	mov	r2, r5
 8009ede:	4638      	mov	r0, r7
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <_svfiprintf_r+0x1f8>)
 8009ee2:	a904      	add	r1, sp, #16
 8009ee4:	f7ff f9d4 	bl	8009290 <_printf_i>
 8009ee8:	e7eb      	b.n	8009ec2 <_svfiprintf_r+0x1c2>
 8009eea:	bf00      	nop
 8009eec:	0800addc 	.word	0x0800addc
 8009ef0:	0800ade6 	.word	0x0800ade6
 8009ef4:	00000000 	.word	0x00000000
 8009ef8:	08009c49 	.word	0x08009c49
 8009efc:	0800ade2 	.word	0x0800ade2

08009f00 <_raise_r>:
 8009f00:	291f      	cmp	r1, #31
 8009f02:	b538      	push	{r3, r4, r5, lr}
 8009f04:	4604      	mov	r4, r0
 8009f06:	460d      	mov	r5, r1
 8009f08:	d904      	bls.n	8009f14 <_raise_r+0x14>
 8009f0a:	2316      	movs	r3, #22
 8009f0c:	6003      	str	r3, [r0, #0]
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f12:	bd38      	pop	{r3, r4, r5, pc}
 8009f14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f16:	b112      	cbz	r2, 8009f1e <_raise_r+0x1e>
 8009f18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f1c:	b94b      	cbnz	r3, 8009f32 <_raise_r+0x32>
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 f830 	bl	8009f84 <_getpid_r>
 8009f24:	462a      	mov	r2, r5
 8009f26:	4601      	mov	r1, r0
 8009f28:	4620      	mov	r0, r4
 8009f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f2e:	f000 b817 	b.w	8009f60 <_kill_r>
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d00a      	beq.n	8009f4c <_raise_r+0x4c>
 8009f36:	1c59      	adds	r1, r3, #1
 8009f38:	d103      	bne.n	8009f42 <_raise_r+0x42>
 8009f3a:	2316      	movs	r3, #22
 8009f3c:	6003      	str	r3, [r0, #0]
 8009f3e:	2001      	movs	r0, #1
 8009f40:	e7e7      	b.n	8009f12 <_raise_r+0x12>
 8009f42:	2400      	movs	r4, #0
 8009f44:	4628      	mov	r0, r5
 8009f46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f4a:	4798      	blx	r3
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	e7e0      	b.n	8009f12 <_raise_r+0x12>

08009f50 <raise>:
 8009f50:	4b02      	ldr	r3, [pc, #8]	; (8009f5c <raise+0xc>)
 8009f52:	4601      	mov	r1, r0
 8009f54:	6818      	ldr	r0, [r3, #0]
 8009f56:	f7ff bfd3 	b.w	8009f00 <_raise_r>
 8009f5a:	bf00      	nop
 8009f5c:	2000000c 	.word	0x2000000c

08009f60 <_kill_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	2300      	movs	r3, #0
 8009f64:	4d06      	ldr	r5, [pc, #24]	; (8009f80 <_kill_r+0x20>)
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	602b      	str	r3, [r5, #0]
 8009f6e:	f7fc fcb2 	bl	80068d6 <_kill>
 8009f72:	1c43      	adds	r3, r0, #1
 8009f74:	d102      	bne.n	8009f7c <_kill_r+0x1c>
 8009f76:	682b      	ldr	r3, [r5, #0]
 8009f78:	b103      	cbz	r3, 8009f7c <_kill_r+0x1c>
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	bd38      	pop	{r3, r4, r5, pc}
 8009f7e:	bf00      	nop
 8009f80:	2000030c 	.word	0x2000030c

08009f84 <_getpid_r>:
 8009f84:	f7fc bca0 	b.w	80068c8 <_getpid>

08009f88 <__sread>:
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f90:	f000 f89c 	bl	800a0cc <_read_r>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	bfab      	itete	ge
 8009f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f9c:	181b      	addge	r3, r3, r0
 8009f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fa2:	bfac      	ite	ge
 8009fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fa6:	81a3      	strhlt	r3, [r4, #12]
 8009fa8:	bd10      	pop	{r4, pc}

08009faa <__swrite>:
 8009faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fae:	461f      	mov	r7, r3
 8009fb0:	898b      	ldrh	r3, [r1, #12]
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	05db      	lsls	r3, r3, #23
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	4616      	mov	r6, r2
 8009fba:	d505      	bpl.n	8009fc8 <__swrite+0x1e>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc4:	f000 f868 	bl	800a098 <_lseek_r>
 8009fc8:	89a3      	ldrh	r3, [r4, #12]
 8009fca:	4632      	mov	r2, r6
 8009fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fd0:	81a3      	strh	r3, [r4, #12]
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	463b      	mov	r3, r7
 8009fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fde:	f000 b817 	b.w	800a010 <_write_r>

08009fe2 <__sseek>:
 8009fe2:	b510      	push	{r4, lr}
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fea:	f000 f855 	bl	800a098 <_lseek_r>
 8009fee:	1c43      	adds	r3, r0, #1
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	bf15      	itete	ne
 8009ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ffe:	81a3      	strheq	r3, [r4, #12]
 800a000:	bf18      	it	ne
 800a002:	81a3      	strhne	r3, [r4, #12]
 800a004:	bd10      	pop	{r4, pc}

0800a006 <__sclose>:
 800a006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a00a:	f000 b813 	b.w	800a034 <_close_r>
	...

0800a010 <_write_r>:
 800a010:	b538      	push	{r3, r4, r5, lr}
 800a012:	4604      	mov	r4, r0
 800a014:	4608      	mov	r0, r1
 800a016:	4611      	mov	r1, r2
 800a018:	2200      	movs	r2, #0
 800a01a:	4d05      	ldr	r5, [pc, #20]	; (800a030 <_write_r+0x20>)
 800a01c:	602a      	str	r2, [r5, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	f7fc fc90 	bl	8006944 <_write>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_write_r+0x1e>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_write_r+0x1e>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	2000030c 	.word	0x2000030c

0800a034 <_close_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	2300      	movs	r3, #0
 800a038:	4d05      	ldr	r5, [pc, #20]	; (800a050 <_close_r+0x1c>)
 800a03a:	4604      	mov	r4, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	602b      	str	r3, [r5, #0]
 800a040:	f7fc fc9c 	bl	800697c <_close>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d102      	bne.n	800a04e <_close_r+0x1a>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	b103      	cbz	r3, 800a04e <_close_r+0x1a>
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	2000030c 	.word	0x2000030c

0800a054 <_fstat_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	2300      	movs	r3, #0
 800a058:	4d06      	ldr	r5, [pc, #24]	; (800a074 <_fstat_r+0x20>)
 800a05a:	4604      	mov	r4, r0
 800a05c:	4608      	mov	r0, r1
 800a05e:	4611      	mov	r1, r2
 800a060:	602b      	str	r3, [r5, #0]
 800a062:	f7fc fc96 	bl	8006992 <_fstat>
 800a066:	1c43      	adds	r3, r0, #1
 800a068:	d102      	bne.n	800a070 <_fstat_r+0x1c>
 800a06a:	682b      	ldr	r3, [r5, #0]
 800a06c:	b103      	cbz	r3, 800a070 <_fstat_r+0x1c>
 800a06e:	6023      	str	r3, [r4, #0]
 800a070:	bd38      	pop	{r3, r4, r5, pc}
 800a072:	bf00      	nop
 800a074:	2000030c 	.word	0x2000030c

0800a078 <_isatty_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	2300      	movs	r3, #0
 800a07c:	4d05      	ldr	r5, [pc, #20]	; (800a094 <_isatty_r+0x1c>)
 800a07e:	4604      	mov	r4, r0
 800a080:	4608      	mov	r0, r1
 800a082:	602b      	str	r3, [r5, #0]
 800a084:	f7fc fc94 	bl	80069b0 <_isatty>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_isatty_r+0x1a>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_isatty_r+0x1a>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	2000030c 	.word	0x2000030c

0800a098 <_lseek_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4604      	mov	r4, r0
 800a09c:	4608      	mov	r0, r1
 800a09e:	4611      	mov	r1, r2
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	4d05      	ldr	r5, [pc, #20]	; (800a0b8 <_lseek_r+0x20>)
 800a0a4:	602a      	str	r2, [r5, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f7fc fc8c 	bl	80069c4 <_lseek>
 800a0ac:	1c43      	adds	r3, r0, #1
 800a0ae:	d102      	bne.n	800a0b6 <_lseek_r+0x1e>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	b103      	cbz	r3, 800a0b6 <_lseek_r+0x1e>
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	2000030c 	.word	0x2000030c

0800a0bc <_malloc_usable_size_r>:
 800a0bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0c0:	1f18      	subs	r0, r3, #4
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	bfbc      	itt	lt
 800a0c6:	580b      	ldrlt	r3, [r1, r0]
 800a0c8:	18c0      	addlt	r0, r0, r3
 800a0ca:	4770      	bx	lr

0800a0cc <_read_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	4611      	mov	r1, r2
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	4d05      	ldr	r5, [pc, #20]	; (800a0ec <_read_r+0x20>)
 800a0d8:	602a      	str	r2, [r5, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	f7fc fc15 	bl	800690a <_read>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d102      	bne.n	800a0ea <_read_r+0x1e>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	b103      	cbz	r3, 800a0ea <_read_r+0x1e>
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	2000030c 	.word	0x2000030c

0800a0f0 <_init>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	bf00      	nop
 800a0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f6:	bc08      	pop	{r3}
 800a0f8:	469e      	mov	lr, r3
 800a0fa:	4770      	bx	lr

0800a0fc <_fini>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	bf00      	nop
 800a100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a102:	bc08      	pop	{r3}
 800a104:	469e      	mov	lr, r3
 800a106:	4770      	bx	lr
